

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Mar 28 15:19:58 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    31                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    32  0000                     
    33                           ; Version 1.41
    34                           ; Generated 25/01/2017 GMT
    35                           ; 
    36                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F4620 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     
    68                           	psect	smallconst
    69  001000                     __psmallconst:
    70                           	opt stack 0
    71  001000  00                 	db	0
    72  001001                     _keys:
    73                           	opt stack 0
    74  001001  31                 	db	49
    75  001002  32                 	db	50
    76  001003  33                 	db	51
    77  001004  41                 	db	65
    78  001005  34                 	db	52
    79  001006  35                 	db	53
    80  001007  36                 	db	54
    81  001008  42                 	db	66
    82  001009  37                 	db	55
    83  00100A  38                 	db	56
    84  00100B  39                 	db	57
    85  00100C  43                 	db	67
    86  00100D  2A                 	db	42
    87  00100E  30                 	db	48
    88  00100F  23                 	db	35
    89  001010  44                 	db	68
    90  001011  00                 	db	0
    91  001012                     __end_of_keys:
    92                           	opt stack 0
    93  001012                     _hexpowers:
    94                           	opt stack 0
    95  001012  0001               	dw	1
    96  001014  0010               	dw	16
    97  001016  0100               	dw	256
    98  001018  1000               	dw	4096
    99  00101A                     __end_of_hexpowers:
   100                           	opt stack 0
   101  0000                     _PORTBbits	set	3969
   102  0000                     _PORTB	set	3969
   103  0000                     _INTCONbits	set	4082
   104  0000                     _ADCON1	set	4033
   105  0000                     _ADCON0	set	4034
   106  0000                     _LATC	set	3979
   107  0000                     _LATB	set	3978
   108  0000                     _TRISB	set	3987
   109  0000                     _TRISD	set	3989
   110  0000                     _TRISC	set	3988
   111  0000                     _LATD	set	3980
   112  0000                     _LATDbits	set	3980
   113  0000                     _INT1IF	set	32640
   114  0000                     _INT1IE	set	32643
   115  00101A                     STR_5:
   116  00101A  54                 	db	84	;'T'
   117  00101B  6F                 	db	111	;'o'
   118  00101C  74                 	db	116	;'t'
   119  00101D  61                 	db	97	;'a'
   120  00101E  6C                 	db	108	;'l'
   121  00101F  20                 	db	32
   122  001020  53                 	db	83	;'S'
   123  001021  6F                 	db	111	;'o'
   124  001022  72                 	db	114	;'r'
   125  001023  74                 	db	116	;'t'
   126  001024  65                 	db	101	;'e'
   127  001025  64                 	db	100	;'d'
   128  001026  3A                 	db	58	;':'
   129  001027  20                 	db	32
   130  001028  25                 	db	37
   131  001029  30                 	db	48	;'0'
   132  00102A  32                 	db	50	;'2'
   133  00102B  78                 	db	120	;'x'
   134  00102C  00                 	db	0
   135  00102D                     STR_13:
   136  00102D  30                 	db	48	;'0'
   137  00102E  31                 	db	49	;'1'
   138  00102F  32                 	db	50	;'2'
   139  001030  33                 	db	51	;'3'
   140  001031  34                 	db	52	;'4'
   141  001032  35                 	db	53	;'5'
   142  001033  36                 	db	54	;'6'
   143  001034  37                 	db	55	;'7'
   144  001035  38                 	db	56	;'8'
   145  001036  39                 	db	57	;'9'
   146  001037  61                 	db	97	;'a'
   147  001038  62                 	db	98	;'b'
   148  001039  63                 	db	99	;'c'
   149  00103A  64                 	db	100	;'d'
   150  00103B  65                 	db	101	;'e'
   151  00103C  66                 	db	102	;'f'
   152  00103D  00                 	db	0
   153  00103E                     STR_2:
   154  00103E  41                 	db	65	;'A'
   155  00103F  3A                 	db	58	;':'
   156  001040  54                 	db	84	;'T'
   157  001041  6F                 	db	111	;'o'
   158  001042  74                 	db	116	;'t'
   159  001043  61                 	db	97	;'a'
   160  001044  6C                 	db	108	;'l'
   161  001045  20                 	db	32
   162  001046  20                 	db	32
   163  001047  20                 	db	32
   164  001048  42                 	db	66	;'B'
   165  001049  3A                 	db	58	;':'
   166  00104A  50                 	db	80	;'P'
   167  00104B  6F                 	db	111	;'o'
   168  00104C  70                 	db	112	;'p'
   169  00104D  20                 	db	32
   170  00104E  00                 	db	0
   171  00104F                     STR_3:
   172  00104F  43                 	db	67	;'C'
   173  001050  3A                 	db	58	;':'
   174  001051  54                 	db	84	;'T'
   175  001052  69                 	db	105	;'i'
   176  001053  6E                 	db	110	;'n'
   177  001054  20                 	db	32
   178  001055  20                 	db	32
   179  001056  20                 	db	32
   180  001057  20                 	db	32
   181  001058  20                 	db	32
   182  001059  44                 	db	68	;'D'
   183  00105A  3A                 	db	58	;':'
   184  00105B  54                 	db	84	;'T'
   185  00105C  69                 	db	105	;'i'
   186  00105D  6D                 	db	109	;'m'
   187  00105E  65                 	db	101	;'e'
   188  00105F  00                 	db	0
   189  001060                     STR_4:
   190  001060  50                 	db	80	;'P'
   191  001061  72                 	db	114	;'r'
   192  001062  65                 	db	101	;'e'
   193  001063  73                 	db	115	;'s'
   194  001064  73                 	db	115	;'s'
   195  001065  20                 	db	32
   196  001066  30                 	db	48	;'0'
   197  001067  20                 	db	32
   198  001068  74                 	db	116	;'t'
   199  001069  6F                 	db	111	;'o'
   200  00106A  20                 	db	32
   201  00106B  52                 	db	82	;'R'
   202  00106C  65                 	db	101	;'e'
   203  00106D  73                 	db	115	;'s'
   204  00106E  65                 	db	101	;'e'
   205  00106F  74                 	db	116	;'t'
   206  001070  00                 	db	0
   207  001071                     STR_1:
   208  001071  50                 	db	80	;'P'
   209  001072  72                 	db	114	;'r'
   210  001073  65                 	db	101	;'e'
   211  001074  73                 	db	115	;'s'
   212  001075  73                 	db	115	;'s'
   213  001076  20                 	db	32
   214  001077  23                 	db	35
   215  001078  20                 	db	32
   216  001079  74                 	db	116	;'t'
   217  00107A  6F                 	db	111	;'o'
   218  00107B  20                 	db	32
   219  00107C  53                 	db	83	;'S'
   220  00107D  74                 	db	116	;'t'
   221  00107E  61                 	db	97	;'a'
   222  00107F  72                 	db	114	;'r'
   223  001080  74                 	db	116	;'t'
   224  001081  00                 	db	0
   225  001082                     STR_8:
   226  001082  57                 	db	87	;'W'
   227  001083  69                 	db	105	;'i'
   228  001084  74                 	db	116	;'t'
   229  001085  68                 	db	104	;'h'
   230  001086  20                 	db	32
   231  001087  4C                 	db	76	;'L'
   232  001088  61                 	db	97	;'a'
   233  001089  62                 	db	98	;'b'
   234  00108A  65                 	db	101	;'e'
   235  00108B  6C                 	db	108	;'l'
   236  00108C  3A                 	db	58	;':'
   237  00108D  20                 	db	32
   238  00108E  25                 	db	37
   239  00108F  30                 	db	48	;'0'
   240  001090  32                 	db	50	;'2'
   241  001091  78                 	db	120	;'x'
   242  001092  00                 	db	0
   243  001093                     STR_6:
   244  001093  57                 	db	87	;'W'
   245  001094  69                 	db	105	;'i'
   246  001095  74                 	db	116	;'t'
   247  001096  68                 	db	104	;'h'
   248  001097  20                 	db	32
   249  001098  54                 	db	84	;'T'
   250  001099  61                 	db	97	;'a'
   251  00109A  62                 	db	98	;'b'
   252  00109B  3A                 	db	58	;':'
   253  00109C  20                 	db	32
   254  00109D  25                 	db	37
   255  00109E  30                 	db	48	;'0'
   256  00109F  32                 	db	50	;'2'
   257  0010A0  78                 	db	120	;'x'
   258  0010A1  00                 	db	0
   259  0010A2                     STR_9:
   260  0010A2  4E                 	db	78	;'N'
   261  0010A3  6F                 	db	111	;'o'
   262  0010A4  20                 	db	32
   263  0010A5  4C                 	db	76	;'L'
   264  0010A6  61                 	db	97	;'a'
   265  0010A7  62                 	db	98	;'b'
   266  0010A8  65                 	db	101	;'e'
   267  0010A9  6C                 	db	108	;'l'
   268  0010AA  3A                 	db	58	;':'
   269  0010AB  20                 	db	32
   270  0010AC  25                 	db	37
   271  0010AD  30                 	db	48	;'0'
   272  0010AE  32                 	db	50	;'2'
   273  0010AF  78                 	db	120	;'x'
   274  0010B0  00                 	db	0
   275  0010B1                     STR_10:
   276  0010B1  54                 	db	84	;'T'
   277  0010B2  69                 	db	105	;'i'
   278  0010B3  6D                 	db	109	;'m'
   279  0010B4  65                 	db	101	;'e'
   280  0010B5  3A                 	db	58	;':'
   281  0010B6  20                 	db	32
   282  0010B7  25                 	db	37
   283  0010B8  30                 	db	48	;'0'
   284  0010B9  32                 	db	50	;'2'
   285  0010BA  78                 	db	120	;'x'
   286  0010BB  20                 	db	32
   287  0010BC  73                 	db	115	;'s'
   288  0010BD  00                 	db	0
   289  0010BE                     STR_7:
   290  0010BE  4E                 	db	78	;'N'
   291  0010BF  6F                 	db	111	;'o'
   292  0010C0  20                 	db	32
   293  0010C1  54                 	db	84	;'T'
   294  0010C2  61                 	db	97	;'a'
   295  0010C3  62                 	db	98	;'b'
   296  0010C4  3A                 	db	58	;':'
   297  0010C5  20                 	db	32
   298  0010C6  25                 	db	37
   299  0010C7  30                 	db	48	;'0'
   300  0010C8  32                 	db	50	;'2'
   301  0010C9  78                 	db	120	;'x'
   302  0010CA  00                 	db	0
   303  0010CB                     STR_12:
   304  0010CB  43                 	db	67	;'C'
   305  0010CC  6F                 	db	111	;'o'
   306  0010CD  6D                 	db	109	;'m'
   307  0010CE  70                 	db	112	;'p'
   308  0010CF  6C                 	db	108	;'l'
   309  0010D0  65                 	db	101	;'e'
   310  0010D1  74                 	db	116	;'t'
   311  0010D2  65                 	db	101	;'e'
   312  0010D3  64                 	db	100	;'d'
   313  0010D4  00                 	db	0
   314  0010D5                     STR_11:
   315  0010D5  53                 	db	83	;'S'
   316  0010D6  6F                 	db	111	;'o'
   317  0010D7  72                 	db	114	;'r'
   318  0010D8  74                 	db	116	;'t'
   319  0010D9  69                 	db	105	;'i'
   320  0010DA  6E                 	db	110	;'n'
   321  0010DB  67                 	db	103	;'g'
   322  0010DC  00                 	db	0
   323                           
   324                           ; #config settings
   325  0010DD  00                 	db	0	; dummy byte at the end
   326  0000                     
   327                           	psect	cinit
   328  001D00                     __pcinit:
   329                           	opt stack 0
   330  001D00                     start_initialization:
   331                           	opt stack 0
   332  001D00                     __initialization:
   333                           	opt stack 0
   334                           
   335                           ; Clear objects allocated to BANK0 (2 bytes)
   336  001D00  0100               	movlb	0
   337  001D02  6B9E               	clrf	(__pbssBANK0+1)& (0+255),b
   338  001D04  6B9D               	clrf	__pbssBANK0& (0+255),b
   339  001D06                     end_of_initialization:
   340                           	opt stack 0
   341  001D06                     __end_of__initialization:
   342                           	opt stack 0
   343  001D06  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   344  001D08  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   345  001D0A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   346  001D0C  6EF8               	movwf	tblptru,c
   347  001D0E  0100               	movlb	0
   348  001D10  EF7E  F00C         	goto	_main	;jump to C main() function
   349                           tblptru	equ	0xFF8
   350                           
   351                           	psect	bssBANK0
   352  00009D                     __pbssBANK0:
   353                           	opt stack 0
   354  00009D                     _passed:
   355                           	opt stack 0
   356  00009D                     	ds	2
   357                           tblptru	equ	0xFF8
   358                           
   359                           	psect	cstackBANK0
   360  000080                     __pcstackBANK0:
   361                           	opt stack 0
   362  000080                     ??_isdigit:
   363  000080                     ?___wmul:
   364                           	opt stack 0
   365  000080                     ?___lwdiv:
   366                           	opt stack 0
   367  000080                     lcdNibble@temp:
   368                           	opt stack 0
   369  000080                     ___wmul@multiplier:
   370                           	opt stack 0
   371  000080                     ___lwdiv@dividend:
   372                           	opt stack 0
   373                           
   374                           ; 2 bytes @ 0x0
   375  000080                     	ds	1
   376  000081                     lcdNibble@data:
   377                           	opt stack 0
   378  000081                     _isdigit$543:
   379                           	opt stack 0
   380                           
   381                           ; 1 bytes @ 0x1
   382  000081                     	ds	1
   383  000082                     lcdInst@data:
   384                           	opt stack 0
   385  000082                     putch@data:
   386                           	opt stack 0
   387  000082                     isdigit@c:
   388                           	opt stack 0
   389  000082                     ___wmul@multiplicand:
   390                           	opt stack 0
   391  000082                     ___lwdiv@divisor:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x2
   395  000082                     	ds	1
   396  000083                     ??_initLCD:
   397                           
   398                           ; 1 bytes @ 0x3
   399  000083                     	ds	1
   400  000084                     ___wmul@product:
   401                           	opt stack 0
   402  000084                     ___lwdiv@quotient:
   403                           	opt stack 0
   404                           
   405                           ; 2 bytes @ 0x4
   406  000084                     	ds	2
   407  000086                     ___lwdiv@counter:
   408                           	opt stack 0
   409                           
   410                           ; 1 bytes @ 0x6
   411  000086                     	ds	1
   412  000087                     ?_printf:
   413                           	opt stack 0
   414  000087                     printf@f:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0x7
   418  000087                     	ds	2
   419  000089                     ??_printf:
   420                           
   421                           ; 1 bytes @ 0x9
   422  000089                     	ds	4
   423  00008D                     printf@ap:
   424                           	opt stack 0
   425                           
   426                           ; 2 bytes @ 0xD
   427  00008D                     	ds	2
   428  00008F                     printf@idx:
   429                           	opt stack 0
   430                           
   431                           ; 1 bytes @ 0xF
   432  00008F                     	ds	1
   433  000090                     printf@flag:
   434                           	opt stack 0
   435                           
   436                           ; 1 bytes @ 0x10
   437  000090                     	ds	1
   438  000091                     printf@val:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x11
   442  000091                     	ds	2
   443  000093                     printf@prec:
   444                           	opt stack 0
   445                           
   446                           ; 1 bytes @ 0x13
   447  000093                     	ds	1
   448  000094                     printf@width:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x14
   452  000094                     	ds	2
   453  000096                     printf@c:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0x16
   457  000096                     	ds	1
   458  000097                     ??_main:
   459                           
   460                           ; 1 bytes @ 0x17
   461  000097                     	ds	1
   462  000098                     main@keypress:
   463                           	opt stack 0
   464                           
   465                           ; 1 bytes @ 0x18
   466  000098                     	ds	1
   467  000099                     main@i:
   468                           	opt stack 0
   469                           
   470                           ; 1 bytes @ 0x19
   471  000099                     	ds	1
   472  00009A                     main@i_258:
   473                           	opt stack 0
   474                           
   475                           ; 1 bytes @ 0x1A
   476  00009A                     	ds	1
   477  00009B                     main@i_259:
   478                           	opt stack 0
   479                           
   480                           ; 1 bytes @ 0x1B
   481  00009B                     	ds	1
   482  00009C                     main@i_261:
   483                           	opt stack 0
   484                           
   485                           ; 1 bytes @ 0x1C
   486  00009C                     	ds	1
   487                           tblptru	equ	0xFF8
   488                           
   489                           	psect	cstackCOMRAM
   490  000001                     __pcstackCOMRAM:
   491                           	opt stack 0
   492  000001                     ??i2_isdigit:
   493  000001                     ?i2___wmul:
   494                           	opt stack 0
   495  000001                     ?i2___lwdiv:
   496                           	opt stack 0
   497  000001                     i2lcdNibble@temp:
   498                           	opt stack 0
   499  000001                     i2___wmul@multiplier:
   500                           	opt stack 0
   501  000001                     i2___lwdiv@dividend:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x0
   505  000001                     	ds	1
   506  000002                     i2lcdNibble@data:
   507                           	opt stack 0
   508  000002                     i2_isdigit$543:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0x1
   512  000002                     	ds	1
   513  000003                     i2lcdInst@data:
   514                           	opt stack 0
   515  000003                     i2putch@data:
   516                           	opt stack 0
   517  000003                     i2isdigit@c:
   518                           	opt stack 0
   519  000003                     i2___wmul@multiplicand:
   520                           	opt stack 0
   521  000003                     i2___lwdiv@divisor:
   522                           	opt stack 0
   523                           
   524                           ; 2 bytes @ 0x2
   525  000003                     	ds	1
   526  000004                     ??i2_initLCD:
   527                           
   528                           ; 1 bytes @ 0x3
   529  000004                     	ds	1
   530  000005                     i2___wmul@product:
   531                           	opt stack 0
   532  000005                     i2___lwdiv@quotient:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x4
   536  000005                     	ds	2
   537  000007                     i2___lwdiv@counter:
   538                           	opt stack 0
   539                           
   540                           ; 1 bytes @ 0x6
   541  000007                     	ds	1
   542  000008                     ?i2_printf:
   543                           	opt stack 0
   544  000008                     i2printf@f:
   545                           	opt stack 0
   546                           
   547                           ; 2 bytes @ 0x7
   548  000008                     	ds	4
   549  00000C                     ??i2_printf:
   550                           
   551                           ; 1 bytes @ 0xB
   552  00000C                     	ds	4
   553  000010                     i2printf@idx:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0xF
   557  000010                     	ds	1
   558  000011                     i2printf@ap:
   559                           	opt stack 0
   560                           
   561                           ; 2 bytes @ 0x10
   562  000011                     	ds	2
   563  000013                     i2printf@flag:
   564                           	opt stack 0
   565                           
   566                           ; 1 bytes @ 0x12
   567  000013                     	ds	1
   568  000014                     i2printf@val:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x13
   572  000014                     	ds	2
   573  000016                     i2printf@prec:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x15
   577  000016                     	ds	1
   578  000017                     i2printf@width:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0x16
   582  000017                     	ds	2
   583  000019                     i2printf@c:
   584                           	opt stack 0
   585                           
   586                           ; 1 bytes @ 0x18
   587  000019                     	ds	1
   588  00001A                     ??_keypressed:
   589                           
   590                           ; 1 bytes @ 0x19
   591  00001A                     	ds	15
   592  000029                     keypressed@pop_can:
   593                           	opt stack 0
   594                           
   595                           ; 2 bytes @ 0x28
   596  000029                     	ds	2
   597  00002B                     keypressed@pop_can_tab:
   598                           	opt stack 0
   599                           
   600                           ; 2 bytes @ 0x2A
   601  00002B                     	ds	2
   602  00002D                     keypressed@tin_can:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x2C
   606  00002D                     	ds	2
   607  00002F                     keypressed@tin_can_label:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x2E
   611  00002F                     	ds	2
   612  000031                     keypressed@operation_time:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x30
   616  000031                     	ds	2
   617  000033                     keypressed@tot:
   618                           	opt stack 0
   619                           
   620                           ; 2 bytes @ 0x32
   621  000033                     	ds	2
   622  000035                     keypressed@keypress:
   623                           	opt stack 0
   624                           
   625                           ; 1 bytes @ 0x34
   626  000035                     	ds	1
   627  000036                     keypressed@i:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x35
   631  000036                     	ds	1
   632  000037                     keypressed@i_275:
   633                           	opt stack 0
   634                           
   635                           ; 1 bytes @ 0x36
   636  000037                     	ds	1
   637  000038                     keypressed@i_276:
   638                           	opt stack 0
   639                           
   640                           ; 1 bytes @ 0x37
   641  000038                     	ds	1
   642  000039                     keypressed@i_279:
   643                           	opt stack 0
   644                           
   645                           ; 1 bytes @ 0x38
   646  000039                     	ds	1
   647  00003A                     keypressed@i_280:
   648                           	opt stack 0
   649                           
   650                           ; 1 bytes @ 0x39
   651  00003A                     	ds	1
   652  00003B                     keypressed@i_281:
   653                           	opt stack 0
   654                           
   655                           ; 1 bytes @ 0x3A
   656  00003B                     	ds	1
   657  00003C                     keypressed@i_284:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x3B
   661  00003C                     	ds	1
   662  00003D                     keypressed@i_285:
   663                           	opt stack 0
   664                           
   665                           ; 1 bytes @ 0x3C
   666  00003D                     	ds	1
   667  00003E                     keypressed@i_286:
   668                           	opt stack 0
   669                           
   670                           ; 1 bytes @ 0x3D
   671  00003E                     	ds	1
   672  00003F                     keypressed@i_288:
   673                           	opt stack 0
   674                           
   675                           ; 1 bytes @ 0x3E
   676  00003F                     	ds	1
   677  000040                     keypressed@i_289:
   678                           	opt stack 0
   679                           
   680                           ; 1 bytes @ 0x3F
   681  000040                     	ds	1
   682  000041                     keypressed@i_290:
   683                           	opt stack 0
   684                           
   685                           ; 1 bytes @ 0x40
   686  000041                     	ds	1
   687  000042                     keypressed@i_292:
   688                           	opt stack 0
   689                           
   690                           ; 1 bytes @ 0x41
   691  000042                     	ds	1
   692  000043                     keypressed@i_293:
   693                           	opt stack 0
   694                           
   695                           ; 1 bytes @ 0x42
   696  000043                     	ds	1
   697  000044                     keypressed@i_294:
   698                           	opt stack 0
   699                           
   700                           ; 1 bytes @ 0x43
   701  000044                     	ds	1
   702  000045                     keypressed@keypress_temp:
   703                           	opt stack 0
   704                           
   705                           ; 1 bytes @ 0x44
   706  000045                     	ds	1
   707                           tblptru	equ	0xFF8
   708                           
   709 ;;
   710 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   711 ;;
   712 ;; *************** function _main *****************
   713 ;; Defined at:
   714 ;;		line 23 in file "main.c"
   715 ;; Parameters:    Size  Location     Type
   716 ;;		None
   717 ;; Auto vars:     Size  Location     Type
   718 ;;  i               1   28[BANK0 ] unsigned char 
   719 ;;  i               1   27[BANK0 ] unsigned char 
   720 ;;  i               1   26[BANK0 ] unsigned char 
   721 ;;  i               1   25[BANK0 ] unsigned char 
   722 ;;  keypress        1   24[BANK0 ] unsigned char 
   723 ;; Return value:  Size  Location     Type
   724 ;;                  1    wreg      void 
   725 ;; Registers used:
   726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   727 ;; Tracked objects:
   728 ;;		On entry : 0/0
   729 ;;		On exit  : 0/0
   730 ;;		Unchanged: 0/0
   731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   733 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   734 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   735 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   736 ;;Total ram usage:        6 bytes
   737 ;; Hardware stack levels required when called:    7
   738 ;; This function calls:
   739 ;;		_initLCD
   740 ;;		_lcdInst
   741 ;;		_printf
   742 ;; This function is called by:
   743 ;;		Startup code after reset
   744 ;; This function uses a non-reentrant model
   745 ;;
   746                           
   747                           	psect	text0
   748  0018FC                     __ptext0:
   749                           	opt stack 0
   750  0018FC                     _main:
   751                           	opt stack 24
   752                           
   753                           ;main.c: 24: TRISC = 0x00;
   754                           
   755                           ;incstack = 0
   756  0018FC  0E00               	movlw	0
   757  0018FE  6E94               	movwf	3988,c	;volatile
   758                           
   759                           ;main.c: 25: TRISD = 0x00;
   760  001900  0E00               	movlw	0
   761  001902  6E95               	movwf	3989,c	;volatile
   762                           
   763                           ;main.c: 27: TRISB = 0b11110010;
   764  001904  0EF2               	movlw	242
   765  001906  6E93               	movwf	3987,c	;volatile
   766                           
   767                           ;main.c: 28: LATB = 0x00;
   768  001908  0E00               	movlw	0
   769  00190A  6E8A               	movwf	3978,c	;volatile
   770                           
   771                           ;main.c: 29: LATC = 0x00;
   772  00190C  0E00               	movlw	0
   773  00190E  6E8B               	movwf	3979,c	;volatile
   774                           
   775                           ;main.c: 30: ADCON0 = 0x00;
   776  001910  0E00               	movlw	0
   777  001912  6EC2               	movwf	4034,c	;volatile
   778                           
   779                           ;main.c: 31: ADCON1 = 0xFF;
   780  001914  68C1               	setf	4033,c	;volatile
   781                           
   782                           ;main.c: 32: initLCD();
   783  001916  ECE6  F00D         	call	_initLCD	;wreg free
   784                           
   785                           ;main.c: 33: INT1IE = 1;
   786  00191A  86F0               	bsf	intcon3,3,c	;volatile
   787                           
   788                           ;main.c: 34: (INTCONbits.GIE = 1);
   789  00191C  8EF2               	bsf	intcon,7,c	;volatile
   790                           
   791                           ;main.c: 36: while(passed == 0){
   792                           
   793                           ;main.c: 35: while(1){
   794  00191E  D020               	goto	l1732
   795  001920                     l1714:
   796                           
   797                           ;main.c: 37: initLCD();
   798  001920  ECE6  F00D         	call	_initLCD	;wreg free
   799                           
   800                           ;main.c: 38: (INTCONbits.GIE = 0);
   801  001924  9EF2               	bcf	intcon,7,c	;volatile
   802                           
   803                           ;main.c: 39: printf("Press # to Start");
   804  001926  0E71               	movlw	low STR_1
   805  001928  0100               	movlb	0	; () banked
   806  00192A  6F87               	movwf	printf@f& (0+255),b
   807  00192C  0E10               	movlw	high STR_1
   808  00192E  0100               	movlb	0	; () banked
   809  001930  6F88               	movwf	(printf@f+1)& (0+255),b
   810  001932  EC4E  F00A         	call	_printf	;wreg free
   811                           
   812                           ;main.c: 40: (INTCONbits.GIE = 1);
   813  001936  8EF2               	bsf	intcon,7,c	;volatile
   814                           
   815                           ;main.c: 41: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
   816  001938  0E00               	movlw	0
   817  00193A  0100               	movlb	0	; () banked
   818  00193C  6F99               	movwf	main@i& (0+255),b
   819  00193E                     l1724:
   820                           
   821                           ; BSR set to: 0
   822  00193E  0E63               	movlw	99
   823  001940  0100               	movlb	0	; () banked
   824  001942  6599               	cpfsgt	main@i& (0+255),b
   825  001944  D001               	goto	l1728
   826  001946  D00C               	goto	l1732
   827  001948                     l1728:
   828                           
   829                           ; BSR set to: 0
   830  001948  0E21               	movlw	33
   831  00194A  0100               	movlb	0	; () banked
   832  00194C  6F97               	movwf	??_main& (0+255),b
   833  00194E  0E76               	movlw	118
   834  001950                     u1717:
   835  001950  2EE8               	decfsz	wreg,f,c
   836  001952  D7FE               	bra	u1717
   837  001954  2F97               	decfsz	??_main& (0+255),f,b
   838  001956  D7FC               	bra	u1717
   839  001958  F000               	nop	
   840  00195A  0100               	movlb	0	; () banked
   841  00195C  2B99               	incf	main@i& (0+255),f,b
   842  00195E  D7EF               	goto	l1724
   843  001960                     l1732:
   844  001960  0100               	movlb	0	; () banked
   845  001962  519D               	movf	_passed& (0+255),w,b
   846  001964  0100               	movlb	0	; () banked
   847  001966  119E               	iorwf	(_passed+1)& (0+255),w,b
   848  001968  B4D8               	btfsc	status,2,c
   849  00196A  D7DA               	goto	l1714
   850                           
   851                           ; BSR set to: 0
   852                           ;main.c: 42: }
   853                           ;main.c: 46: unsigned char keypress = (PORTB & 0xF0)>>4;
   854                           
   855                           ; BSR set to: 0
   856  00196C  3881               	swapf	3969,w,c	;volatile
   857  00196E  0B0F               	andlw	15
   858  001970  0B0F               	andlw	15
   859  001972  0100               	movlb	0	; () banked
   860  001974  6F98               	movwf	main@keypress& (0+255),b
   861  001976                     l71:
   862  001976  B281               	btfsc	3969,1,c	;volatile
   863  001978  D7FE               	goto	l71
   864  00197A                     l74:
   865                           
   866                           ;main.c: 52: (INTCONbits.GIE = 0);
   867  00197A  9EF2               	bcf	intcon,7,c	;volatile
   868                           
   869                           ;main.c: 53: initLCD();
   870  00197C  ECE6  F00D         	call	_initLCD	;wreg free
   871                           
   872                           ;main.c: 54: printf("A:Total   B:Pop ");
   873  001980  0E3E               	movlw	low STR_2
   874  001982  0100               	movlb	0	; () banked
   875  001984  6F87               	movwf	printf@f& (0+255),b
   876  001986  0E10               	movlw	high STR_2
   877  001988  0100               	movlb	0	; () banked
   878  00198A  6F88               	movwf	(printf@f+1)& (0+255),b
   879  00198C  EC4E  F00A         	call	_printf	;wreg free
   880                           
   881                           ;main.c: 55: lcdInst(0b11000000);;
   882  001990  0EC0               	movlw	192
   883  001992  EC92  F00E         	call	_lcdInst
   884                           
   885                           ;main.c: 56: printf("C:Tin     D:Time");
   886  001996  0E4F               	movlw	low STR_3
   887  001998  0100               	movlb	0	; () banked
   888  00199A  6F87               	movwf	printf@f& (0+255),b
   889  00199C  0E10               	movlw	high STR_3
   890  00199E  0100               	movlb	0	; () banked
   891  0019A0  6F88               	movwf	(printf@f+1)& (0+255),b
   892  0019A2  EC4E  F00A         	call	_printf	;wreg free
   893                           
   894                           ;main.c: 57: (INTCONbits.GIE = 1);
   895  0019A6  8EF2               	bsf	intcon,7,c	;volatile
   896                           
   897                           ;main.c: 58: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
   898  0019A8  0E00               	movlw	0
   899  0019AA  0100               	movlb	0	; () banked
   900  0019AC  6F9A               	movwf	main@i_258& (0+255),b
   901  0019AE                     l1746:
   902                           
   903                           ; BSR set to: 0
   904  0019AE  0E63               	movlw	99
   905  0019B0  0100               	movlb	0	; () banked
   906  0019B2  659A               	cpfsgt	main@i_258& (0+255),b
   907  0019B4  D001               	goto	l1750
   908  0019B6  D00C               	goto	l1754
   909  0019B8                     l1750:
   910                           
   911                           ; BSR set to: 0
   912  0019B8  0E21               	movlw	33
   913  0019BA  0100               	movlb	0	; () banked
   914  0019BC  6F97               	movwf	??_main& (0+255),b
   915  0019BE  0E76               	movlw	118
   916  0019C0                     u1727:
   917  0019C0  2EE8               	decfsz	wreg,f,c
   918  0019C2  D7FE               	bra	u1727
   919  0019C4  2F97               	decfsz	??_main& (0+255),f,b
   920  0019C6  D7FC               	bra	u1727
   921  0019C8  F000               	nop	
   922  0019CA  0100               	movlb	0	; () banked
   923  0019CC  2B9A               	incf	main@i_258& (0+255),f,b
   924  0019CE  D7EF               	goto	l1746
   925  0019D0                     l1754:
   926                           
   927                           ; BSR set to: 0
   928                           ;main.c: 59: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
   929  0019D0  0E00               	movlw	0
   930  0019D2  0100               	movlb	0	; () banked
   931  0019D4  6F9B               	movwf	main@i_259& (0+255),b
   932  0019D6                     l1756:
   933                           
   934                           ; BSR set to: 0
   935  0019D6  0E63               	movlw	99
   936  0019D8  0100               	movlb	0	; () banked
   937  0019DA  659B               	cpfsgt	main@i_259& (0+255),b
   938  0019DC  D001               	goto	l1760
   939  0019DE  D00C               	goto	l78
   940  0019E0                     l1760:
   941                           
   942                           ; BSR set to: 0
   943  0019E0  0E21               	movlw	33
   944  0019E2  0100               	movlb	0	; () banked
   945  0019E4  6F97               	movwf	??_main& (0+255),b
   946  0019E6  0E76               	movlw	118
   947  0019E8                     u1737:
   948  0019E8  2EE8               	decfsz	wreg,f,c
   949  0019EA  D7FE               	bra	u1737
   950  0019EC  2F97               	decfsz	??_main& (0+255),f,b
   951  0019EE  D7FC               	bra	u1737
   952  0019F0  F000               	nop	
   953  0019F2  0100               	movlb	0	; () banked
   954  0019F4  2B9B               	incf	main@i_259& (0+255),f,b
   955  0019F6  D7EF               	goto	l1756
   956  0019F8                     l78:
   957                           
   958                           ; BSR set to: 0
   959                           ;main.c: 60: (INTCONbits.GIE = 0);
   960  0019F8  9EF2               	bcf	intcon,7,c	;volatile
   961                           
   962                           ; BSR set to: 0
   963                           ;main.c: 61: lcdInst(0b10000000);;
   964  0019FA  0E80               	movlw	128
   965  0019FC  EC92  F00E         	call	_lcdInst
   966                           
   967                           ;main.c: 62: initLCD();
   968  001A00  ECE6  F00D         	call	_initLCD	;wreg free
   969                           
   970                           ;main.c: 63: printf("Press 0 to Reset");
   971  001A04  0E60               	movlw	low STR_4
   972  001A06  0100               	movlb	0	; () banked
   973  001A08  6F87               	movwf	printf@f& (0+255),b
   974  001A0A  0E10               	movlw	high STR_4
   975  001A0C  0100               	movlb	0	; () banked
   976  001A0E  6F88               	movwf	(printf@f+1)& (0+255),b
   977  001A10  EC4E  F00A         	call	_printf	;wreg free
   978                           
   979                           ;main.c: 64: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
   980  001A14  0E00               	movlw	0
   981  001A16  0100               	movlb	0	; () banked
   982  001A18  6F9C               	movwf	main@i_261& (0+255),b
   983  001A1A                     l1770:
   984                           
   985                           ; BSR set to: 0
   986  001A1A  0E63               	movlw	99
   987  001A1C  0100               	movlb	0	; () banked
   988  001A1E  659C               	cpfsgt	main@i_261& (0+255),b
   989  001A20  D001               	goto	l1774
   990  001A22  D00C               	goto	l80
   991  001A24                     l1774:
   992                           
   993                           ; BSR set to: 0
   994  001A24  0E21               	movlw	33
   995  001A26  0100               	movlb	0	; () banked
   996  001A28  6F97               	movwf	??_main& (0+255),b
   997  001A2A  0E76               	movlw	118
   998  001A2C                     u1747:
   999  001A2C  2EE8               	decfsz	wreg,f,c
  1000  001A2E  D7FE               	bra	u1747
  1001  001A30  2F97               	decfsz	??_main& (0+255),f,b
  1002  001A32  D7FC               	bra	u1747
  1003  001A34  F000               	nop	
  1004  001A36  0100               	movlb	0	; () banked
  1005  001A38  2B9C               	incf	main@i_261& (0+255),f,b
  1006  001A3A  D7EF               	goto	l1770
  1007  001A3C                     l80:
  1008                           
  1009                           ; BSR set to: 0
  1010                           ;main.c: 65: (INTCONbits.GIE = 1);
  1011  001A3C  8EF2               	bsf	intcon,7,c	;volatile
  1012                           
  1013                           ; BSR set to: 0
  1014  001A3E  D79D               	goto	l74
  1015                           
  1016                           ; BSR set to: 0
  1017                           ;main.c: 66: }
  1018                           ;main.c: 67: __nop();
  1019  001A40  F000               	nop	
  1020                           
  1021                           ;main.c: 68: __nop();
  1022  001A42  F000               	nop	
  1023  001A44                     __end_of_main:
  1024                           	opt stack 0
  1025                           tblptru	equ	0xFF8
  1026                           intcon	equ	0xFF2
  1027                           intcon3	equ	0xFF0
  1028                           wreg	equ	0xFE8
  1029                           status	equ	0xFD8
  1030                           
  1031 ;; *************** function _printf *****************
  1032 ;; Defined at:
  1033 ;;		line 464 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
  1034 ;; Parameters:    Size  Location     Type
  1035 ;;  f               2    7[BANK0 ] PTR const unsigned char 
  1036 ;;		 -> STR_12(10), STR_11(8), STR_10(13), STR_9(15), 
  1037 ;;		 -> STR_8(17), STR_7(13), STR_6(15), STR_5(19), 
  1038 ;;		 -> STR_4(17), STR_3(17), STR_2(17), STR_1(17), 
  1039 ;; Auto vars:     Size  Location     Type
  1040 ;;  idx             1   15[BANK0 ] unsigned char 
  1041 ;;  tmpval          4    0        struct .
  1042 ;;  cp              3    0        PTR const unsigned char 
  1043 ;;  width           2   20[BANK0 ] int 
  1044 ;;  val             2   17[BANK0 ] unsigned int 
  1045 ;;  ap              2   13[BANK0 ] PTR void [1]
  1046 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1047 ;;  len             2    0        unsigned int 
  1048 ;;  c               1   22[BANK0 ] char 
  1049 ;;  prec            1   19[BANK0 ] char 
  1050 ;;  flag            1   16[BANK0 ] unsigned char 
  1051 ;; Return value:  Size  Location     Type
  1052 ;;                  2    7[BANK0 ] int 
  1053 ;; Registers used:
  1054 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1055 ;; Tracked objects:
  1056 ;;		On entry : 0/0
  1057 ;;		On exit  : 0/0
  1058 ;;		Unchanged: 0/0
  1059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1060 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1061 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1062 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1063 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1064 ;;Total ram usage:       16 bytes
  1065 ;; Hardware stack levels used:    1
  1066 ;; Hardware stack levels required when called:    6
  1067 ;; This function calls:
  1068 ;;		___lwdiv
  1069 ;;		___wmul
  1070 ;;		_isdigit
  1071 ;;		_putch
  1072 ;; This function is called by:
  1073 ;;		_main
  1074 ;; This function uses a non-reentrant model
  1075 ;;
  1076                           
  1077                           	psect	text1
  1078  00149C                     __ptext1:
  1079                           	opt stack 0
  1080  00149C                     _printf:
  1081                           	opt stack 24
  1082                           
  1083                           ;doprnt.c: 466: va_list ap;
  1084                           ;doprnt.c: 499: signed char c;
  1085                           ;doprnt.c: 501: int width;
  1086                           ;doprnt.c: 506: signed char prec;
  1087                           ;doprnt.c: 508: unsigned char flag;
  1088                           ;doprnt.c: 523: union {
  1089                           ;doprnt.c: 524: unsigned long vd;
  1090                           ;doprnt.c: 525: double integ;
  1091                           ;doprnt.c: 526: } tmpval;
  1092                           ;doprnt.c: 528: unsigned int val;
  1093                           ;doprnt.c: 529: unsigned len;
  1094                           ;doprnt.c: 530: const char * cp;
  1095                           ;doprnt.c: 533: *ap = __va_start();
  1096                           
  1097                           ;incstack = 0
  1098  00149C  0E89               	movlw	low (?_printf+2)
  1099  00149E  0100               	movlb	0	; () banked
  1100  0014A0  6F8D               	movwf	printf@ap& (0+255),b
  1101  0014A2  0E00               	movlw	high (?_printf+2)
  1102  0014A4  0100               	movlb	0	; () banked
  1103  0014A6  6F8E               	movwf	(printf@ap+1)& (0+255),b
  1104                           
  1105                           ;doprnt.c: 536: while(c = *f++) {
  1106  0014A8  D120               	goto	l1612
  1107  0014AA                     l1540:
  1108                           
  1109                           ; BSR set to: 0
  1110                           ;doprnt.c: 538: if(c != '%')
  1111  0014AA  0E25               	movlw	37
  1112  0014AC  0100               	movlb	0	; () banked
  1113  0014AE  1996               	xorwf	printf@c& (0+255),w,b
  1114  0014B0  B4D8               	btfsc	status,2,c
  1115  0014B2  D005               	goto	l1544
  1116                           
  1117                           ; BSR set to: 0
  1118                           ;doprnt.c: 540: {
  1119                           ;doprnt.c: 541: (putch(c) );
  1120  0014B4  0100               	movlb	0	; () banked
  1121  0014B6  5196               	movf	printf@c& (0+255),w,b
  1122  0014B8  EC8A  F00E         	call	_putch
  1123                           
  1124                           ;doprnt.c: 542: continue;
  1125  0014BC  D116               	goto	l1612
  1126  0014BE                     l1544:
  1127                           
  1128                           ;doprnt.c: 543: }
  1129                           ;doprnt.c: 546: width = 0;
  1130  0014BE  0E00               	movlw	0
  1131  0014C0  0100               	movlb	0	; () banked
  1132  0014C2  6F95               	movwf	(printf@width+1)& (0+255),b
  1133  0014C4  0E00               	movlw	0
  1134  0014C6  6F94               	movwf	printf@width& (0+255),b
  1135                           
  1136                           ;doprnt.c: 548: flag = 0;
  1137  0014C8  0E00               	movlw	0
  1138  0014CA  0100               	movlb	0	; () banked
  1139  0014CC  6F90               	movwf	printf@flag& (0+255),b
  1140                           
  1141                           ; BSR set to: 0
  1142                           ;doprnt.c: 551: switch(*f) {
  1143                           
  1144                           ;doprnt.c: 550: for(;;) {
  1145  0014CE  D005               	goto	l1550
  1146  0014D0                     l1546:
  1147                           
  1148                           ;doprnt.c: 580: flag |= 0x04;
  1149  0014D0  0100               	movlb	0	; () banked
  1150  0014D2  8590               	bsf	printf@flag& (0+255),2,b
  1151                           
  1152                           ;doprnt.c: 581: f++;
  1153  0014D4  0100               	movlb	0	; () banked
  1154  0014D6  4B87               	infsnz	printf@f& (0+255),f,b
  1155  0014D8  2B88               	incf	(printf@f+1)& (0+255),f,b
  1156  0014DA                     l1550:
  1157  0014DA  C087  FFF6         	movff	printf@f,tblptrl
  1158  0014DE  C088  FFF7         	movff	printf@f+1,tblptrh
  1159  0014E2                     	if	0	;tblptru may be non-zero
  1160  0014E2                     	endif
  1161  0014E2                     	if	0	;tblptru may be non-zero
  1162  0014E2                     	endif
  1163  0014E2  0008               	tblrd		*
  1164  0014E4  50F5               	movf	tablat,w,c
  1165                           
  1166                           ; Switch size 1, requested type "space"
  1167                           ; Number of cases is 1, Range of values is 48 to 48
  1168                           ; switch strategies available:
  1169                           ; Name         Instructions Cycles
  1170                           ; simple_byte            4     3 (average)
  1171                           ;	Chosen strategy is simple_byte
  1172  0014E6  0A30               	xorlw	48	; case 48
  1173  0014E8  B4D8               	btfsc	status,2,c
  1174  0014EA  D7F2               	goto	l1546
  1175                           
  1176                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1177                           
  1178                           ;doprnt.c: 586: }
  1179                           
  1180                           ;doprnt.c: 585: break;
  1181  0014EC  C087  FFF6         	movff	printf@f,tblptrl
  1182  0014F0  C088  FFF7         	movff	printf@f+1,tblptrh
  1183  0014F4                     	if	0	;tblptru may be non-zero
  1184  0014F4                     	endif
  1185  0014F4                     	if	0	;tblptru may be non-zero
  1186  0014F4                     	endif
  1187  0014F4  0008               	tblrd		*
  1188  0014F6  50F5               	movf	tablat,w,c
  1189  0014F8  EC49  F00E         	call	_isdigit
  1190  0014FC  A0D8               	btfss	status,0,c
  1191  0014FE  D040               	goto	l1566
  1192                           
  1193                           ;doprnt.c: 598: width = 0;
  1194  001500  0E00               	movlw	0
  1195  001502  0100               	movlb	0	; () banked
  1196  001504  6F95               	movwf	(printf@width+1)& (0+255),b
  1197  001506  0E00               	movlw	0
  1198  001508  6F94               	movwf	printf@width& (0+255),b
  1199  00150A                     l1556:
  1200                           
  1201                           ;doprnt.c: 600: width *= 10;
  1202  00150A  C094  F080         	movff	printf@width,___wmul@multiplier
  1203  00150E  C095  F081         	movff	printf@width+1,___wmul@multiplier+1
  1204  001512  0E00               	movlw	0
  1205  001514  0100               	movlb	0	; () banked
  1206  001516  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1207  001518  0E0A               	movlw	10
  1208  00151A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1209  00151C  EC2E  F00E         	call	___wmul	;wreg free
  1210  001520  C080  F094         	movff	?___wmul,printf@width
  1211  001524  C081  F095         	movff	?___wmul+1,printf@width+1
  1212                           
  1213                           ;doprnt.c: 601: width += *f++ - '0';
  1214  001528  0ED0               	movlw	208
  1215  00152A  0100               	movlb	0	; () banked
  1216  00152C  6F89               	movwf	??_printf& (0+255),b
  1217  00152E  0EFF               	movlw	255
  1218  001530  0100               	movlb	0	; () banked
  1219  001532  6F8A               	movwf	(??_printf+1)& (0+255),b
  1220  001534  C087  FFF6         	movff	printf@f,tblptrl
  1221  001538  C088  FFF7         	movff	printf@f+1,tblptrh
  1222  00153C                     	if	0	;tblptru may be non-zero
  1223  00153C                     	endif
  1224  00153C                     	if	0	;tblptru may be non-zero
  1225  00153C                     	endif
  1226  00153C  0008               	tblrd		*
  1227  00153E  50F5               	movf	tablat,w,c
  1228  001540  0100               	movlb	0	; () banked
  1229  001542  6F8B               	movwf	(??_printf+2)& (0+255),b
  1230  001544  6B8C               	clrf	(??_printf+3)& (0+255),b
  1231  001546  0100               	movlb	0	; () banked
  1232  001548  5189               	movf	??_printf& (0+255),w,b
  1233  00154A  0100               	movlb	0	; () banked
  1234  00154C  278B               	addwf	(??_printf+2)& (0+255),f,b
  1235  00154E  0100               	movlb	0	; () banked
  1236  001550  518A               	movf	(??_printf+1)& (0+255),w,b
  1237  001552  0100               	movlb	0	; () banked
  1238  001554  238C               	addwfc	(??_printf+3)& (0+255),f,b
  1239  001556  0100               	movlb	0	; () banked
  1240  001558  518B               	movf	(??_printf+2)& (0+255),w,b
  1241  00155A  0100               	movlb	0	; () banked
  1242  00155C  2794               	addwf	printf@width& (0+255),f,b
  1243  00155E  0100               	movlb	0	; () banked
  1244  001560  518C               	movf	(??_printf+3)& (0+255),w,b
  1245  001562  0100               	movlb	0	; () banked
  1246  001564  2395               	addwfc	(printf@width+1)& (0+255),f,b
  1247                           
  1248                           ; BSR set to: 0
  1249  001566  0100               	movlb	0	; () banked
  1250  001568  4B87               	infsnz	printf@f& (0+255),f,b
  1251  00156A  2B88               	incf	(printf@f+1)& (0+255),f,b
  1252                           
  1253                           ; BSR set to: 0
  1254                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1255  00156C  C087  FFF6         	movff	printf@f,tblptrl
  1256  001570  C088  FFF7         	movff	printf@f+1,tblptrh
  1257  001574                     	if	0	;tblptru may be non-zero
  1258  001574                     	endif
  1259  001574                     	if	0	;tblptru may be non-zero
  1260  001574                     	endif
  1261  001574  0008               	tblrd		*
  1262  001576  50F5               	movf	tablat,w,c
  1263  001578  EC49  F00E         	call	_isdigit
  1264  00157C  B0D8               	btfsc	status,0,c
  1265  00157E  D7C5               	goto	l1556
  1266  001580                     l1566:
  1267  001580  C087  FFF6         	movff	printf@f,tblptrl
  1268  001584  C088  FFF7         	movff	printf@f+1,tblptrh
  1269  001588  0100               	movlb	0	; () banked
  1270  00158A  4B87               	infsnz	printf@f& (0+255),f,b
  1271  00158C  2B88               	incf	(printf@f+1)& (0+255),f,b
  1272  00158E                     	if	0	;tblptru may be non-zero
  1273  00158E                     	endif
  1274  00158E                     	if	0	;tblptru may be non-zero
  1275  00158E                     	endif
  1276  00158E  0008               	tblrd		*
  1277  001590  CFF5 F096          	movff	tablat,printf@c
  1278  001594  0100               	movlb	0	; () banked
  1279  001596  5196               	movf	printf@c& (0+255),w,b
  1280                           
  1281                           ; Switch size 1, requested type "space"
  1282                           ; Number of cases is 2, Range of values is 0 to 120
  1283                           ; switch strategies available:
  1284                           ; Name         Instructions Cycles
  1285                           ; simple_byte            7     4 (average)
  1286                           ;	Chosen strategy is simple_byte
  1287  001598  0A00               	xorlw	0	; case 0
  1288  00159A  B4D8               	btfsc	status,2,c
  1289  00159C  0012               	return	
  1290  00159E  0A78               	xorlw	120	; case 120
  1291  0015A0  A4D8               	btfss	status,2,c
  1292  0015A2  D0A3               	goto	l1612
  1293                           
  1294                           ;doprnt.c: 1273: {
  1295                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1296                           
  1297                           ; BSR set to: 0
  1298  0015A4  C08D  FFD9         	movff	printf@ap,fsr2l
  1299  0015A8  C08E  FFDA         	movff	printf@ap+1,fsr2h
  1300  0015AC  CFDE F091          	movff	postinc2,printf@val
  1301  0015B0  CFDD F092          	movff	postdec2,printf@val+1
  1302  0015B4  0E02               	movlw	2
  1303  0015B6  0100               	movlb	0	; () banked
  1304  0015B8  278D               	addwf	printf@ap& (0+255),f,b
  1305  0015BA  0E00               	movlw	0
  1306  0015BC  238E               	addwfc	(printf@ap+1)& (0+255),f,b
  1307                           
  1308                           ; BSR set to: 0
  1309                           ;doprnt.c: 1287: }
  1310                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1311  0015BE  0E01               	movlw	1
  1312  0015C0  0100               	movlb	0	; () banked
  1313  0015C2  6F96               	movwf	printf@c& (0+255),b
  1314  0015C4                     l1574:
  1315                           
  1316                           ; BSR set to: 0
  1317  0015C4  0E04               	movlw	4
  1318  0015C6  0100               	movlb	0	; () banked
  1319  0015C8  1996               	xorwf	printf@c& (0+255),w,b
  1320  0015CA  B4D8               	btfsc	status,2,c
  1321  0015CC  D016               	goto	l1586
  1322                           
  1323                           ; BSR set to: 0
  1324                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1325                           
  1326                           ; BSR set to: 0
  1327                           
  1328                           ; BSR set to: 0
  1329  0015CE  0100               	movlb	0	; () banked
  1330  0015D0  5196               	movf	printf@c& (0+255),w,b
  1331  0015D2  0D02               	mullw	2
  1332  0015D4  0E12               	movlw	low _hexpowers
  1333  0015D6  24F3               	addwf	prodl,w,c
  1334  0015D8  6EF6               	movwf	tblptrl,c
  1335  0015DA  0E10               	movlw	high _hexpowers
  1336  0015DC  20F4               	addwfc	prodh,w,c
  1337  0015DE  6EF7               	movwf	tblptrh,c
  1338  0015E0                     	if	0	;There are less than 3 active tblptr bytes
  1339  0015E0                     	endif
  1340  0015E0  0009               	tblrd		*+
  1341  0015E2  50F5               	movf	tablat,w,c
  1342  0015E4  0100               	movlb	0	; () banked
  1343  0015E6  5D91               	subwf	printf@val& (0+255),w,b
  1344  0015E8  0009               	tblrd		*+
  1345  0015EA  50F5               	movf	tablat,w,c
  1346  0015EC  0100               	movlb	0	; () banked
  1347  0015EE  5992               	subwfb	(printf@val+1)& (0+255),w,b
  1348  0015F0  A0D8               	btfss	status,0,c
  1349  0015F2  D003               	goto	l1586
  1350                           
  1351                           ; BSR set to: 0
  1352                           
  1353                           ; BSR set to: 0
  1354                           
  1355                           ; BSR set to: 0
  1356                           ;doprnt.c: 1318: break;
  1357  0015F4  0100               	movlb	0	; () banked
  1358  0015F6  2B96               	incf	printf@c& (0+255),f,b
  1359  0015F8  D7E5               	goto	l1574
  1360  0015FA                     l1586:
  1361                           
  1362                           ; BSR set to: 0
  1363                           ;doprnt.c: 1381: if(width > c)
  1364  0015FA  0E80               	movlw	128
  1365  0015FC  0100               	movlb	0	; () banked
  1366  0015FE  BF96               	btfsc	printf@c& (0+255),7,b
  1367  001600  0E7F               	movlw	127
  1368  001602  0100               	movlb	0	; () banked
  1369  001604  6F89               	movwf	??_printf& (0+255),b
  1370  001606  0100               	movlb	0	; () banked
  1371  001608  5194               	movf	printf@width& (0+255),w,b
  1372  00160A  0100               	movlb	0	; () banked
  1373  00160C  5D96               	subwf	printf@c& (0+255),w,b
  1374  00160E  0100               	movlb	0	; () banked
  1375  001610  5195               	movf	(printf@width+1)& (0+255),w,b
  1376  001612  0A80               	xorlw	128
  1377  001614  0100               	movlb	0	; () banked
  1378  001616  5989               	subwfb	??_printf& (0+255),w,b
  1379  001618  B0D8               	btfsc	status,0,c
  1380  00161A  D00B               	goto	l1590
  1381                           
  1382                           ; BSR set to: 0
  1383                           ;doprnt.c: 1382: width -= c;
  1384  00161C  0100               	movlb	0	; () banked
  1385  00161E  5196               	movf	printf@c& (0+255),w,b
  1386  001620  0100               	movlb	0	; () banked
  1387  001622  5F94               	subwf	printf@width& (0+255),f,b
  1388  001624  0E00               	movlw	0
  1389  001626  0100               	movlb	0	; () banked
  1390  001628  BF96               	btfsc	printf@c& (0+255),7,b
  1391  00162A  0EFF               	movlw	255
  1392  00162C  0100               	movlb	0	; () banked
  1393  00162E  5B95               	subwfb	(printf@width+1)& (0+255),f,b
  1394  001630  D005               	goto	l1592
  1395  001632                     l1590:
  1396                           
  1397                           ; BSR set to: 0
  1398                           ;doprnt.c: 1383: else
  1399                           ;doprnt.c: 1384: width = 0;
  1400  001632  0E00               	movlw	0
  1401  001634  0100               	movlb	0	; () banked
  1402  001636  6F95               	movwf	(printf@width+1)& (0+255),b
  1403  001638  0E00               	movlw	0
  1404  00163A  6F94               	movwf	printf@width& (0+255),b
  1405  00163C                     l1592:
  1406                           
  1407                           ; BSR set to: 0
  1408                           ;doprnt.c: 1387: if(flag & 0x04) {
  1409  00163C  0100               	movlb	0	; () banked
  1410  00163E  A590               	btfss	printf@flag& (0+255),2,b
  1411  001640  D00E               	goto	l1600
  1412  001642                     
  1413                           ; BSR set to: 0
  1414                           ;doprnt.c: 1415: if(width)
  1415  001642  0100               	movlb	0	; () banked
  1416  001644  5194               	movf	printf@width& (0+255),w,b
  1417  001646  0100               	movlb	0	; () banked
  1418  001648  1195               	iorwf	(printf@width+1)& (0+255),w,b
  1419  00164A  B4D8               	btfsc	status,2,c
  1420  00164C  D01B               	goto	l171
  1421                           
  1422                           ; BSR set to: 0
  1423                           ;doprnt.c: 1417: (putch('0') );
  1424                           
  1425                           ; BSR set to: 0
  1426                           
  1427                           ;doprnt.c: 1416: do
  1428  00164E  0E30               	movlw	48
  1429  001650  EC8A  F00E         	call	_putch
  1430                           
  1431                           ;doprnt.c: 1418: while(--width);
  1432  001654  0100               	movlb	0	; () banked
  1433  001656  0794               	decf	printf@width& (0+255),f,b
  1434  001658  A0D8               	btfss	status,0,c
  1435  00165A  0795               	decf	(printf@width+1)& (0+255),f,b
  1436  00165C  D7F2               	goto	L1
  1437  00165E                     l1600:
  1438                           
  1439                           ; BSR set to: 0
  1440                           ;doprnt.c: 1422: {
  1441                           ;doprnt.c: 1424: if(width
  1442                           ;doprnt.c: 1428: )
  1443  00165E  0100               	movlb	0	; () banked
  1444  001660  5194               	movf	printf@width& (0+255),w,b
  1445  001662  0100               	movlb	0	; () banked
  1446  001664  1195               	iorwf	(printf@width+1)& (0+255),w,b
  1447  001666  B4D8               	btfsc	status,2,c
  1448  001668  D00D               	goto	l171
  1449  00166A                     l1602:
  1450                           
  1451                           ; BSR set to: 0
  1452                           ;doprnt.c: 1430: (putch(' ') );
  1453  00166A  0E20               	movlw	32
  1454  00166C  EC8A  F00E         	call	_putch
  1455                           
  1456                           ;doprnt.c: 1431: while(--width);
  1457  001670  0100               	movlb	0	; () banked
  1458  001672  0794               	decf	printf@width& (0+255),f,b
  1459  001674  A0D8               	btfss	status,0,c
  1460  001676  0795               	decf	(printf@width+1)& (0+255),f,b
  1461  001678  0100               	movlb	0	; () banked
  1462  00167A  5194               	movf	printf@width& (0+255),w,b
  1463  00167C  0100               	movlb	0	; () banked
  1464  00167E  1195               	iorwf	(printf@width+1)& (0+255),w,b
  1465  001680  A4D8               	btfss	status,2,c
  1466  001682  D7F3               	goto	l1602
  1467  001684                     l171:
  1468                           
  1469                           ; BSR set to: 0
  1470                           ;doprnt.c: 1469: }
  1471                           ;doprnt.c: 1472: prec = c;
  1472  001684  C096  F093         	movff	printf@c,printf@prec
  1473                           
  1474                           ;doprnt.c: 1474: while(prec--) {
  1475  001688  D02A               	goto	l175
  1476  00168A                     l1606:
  1477                           
  1478                           ; BSR set to: 0
  1479                           ;doprnt.c: 1478: {
  1480                           ;doprnt.c: 1499: {
  1481                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1482  00168A  C091  F080         	movff	printf@val,___lwdiv@dividend
  1483  00168E  C092  F081         	movff	printf@val+1,___lwdiv@dividend+1
  1484  001692  0100               	movlb	0	; () banked
  1485  001694  5193               	movf	printf@prec& (0+255),w,b
  1486  001696  0D02               	mullw	2
  1487  001698  0E12               	movlw	low _hexpowers
  1488  00169A  24F3               	addwf	prodl,w,c
  1489  00169C  6EF6               	movwf	tblptrl,c
  1490  00169E  0E10               	movlw	high _hexpowers
  1491  0016A0  20F4               	addwfc	prodh,w,c
  1492  0016A2  6EF7               	movwf	tblptrh,c
  1493  0016A4                     	if	0	;There are less than 3 active tblptr bytes
  1494  0016A4                     	endif
  1495  0016A4  0009               	tblrd		*+
  1496  0016A6  CFF5 F082          	movff	tablat,___lwdiv@divisor
  1497  0016AA  000A               	tblrd		*-
  1498  0016AC  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  1499  0016B0  EC22  F00D         	call	___lwdiv	;wreg free
  1500  0016B4  0100               	movlb	0	; () banked
  1501  0016B6  5180               	movf	?___lwdiv& (0+255),w,b
  1502  0016B8  0B0F               	andlw	15
  1503  0016BA  0100               	movlb	0	; () banked
  1504  0016BC  6F8F               	movwf	printf@idx& (0+255),b
  1505                           
  1506                           ; BSR set to: 0
  1507                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  1508  0016BE  0100               	movlb	0	; () banked
  1509  0016C0  518F               	movf	printf@idx& (0+255),w,b
  1510  0016C2  0D01               	mullw	1
  1511  0016C4  0E2D               	movlw	low STR_13
  1512  0016C6  24F3               	addwf	prodl,w,c
  1513  0016C8  6EF6               	movwf	tblptrl,c
  1514  0016CA  0E10               	movlw	high STR_13
  1515  0016CC  20F4               	addwfc	prodh,w,c
  1516  0016CE  6EF7               	movwf	tblptrh,c
  1517  0016D0                     	if	0	;There are less than 3 active tblptr bytes
  1518  0016D0                     	endif
  1519  0016D0  0008               	tblrd		*
  1520  0016D2  CFF5 F096          	movff	tablat,printf@c
  1521                           
  1522                           ; BSR set to: 0
  1523                           ;doprnt.c: 1508: }
  1524                           ;doprnt.c: 1523: }
  1525                           ;doprnt.c: 1524: (putch(c) );
  1526  0016D6  0100               	movlb	0	; () banked
  1527  0016D8  5196               	movf	printf@c& (0+255),w,b
  1528  0016DA  EC8A  F00E         	call	_putch
  1529  0016DE                     l175:
  1530  0016DE  0100               	movlb	0	; () banked
  1531  0016E0  0793               	decf	printf@prec& (0+255),f,b
  1532  0016E2  0100               	movlb	0	; () banked
  1533  0016E4  2993               	incf	printf@prec& (0+255),w,b
  1534  0016E6  A4D8               	btfss	status,2,c
  1535  0016E8  D7D0               	goto	l1606
  1536  0016EA                     l1612:
  1537  0016EA  C087  FFF6         	movff	printf@f,tblptrl
  1538  0016EE  C088  FFF7         	movff	printf@f+1,tblptrh
  1539  0016F2  0100               	movlb	0	; () banked
  1540  0016F4  4B87               	infsnz	printf@f& (0+255),f,b
  1541  0016F6  2B88               	incf	(printf@f+1)& (0+255),f,b
  1542  0016F8                     	if	0	;tblptru may be non-zero
  1543  0016F8                     	endif
  1544  0016F8                     	if	0	;tblptru may be non-zero
  1545  0016F8                     	endif
  1546  0016F8  0008               	tblrd		*
  1547  0016FA  CFF5 F096          	movff	tablat,printf@c
  1548  0016FE  0100               	movlb	0	; () banked
  1549  001700  5196               	movf	printf@c& (0+255),w,b
  1550  001702  B4D8               	btfsc	status,2,c
  1551  001704  0012               	return	
  1552  001706  D6D1               	goto	l1540
  1553  001708                     __end_of_printf:
  1554                           	opt stack 0
  1555                           tblptru	equ	0xFF8
  1556                           tblptrh	equ	0xFF7
  1557                           tblptrl	equ	0xFF6
  1558                           tablat	equ	0xFF5
  1559                           prodh	equ	0xFF4
  1560                           prodl	equ	0xFF3
  1561                           intcon	equ	0xFF2
  1562                           intcon3	equ	0xFF0
  1563                           wreg	equ	0xFE8
  1564                           postinc2	equ	0xFDE
  1565                           postdec2	equ	0xFDD
  1566                           fsr2h	equ	0xFDA
  1567                           fsr2l	equ	0xFD9
  1568                           status	equ	0xFD8
  1569                           
  1570 ;; *************** function _putch *****************
  1571 ;; Defined at:
  1572 ;;		line 30 in file "lcd.c"
  1573 ;; Parameters:    Size  Location     Type
  1574 ;;  data            1    wreg     unsigned char 
  1575 ;; Auto vars:     Size  Location     Type
  1576 ;;  data            1    2[BANK0 ] unsigned char 
  1577 ;; Return value:  Size  Location     Type
  1578 ;;                  1    wreg      void 
  1579 ;; Registers used:
  1580 ;;		wreg, status,2, status,0, cstack
  1581 ;; Tracked objects:
  1582 ;;		On entry : 0/0
  1583 ;;		On exit  : 0/0
  1584 ;;		Unchanged: 0/0
  1585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1587 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1589 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1590 ;;Total ram usage:        1 bytes
  1591 ;; Hardware stack levels used:    1
  1592 ;; Hardware stack levels required when called:    5
  1593 ;; This function calls:
  1594 ;;		_lcdNibble
  1595 ;; This function is called by:
  1596 ;;		_printf
  1597 ;; This function uses a non-reentrant model
  1598 ;;
  1599                           
  1600                           	psect	text2
  1601  001D14                     __ptext2:
  1602                           	opt stack 0
  1603  001D14                     _putch:
  1604                           	opt stack 24
  1605                           
  1606                           ;incstack = 0
  1607                           ;putch@data stored from wreg
  1608  001D14  0100               	movlb	0	; () banked
  1609  001D16  6F82               	movwf	putch@data& (0+255),b
  1610                           
  1611                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  1612  001D18  848C               	bsf	3980,2,c	;volatile
  1613                           
  1614                           ;lcd.c: 32: lcdNibble(data);
  1615  001D1A  0100               	movlb	0	; () banked
  1616  001D1C  5182               	movf	putch@data& (0+255),w,b
  1617  001D1E  EC5E  F00D         	call	_lcdNibble
  1618  001D22  0012               	return		;funcret
  1619  001D24                     __end_of_putch:
  1620                           	opt stack 0
  1621                           tblptru	equ	0xFF8
  1622                           tblptrh	equ	0xFF7
  1623                           tblptrl	equ	0xFF6
  1624                           tablat	equ	0xFF5
  1625                           prodh	equ	0xFF4
  1626                           prodl	equ	0xFF3
  1627                           intcon	equ	0xFF2
  1628                           intcon3	equ	0xFF0
  1629                           wreg	equ	0xFE8
  1630                           postinc2	equ	0xFDE
  1631                           postdec2	equ	0xFDD
  1632                           fsr2h	equ	0xFDA
  1633                           fsr2l	equ	0xFD9
  1634                           status	equ	0xFD8
  1635                           
  1636 ;; *************** function _isdigit *****************
  1637 ;; Defined at:
  1638 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/isdigit.c"
  1639 ;; Parameters:    Size  Location     Type
  1640 ;;  c               1    wreg     unsigned char 
  1641 ;; Auto vars:     Size  Location     Type
  1642 ;;  c               1    2[BANK0 ] unsigned char 
  1643 ;; Return value:  Size  Location     Type
  1644 ;;		None               void
  1645 ;; Registers used:
  1646 ;;		wreg, status,2, status,0
  1647 ;; Tracked objects:
  1648 ;;		On entry : 0/0
  1649 ;;		On exit  : 0/0
  1650 ;;		Unchanged: 0/0
  1651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1653 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1654 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1655 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1656 ;;Total ram usage:        3 bytes
  1657 ;; Hardware stack levels used:    1
  1658 ;; Hardware stack levels required when called:    4
  1659 ;; This function calls:
  1660 ;;		Nothing
  1661 ;; This function is called by:
  1662 ;;		_printf
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           	psect	text3
  1667  001C92                     __ptext3:
  1668                           	opt stack 0
  1669  001C92                     _isdigit:
  1670                           	opt stack 25
  1671                           
  1672                           ;incstack = 0
  1673                           ;isdigit@c stored from wreg
  1674  001C92  0100               	movlb	0	; () banked
  1675  001C94  6F82               	movwf	isdigit@c& (0+255),b
  1676  001C96  0E00               	movlw	0
  1677  001C98  0100               	movlb	0	; () banked
  1678  001C9A  6F81               	movwf	_isdigit$543& (0+255),b
  1679                           
  1680                           ; BSR set to: 0
  1681  001C9C  0E3A               	movlw	58
  1682  001C9E  0100               	movlb	0	; () banked
  1683  001CA0  6182               	cpfslt	isdigit@c& (0+255),b
  1684  001CA2  D007               	goto	l1444
  1685                           
  1686                           ; BSR set to: 0
  1687  001CA4  0E2F               	movlw	47
  1688  001CA6  0100               	movlb	0	; () banked
  1689  001CA8  6582               	cpfsgt	isdigit@c& (0+255),b
  1690  001CAA  D003               	goto	l1444
  1691                           
  1692                           ; BSR set to: 0
  1693  001CAC  0E01               	movlw	1
  1694  001CAE  0100               	movlb	0	; () banked
  1695  001CB0  6F81               	movwf	_isdigit$543& (0+255),b
  1696  001CB2                     l1444:
  1697                           
  1698                           ; BSR set to: 0
  1699  001CB2  C081  F080         	movff	_isdigit$543,??_isdigit
  1700  001CB6  0100               	movlb	0	; () banked
  1701  001CB8  3180               	rrcf	??_isdigit& (0+255),w,b
  1702  001CBA  0012               	return	
  1703  001CBC                     __end_of_isdigit:
  1704                           	opt stack 0
  1705                           tblptru	equ	0xFF8
  1706                           tblptrh	equ	0xFF7
  1707                           tblptrl	equ	0xFF6
  1708                           tablat	equ	0xFF5
  1709                           prodh	equ	0xFF4
  1710                           prodl	equ	0xFF3
  1711                           intcon	equ	0xFF2
  1712                           intcon3	equ	0xFF0
  1713                           wreg	equ	0xFE8
  1714                           postinc2	equ	0xFDE
  1715                           postdec2	equ	0xFDD
  1716                           fsr2h	equ	0xFDA
  1717                           fsr2l	equ	0xFD9
  1718                           status	equ	0xFD8
  1719                           
  1720 ;; *************** function ___wmul *****************
  1721 ;; Defined at:
  1722 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/Umul16.c"
  1723 ;; Parameters:    Size  Location     Type
  1724 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1725 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;  product         2    4[BANK0 ] unsigned int 
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  2    0[BANK0 ] unsigned int 
  1730 ;; Registers used:
  1731 ;;		wreg, status,2, status,0, prodl, prodh
  1732 ;; Tracked objects:
  1733 ;;		On entry : 0/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1737 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1738 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1740 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1741 ;;Total ram usage:        6 bytes
  1742 ;; Hardware stack levels used:    1
  1743 ;; Hardware stack levels required when called:    4
  1744 ;; This function calls:
  1745 ;;		Nothing
  1746 ;; This function is called by:
  1747 ;;		_printf
  1748 ;; This function uses a non-reentrant model
  1749 ;;
  1750                           
  1751                           	psect	text4
  1752  001C5C                     __ptext4:
  1753                           	opt stack 0
  1754  001C5C                     ___wmul:
  1755                           	opt stack 25
  1756                           
  1757                           ; BSR set to: 0
  1758                           ;incstack = 0
  1759  001C5C  0100               	movlb	0	; () banked
  1760  001C5E  5180               	movf	___wmul@multiplier& (0+255),w,b
  1761  001C60  0100               	movlb	0	; () banked
  1762  001C62  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1763  001C64  CFF3 F084          	movff	prodl,___wmul@product
  1764  001C68  CFF4 F085          	movff	prodh,___wmul@product+1
  1765  001C6C  0100               	movlb	0	; () banked
  1766  001C6E  5180               	movf	___wmul@multiplier& (0+255),w,b
  1767  001C70  0100               	movlb	0	; () banked
  1768  001C72  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1769  001C74  50F3               	movf	prodl,w,c
  1770  001C76  0100               	movlb	0	; () banked
  1771  001C78  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1772  001C7A  0100               	movlb	0	; () banked
  1773  001C7C  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1774  001C7E  0100               	movlb	0	; () banked
  1775  001C80  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1776  001C82  50F3               	movf	prodl,w,c
  1777  001C84  0100               	movlb	0	; () banked
  1778  001C86  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1779                           
  1780                           ; BSR set to: 0
  1781  001C88  C084  F080         	movff	___wmul@product,?___wmul
  1782  001C8C  C085  F081         	movff	___wmul@product+1,?___wmul+1
  1783  001C90  0012               	return	
  1784  001C92                     __end_of___wmul:
  1785                           	opt stack 0
  1786                           tblptru	equ	0xFF8
  1787                           tblptrh	equ	0xFF7
  1788                           tblptrl	equ	0xFF6
  1789                           tablat	equ	0xFF5
  1790                           prodh	equ	0xFF4
  1791                           prodl	equ	0xFF3
  1792                           intcon	equ	0xFF2
  1793                           intcon3	equ	0xFF0
  1794                           wreg	equ	0xFE8
  1795                           postinc2	equ	0xFDE
  1796                           postdec2	equ	0xFDD
  1797                           fsr2h	equ	0xFDA
  1798                           fsr2l	equ	0xFD9
  1799                           status	equ	0xFD8
  1800                           
  1801 ;; *************** function ___lwdiv *****************
  1802 ;; Defined at:
  1803 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  1804 ;; Parameters:    Size  Location     Type
  1805 ;;  dividend        2    0[BANK0 ] unsigned int 
  1806 ;;  divisor         2    2[BANK0 ] unsigned int 
  1807 ;; Auto vars:     Size  Location     Type
  1808 ;;  quotient        2    4[BANK0 ] unsigned int 
  1809 ;;  counter         1    6[BANK0 ] unsigned char 
  1810 ;; Return value:  Size  Location     Type
  1811 ;;                  2    0[BANK0 ] unsigned int 
  1812 ;; Registers used:
  1813 ;;		wreg, status,2, status,0
  1814 ;; Tracked objects:
  1815 ;;		On entry : 0/0
  1816 ;;		On exit  : 0/0
  1817 ;;		Unchanged: 0/0
  1818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1819 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1820 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1822 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1823 ;;Total ram usage:        7 bytes
  1824 ;; Hardware stack levels used:    1
  1825 ;; Hardware stack levels required when called:    4
  1826 ;; This function calls:
  1827 ;;		Nothing
  1828 ;; This function is called by:
  1829 ;;		_printf
  1830 ;; This function uses a non-reentrant model
  1831 ;;
  1832                           
  1833                           	psect	text5
  1834  001A44                     __ptext5:
  1835                           	opt stack 0
  1836  001A44                     ___lwdiv:
  1837                           	opt stack 25
  1838                           
  1839                           ; BSR set to: 0
  1840                           ;incstack = 0
  1841  001A44  0E00               	movlw	0
  1842  001A46  0100               	movlb	0	; () banked
  1843  001A48  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  1844  001A4A  0E00               	movlw	0
  1845  001A4C  6F84               	movwf	___lwdiv@quotient& (0+255),b
  1846                           
  1847                           ; BSR set to: 0
  1848  001A4E  0100               	movlb	0	; () banked
  1849  001A50  5182               	movf	___lwdiv@divisor& (0+255),w,b
  1850  001A52  0100               	movlb	0	; () banked
  1851  001A54  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  1852  001A56  B4D8               	btfsc	status,2,c
  1853  001A58  D02C               	goto	l587
  1854                           
  1855                           ; BSR set to: 0
  1856  001A5A  0E01               	movlw	1
  1857  001A5C  0100               	movlb	0	; () banked
  1858  001A5E  6F86               	movwf	___lwdiv@counter& (0+255),b
  1859  001A60  D006               	goto	l1462
  1860  001A62                     l1460:
  1861                           
  1862                           ; BSR set to: 0
  1863  001A62  0100               	movlb	0	; () banked
  1864  001A64  90D8               	bcf	status,0,c
  1865  001A66  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  1866  001A68  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  1867  001A6A  0100               	movlb	0	; () banked
  1868  001A6C  2B86               	incf	___lwdiv@counter& (0+255),f,b
  1869  001A6E                     l1462:
  1870                           
  1871                           ; BSR set to: 0
  1872  001A6E  0100               	movlb	0	; () banked
  1873  001A70  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  1874  001A72  D7F7               	goto	l1460
  1875  001A74                     l1464:
  1876                           
  1877                           ; BSR set to: 0
  1878  001A74  0100               	movlb	0	; () banked
  1879  001A76  90D8               	bcf	status,0,c
  1880  001A78  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  1881  001A7A  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  1882                           
  1883                           ; BSR set to: 0
  1884  001A7C  0100               	movlb	0	; () banked
  1885  001A7E  5182               	movf	___lwdiv@divisor& (0+255),w,b
  1886  001A80  0100               	movlb	0	; () banked
  1887  001A82  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  1888  001A84  0100               	movlb	0	; () banked
  1889  001A86  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1890  001A88  0100               	movlb	0	; () banked
  1891  001A8A  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  1892  001A8C  A0D8               	btfss	status,0,c
  1893  001A8E  D00A               	goto	l1472
  1894                           
  1895                           ; BSR set to: 0
  1896  001A90  0100               	movlb	0	; () banked
  1897  001A92  5182               	movf	___lwdiv@divisor& (0+255),w,b
  1898  001A94  0100               	movlb	0	; () banked
  1899  001A96  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  1900  001A98  0100               	movlb	0	; () banked
  1901  001A9A  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1902  001A9C  0100               	movlb	0	; () banked
  1903  001A9E  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  1904                           
  1905                           ; BSR set to: 0
  1906  001AA0  0100               	movlb	0	; () banked
  1907  001AA2  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  1908  001AA4                     l1472:
  1909                           
  1910                           ; BSR set to: 0
  1911  001AA4  0100               	movlb	0	; () banked
  1912  001AA6  90D8               	bcf	status,0,c
  1913  001AA8  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  1914  001AAA  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  1915                           
  1916                           ; BSR set to: 0
  1917  001AAC  0100               	movlb	0	; () banked
  1918  001AAE  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  1919  001AB0  D7E1               	goto	l1464
  1920  001AB2                     l587:
  1921                           
  1922                           ; BSR set to: 0
  1923  001AB2  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  1924  001AB6  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1925                           
  1926                           ; BSR set to: 0
  1927  001ABA  0012               	return		;funcret
  1928  001ABC                     __end_of___lwdiv:
  1929                           	opt stack 0
  1930                           tblptru	equ	0xFF8
  1931                           tblptrh	equ	0xFF7
  1932                           tblptrl	equ	0xFF6
  1933                           tablat	equ	0xFF5
  1934                           prodh	equ	0xFF4
  1935                           prodl	equ	0xFF3
  1936                           intcon	equ	0xFF2
  1937                           intcon3	equ	0xFF0
  1938                           wreg	equ	0xFE8
  1939                           postinc2	equ	0xFDE
  1940                           postdec2	equ	0xFDD
  1941                           fsr2h	equ	0xFDA
  1942                           fsr2l	equ	0xFD9
  1943                           status	equ	0xFD8
  1944                           
  1945 ;; *************** function _initLCD *****************
  1946 ;; Defined at:
  1947 ;;		line 14 in file "lcd.c"
  1948 ;; Parameters:    Size  Location     Type
  1949 ;;		None
  1950 ;; Auto vars:     Size  Location     Type
  1951 ;;		None
  1952 ;; Return value:  Size  Location     Type
  1953 ;;                  1    wreg      void 
  1954 ;; Registers used:
  1955 ;;		wreg, status,2, status,0, cstack
  1956 ;; Tracked objects:
  1957 ;;		On entry : 0/0
  1958 ;;		On exit  : 0/0
  1959 ;;		Unchanged: 0/0
  1960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1963 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1964 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1965 ;;Total ram usage:        1 bytes
  1966 ;; Hardware stack levels used:    1
  1967 ;; Hardware stack levels required when called:    6
  1968 ;; This function calls:
  1969 ;;		_lcdInst
  1970 ;; This function is called by:
  1971 ;;		_main
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975                           	psect	text6
  1976  001BCC                     __ptext6:
  1977                           	opt stack 0
  1978  001BCC                     _initLCD:
  1979                           	opt stack 24
  1980                           
  1981                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  1982                           
  1983                           ; BSR set to: 0
  1984                           ;incstack = 0
  1985  001BCC  0E31               	movlw	49
  1986  001BCE  0100               	movlb	0	; () banked
  1987  001BD0  6F83               	movwf	??_initLCD& (0+255),b
  1988  001BD2  0EB2               	movlw	178
  1989  001BD4                     u1757:
  1990  001BD4  2EE8               	decfsz	wreg,f,c
  1991  001BD6  D7FE               	bra	u1757
  1992  001BD8  2F83               	decfsz	??_initLCD& (0+255),f,b
  1993  001BDA  D7FC               	bra	u1757
  1994  001BDC  F000               	nop	
  1995                           
  1996                           ;lcd.c: 16: lcdInst(0b00110011);
  1997  001BDE  0E33               	movlw	51
  1998  001BE0  EC92  F00E         	call	_lcdInst
  1999                           
  2000                           ;lcd.c: 17: lcdInst(0b00110010);
  2001  001BE4  0E32               	movlw	50
  2002  001BE6  EC92  F00E         	call	_lcdInst
  2003                           
  2004                           ;lcd.c: 18: lcdInst(0b00101000);
  2005  001BEA  0E28               	movlw	40
  2006  001BEC  EC92  F00E         	call	_lcdInst
  2007                           
  2008                           ;lcd.c: 19: lcdInst(0b00001111);
  2009  001BF0  0E0F               	movlw	15
  2010  001BF2  EC92  F00E         	call	_lcdInst
  2011                           
  2012                           ;lcd.c: 20: lcdInst(0b00000110);
  2013  001BF6  0E06               	movlw	6
  2014  001BF8  EC92  F00E         	call	_lcdInst
  2015                           
  2016                           ;lcd.c: 21: lcdInst(0b00000001);
  2017  001BFC  0E01               	movlw	1
  2018  001BFE  EC92  F00E         	call	_lcdInst
  2019                           
  2020                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  2021  001C02  0E31               	movlw	49
  2022  001C04  0100               	movlb	0	; () banked
  2023  001C06  6F83               	movwf	??_initLCD& (0+255),b
  2024  001C08  0EB2               	movlw	178
  2025  001C0A                     u1767:
  2026  001C0A  2EE8               	decfsz	wreg,f,c
  2027  001C0C  D7FE               	bra	u1767
  2028  001C0E  2F83               	decfsz	??_initLCD& (0+255),f,b
  2029  001C10  D7FC               	bra	u1767
  2030  001C12  F000               	nop	
  2031  001C14  0012               	return		;funcret
  2032  001C16                     __end_of_initLCD:
  2033                           	opt stack 0
  2034                           tblptru	equ	0xFF8
  2035                           tblptrh	equ	0xFF7
  2036                           tblptrl	equ	0xFF6
  2037                           tablat	equ	0xFF5
  2038                           prodh	equ	0xFF4
  2039                           prodl	equ	0xFF3
  2040                           intcon	equ	0xFF2
  2041                           intcon3	equ	0xFF0
  2042                           wreg	equ	0xFE8
  2043                           postinc2	equ	0xFDE
  2044                           postdec2	equ	0xFDD
  2045                           fsr2h	equ	0xFDA
  2046                           fsr2l	equ	0xFD9
  2047                           status	equ	0xFD8
  2048                           
  2049 ;; *************** function _lcdInst *****************
  2050 ;; Defined at:
  2051 ;;		line 25 in file "lcd.c"
  2052 ;; Parameters:    Size  Location     Type
  2053 ;;  data            1    wreg     unsigned char 
  2054 ;; Auto vars:     Size  Location     Type
  2055 ;;  data            1    2[BANK0 ] unsigned char 
  2056 ;; Return value:  Size  Location     Type
  2057 ;;                  1    wreg      void 
  2058 ;; Registers used:
  2059 ;;		wreg, status,2, status,0, cstack
  2060 ;; Tracked objects:
  2061 ;;		On entry : 0/0
  2062 ;;		On exit  : 0/0
  2063 ;;		Unchanged: 0/0
  2064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2069 ;;Total ram usage:        1 bytes
  2070 ;; Hardware stack levels used:    1
  2071 ;; Hardware stack levels required when called:    5
  2072 ;; This function calls:
  2073 ;;		_lcdNibble
  2074 ;; This function is called by:
  2075 ;;		_initLCD
  2076 ;;		_main
  2077 ;; This function uses a non-reentrant model
  2078 ;;
  2079                           
  2080                           	psect	text7
  2081  001D24                     __ptext7:
  2082                           	opt stack 0
  2083  001D24                     _lcdInst:
  2084                           	opt stack 25
  2085                           
  2086                           ;incstack = 0
  2087                           ;lcdInst@data stored from wreg
  2088  001D24  0100               	movlb	0	; () banked
  2089  001D26  6F82               	movwf	lcdInst@data& (0+255),b
  2090                           
  2091                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  2092  001D28  948C               	bcf	3980,2,c	;volatile
  2093                           
  2094                           ;lcd.c: 27: lcdNibble(data);
  2095  001D2A  0100               	movlb	0	; () banked
  2096  001D2C  5182               	movf	lcdInst@data& (0+255),w,b
  2097  001D2E  EC5E  F00D         	call	_lcdNibble
  2098  001D32  0012               	return		;funcret
  2099  001D34                     __end_of_lcdInst:
  2100                           	opt stack 0
  2101                           tblptru	equ	0xFF8
  2102                           tblptrh	equ	0xFF7
  2103                           tblptrl	equ	0xFF6
  2104                           tablat	equ	0xFF5
  2105                           prodh	equ	0xFF4
  2106                           prodl	equ	0xFF3
  2107                           intcon	equ	0xFF2
  2108                           intcon3	equ	0xFF0
  2109                           wreg	equ	0xFE8
  2110                           postinc2	equ	0xFDE
  2111                           postdec2	equ	0xFDD
  2112                           fsr2h	equ	0xFDA
  2113                           fsr2l	equ	0xFD9
  2114                           status	equ	0xFD8
  2115                           
  2116 ;; *************** function _lcdNibble *****************
  2117 ;; Defined at:
  2118 ;;		line 35 in file "lcd.c"
  2119 ;; Parameters:    Size  Location     Type
  2120 ;;  data            1    wreg     unsigned char 
  2121 ;; Auto vars:     Size  Location     Type
  2122 ;;  data            1    1[BANK0 ] unsigned char 
  2123 ;;  temp            1    0[BANK0 ] unsigned char 
  2124 ;; Return value:  Size  Location     Type
  2125 ;;                  1    wreg      void 
  2126 ;; Registers used:
  2127 ;;		wreg, status,2, status,0
  2128 ;; Tracked objects:
  2129 ;;		On entry : 0/0
  2130 ;;		On exit  : 0/0
  2131 ;;		Unchanged: 0/0
  2132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2134 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2136 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2137 ;;Total ram usage:        2 bytes
  2138 ;; Hardware stack levels used:    1
  2139 ;; Hardware stack levels required when called:    4
  2140 ;; This function calls:
  2141 ;;		Nothing
  2142 ;; This function is called by:
  2143 ;;		_lcdInst
  2144 ;;		_putch
  2145 ;; This function uses a non-reentrant model
  2146 ;;
  2147                           
  2148                           	psect	text8
  2149  001ABC                     __ptext8:
  2150                           	opt stack 0
  2151  001ABC                     _lcdNibble:
  2152                           	opt stack 24
  2153                           
  2154                           ;incstack = 0
  2155                           ;lcdNibble@data stored from wreg
  2156  001ABC  0100               	movlb	0	; () banked
  2157  001ABE  6F81               	movwf	lcdNibble@data& (0+255),b
  2158                           
  2159                           ;lcd.c: 37: char temp = data & 0xF0;
  2160  001AC0  0100               	movlb	0	; () banked
  2161  001AC2  5181               	movf	lcdNibble@data& (0+255),w,b
  2162  001AC4  0BF0               	andlw	240
  2163  001AC6  0100               	movlb	0	; () banked
  2164  001AC8  6F80               	movwf	lcdNibble@temp& (0+255),b
  2165                           
  2166                           ;lcd.c: 38: LATD = LATD & 0x0F;
  2167  001ACA  508C               	movf	3980,w,c	;volatile
  2168  001ACC  0B0F               	andlw	15
  2169  001ACE  6E8C               	movwf	3980,c	;volatile
  2170                           
  2171                           ;lcd.c: 39: LATD = temp | LATD;
  2172  001AD0  0100               	movlb	0	; () banked
  2173  001AD2  5180               	movf	lcdNibble@temp& (0+255),w,b
  2174  001AD4  108C               	iorwf	3980,w,c	;volatile
  2175  001AD6  6E8C               	movwf	3980,c	;volatile
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  2179  001AD8  968C               	bcf	3980,3,c	;volatile
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
  2183  001ADA  0E14               	movlw	20
  2184  001ADC                     u1777:
  2185  001ADC  2EE8               	decfsz	wreg,f,c
  2186  001ADE  D7FE               	bra	u1777
  2187  001AE0  D000               	nop2	
  2188                           
  2189                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  2190  001AE2  868C               	bsf	3980,3,c	;volatile
  2191                           
  2192                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
  2193  001AE4  0E14               	movlw	20
  2194  001AE6                     u1787:
  2195  001AE6  2EE8               	decfsz	wreg,f,c
  2196  001AE8  D7FE               	bra	u1787
  2197  001AEA  D000               	nop2	
  2198                           
  2199                           ;lcd.c: 46: data = data << 4;
  2200  001AEC  0100               	movlb	0	; () banked
  2201  001AEE  3981               	swapf	lcdNibble@data& (0+255),w,b
  2202  001AF0  0BF0               	andlw	240
  2203  001AF2  0100               	movlb	0	; () banked
  2204  001AF4  6F81               	movwf	lcdNibble@data& (0+255),b
  2205                           
  2206                           ;lcd.c: 48: temp = data & 0xF0;
  2207  001AF6  0100               	movlb	0	; () banked
  2208  001AF8  5181               	movf	lcdNibble@data& (0+255),w,b
  2209  001AFA  0BF0               	andlw	240
  2210  001AFC  0100               	movlb	0	; () banked
  2211  001AFE  6F80               	movwf	lcdNibble@temp& (0+255),b
  2212                           
  2213                           ;lcd.c: 49: LATD = LATD & 0x0F;
  2214  001B00  508C               	movf	3980,w,c	;volatile
  2215  001B02  0B0F               	andlw	15
  2216  001B04  6E8C               	movwf	3980,c	;volatile
  2217                           
  2218                           ;lcd.c: 50: LATD = temp | LATD;
  2219  001B06  0100               	movlb	0	; () banked
  2220  001B08  5180               	movf	lcdNibble@temp& (0+255),w,b
  2221  001B0A  108C               	iorwf	3980,w,c	;volatile
  2222  001B0C  6E8C               	movwf	3980,c	;volatile
  2223                           
  2224                           ; BSR set to: 0
  2225                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  2226  001B0E  968C               	bcf	3980,3,c	;volatile
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
  2230  001B10  0E14               	movlw	20
  2231  001B12                     u1797:
  2232  001B12  2EE8               	decfsz	wreg,f,c
  2233  001B14  D7FE               	bra	u1797
  2234  001B16  D000               	nop2	
  2235                           
  2236                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  2237  001B18  868C               	bsf	3980,3,c	;volatile
  2238                           
  2239                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
  2240  001B1A  0E14               	movlw	20
  2241  001B1C                     u1807:
  2242  001B1C  2EE8               	decfsz	wreg,f,c
  2243  001B1E  D7FE               	bra	u1807
  2244  001B20  D000               	nop2	
  2245  001B22  0012               	return		;funcret
  2246  001B24                     __end_of_lcdNibble:
  2247                           	opt stack 0
  2248                           tblptru	equ	0xFF8
  2249                           tblptrh	equ	0xFF7
  2250                           tblptrl	equ	0xFF6
  2251                           tablat	equ	0xFF5
  2252                           prodh	equ	0xFF4
  2253                           prodl	equ	0xFF3
  2254                           intcon	equ	0xFF2
  2255                           intcon3	equ	0xFF0
  2256                           wreg	equ	0xFE8
  2257                           postinc2	equ	0xFDE
  2258                           postdec2	equ	0xFDD
  2259                           fsr2h	equ	0xFDA
  2260                           fsr2l	equ	0xFD9
  2261                           status	equ	0xFD8
  2262                           
  2263 ;; *************** function _keypressed *****************
  2264 ;; Defined at:
  2265 ;;		line 73 in file "main.c"
  2266 ;; Parameters:    Size  Location     Type
  2267 ;;		None
  2268 ;; Auto vars:     Size  Location     Type
  2269 ;;  i               1   67[COMRAM] unsigned char 
  2270 ;;  i               1   66[COMRAM] unsigned char 
  2271 ;;  i               1   65[COMRAM] unsigned char 
  2272 ;;  i               1   64[COMRAM] unsigned char 
  2273 ;;  i               1   63[COMRAM] unsigned char 
  2274 ;;  i               1   62[COMRAM] unsigned char 
  2275 ;;  i               1   61[COMRAM] unsigned char 
  2276 ;;  i               1   60[COMRAM] unsigned char 
  2277 ;;  i               1   59[COMRAM] unsigned char 
  2278 ;;  i               1   58[COMRAM] unsigned char 
  2279 ;;  i               1   57[COMRAM] unsigned char 
  2280 ;;  i               1   56[COMRAM] unsigned char 
  2281 ;;  i               1   55[COMRAM] unsigned char 
  2282 ;;  i               1   54[COMRAM] unsigned char 
  2283 ;;  i               1   53[COMRAM] unsigned char 
  2284 ;;  keypress_tem    1   68[COMRAM] unsigned char 
  2285 ;;  keypress        1   52[COMRAM] unsigned char 
  2286 ;;  tot             2   50[COMRAM] int 
  2287 ;;  operation_ti    2   48[COMRAM] int 
  2288 ;;  tin_can_labe    2   46[COMRAM] int 
  2289 ;;  tin_can         2   44[COMRAM] int 
  2290 ;;  pop_can_tab     2   42[COMRAM] int 
  2291 ;;  pop_can         2   40[COMRAM] int 
  2292 ;; Return value:  Size  Location     Type
  2293 ;;                  1    wreg      void 
  2294 ;; Registers used:
  2295 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2296 ;; Tracked objects:
  2297 ;;		On entry : 0/0
  2298 ;;		On exit  : 0/0
  2299 ;;		Unchanged: 0/0
  2300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2302 ;;      Locals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2303 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2304 ;;      Totals:        44       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2305 ;;Total ram usage:       44 bytes
  2306 ;; Hardware stack levels used:    1
  2307 ;; Hardware stack levels required when called:    3
  2308 ;; This function calls:
  2309 ;;		i2_initLCD
  2310 ;;		i2_lcdInst
  2311 ;;		i2_printf
  2312 ;;		i2_putch
  2313 ;; This function is called by:
  2314 ;;		Interrupt level 2
  2315 ;; This function uses a non-reentrant model
  2316 ;;
  2317                           
  2318                           	psect	intcode
  2319  000008                     __pintcode:
  2320                           	opt stack 0
  2321  000008                     _keypressed:
  2322                           	opt stack 24
  2323                           
  2324                           ;incstack = 0
  2325  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2326  00000A  ED6F  F008         	call	int_func,f	;refresh shadow registers
  2327                           tblptru	equ	0xFF8
  2328                           tblptrh	equ	0xFF7
  2329                           tblptrl	equ	0xFF6
  2330                           tablat	equ	0xFF5
  2331                           prodh	equ	0xFF4
  2332                           prodl	equ	0xFF3
  2333                           intcon	equ	0xFF2
  2334                           intcon3	equ	0xFF0
  2335                           wreg	equ	0xFE8
  2336                           postinc2	equ	0xFDE
  2337                           postdec2	equ	0xFDD
  2338                           fsr2h	equ	0xFDA
  2339                           fsr2l	equ	0xFD9
  2340                           status	equ	0xFD8
  2341                           
  2342                           	psect	intcode_body
  2343  0010DE                     __pintcode_body:
  2344                           	opt stack 24
  2345  0010DE                     int_func:
  2346                           	opt stack 24
  2347  0010DE  0006               	pop		; remove dummy address from shadow register refresh
  2348  0010E0  CFFA F01B          	movff	pclath,??_keypressed+1
  2349  0010E4  CFFB F01C          	movff	pclatu,??_keypressed+2
  2350  0010E8  CFE9 F01D          	movff	fsr0l,??_keypressed+3
  2351  0010EC  CFEA F01E          	movff	fsr0h,??_keypressed+4
  2352  0010F0  CFE1 F01F          	movff	fsr1l,??_keypressed+5
  2353  0010F4  CFE2 F020          	movff	fsr1h,??_keypressed+6
  2354  0010F8  CFD9 F021          	movff	fsr2l,??_keypressed+7
  2355  0010FC  CFDA F022          	movff	fsr2h,??_keypressed+8
  2356  001100  CFF3 F023          	movff	prodl,??_keypressed+9
  2357  001104  CFF4 F024          	movff	prodh,??_keypressed+10
  2358  001108  CFF6 F025          	movff	tblptrl,??_keypressed+11
  2359  00110C  CFF7 F026          	movff	tblptrh,??_keypressed+12
  2360  001110  CFF8 F027          	movff	tblptru,??_keypressed+13
  2361  001114  CFF5 F028          	movff	tablat,??_keypressed+14
  2362                           
  2363                           ;main.c: 74: int pop_can = 0x1;
  2364  001118  0E00               	movlw	0
  2365  00111A  6E2A               	movwf	keypressed@pop_can+1,c
  2366  00111C  0E01               	movlw	1
  2367  00111E  6E29               	movwf	keypressed@pop_can,c
  2368                           
  2369                           ;main.c: 75: int pop_can_tab = 0x2;
  2370  001120  0E00               	movlw	0
  2371  001122  6E2C               	movwf	keypressed@pop_can_tab+1,c
  2372  001124  0E02               	movlw	2
  2373  001126  6E2B               	movwf	keypressed@pop_can_tab,c
  2374                           
  2375                           ;main.c: 76: int tin_can = 0x3;
  2376  001128  0E00               	movlw	0
  2377  00112A  6E2E               	movwf	keypressed@tin_can+1,c
  2378  00112C  0E03               	movlw	3
  2379  00112E  6E2D               	movwf	keypressed@tin_can,c
  2380                           
  2381                           ;main.c: 77: int tin_can_label = 0x4;
  2382  001130  0E00               	movlw	0
  2383  001132  6E30               	movwf	keypressed@tin_can_label+1,c
  2384  001134  0E04               	movlw	4
  2385  001136  6E2F               	movwf	keypressed@tin_can_label,c
  2386                           
  2387                           ;main.c: 78: int operation_time = 0x286;
  2388  001138  0E02               	movlw	2
  2389  00113A  6E32               	movwf	keypressed@operation_time+1,c
  2390  00113C  0E86               	movlw	134
  2391  00113E  6E31               	movwf	keypressed@operation_time,c
  2392                           
  2393                           ;main.c: 79: int tot = 0x10;
  2394  001140  0E00               	movlw	0
  2395  001142  6E34               	movwf	keypressed@tot+1,c
  2396  001144  0E10               	movlw	16
  2397  001146  6E33               	movwf	keypressed@tot,c
  2398                           
  2399                           ;main.c: 81: if(INT1IF){
  2400  001148  A0F0               	btfss	intcon3,0,c	;volatile
  2401  00114A  D18A               	goto	i2l131
  2402                           
  2403                           ;main.c: 82: lcdInst(0b11000000);;
  2404  00114C  0EC0               	movlw	192
  2405  00114E  ECA0  F00E         	call	i2_lcdInst
  2406                           
  2407                           ;main.c: 83: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2408  001152  3881               	swapf	3969,w,c	;volatile
  2409  001154  0B0F               	andlw	15
  2410  001156  0B0F               	andlw	15
  2411  001158  6E35               	movwf	keypressed@keypress,c
  2412                           
  2413                           ;main.c: 84: putch(keys[keypress]);
  2414  00115A  5035               	movf	keypressed@keypress,w,c
  2415  00115C  0D01               	mullw	1
  2416  00115E  0E01               	movlw	low _keys
  2417  001160  24F3               	addwf	prodl,w,c
  2418  001162  6EF6               	movwf	tblptrl,c
  2419  001164  0E10               	movlw	high _keys
  2420  001166  20F4               	addwfc	prodh,w,c
  2421  001168  6EF7               	movwf	tblptrh,c
  2422  00116A                     	if	0	;There are less than 3 active tblptr bytes
  2423  00116A                     	endif
  2424  00116A  0008               	tblrd		*
  2425  00116C  50F5               	movf	tablat,w,c
  2426  00116E  EC9A  F00E         	call	i2_putch
  2427                           
  2428                           ;main.c: 85: char keypress_temp = keys[keypress];
  2429  001172  5035               	movf	keypressed@keypress,w,c
  2430  001174  0D01               	mullw	1
  2431  001176  0E01               	movlw	low _keys
  2432  001178  24F3               	addwf	prodl,w,c
  2433  00117A  6EF6               	movwf	tblptrl,c
  2434  00117C  0E10               	movlw	high _keys
  2435  00117E  20F4               	addwfc	prodh,w,c
  2436  001180  6EF7               	movwf	tblptrh,c
  2437  001182                     	if	0	;There are less than 3 active tblptr bytes
  2438  001182                     	endif
  2439  001182  0008               	tblrd		*
  2440  001184  CFF5 F045          	movff	tablat,keypressed@keypress_temp
  2441                           
  2442                           ;main.c: 86: if (keypress_temp == 0b01000001){
  2443  001188  0E41               	movlw	65
  2444  00118A  1845               	xorwf	keypressed@keypress_temp,w,c
  2445  00118C  A4D8               	btfss	status,2,c
  2446  00118E  D03C               	goto	i2l1824
  2447                           
  2448                           ;main.c: 87: initLCD();
  2449  001190  EC0B  F00E         	call	i2_initLCD	;wreg free
  2450                           
  2451                           ;main.c: 88: printf("Total Sorted: %02x", tot);
  2452  001194  0E1A               	movlw	low STR_5
  2453  001196  6E08               	movwf	i2printf@f,c
  2454  001198  0E10               	movlw	high STR_5
  2455  00119A  6E09               	movwf	i2printf@f+1,c
  2456  00119C  C033  F00A         	movff	keypressed@tot,?i2_printf+2
  2457  0011A0  C034  F00B         	movff	keypressed@tot+1,?i2_printf+3
  2458  0011A4  EC84  F00B         	call	i2_printf	;wreg free
  2459                           
  2460                           ;main.c: 89: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  2461  0011A8  0E00               	movlw	0
  2462  0011AA  6E36               	movwf	keypressed@i,c
  2463  0011AC                     i2l1796:
  2464  0011AC  0E63               	movlw	99
  2465  0011AE  6436               	cpfsgt	keypressed@i,c
  2466  0011B0  D001               	goto	i2l1800
  2467  0011B2  D00A               	goto	i2l1804
  2468  0011B4                     i2l1800:
  2469  0011B4  0E21               	movlw	33
  2470  0011B6  6E1A               	movwf	??_keypressed& (0+255),c
  2471  0011B8  0E76               	movlw	118
  2472  0011BA                     i2u181_47:
  2473  0011BA  2EE8               	decfsz	wreg,f,c
  2474  0011BC  D7FE               	bra	i2u181_47
  2475  0011BE  2E1A               	decfsz	??_keypressed& (0+255),f,c
  2476  0011C0  D7FC               	bra	i2u181_47
  2477  0011C2  D000               	nop2	
  2478  0011C4  2A36               	incf	keypressed@i,f,c
  2479  0011C6  D7F2               	goto	i2l1796
  2480  0011C8                     i2l1804:
  2481                           
  2482                           ;main.c: 90: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  2483  0011C8  0E00               	movlw	0
  2484  0011CA  6E37               	movwf	keypressed@i_275,c
  2485  0011CC                     i2l1806:
  2486  0011CC  0E63               	movlw	99
  2487  0011CE  6437               	cpfsgt	keypressed@i_275,c
  2488  0011D0  D001               	goto	i2l1810
  2489  0011D2  D00A               	goto	i2l1814
  2490  0011D4                     i2l1810:
  2491  0011D4  0E21               	movlw	33
  2492  0011D6  6E1A               	movwf	??_keypressed& (0+255),c
  2493  0011D8  0E76               	movlw	118
  2494  0011DA                     i2u182_47:
  2495  0011DA  2EE8               	decfsz	wreg,f,c
  2496  0011DC  D7FE               	bra	i2u182_47
  2497  0011DE  2E1A               	decfsz	??_keypressed& (0+255),f,c
  2498  0011E0  D7FC               	bra	i2u182_47
  2499  0011E2  D000               	nop2	
  2500  0011E4  2A37               	incf	keypressed@i_275,f,c
  2501  0011E6  D7F2               	goto	i2l1806
  2502  0011E8                     i2l1814:
  2503                           
  2504                           ;main.c: 91: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  2505  0011E8  0E00               	movlw	0
  2506  0011EA  6E38               	movwf	keypressed@i_276,c
  2507  0011EC                     i2l1816:
  2508  0011EC  0E63               	movlw	99
  2509  0011EE  6438               	cpfsgt	keypressed@i_276,c
  2510  0011F0  D001               	goto	i2l1820
  2511  0011F2  D132               	goto	i2l1982
  2512  0011F4                     i2l1820:
  2513  0011F4  0E21               	movlw	33
  2514  0011F6  6E1A               	movwf	??_keypressed& (0+255),c
  2515  0011F8  0E76               	movlw	118
  2516  0011FA                     i2u183_47:
  2517  0011FA  2EE8               	decfsz	wreg,f,c
  2518  0011FC  D7FE               	bra	i2u183_47
  2519  0011FE  2E1A               	decfsz	??_keypressed& (0+255),f,c
  2520  001200  D7FC               	bra	i2u183_47
  2521  001202  D000               	nop2	
  2522  001204  2A38               	incf	keypressed@i_276,f,c
  2523  001206  D7F2               	goto	i2l1816
  2524  001208                     i2l1824:
  2525                           
  2526                           ;main.c: 93: else if(keypress_temp == 0b01000010){
  2527  001208  0E42               	movlw	66
  2528  00120A  1845               	xorwf	keypressed@keypress_temp,w,c
  2529  00120C  A4D8               	btfss	status,2,c
  2530  00120E  D049               	goto	i2l1862
  2531                           
  2532                           ;main.c: 94: initLCD();
  2533  001210  EC0B  F00E         	call	i2_initLCD	;wreg free
  2534                           
  2535                           ;main.c: 95: printf("With Tab: %02x",pop_can_tab);
  2536  001214  0E93               	movlw	low STR_6
  2537  001216  6E08               	movwf	i2printf@f,c
  2538  001218  0E10               	movlw	high STR_6
  2539  00121A  6E09               	movwf	i2printf@f+1,c
  2540  00121C  C02B  F00A         	movff	keypressed@pop_can_tab,?i2_printf+2
  2541  001220  C02C  F00B         	movff	keypressed@pop_can_tab+1,?i2_printf+3
  2542  001224  EC84  F00B         	call	i2_printf	;wreg free
  2543                           
  2544                           ;main.c: 96: lcdInst(0b11000000);;
  2545  001228  0EC0               	movlw	192
  2546  00122A  ECA0  F00E         	call	i2_lcdInst
  2547                           
  2548                           ;main.c: 97: printf("No Tab: %02x",pop_can);
  2549  00122E  0EBE               	movlw	low STR_7
  2550  001230  6E08               	movwf	i2printf@f,c
  2551  001232  0E10               	movlw	high STR_7
  2552  001234  6E09               	movwf	i2printf@f+1,c
  2553  001236  C029  F00A         	movff	keypressed@pop_can,?i2_printf+2
  2554  00123A  C02A  F00B         	movff	keypressed@pop_can+1,?i2_printf+3
  2555  00123E  EC84  F00B         	call	i2_printf	;wreg free
  2556                           
  2557                           ;main.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  2558  001242  0E00               	movlw	0
  2559  001244  6E39               	movwf	keypressed@i_279,c
  2560  001246                     i2l1834:
  2561  001246  0E63               	movlw	99
  2562  001248  6439               	cpfsgt	keypressed@i_279,c
  2563  00124A  D001               	goto	i2l1838
  2564  00124C  D00A               	goto	i2l1842
  2565  00124E                     i2l1838:
  2566  00124E  0E21               	movlw	33
  2567  001250  6E1A               	movwf	??_keypressed& (0+255),c
  2568  001252  0E76               	movlw	118
  2569  001254                     i2u184_47:
  2570  001254  2EE8               	decfsz	wreg,f,c
  2571  001256  D7FE               	bra	i2u184_47
  2572  001258  2E1A               	decfsz	??_keypressed& (0+255),f,c
  2573  00125A  D7FC               	bra	i2u184_47
  2574  00125C  D000               	nop2	
  2575  00125E  2A39               	incf	keypressed@i_279,f,c
  2576  001260  D7F2               	goto	i2l1834
  2577  001262                     i2l1842:
  2578                           
  2579                           ;main.c: 99: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  2580  001262  0E00               	movlw	0
  2581  001264  6E3A               	movwf	keypressed@i_280,c
  2582  001266                     i2l1844:
  2583  001266  0E63               	movlw	99
  2584  001268  643A               	cpfsgt	keypressed@i_280,c
  2585  00126A  D001               	goto	i2l1848
  2586  00126C  D00A               	goto	i2l1852
  2587  00126E                     i2l1848:
  2588  00126E  0E21               	movlw	33
  2589  001270  6E1A               	movwf	??_keypressed& (0+255),c
  2590  001272  0E76               	movlw	118
  2591  001274                     i2u185_47:
  2592  001274  2EE8               	decfsz	wreg,f,c
  2593  001276  D7FE               	bra	i2u185_47
  2594  001278  2E1A               	decfsz	??_keypressed& (0+255),f,c
  2595  00127A  D7FC               	bra	i2u185_47
  2596  00127C  D000               	nop2	
  2597  00127E  2A3A               	incf	keypressed@i_280,f,c
  2598  001280  D7F2               	goto	i2l1844
  2599  001282                     i2l1852:
  2600                           
  2601                           ;main.c: 100: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  2602  001282  0E00               	movlw	0
  2603  001284  6E3B               	movwf	keypressed@i_281,c
  2604  001286                     i2l1854:
  2605  001286  0E63               	movlw	99
  2606  001288  643B               	cpfsgt	keypressed@i_281,c
  2607  00128A  D001               	goto	i2l1858
  2608  00128C  D0E5               	goto	i2l1982
  2609  00128E                     i2l1858:
  2610  00128E  0E21               	movlw	33
  2611  001290  6E1A               	movwf	??_keypressed& (0+255),c
  2612  001292  0E76               	movlw	118
  2613  001294                     i2u186_47:
  2614  001294  2EE8               	decfsz	wreg,f,c
  2615  001296  D7FE               	bra	i2u186_47
  2616  001298  2E1A               	decfsz	??_keypressed& (0+255),f,c
  2617  00129A  D7FC               	bra	i2u186_47
  2618  00129C  D000               	nop2	
  2619  00129E  2A3B               	incf	keypressed@i_281,f,c
  2620  0012A0  D7F2               	goto	i2l1854
  2621  0012A2                     i2l1862:
  2622                           
  2623                           ;main.c: 102: else if(keypress_temp == 0b01000011){
  2624  0012A2  0E43               	movlw	67
  2625  0012A4  1845               	xorwf	keypressed@keypress_temp,w,c
  2626  0012A6  A4D8               	btfss	status,2,c
  2627  0012A8  D049               	goto	i2l1900
  2628                           
  2629                           ;main.c: 103: initLCD();
  2630  0012AA  EC0B  F00E         	call	i2_initLCD	;wreg free
  2631                           
  2632                           ;main.c: 104: printf("With Label: %02x",tin_can);
  2633  0012AE  0E82               	movlw	low STR_8
  2634  0012B0  6E08               	movwf	i2printf@f,c
  2635  0012B2  0E10               	movlw	high STR_8
  2636  0012B4  6E09               	movwf	i2printf@f+1,c
  2637  0012B6  C02D  F00A         	movff	keypressed@tin_can,?i2_printf+2
  2638  0012BA  C02E  F00B         	movff	keypressed@tin_can+1,?i2_printf+3
  2639  0012BE  EC84  F00B         	call	i2_printf	;wreg free
  2640                           
  2641                           ;main.c: 105: lcdInst(0b11000000);;
  2642  0012C2  0EC0               	movlw	192
  2643  0012C4  ECA0  F00E         	call	i2_lcdInst
  2644                           
  2645                           ;main.c: 106: printf("No Label: %02x",tin_can_label);
  2646  0012C8  0EA2               	movlw	low STR_9
  2647  0012CA  6E08               	movwf	i2printf@f,c
  2648  0012CC  0E10               	movlw	high STR_9
  2649  0012CE  6E09               	movwf	i2printf@f+1,c
  2650  0012D0  C02F  F00A         	movff	keypressed@tin_can_label,?i2_printf+2
  2651  0012D4  C030  F00B         	movff	keypressed@tin_can_label+1,?i2_printf+3
  2652  0012D8  EC84  F00B         	call	i2_printf	;wreg free
  2653                           
  2654                           ;main.c: 107: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  2655  0012DC  0E00               	movlw	0
  2656  0012DE  6E3C               	movwf	keypressed@i_284,c
  2657  0012E0                     i2l1872:
  2658  0012E0  0E63               	movlw	99
  2659  0012E2  643C               	cpfsgt	keypressed@i_284,c
  2660  0012E4  D001               	goto	i2l1876
  2661  0012E6  D00A               	goto	i2l1880
  2662  0012E8                     i2l1876:
  2663  0012E8  0E21               	movlw	33
  2664  0012EA  6E1A               	movwf	??_keypressed& (0+255),c
  2665  0012EC  0E76               	movlw	118
  2666  0012EE                     i2u187_47:
  2667  0012EE  2EE8               	decfsz	wreg,f,c
  2668  0012F0  D7FE               	bra	i2u187_47
  2669  0012F2  2E1A               	decfsz	??_keypressed& (0+255),f,c
  2670  0012F4  D7FC               	bra	i2u187_47
  2671  0012F6  D000               	nop2	
  2672  0012F8  2A3C               	incf	keypressed@i_284,f,c
  2673  0012FA  D7F2               	goto	i2l1872
  2674  0012FC                     i2l1880:
  2675                           
  2676                           ;main.c: 108: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  2677  0012FC  0E00               	movlw	0
  2678  0012FE  6E3D               	movwf	keypressed@i_285,c
  2679  001300                     i2l1882:
  2680  001300  0E63               	movlw	99
  2681  001302  643D               	cpfsgt	keypressed@i_285,c
  2682  001304  D001               	goto	i2l1886
  2683  001306  D00A               	goto	i2l1890
  2684  001308                     i2l1886:
  2685  001308  0E21               	movlw	33
  2686  00130A  6E1A               	movwf	??_keypressed& (0+255),c
  2687  00130C  0E76               	movlw	118
  2688  00130E                     i2u188_47:
  2689  00130E  2EE8               	decfsz	wreg,f,c
  2690  001310  D7FE               	bra	i2u188_47
  2691  001312  2E1A               	decfsz	??_keypressed& (0+255),f,c
  2692  001314  D7FC               	bra	i2u188_47
  2693  001316  D000               	nop2	
  2694  001318  2A3D               	incf	keypressed@i_285,f,c
  2695  00131A  D7F2               	goto	i2l1882
  2696  00131C                     i2l1890:
  2697                           
  2698                           ;main.c: 109: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  2699  00131C  0E00               	movlw	0
  2700  00131E  6E3E               	movwf	keypressed@i_286,c
  2701  001320                     i2l1892:
  2702  001320  0E63               	movlw	99
  2703  001322  643E               	cpfsgt	keypressed@i_286,c
  2704  001324  D001               	goto	i2l1896
  2705  001326  D098               	goto	i2l1982
  2706  001328                     i2l1896:
  2707  001328  0E21               	movlw	33
  2708  00132A  6E1A               	movwf	??_keypressed& (0+255),c
  2709  00132C  0E76               	movlw	118
  2710  00132E                     i2u189_47:
  2711  00132E  2EE8               	decfsz	wreg,f,c
  2712  001330  D7FE               	bra	i2u189_47
  2713  001332  2E1A               	decfsz	??_keypressed& (0+255),f,c
  2714  001334  D7FC               	bra	i2u189_47
  2715  001336  D000               	nop2	
  2716  001338  2A3E               	incf	keypressed@i_286,f,c
  2717  00133A  D7F2               	goto	i2l1892
  2718  00133C                     i2l1900:
  2719                           
  2720                           ;main.c: 111: else if(keypress_temp == 0b01000100){
  2721  00133C  0E44               	movlw	68
  2722  00133E  1845               	xorwf	keypressed@keypress_temp,w,c
  2723  001340  A4D8               	btfss	status,2,c
  2724  001342  D03C               	goto	i2l1936
  2725                           
  2726                           ;main.c: 112: initLCD();
  2727  001344  EC0B  F00E         	call	i2_initLCD	;wreg free
  2728                           
  2729                           ;main.c: 113: printf("Time: %02x s", operation_time);
  2730  001348  0EB1               	movlw	low STR_10
  2731  00134A  6E08               	movwf	i2printf@f,c
  2732  00134C  0E10               	movlw	high STR_10
  2733  00134E  6E09               	movwf	i2printf@f+1,c
  2734  001350  C031  F00A         	movff	keypressed@operation_time,?i2_printf+2
  2735  001354  C032  F00B         	movff	keypressed@operation_time+1,?i2_printf+3
  2736  001358  EC84  F00B         	call	i2_printf	;wreg free
  2737                           
  2738                           ;main.c: 114: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  2739  00135C  0E00               	movlw	0
  2740  00135E  6E3F               	movwf	keypressed@i_288,c
  2741  001360                     i2l1908:
  2742  001360  0E63               	movlw	99
  2743  001362  643F               	cpfsgt	keypressed@i_288,c
  2744  001364  D001               	goto	i2l1912
  2745  001366  D00A               	goto	i2l1916
  2746  001368                     i2l1912:
  2747  001368  0E21               	movlw	33
  2748  00136A  6E1A               	movwf	??_keypressed& (0+255),c
  2749  00136C  0E76               	movlw	118
  2750  00136E                     i2u190_47:
  2751  00136E  2EE8               	decfsz	wreg,f,c
  2752  001370  D7FE               	bra	i2u190_47
  2753  001372  2E1A               	decfsz	??_keypressed& (0+255),f,c
  2754  001374  D7FC               	bra	i2u190_47
  2755  001376  D000               	nop2	
  2756  001378  2A3F               	incf	keypressed@i_288,f,c
  2757  00137A  D7F2               	goto	i2l1908
  2758  00137C                     i2l1916:
  2759                           
  2760                           ;main.c: 115: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  2761  00137C  0E00               	movlw	0
  2762  00137E  6E40               	movwf	keypressed@i_289,c
  2763  001380                     i2l1918:
  2764  001380  0E63               	movlw	99
  2765  001382  6440               	cpfsgt	keypressed@i_289,c
  2766  001384  D001               	goto	i2l1922
  2767  001386  D00A               	goto	i2l1926
  2768  001388                     i2l1922:
  2769  001388  0E21               	movlw	33
  2770  00138A  6E1A               	movwf	??_keypressed& (0+255),c
  2771  00138C  0E76               	movlw	118
  2772  00138E                     i2u191_47:
  2773  00138E  2EE8               	decfsz	wreg,f,c
  2774  001390  D7FE               	bra	i2u191_47
  2775  001392  2E1A               	decfsz	??_keypressed& (0+255),f,c
  2776  001394  D7FC               	bra	i2u191_47
  2777  001396  D000               	nop2	
  2778  001398  2A40               	incf	keypressed@i_289,f,c
  2779  00139A  D7F2               	goto	i2l1918
  2780  00139C                     i2l1926:
  2781                           
  2782                           ;main.c: 116: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  2783  00139C  0E00               	movlw	0
  2784  00139E  6E41               	movwf	keypressed@i_290,c
  2785  0013A0                     i2l1928:
  2786  0013A0  0E63               	movlw	99
  2787  0013A2  6441               	cpfsgt	keypressed@i_290,c
  2788  0013A4  D001               	goto	i2l1932
  2789  0013A6  D058               	goto	i2l1982
  2790  0013A8                     i2l1932:
  2791  0013A8  0E21               	movlw	33
  2792  0013AA  6E1A               	movwf	??_keypressed& (0+255),c
  2793  0013AC  0E76               	movlw	118
  2794  0013AE                     i2u192_47:
  2795  0013AE  2EE8               	decfsz	wreg,f,c
  2796  0013B0  D7FE               	bra	i2u192_47
  2797  0013B2  2E1A               	decfsz	??_keypressed& (0+255),f,c
  2798  0013B4  D7FC               	bra	i2u192_47
  2799  0013B6  D000               	nop2	
  2800  0013B8  2A41               	incf	keypressed@i_290,f,c
  2801  0013BA  D7F2               	goto	i2l1928
  2802  0013BC                     i2l1936:
  2803                           
  2804                           ;main.c: 118: else if(keypress_temp == '#'){
  2805  0013BC  0E23               	movlw	35
  2806  0013BE  1845               	xorwf	keypressed@keypress_temp,w,c
  2807  0013C0  A4D8               	btfss	status,2,c
  2808  0013C2  D046               	goto	i2l1978
  2809                           
  2810                           ;main.c: 119: initLCD();
  2811  0013C4  EC0B  F00E         	call	i2_initLCD	;wreg free
  2812                           
  2813                           ;main.c: 120: printf("Sorting");
  2814  0013C8  0ED5               	movlw	low STR_11
  2815  0013CA  6E08               	movwf	i2printf@f,c
  2816  0013CC  0E10               	movlw	high STR_11
  2817  0013CE  6E09               	movwf	i2printf@f+1,c
  2818  0013D0  EC84  F00B         	call	i2_printf	;wreg free
  2819                           
  2820                           ;main.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  2821  0013D4  0E00               	movlw	0
  2822  0013D6  6E42               	movwf	keypressed@i_292,c
  2823  0013D8                     i2l1944:
  2824  0013D8  0E63               	movlw	99
  2825  0013DA  6442               	cpfsgt	keypressed@i_292,c
  2826  0013DC  D001               	goto	i2l1948
  2827  0013DE  D00A               	goto	i2l1952
  2828  0013E0                     i2l1948:
  2829  0013E0  0E21               	movlw	33
  2830  0013E2  6E1A               	movwf	??_keypressed& (0+255),c
  2831  0013E4  0E76               	movlw	118
  2832  0013E6                     i2u193_47:
  2833  0013E6  2EE8               	decfsz	wreg,f,c
  2834  0013E8  D7FE               	bra	i2u193_47
  2835  0013EA  2E1A               	decfsz	??_keypressed& (0+255),f,c
  2836  0013EC  D7FC               	bra	i2u193_47
  2837  0013EE  D000               	nop2	
  2838  0013F0  2A42               	incf	keypressed@i_292,f,c
  2839  0013F2  D7F2               	goto	i2l1944
  2840  0013F4                     i2l1952:
  2841                           
  2842                           ;main.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  2843  0013F4  0E00               	movlw	0
  2844  0013F6  6E43               	movwf	keypressed@i_293,c
  2845  0013F8                     i2l1954:
  2846  0013F8  0E63               	movlw	99
  2847  0013FA  6443               	cpfsgt	keypressed@i_293,c
  2848  0013FC  D001               	goto	i2l1958
  2849  0013FE  D00A               	goto	i2l1962
  2850  001400                     i2l1958:
  2851  001400  0E21               	movlw	33
  2852  001402  6E1A               	movwf	??_keypressed& (0+255),c
  2853  001404  0E76               	movlw	118
  2854  001406                     i2u194_47:
  2855  001406  2EE8               	decfsz	wreg,f,c
  2856  001408  D7FE               	bra	i2u194_47
  2857  00140A  2E1A               	decfsz	??_keypressed& (0+255),f,c
  2858  00140C  D7FC               	bra	i2u194_47
  2859  00140E  D000               	nop2	
  2860  001410  2A43               	incf	keypressed@i_293,f,c
  2861  001412  D7F2               	goto	i2l1954
  2862  001414                     i2l1962:
  2863                           
  2864                           ;main.c: 123: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  2865  001414  0E00               	movlw	0
  2866  001416  6E44               	movwf	keypressed@i_294,c
  2867  001418                     i2l1964:
  2868  001418  0E63               	movlw	99
  2869  00141A  6444               	cpfsgt	keypressed@i_294,c
  2870  00141C  D001               	goto	i2l1968
  2871  00141E  D00A               	goto	i2l1972
  2872  001420                     i2l1968:
  2873  001420  0E21               	movlw	33
  2874  001422  6E1A               	movwf	??_keypressed& (0+255),c
  2875  001424  0E76               	movlw	118
  2876  001426                     i2u195_47:
  2877  001426  2EE8               	decfsz	wreg,f,c
  2878  001428  D7FE               	bra	i2u195_47
  2879  00142A  2E1A               	decfsz	??_keypressed& (0+255),f,c
  2880  00142C  D7FC               	bra	i2u195_47
  2881  00142E  D000               	nop2	
  2882  001430  2A44               	incf	keypressed@i_294,f,c
  2883  001432  D7F2               	goto	i2l1964
  2884  001434                     i2l1972:
  2885                           
  2886                           ;main.c: 124: initLCD();
  2887  001434  EC0B  F00E         	call	i2_initLCD	;wreg free
  2888                           
  2889                           ;main.c: 125: printf("Completed");
  2890  001438  0ECB               	movlw	low STR_12
  2891  00143A  6E08               	movwf	i2printf@f,c
  2892  00143C  0E10               	movlw	high STR_12
  2893  00143E  6E09               	movwf	i2printf@f+1,c
  2894  001440  EC84  F00B         	call	i2_printf	;wreg free
  2895                           
  2896                           ;main.c: 126: passed = 1;
  2897  001444  0E00               	movlw	0
  2898  001446  0100               	movlb	0	; () banked
  2899  001448  6F9E               	movwf	(_passed+1)& (0+255),b
  2900  00144A  0E01               	movlw	1
  2901  00144C  6F9D               	movwf	_passed& (0+255),b
  2902                           
  2903                           ;main.c: 127: }
  2904  00144E  D004               	goto	i2l1982
  2905  001450                     i2l1978:
  2906                           
  2907                           ;main.c: 128: else if(keypress_temp == '0'){
  2908  001450  0E30               	movlw	48
  2909  001452  1845               	xorwf	keypressed@keypress_temp,w,c
  2910  001454  B4D8               	btfsc	status,2,c
  2911  001456  00FF               	reset		;# 
  2912  001458                     i2l1982:
  2913                           
  2914                           ;main.c: 134: }
  2915                           ;main.c: 135: lcdInst(0b10000000);;
  2916  001458  0E80               	movlw	128
  2917  00145A  ECA0  F00E         	call	i2_lcdInst
  2918                           
  2919                           ;main.c: 136: INT1IF = 0;
  2920  00145E  90F0               	bcf	intcon3,0,c	;volatile
  2921  001460                     i2l131:
  2922  001460  C028  FFF5         	movff	??_keypressed+14,tablat
  2923  001464  C027  FFF8         	movff	??_keypressed+13,tblptru
  2924  001468  C026  FFF7         	movff	??_keypressed+12,tblptrh
  2925  00146C  C025  FFF6         	movff	??_keypressed+11,tblptrl
  2926  001470  C024  FFF4         	movff	??_keypressed+10,prodh
  2927  001474  C023  FFF3         	movff	??_keypressed+9,prodl
  2928  001478  C022  FFDA         	movff	??_keypressed+8,fsr2h
  2929  00147C  C021  FFD9         	movff	??_keypressed+7,fsr2l
  2930  001480  C020  FFE2         	movff	??_keypressed+6,fsr1h
  2931  001484  C01F  FFE1         	movff	??_keypressed+5,fsr1l
  2932  001488  C01E  FFEA         	movff	??_keypressed+4,fsr0h
  2933  00148C  C01D  FFE9         	movff	??_keypressed+3,fsr0l
  2934  001490  C01C  FFFB         	movff	??_keypressed+2,pclatu
  2935  001494  C01B  FFFA         	movff	??_keypressed+1,pclath
  2936  001498  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2937  00149A  0011               	retfie		f
  2938  00149C                     __end_of_keypressed:
  2939                           	opt stack 0
  2940                           pclatu	equ	0xFFB
  2941                           pclath	equ	0xFFA
  2942                           tblptru	equ	0xFF8
  2943                           tblptrh	equ	0xFF7
  2944                           tblptrl	equ	0xFF6
  2945                           tablat	equ	0xFF5
  2946                           prodh	equ	0xFF4
  2947                           prodl	equ	0xFF3
  2948                           intcon	equ	0xFF2
  2949                           intcon3	equ	0xFF0
  2950                           fsr0h	equ	0xFEA
  2951                           fsr0l	equ	0xFE9
  2952                           wreg	equ	0xFE8
  2953                           fsr1h	equ	0xFE2
  2954                           fsr1l	equ	0xFE1
  2955                           postinc2	equ	0xFDE
  2956                           postdec2	equ	0xFDD
  2957                           fsr2h	equ	0xFDA
  2958                           fsr2l	equ	0xFD9
  2959                           status	equ	0xFD8
  2960                           
  2961 ;; *************** function i2_printf *****************
  2962 ;; Defined at:
  2963 ;;		line 464 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
  2964 ;; Parameters:    Size  Location     Type
  2965 ;;  f               2    7[COMRAM] PTR const unsigned char 
  2966 ;;		 -> STR_12(10), STR_11(8), STR_10(13), STR_9(15), 
  2967 ;;		 -> STR_8(17), STR_7(13), STR_6(15), STR_5(19), 
  2968 ;;		 -> STR_4(17), STR_3(17), STR_2(17), STR_1(17), 
  2969 ;; Auto vars:     Size  Location     Type
  2970 ;;  printf          4    0        struct .
  2971 ;;  printf          3    0        PTR const unsigned char 
  2972 ;;  printf          2   22[COMRAM] int 
  2973 ;;  printf          2   19[COMRAM] unsigned int 
  2974 ;;  printf          2   16[COMRAM] PTR void [1]
  2975 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2976 ;;  printf          2    0        unsigned int 
  2977 ;;  printf          1   24[COMRAM] char 
  2978 ;;  printf          1   21[COMRAM] char 
  2979 ;;  printf          1   18[COMRAM] unsigned char 
  2980 ;;  printf          1   15[COMRAM] unsigned char 
  2981 ;; Return value:  Size  Location     Type
  2982 ;;                  2    7[COMRAM] int 
  2983 ;; Registers used:
  2984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2985 ;; Tracked objects:
  2986 ;;		On entry : 0/0
  2987 ;;		On exit  : 0/0
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2990 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2991 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2992 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2993 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2994 ;;Total ram usage:       18 bytes
  2995 ;; Hardware stack levels used:    1
  2996 ;; Hardware stack levels required when called:    2
  2997 ;; This function calls:
  2998 ;;		i2___lwdiv
  2999 ;;		i2___wmul
  3000 ;;		i2_isdigit
  3001 ;;		i2_putch
  3002 ;; This function is called by:
  3003 ;;		_keypressed
  3004 ;; This function uses a non-reentrant model
  3005 ;;
  3006                           
  3007                           	psect	text10
  3008  001708                     __ptext10:
  3009                           	opt stack 0
  3010  001708                     i2_printf:
  3011                           	opt stack 24
  3012                           
  3013                           ;doprnt.c: 466: va_list ap;
  3014                           ;doprnt.c: 499: signed char c;
  3015                           ;doprnt.c: 501: int width;
  3016                           ;doprnt.c: 506: signed char prec;
  3017                           ;doprnt.c: 508: unsigned char flag;
  3018                           ;doprnt.c: 523: union {
  3019                           ;doprnt.c: 524: unsigned long vd;
  3020                           ;doprnt.c: 525: double integ;
  3021                           ;doprnt.c: 526: } tmpval;
  3022                           ;doprnt.c: 528: unsigned int val;
  3023                           ;doprnt.c: 529: unsigned len;
  3024                           ;doprnt.c: 530: const char * cp;
  3025                           ;doprnt.c: 533: *ap = __va_start();
  3026                           
  3027                           ;incstack = 0
  3028  001708  0E0A               	movlw	low (?i2_printf+2)
  3029  00170A  6E11               	movwf	i2printf@ap,c
  3030  00170C  0E00               	movlw	high (?i2_printf+2)
  3031  00170E  6E12               	movwf	i2printf@ap+1,c
  3032                           
  3033                           ;doprnt.c: 536: while(c = *f++) {
  3034  001710  D0E8               	goto	i2l1702
  3035  001712                     i2l1630:
  3036                           
  3037                           ;doprnt.c: 538: if(c != '%')
  3038  001712  0E25               	movlw	37
  3039  001714  1819               	xorwf	i2printf@c,w,c
  3040  001716  B4D8               	btfsc	status,2,c
  3041  001718  D004               	goto	i2l1634
  3042                           
  3043                           ;doprnt.c: 540: {
  3044                           ;doprnt.c: 541: (putch(c) );
  3045  00171A  5019               	movf	i2printf@c,w,c
  3046  00171C  EC9A  F00E         	call	i2_putch
  3047                           
  3048                           ;doprnt.c: 542: continue;
  3049  001720  D0E0               	goto	i2l1702
  3050  001722                     i2l1634:
  3051                           
  3052                           ;doprnt.c: 543: }
  3053                           ;doprnt.c: 546: width = 0;
  3054  001722  0E00               	movlw	0
  3055  001724  6E18               	movwf	i2printf@width+1,c
  3056  001726  0E00               	movlw	0
  3057  001728  6E17               	movwf	i2printf@width,c
  3058                           
  3059                           ;doprnt.c: 548: flag = 0;
  3060  00172A  0E00               	movlw	0
  3061  00172C  6E13               	movwf	i2printf@flag,c
  3062                           
  3063                           ;doprnt.c: 551: switch(*f) {
  3064                           
  3065                           ;doprnt.c: 550: for(;;) {
  3066  00172E  D003               	goto	i2l1640
  3067  001730                     i2l1636:
  3068                           
  3069                           ;doprnt.c: 580: flag |= 0x04;
  3070  001730  8413               	bsf	i2printf@flag,2,c
  3071                           
  3072                           ;doprnt.c: 581: f++;
  3073  001732  4A08               	infsnz	i2printf@f,f,c
  3074  001734  2A09               	incf	i2printf@f+1,f,c
  3075  001736                     i2l1640:
  3076  001736  C008  FFF6         	movff	i2printf@f,tblptrl
  3077  00173A  C009  FFF7         	movff	i2printf@f+1,tblptrh
  3078  00173E                     	if	0	;tblptru may be non-zero
  3079  00173E                     	endif
  3080  00173E                     	if	0	;tblptru may be non-zero
  3081  00173E                     	endif
  3082  00173E  0008               	tblrd		*
  3083  001740  50F5               	movf	tablat,w,c
  3084                           
  3085                           ; Switch size 1, requested type "space"
  3086                           ; Number of cases is 1, Range of values is 48 to 48
  3087                           ; switch strategies available:
  3088                           ; Name         Instructions Cycles
  3089                           ; simple_byte            4     3 (average)
  3090                           ;	Chosen strategy is simple_byte
  3091  001742  0A30               	xorlw	48	; case 48
  3092  001744  B4D8               	btfsc	status,2,c
  3093  001746  D7F4               	goto	i2l1636
  3094                           
  3095                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3096                           
  3097                           ;doprnt.c: 586: }
  3098                           
  3099                           ;doprnt.c: 585: break;
  3100  001748  C008  FFF6         	movff	i2printf@f,tblptrl
  3101  00174C  C009  FFF7         	movff	i2printf@f+1,tblptrh
  3102  001750                     	if	0	;tblptru may be non-zero
  3103  001750                     	endif
  3104  001750                     	if	0	;tblptru may be non-zero
  3105  001750                     	endif
  3106  001750  0008               	tblrd		*
  3107  001752  50F5               	movf	tablat,w,c
  3108  001754  EC71  F00E         	call	i2_isdigit
  3109  001758  A0D8               	btfss	status,0,c
  3110  00175A  D032               	goto	i2l1656
  3111                           
  3112                           ;doprnt.c: 598: width = 0;
  3113  00175C  0E00               	movlw	0
  3114  00175E  6E18               	movwf	i2printf@width+1,c
  3115  001760  0E00               	movlw	0
  3116  001762  6E17               	movwf	i2printf@width,c
  3117  001764                     i2l1646:
  3118                           
  3119                           ;doprnt.c: 600: width *= 10;
  3120  001764  C017  F001         	movff	i2printf@width,i2___wmul@multiplier
  3121  001768  C018  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  3122  00176C  0E00               	movlw	0
  3123  00176E  6E04               	movwf	i2___wmul@multiplicand+1,c
  3124  001770  0E0A               	movlw	10
  3125  001772  6E03               	movwf	i2___wmul@multiplicand,c
  3126  001774  EC5E  F00E         	call	i2___wmul	;wreg free
  3127  001778  C001  F017         	movff	?i2___wmul,i2printf@width
  3128  00177C  C002  F018         	movff	?i2___wmul+1,i2printf@width+1
  3129                           
  3130                           ;doprnt.c: 601: width += *f++ - '0';
  3131  001780  0ED0               	movlw	208
  3132  001782  6E0C               	movwf	??i2_printf& (0+255),c
  3133  001784  0EFF               	movlw	255
  3134  001786  6E0D               	movwf	(??i2_printf+1)& (0+255),c
  3135  001788  C008  FFF6         	movff	i2printf@f,tblptrl
  3136  00178C  C009  FFF7         	movff	i2printf@f+1,tblptrh
  3137  001790                     	if	0	;tblptru may be non-zero
  3138  001790                     	endif
  3139  001790                     	if	0	;tblptru may be non-zero
  3140  001790                     	endif
  3141  001790  0008               	tblrd		*
  3142  001792  50F5               	movf	tablat,w,c
  3143  001794  6E0E               	movwf	(??i2_printf+2)& (0+255),c
  3144  001796  6A0F               	clrf	(??i2_printf+3)& (0+255),c
  3145  001798  500C               	movf	??i2_printf,w,c
  3146  00179A  260E               	addwf	??i2_printf+2,f,c
  3147  00179C  500D               	movf	??i2_printf+1,w,c
  3148  00179E  220F               	addwfc	??i2_printf+3,f,c
  3149  0017A0  500E               	movf	??i2_printf+2,w,c
  3150  0017A2  2617               	addwf	i2printf@width,f,c
  3151  0017A4  500F               	movf	??i2_printf+3,w,c
  3152  0017A6  2218               	addwfc	i2printf@width+1,f,c
  3153  0017A8  4A08               	infsnz	i2printf@f,f,c
  3154  0017AA  2A09               	incf	i2printf@f+1,f,c
  3155                           
  3156                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3157  0017AC  C008  FFF6         	movff	i2printf@f,tblptrl
  3158  0017B0  C009  FFF7         	movff	i2printf@f+1,tblptrh
  3159  0017B4                     	if	0	;tblptru may be non-zero
  3160  0017B4                     	endif
  3161  0017B4                     	if	0	;tblptru may be non-zero
  3162  0017B4                     	endif
  3163  0017B4  0008               	tblrd		*
  3164  0017B6  50F5               	movf	tablat,w,c
  3165  0017B8  EC71  F00E         	call	i2_isdigit
  3166  0017BC  B0D8               	btfsc	status,0,c
  3167  0017BE  D7D2               	goto	i2l1646
  3168  0017C0                     i2l1656:
  3169  0017C0  C008  FFF6         	movff	i2printf@f,tblptrl
  3170  0017C4  C009  FFF7         	movff	i2printf@f+1,tblptrh
  3171  0017C8  4A08               	infsnz	i2printf@f,f,c
  3172  0017CA  2A09               	incf	i2printf@f+1,f,c
  3173  0017CC                     	if	0	;tblptru may be non-zero
  3174  0017CC                     	endif
  3175  0017CC                     	if	0	;tblptru may be non-zero
  3176  0017CC                     	endif
  3177  0017CC  0008               	tblrd		*
  3178  0017CE  CFF5 F019          	movff	tablat,i2printf@c
  3179  0017D2  5019               	movf	i2printf@c,w,c
  3180                           
  3181                           ; Switch size 1, requested type "space"
  3182                           ; Number of cases is 2, Range of values is 0 to 120
  3183                           ; switch strategies available:
  3184                           ; Name         Instructions Cycles
  3185                           ; simple_byte            7     4 (average)
  3186                           ;	Chosen strategy is simple_byte
  3187  0017D4  0A00               	xorlw	0	; case 0
  3188  0017D6  B4D8               	btfsc	status,2,c
  3189  0017D8  0012               	return	
  3190  0017DA  0A78               	xorlw	120	; case 120
  3191  0017DC  A4D8               	btfss	status,2,c
  3192  0017DE  D081               	goto	i2l1702
  3193                           
  3194                           ;doprnt.c: 1273: {
  3195                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3196  0017E0  C011  FFD9         	movff	i2printf@ap,fsr2l
  3197  0017E4  C012  FFDA         	movff	i2printf@ap+1,fsr2h
  3198  0017E8  CFDE F014          	movff	postinc2,i2printf@val
  3199  0017EC  CFDD F015          	movff	postdec2,i2printf@val+1
  3200  0017F0  0E02               	movlw	2
  3201  0017F2  2611               	addwf	i2printf@ap,f,c
  3202  0017F4  0E00               	movlw	0
  3203  0017F6  2212               	addwfc	i2printf@ap+1,f,c
  3204                           
  3205                           ;doprnt.c: 1287: }
  3206                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3207  0017F8  0E01               	movlw	1
  3208  0017FA  6E19               	movwf	i2printf@c,c
  3209  0017FC                     i2l1664:
  3210  0017FC  0E04               	movlw	4
  3211  0017FE  1819               	xorwf	i2printf@c,w,c
  3212  001800  B4D8               	btfsc	status,2,c
  3213  001802  D012               	goto	i2l1676
  3214                           
  3215                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3216  001804  5019               	movf	i2printf@c,w,c
  3217  001806  0D02               	mullw	2
  3218  001808  0E12               	movlw	low _hexpowers
  3219  00180A  24F3               	addwf	prodl,w,c
  3220  00180C  6EF6               	movwf	tblptrl,c
  3221  00180E  0E10               	movlw	high _hexpowers
  3222  001810  20F4               	addwfc	prodh,w,c
  3223  001812  6EF7               	movwf	tblptrh,c
  3224  001814                     	if	0	;There are less than 3 active tblptr bytes
  3225  001814                     	endif
  3226  001814  0009               	tblrd		*+
  3227  001816  50F5               	movf	tablat,w,c
  3228  001818  5C14               	subwf	i2printf@val,w,c
  3229  00181A  0009               	tblrd		*+
  3230  00181C  50F5               	movf	tablat,w,c
  3231  00181E  5815               	subwfb	i2printf@val+1,w,c
  3232  001820  A0D8               	btfss	status,0,c
  3233  001822  D002               	goto	i2l1676
  3234                           
  3235                           ;doprnt.c: 1318: break;
  3236  001824  2A19               	incf	i2printf@c,f,c
  3237  001826  D7EA               	goto	i2l1664
  3238  001828                     i2l1676:
  3239                           
  3240                           ;doprnt.c: 1381: if(width > c)
  3241  001828  0E80               	movlw	128
  3242  00182A  BE19               	btfsc	i2printf@c,7,c
  3243  00182C  0E7F               	movlw	127
  3244  00182E  6E0C               	movwf	??i2_printf& (0+255),c
  3245  001830  5017               	movf	i2printf@width,w,c
  3246  001832  5C19               	subwf	i2printf@c,w,c
  3247  001834  5018               	movf	i2printf@width+1,w,c
  3248  001836  0A80               	xorlw	128
  3249  001838  580C               	subwfb	??i2_printf& (0+255),w,c
  3250  00183A  B0D8               	btfsc	status,0,c
  3251  00183C  D007               	goto	i2l1680
  3252                           
  3253                           ;doprnt.c: 1382: width -= c;
  3254  00183E  5019               	movf	i2printf@c,w,c
  3255  001840  5E17               	subwf	i2printf@width,f,c
  3256  001842  0E00               	movlw	0
  3257  001844  BE19               	btfsc	i2printf@c,7,c
  3258  001846  0EFF               	movlw	255
  3259  001848  5A18               	subwfb	i2printf@width+1,f,c
  3260  00184A  D004               	goto	i2l1682
  3261  00184C                     i2l1680:
  3262                           
  3263                           ;doprnt.c: 1383: else
  3264                           ;doprnt.c: 1384: width = 0;
  3265  00184C  0E00               	movlw	0
  3266  00184E  6E18               	movwf	i2printf@width+1,c
  3267  001850  0E00               	movlw	0
  3268  001852  6E17               	movwf	i2printf@width,c
  3269  001854                     i2l1682:
  3270                           
  3271                           ;doprnt.c: 1387: if(flag & 0x04) {
  3272  001854  A413               	btfss	i2printf@flag,2,c
  3273  001856  D00B               	goto	i2l1690
  3274  001858                     
  3275                           ;doprnt.c: 1415: if(width)
  3276  001858  5017               	movf	i2printf@width,w,c
  3277  00185A  1018               	iorwf	i2printf@width+1,w,c
  3278  00185C  B4D8               	btfsc	status,2,c
  3279  00185E  D015               	goto	i2l171
  3280                           
  3281                           ;doprnt.c: 1417: (putch('0') );
  3282                           
  3283                           ;doprnt.c: 1416: do
  3284  001860  0E30               	movlw	48
  3285  001862  EC9A  F00E         	call	i2_putch
  3286                           
  3287                           ;doprnt.c: 1418: while(--width);
  3288  001866  0617               	decf	i2printf@width,f,c
  3289  001868  A0D8               	btfss	status,0,c
  3290  00186A  0618               	decf	i2printf@width+1,f,c
  3291  00186C  D7F5               	goto	L2
  3292  00186E                     i2l1690:
  3293                           
  3294                           ;doprnt.c: 1422: {
  3295                           ;doprnt.c: 1424: if(width
  3296                           ;doprnt.c: 1428: )
  3297  00186E  5017               	movf	i2printf@width,w,c
  3298  001870  1018               	iorwf	i2printf@width+1,w,c
  3299  001872  B4D8               	btfsc	status,2,c
  3300  001874  D00A               	goto	i2l171
  3301  001876                     i2l1692:
  3302                           
  3303                           ;doprnt.c: 1430: (putch(' ') );
  3304  001876  0E20               	movlw	32
  3305  001878  EC9A  F00E         	call	i2_putch
  3306                           
  3307                           ;doprnt.c: 1431: while(--width);
  3308  00187C  0617               	decf	i2printf@width,f,c
  3309  00187E  A0D8               	btfss	status,0,c
  3310  001880  0618               	decf	i2printf@width+1,f,c
  3311  001882  5017               	movf	i2printf@width,w,c
  3312  001884  1018               	iorwf	i2printf@width+1,w,c
  3313  001886  A4D8               	btfss	status,2,c
  3314  001888  D7F6               	goto	i2l1692
  3315  00188A                     i2l171:
  3316                           
  3317                           ;doprnt.c: 1469: }
  3318                           ;doprnt.c: 1472: prec = c;
  3319  00188A  C019  F016         	movff	i2printf@c,i2printf@prec
  3320                           
  3321                           ;doprnt.c: 1474: while(prec--) {
  3322  00188E  D025               	goto	i2l175
  3323  001890                     i2l1696:
  3324                           
  3325                           ;doprnt.c: 1478: {
  3326                           ;doprnt.c: 1499: {
  3327                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3328  001890  C014  F001         	movff	i2printf@val,i2___lwdiv@dividend
  3329  001894  C015  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  3330  001898  5016               	movf	i2printf@prec,w,c
  3331  00189A  0D02               	mullw	2
  3332  00189C  0E12               	movlw	low _hexpowers
  3333  00189E  24F3               	addwf	prodl,w,c
  3334  0018A0  6EF6               	movwf	tblptrl,c
  3335  0018A2  0E10               	movlw	high _hexpowers
  3336  0018A4  20F4               	addwfc	prodh,w,c
  3337  0018A6  6EF7               	movwf	tblptrh,c
  3338  0018A8                     	if	0	;There are less than 3 active tblptr bytes
  3339  0018A8                     	endif
  3340  0018A8  0009               	tblrd		*+
  3341  0018AA  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  3342  0018AE  000A               	tblrd		*-
  3343  0018B0  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  3344  0018B4  ECBD  F00D         	call	i2___lwdiv	;wreg free
  3345  0018B8  5001               	movf	?i2___lwdiv,w,c
  3346  0018BA  0B0F               	andlw	15
  3347  0018BC  6E10               	movwf	i2printf@idx,c
  3348                           
  3349                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3350  0018BE  5010               	movf	i2printf@idx,w,c
  3351  0018C0  0D01               	mullw	1
  3352  0018C2  0E2D               	movlw	low STR_13
  3353  0018C4  24F3               	addwf	prodl,w,c
  3354  0018C6  6EF6               	movwf	tblptrl,c
  3355  0018C8  0E10               	movlw	high STR_13
  3356  0018CA  20F4               	addwfc	prodh,w,c
  3357  0018CC  6EF7               	movwf	tblptrh,c
  3358  0018CE                     	if	0	;There are less than 3 active tblptr bytes
  3359  0018CE                     	endif
  3360  0018CE  0008               	tblrd		*
  3361  0018D0  CFF5 F019          	movff	tablat,i2printf@c
  3362                           
  3363                           ;doprnt.c: 1508: }
  3364                           ;doprnt.c: 1523: }
  3365                           ;doprnt.c: 1524: (putch(c) );
  3366  0018D4  5019               	movf	i2printf@c,w,c
  3367  0018D6  EC9A  F00E         	call	i2_putch
  3368  0018DA                     i2l175:
  3369  0018DA  0616               	decf	i2printf@prec,f,c
  3370  0018DC  2816               	incf	i2printf@prec,w,c
  3371  0018DE  A4D8               	btfss	status,2,c
  3372  0018E0  D7D7               	goto	i2l1696
  3373  0018E2                     i2l1702:
  3374  0018E2  C008  FFF6         	movff	i2printf@f,tblptrl
  3375  0018E6  C009  FFF7         	movff	i2printf@f+1,tblptrh
  3376  0018EA  4A08               	infsnz	i2printf@f,f,c
  3377  0018EC  2A09               	incf	i2printf@f+1,f,c
  3378  0018EE                     	if	0	;tblptru may be non-zero
  3379  0018EE                     	endif
  3380  0018EE                     	if	0	;tblptru may be non-zero
  3381  0018EE                     	endif
  3382  0018EE  0008               	tblrd		*
  3383  0018F0  CFF5 F019          	movff	tablat,i2printf@c
  3384  0018F4  5019               	movf	i2printf@c,w,c
  3385  0018F6  B4D8               	btfsc	status,2,c
  3386  0018F8  0012               	return	
  3387  0018FA  D70B               	goto	i2l1630
  3388  0018FC                     __end_ofi2_printf:
  3389                           	opt stack 0
  3390                           pclatu	equ	0xFFB
  3391                           pclath	equ	0xFFA
  3392                           tblptru	equ	0xFF8
  3393                           tblptrh	equ	0xFF7
  3394                           tblptrl	equ	0xFF6
  3395                           tablat	equ	0xFF5
  3396                           prodh	equ	0xFF4
  3397                           prodl	equ	0xFF3
  3398                           intcon	equ	0xFF2
  3399                           intcon3	equ	0xFF0
  3400                           fsr0h	equ	0xFEA
  3401                           fsr0l	equ	0xFE9
  3402                           wreg	equ	0xFE8
  3403                           fsr1h	equ	0xFE2
  3404                           fsr1l	equ	0xFE1
  3405                           postinc2	equ	0xFDE
  3406                           postdec2	equ	0xFDD
  3407                           fsr2h	equ	0xFDA
  3408                           fsr2l	equ	0xFD9
  3409                           status	equ	0xFD8
  3410                           
  3411 ;; *************** function i2_putch *****************
  3412 ;; Defined at:
  3413 ;;		line 30 in file "lcd.c"
  3414 ;; Parameters:    Size  Location     Type
  3415 ;;  data            1    wreg     unsigned char 
  3416 ;; Auto vars:     Size  Location     Type
  3417 ;;  data            1    2[COMRAM] unsigned char 
  3418 ;; Return value:  Size  Location     Type
  3419 ;;                  1    wreg      void 
  3420 ;; Registers used:
  3421 ;;		wreg, status,2, status,0, cstack
  3422 ;; Tracked objects:
  3423 ;;		On entry : 0/0
  3424 ;;		On exit  : 0/0
  3425 ;;		Unchanged: 0/0
  3426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3428 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3430 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3431 ;;Total ram usage:        1 bytes
  3432 ;; Hardware stack levels used:    1
  3433 ;; Hardware stack levels required when called:    1
  3434 ;; This function calls:
  3435 ;;		i2_lcdNibble
  3436 ;; This function is called by:
  3437 ;;		_keypressed
  3438 ;;		i2_printf
  3439 ;; This function uses a non-reentrant model
  3440 ;;
  3441                           
  3442                           	psect	text11
  3443  001D34                     __ptext11:
  3444                           	opt stack 0
  3445  001D34                     i2_putch:
  3446                           	opt stack 25
  3447                           
  3448                           ;incstack = 0
  3449                           ;i2putch@data stored from wreg
  3450  001D34  6E03               	movwf	i2putch@data,c
  3451                           
  3452                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  3453  001D36  848C               	bsf	3980,2,c	;volatile
  3454                           
  3455                           ;lcd.c: 32: lcdNibble(data);
  3456  001D38  5003               	movf	i2putch@data,w,c
  3457  001D3A  EC92  F00D         	call	i2_lcdNibble
  3458  001D3E  0012               	return		;funcret
  3459  001D40                     __end_ofi2_putch:
  3460                           	opt stack 0
  3461                           pclatu	equ	0xFFB
  3462                           pclath	equ	0xFFA
  3463                           tblptru	equ	0xFF8
  3464                           tblptrh	equ	0xFF7
  3465                           tblptrl	equ	0xFF6
  3466                           tablat	equ	0xFF5
  3467                           prodh	equ	0xFF4
  3468                           prodl	equ	0xFF3
  3469                           intcon	equ	0xFF2
  3470                           intcon3	equ	0xFF0
  3471                           fsr0h	equ	0xFEA
  3472                           fsr0l	equ	0xFE9
  3473                           wreg	equ	0xFE8
  3474                           fsr1h	equ	0xFE2
  3475                           fsr1l	equ	0xFE1
  3476                           postinc2	equ	0xFDE
  3477                           postdec2	equ	0xFDD
  3478                           fsr2h	equ	0xFDA
  3479                           fsr2l	equ	0xFD9
  3480                           status	equ	0xFD8
  3481                           
  3482 ;; *************** function i2_isdigit *****************
  3483 ;; Defined at:
  3484 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/isdigit.c"
  3485 ;; Parameters:    Size  Location     Type
  3486 ;;  c               1    wreg     unsigned char 
  3487 ;; Auto vars:     Size  Location     Type
  3488 ;;  c               1    2[COMRAM] unsigned char 
  3489 ;; Return value:  Size  Location     Type
  3490 ;;		None               void
  3491 ;; Registers used:
  3492 ;;		wreg, status,2, status,0
  3493 ;; Tracked objects:
  3494 ;;		On entry : 0/0
  3495 ;;		On exit  : 0/0
  3496 ;;		Unchanged: 0/0
  3497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3499 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3500 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3501 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3502 ;;Total ram usage:        3 bytes
  3503 ;; Hardware stack levels used:    1
  3504 ;; This function calls:
  3505 ;;		Nothing
  3506 ;; This function is called by:
  3507 ;;		i2_printf
  3508 ;; This function uses a non-reentrant model
  3509 ;;
  3510                           
  3511                           	psect	text12
  3512  001CE2                     __ptext12:
  3513                           	opt stack 0
  3514  001CE2                     i2_isdigit:
  3515                           	opt stack 25
  3516                           
  3517                           ;incstack = 0
  3518                           ;i2isdigit@c stored from wreg
  3519  001CE2  6E03               	movwf	i2isdigit@c,c
  3520  001CE4  0E00               	movlw	0
  3521  001CE6  6E02               	movwf	i2_isdigit$543,c
  3522  001CE8  0E3A               	movlw	58
  3523  001CEA  6003               	cpfslt	i2isdigit@c,c
  3524  001CEC  D005               	goto	i2l1498
  3525  001CEE  0E2F               	movlw	47
  3526  001CF0  6403               	cpfsgt	i2isdigit@c,c
  3527  001CF2  D002               	goto	i2l1498
  3528  001CF4  0E01               	movlw	1
  3529  001CF6  6E02               	movwf	i2_isdigit$543,c
  3530  001CF8                     i2l1498:
  3531  001CF8  C002  F001         	movff	i2_isdigit$543,??i2_isdigit
  3532  001CFC  3001               	rrcf	??i2_isdigit,w,c
  3533  001CFE  0012               	return	
  3534  001D00                     __end_ofi2_isdigit:
  3535                           	opt stack 0
  3536                           pclatu	equ	0xFFB
  3537                           pclath	equ	0xFFA
  3538                           tblptru	equ	0xFF8
  3539                           tblptrh	equ	0xFF7
  3540                           tblptrl	equ	0xFF6
  3541                           tablat	equ	0xFF5
  3542                           prodh	equ	0xFF4
  3543                           prodl	equ	0xFF3
  3544                           intcon	equ	0xFF2
  3545                           intcon3	equ	0xFF0
  3546                           fsr0h	equ	0xFEA
  3547                           fsr0l	equ	0xFE9
  3548                           wreg	equ	0xFE8
  3549                           fsr1h	equ	0xFE2
  3550                           fsr1l	equ	0xFE1
  3551                           postinc2	equ	0xFDE
  3552                           postdec2	equ	0xFDD
  3553                           fsr2h	equ	0xFDA
  3554                           fsr2l	equ	0xFD9
  3555                           status	equ	0xFD8
  3556                           
  3557 ;; *************** function i2___wmul *****************
  3558 ;; Defined at:
  3559 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/Umul16.c"
  3560 ;; Parameters:    Size  Location     Type
  3561 ;;  multiplier      2    0[COMRAM] unsigned int 
  3562 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3563 ;; Auto vars:     Size  Location     Type
  3564 ;;  __wmul          2    4[COMRAM] unsigned int 
  3565 ;; Return value:  Size  Location     Type
  3566 ;;                  2    0[COMRAM] unsigned int 
  3567 ;; Registers used:
  3568 ;;		wreg, status,2, status,0, prodl, prodh
  3569 ;; Tracked objects:
  3570 ;;		On entry : 0/0
  3571 ;;		On exit  : 0/0
  3572 ;;		Unchanged: 0/0
  3573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3574 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3575 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3577 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3578 ;;Total ram usage:        6 bytes
  3579 ;; Hardware stack levels used:    1
  3580 ;; This function calls:
  3581 ;;		Nothing
  3582 ;; This function is called by:
  3583 ;;		i2_printf
  3584 ;; This function uses a non-reentrant model
  3585 ;;
  3586                           
  3587                           	psect	text13
  3588  001CBC                     __ptext13:
  3589                           	opt stack 0
  3590  001CBC                     i2___wmul:
  3591                           	opt stack 25
  3592                           
  3593                           ;incstack = 0
  3594  001CBC  5001               	movf	i2___wmul@multiplier,w,c
  3595  001CBE  0203               	mulwf	i2___wmul@multiplicand,c
  3596  001CC0  CFF3 F005          	movff	prodl,i2___wmul@product
  3597  001CC4  CFF4 F006          	movff	prodh,i2___wmul@product+1
  3598  001CC8  5001               	movf	i2___wmul@multiplier,w,c
  3599  001CCA  0204               	mulwf	i2___wmul@multiplicand+1,c
  3600  001CCC  50F3               	movf	prodl,w,c
  3601  001CCE  2606               	addwf	i2___wmul@product+1,f,c
  3602  001CD0  5002               	movf	i2___wmul@multiplier+1,w,c
  3603  001CD2  0203               	mulwf	i2___wmul@multiplicand,c
  3604  001CD4  50F3               	movf	prodl,w,c
  3605  001CD6  2606               	addwf	i2___wmul@product+1,f,c
  3606  001CD8  C005  F001         	movff	i2___wmul@product,?i2___wmul
  3607  001CDC  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  3608  001CE0  0012               	return	
  3609  001CE2                     __end_ofi2___wmul:
  3610                           	opt stack 0
  3611                           pclatu	equ	0xFFB
  3612                           pclath	equ	0xFFA
  3613                           tblptru	equ	0xFF8
  3614                           tblptrh	equ	0xFF7
  3615                           tblptrl	equ	0xFF6
  3616                           tablat	equ	0xFF5
  3617                           prodh	equ	0xFF4
  3618                           prodl	equ	0xFF3
  3619                           intcon	equ	0xFF2
  3620                           intcon3	equ	0xFF0
  3621                           fsr0h	equ	0xFEA
  3622                           fsr0l	equ	0xFE9
  3623                           wreg	equ	0xFE8
  3624                           fsr1h	equ	0xFE2
  3625                           fsr1l	equ	0xFE1
  3626                           postinc2	equ	0xFDE
  3627                           postdec2	equ	0xFDD
  3628                           fsr2h	equ	0xFDA
  3629                           fsr2l	equ	0xFD9
  3630                           status	equ	0xFD8
  3631                           
  3632 ;; *************** function i2___lwdiv *****************
  3633 ;; Defined at:
  3634 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  3635 ;; Parameters:    Size  Location     Type
  3636 ;;  dividend        2    0[COMRAM] unsigned int 
  3637 ;;  divisor         2    2[COMRAM] unsigned int 
  3638 ;; Auto vars:     Size  Location     Type
  3639 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  3640 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  3641 ;; Return value:  Size  Location     Type
  3642 ;;                  2    0[COMRAM] unsigned int 
  3643 ;; Registers used:
  3644 ;;		wreg, status,2, status,0
  3645 ;; Tracked objects:
  3646 ;;		On entry : 0/0
  3647 ;;		On exit  : 0/0
  3648 ;;		Unchanged: 0/0
  3649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3650 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3651 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3653 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3654 ;;Total ram usage:        7 bytes
  3655 ;; Hardware stack levels used:    1
  3656 ;; This function calls:
  3657 ;;		Nothing
  3658 ;; This function is called by:
  3659 ;;		i2_printf
  3660 ;; This function uses a non-reentrant model
  3661 ;;
  3662                           
  3663                           	psect	text14
  3664  001B7A                     __ptext14:
  3665                           	opt stack 0
  3666  001B7A                     i2___lwdiv:
  3667                           	opt stack 25
  3668                           
  3669                           ;incstack = 0
  3670  001B7A  0E00               	movlw	0
  3671  001B7C  6E06               	movwf	i2___lwdiv@quotient+1,c
  3672  001B7E  0E00               	movlw	0
  3673  001B80  6E05               	movwf	i2___lwdiv@quotient,c
  3674  001B82  5003               	movf	i2___lwdiv@divisor,w,c
  3675  001B84  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  3676  001B86  B4D8               	btfsc	status,2,c
  3677  001B88  D01C               	goto	i2l587
  3678  001B8A  0E01               	movlw	1
  3679  001B8C  6E07               	movwf	i2___lwdiv@counter,c
  3680  001B8E  D004               	goto	i2l1510
  3681  001B90                     i2l1508:
  3682  001B90  90D8               	bcf	status,0,c
  3683  001B92  3603               	rlcf	i2___lwdiv@divisor,f,c
  3684  001B94  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  3685  001B96  2A07               	incf	i2___lwdiv@counter,f,c
  3686  001B98                     i2l1510:
  3687  001B98  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  3688  001B9A  D7FA               	goto	i2l1508
  3689  001B9C                     i2l1512:
  3690  001B9C  90D8               	bcf	status,0,c
  3691  001B9E  3605               	rlcf	i2___lwdiv@quotient,f,c
  3692  001BA0  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  3693  001BA2  5003               	movf	i2___lwdiv@divisor,w,c
  3694  001BA4  5C01               	subwf	i2___lwdiv@dividend,w,c
  3695  001BA6  5004               	movf	i2___lwdiv@divisor+1,w,c
  3696  001BA8  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  3697  001BAA  A0D8               	btfss	status,0,c
  3698  001BAC  D005               	goto	i2l1520
  3699  001BAE  5003               	movf	i2___lwdiv@divisor,w,c
  3700  001BB0  5E01               	subwf	i2___lwdiv@dividend,f,c
  3701  001BB2  5004               	movf	i2___lwdiv@divisor+1,w,c
  3702  001BB4  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  3703  001BB6  8005               	bsf	i2___lwdiv@quotient,0,c
  3704  001BB8                     i2l1520:
  3705  001BB8  90D8               	bcf	status,0,c
  3706  001BBA  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  3707  001BBC  3203               	rrcf	i2___lwdiv@divisor,f,c
  3708  001BBE  2E07               	decfsz	i2___lwdiv@counter,f,c
  3709  001BC0  D7ED               	goto	i2l1512
  3710  001BC2                     i2l587:
  3711  001BC2  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  3712  001BC6  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  3713  001BCA  0012               	return		;funcret
  3714  001BCC                     __end_ofi2___lwdiv:
  3715                           	opt stack 0
  3716                           pclatu	equ	0xFFB
  3717                           pclath	equ	0xFFA
  3718                           tblptru	equ	0xFF8
  3719                           tblptrh	equ	0xFF7
  3720                           tblptrl	equ	0xFF6
  3721                           tablat	equ	0xFF5
  3722                           prodh	equ	0xFF4
  3723                           prodl	equ	0xFF3
  3724                           intcon	equ	0xFF2
  3725                           intcon3	equ	0xFF0
  3726                           fsr0h	equ	0xFEA
  3727                           fsr0l	equ	0xFE9
  3728                           wreg	equ	0xFE8
  3729                           fsr1h	equ	0xFE2
  3730                           fsr1l	equ	0xFE1
  3731                           postinc2	equ	0xFDE
  3732                           postdec2	equ	0xFDD
  3733                           fsr2h	equ	0xFDA
  3734                           fsr2l	equ	0xFD9
  3735                           status	equ	0xFD8
  3736                           
  3737 ;; *************** function i2_initLCD *****************
  3738 ;; Defined at:
  3739 ;;		line 14 in file "lcd.c"
  3740 ;; Parameters:    Size  Location     Type
  3741 ;;		None
  3742 ;; Auto vars:     Size  Location     Type
  3743 ;;		None
  3744 ;; Return value:  Size  Location     Type
  3745 ;;                  1    wreg      void 
  3746 ;; Registers used:
  3747 ;;		wreg, status,2, status,0, cstack
  3748 ;; Tracked objects:
  3749 ;;		On entry : 0/0
  3750 ;;		On exit  : 0/0
  3751 ;;		Unchanged: 0/0
  3752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3755 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3756 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3757 ;;Total ram usage:        1 bytes
  3758 ;; Hardware stack levels used:    1
  3759 ;; Hardware stack levels required when called:    2
  3760 ;; This function calls:
  3761 ;;		i2_lcdInst
  3762 ;; This function is called by:
  3763 ;;		_keypressed
  3764 ;; This function uses a non-reentrant model
  3765 ;;
  3766                           
  3767                           	psect	text15
  3768  001C16                     __ptext15:
  3769                           	opt stack 0
  3770  001C16                     i2_initLCD:
  3771                           	opt stack 24
  3772                           
  3773                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  3774                           
  3775                           ;incstack = 0
  3776  001C16  0E31               	movlw	49
  3777  001C18  6E04               	movwf	??i2_initLCD& (0+255),c
  3778  001C1A  0EB2               	movlw	178
  3779  001C1C                     i2u196_47:
  3780  001C1C  2EE8               	decfsz	wreg,f,c
  3781  001C1E  D7FE               	bra	i2u196_47
  3782  001C20  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  3783  001C22  D7FC               	bra	i2u196_47
  3784  001C24  D000               	nop2	
  3785                           
  3786                           ;lcd.c: 16: lcdInst(0b00110011);
  3787  001C26  0E33               	movlw	51
  3788  001C28  ECA0  F00E         	call	i2_lcdInst
  3789                           
  3790                           ;lcd.c: 17: lcdInst(0b00110010);
  3791  001C2C  0E32               	movlw	50
  3792  001C2E  ECA0  F00E         	call	i2_lcdInst
  3793                           
  3794                           ;lcd.c: 18: lcdInst(0b00101000);
  3795  001C32  0E28               	movlw	40
  3796  001C34  ECA0  F00E         	call	i2_lcdInst
  3797                           
  3798                           ;lcd.c: 19: lcdInst(0b00001111);
  3799  001C38  0E0F               	movlw	15
  3800  001C3A  ECA0  F00E         	call	i2_lcdInst
  3801                           
  3802                           ;lcd.c: 20: lcdInst(0b00000110);
  3803  001C3E  0E06               	movlw	6
  3804  001C40  ECA0  F00E         	call	i2_lcdInst
  3805                           
  3806                           ;lcd.c: 21: lcdInst(0b00000001);
  3807  001C44  0E01               	movlw	1
  3808  001C46  ECA0  F00E         	call	i2_lcdInst
  3809                           
  3810                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  3811  001C4A  0E31               	movlw	49
  3812  001C4C  6E04               	movwf	??i2_initLCD& (0+255),c
  3813  001C4E  0EB2               	movlw	178
  3814  001C50                     i2u197_47:
  3815  001C50  2EE8               	decfsz	wreg,f,c
  3816  001C52  D7FE               	bra	i2u197_47
  3817  001C54  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  3818  001C56  D7FC               	bra	i2u197_47
  3819  001C58  D000               	nop2	
  3820  001C5A  0012               	return		;funcret
  3821  001C5C                     __end_ofi2_initLCD:
  3822                           	opt stack 0
  3823                           pclatu	equ	0xFFB
  3824                           pclath	equ	0xFFA
  3825                           tblptru	equ	0xFF8
  3826                           tblptrh	equ	0xFF7
  3827                           tblptrl	equ	0xFF6
  3828                           tablat	equ	0xFF5
  3829                           prodh	equ	0xFF4
  3830                           prodl	equ	0xFF3
  3831                           intcon	equ	0xFF2
  3832                           intcon3	equ	0xFF0
  3833                           fsr0h	equ	0xFEA
  3834                           fsr0l	equ	0xFE9
  3835                           wreg	equ	0xFE8
  3836                           fsr1h	equ	0xFE2
  3837                           fsr1l	equ	0xFE1
  3838                           postinc2	equ	0xFDE
  3839                           postdec2	equ	0xFDD
  3840                           fsr2h	equ	0xFDA
  3841                           fsr2l	equ	0xFD9
  3842                           status	equ	0xFD8
  3843                           
  3844 ;; *************** function i2_lcdInst *****************
  3845 ;; Defined at:
  3846 ;;		line 25 in file "lcd.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;  data            1    wreg     unsigned char 
  3849 ;; Auto vars:     Size  Location     Type
  3850 ;;  data            1    2[COMRAM] unsigned char 
  3851 ;; Return value:  Size  Location     Type
  3852 ;;                  1    wreg      void 
  3853 ;; Registers used:
  3854 ;;		wreg, status,2, status,0, cstack
  3855 ;; Tracked objects:
  3856 ;;		On entry : 0/0
  3857 ;;		On exit  : 0/0
  3858 ;;		Unchanged: 0/0
  3859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3861 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3863 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3864 ;;Total ram usage:        1 bytes
  3865 ;; Hardware stack levels used:    1
  3866 ;; Hardware stack levels required when called:    1
  3867 ;; This function calls:
  3868 ;;		i2_lcdNibble
  3869 ;; This function is called by:
  3870 ;;		_keypressed
  3871 ;;		i2_initLCD
  3872 ;; This function uses a non-reentrant model
  3873 ;;
  3874                           
  3875                           	psect	text16
  3876  001D40                     __ptext16:
  3877                           	opt stack 0
  3878  001D40                     i2_lcdInst:
  3879                           	opt stack 25
  3880                           
  3881                           ;incstack = 0
  3882                           ;i2lcdInst@data stored from wreg
  3883  001D40  6E03               	movwf	i2lcdInst@data,c
  3884                           
  3885                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  3886  001D42  948C               	bcf	3980,2,c	;volatile
  3887                           
  3888                           ;lcd.c: 27: lcdNibble(data);
  3889  001D44  5003               	movf	i2lcdInst@data,w,c
  3890  001D46  EC92  F00D         	call	i2_lcdNibble
  3891  001D4A  0012               	return		;funcret
  3892  001D4C                     __end_ofi2_lcdInst:
  3893                           	opt stack 0
  3894                           pclatu	equ	0xFFB
  3895                           pclath	equ	0xFFA
  3896                           tblptru	equ	0xFF8
  3897                           tblptrh	equ	0xFF7
  3898                           tblptrl	equ	0xFF6
  3899                           tablat	equ	0xFF5
  3900                           prodh	equ	0xFF4
  3901                           prodl	equ	0xFF3
  3902                           intcon	equ	0xFF2
  3903                           intcon3	equ	0xFF0
  3904                           fsr0h	equ	0xFEA
  3905                           fsr0l	equ	0xFE9
  3906                           wreg	equ	0xFE8
  3907                           fsr1h	equ	0xFE2
  3908                           fsr1l	equ	0xFE1
  3909                           postinc2	equ	0xFDE
  3910                           postdec2	equ	0xFDD
  3911                           fsr2h	equ	0xFDA
  3912                           fsr2l	equ	0xFD9
  3913                           status	equ	0xFD8
  3914                           
  3915 ;; *************** function i2_lcdNibble *****************
  3916 ;; Defined at:
  3917 ;;		line 35 in file "lcd.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;  data            1    wreg     unsigned char 
  3920 ;; Auto vars:     Size  Location     Type
  3921 ;;  data            1    1[COMRAM] unsigned char 
  3922 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  3923 ;; Return value:  Size  Location     Type
  3924 ;;                  1    wreg      void 
  3925 ;; Registers used:
  3926 ;;		wreg, status,2, status,0
  3927 ;; Tracked objects:
  3928 ;;		On entry : 0/0
  3929 ;;		On exit  : 0/0
  3930 ;;		Unchanged: 0/0
  3931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3933 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3935 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3936 ;;Total ram usage:        2 bytes
  3937 ;; Hardware stack levels used:    1
  3938 ;; This function calls:
  3939 ;;		Nothing
  3940 ;; This function is called by:
  3941 ;;		i2_lcdInst
  3942 ;;		i2_putch
  3943 ;; This function uses a non-reentrant model
  3944 ;;
  3945                           
  3946                           	psect	text17
  3947  001B24                     __ptext17:
  3948                           	opt stack 0
  3949  001B24                     i2_lcdNibble:
  3950                           	opt stack 25
  3951                           
  3952                           ;incstack = 0
  3953                           ;i2lcdNibble@data stored from wreg
  3954  001B24  6E02               	movwf	i2lcdNibble@data,c
  3955                           
  3956                           ;lcd.c: 37: char temp = data & 0xF0;
  3957  001B26  5002               	movf	i2lcdNibble@data,w,c
  3958  001B28  0BF0               	andlw	240
  3959  001B2A  6E01               	movwf	i2lcdNibble@temp,c
  3960                           
  3961                           ;lcd.c: 38: LATD = LATD & 0x0F;
  3962  001B2C  508C               	movf	3980,w,c	;volatile
  3963  001B2E  0B0F               	andlw	15
  3964  001B30  6E8C               	movwf	3980,c	;volatile
  3965                           
  3966                           ;lcd.c: 39: LATD = temp | LATD;
  3967  001B32  5001               	movf	i2lcdNibble@temp,w,c
  3968  001B34  108C               	iorwf	3980,w,c	;volatile
  3969  001B36  6E8C               	movwf	3980,c	;volatile
  3970                           
  3971                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  3972  001B38  968C               	bcf	3980,3,c	;volatile
  3973                           
  3974                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
  3975  001B3A  0E14               	movlw	20
  3976  001B3C                     i2u198_47:
  3977  001B3C  2EE8               	decfsz	wreg,f,c
  3978  001B3E  D7FE               	bra	i2u198_47
  3979  001B40  D000               	nop2	
  3980                           
  3981                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  3982  001B42  868C               	bsf	3980,3,c	;volatile
  3983                           
  3984                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
  3985  001B44  0E14               	movlw	20
  3986  001B46                     i2u199_47:
  3987  001B46  2EE8               	decfsz	wreg,f,c
  3988  001B48  D7FE               	bra	i2u199_47
  3989  001B4A  D000               	nop2	
  3990                           
  3991                           ;lcd.c: 46: data = data << 4;
  3992  001B4C  3802               	swapf	i2lcdNibble@data,w,c
  3993  001B4E  0BF0               	andlw	240
  3994  001B50  6E02               	movwf	i2lcdNibble@data,c
  3995                           
  3996                           ;lcd.c: 48: temp = data & 0xF0;
  3997  001B52  5002               	movf	i2lcdNibble@data,w,c
  3998  001B54  0BF0               	andlw	240
  3999  001B56  6E01               	movwf	i2lcdNibble@temp,c
  4000                           
  4001                           ;lcd.c: 49: LATD = LATD & 0x0F;
  4002  001B58  508C               	movf	3980,w,c	;volatile
  4003  001B5A  0B0F               	andlw	15
  4004  001B5C  6E8C               	movwf	3980,c	;volatile
  4005                           
  4006                           ;lcd.c: 50: LATD = temp | LATD;
  4007  001B5E  5001               	movf	i2lcdNibble@temp,w,c
  4008  001B60  108C               	iorwf	3980,w,c	;volatile
  4009  001B62  6E8C               	movwf	3980,c	;volatile
  4010                           
  4011                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  4012  001B64  968C               	bcf	3980,3,c	;volatile
  4013                           
  4014                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
  4015  001B66  0E14               	movlw	20
  4016  001B68                     i2u200_47:
  4017  001B68  2EE8               	decfsz	wreg,f,c
  4018  001B6A  D7FE               	bra	i2u200_47
  4019  001B6C  D000               	nop2	
  4020                           
  4021                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  4022  001B6E  868C               	bsf	3980,3,c	;volatile
  4023                           
  4024                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
  4025  001B70  0E14               	movlw	20
  4026  001B72                     i2u201_47:
  4027  001B72  2EE8               	decfsz	wreg,f,c
  4028  001B74  D7FE               	bra	i2u201_47
  4029  001B76  D000               	nop2	
  4030  001B78  0012               	return		;funcret
  4031  001B7A                     __end_ofi2_lcdNibble:
  4032                           	opt stack 0
  4033                           pclatu	equ	0xFFB
  4034                           pclath	equ	0xFFA
  4035                           tblptru	equ	0xFF8
  4036                           tblptrh	equ	0xFF7
  4037                           tblptrl	equ	0xFF6
  4038                           tablat	equ	0xFF5
  4039                           prodh	equ	0xFF4
  4040                           prodl	equ	0xFF3
  4041                           intcon	equ	0xFF2
  4042                           intcon3	equ	0xFF0
  4043                           fsr0h	equ	0xFEA
  4044                           fsr0l	equ	0xFE9
  4045                           wreg	equ	0xFE8
  4046                           fsr1h	equ	0xFE2
  4047                           fsr1l	equ	0xFE1
  4048                           postinc2	equ	0xFDE
  4049                           postdec2	equ	0xFDD
  4050                           fsr2h	equ	0xFDA
  4051                           fsr2l	equ	0xFD9
  4052                           status	equ	0xFD8
  4053                           pclatu	equ	0xFFB
  4054                           pclath	equ	0xFFA
  4055                           tblptru	equ	0xFF8
  4056                           tblptrh	equ	0xFF7
  4057                           tblptrl	equ	0xFF6
  4058                           tablat	equ	0xFF5
  4059                           prodh	equ	0xFF4
  4060                           prodl	equ	0xFF3
  4061                           intcon	equ	0xFF2
  4062                           intcon3	equ	0xFF0
  4063                           fsr0h	equ	0xFEA
  4064                           fsr0l	equ	0xFE9
  4065                           wreg	equ	0xFE8
  4066                           fsr1h	equ	0xFE2
  4067                           fsr1l	equ	0xFE1
  4068                           postinc2	equ	0xFDE
  4069                           postdec2	equ	0xFDD
  4070                           fsr2h	equ	0xFDA
  4071                           fsr2l	equ	0xFD9
  4072                           status	equ	0xFD8
  4073                           
  4074                           	psect	rparam
  4075  0000                     pclatu	equ	0xFFB
  4076                           pclath	equ	0xFFA
  4077                           tblptru	equ	0xFF8
  4078                           tblptrh	equ	0xFF7
  4079                           tblptrl	equ	0xFF6
  4080                           tablat	equ	0xFF5
  4081                           prodh	equ	0xFF4
  4082                           prodl	equ	0xFF3
  4083                           intcon	equ	0xFF2
  4084                           intcon3	equ	0xFF0
  4085                           fsr0h	equ	0xFEA
  4086                           fsr0l	equ	0xFE9
  4087                           wreg	equ	0xFE8
  4088                           fsr1h	equ	0xFE2
  4089                           fsr1l	equ	0xFE1
  4090                           postinc2	equ	0xFDE
  4091                           postdec2	equ	0xFDD
  4092                           fsr2h	equ	0xFDA
  4093                           fsr2l	equ	0xFD9
  4094                           status	equ	0xFD8
  4095                           
  4096                           	psect	temp
  4097  000046                     btemp:
  4098                           	opt stack 0
  4099  000046                     	ds	1
  4100  0000                     int$flags	set	btemp
  4101                           pclatu	equ	0xFFB
  4102                           pclath	equ	0xFFA
  4103                           tblptru	equ	0xFF8
  4104                           tblptrh	equ	0xFF7
  4105                           tblptrl	equ	0xFF6
  4106                           tablat	equ	0xFF5
  4107                           prodh	equ	0xFF4
  4108                           prodl	equ	0xFF3
  4109                           intcon	equ	0xFF2
  4110                           intcon3	equ	0xFF0
  4111                           fsr0h	equ	0xFEA
  4112                           fsr0l	equ	0xFE9
  4113                           wreg	equ	0xFE8
  4114                           fsr1h	equ	0xFE2
  4115                           fsr1l	equ	0xFE1
  4116                           postinc2	equ	0xFDE
  4117                           postdec2	equ	0xFDD
  4118                           fsr2h	equ	0xFDA
  4119                           fsr2l	equ	0xFD9
  4120                           status	equ	0xFD8


Data Sizes:
    Strings     195
    Constant    25
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     69      69
    BANK0           128     29      31
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_12(CODE[10]), STR_11(CODE[8]), STR_10(CODE[13]), STR_9(CODE[15]), 
		 -> STR_8(CODE[17]), STR_7(CODE[13]), STR_6(CODE[15]), STR_5(CODE[19]), 
		 -> STR_4(CODE[17]), STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _keypressed in COMRAM

    _keypressed->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___lwdiv
    _putch->_lcdNibble
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    2433
                                             23 BANK0      6     6      0
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              25    23      2    1978
                                              7 BANK0     16    14      2
                            ___lwdiv
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     289
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _keypressed                                          44    44      0    2881
                                             25 COMRAM    44    44      0
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            27    23      4    1470
                                              7 COMRAM    18    14      4
                          i2___lwdiv
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___wmul
     _isdigit
     _putch
       _lcdNibble

 _keypressed (ROOT)
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_putch
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     1D      1F       5       24.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     45      45       1       54.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      64      34        0.0%
DATA                 0      0      64       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Mar 28 15:19:58 2017

                      l71 1976                        l80 1A3C                        l74 197A  
                      l78 19F8       ___wmul@multiplicand 0082        i2___lwdiv@dividend 0001  
             __CFG_BORV$3 000000              __CFG_CP0$OFF 000000              __CFG_CP1$OFF 000000  
            __CFG_CP2$OFF 000000              __CFG_CP3$OFF 000000               __CFG_OSC$HS 000000  
                     l171 1684                       l175 16DE                       l587 1AB2  
            __CFG_CPB$OFF 000000              __CFG_CPD$OFF 000000                       wreg 000FE8  
            __CFG_LVP$OFF 000000              __CFG_WDT$OFF 000000                      l1600 165E  
                    l1602 166A                      l1460 1A62                      l1444 1CB2  
                    l1540 14AA                      l1612 16EA                      l1462 1A6E  
                    l1606 168A                      l1550 14DA                      l1472 1AA4  
                    l1464 1A74                      l1544 14BE                      l1546 14D0  
                    l1714 1920                      l1556 150A                      l1724 193E  
                    l1732 1960                      l1590 1632                      l1574 15C4  
                    l1566 1580                      l1750 19B8                      l1592 163C  
                    l1760 19E0                      l1728 1948                      l1586 15FA  
                    l1770 1A1A                      l1754 19D0                      l1746 19AE  
                    l1756 19D6                      l1774 1A24                      STR_1 1071  
                    STR_2 103E                      STR_3 104F                      STR_4 1060  
                    STR_5 101A                      STR_6 1093                      STR_7 10BE  
                    STR_8 1082                      STR_9 10A2                      _LATB 000F8A  
                    _LATC 000F8B                      _LATD 000F8C                      u1717 1950  
                    u1807 1B1C                      u1727 19C0                      u1737 19E8  
                    u1747 1A2C                      u1757 1BD4                      u1767 1C0A  
                    u1777 1ADC                      u1787 1AE6                      u1797 1B12  
                    _main 18FC                      _keys 1001                      fsr0h 000FEA  
                    fsr1h 000FE2        i2___lwdiv@quotient 0005                      fsr2h 000FDA  
                    fsr0l 000FE9                      fsr1l 000FE1                      fsr2l 000FD9  
                    btemp 0046                      prodh 000FF4                      prodl 000FF3  
                    start 000E             __CFG_IESO$OFF 000000           __end_ofi2_putch 1D40  
           __CFG_MCLRE$ON 000000              ___param_bank 000000               i2_lcdNibble 1B24  
                   ?_main 0001                     STR_10 10B1                     STR_11 10D5  
                   STR_12 10CB                     STR_13 102D           __end_of___lwdiv 1ABC  
                   i2l131 1460                     i2l171 188A                     i2l175 18DA  
                   i2l587 1BC2                     _PORTB 000F81                     _TRISB 000F93  
                   _TRISC 000F94                     _TRISD 000F95             __CFG_PWRT$OFF 000000  
           __CFG_WRT0$OFF 000000             __CFG_WRT1$OFF 000000             __CFG_WRT2$OFF 000000  
           __CFG_WRT3$OFF 000000           __end_of_lcdInst 1D34            __CFG_EBTR0$OFF 000000  
          __CFG_FCMEN$OFF 000000            __CFG_EBTR1$OFF 000000            __CFG_EBTR2$OFF 000000  
            main@keypress 0098            __CFG_EBTR3$OFF 000000             __CFG_WRTB$OFF 000000  
           __CFG_WRTC$OFF 000000             __CFG_WRTD$OFF 000000           __end_of_initLCD 1C16  
          __CFG_EBTRB$OFF 000000                i2isdigit@c 0003           __end_of_isdigit 1CBC  
                   _putch 1D14                     main@i 0099                     pclath 000FFA  
                   tablat 000FF5          __end_ofi2___wmul 1CE2                     status 000FD8  
          __CFG_PBADEN$ON 000000             i2printf@width 0017          __end_ofi2_printf 18FC  
      __size_ofi2___lwdiv 0052           __initialization 1D00        __size_ofi2_lcdInst 000C  
            __end_of_main 1A44              __end_of_keys 1012                i2printf@ap 0011  
      __size_ofi2_initLCD 0046        __size_ofi2_isdigit 001E                    ??_main 0097  
           __activetblptr 000002                    _ADCON0 000FC2                    _ADCON1 000FC1  
         i2lcdNibble@data 0002                    ?_putch 0001           i2lcdNibble@temp 0001  
                  _INT1IE 007F83                    _INT1IF 007F80                    i2l1510 1B98  
                  i2l1520 1BB8                    i2l1512 1B9C                    i2l1508 1B90  
                  i2l1630 1712                    i2l1702 18E2                    i2l1640 1736  
                  i2l1800 11B4                    i2l1634 1722                    i2l1810 11D4  
                  i2l1636 1730                    i2l1900 133C                    i2l1820 11F4  
                  i2l1804 11C8                    i2l1646 1764                    i2l1814 11E8  
                  i2l1806 11CC                    i2l1680 184C                    i2l1664 17FC  
                  i2l1656 17C0                    i2l1912 1368                    i2l1816 11EC  
                  i2l1824 1208                    i2l1498 1CF8                    i2l1690 186E  
                  i2l1682 1854                    i2l1922 1388                    i2l1842 1262  
                  i2l1834 1246                    i2l1692 1876                    i2l1676 1828  
                  i2l1932 13A8                    i2l1916 137C                    i2l1908 1360  
                  i2l1852 1282                    i2l1844 1266                    i2l1926 139C  
                  i2l1918 1380                    i2l1854 1286                    i2l1838 124E  
                  i2l1862 12A2                    i2l1696 1890                    i2l1952 13F4  
                  i2l1944 13D8                    i2l1928 13A0                    i2l1936 13BC  
                  i2l1880 12FC                    i2l1872 12E0                    i2l1848 126E  
                  i2l1962 1414                    i2l1954 13F8                    i2l1890 131C  
                  i2l1882 1300                    i2l1858 128E                    i2l1972 1434  
                  i2l1964 1418                    i2l1948 13E0                    i2l1892 1320  
                  i2l1876 12E8                    i2l1796 11AC                    i2l1958 1400  
                  i2l1886 1308                    i2l1982 1458                    i2l1968 1420  
                  i2l1896 1328                    i2l1978 1450             keypressed@tot 0033  
               ??i2_putch 0003            __CFG_XINST$OFF 000000                    ___wmul 1C5C  
          __CFG_STVREN$ON 000000                 ??___lwdiv 0084                    _passed 009D  
               ??_lcdInst 0082                    _printf 149C                 ??_initLCD 0083  
keypressed@operation_time 0031                 ??_isdigit 0080         __end_ofi2___lwdiv 1BCC  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8         __end_ofi2_lcdInst 1D4C         __end_ofi2_initLCD 1C5C  
       __end_ofi2_isdigit 1D00                __accesstop 0080   __end_of__initialization 1D06  
           ___rparam_used 000001            __pcstackCOMRAM 0001             __end_of_putch 1D24  
             i2printf@idx 0010               i2printf@val 0014                 ?i2___wmul 0001  
      __size_of_lcdNibble 0068               i2putch@data 0003               keypressed@i 0036  
               ?i2_printf 0008                   ??_putch 0082                __pbssBANK0 009D  
            ?i2_lcdNibble 0001                   ?___wmul 0080   keypressed@keypress_temp 0045  
                 ?_printf 0087                ??i2___wmul 0005                ??i2_printf 000C  
                 i2_putch 1D34         __end_of_lcdNibble 1B24                   __Hparam 0000  
                 __Lparam 0000           __size_of___wmul 0036     keypressed@pop_can_tab 002B  
                 ___lwdiv 1A44              __psmallconst 1000                   __pcinit 1D00  
                 __ramtop 1000                   _lcdInst 1D24                   __ptext0 18FC  
                 __ptext1 149C                   __ptext2 1D14                   __ptext3 1C92  
                 __ptext4 1C5C                   __ptext5 1A44                   __ptext6 1BCC  
                 __ptext7 1D24                   __ptext8 1ABC           __size_of_printf 026C  
                 _initLCD 1BCC         __end_of_hexpowers 101A             i2_isdigit$543 0002  
                 _isdigit 1C92                _keypressed 0008            __pintcode_body 10DE  
    end_of_initialization 1D06             __Lmediumconst 0000                   int_func 10DE  
     i2___wmul@multiplier 0001                   printf@c 0096                   printf@f 0087  
                 postdec2 000FDD                   postinc2 000FDE                 _PORTBbits 000F81  
       i2___lwdiv@divisor 0003                 i2___lwdiv 1B7A         i2___lwdiv@counter 0007  
               i2_lcdInst 1D40               printf@width 0094                 i2_initLCD 1C16  
               i2_isdigit 1CE2            __end_of___wmul 1C92      __size_ofi2_lcdNibble 0056  
           i2lcdInst@data 0003          i2___wmul@product 0005            __end_of_printf 1708  
            i2printf@flag 0013              i2printf@prec 0016       start_initialization 1D00  
             ?_keypressed 0001         __size_ofi2___wmul 0026                 i2printf@c 0019  
               i2printf@f 0008                ?i2___lwdiv 0001         __size_ofi2_printf 01F4  
              ?i2_lcdInst 0001                ?i2_initLCD 0001                ?i2_isdigit 0001  
                ??___wmul 0084          __CFG_LPT1OSC$OFF 000000                  ??_printf 0089  
           __pcstackBANK0 0080                  ?i2_putch 0001          ___lwdiv@dividend 0080  
       __CFG_CCP2MX$PORTC 000000   keypressed@tin_can_label 002F       __size_of_keypressed 1494  
               __pintcode 0008                 _lcdNibble 1ABC                  ?___lwdiv 0080  
                ?_lcdInst 0001                  ?_initLCD 0001               __smallconst 1000  
                ?_isdigit 0001                 _hexpowers 1012          ___lwdiv@quotient 0084  
             ??i2___lwdiv 0005            __size_of_putch 0010           keypressed@i_280 003A  
         keypressed@i_281 003B           keypressed@i_290 0041           keypressed@i_275 0037  
         keypressed@i_292 0042           keypressed@i_284 003C           keypressed@i_276 0038  
         keypressed@i_293 0043           keypressed@i_285 003D           keypressed@i_294 0044  
         keypressed@i_286 003E           keypressed@i_279 0039           keypressed@i_288 003F  
         keypressed@i_289 0040               ??i2_lcdInst 0003            ___wmul@product 0084  
                _LATDbits 000F8C               ??i2_initLCD 0004               ??i2_isdigit 0001  
                i2u200_47 1B68                  i2u201_47 1B72                  i2u181_47 11BA  
                i2u190_47 136E                  i2u182_47 11DA                  i2u191_47 138E  
                i2u183_47 11FA                  i2u192_47 13AE                  i2u184_47 1254  
                i2u193_47 13E6                  i2u185_47 1274                  i2u194_47 1406  
                i2u186_47 1294                  i2u195_47 1426                  i2u187_47 12EE  
                i2u196_47 1C1C                  i2u188_47 130E                  i2u197_47 1C50  
                i2u189_47 132E                  i2u198_47 1B3C                  i2u199_47 1B46  
        __CFG_WDTPS$32768 000000                ?_lcdNibble 0001                 main@i_261 009C  
               main@i_258 009A                 main@i_259 009B         ___wmul@multiplier 0080  
                i2___wmul 1CBC             lcdNibble@data 0081                printf@flag 0090  
           lcdNibble@temp 0080                printf@prec 0093                  i2_printf 1708  
        __size_ofi2_putch 000C        keypressed@keypress 0035                  __Hrparam 0000  
                __Lrparam 0000        __CFG_BOREN$SBORDIS 000000     i2___wmul@multiplicand 0003  
        __size_of___lwdiv 0078               _isdigit$543 0081          __size_of_lcdInst 0010  
        __size_of_initLCD 004A              ??_keypressed 001A          __size_of_isdigit 002A  
         ___lwdiv@divisor 0082           ___lwdiv@counter 0086                  __ptext10 1708  
                __ptext11 1D34                  __ptext12 1CE2                  __ptext13 1CBC  
                __ptext14 1B7A                  __ptext15 1C16                  __ptext16 1D40  
                __ptext17 1B24             __size_of_main 0148             ??i2_lcdNibble 0001  
             ??_lcdNibble 0080        __end_of_keypressed 149C                  int$flags 0046  
               printf@idx 008F                 printf@val 0091                 putch@data 0082  
              _INTCONbits 000FF2         keypressed@pop_can 0029         keypressed@tin_can 002D  
                isdigit@c 0082                  intlevel2 0000                  printf@ap 008D  
             lcdInst@data 0082       __end_ofi2_lcdNibble 1B7A  

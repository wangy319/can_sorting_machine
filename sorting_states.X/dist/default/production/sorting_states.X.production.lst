

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Feb 28 22:28:34 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    65                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    66  0000                     
    67                           ; Version 1.41
    68                           ; Generated 25/01/2017 GMT
    69                           ; 
    70                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    71                           ; All rights reserved.
    72                           ; 
    73                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    74                           ; 
    75                           ; Redistribution and use in source and binary forms, with or without modification, are
    76                           ; permitted provided that the following conditions are met:
    77                           ; 
    78                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    79                           ;        conditions and the following disclaimer.
    80                           ; 
    81                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    82                           ;        of conditions and the following disclaimer in the documentation and/or other
    83                           ;        materials provided with the distribution.
    84                           ; 
    85                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    86                           ;        software without specific prior written permission.
    87                           ; 
    88                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    89                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    90                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    91                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    92                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    93                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    94                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    95                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    96                           ; 
    97                           ; 
    98                           ; Code-generator required, PIC18F4620 Definitions
    99                           ; 
   100                           ; SFR Addresses
   101  0000                     
   102                           	psect	mediumconst
   103  00FE8C                     __pmediumconst:
   104                           	opt stack 0
   105  00FE8C  00                 	db	0
   106  00FE8D                     _keys:
   107                           	opt stack 0
   108  00FE8D  31                 	db	49
   109  00FE8E  32                 	db	50
   110  00FE8F  33                 	db	51
   111  00FE90  41                 	db	65
   112  00FE91  34                 	db	52
   113  00FE92  35                 	db	53
   114  00FE93  36                 	db	54
   115  00FE94  42                 	db	66
   116  00FE95  37                 	db	55
   117  00FE96  38                 	db	56
   118  00FE97  39                 	db	57
   119  00FE98  43                 	db	67
   120  00FE99  2A                 	db	42
   121  00FE9A  30                 	db	48
   122  00FE9B  23                 	db	35
   123  00FE9C  44                 	db	68
   124  00FE9D  00                 	db	0
   125  00FE9E                     __end_of_keys:
   126                           	opt stack 0
   127  00FE9E                     _dpowers:
   128                           	opt stack 0
   129  00FE9E  0001               	dw	1
   130  00FEA0  000A               	dw	10
   131  00FEA2  0064               	dw	100
   132  00FEA4  03E8               	dw	1000
   133  00FEA6  2710               	dw	10000
   134  00FEA8                     __end_of_dpowers:
   135                           	opt stack 0
   136  00FEA8                     _hexpowers:
   137                           	opt stack 0
   138  00FEA8  0001               	dw	1
   139  00FEAA  0010               	dw	16
   140  00FEAC  0100               	dw	256
   141  00FEAE  1000               	dw	4096
   142  00FEB0                     __end_of_hexpowers:
   143                           	opt stack 0
   144  00FEB0                     _real_time:
   145                           	opt stack 0
   146  00FEB0  45                 	db	69
   147  00FEB1  59                 	db	89
   148  00FEB2  17                 	db	23
   149  00FEB3  04                 	db	4
   150  00FEB4  31                 	db	49
   151  00FEB5  02                 	db	2
   152  00FEB6  17                 	db	23
   153  00FEB7                     __end_of_real_time:
   154                           	opt stack 0
   155  0000                     _LATCbits	set	3979
   156  0000                     _ADCON1	set	4033
   157  0000                     _ADCON0	set	4034
   158  0000                     _LATE	set	3981
   159  0000                     _LATC	set	3979
   160  0000                     _LATB	set	3978
   161  0000                     _LATA	set	3977
   162  0000                     _TRISE	set	3990
   163  0000                     _TRISD	set	3989
   164  0000                     _TRISC	set	3988
   165  0000                     _TRISB	set	3987
   166  0000                     _TRISA	set	3986
   167  0000                     _LATEbits	set	3981
   168  0000                     _LATBbits	set	3978
   169  0000                     _PORTBbits	set	3969
   170  0000                     _INTCONbits	set	4082
   171  0000                     _PORTCbits	set	3970
   172  0000                     _PORTAbits	set	3968
   173  0000                     _LATD	set	3980
   174  0000                     _LATDbits	set	3980
   175  0000                     _PORTB	set	3969
   176  0000                     _SSPBUF	set	4041
   177  0000                     _SSPADD	set	4040
   178  0000                     _SSPCON2	set	4037
   179  0000                     _SSPCON1	set	4038
   180  0000                     _SSPSTAT	set	4039
   181  0000                     _LATAbits	set	3977
   182  0000                     _INT1IE	set	32643
   183  0000                     _INT1IF	set	32640
   184  0000                     _ACKEN	set	32300
   185  0000                     _ACKDT	set	32301
   186  0000                     _RCEN	set	32299
   187  0000                     _PEN	set	32298
   188  0000                     _RSEN	set	32297
   189  0000                     _SEN	set	32296
   190  0000                     _TRISC4	set	31908
   191  0000                     _TRISC3	set	31907
   192  00FEB7                     STR_18:
   193  00FEB7  54                 	db	84	;'T'
   194  00FEB8  69                 	db	105	;'i'
   195  00FEB9  6D                 	db	109	;'m'
   196  00FEBA  65                 	db	101	;'e'
   197  00FEBB  3A                 	db	58	;':'
   198  00FEBC  20                 	db	32
   199  00FEBD  25                 	db	37
   200  00FEBE  30                 	db	48	;'0'
   201  00FEBF  31                 	db	49	;'1'
   202  00FEC0  64                 	db	100	;'d'
   203  00FEC1  20                 	db	32
   204  00FEC2  6D                 	db	109	;'m'
   205  00FEC3  69                 	db	105	;'i'
   206  00FEC4  6E                 	db	110	;'n'
   207  00FEC5  20                 	db	32
   208  00FEC6  25                 	db	37
   209  00FEC7  30                 	db	48	;'0'
   210  00FEC8  32                 	db	50	;'2'
   211  00FEC9  64                 	db	100	;'d'
   212  00FECA  20                 	db	32
   213  00FECB  73                 	db	115	;'s'
   214  00FECC  00                 	db	0
   215  00FECD                     STR_17:
   216  00FECD  54                 	db	84	;'T'
   217  00FECE  6F                 	db	111	;'o'
   218  00FECF  74                 	db	116	;'t'
   219  00FED0  61                 	db	97	;'a'
   220  00FED1  6C                 	db	108	;'l'
   221  00FED2  20                 	db	32
   222  00FED3  53                 	db	83	;'S'
   223  00FED4  6F                 	db	111	;'o'
   224  00FED5  72                 	db	114	;'r'
   225  00FED6  74                 	db	116	;'t'
   226  00FED7  65                 	db	101	;'e'
   227  00FED8  64                 	db	100	;'d'
   228  00FED9  3A                 	db	58	;':'
   229  00FEDA  20                 	db	32
   230  00FEDB  25                 	db	37
   231  00FEDC  30                 	db	48	;'0'
   232  00FEDD  32                 	db	50	;'2'
   233  00FEDE  78                 	db	120	;'x'
   234  00FEDF  00                 	db	0
   235  00FEE0                     STR_23:
   236  00FEE0  30                 	db	48	;'0'
   237  00FEE1  31                 	db	49	;'1'
   238  00FEE2  32                 	db	50	;'2'
   239  00FEE3  33                 	db	51	;'3'
   240  00FEE4  34                 	db	52	;'4'
   241  00FEE5  35                 	db	53	;'5'
   242  00FEE6  36                 	db	54	;'6'
   243  00FEE7  37                 	db	55	;'7'
   244  00FEE8  38                 	db	56	;'8'
   245  00FEE9  39                 	db	57	;'9'
   246  00FEEA  61                 	db	97	;'a'
   247  00FEEB  62                 	db	98	;'b'
   248  00FEEC  63                 	db	99	;'c'
   249  00FEED  64                 	db	100	;'d'
   250  00FEEE  65                 	db	101	;'e'
   251  00FEEF  66                 	db	102	;'f'
   252  00FEF0  00                 	db	0
   253  00FEF1                     STR_14:
   254  00FEF1  41                 	db	65	;'A'
   255  00FEF2  3A                 	db	58	;':'
   256  00FEF3  54                 	db	84	;'T'
   257  00FEF4  6F                 	db	111	;'o'
   258  00FEF5  74                 	db	116	;'t'
   259  00FEF6  61                 	db	97	;'a'
   260  00FEF7  6C                 	db	108	;'l'
   261  00FEF8  20                 	db	32
   262  00FEF9  20                 	db	32
   263  00FEFA  20                 	db	32
   264  00FEFB  42                 	db	66	;'B'
   265  00FEFC  3A                 	db	58	;':'
   266  00FEFD  50                 	db	80	;'P'
   267  00FEFE  6F                 	db	111	;'o'
   268  00FEFF  70                 	db	112	;'p'
   269  00FF00  20                 	db	32
   270  00FF01  00                 	db	0
   271  00FF02                     STR_15:
   272  00FF02  43                 	db	67	;'C'
   273  00FF03  3A                 	db	58	;':'
   274  00FF04  54                 	db	84	;'T'
   275  00FF05  69                 	db	105	;'i'
   276  00FF06  6E                 	db	110	;'n'
   277  00FF07  20                 	db	32
   278  00FF08  20                 	db	32
   279  00FF09  20                 	db	32
   280  00FF0A  20                 	db	32
   281  00FF0B  20                 	db	32
   282  00FF0C  44                 	db	68	;'D'
   283  00FF0D  3A                 	db	58	;':'
   284  00FF0E  54                 	db	84	;'T'
   285  00FF0F  69                 	db	105	;'i'
   286  00FF10  6D                 	db	109	;'m'
   287  00FF11  65                 	db	101	;'e'
   288  00FF12  00                 	db	0
   289  00FF13                     STR_16:
   290  00FF13  50                 	db	80	;'P'
   291  00FF14  72                 	db	114	;'r'
   292  00FF15  65                 	db	101	;'e'
   293  00FF16  73                 	db	115	;'s'
   294  00FF17  73                 	db	115	;'s'
   295  00FF18  20                 	db	32
   296  00FF19  30                 	db	48	;'0'
   297  00FF1A  20                 	db	32
   298  00FF1B  74                 	db	116	;'t'
   299  00FF1C  6F                 	db	111	;'o'
   300  00FF1D  20                 	db	32
   301  00FF1E  52                 	db	82	;'R'
   302  00FF1F  65                 	db	101	;'e'
   303  00FF20  73                 	db	115	;'s'
   304  00FF21  65                 	db	101	;'e'
   305  00FF22  74                 	db	116	;'t'
   306  00FF23  00                 	db	0
   307  00FF24                     STR_10:
   308  00FF24  50                 	db	80	;'P'
   309  00FF25  72                 	db	114	;'r'
   310  00FF26  65                 	db	101	;'e'
   311  00FF27  73                 	db	115	;'s'
   312  00FF28  73                 	db	115	;'s'
   313  00FF29  20                 	db	32
   314  00FF2A  23                 	db	35
   315  00FF2B  20                 	db	32
   316  00FF2C  74                 	db	116	;'t'
   317  00FF2D  6F                 	db	111	;'o'
   318  00FF2E  20                 	db	32
   319  00FF2F  53                 	db	83	;'S'
   320  00FF30  74                 	db	116	;'t'
   321  00FF31  61                 	db	97	;'a'
   322  00FF32  72                 	db	114	;'r'
   323  00FF33  74                 	db	116	;'t'
   324  00FF34  00                 	db	0
   325  00FF35                     STR_19:
   326  00FF35  57                 	db	87	;'W'
   327  00FF36  69                 	db	105	;'i'
   328  00FF37  74                 	db	116	;'t'
   329  00FF38  68                 	db	104	;'h'
   330  00FF39  20                 	db	32
   331  00FF3A  4C                 	db	76	;'L'
   332  00FF3B  61                 	db	97	;'a'
   333  00FF3C  62                 	db	98	;'b'
   334  00FF3D  65                 	db	101	;'e'
   335  00FF3E  6C                 	db	108	;'l'
   336  00FF3F  3A                 	db	58	;':'
   337  00FF40  20                 	db	32
   338  00FF41  25                 	db	37
   339  00FF42  30                 	db	48	;'0'
   340  00FF43  32                 	db	50	;'2'
   341  00FF44  78                 	db	120	;'x'
   342  00FF45  00                 	db	0
   343  00FF46                     STR_2:
   344  00FF46  74                 	db	116	;'t'
   345  00FF47  6F                 	db	111	;'o'
   346  00FF48  70                 	db	112	;'p'
   347  00FF49  20                 	db	32
   348  00FF4A  72                 	db	114	;'r'
   349  00FF4B  6F                 	db	111	;'o'
   350  00FF4C  63                 	db	99	;'c'
   351  00FF4D  6B                 	db	107	;'k'
   352  00FF4E  65                 	db	101	;'e'
   353  00FF4F  72                 	db	114	;'r'
   354  00FF50  20                 	db	32
   355  00FF51  69                 	db	105	;'i'
   356  00FF52  6E                 	db	110	;'n'
   357  00FF53  69                 	db	105	;'i'
   358  00FF54  74                 	db	116	;'t'
   359  00FF55  00                 	db	0
   360  00FF56                     STR_21:
   361  00FF56  57                 	db	87	;'W'
   362  00FF57  69                 	db	105	;'i'
   363  00FF58  74                 	db	116	;'t'
   364  00FF59  68                 	db	104	;'h'
   365  00FF5A  20                 	db	32
   366  00FF5B  54                 	db	84	;'T'
   367  00FF5C  61                 	db	97	;'a'
   368  00FF5D  62                 	db	98	;'b'
   369  00FF5E  3A                 	db	58	;':'
   370  00FF5F  20                 	db	32
   371  00FF60  25                 	db	37
   372  00FF61  30                 	db	48	;'0'
   373  00FF62  32                 	db	50	;'2'
   374  00FF63  78                 	db	120	;'x'
   375  00FF64  00                 	db	0
   376  00FF65                     STR_20:
   377  00FF65  4E                 	db	78	;'N'
   378  00FF66  6F                 	db	111	;'o'
   379  00FF67  20                 	db	32
   380  00FF68  4C                 	db	76	;'L'
   381  00FF69  61                 	db	97	;'a'
   382  00FF6A  62                 	db	98	;'b'
   383  00FF6B  65                 	db	101	;'e'
   384  00FF6C  6C                 	db	108	;'l'
   385  00FF6D  3A                 	db	58	;':'
   386  00FF6E  20                 	db	32
   387  00FF6F  25                 	db	37
   388  00FF70  30                 	db	48	;'0'
   389  00FF71  32                 	db	50	;'2'
   390  00FF72  78                 	db	120	;'x'
   391  00FF73  00                 	db	0
   392  00FF74                     STR_9:
   393  00FF74  25                 	db	37
   394  00FF75  30                 	db	48	;'0'
   395  00FF76  32                 	db	50	;'2'
   396  00FF77  78                 	db	120	;'x'
   397  00FF78  3A                 	db	58	;':'
   398  00FF79  25                 	db	37
   399  00FF7A  30                 	db	48	;'0'
   400  00FF7B  32                 	db	50	;'2'
   401  00FF7C  78                 	db	120	;'x'
   402  00FF7D  3A                 	db	58	;':'
   403  00FF7E  25                 	db	37
   404  00FF7F  30                 	db	48	;'0'
   405  00FF80  32                 	db	50	;'2'
   406  00FF81  78                 	db	120	;'x'
   407  00FF82  00                 	db	0
   408  00FF83                     STR_7:
   409  00FF83  72                 	db	114	;'r'
   410  00FF84  6F                 	db	111	;'o'
   411  00FF85  63                 	db	99	;'c'
   412  00FF86  6B                 	db	107	;'k'
   413  00FF87  65                 	db	101	;'e'
   414  00FF88  72                 	db	114	;'r'
   415  00FF89  20                 	db	32
   416  00FF8A  72                 	db	114	;'r'
   417  00FF8B  65                 	db	101	;'e'
   418  00FF8C  73                 	db	115	;'s'
   419  00FF8D  74                 	db	116	;'t'
   420  00FF8E  6F                 	db	111	;'o'
   421  00FF8F  72                 	db	114	;'r'
   422  00FF90  65                 	db	101	;'e'
   423  00FF91  00                 	db	0
   424  00FF92                     STR_6:
   425  00FF92  72                 	db	114	;'r'
   426  00FF93  6F                 	db	111	;'o'
   427  00FF94  63                 	db	99	;'c'
   428  00FF95  6B                 	db	107	;'k'
   429  00FF96  65                 	db	101	;'e'
   430  00FF97  72                 	db	114	;'r'
   431  00FF98  20                 	db	32
   432  00FF99  72                 	db	114	;'r'
   433  00FF9A  65                 	db	101	;'e'
   434  00FF9B  6C                 	db	108	;'l'
   435  00FF9C  65                 	db	101	;'e'
   436  00FF9D  61                 	db	97	;'a'
   437  00FF9E  73                 	db	115	;'s'
   438  00FF9F  65                 	db	101	;'e'
   439  00FFA0  00                 	db	0
   440  00FFA1                     STR_5:
   441  00FFA1  73                 	db	115	;'s'
   442  00FFA2  6F                 	db	111	;'o'
   443  00FFA3  6C                 	db	108	;'l'
   444  00FFA4  65                 	db	101	;'e'
   445  00FFA5  6E                 	db	110	;'n'
   446  00FFA6  6F                 	db	111	;'o'
   447  00FFA7  69                 	db	105	;'i'
   448  00FFA8  64                 	db	100	;'d'
   449  00FFA9  73                 	db	115	;'s'
   450  00FFAA  20                 	db	32
   451  00FFAB  62                 	db	98	;'b'
   452  00FFAC  61                 	db	97	;'a'
   453  00FFAD  63                 	db	99	;'c'
   454  00FFAE  6B                 	db	107	;'k'
   455  00FFAF  00                 	db	0
   456  00FFB0                     STR_4:
   457  00FFB0  73                 	db	115	;'s'
   458  00FFB1  6F                 	db	111	;'o'
   459  00FFB2  6C                 	db	108	;'l'
   460  00FFB3  65                 	db	101	;'e'
   461  00FFB4  6E                 	db	110	;'n'
   462  00FFB5  6F                 	db	111	;'o'
   463  00FFB6  69                 	db	105	;'i'
   464  00FFB7  64                 	db	100	;'d'
   465  00FFB8  73                 	db	115	;'s'
   466  00FFB9  20                 	db	32
   467  00FFBA  6F                 	db	111	;'o'
   468  00FFBB  75                 	db	117	;'u'
   469  00FFBC  74                 	db	116	;'t'
   470  00FFBD  00                 	db	0
   471  00FFBE                     STR_8:
   472  00FFBE  25                 	db	37
   473  00FFBF  30                 	db	48	;'0'
   474  00FFC0  32                 	db	50	;'2'
   475  00FFC1  78                 	db	120	;'x'
   476  00FFC2  2F                 	db	47
   477  00FFC3  25                 	db	37
   478  00FFC4  30                 	db	48	;'0'
   479  00FFC5  32                 	db	50	;'2'
   480  00FFC6  78                 	db	120	;'x'
   481  00FFC7  20                 	db	32
   482  00FFC8  20                 	db	32
   483  00FFC9  20                 	db	32
   484  00FFCA  00                 	db	0
   485  00FFCB                     STR_13:
   486  00FFCB  49                 	db	73	;'I'
   487  00FFCC  6E                 	db	110	;'n'
   488  00FFCD  69                 	db	105	;'i'
   489  00FFCE  74                 	db	116	;'t'
   490  00FFCF  69                 	db	105	;'i'
   491  00FFD0  61                 	db	97	;'a'
   492  00FFD1  6C                 	db	108	;'l'
   493  00FFD2  69                 	db	105	;'i'
   494  00FFD3  7A                 	db	122	;'z'
   495  00FFD4  69                 	db	105	;'i'
   496  00FFD5  6E                 	db	110	;'n'
   497  00FFD6  67                 	db	103	;'g'
   498  00FFD7  00                 	db	0
   499  00FFD8                     STR_22:
   500  00FFD8  4E                 	db	78	;'N'
   501  00FFD9  6F                 	db	111	;'o'
   502  00FFDA  20                 	db	32
   503  00FFDB  54                 	db	84	;'T'
   504  00FFDC  61                 	db	97	;'a'
   505  00FFDD  62                 	db	98	;'b'
   506  00FFDE  3A                 	db	58	;':'
   507  00FFDF  20                 	db	32
   508  00FFE0  25                 	db	37
   509  00FFE1  30                 	db	48	;'0'
   510  00FFE2  32                 	db	50	;'2'
   511  00FFE3  78                 	db	120	;'x'
   512  00FFE4  00                 	db	0
   513  00FFE5                     STR_3:
   514  00FFE5  72                 	db	114	;'r'
   515  00FFE6  6F                 	db	111	;'o'
   516  00FFE7  63                 	db	99	;'c'
   517  00FFE8  6B                 	db	107	;'k'
   518  00FFE9  65                 	db	101	;'e'
   519  00FFEA  72                 	db	114	;'r'
   520  00FFEB  20                 	db	32
   521  00FFEC  69                 	db	105	;'i'
   522  00FFED  64                 	db	100	;'d'
   523  00FFEE  6C                 	db	108	;'l'
   524  00FFEF  65                 	db	101	;'e'
   525  00FFF0  00                 	db	0
   526  00FFF1                     STR_12:
   527  00FFF1  74                 	db	116	;'t'
   528  00FFF2  69                 	db	105	;'i'
   529  00FFF3  6D                 	db	109	;'m'
   530  00FFF4  65                 	db	101	;'e'
   531  00FFF5  20                 	db	32
   532  00FFF6  6F                 	db	111	;'o'
   533  00FFF7  75                 	db	117	;'u'
   534  00FFF8  74                 	db	116	;'t'
   535  00FFF9  00                 	db	0
   536  00FFFA                     STR_11:
   537  00FFFA  68                 	db	104	;'h'
   538  00FFFB  65                 	db	101	;'e'
   539  00FFFC  72                 	db	114	;'r'
   540  00FFFD  65                 	db	101	;'e'
   541  00FFFE  00                 	db	0
   542  0000                     
   543                           ; #config settings
   544  00FFFF  00                 	db	0	; dummy byte at the end
   545  0000                     
   546                           	psect	cinit
   547  001AE6                     __pcinit:
   548                           	opt stack 0
   549  001AE6                     start_initialization:
   550                           	opt stack 0
   551  001AE6                     __initialization:
   552                           	opt stack 0
   553                           
   554                           ; Clear objects allocated to BANK0 (27 bytes)
   555  001AE6  EE00  F0B2         	lfsr	0,__pbssBANK0
   556  001AEA  0E1B               	movlw	27
   557  001AEC                     clear_0:
   558  001AEC  6AEE               	clrf	postinc0,c
   559  001AEE  06E8               	decf	wreg,f,c
   560  001AF0  E1FD               	bnz	clear_0
   561                           
   562                           ; Clear objects allocated to COMRAM (12 bytes)
   563  001AF2  EE00  F03F         	lfsr	0,__pbssCOMRAM
   564  001AF6  0E0C               	movlw	12
   565  001AF8                     clear_1:
   566  001AF8  6AEE               	clrf	postinc0,c
   567  001AFA  06E8               	decf	wreg,f,c
   568  001AFC  E1FD               	bnz	clear_1
   569  001AFE                     end_of_initialization:
   570                           	opt stack 0
   571  001AFE                     __end_of__initialization:
   572                           	opt stack 0
   573  001AFE  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   574  001B00  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   575  001B02  0100               	movlb	0
   576  001B04  EF78  F007         	goto	_main	;jump to C main() function
   577                           postinc0	equ	0xFEE
   578                           wreg	equ	0xFE8
   579                           
   580                           	psect	bssCOMRAM
   581  00003F                     __pbssCOMRAM:
   582                           	opt stack 0
   583  00003F                     _pop_can:
   584                           	opt stack 0
   585  00003F                     	ds	2
   586  000041                     _pop_can_tab:
   587                           	opt stack 0
   588  000041                     	ds	2
   589  000043                     _tin_can_label:
   590                           	opt stack 0
   591  000043                     	ds	2
   592  000045                     _tin_can:
   593                           	opt stack 0
   594  000045                     	ds	2
   595  000047                     _operation_time:
   596                           	opt stack 0
   597  000047                     	ds	2
   598  000049                     _tot:
   599                           	opt stack 0
   600  000049                     	ds	2
   601                           postinc0	equ	0xFEE
   602                           wreg	equ	0xFE8
   603                           
   604                           	psect	bssBANK0
   605  0000B2                     __pbssBANK0:
   606                           	opt stack 0
   607  0000B2                     _time:
   608                           	opt stack 0
   609  0000B2                     	ds	7
   610  0000B9                     _total_end:
   611                           	opt stack 0
   612  0000B9                     	ds	4
   613  0000BD                     _total_start:
   614                           	opt stack 0
   615  0000BD                     	ds	4
   616  0000C1                     _Start_time:
   617                           	opt stack 0
   618  0000C1                     	ds	2
   619  0000C3                     _start_top_distribution:
   620                           	opt stack 0
   621  0000C3                     	ds	2
   622  0000C5                     _top_move:
   623                           	opt stack 0
   624  0000C5                     	ds	2
   625  0000C7                     _tabed:
   626                           	opt stack 0
   627  0000C7                     	ds	2
   628  0000C9                     _fsm1:
   629                           	opt stack 0
   630  0000C9                     	ds	2
   631  0000CB                     _topRockerState:
   632                           	opt stack 0
   633  0000CB                     	ds	2
   634                           postinc0	equ	0xFEE
   635                           wreg	equ	0xFE8
   636                           
   637                           	psect	cstackBANK0
   638  000080                     __pcstackBANK0:
   639                           	opt stack 0
   640  000080                     ??_pop_out:
   641  000080                     ??_go_back:
   642  000080                     ??_isdigit:
   643  000080                     ??_top_rocker_motor_cw:
   644  000080                     ??_top_rocker_motor_ccw:
   645  000080                     ??_I2C_Master_Wait:
   646  000080                     ?___awdiv:
   647                           	opt stack 0
   648  000080                     ?___lwdiv:
   649                           	opt stack 0
   650  000080                     ?___lldiv:
   651                           	opt stack 0
   652  000080                     lcdNibble@temp:
   653                           	opt stack 0
   654  000080                     ___awdiv@dividend:
   655                           	opt stack 0
   656  000080                     ___lwdiv@dividend:
   657                           	opt stack 0
   658  000080                     ___lldiv@dividend:
   659                           	opt stack 0
   660                           
   661                           ; 4 bytes @ 0x0
   662  000080                     	ds	1
   663  000081                     I2C_Master_Read@a:
   664                           	opt stack 0
   665  000081                     lcdNibble@data:
   666                           	opt stack 0
   667  000081                     _isdigit$1082:
   668                           	opt stack 0
   669  000081                     I2C_Master_Write@d:
   670                           	opt stack 0
   671                           
   672                           ; 2 bytes @ 0x1
   673  000081                     	ds	1
   674  000082                     I2C_Master_Read@temp:
   675                           	opt stack 0
   676  000082                     lcdInst@data:
   677                           	opt stack 0
   678  000082                     putch@data:
   679                           	opt stack 0
   680  000082                     isdigit@c:
   681                           	opt stack 0
   682  000082                     ___awdiv@divisor:
   683                           	opt stack 0
   684  000082                     ___lwdiv@divisor:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x2
   688  000082                     	ds	1
   689  000083                     ??_initLCD:
   690  000083                     set_time@i:
   691                           	opt stack 0
   692                           
   693                           ; 1 bytes @ 0x3
   694  000083                     	ds	1
   695  000084                     ___awdiv@counter:
   696                           	opt stack 0
   697  000084                     ___lwdiv@counter:
   698                           	opt stack 0
   699  000084                     ___lldiv@divisor:
   700                           	opt stack 0
   701                           
   702                           ; 4 bytes @ 0x4
   703  000084                     	ds	1
   704  000085                     ___awdiv@sign:
   705                           	opt stack 0
   706  000085                     ___lwdiv@quotient:
   707                           	opt stack 0
   708                           
   709                           ; 2 bytes @ 0x5
   710  000085                     	ds	1
   711  000086                     ___awdiv@quotient:
   712                           	opt stack 0
   713                           
   714                           ; 2 bytes @ 0x6
   715  000086                     	ds	1
   716  000087                     ?___lwmod:
   717                           	opt stack 0
   718  000087                     ___lwmod@dividend:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x7
   722  000087                     	ds	1
   723  000088                     ?___wmul:
   724                           	opt stack 0
   725  000088                     ___wmul@multiplier:
   726                           	opt stack 0
   727  000088                     ___lldiv@quotient:
   728                           	opt stack 0
   729                           
   730                           ; 4 bytes @ 0x8
   731  000088                     	ds	1
   732  000089                     ___lwmod@divisor:
   733                           	opt stack 0
   734                           
   735                           ; 2 bytes @ 0x9
   736  000089                     	ds	1
   737  00008A                     ___wmul@multiplicand:
   738                           	opt stack 0
   739                           
   740                           ; 2 bytes @ 0xA
   741  00008A                     	ds	1
   742  00008B                     ___lwmod@counter:
   743                           	opt stack 0
   744                           
   745                           ; 1 bytes @ 0xB
   746  00008B                     	ds	1
   747  00008C                     ___lldiv@counter:
   748                           	opt stack 0
   749  00008C                     ___wmul@product:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0xC
   753  00008C                     	ds	1
   754  00008D                     I2C_Master_Init@c:
   755                           	opt stack 0
   756                           
   757                           ; 4 bytes @ 0xD
   758  00008D                     	ds	1
   759  00008E                     ?_printf:
   760                           	opt stack 0
   761  00008E                     ?_done_sorting:
   762                           	opt stack 0
   763  00008E                     printf@f:
   764                           	opt stack 0
   765                           
   766                           ; 2 bytes @ 0xE
   767  00008E                     	ds	2
   768  000090                     ??_done_sorting:
   769                           
   770                           ; 1 bytes @ 0x10
   771  000090                     	ds	1
   772  000091                     ??_I2C_Master_Init:
   773                           
   774                           ; 1 bytes @ 0x11
   775  000091                     	ds	2
   776  000093                     _done_sorting$1433:
   777                           	opt stack 0
   778                           
   779                           ; 2 bytes @ 0x13
   780  000093                     	ds	2
   781  000095                     done_sorting@total_second:
   782                           	opt stack 0
   783                           
   784                           ; 2 bytes @ 0x15
   785  000095                     	ds	1
   786  000096                     ??_printf:
   787                           
   788                           ; 1 bytes @ 0x16
   789  000096                     	ds	1
   790  000097                     done_sorting@i:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0x17
   794  000097                     	ds	1
   795  000098                     done_sorting@End_time:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x18
   799  000098                     	ds	2
   800  00009A                     printf@idx:
   801                           	opt stack 0
   802                           
   803                           ; 1 bytes @ 0x1A
   804  00009A                     	ds	1
   805  00009B                     printf@ap:
   806                           	opt stack 0
   807                           
   808                           ; 2 bytes @ 0x1B
   809  00009B                     	ds	2
   810  00009D                     printf@prec:
   811                           	opt stack 0
   812                           
   813                           ; 1 bytes @ 0x1D
   814  00009D                     	ds	1
   815  00009E                     printf@val:
   816                           	opt stack 0
   817                           
   818                           ; 2 bytes @ 0x1E
   819  00009E                     	ds	2
   820  0000A0                     printf@flag:
   821                           	opt stack 0
   822                           
   823                           ; 1 bytes @ 0x20
   824  0000A0                     	ds	1
   825  0000A1                     printf@width:
   826                           	opt stack 0
   827                           
   828                           ; 2 bytes @ 0x21
   829  0000A1                     	ds	2
   830  0000A3                     printf@c:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0x23
   834  0000A3                     	ds	1
   835  0000A4                     ??_top_rocker_idle:
   836  0000A4                     ??_solenoids_out:
   837  0000A4                     ??_solenoids_back:
   838  0000A4                     ??_top_rocker_release:
   839  0000A4                     ??_top_rocker_restore:
   840  0000A4                     ??_top_rocker_initial:
   841  0000A4                     ??_standby:
   842  0000A4                     ??_results:
   843                           
   844                           ; 1 bytes @ 0x24
   845  0000A4                     	ds	2
   846  0000A6                     top_rocker_initial@i:
   847                           	opt stack 0
   848  0000A6                     top_rocker_idle@i:
   849                           	opt stack 0
   850  0000A6                     solenoids_out@i:
   851                           	opt stack 0
   852  0000A6                     solenoids_back@i:
   853                           	opt stack 0
   854  0000A6                     top_rocker_release@i:
   855                           	opt stack 0
   856  0000A6                     top_rocker_restore@i:
   857                           	opt stack 0
   858  0000A6                     standby@keypress:
   859                           	opt stack 0
   860  0000A6                     results@keypress:
   861                           	opt stack 0
   862                           
   863                           ; 1 bytes @ 0x26
   864  0000A6                     	ds	1
   865  0000A7                     ??_initialization:
   866  0000A7                     standby@keypress_temp:
   867                           	opt stack 0
   868  0000A7                     results@keypress_temp:
   869                           	opt stack 0
   870                           
   871                           ; 1 bytes @ 0x27
   872  0000A7                     	ds	1
   873  0000A8                     standby@i_680:
   874                           	opt stack 0
   875  0000A8                     results@i:
   876                           	opt stack 0
   877                           
   878                           ; 1 bytes @ 0x28
   879  0000A8                     	ds	1
   880  0000A9                     standby@i:
   881                           	opt stack 0
   882  0000A9                     initialization@i:
   883                           	opt stack 0
   884  0000A9                     results@i_710:
   885                           	opt stack 0
   886                           
   887                           ; 1 bytes @ 0x29
   888  0000A9                     	ds	1
   889  0000AA                     ??_startSorting:
   890  0000AA                     results@i_712:
   891                           	opt stack 0
   892                           
   893                           ; 1 bytes @ 0x2A
   894  0000AA                     	ds	2
   895  0000AC                     startSorting@i:
   896                           	opt stack 0
   897                           
   898                           ; 1 bytes @ 0x2C
   899  0000AC                     	ds	1
   900  0000AD                     startSorting@i_686:
   901                           	opt stack 0
   902                           
   903                           ; 1 bytes @ 0x2D
   904  0000AD                     	ds	1
   905  0000AE                     ??_main:
   906                           
   907                           ; 1 bytes @ 0x2E
   908  0000AE                     	ds	2
   909  0000B0                     main@i:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0x30
   913  0000B0                     	ds	1
   914  0000B1                     main@i_776:
   915                           	opt stack 0
   916                           
   917                           ; 1 bytes @ 0x31
   918  0000B1                     	ds	1
   919                           postinc0	equ	0xFEE
   920                           wreg	equ	0xFE8
   921                           
   922                           	psect	cstackCOMRAM
   923  000001                     __pcstackCOMRAM:
   924                           	opt stack 0
   925  000001                     ??i2_isdigit:
   926  000001                     ?___awmod:
   927                           	opt stack 0
   928  000001                     ?i2___wmul:
   929                           	opt stack 0
   930  000001                     ?i2___awdiv:
   931                           	opt stack 0
   932  000001                     ?i2___lwdiv:
   933                           	opt stack 0
   934  000001                     i2lcdNibble@temp:
   935                           	opt stack 0
   936  000001                     ___awmod@dividend:
   937                           	opt stack 0
   938  000001                     i2___wmul@multiplier:
   939                           	opt stack 0
   940  000001                     i2___awdiv@dividend:
   941                           	opt stack 0
   942  000001                     i2___lwdiv@dividend:
   943                           	opt stack 0
   944                           
   945                           ; 2 bytes @ 0x0
   946  000001                     	ds	1
   947  000002                     i2lcdNibble@data:
   948                           	opt stack 0
   949  000002                     i2_isdigit$1082:
   950                           	opt stack 0
   951                           
   952                           ; 1 bytes @ 0x1
   953  000002                     	ds	1
   954  000003                     i2lcdInst@data:
   955                           	opt stack 0
   956  000003                     i2putch@data:
   957                           	opt stack 0
   958  000003                     i2isdigit@c:
   959                           	opt stack 0
   960  000003                     ___awmod@divisor:
   961                           	opt stack 0
   962  000003                     i2___wmul@multiplicand:
   963                           	opt stack 0
   964  000003                     i2___awdiv@divisor:
   965                           	opt stack 0
   966  000003                     i2___lwdiv@divisor:
   967                           	opt stack 0
   968                           
   969                           ; 2 bytes @ 0x2
   970  000003                     	ds	1
   971  000004                     ??i2_initLCD:
   972                           
   973                           ; 1 bytes @ 0x3
   974  000004                     	ds	1
   975  000005                     ___awmod@counter:
   976                           	opt stack 0
   977  000005                     i2___awdiv@counter:
   978                           	opt stack 0
   979  000005                     i2___wmul@product:
   980                           	opt stack 0
   981  000005                     i2___lwdiv@quotient:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0x4
   985  000005                     	ds	1
   986  000006                     ___awmod@sign:
   987                           	opt stack 0
   988  000006                     i2___awdiv@sign:
   989                           	opt stack 0
   990                           
   991                           ; 1 bytes @ 0x5
   992  000006                     	ds	1
   993  000007                     i2___lwdiv@counter:
   994                           	opt stack 0
   995  000007                     i2___awdiv@quotient:
   996                           	opt stack 0
   997                           
   998                           ; 2 bytes @ 0x6
   999  000007                     	ds	1
  1000  000008                     ?i2___lwmod:
  1001                           	opt stack 0
  1002  000008                     i2___lwmod@dividend:
  1003                           	opt stack 0
  1004                           
  1005                           ; 2 bytes @ 0x7
  1006  000008                     	ds	2
  1007  00000A                     i2___lwmod@divisor:
  1008                           	opt stack 0
  1009                           
  1010                           ; 2 bytes @ 0x9
  1011  00000A                     	ds	2
  1012  00000C                     i2___lwmod@counter:
  1013                           	opt stack 0
  1014                           
  1015                           ; 1 bytes @ 0xB
  1016  00000C                     	ds	1
  1017  00000D                     ?i2_printf:
  1018                           	opt stack 0
  1019  00000D                     i2printf@f:
  1020                           	opt stack 0
  1021                           
  1022                           ; 2 bytes @ 0xC
  1023  00000D                     	ds	6
  1024  000013                     ??i2_printf:
  1025                           
  1026                           ; 1 bytes @ 0x12
  1027  000013                     	ds	4
  1028  000017                     i2printf@idx:
  1029                           	opt stack 0
  1030                           
  1031                           ; 1 bytes @ 0x16
  1032  000017                     	ds	1
  1033  000018                     i2printf@ap:
  1034                           	opt stack 0
  1035                           
  1036                           ; 2 bytes @ 0x17
  1037  000018                     	ds	2
  1038  00001A                     i2printf@prec:
  1039                           	opt stack 0
  1040                           
  1041                           ; 1 bytes @ 0x19
  1042  00001A                     	ds	1
  1043  00001B                     i2printf@val:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x1A
  1047  00001B                     	ds	2
  1048  00001D                     i2printf@flag:
  1049                           	opt stack 0
  1050                           
  1051                           ; 1 bytes @ 0x1C
  1052  00001D                     	ds	1
  1053  00001E                     i2printf@width:
  1054                           	opt stack 0
  1055                           
  1056                           ; 2 bytes @ 0x1D
  1057  00001E                     	ds	2
  1058  000020                     i2printf@c:
  1059                           	opt stack 0
  1060                           
  1061                           ; 1 bytes @ 0x1F
  1062  000020                     	ds	1
  1063  000021                     ??_keypressed:
  1064                           
  1065                           ; 1 bytes @ 0x20
  1066  000021                     	ds	16
  1067  000031                     keypressed@keypress:
  1068                           	opt stack 0
  1069                           
  1070                           ; 1 bytes @ 0x30
  1071  000031                     	ds	1
  1072  000032                     keypressed@i:
  1073                           	opt stack 0
  1074                           
  1075                           ; 1 bytes @ 0x31
  1076  000032                     	ds	1
  1077  000033                     keypressed@i_144:
  1078                           	opt stack 0
  1079                           
  1080                           ; 1 bytes @ 0x32
  1081  000033                     	ds	1
  1082  000034                     keypressed@i_145:
  1083                           	opt stack 0
  1084                           
  1085                           ; 1 bytes @ 0x33
  1086  000034                     	ds	1
  1087  000035                     keypressed@i_146:
  1088                           	opt stack 0
  1089                           
  1090                           ; 1 bytes @ 0x34
  1091  000035                     	ds	1
  1092  000036                     keypressed@i_147:
  1093                           	opt stack 0
  1094                           
  1095                           ; 1 bytes @ 0x35
  1096  000036                     	ds	1
  1097  000037                     keypressed@i_148:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x36
  1101  000037                     	ds	1
  1102  000038                     keypressed@i_149:
  1103                           	opt stack 0
  1104                           
  1105                           ; 1 bytes @ 0x37
  1106  000038                     	ds	1
  1107  000039                     keypressed@i_150:
  1108                           	opt stack 0
  1109                           
  1110                           ; 1 bytes @ 0x38
  1111  000039                     	ds	1
  1112  00003A                     keypressed@i_151:
  1113                           	opt stack 0
  1114                           
  1115                           ; 1 bytes @ 0x39
  1116  00003A                     	ds	1
  1117  00003B                     keypressed@i_152:
  1118                           	opt stack 0
  1119                           
  1120                           ; 1 bytes @ 0x3A
  1121  00003B                     	ds	1
  1122  00003C                     keypressed@i_153:
  1123                           	opt stack 0
  1124                           
  1125                           ; 1 bytes @ 0x3B
  1126  00003C                     	ds	1
  1127  00003D                     keypressed@i_154:
  1128                           	opt stack 0
  1129                           
  1130                           ; 1 bytes @ 0x3C
  1131  00003D                     	ds	1
  1132  00003E                     keypressed@keypress_temp:
  1133                           	opt stack 0
  1134                           
  1135                           ; 1 bytes @ 0x3D
  1136  00003E                     	ds	1
  1137                           postinc0	equ	0xFEE
  1138                           wreg	equ	0xFE8
  1139                           
  1140 ;;
  1141 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1142 ;;
  1143 ;; *************** function _main *****************
  1144 ;; Defined at:
  1145 ;;		line 80 in file "main.c"
  1146 ;; Parameters:    Size  Location     Type
  1147 ;;		None
  1148 ;; Auto vars:     Size  Location     Type
  1149 ;;  i               1   49[BANK0 ] unsigned char 
  1150 ;;  i               1   48[BANK0 ] unsigned char 
  1151 ;; Return value:  Size  Location     Type
  1152 ;;                  1    wreg      void 
  1153 ;; Registers used:
  1154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1155 ;; Tracked objects:
  1156 ;;		On entry : 0/0
  1157 ;;		On exit  : 0/0
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1161 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1162 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1163 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1164 ;;Total ram usage:        4 bytes
  1165 ;; Hardware stack levels required when called:   11
  1166 ;; This function calls:
  1167 ;;		_I2C_Master_Init
  1168 ;;		_done_sorting
  1169 ;;		_initLCD
  1170 ;;		_results
  1171 ;;		_set_time
  1172 ;;		_standby
  1173 ;;		_startSorting
  1174 ;; This function is called by:
  1175 ;;		Startup code after reset
  1176 ;; This function uses a non-reentrant model
  1177 ;;
  1178                           
  1179                           	psect	text0
  1180  000EF0                     __ptext0:
  1181                           	opt stack 0
  1182  000EF0                     _main:
  1183                           	opt stack 20
  1184                           
  1185                           ;main.c: 82: TRISA = 0xFC;
  1186                           
  1187                           ;incstack = 0
  1188  000EF0  0EFC               	movlw	252
  1189  000EF2  6E92               	movwf	3986,c	;volatile
  1190                           
  1191                           ;main.c: 84: TRISB = 0xF2;
  1192  000EF4  0EF2               	movlw	242
  1193  000EF6  6E93               	movwf	3987,c	;volatile
  1194                           
  1195                           ;main.c: 87: TRISC = 0x1E;
  1196  000EF8  0E1E               	movlw	30
  1197  000EFA  6E94               	movwf	3988,c	;volatile
  1198                           
  1199                           ;main.c: 88: TRISD = 0x00;
  1200  000EFC  0E00               	movlw	0
  1201  000EFE  6E95               	movwf	3989,c	;volatile
  1202                           
  1203                           ;main.c: 89: TRISE = 0x00;
  1204  000F00  0E00               	movlw	0
  1205  000F02  6E96               	movwf	3990,c	;volatile
  1206                           
  1207                           ;main.c: 91: LATA = 0x00;
  1208  000F04  0E00               	movlw	0
  1209  000F06  6E89               	movwf	3977,c	;volatile
  1210                           
  1211                           ;main.c: 92: LATB = 0x00;
  1212  000F08  0E00               	movlw	0
  1213  000F0A  6E8A               	movwf	3978,c	;volatile
  1214                           
  1215                           ;main.c: 93: LATC = 0x01;
  1216  000F0C  0E01               	movlw	1
  1217  000F0E  6E8B               	movwf	3979,c	;volatile
  1218                           
  1219                           ;main.c: 94: LATD = 0x00;
  1220  000F10  0E00               	movlw	0
  1221  000F12  6E8C               	movwf	3980,c	;volatile
  1222                           
  1223                           ;main.c: 96: LATE = 0x08;
  1224  000F14  0E08               	movlw	8
  1225  000F16  6E8D               	movwf	3981,c	;volatile
  1226                           
  1227                           ;main.c: 98: ADCON0 = 0x00;
  1228  000F18  0E00               	movlw	0
  1229  000F1A  6EC2               	movwf	4034,c	;volatile
  1230                           
  1231                           ;main.c: 99: ADCON1 = 0xFF;
  1232  000F1C  68C1               	setf	4033,c	;volatile
  1233                           
  1234                           ;main.c: 101: initLCD();
  1235  000F1E  EC76  F00C         	call	_initLCD	;wreg free
  1236                           
  1237                           ;main.c: 102: __nop();
  1238  000F22  F000               	nop	
  1239                           
  1240                           ;main.c: 103: __nop();
  1241  000F24  F000               	nop	
  1242                           
  1243                           ;main.c: 104: INT1IE = 1;
  1244  000F26  86F0               	bsf	intcon3,3,c	;volatile
  1245                           
  1246                           ;main.c: 107: I2C_Master_Init(10000);
  1247  000F28  0E10               	movlw	16
  1248  000F2A  0100               	movlb	0	; () banked
  1249  000F2C  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  1250  000F2E  0E27               	movlw	39
  1251  000F30  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1252  000F32  0E00               	movlw	0
  1253  000F34  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1254  000F36  0E00               	movlw	0
  1255  000F38  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1256  000F3A  EC13  F00B         	call	_I2C_Master_Init	;wreg free
  1257                           
  1258                           ;main.c: 108: set_time();
  1259  000F3E  ECB1  F00A         	call	_set_time	;wreg free
  1260  000F42                     l4391:
  1261                           
  1262                           ;main.c: 114: standby();
  1263  000F42  EC3E  F006         	call	_standby	;wreg free
  1264                           
  1265                           ;main.c: 117: startSorting();
  1266  000F46  ECEC  F007         	call	_startSorting	;wreg free
  1267                           
  1268                           ;main.c: 120: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)));};
  1269  000F4A  0E00               	movlw	0
  1270  000F4C  0100               	movlb	0	; () banked
  1271  000F4E  6FB0               	movwf	main@i& (0+255),b
  1272  000F50                     l4397:
  1273                           
  1274                           ; BSR set to: 0
  1275  000F50  0E09               	movlw	9
  1276  000F52  0100               	movlb	0	; () banked
  1277  000F54  65B0               	cpfsgt	main@i& (0+255),b
  1278  000F56  D001               	goto	l4401
  1279  000F58  D010               	goto	l4405
  1280  000F5A                     l4401:
  1281                           
  1282                           ; BSR set to: 0
  1283  000F5A  0E02               	movlw	2
  1284  000F5C  0100               	movlb	0	; () banked
  1285  000F5E  6FAF               	movwf	(??_main+1)& (0+255),b
  1286  000F60  0E3F               	movlw	63
  1287  000F62  0100               	movlb	0	; () banked
  1288  000F64  6FAE               	movwf	??_main& (0+255),b
  1289  000F66  0E2B               	movlw	43
  1290  000F68                     u4157:
  1291  000F68  2EE8               	decfsz	wreg,f,c
  1292  000F6A  D7FE               	bra	u4157
  1293  000F6C  2FAE               	decfsz	??_main& (0+255),f,b
  1294  000F6E  D7FC               	bra	u4157
  1295  000F70  2FAF               	decfsz	(??_main+1)& (0+255),f,b
  1296  000F72  D7FA               	bra	u4157
  1297  000F74  0100               	movlb	0	; () banked
  1298  000F76  2BB0               	incf	main@i& (0+255),f,b
  1299  000F78  D7EB               	goto	l4397
  1300  000F7A                     l4405:
  1301                           
  1302                           ; BSR set to: 0
  1303                           ;main.c: 121: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)));};
  1304  000F7A  0E00               	movlw	0
  1305  000F7C  0100               	movlb	0	; () banked
  1306  000F7E  6FB1               	movwf	main@i_776& (0+255),b
  1307  000F80                     l4407:
  1308                           
  1309                           ; BSR set to: 0
  1310  000F80  0E09               	movlw	9
  1311  000F82  0100               	movlb	0	; () banked
  1312  000F84  65B1               	cpfsgt	main@i_776& (0+255),b
  1313  000F86  D001               	goto	l4411
  1314  000F88  D010               	goto	l4415
  1315  000F8A                     l4411:
  1316                           
  1317                           ; BSR set to: 0
  1318  000F8A  0E02               	movlw	2
  1319  000F8C  0100               	movlb	0	; () banked
  1320  000F8E  6FAF               	movwf	(??_main+1)& (0+255),b
  1321  000F90  0E3F               	movlw	63
  1322  000F92  0100               	movlb	0	; () banked
  1323  000F94  6FAE               	movwf	??_main& (0+255),b
  1324  000F96  0E2B               	movlw	43
  1325  000F98                     u4167:
  1326  000F98  2EE8               	decfsz	wreg,f,c
  1327  000F9A  D7FE               	bra	u4167
  1328  000F9C  2FAE               	decfsz	??_main& (0+255),f,b
  1329  000F9E  D7FC               	bra	u4167
  1330  000FA0  2FAF               	decfsz	(??_main+1)& (0+255),f,b
  1331  000FA2  D7FA               	bra	u4167
  1332  000FA4  0100               	movlb	0	; () banked
  1333  000FA6  2BB1               	incf	main@i_776& (0+255),f,b
  1334  000FA8  D7EB               	goto	l4407
  1335  000FAA                     l4415:
  1336                           
  1337                           ; BSR set to: 0
  1338                           ;main.c: 125: operation_time = done_sorting();
  1339  000FAA  ECF9  F004         	call	_done_sorting	;wreg free
  1340  000FAE  C08E  F047         	movff	?_done_sorting,_operation_time
  1341  000FB2  C08F  F048         	movff	?_done_sorting+1,_operation_time+1
  1342                           
  1343                           ;main.c: 127: __nop();
  1344  000FB6  F000               	nop	
  1345                           
  1346                           ;main.c: 128: __nop();
  1347  000FB8  F000               	nop	
  1348                           
  1349                           ;main.c: 130: LATA = 0x00;
  1350  000FBA  0E00               	movlw	0
  1351  000FBC  6E89               	movwf	3977,c	;volatile
  1352                           
  1353                           ;main.c: 131: LATB = 0x00;
  1354  000FBE  0E00               	movlw	0
  1355  000FC0  6E8A               	movwf	3978,c	;volatile
  1356                           
  1357                           ;main.c: 132: LATC = 0x01;
  1358  000FC2  0E01               	movlw	1
  1359  000FC4  6E8B               	movwf	3979,c	;volatile
  1360                           
  1361                           ;main.c: 133: LATD = 0x00;
  1362  000FC6  0E00               	movlw	0
  1363  000FC8  6E8C               	movwf	3980,c	;volatile
  1364                           
  1365                           ;main.c: 135: LATE = 0x08;
  1366  000FCA  0E08               	movlw	8
  1367  000FCC  6E8D               	movwf	3981,c	;volatile
  1368                           
  1369                           ;main.c: 137: results();
  1370  000FCE  ECEC  F006         	call	_results	;wreg free
  1371  000FD2  D7B7               	goto	l4391
  1372                           
  1373                           ;main.c: 138: }
  1374                           ;main.c: 139: __nop();
  1375  000FD4  F000               	nop	
  1376                           
  1377                           ;main.c: 140: __nop();
  1378  000FD6  F000               	nop	
  1379  000FD8                     __end_of_main:
  1380                           	opt stack 0
  1381                           intcon3	equ	0xFF0
  1382                           postinc0	equ	0xFEE
  1383                           wreg	equ	0xFE8
  1384                           
  1385 ;; *************** function _startSorting *****************
  1386 ;; Defined at:
  1387 ;;		line 80 in file "operation.c"
  1388 ;; Parameters:    Size  Location     Type
  1389 ;;		None
  1390 ;; Auto vars:     Size  Location     Type
  1391 ;;  i               1   45[BANK0 ] unsigned char 
  1392 ;;  i               1   44[BANK0 ] unsigned char 
  1393 ;; Return value:  Size  Location     Type
  1394 ;;                  1    wreg      void 
  1395 ;; Registers used:
  1396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1397 ;; Tracked objects:
  1398 ;;		On entry : 0/0
  1399 ;;		On exit  : 0/0
  1400 ;;		Unchanged: 0/0
  1401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1403 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1404 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1405 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1406 ;;Total ram usage:        4 bytes
  1407 ;; Hardware stack levels used:    1
  1408 ;; Hardware stack levels required when called:   10
  1409 ;; This function calls:
  1410 ;;		Absolute function
  1411 ;;		_initLCD
  1412 ;;		_initialization
  1413 ;;		_lcdInst
  1414 ;;		_printf
  1415 ;;		_solenoids_back
  1416 ;;		_solenoids_out
  1417 ;;		_top_rocker_idle
  1418 ;;		_top_rocker_release
  1419 ;;		_top_rocker_restore
  1420 ;; This function is called by:
  1421 ;;		_main
  1422 ;; This function uses a non-reentrant model
  1423 ;;
  1424                           
  1425                           	psect	text1
  1426  000FD8                     __ptext1:
  1427                           	opt stack 0
  1428  000FD8                     _startSorting:
  1429                           	opt stack 20
  1430                           
  1431                           ;operation.c: 83: initialization();
  1432                           
  1433                           ;incstack = 0
  1434  000FD8  EC43  F00B         	call	_initialization	;wreg free
  1435  000FDC                     l4209:
  1436                           
  1437                           ;operation.c: 91: lcdInst(0b10000000);;
  1438  000FDC  0E80               	movlw	128
  1439  000FDE  ECF7  F00D         	call	_lcdInst
  1440                           
  1441                           ;operation.c: 92: initLCD();
  1442  000FE2  EC76  F00C         	call	_initLCD	;wreg free
  1443                           
  1444                           ;operation.c: 93: printf("here");
  1445  000FE6  0EFA               	movlw	low STR_11
  1446  000FE8  0100               	movlb	0	; () banked
  1447  000FEA  6F8E               	movwf	printf@f& (0+255),b
  1448  000FEC  0EFF               	movlw	high STR_11
  1449  000FEE  0100               	movlb	0	; () banked
  1450  000FF0  6F8F               	movwf	(printf@f+1)& (0+255),b
  1451  000FF2  EC09  F000         	call	_printf	;wreg free
  1452                           
  1453                           ;operation.c: 94: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)))
      +                          ;};
  1454  000FF6  0E00               	movlw	0
  1455  000FF8  0100               	movlb	0	; () banked
  1456  000FFA  6FAC               	movwf	startSorting@i& (0+255),b
  1457  000FFC                     l4215:
  1458                           
  1459                           ; BSR set to: 0
  1460  000FFC  0E09               	movlw	9
  1461  000FFE  0100               	movlb	0	; () banked
  1462  001000  65AC               	cpfsgt	startSorting@i& (0+255),b
  1463  001002  D001               	goto	l4219
  1464  001004  D010               	goto	l4223
  1465  001006                     l4219:
  1466                           
  1467                           ; BSR set to: 0
  1468  001006  0E02               	movlw	2
  1469  001008  0100               	movlb	0	; () banked
  1470  00100A  6FAB               	movwf	(??_startSorting+1)& (0+255),b
  1471  00100C  0E3F               	movlw	63
  1472  00100E  0100               	movlb	0	; () banked
  1473  001010  6FAA               	movwf	??_startSorting& (0+255),b
  1474  001012  0E2B               	movlw	43
  1475  001014                     u4177:
  1476  001014  2EE8               	decfsz	wreg,f,c
  1477  001016  D7FE               	bra	u4177
  1478  001018  2FAA               	decfsz	??_startSorting& (0+255),f,b
  1479  00101A  D7FC               	bra	u4177
  1480  00101C  2FAB               	decfsz	(??_startSorting+1)& (0+255),f,b
  1481  00101E  D7FA               	bra	u4177
  1482  001020  0100               	movlb	0	; () banked
  1483  001022  2BAC               	incf	startSorting@i& (0+255),f,b
  1484  001024  D7EB               	goto	l4215
  1485  001026                     l4223:
  1486                           
  1487                           ; BSR set to: 0
  1488                           ;operation.c: 96: (*topRockerState)();
  1489  001026  D801               	call	u3958
  1490  001028  D00A               	goto	l4225
  1491  00102A                     u3958:
  1492  00102A  0005               	push	
  1493  00102C  6EFA               	movwf	pclath,c
  1494  00102E  0100               	movlb	0	; () banked
  1495  001030  51CB               	movf	_topRockerState& (0+255),w,b
  1496  001032  6EFD               	movwf	tosl,c
  1497  001034  51CC               	movf	(_topRockerState+1)& (0+255),w,b
  1498  001036  6EFE               	movwf	tosh,c
  1499  001038  6AFF               	clrf	tosu,c
  1500  00103A  50FA               	movf	pclath,w,c
  1501  00103C  0012               	return		;indir
  1502  00103E                     l4225:
  1503                           
  1504                           ;operation.c: 103: _delay((unsigned long)((200)*(10000000/4000.0)));
  1505  00103E  0E03               	movlw	3
  1506  001040  0100               	movlb	0	; () banked
  1507  001042  6FAB               	movwf	(??_startSorting+1)& (0+255),b
  1508  001044  0E8A               	movlw	138
  1509  001046  0100               	movlb	0	; () banked
  1510  001048  6FAA               	movwf	??_startSorting& (0+255),b
  1511  00104A  0E55               	movlw	85
  1512  00104C                     u4187:
  1513  00104C  2EE8               	decfsz	wreg,f,c
  1514  00104E  D7FE               	bra	u4187
  1515  001050  2FAA               	decfsz	??_startSorting& (0+255),f,b
  1516  001052  D7FC               	bra	u4187
  1517  001054  2FAB               	decfsz	(??_startSorting+1)& (0+255),f,b
  1518  001056  D7FA               	bra	u4187
  1519  001058  D000               	nop2	
  1520                           
  1521                           ;operation.c: 107: if(fsm1 >= 4){
  1522  00105A  0100               	movlb	0	; () banked
  1523  00105C  51CA               	movf	(_fsm1+1)& (0+255),w,b
  1524  00105E  E105               	bnz	u3960
  1525  001060  0E04               	movlw	4
  1526  001062  0100               	movlb	0	; () banked
  1527  001064  5DC9               	subwf	_fsm1& (0+255),w,b
  1528  001066  A0D8               	btfss	status,0,c
  1529  001068  D7B9               	goto	l4209
  1530  00106A                     u3960:
  1531                           
  1532                           ; BSR set to: 0
  1533                           ;operation.c: 109: lcdInst(0b10000000);;
  1534  00106A  0E80               	movlw	128
  1535  00106C  ECF7  F00D         	call	_lcdInst
  1536                           
  1537                           ;operation.c: 110: initLCD();
  1538  001070  EC76  F00C         	call	_initLCD	;wreg free
  1539                           
  1540                           ;operation.c: 111: printf("time out");
  1541  001074  0EF1               	movlw	low STR_12
  1542  001076  0100               	movlb	0	; () banked
  1543  001078  6F8E               	movwf	printf@f& (0+255),b
  1544  00107A  0EFF               	movlw	high STR_12
  1545  00107C  0100               	movlb	0	; () banked
  1546  00107E  6F8F               	movwf	(printf@f+1)& (0+255),b
  1547  001080  EC09  F000         	call	_printf	;wreg free
  1548                           
  1549                           ;operation.c: 112: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  1550  001084  0E00               	movlw	0
  1551  001086  0100               	movlb	0	; () banked
  1552  001088  6FAD               	movwf	startSorting@i_686& (0+255),b
  1553  00108A                     l4235:
  1554                           
  1555                           ; BSR set to: 0
  1556  00108A  0E09               	movlw	9
  1557  00108C  0100               	movlb	0	; () banked
  1558  00108E  65AD               	cpfsgt	startSorting@i_686& (0+255),b
  1559  001090  D001               	goto	l4239
  1560  001092  0012               	return	
  1561  001094                     l4239:
  1562                           
  1563                           ; BSR set to: 0
  1564  001094  0E02               	movlw	2
  1565  001096  0100               	movlb	0	; () banked
  1566  001098  6FAB               	movwf	(??_startSorting+1)& (0+255),b
  1567  00109A  0E3F               	movlw	63
  1568  00109C  0100               	movlb	0	; () banked
  1569  00109E  6FAA               	movwf	??_startSorting& (0+255),b
  1570  0010A0  0E2B               	movlw	43
  1571  0010A2                     u4197:
  1572  0010A2  2EE8               	decfsz	wreg,f,c
  1573  0010A4  D7FE               	bra	u4197
  1574  0010A6  2FAA               	decfsz	??_startSorting& (0+255),f,b
  1575  0010A8  D7FC               	bra	u4197
  1576  0010AA  2FAB               	decfsz	(??_startSorting+1)& (0+255),f,b
  1577  0010AC  D7FA               	bra	u4197
  1578  0010AE  0100               	movlb	0	; () banked
  1579  0010B0  2BAD               	incf	startSorting@i_686& (0+255),f,b
  1580  0010B2  D7EB               	goto	l4235
  1581  0010B4                     __end_of_startSorting:
  1582                           	opt stack 0
  1583                           tosu	equ	0xFFF
  1584                           tosh	equ	0xFFE
  1585                           tosl	equ	0xFFD
  1586                           pclath	equ	0xFFA
  1587                           intcon3	equ	0xFF0
  1588                           postinc0	equ	0xFEE
  1589                           wreg	equ	0xFE8
  1590                           status	equ	0xFD8
  1591                           
  1592 ;; *************** function _top_rocker_release *****************
  1593 ;; Defined at:
  1594 ;;		line 116 in file "top_rocker_fsm.c"
  1595 ;; Parameters:    Size  Location     Type
  1596 ;;		None
  1597 ;; Auto vars:     Size  Location     Type
  1598 ;;  i               1   38[BANK0 ] unsigned char 
  1599 ;; Return value:  Size  Location     Type
  1600 ;;                  1    wreg      void 
  1601 ;; Registers used:
  1602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1603 ;; Tracked objects:
  1604 ;;		On entry : 0/0
  1605 ;;		On exit  : 0/0
  1606 ;;		Unchanged: 0/0
  1607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1609 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1610 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1611 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1612 ;;Total ram usage:        3 bytes
  1613 ;; Hardware stack levels used:    1
  1614 ;; Hardware stack levels required when called:    8
  1615 ;; This function calls:
  1616 ;;		_initLCD
  1617 ;;		_lcdInst
  1618 ;;		_printf
  1619 ;;		_top_rocker_motor_ccw
  1620 ;; This function is called by:
  1621 ;;		_solenoids_back
  1622 ;;		_startSorting
  1623 ;; This function uses a non-reentrant model
  1624 ;;
  1625                           
  1626                           	psect	text2
  1627  0014FC                     __ptext2:
  1628                           	opt stack 0
  1629  0014FC                     _top_rocker_release:
  1630                           	opt stack 21
  1631                           
  1632                           ;top_rocker_fsm.c: 120: lcdInst(0b10000000);;
  1633                           
  1634                           ; BSR set to: 0
  1635                           ;incstack = 0
  1636  0014FC  0E80               	movlw	128
  1637  0014FE  ECF7  F00D         	call	_lcdInst
  1638                           
  1639                           ;top_rocker_fsm.c: 121: initLCD();
  1640  001502  EC76  F00C         	call	_initLCD	;wreg free
  1641                           
  1642                           ;top_rocker_fsm.c: 122: printf("rocker release");
  1643  001506  0E92               	movlw	low STR_6
  1644  001508  0100               	movlb	0	; () banked
  1645  00150A  6F8E               	movwf	printf@f& (0+255),b
  1646  00150C  0EFF               	movlw	high STR_6
  1647  00150E  0100               	movlb	0	; () banked
  1648  001510  6F8F               	movwf	(printf@f+1)& (0+255),b
  1649  001512  EC09  F000         	call	_printf	;wreg free
  1650                           
  1651                           ;top_rocker_fsm.c: 123: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/400
      +                          0.0)));};
  1652  001516  0E00               	movlw	0
  1653  001518  0100               	movlb	0	; () banked
  1654  00151A  6FA6               	movwf	top_rocker_release@i& (0+255),b
  1655  00151C                     l4031:
  1656                           
  1657                           ; BSR set to: 0
  1658  00151C  0E09               	movlw	9
  1659  00151E  0100               	movlb	0	; () banked
  1660  001520  65A6               	cpfsgt	top_rocker_release@i& (0+255),b
  1661  001522  D001               	goto	l4035
  1662  001524  D010               	goto	l4039
  1663  001526                     l4035:
  1664                           
  1665                           ; BSR set to: 0
  1666  001526  0E02               	movlw	2
  1667  001528  0100               	movlb	0	; () banked
  1668  00152A  6FA5               	movwf	(??_top_rocker_release+1)& (0+255),b
  1669  00152C  0E3F               	movlw	63
  1670  00152E  0100               	movlb	0	; () banked
  1671  001530  6FA4               	movwf	??_top_rocker_release& (0+255),b
  1672  001532  0E2B               	movlw	43
  1673  001534                     u4207:
  1674  001534  2EE8               	decfsz	wreg,f,c
  1675  001536  D7FE               	bra	u4207
  1676  001538  2FA4               	decfsz	??_top_rocker_release& (0+255),f,b
  1677  00153A  D7FC               	bra	u4207
  1678  00153C  2FA5               	decfsz	(??_top_rocker_release+1)& (0+255),f,b
  1679  00153E  D7FA               	bra	u4207
  1680  001540  0100               	movlb	0	; () banked
  1681  001542  2BA6               	incf	top_rocker_release@i& (0+255),f,b
  1682  001544  D7EB               	goto	l4031
  1683  001546                     l4039:
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;top_rocker_fsm.c: 126: top_rocker_motor_ccw();
  1687  001546  EC95  F00D         	call	_top_rocker_motor_ccw	;wreg free
  1688                           
  1689                           ;top_rocker_fsm.c: 131: topRockerState = top_rocker_restore;
  1690  00154A  0E40               	movlw	low _top_rocker_restore
  1691  00154C  0100               	movlb	0	; () banked
  1692  00154E  6FCB               	movwf	_topRockerState& (0+255),b
  1693  001550  0E17               	movlw	high _top_rocker_restore
  1694  001552  0100               	movlb	0	; () banked
  1695  001554  6FCC               	movwf	(_topRockerState+1)& (0+255),b
  1696                           
  1697                           ; BSR set to: 0
  1698                           ;top_rocker_fsm.c: 134: start_top_distribution = 1;
  1699  001556  0E00               	movlw	0
  1700  001558  0100               	movlb	0	; () banked
  1701  00155A  6FC4               	movwf	(_start_top_distribution+1)& (0+255),b
  1702  00155C  0E01               	movlw	1
  1703  00155E  6FC3               	movwf	_start_top_distribution& (0+255),b
  1704  001560  0012               	return	
  1705  001562                     __end_of_top_rocker_release:
  1706                           	opt stack 0
  1707                           tosu	equ	0xFFF
  1708                           tosh	equ	0xFFE
  1709                           tosl	equ	0xFFD
  1710                           pclath	equ	0xFFA
  1711                           intcon3	equ	0xFF0
  1712                           postinc0	equ	0xFEE
  1713                           wreg	equ	0xFE8
  1714                           status	equ	0xFD8
  1715                           
  1716 ;; *************** function _solenoids_back *****************
  1717 ;; Defined at:
  1718 ;;		line 89 in file "top_rocker_fsm.c"
  1719 ;; Parameters:    Size  Location     Type
  1720 ;;		None
  1721 ;; Auto vars:     Size  Location     Type
  1722 ;;  i               1   38[BANK0 ] unsigned char 
  1723 ;; Return value:  Size  Location     Type
  1724 ;;                  1    wreg      void 
  1725 ;; Registers used:
  1726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1727 ;; Tracked objects:
  1728 ;;		On entry : 0/0
  1729 ;;		On exit  : 0/0
  1730 ;;		Unchanged: 0/0
  1731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1733 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1734 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1735 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1736 ;;Total ram usage:        3 bytes
  1737 ;; Hardware stack levels used:    1
  1738 ;; Hardware stack levels required when called:    8
  1739 ;; This function calls:
  1740 ;;		_go_back
  1741 ;;		_initLCD
  1742 ;;		_lcdInst
  1743 ;;		_printf
  1744 ;; This function is called by:
  1745 ;;		_solenoids_out
  1746 ;;		_startSorting
  1747 ;; This function uses a non-reentrant model
  1748 ;;
  1749                           
  1750                           	psect	text3
  1751  00122E                     __ptext3:
  1752                           	opt stack 0
  1753  00122E                     _solenoids_back:
  1754                           	opt stack 21
  1755                           
  1756                           ;top_rocker_fsm.c: 92: lcdInst(0b10000000);;
  1757                           
  1758                           ; BSR set to: 0
  1759                           ;incstack = 0
  1760  00122E  0E80               	movlw	128
  1761  001230  ECF7  F00D         	call	_lcdInst
  1762                           
  1763                           ;top_rocker_fsm.c: 93: initLCD();
  1764  001234  EC76  F00C         	call	_initLCD	;wreg free
  1765                           
  1766                           ;top_rocker_fsm.c: 94: printf("solenoids back");
  1767  001238  0EA1               	movlw	low STR_5
  1768  00123A  0100               	movlb	0	; () banked
  1769  00123C  6F8E               	movwf	printf@f& (0+255),b
  1770  00123E  0EFF               	movlw	high STR_5
  1771  001240  0100               	movlb	0	; () banked
  1772  001242  6F8F               	movwf	(printf@f+1)& (0+255),b
  1773  001244  EC09  F000         	call	_printf	;wreg free
  1774                           
  1775                           ;top_rocker_fsm.c: 95: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000
      +                          .0)));};
  1776  001248  0E00               	movlw	0
  1777  00124A  0100               	movlb	0	; () banked
  1778  00124C  6FA6               	movwf	solenoids_back@i& (0+255),b
  1779  00124E                     l4003:
  1780                           
  1781                           ; BSR set to: 0
  1782  00124E  0E09               	movlw	9
  1783  001250  0100               	movlb	0	; () banked
  1784  001252  65A6               	cpfsgt	solenoids_back@i& (0+255),b
  1785  001254  D001               	goto	l4007
  1786  001256  D010               	goto	l4011
  1787  001258                     l4007:
  1788                           
  1789                           ; BSR set to: 0
  1790  001258  0E02               	movlw	2
  1791  00125A  0100               	movlb	0	; () banked
  1792  00125C  6FA5               	movwf	(??_solenoids_back+1)& (0+255),b
  1793  00125E  0E3F               	movlw	63
  1794  001260  0100               	movlb	0	; () banked
  1795  001262  6FA4               	movwf	??_solenoids_back& (0+255),b
  1796  001264  0E2B               	movlw	43
  1797  001266                     u4217:
  1798  001266  2EE8               	decfsz	wreg,f,c
  1799  001268  D7FE               	bra	u4217
  1800  00126A  2FA4               	decfsz	??_solenoids_back& (0+255),f,b
  1801  00126C  D7FC               	bra	u4217
  1802  00126E  2FA5               	decfsz	(??_solenoids_back+1)& (0+255),f,b
  1803  001270  D7FA               	bra	u4217
  1804  001272  0100               	movlb	0	; () banked
  1805  001274  2BA6               	incf	solenoids_back@i& (0+255),f,b
  1806  001276  D7EB               	goto	l4003
  1807  001278                     l4011:
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;top_rocker_fsm.c: 98: tabed = PORTCbits.RC1;
  1811  001278  A282               	btfss	3970,1,c	;volatile
  1812  00127A  D004               	goto	u3690
  1813  00127C  0100               	movlb	0	; () banked
  1814  00127E  6BA4               	clrf	??_solenoids_back& (0+255),b
  1815  001280  2BA4               	incf	??_solenoids_back& (0+255),f,b
  1816  001282  D002               	goto	u3698
  1817  001284                     u3690:
  1818  001284  0100               	movlb	0	; () banked
  1819  001286  6BA4               	clrf	??_solenoids_back& (0+255),b
  1820  001288                     u3698:
  1821  001288  0100               	movlb	0	; () banked
  1822  00128A  51A4               	movf	??_solenoids_back& (0+255),w,b
  1823  00128C  0100               	movlb	0	; () banked
  1824  00128E  6FC7               	movwf	_tabed& (0+255),b
  1825  001290  6BC8               	clrf	(_tabed+1)& (0+255),b
  1826                           
  1827                           ; BSR set to: 0
  1828                           ;top_rocker_fsm.c: 100: if(PORTCbits.RC1){
  1829  001292  A282               	btfss	3970,1,c	;volatile
  1830  001294  D005               	goto	l4017
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;top_rocker_fsm.c: 101: top_move = 1;
  1834  001296  0E00               	movlw	0
  1835  001298  0100               	movlb	0	; () banked
  1836  00129A  6FC6               	movwf	(_top_move+1)& (0+255),b
  1837  00129C  0E01               	movlw	1
  1838  00129E  D004               	goto	L1
  1839  0012A0                     l4017:
  1840                           
  1841                           ; BSR set to: 0
  1842                           ;top_rocker_fsm.c: 103: top_move = 0;
  1843  0012A0  0E00               	movlw	0
  1844  0012A2  0100               	movlb	0	; () banked
  1845  0012A4  6FC6               	movwf	(_top_move+1)& (0+255),b
  1846  0012A6  0E00               	movlw	0
  1847  0012A8                     L1:
  1848  0012A8  6FC5               	movwf	_top_move& (0+255),b
  1849                           
  1850                           ; BSR set to: 0
  1851                           ;top_rocker_fsm.c: 104: }
  1852                           ;top_rocker_fsm.c: 107: go_back();
  1853                           
  1854                           ; BSR set to: 0
  1855  0012AA  ECB6  F00D         	call	_go_back	;wreg free
  1856                           
  1857                           ;top_rocker_fsm.c: 110: topRockerState = top_rocker_release;
  1858  0012AE  0EFC               	movlw	low _top_rocker_release
  1859  0012B0  0100               	movlb	0	; () banked
  1860  0012B2  6FCB               	movwf	_topRockerState& (0+255),b
  1861  0012B4  0E14               	movlw	high _top_rocker_release
  1862  0012B6  0100               	movlb	0	; () banked
  1863  0012B8  6FCC               	movwf	(_topRockerState+1)& (0+255),b
  1864  0012BA  0012               	return	
  1865  0012BC                     __end_of_solenoids_back:
  1866                           	opt stack 0
  1867                           tosu	equ	0xFFF
  1868                           tosh	equ	0xFFE
  1869                           tosl	equ	0xFFD
  1870                           pclath	equ	0xFFA
  1871                           intcon3	equ	0xFF0
  1872                           postinc0	equ	0xFEE
  1873                           wreg	equ	0xFE8
  1874                           status	equ	0xFD8
  1875                           
  1876 ;; *************** function _solenoids_out *****************
  1877 ;; Defined at:
  1878 ;;		line 73 in file "top_rocker_fsm.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;		None
  1881 ;; Auto vars:     Size  Location     Type
  1882 ;;  i               1   38[BANK0 ] unsigned char 
  1883 ;; Return value:  Size  Location     Type
  1884 ;;                  1    wreg      void 
  1885 ;; Registers used:
  1886 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1887 ;; Tracked objects:
  1888 ;;		On entry : 0/0
  1889 ;;		On exit  : 0/0
  1890 ;;		Unchanged: 0/0
  1891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1893 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1894 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1895 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1896 ;;Total ram usage:        3 bytes
  1897 ;; Hardware stack levels used:    1
  1898 ;; Hardware stack levels required when called:    8
  1899 ;; This function calls:
  1900 ;;		_initLCD
  1901 ;;		_lcdInst
  1902 ;;		_pop_out
  1903 ;;		_printf
  1904 ;; This function is called by:
  1905 ;;		_top_rocker_idle
  1906 ;;		_startSorting
  1907 ;; This function uses a non-reentrant model
  1908 ;;
  1909                           
  1910                           	psect	text4
  1911  0016E4                     __ptext4:
  1912                           	opt stack 0
  1913  0016E4                     _solenoids_out:
  1914                           	opt stack 21
  1915                           
  1916                           ;top_rocker_fsm.c: 76: lcdInst(0b10000000);;
  1917                           
  1918                           ; BSR set to: 0
  1919                           ;incstack = 0
  1920  0016E4  0E80               	movlw	128
  1921  0016E6  ECF7  F00D         	call	_lcdInst
  1922                           
  1923                           ;top_rocker_fsm.c: 77: initLCD();
  1924  0016EA  EC76  F00C         	call	_initLCD	;wreg free
  1925                           
  1926                           ;top_rocker_fsm.c: 78: printf("solenoids out");
  1927  0016EE  0EB0               	movlw	low STR_4
  1928  0016F0  0100               	movlb	0	; () banked
  1929  0016F2  6F8E               	movwf	printf@f& (0+255),b
  1930  0016F4  0EFF               	movlw	high STR_4
  1931  0016F6  0100               	movlb	0	; () banked
  1932  0016F8  6F8F               	movwf	(printf@f+1)& (0+255),b
  1933  0016FA  EC09  F000         	call	_printf	;wreg free
  1934                           
  1935                           ;top_rocker_fsm.c: 79: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000
      +                          .0)));};
  1936  0016FE  0E00               	movlw	0
  1937  001700  0100               	movlb	0	; () banked
  1938  001702  6FA6               	movwf	solenoids_out@i& (0+255),b
  1939  001704                     l3983:
  1940                           
  1941                           ; BSR set to: 0
  1942  001704  0E09               	movlw	9
  1943  001706  0100               	movlb	0	; () banked
  1944  001708  65A6               	cpfsgt	solenoids_out@i& (0+255),b
  1945  00170A  D001               	goto	l3987
  1946  00170C  D010               	goto	l3991
  1947  00170E                     l3987:
  1948                           
  1949                           ; BSR set to: 0
  1950  00170E  0E02               	movlw	2
  1951  001710  0100               	movlb	0	; () banked
  1952  001712  6FA5               	movwf	(??_solenoids_out+1)& (0+255),b
  1953  001714  0E3F               	movlw	63
  1954  001716  0100               	movlb	0	; () banked
  1955  001718  6FA4               	movwf	??_solenoids_out& (0+255),b
  1956  00171A  0E2B               	movlw	43
  1957  00171C                     u4227:
  1958  00171C  2EE8               	decfsz	wreg,f,c
  1959  00171E  D7FE               	bra	u4227
  1960  001720  2FA4               	decfsz	??_solenoids_out& (0+255),f,b
  1961  001722  D7FC               	bra	u4227
  1962  001724  2FA5               	decfsz	(??_solenoids_out+1)& (0+255),f,b
  1963  001726  D7FA               	bra	u4227
  1964  001728  0100               	movlb	0	; () banked
  1965  00172A  2BA6               	incf	solenoids_out@i& (0+255),f,b
  1966  00172C  D7EB               	goto	l3983
  1967  00172E                     l3991:
  1968                           
  1969                           ; BSR set to: 0
  1970                           ;top_rocker_fsm.c: 82: pop_out();
  1971  00172E  ECA6  F00D         	call	_pop_out	;wreg free
  1972                           
  1973                           ;top_rocker_fsm.c: 84: topRockerState = solenoids_back;
  1974  001732  0E2E               	movlw	low _solenoids_back
  1975  001734  0100               	movlb	0	; () banked
  1976  001736  6FCB               	movwf	_topRockerState& (0+255),b
  1977  001738  0E12               	movlw	high _solenoids_back
  1978  00173A  0100               	movlb	0	; () banked
  1979  00173C  6FCC               	movwf	(_topRockerState+1)& (0+255),b
  1980  00173E  0012               	return	
  1981  001740                     __end_of_solenoids_out:
  1982                           	opt stack 0
  1983                           tosu	equ	0xFFF
  1984                           tosh	equ	0xFFE
  1985                           tosl	equ	0xFFD
  1986                           pclath	equ	0xFFA
  1987                           intcon3	equ	0xFF0
  1988                           postinc0	equ	0xFEE
  1989                           wreg	equ	0xFE8
  1990                           status	equ	0xFD8
  1991                           
  1992 ;; *************** function _top_rocker_idle *****************
  1993 ;; Defined at:
  1994 ;;		line 50 in file "top_rocker_fsm.c"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;		None
  1997 ;; Auto vars:     Size  Location     Type
  1998 ;;  i               1   38[BANK0 ] unsigned char 
  1999 ;; Return value:  Size  Location     Type
  2000 ;;                  1    wreg      void 
  2001 ;; Registers used:
  2002 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2003 ;; Tracked objects:
  2004 ;;		On entry : 0/0
  2005 ;;		On exit  : 0/0
  2006 ;;		Unchanged: 0/0
  2007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2009 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2010 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2011 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2012 ;;Total ram usage:        3 bytes
  2013 ;; Hardware stack levels used:    1
  2014 ;; Hardware stack levels required when called:    8
  2015 ;; This function calls:
  2016 ;;		_initLCD
  2017 ;;		_lcdInst
  2018 ;;		_printf
  2019 ;; This function is called by:
  2020 ;;		_top_rocker_initial
  2021 ;;		_top_rocker_restore
  2022 ;;		_startSorting
  2023 ;; This function uses a non-reentrant model
  2024 ;;
  2025                           
  2026                           	psect	text5
  2027  001428                     __ptext5:
  2028                           	opt stack 0
  2029  001428                     _top_rocker_idle:
  2030                           	opt stack 21
  2031                           
  2032                           ;top_rocker_fsm.c: 55: lcdInst(0b10000000);;
  2033                           
  2034                           ; BSR set to: 0
  2035                           ;incstack = 0
  2036  001428  0E80               	movlw	128
  2037  00142A  ECF7  F00D         	call	_lcdInst
  2038                           
  2039                           ;top_rocker_fsm.c: 56: initLCD();
  2040  00142E  EC76  F00C         	call	_initLCD	;wreg free
  2041                           
  2042                           ;top_rocker_fsm.c: 57: printf("rocker idle");
  2043  001432  0EE5               	movlw	low STR_3
  2044  001434  0100               	movlb	0	; () banked
  2045  001436  6F8E               	movwf	printf@f& (0+255),b
  2046  001438  0EFF               	movlw	high STR_3
  2047  00143A  0100               	movlb	0	; () banked
  2048  00143C  6F8F               	movwf	(printf@f+1)& (0+255),b
  2049  00143E  EC09  F000         	call	_printf	;wreg free
  2050                           
  2051                           ;top_rocker_fsm.c: 58: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000
      +                          .0)));};
  2052  001442  0E00               	movlw	0
  2053  001444  0100               	movlb	0	; () banked
  2054  001446  6FA6               	movwf	top_rocker_idle@i& (0+255),b
  2055  001448                     l3961:
  2056                           
  2057                           ; BSR set to: 0
  2058  001448  0E09               	movlw	9
  2059  00144A  0100               	movlb	0	; () banked
  2060  00144C  65A6               	cpfsgt	top_rocker_idle@i& (0+255),b
  2061  00144E  D001               	goto	l3965
  2062  001450  D010               	goto	l191
  2063  001452                     l3965:
  2064                           
  2065                           ; BSR set to: 0
  2066  001452  0E02               	movlw	2
  2067  001454  0100               	movlb	0	; () banked
  2068  001456  6FA5               	movwf	(??_top_rocker_idle+1)& (0+255),b
  2069  001458  0E3F               	movlw	63
  2070  00145A  0100               	movlb	0	; () banked
  2071  00145C  6FA4               	movwf	??_top_rocker_idle& (0+255),b
  2072  00145E  0E2B               	movlw	43
  2073  001460                     u4237:
  2074  001460  2EE8               	decfsz	wreg,f,c
  2075  001462  D7FE               	bra	u4237
  2076  001464  2FA4               	decfsz	??_top_rocker_idle& (0+255),f,b
  2077  001466  D7FC               	bra	u4237
  2078  001468  2FA5               	decfsz	(??_top_rocker_idle+1)& (0+255),f,b
  2079  00146A  D7FA               	bra	u4237
  2080  00146C  0100               	movlb	0	; () banked
  2081  00146E  2BA6               	incf	top_rocker_idle@i& (0+255),f,b
  2082  001470  D7EB               	goto	l3961
  2083  001472                     l191:
  2084                           
  2085                           ; BSR set to: 0
  2086                           ;top_rocker_fsm.c: 62: if(! PORTAbits.RA2){
  2087  001472  B480               	btfsc	3968,2,c	;volatile
  2088  001474  D005               	goto	l3971
  2089                           
  2090                           ; BSR set to: 0
  2091                           ;top_rocker_fsm.c: 63: topRockerState = top_rocker_idle;
  2092  001476  0E28               	movlw	low _top_rocker_idle
  2093  001478  0100               	movlb	0	; () banked
  2094  00147A  6FCB               	movwf	_topRockerState& (0+255),b
  2095  00147C  0E14               	movlw	high _top_rocker_idle
  2096  00147E  D004               	goto	L2
  2097  001480                     l3971:
  2098                           
  2099                           ; BSR set to: 0
  2100                           ;top_rocker_fsm.c: 65: topRockerState = solenoids_out;
  2101  001480  0EE4               	movlw	low _solenoids_out
  2102  001482  0100               	movlb	0	; () banked
  2103  001484  6FCB               	movwf	_topRockerState& (0+255),b
  2104  001486  0E16               	movlw	high _solenoids_out
  2105  001488                     L2:
  2106  001488  0100               	movlb	0	; () banked
  2107  00148A  6FCC               	movwf	(_topRockerState+1)& (0+255),b
  2108                           
  2109                           ; BSR set to: 0
  2110                           ;top_rocker_fsm.c: 66: }
  2111                           ;top_rocker_fsm.c: 68: fsm1 ++;
  2112                           
  2113                           ; BSR set to: 0
  2114  00148C  0100               	movlb	0	; () banked
  2115  00148E  4BC9               	infsnz	_fsm1& (0+255),f,b
  2116  001490  2BCA               	incf	(_fsm1+1)& (0+255),f,b
  2117  001492  0012               	return	
  2118  001494                     __end_of_top_rocker_idle:
  2119                           	opt stack 0
  2120                           tosu	equ	0xFFF
  2121                           tosh	equ	0xFFE
  2122                           tosl	equ	0xFFD
  2123                           pclath	equ	0xFFA
  2124                           intcon3	equ	0xFF0
  2125                           postinc0	equ	0xFEE
  2126                           wreg	equ	0xFE8
  2127                           status	equ	0xFD8
  2128                           
  2129 ;; *************** function _top_rocker_restore *****************
  2130 ;; Defined at:
  2131 ;;		line 139 in file "top_rocker_fsm.c"
  2132 ;; Parameters:    Size  Location     Type
  2133 ;;		None
  2134 ;; Auto vars:     Size  Location     Type
  2135 ;;  i               1   38[BANK0 ] unsigned char 
  2136 ;; Return value:  Size  Location     Type
  2137 ;;                  1    wreg      void 
  2138 ;; Registers used:
  2139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2140 ;; Tracked objects:
  2141 ;;		On entry : 0/0
  2142 ;;		On exit  : 0/0
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2146 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2147 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2148 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2149 ;;Total ram usage:        3 bytes
  2150 ;; Hardware stack levels used:    1
  2151 ;; Hardware stack levels required when called:    8
  2152 ;; This function calls:
  2153 ;;		_initLCD
  2154 ;;		_lcdInst
  2155 ;;		_printf
  2156 ;;		_top_rocker_motor_cw
  2157 ;; This function is called by:
  2158 ;;		_top_rocker_release
  2159 ;;		_startSorting
  2160 ;; This function uses a non-reentrant model
  2161 ;;
  2162                           
  2163                           	psect	text6
  2164  001740                     __ptext6:
  2165                           	opt stack 0
  2166  001740                     _top_rocker_restore:
  2167                           	opt stack 21
  2168                           
  2169                           ;top_rocker_fsm.c: 142: lcdInst(0b10000000);;
  2170                           
  2171                           ; BSR set to: 0
  2172                           ;incstack = 0
  2173  001740  0E80               	movlw	128
  2174  001742  ECF7  F00D         	call	_lcdInst
  2175                           
  2176                           ;top_rocker_fsm.c: 143: initLCD();
  2177  001746  EC76  F00C         	call	_initLCD	;wreg free
  2178                           
  2179                           ;top_rocker_fsm.c: 144: printf("rocker restore");
  2180  00174A  0E83               	movlw	low STR_7
  2181  00174C  0100               	movlb	0	; () banked
  2182  00174E  6F8E               	movwf	printf@f& (0+255),b
  2183  001750  0EFF               	movlw	high STR_7
  2184  001752  0100               	movlb	0	; () banked
  2185  001754  6F8F               	movwf	(printf@f+1)& (0+255),b
  2186  001756  EC09  F000         	call	_printf	;wreg free
  2187                           
  2188                           ;top_rocker_fsm.c: 145: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/400
      +                          0.0)));};
  2189  00175A  0E00               	movlw	0
  2190  00175C  0100               	movlb	0	; () banked
  2191  00175E  6FA6               	movwf	top_rocker_restore@i& (0+255),b
  2192  001760                     l4053:
  2193                           
  2194                           ; BSR set to: 0
  2195  001760  0E09               	movlw	9
  2196  001762  0100               	movlb	0	; () banked
  2197  001764  65A6               	cpfsgt	top_rocker_restore@i& (0+255),b
  2198  001766  D001               	goto	l4057
  2199  001768  D010               	goto	l4061
  2200  00176A                     l4057:
  2201                           
  2202                           ; BSR set to: 0
  2203  00176A  0E02               	movlw	2
  2204  00176C  0100               	movlb	0	; () banked
  2205  00176E  6FA5               	movwf	(??_top_rocker_restore+1)& (0+255),b
  2206  001770  0E3F               	movlw	63
  2207  001772  0100               	movlb	0	; () banked
  2208  001774  6FA4               	movwf	??_top_rocker_restore& (0+255),b
  2209  001776  0E2B               	movlw	43
  2210  001778                     u4247:
  2211  001778  2EE8               	decfsz	wreg,f,c
  2212  00177A  D7FE               	bra	u4247
  2213  00177C  2FA4               	decfsz	??_top_rocker_restore& (0+255),f,b
  2214  00177E  D7FC               	bra	u4247
  2215  001780  2FA5               	decfsz	(??_top_rocker_restore+1)& (0+255),f,b
  2216  001782  D7FA               	bra	u4247
  2217  001784  0100               	movlb	0	; () banked
  2218  001786  2BA6               	incf	top_rocker_restore@i& (0+255),f,b
  2219  001788  D7EB               	goto	l4053
  2220  00178A                     l4061:
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;top_rocker_fsm.c: 150: top_rocker_motor_cw();
  2224  00178A  EC84  F00D         	call	_top_rocker_motor_cw	;wreg free
  2225                           
  2226                           ;top_rocker_fsm.c: 153: topRockerState = top_rocker_idle;
  2227  00178E  0E28               	movlw	low _top_rocker_idle
  2228  001790  0100               	movlb	0	; () banked
  2229  001792  6FCB               	movwf	_topRockerState& (0+255),b
  2230  001794  0E14               	movlw	high _top_rocker_idle
  2231  001796  0100               	movlb	0	; () banked
  2232  001798  6FCC               	movwf	(_topRockerState+1)& (0+255),b
  2233  00179A  0012               	return	
  2234  00179C                     __end_of_top_rocker_restore:
  2235                           	opt stack 0
  2236                           tosu	equ	0xFFF
  2237                           tosh	equ	0xFFE
  2238                           tosl	equ	0xFFD
  2239                           pclath	equ	0xFFA
  2240                           intcon3	equ	0xFF0
  2241                           postinc0	equ	0xFEE
  2242                           wreg	equ	0xFE8
  2243                           status	equ	0xFD8
  2244                           
  2245 ;; *************** function _top_rocker_motor_cw *****************
  2246 ;; Defined at:
  2247 ;;		line 25 in file "DC_motors.c"
  2248 ;; Parameters:    Size  Location     Type
  2249 ;;		None
  2250 ;; Auto vars:     Size  Location     Type
  2251 ;;		None
  2252 ;; Return value:  Size  Location     Type
  2253 ;;                  1    wreg      void 
  2254 ;; Registers used:
  2255 ;;		wreg
  2256 ;; Tracked objects:
  2257 ;;		On entry : 0/0
  2258 ;;		On exit  : 0/0
  2259 ;;		Unchanged: 0/0
  2260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2263 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2264 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2265 ;;Total ram usage:        2 bytes
  2266 ;; Hardware stack levels used:    1
  2267 ;; Hardware stack levels required when called:    5
  2268 ;; This function calls:
  2269 ;;		Nothing
  2270 ;; This function is called by:
  2271 ;;		_top_rocker_restore
  2272 ;; This function uses a non-reentrant model
  2273 ;;
  2274                           
  2275                           	psect	text7
  2276  001B08                     __ptext7:
  2277                           	opt stack 0
  2278  001B08                     _top_rocker_motor_cw:
  2279                           	opt stack 23
  2280                           
  2281                           ;DC_motors.c: 28: LATAbits.LATA0 = 0;
  2282                           
  2283                           ; BSR set to: 0
  2284                           ;incstack = 0
  2285  001B08  9089               	bcf	3977,0,c	;volatile
  2286                           
  2287                           ;DC_motors.c: 29: LATAbits.LATA1 = 1;
  2288  001B0A  8289               	bsf	3977,1,c	;volatile
  2289                           
  2290                           ;DC_motors.c: 30: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2291  001B0C  0E0D               	movlw	13
  2292  001B0E  0100               	movlb	0	; () banked
  2293  001B10  6F81               	movwf	(??_top_rocker_motor_cw+1)& (0+255),b
  2294  001B12  0EAF               	movlw	175
  2295  001B14  0100               	movlb	0	; () banked
  2296  001B16  6F80               	movwf	??_top_rocker_motor_cw& (0+255),b
  2297  001B18  0EB6               	movlw	182
  2298  001B1A                     u4257:
  2299  001B1A  2EE8               	decfsz	wreg,f,c
  2300  001B1C  D7FE               	bra	u4257
  2301  001B1E  2F80               	decfsz	??_top_rocker_motor_cw& (0+255),f,b
  2302  001B20  D7FC               	bra	u4257
  2303  001B22  2F81               	decfsz	(??_top_rocker_motor_cw+1)& (0+255),f,b
  2304  001B24  D7FA               	bra	u4257
  2305  001B26  F000               	nop	
  2306  001B28  0012               	return	
  2307  001B2A                     __end_of_top_rocker_motor_cw:
  2308                           	opt stack 0
  2309                           tosu	equ	0xFFF
  2310                           tosh	equ	0xFFE
  2311                           tosl	equ	0xFFD
  2312                           pclath	equ	0xFFA
  2313                           intcon3	equ	0xFF0
  2314                           postinc0	equ	0xFEE
  2315                           wreg	equ	0xFE8
  2316                           status	equ	0xFD8
  2317                           
  2318 ;; *************** function _top_rocker_motor_ccw *****************
  2319 ;; Defined at:
  2320 ;;		line 35 in file "DC_motors.c"
  2321 ;; Parameters:    Size  Location     Type
  2322 ;;		None
  2323 ;; Auto vars:     Size  Location     Type
  2324 ;;		None
  2325 ;; Return value:  Size  Location     Type
  2326 ;;                  1    wreg      void 
  2327 ;; Registers used:
  2328 ;;		wreg
  2329 ;; Tracked objects:
  2330 ;;		On entry : 0/0
  2331 ;;		On exit  : 0/0
  2332 ;;		Unchanged: 0/0
  2333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2336 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2337 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2338 ;;Total ram usage:        2 bytes
  2339 ;; Hardware stack levels used:    1
  2340 ;; Hardware stack levels required when called:    5
  2341 ;; This function calls:
  2342 ;;		Nothing
  2343 ;; This function is called by:
  2344 ;;		_top_rocker_release
  2345 ;; This function uses a non-reentrant model
  2346 ;;
  2347                           
  2348                           	psect	text8
  2349  001B2A                     __ptext8:
  2350                           	opt stack 0
  2351  001B2A                     _top_rocker_motor_ccw:
  2352                           	opt stack 23
  2353                           
  2354                           ;DC_motors.c: 38: LATAbits.LATA0 = 1;
  2355                           
  2356                           ;incstack = 0
  2357  001B2A  8089               	bsf	3977,0,c	;volatile
  2358                           
  2359                           ;DC_motors.c: 39: LATAbits.LATA1 = 0;
  2360  001B2C  9289               	bcf	3977,1,c	;volatile
  2361                           
  2362                           ;DC_motors.c: 40: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2363  001B2E  0E0D               	movlw	13
  2364  001B30  0100               	movlb	0	; () banked
  2365  001B32  6F81               	movwf	(??_top_rocker_motor_ccw+1)& (0+255),b
  2366  001B34  0EAF               	movlw	175
  2367  001B36  0100               	movlb	0	; () banked
  2368  001B38  6F80               	movwf	??_top_rocker_motor_ccw& (0+255),b
  2369  001B3A  0EB6               	movlw	182
  2370  001B3C                     u4267:
  2371  001B3C  2EE8               	decfsz	wreg,f,c
  2372  001B3E  D7FE               	bra	u4267
  2373  001B40  2F80               	decfsz	??_top_rocker_motor_ccw& (0+255),f,b
  2374  001B42  D7FC               	bra	u4267
  2375  001B44  2F81               	decfsz	(??_top_rocker_motor_ccw+1)& (0+255),f,b
  2376  001B46  D7FA               	bra	u4267
  2377  001B48  F000               	nop	
  2378  001B4A  0012               	return	
  2379  001B4C                     __end_of_top_rocker_motor_ccw:
  2380                           	opt stack 0
  2381                           tosu	equ	0xFFF
  2382                           tosh	equ	0xFFE
  2383                           tosl	equ	0xFFD
  2384                           pclath	equ	0xFFA
  2385                           intcon3	equ	0xFF0
  2386                           postinc0	equ	0xFEE
  2387                           wreg	equ	0xFE8
  2388                           status	equ	0xFD8
  2389                           
  2390 ;; *************** function _pop_out *****************
  2391 ;; Defined at:
  2392 ;;		line 25 in file "solenoids.c"
  2393 ;; Parameters:    Size  Location     Type
  2394 ;;		None
  2395 ;; Auto vars:     Size  Location     Type
  2396 ;;		None
  2397 ;; Return value:  Size  Location     Type
  2398 ;;                  1    wreg      void 
  2399 ;; Registers used:
  2400 ;;		wreg
  2401 ;; Tracked objects:
  2402 ;;		On entry : 0/0
  2403 ;;		On exit  : 0/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2408 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2409 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2410 ;;Total ram usage:        2 bytes
  2411 ;; Hardware stack levels used:    1
  2412 ;; Hardware stack levels required when called:    5
  2413 ;; This function calls:
  2414 ;;		Nothing
  2415 ;; This function is called by:
  2416 ;;		_solenoids_out
  2417 ;; This function uses a non-reentrant model
  2418 ;;
  2419                           
  2420                           	psect	text9
  2421  001B4C                     __ptext9:
  2422                           	opt stack 0
  2423  001B4C                     _pop_out:
  2424                           	opt stack 23
  2425                           
  2426                           ;solenoids.c: 27: LATCbits.LATC0 = 0;
  2427                           
  2428                           ;incstack = 0
  2429  001B4C  908B               	bcf	3979,0,c	;volatile
  2430                           
  2431                           ;solenoids.c: 28: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2432  001B4E  0E0D               	movlw	13
  2433  001B50  0100               	movlb	0	; () banked
  2434  001B52  6F81               	movwf	(??_pop_out+1)& (0+255),b
  2435  001B54  0EAF               	movlw	175
  2436  001B56  0100               	movlb	0	; () banked
  2437  001B58  6F80               	movwf	??_pop_out& (0+255),b
  2438  001B5A  0EB6               	movlw	182
  2439  001B5C                     u4277:
  2440  001B5C  2EE8               	decfsz	wreg,f,c
  2441  001B5E  D7FE               	bra	u4277
  2442  001B60  2F80               	decfsz	??_pop_out& (0+255),f,b
  2443  001B62  D7FC               	bra	u4277
  2444  001B64  2F81               	decfsz	(??_pop_out+1)& (0+255),f,b
  2445  001B66  D7FA               	bra	u4277
  2446  001B68  F000               	nop	
  2447  001B6A  0012               	return	
  2448  001B6C                     __end_of_pop_out:
  2449                           	opt stack 0
  2450                           tosu	equ	0xFFF
  2451                           tosh	equ	0xFFE
  2452                           tosl	equ	0xFFD
  2453                           pclath	equ	0xFFA
  2454                           intcon3	equ	0xFF0
  2455                           postinc0	equ	0xFEE
  2456                           wreg	equ	0xFE8
  2457                           status	equ	0xFD8
  2458                           
  2459 ;; *************** function _go_back *****************
  2460 ;; Defined at:
  2461 ;;		line 32 in file "solenoids.c"
  2462 ;; Parameters:    Size  Location     Type
  2463 ;;		None
  2464 ;; Auto vars:     Size  Location     Type
  2465 ;;		None
  2466 ;; Return value:  Size  Location     Type
  2467 ;;                  1    wreg      void 
  2468 ;; Registers used:
  2469 ;;		wreg
  2470 ;; Tracked objects:
  2471 ;;		On entry : 0/0
  2472 ;;		On exit  : 0/0
  2473 ;;		Unchanged: 0/0
  2474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2477 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2478 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2479 ;;Total ram usage:        2 bytes
  2480 ;; Hardware stack levels used:    1
  2481 ;; Hardware stack levels required when called:    5
  2482 ;; This function calls:
  2483 ;;		Nothing
  2484 ;; This function is called by:
  2485 ;;		_solenoids_back
  2486 ;; This function uses a non-reentrant model
  2487 ;;
  2488                           
  2489                           	psect	text10
  2490  001B6C                     __ptext10:
  2491                           	opt stack 0
  2492  001B6C                     _go_back:
  2493                           	opt stack 23
  2494                           
  2495                           ;solenoids.c: 34: LATCbits.LATC0 = 1;
  2496                           
  2497                           ;incstack = 0
  2498  001B6C  808B               	bsf	3979,0,c	;volatile
  2499                           
  2500                           ;solenoids.c: 35: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2501  001B6E  0E0D               	movlw	13
  2502  001B70  0100               	movlb	0	; () banked
  2503  001B72  6F81               	movwf	(??_go_back+1)& (0+255),b
  2504  001B74  0EAF               	movlw	175
  2505  001B76  0100               	movlb	0	; () banked
  2506  001B78  6F80               	movwf	??_go_back& (0+255),b
  2507  001B7A  0EB6               	movlw	182
  2508  001B7C                     u4287:
  2509  001B7C  2EE8               	decfsz	wreg,f,c
  2510  001B7E  D7FE               	bra	u4287
  2511  001B80  2F80               	decfsz	??_go_back& (0+255),f,b
  2512  001B82  D7FC               	bra	u4287
  2513  001B84  2F81               	decfsz	(??_go_back+1)& (0+255),f,b
  2514  001B86  D7FA               	bra	u4287
  2515  001B88  F000               	nop	
  2516  001B8A  0012               	return	
  2517  001B8C                     __end_of_go_back:
  2518                           	opt stack 0
  2519                           tosu	equ	0xFFF
  2520                           tosh	equ	0xFFE
  2521                           tosl	equ	0xFFD
  2522                           pclath	equ	0xFFA
  2523                           intcon3	equ	0xFF0
  2524                           postinc0	equ	0xFEE
  2525                           wreg	equ	0xFE8
  2526                           status	equ	0xFD8
  2527                           
  2528 ;; *************** function _initialization *****************
  2529 ;; Defined at:
  2530 ;;		line 123 in file "operation.c"
  2531 ;; Parameters:    Size  Location     Type
  2532 ;;		None
  2533 ;; Auto vars:     Size  Location     Type
  2534 ;;  i               1   41[BANK0 ] unsigned char 
  2535 ;; Return value:  Size  Location     Type
  2536 ;;                  1    wreg      void 
  2537 ;; Registers used:
  2538 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2539 ;; Tracked objects:
  2540 ;;		On entry : 0/0
  2541 ;;		On exit  : 0/0
  2542 ;;		Unchanged: 0/0
  2543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2545 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2546 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2547 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2548 ;;Total ram usage:        3 bytes
  2549 ;; Hardware stack levels used:    1
  2550 ;; Hardware stack levels required when called:    9
  2551 ;; This function calls:
  2552 ;;		_initLCD
  2553 ;;		_lcdInst
  2554 ;;		_printf
  2555 ;;		_top_rocker_initial
  2556 ;; This function is called by:
  2557 ;;		_startSorting
  2558 ;; This function uses a non-reentrant model
  2559 ;;
  2560                           
  2561                           	psect	text11
  2562  001686                     __ptext11:
  2563                           	opt stack 0
  2564  001686                     _initialization:
  2565                           	opt stack 20
  2566                           
  2567                           ;operation.c: 127: fsm1 = 0;
  2568                           
  2569                           ;incstack = 0
  2570  001686  0E00               	movlw	0
  2571  001688  0100               	movlb	0	; () banked
  2572  00168A  6FCA               	movwf	(_fsm1+1)& (0+255),b
  2573  00168C  0E00               	movlw	0
  2574  00168E  6FC9               	movwf	_fsm1& (0+255),b
  2575                           
  2576                           ; BSR set to: 0
  2577                           ;operation.c: 129: initLCD();
  2578  001690  EC76  F00C         	call	_initLCD	;wreg free
  2579                           
  2580                           ;operation.c: 130: lcdInst(0b10000000);;
  2581  001694  0E80               	movlw	128
  2582  001696  ECF7  F00D         	call	_lcdInst
  2583                           
  2584                           ;operation.c: 131: printf("Initializing");
  2585  00169A  0ECB               	movlw	low STR_13
  2586  00169C  0100               	movlb	0	; () banked
  2587  00169E  6F8E               	movwf	printf@f& (0+255),b
  2588  0016A0  0EFF               	movlw	high STR_13
  2589  0016A2  0100               	movlb	0	; () banked
  2590  0016A4  6F8F               	movwf	(printf@f+1)& (0+255),b
  2591  0016A6  EC09  F000         	call	_printf	;wreg free
  2592                           
  2593                           ;operation.c: 132: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  2594  0016AA  0E00               	movlw	0
  2595  0016AC  0100               	movlb	0	; () banked
  2596  0016AE  6FA9               	movwf	initialization@i& (0+255),b
  2597  0016B0                     l4077:
  2598                           
  2599                           ; BSR set to: 0
  2600  0016B0  0E09               	movlw	9
  2601  0016B2  0100               	movlb	0	; () banked
  2602  0016B4  65A9               	cpfsgt	initialization@i& (0+255),b
  2603  0016B6  D001               	goto	l4081
  2604  0016B8  D010               	goto	l304
  2605  0016BA                     l4081:
  2606                           
  2607                           ; BSR set to: 0
  2608  0016BA  0E02               	movlw	2
  2609  0016BC  0100               	movlb	0	; () banked
  2610  0016BE  6FA8               	movwf	(??_initialization+1)& (0+255),b
  2611  0016C0  0E3F               	movlw	63
  2612  0016C2  0100               	movlb	0	; () banked
  2613  0016C4  6FA7               	movwf	??_initialization& (0+255),b
  2614  0016C6  0E2B               	movlw	43
  2615  0016C8                     u4297:
  2616  0016C8  2EE8               	decfsz	wreg,f,c
  2617  0016CA  D7FE               	bra	u4297
  2618  0016CC  2FA7               	decfsz	??_initialization& (0+255),f,b
  2619  0016CE  D7FC               	bra	u4297
  2620  0016D0  2FA8               	decfsz	(??_initialization+1)& (0+255),f,b
  2621  0016D2  D7FA               	bra	u4297
  2622  0016D4  0100               	movlb	0	; () banked
  2623  0016D6  2BA9               	incf	initialization@i& (0+255),f,b
  2624  0016D8  D7EB               	goto	l4077
  2625  0016DA                     l304:
  2626                           
  2627                           ; BSR set to: 0
  2628                           ;operation.c: 135: LATBbits.LATB0 = 1;
  2629  0016DA  808A               	bsf	3978,0,c	;volatile
  2630                           
  2631                           ;operation.c: 138: LATEbits.LATE0 = 1;
  2632  0016DC  808D               	bsf	3981,0,c	;volatile
  2633                           
  2634                           ; BSR set to: 0
  2635                           ;operation.c: 142: top_rocker_initial();
  2636  0016DE  ECCE  F00B         	call	_top_rocker_initial	;wreg free
  2637  0016E2  0012               	return		;funcret
  2638  0016E4                     __end_of_initialization:
  2639                           	opt stack 0
  2640                           tosu	equ	0xFFF
  2641                           tosh	equ	0xFFE
  2642                           tosl	equ	0xFFD
  2643                           pclath	equ	0xFFA
  2644                           intcon3	equ	0xFF0
  2645                           postinc0	equ	0xFEE
  2646                           wreg	equ	0xFE8
  2647                           status	equ	0xFD8
  2648                           
  2649 ;; *************** function _top_rocker_initial *****************
  2650 ;; Defined at:
  2651 ;;		line 28 in file "top_rocker_fsm.c"
  2652 ;; Parameters:    Size  Location     Type
  2653 ;;		None
  2654 ;; Auto vars:     Size  Location     Type
  2655 ;;  i               1   38[BANK0 ] unsigned char 
  2656 ;; Return value:  Size  Location     Type
  2657 ;;                  1    wreg      void 
  2658 ;; Registers used:
  2659 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2660 ;; Tracked objects:
  2661 ;;		On entry : 0/0
  2662 ;;		On exit  : 0/0
  2663 ;;		Unchanged: 0/0
  2664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2666 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2667 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2668 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2669 ;;Total ram usage:        3 bytes
  2670 ;; Hardware stack levels used:    1
  2671 ;; Hardware stack levels required when called:    8
  2672 ;; This function calls:
  2673 ;;		_initLCD
  2674 ;;		_lcdInst
  2675 ;;		_printf
  2676 ;; This function is called by:
  2677 ;;		_initialization
  2678 ;; This function uses a non-reentrant model
  2679 ;;
  2680                           
  2681                           	psect	text12
  2682  00179C                     __ptext12:
  2683                           	opt stack 0
  2684  00179C                     _top_rocker_initial:
  2685                           	opt stack 20
  2686                           
  2687                           ;top_rocker_fsm.c: 38: lcdInst(0b10000000);;
  2688                           
  2689                           ;incstack = 0
  2690  00179C  0E80               	movlw	128
  2691  00179E  ECF7  F00D         	call	_lcdInst
  2692                           
  2693                           ;top_rocker_fsm.c: 39: initLCD();
  2694  0017A2  EC76  F00C         	call	_initLCD	;wreg free
  2695                           
  2696                           ;top_rocker_fsm.c: 40: printf("top rocker init");
  2697  0017A6  0E46               	movlw	low STR_2
  2698  0017A8  0100               	movlb	0	; () banked
  2699  0017AA  6F8E               	movwf	printf@f& (0+255),b
  2700  0017AC  0EFF               	movlw	high STR_2
  2701  0017AE  0100               	movlb	0	; () banked
  2702  0017B0  6F8F               	movwf	(printf@f+1)& (0+255),b
  2703  0017B2  EC09  F000         	call	_printf	;wreg free
  2704                           
  2705                           ;top_rocker_fsm.c: 41: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000
      +                          .0)));};
  2706  0017B6  0E00               	movlw	0
  2707  0017B8  0100               	movlb	0	; () banked
  2708  0017BA  6FA6               	movwf	top_rocker_initial@i& (0+255),b
  2709  0017BC                     l3905:
  2710                           
  2711                           ; BSR set to: 0
  2712  0017BC  0E09               	movlw	9
  2713  0017BE  0100               	movlb	0	; () banked
  2714  0017C0  65A6               	cpfsgt	top_rocker_initial@i& (0+255),b
  2715  0017C2  D001               	goto	l3909
  2716  0017C4  D010               	goto	l3913
  2717  0017C6                     l3909:
  2718                           
  2719                           ; BSR set to: 0
  2720  0017C6  0E02               	movlw	2
  2721  0017C8  0100               	movlb	0	; () banked
  2722  0017CA  6FA5               	movwf	(??_top_rocker_initial+1)& (0+255),b
  2723  0017CC  0E3F               	movlw	63
  2724  0017CE  0100               	movlb	0	; () banked
  2725  0017D0  6FA4               	movwf	??_top_rocker_initial& (0+255),b
  2726  0017D2  0E2B               	movlw	43
  2727  0017D4                     u4307:
  2728  0017D4  2EE8               	decfsz	wreg,f,c
  2729  0017D6  D7FE               	bra	u4307
  2730  0017D8  2FA4               	decfsz	??_top_rocker_initial& (0+255),f,b
  2731  0017DA  D7FC               	bra	u4307
  2732  0017DC  2FA5               	decfsz	(??_top_rocker_initial+1)& (0+255),f,b
  2733  0017DE  D7FA               	bra	u4307
  2734  0017E0  0100               	movlb	0	; () banked
  2735  0017E2  2BA6               	incf	top_rocker_initial@i& (0+255),f,b
  2736  0017E4  D7EB               	goto	l3905
  2737  0017E6                     l3913:
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;top_rocker_fsm.c: 44: topRockerState = top_rocker_idle;
  2741  0017E6  0E28               	movlw	low _top_rocker_idle
  2742  0017E8  0100               	movlb	0	; () banked
  2743  0017EA  6FCB               	movwf	_topRockerState& (0+255),b
  2744  0017EC  0E14               	movlw	high _top_rocker_idle
  2745  0017EE  0100               	movlb	0	; () banked
  2746  0017F0  6FCC               	movwf	(_topRockerState+1)& (0+255),b
  2747  0017F2  0012               	return	
  2748  0017F4                     __end_of_top_rocker_initial:
  2749                           	opt stack 0
  2750                           tosu	equ	0xFFF
  2751                           tosh	equ	0xFFE
  2752                           tosl	equ	0xFFD
  2753                           pclath	equ	0xFFA
  2754                           intcon3	equ	0xFF0
  2755                           postinc0	equ	0xFEE
  2756                           wreg	equ	0xFE8
  2757                           status	equ	0xFD8
  2758                           
  2759 ;; *************** function _standby *****************
  2760 ;; Defined at:
  2761 ;;		line 29 in file "operation.c"
  2762 ;; Parameters:    Size  Location     Type
  2763 ;;		None
  2764 ;; Auto vars:     Size  Location     Type
  2765 ;;  i               1   40[BANK0 ] unsigned char 
  2766 ;;  i               1   41[BANK0 ] unsigned char 
  2767 ;;  keypress_tem    1   39[BANK0 ] unsigned char 
  2768 ;;  keypress        1   38[BANK0 ] unsigned char 
  2769 ;; Return value:  Size  Location     Type
  2770 ;;                  1    wreg      void 
  2771 ;; Registers used:
  2772 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2773 ;; Tracked objects:
  2774 ;;		On entry : 0/0
  2775 ;;		On exit  : 0/0
  2776 ;;		Unchanged: 0/0
  2777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2779 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2780 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2781 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2782 ;;Total ram usage:        6 bytes
  2783 ;; Hardware stack levels used:    1
  2784 ;; Hardware stack levels required when called:    8
  2785 ;; This function calls:
  2786 ;;		_I2C_Master_Read
  2787 ;;		_I2C_Master_Start
  2788 ;;		_I2C_Master_Stop
  2789 ;;		_I2C_Master_Write
  2790 ;;		_initLCD
  2791 ;;		_lcdInst
  2792 ;;		_printf
  2793 ;; This function is called by:
  2794 ;;		_main
  2795 ;; This function uses a non-reentrant model
  2796 ;;
  2797                           
  2798                           	psect	text13
  2799  000C7C                     __ptext13:
  2800                           	opt stack 0
  2801  000C7C                     _standby:
  2802                           	opt stack 22
  2803                           
  2804                           ;operation.c: 31: (INTCONbits.GIE = 0);
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;incstack = 0
  2808  000C7C  9EF2               	bcf	intcon,7,c	;volatile
  2809                           
  2810                           ;operation.c: 32: lcdInst(0b10000000);;
  2811  000C7E  0E80               	movlw	128
  2812  000C80  ECF7  F00D         	call	_lcdInst
  2813                           
  2814                           ;operation.c: 33: initLCD();
  2815  000C84  EC76  F00C         	call	_initLCD	;wreg free
  2816                           
  2817                           ;operation.c: 34: __nop();
  2818  000C88  F000               	nop	
  2819                           
  2820                           ;operation.c: 35: __nop();
  2821  000C8A  F000               	nop	
  2822  000C8C                     l277:
  2823                           
  2824                           ;operation.c: 39: I2C_Master_Start();
  2825  000C8C  EC14  F00E         	call	_I2C_Master_Start	;wreg free
  2826                           
  2827                           ;operation.c: 40: I2C_Master_Write(0b11010000);
  2828  000C90  0E00               	movlw	0
  2829  000C92  0100               	movlb	0	; () banked
  2830  000C94  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2831  000C96  0ED0               	movlw	208
  2832  000C98  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  2833  000C9A  EC0B  F00E         	call	_I2C_Master_Write	;wreg free
  2834                           
  2835                           ;operation.c: 41: I2C_Master_Write(0x00);
  2836  000C9E  0E00               	movlw	0
  2837  000CA0  0100               	movlb	0	; () banked
  2838  000CA2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2839  000CA4  0E00               	movlw	0
  2840  000CA6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  2841  000CA8  EC0B  F00E         	call	_I2C_Master_Write	;wreg free
  2842                           
  2843                           ;operation.c: 42: I2C_Master_Stop();
  2844  000CAC  EC10  F00E         	call	_I2C_Master_Stop	;wreg free
  2845                           
  2846                           ;operation.c: 45: I2C_Master_Start();
  2847  000CB0  EC14  F00E         	call	_I2C_Master_Start	;wreg free
  2848                           
  2849                           ;operation.c: 46: I2C_Master_Write(0b11010001);
  2850  000CB4  0E00               	movlw	0
  2851  000CB6  0100               	movlb	0	; () banked
  2852  000CB8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2853  000CBA  0ED1               	movlw	209
  2854  000CBC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  2855  000CBE  EC0B  F00E         	call	_I2C_Master_Write	;wreg free
  2856                           
  2857                           ;operation.c: 47: for(unsigned char i=0;i<0x06;i++){
  2858  000CC2  0E00               	movlw	0
  2859  000CC4  0100               	movlb	0	; () banked
  2860  000CC6  6FA9               	movwf	standby@i& (0+255),b
  2861  000CC8                     l4171:
  2862                           
  2863                           ; BSR set to: 0
  2864  000CC8  0E05               	movlw	5
  2865  000CCA  0100               	movlb	0	; () banked
  2866  000CCC  65A9               	cpfsgt	standby@i& (0+255),b
  2867  000CCE  D001               	goto	l4175
  2868  000CD0  D010               	goto	l4181
  2869  000CD2                     l4175:
  2870                           
  2871                           ; BSR set to: 0
  2872                           ;operation.c: 48: time[i] = I2C_Master_Read(1);
  2873  000CD2  0100               	movlb	0	; () banked
  2874  000CD4  51A9               	movf	standby@i& (0+255),w,b
  2875  000CD6  0D01               	mullw	1
  2876  000CD8  0EB2               	movlw	low _time
  2877  000CDA  24F3               	addwf	prodl,w,c
  2878  000CDC  6ED9               	movwf	fsr2l,c
  2879  000CDE  0E00               	movlw	high _time
  2880  000CE0  20F4               	addwfc	prodh,w,c
  2881  000CE2  6EDA               	movwf	fsr2h,c
  2882  000CE4  0E01               	movlw	1
  2883  000CE6  EC34  F00D         	call	_I2C_Master_Read
  2884  000CEA  6EDF               	movwf	indf2,c
  2885  000CEC  0100               	movlb	0	; () banked
  2886  000CEE  2BA9               	incf	standby@i& (0+255),f,b
  2887  000CF0  D7EB               	goto	l4171
  2888  000CF2                     l4181:
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;operation.c: 49: }
  2892                           ;operation.c: 50: time[6] = I2C_Master_Read(0);
  2893  000CF2  0E00               	movlw	0
  2894  000CF4  EC34  F00D         	call	_I2C_Master_Read
  2895  000CF8  0100               	movlb	0	; () banked
  2896  000CFA  6FB8               	movwf	(_time+6)& (0+255),b
  2897                           
  2898                           ;operation.c: 51: I2C_Master_Stop();
  2899  000CFC  EC10  F00E         	call	_I2C_Master_Stop	;wreg free
  2900                           
  2901                           ;operation.c: 53: lcdInst(0b10000000);;
  2902  000D00  0E80               	movlw	128
  2903  000D02  ECF7  F00D         	call	_lcdInst
  2904                           
  2905                           ;operation.c: 54: printf("%02x/%02x   ",time[5],time[4]);
  2906  000D06  0EBE               	movlw	low STR_8
  2907  000D08  0100               	movlb	0	; () banked
  2908  000D0A  6F8E               	movwf	printf@f& (0+255),b
  2909  000D0C  0EFF               	movlw	high STR_8
  2910  000D0E  0100               	movlb	0	; () banked
  2911  000D10  6F8F               	movwf	(printf@f+1)& (0+255),b
  2912  000D12  C0B7  F090         	movff	_time+5,?_printf+2
  2913  000D16  0100               	movlb	0	; () banked
  2914  000D18  6B91               	clrf	(?_printf+3)& (0+255),b
  2915  000D1A  C0B6  F092         	movff	_time+4,?_printf+4
  2916  000D1E  0100               	movlb	0	; () banked
  2917  000D20  6B93               	clrf	(?_printf+5)& (0+255),b
  2918  000D22  EC09  F000         	call	_printf	;wreg free
  2919                           
  2920                           ;operation.c: 55: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  2921  000D26  0E74               	movlw	low STR_9
  2922  000D28  0100               	movlb	0	; () banked
  2923  000D2A  6F8E               	movwf	printf@f& (0+255),b
  2924  000D2C  0EFF               	movlw	high STR_9
  2925  000D2E  0100               	movlb	0	; () banked
  2926  000D30  6F8F               	movwf	(printf@f+1)& (0+255),b
  2927  000D32  C0B4  F090         	movff	_time+2,?_printf+2
  2928  000D36  0100               	movlb	0	; () banked
  2929  000D38  6B91               	clrf	(?_printf+3)& (0+255),b
  2930  000D3A  C0B3  F092         	movff	_time+1,?_printf+4
  2931  000D3E  0100               	movlb	0	; () banked
  2932  000D40  6B93               	clrf	(?_printf+5)& (0+255),b
  2933  000D42  C0B2  F094         	movff	_time,?_printf+6
  2934  000D46  0100               	movlb	0	; () banked
  2935  000D48  6B95               	clrf	(?_printf+7)& (0+255),b
  2936  000D4A  EC09  F000         	call	_printf	;wreg free
  2937                           
  2938                           ;operation.c: 57: lcdInst(0b11000000);;
  2939  000D4E  0EC0               	movlw	192
  2940  000D50  ECF7  F00D         	call	_lcdInst
  2941                           
  2942                           ;operation.c: 58: printf("Press # to Start");
  2943  000D54  0E24               	movlw	low STR_10
  2944  000D56  0100               	movlb	0	; () banked
  2945  000D58  6F8E               	movwf	printf@f& (0+255),b
  2946  000D5A  0EFF               	movlw	high STR_10
  2947  000D5C  0100               	movlb	0	; () banked
  2948  000D5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  2949  000D60  EC09  F000         	call	_printf	;wreg free
  2950                           
  2951                           ;operation.c: 61: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2952  000D64  3881               	swapf	3969,w,c	;volatile
  2953  000D66  0B0F               	andlw	15
  2954  000D68  0B0F               	andlw	15
  2955  000D6A  0100               	movlb	0	; () banked
  2956  000D6C  6FA6               	movwf	standby@keypress& (0+255),b
  2957  000D6E                     l280:
  2958  000D6E  B281               	btfsc	3969,1,c	;volatile
  2959  000D70  D7FE               	goto	l280
  2960                           
  2961                           ;operation.c: 64: }
  2962                           ;operation.c: 65: unsigned char keypress_temp = keys[keypress];
  2963  000D72  0100               	movlb	0	; () banked
  2964  000D74  51A6               	movf	standby@keypress& (0+255),w,b
  2965  000D76  0D01               	mullw	1
  2966  000D78  0E8D               	movlw	low _keys
  2967  000D7A  24F3               	addwf	prodl,w,c
  2968  000D7C  6EF6               	movwf	tblptrl,c
  2969  000D7E  0EFE               	movlw	high _keys
  2970  000D80  20F4               	addwfc	prodh,w,c
  2971  000D82  6EF7               	movwf	tblptrh,c
  2972  000D84                     	if	1	;There are 3 active tblptr bytes
  2973  000D84  6AF8               	clrf	tblptru,c
  2974  000D86  0E00               	movlw	low (__mediumconst shr (0+16))
  2975  000D88  22F8               	addwfc	tblptru,f,c
  2976  000D8A                     	endif
  2977  000D8A  0008               	tblrd		*
  2978  000D8C  CFF5 F0A7          	movff	tablat,standby@keypress_temp
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;operation.c: 67: if(keypress_temp == '#'){
  2982  000D90  0E23               	movlw	35
  2983  000D92  0100               	movlb	0	; () banked
  2984  000D94  19A7               	xorwf	standby@keypress_temp& (0+255),w,b
  2985  000D96  A4D8               	btfss	status,2,c
  2986  000D98  D007               	goto	l4197
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;operation.c: 68: Start_time[2] = time[2];
  2990  000D9A  C0B4  F0C3         	movff	_time+2,_Start_time+2
  2991                           
  2992                           ;operation.c: 69: Start_time[1] = time[1];
  2993  000D9E  C0B3  F0C2         	movff	_time+1,_Start_time+1
  2994                           
  2995                           ;operation.c: 70: Start_time[0] = time[0];
  2996  000DA2  C0B2  F0C1         	movff	_time,_Start_time
  2997                           
  2998                           ;operation.c: 71: break;
  2999  000DA6  0012               	return	
  3000  000DA8                     l4197:
  3001                           
  3002                           ; BSR set to: 0
  3003                           ;operation.c: 72: }
  3004                           ;operation.c: 73: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)))
      +                          ;};
  3005  000DA8  0E00               	movlw	0
  3006  000DAA  0100               	movlb	0	; () banked
  3007  000DAC  6FA8               	movwf	standby@i_680& (0+255),b
  3008  000DAE                     l4199:
  3009                           
  3010                           ; BSR set to: 0
  3011  000DAE  0E09               	movlw	9
  3012  000DB0  0100               	movlb	0	; () banked
  3013  000DB2  65A8               	cpfsgt	standby@i_680& (0+255),b
  3014  000DB4  D001               	goto	l4203
  3015  000DB6  D76A               	goto	l277
  3016  000DB8                     l4203:
  3017                           
  3018                           ; BSR set to: 0
  3019  000DB8  0E02               	movlw	2
  3020  000DBA  0100               	movlb	0	; () banked
  3021  000DBC  6FA5               	movwf	(??_standby+1)& (0+255),b
  3022  000DBE  0E3F               	movlw	63
  3023  000DC0  0100               	movlb	0	; () banked
  3024  000DC2  6FA4               	movwf	??_standby& (0+255),b
  3025  000DC4  0E2B               	movlw	43
  3026  000DC6                     u4317:
  3027  000DC6  2EE8               	decfsz	wreg,f,c
  3028  000DC8  D7FE               	bra	u4317
  3029  000DCA  2FA4               	decfsz	??_standby& (0+255),f,b
  3030  000DCC  D7FC               	bra	u4317
  3031  000DCE  2FA5               	decfsz	(??_standby+1)& (0+255),f,b
  3032  000DD0  D7FA               	bra	u4317
  3033  000DD2  0100               	movlb	0	; () banked
  3034  000DD4  2BA8               	incf	standby@i_680& (0+255),f,b
  3035  000DD6  D7EB               	goto	l4199
  3036  000DD8                     __end_of_standby:
  3037                           	opt stack 0
  3038                           tosu	equ	0xFFF
  3039                           tosh	equ	0xFFE
  3040                           tosl	equ	0xFFD
  3041                           pclath	equ	0xFFA
  3042                           tblptru	equ	0xFF8
  3043                           tblptrh	equ	0xFF7
  3044                           tblptrl	equ	0xFF6
  3045                           tablat	equ	0xFF5
  3046                           prodh	equ	0xFF4
  3047                           prodl	equ	0xFF3
  3048                           intcon	equ	0xFF2
  3049                           intcon3	equ	0xFF0
  3050                           postinc0	equ	0xFEE
  3051                           wreg	equ	0xFE8
  3052                           indf2	equ	0xFDF
  3053                           fsr2h	equ	0xFDA
  3054                           fsr2l	equ	0xFD9
  3055                           status	equ	0xFD8
  3056                           
  3057 ;; *************** function _set_time *****************
  3058 ;; Defined at:
  3059 ;;		line 70 in file "main.c"
  3060 ;; Parameters:    Size  Location     Type
  3061 ;;		None
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;  i               1    3[BANK0 ] unsigned char 
  3064 ;; Return value:  Size  Location     Type
  3065 ;;                  1    wreg      void 
  3066 ;; Registers used:
  3067 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3068 ;; Tracked objects:
  3069 ;;		On entry : 0/0
  3070 ;;		On exit  : 0/0
  3071 ;;		Unchanged: 0/0
  3072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3074 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3076 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3077 ;;Total ram usage:        1 bytes
  3078 ;; Hardware stack levels used:    1
  3079 ;; Hardware stack levels required when called:    7
  3080 ;; This function calls:
  3081 ;;		_I2C_Master_Start
  3082 ;;		_I2C_Master_Stop
  3083 ;;		_I2C_Master_Write
  3084 ;; This function is called by:
  3085 ;;		_main
  3086 ;; This function uses a non-reentrant model
  3087 ;;
  3088                           
  3089                           	psect	text14
  3090  001562                     __ptext14:
  3091                           	opt stack 0
  3092  001562                     _set_time:
  3093                           	opt stack 23
  3094                           
  3095                           ;main.c: 71: I2C_Master_Start();
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;incstack = 0
  3099  001562  EC14  F00E         	call	_I2C_Master_Start	;wreg free
  3100                           
  3101                           ;main.c: 72: I2C_Master_Write(0b11010000);
  3102  001566  0E00               	movlw	0
  3103  001568  0100               	movlb	0	; () banked
  3104  00156A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3105  00156C  0ED0               	movlw	208
  3106  00156E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3107  001570  EC0B  F00E         	call	_I2C_Master_Write	;wreg free
  3108                           
  3109                           ;main.c: 73: I2C_Master_Write(0x00);
  3110  001574  0E00               	movlw	0
  3111  001576  0100               	movlb	0	; () banked
  3112  001578  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3113  00157A  0E00               	movlw	0
  3114  00157C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3115  00157E  EC0B  F00E         	call	_I2C_Master_Write	;wreg free
  3116                           
  3117                           ;main.c: 74: for(char i=0; i<7; i++){
  3118  001582  0E00               	movlw	0
  3119  001584  0100               	movlb	0	; () banked
  3120  001586  6F83               	movwf	set_time@i& (0+255),b
  3121  001588                     l4359:
  3122                           
  3123                           ; BSR set to: 0
  3124  001588  0E06               	movlw	6
  3125  00158A  0100               	movlb	0	; () banked
  3126  00158C  6583               	cpfsgt	set_time@i& (0+255),b
  3127  00158E  D001               	goto	l4363
  3128  001590  D016               	goto	l4369
  3129  001592                     l4363:
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;main.c: 75: I2C_Master_Write(real_time[i]);
  3133  001592  0100               	movlb	0	; () banked
  3134  001594  5183               	movf	set_time@i& (0+255),w,b
  3135  001596  0D01               	mullw	1
  3136  001598  0EB0               	movlw	low _real_time
  3137  00159A  24F3               	addwf	prodl,w,c
  3138  00159C  6EF6               	movwf	tblptrl,c
  3139  00159E  0EFE               	movlw	high _real_time
  3140  0015A0  20F4               	addwfc	prodh,w,c
  3141  0015A2  6EF7               	movwf	tblptrh,c
  3142  0015A4                     	if	1	;There are 3 active tblptr bytes
  3143  0015A4  6AF8               	clrf	tblptru,c
  3144  0015A6  0E00               	movlw	low (__mediumconst shr (0+16))
  3145  0015A8  22F8               	addwfc	tblptru,f,c
  3146  0015AA                     	endif
  3147  0015AA  0008               	tblrd		*
  3148  0015AC  50F5               	movf	tablat,w,c
  3149  0015AE  0100               	movlb	0	; () banked
  3150  0015B0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3151  0015B2  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  3152  0015B4  EC0B  F00E         	call	_I2C_Master_Write	;wreg free
  3153  0015B8  0100               	movlb	0	; () banked
  3154  0015BA  2B83               	incf	set_time@i& (0+255),f,b
  3155  0015BC  D7E5               	goto	l4359
  3156  0015BE                     l4369:
  3157                           
  3158                           ; BSR set to: 0
  3159                           ;main.c: 76: }
  3160                           ;main.c: 77: I2C_Master_Stop();
  3161  0015BE  EC10  F00E         	call	_I2C_Master_Stop	;wreg free
  3162  0015C2  0012               	return		;funcret
  3163  0015C4                     __end_of_set_time:
  3164                           	opt stack 0
  3165                           tosu	equ	0xFFF
  3166                           tosh	equ	0xFFE
  3167                           tosl	equ	0xFFD
  3168                           pclath	equ	0xFFA
  3169                           tblptru	equ	0xFF8
  3170                           tblptrh	equ	0xFF7
  3171                           tblptrl	equ	0xFF6
  3172                           tablat	equ	0xFF5
  3173                           prodh	equ	0xFF4
  3174                           prodl	equ	0xFF3
  3175                           intcon	equ	0xFF2
  3176                           intcon3	equ	0xFF0
  3177                           postinc0	equ	0xFEE
  3178                           wreg	equ	0xFE8
  3179                           indf2	equ	0xFDF
  3180                           fsr2h	equ	0xFDA
  3181                           fsr2l	equ	0xFD9
  3182                           status	equ	0xFD8
  3183                           
  3184 ;; *************** function _results *****************
  3185 ;; Defined at:
  3186 ;;		line 197 in file "operation.c"
  3187 ;; Parameters:    Size  Location     Type
  3188 ;;		None
  3189 ;; Auto vars:     Size  Location     Type
  3190 ;;  i               1   42[BANK0 ] unsigned char 
  3191 ;;  i               1   41[BANK0 ] unsigned char 
  3192 ;;  i               1   40[BANK0 ] unsigned char 
  3193 ;;  keypress_tem    1   39[BANK0 ] unsigned char 
  3194 ;;  keypress        1   38[BANK0 ] unsigned char 
  3195 ;; Return value:  Size  Location     Type
  3196 ;;                  1    wreg      void 
  3197 ;; Registers used:
  3198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3199 ;; Tracked objects:
  3200 ;;		On entry : 0/0
  3201 ;;		On exit  : 0/0
  3202 ;;		Unchanged: 0/0
  3203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3205 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3206 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3207 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3208 ;;Total ram usage:        7 bytes
  3209 ;; Hardware stack levels used:    1
  3210 ;; Hardware stack levels required when called:    8
  3211 ;; This function calls:
  3212 ;;		_initLCD
  3213 ;;		_lcdInst
  3214 ;;		_printf
  3215 ;; This function is called by:
  3216 ;;		_main
  3217 ;; This function uses a non-reentrant model
  3218 ;;
  3219                           
  3220                           	psect	text15
  3221  000DD8                     __ptext15:
  3222                           	opt stack 0
  3223  000DD8                     _results:
  3224                           	opt stack 22
  3225  000DD8                     
  3226                           ;operation.c: 200: lcdInst(0b10000000);;
  3227  000DD8  0E80               	movlw	128
  3228  000DDA  ECF7  F00D         	call	_lcdInst
  3229                           
  3230                           ;operation.c: 201: initLCD();
  3231  000DDE  EC76  F00C         	call	_initLCD	;wreg free
  3232                           
  3233                           ;operation.c: 202: __nop();
  3234  000DE2  F000               	nop	
  3235                           
  3236                           ;operation.c: 203: __nop();
  3237  000DE4  F000               	nop	
  3238                           
  3239                           ;operation.c: 205: printf("A:Total   B:Pop ");
  3240  000DE6  0EF1               	movlw	low STR_14
  3241  000DE8  0100               	movlb	0	; () banked
  3242  000DEA  6F8E               	movwf	printf@f& (0+255),b
  3243  000DEC  0EFE               	movlw	high STR_14
  3244  000DEE  0100               	movlb	0	; () banked
  3245  000DF0  6F8F               	movwf	(printf@f+1)& (0+255),b
  3246  000DF2  EC09  F000         	call	_printf	;wreg free
  3247                           
  3248                           ;operation.c: 206: lcdInst(0b11000000);;
  3249  000DF6  0EC0               	movlw	192
  3250  000DF8  ECF7  F00D         	call	_lcdInst
  3251                           
  3252                           ;operation.c: 207: printf("C:Tin     D:Time");
  3253  000DFC  0E02               	movlw	low STR_15
  3254  000DFE  0100               	movlb	0	; () banked
  3255  000E00  6F8E               	movwf	printf@f& (0+255),b
  3256  000E02  0EFF               	movlw	high STR_15
  3257  000E04  0100               	movlb	0	; () banked
  3258  000E06  6F8F               	movwf	(printf@f+1)& (0+255),b
  3259  000E08  EC09  F000         	call	_printf	;wreg free
  3260                           
  3261                           ;operation.c: 208: (INTCONbits.GIE = 1);
  3262  000E0C  8EF2               	bsf	intcon,7,c	;volatile
  3263                           
  3264                           ;operation.c: 209: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  3265  000E0E  0E00               	movlw	0
  3266  000E10  0100               	movlb	0	; () banked
  3267  000E12  6FA8               	movwf	results@i& (0+255),b
  3268  000E14                     l4309:
  3269                           
  3270                           ; BSR set to: 0
  3271  000E14  0E09               	movlw	9
  3272  000E16  0100               	movlb	0	; () banked
  3273  000E18  65A8               	cpfsgt	results@i& (0+255),b
  3274  000E1A  D001               	goto	l4313
  3275  000E1C  D010               	goto	l4317
  3276  000E1E                     l4313:
  3277                           
  3278                           ; BSR set to: 0
  3279  000E1E  0E02               	movlw	2
  3280  000E20  0100               	movlb	0	; () banked
  3281  000E22  6FA5               	movwf	(??_results+1)& (0+255),b
  3282  000E24  0E3F               	movlw	63
  3283  000E26  0100               	movlb	0	; () banked
  3284  000E28  6FA4               	movwf	??_results& (0+255),b
  3285  000E2A  0E2B               	movlw	43
  3286  000E2C                     u4327:
  3287  000E2C  2EE8               	decfsz	wreg,f,c
  3288  000E2E  D7FE               	bra	u4327
  3289  000E30  2FA4               	decfsz	??_results& (0+255),f,b
  3290  000E32  D7FC               	bra	u4327
  3291  000E34  2FA5               	decfsz	(??_results+1)& (0+255),f,b
  3292  000E36  D7FA               	bra	u4327
  3293  000E38  0100               	movlb	0	; () banked
  3294  000E3A  2BA8               	incf	results@i& (0+255),f,b
  3295  000E3C  D7EB               	goto	l4309
  3296  000E3E                     l4317:
  3297                           
  3298                           ; BSR set to: 0
  3299                           ;operation.c: 210: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  3300  000E3E  0E00               	movlw	0
  3301  000E40  0100               	movlb	0	; () banked
  3302  000E42  6FA9               	movwf	results@i_710& (0+255),b
  3303  000E44                     l4319:
  3304                           
  3305                           ; BSR set to: 0
  3306  000E44  0E09               	movlw	9
  3307  000E46  0100               	movlb	0	; () banked
  3308  000E48  65A9               	cpfsgt	results@i_710& (0+255),b
  3309  000E4A  D001               	goto	l4323
  3310  000E4C  D010               	goto	l318
  3311  000E4E                     l4323:
  3312                           
  3313                           ; BSR set to: 0
  3314  000E4E  0E02               	movlw	2
  3315  000E50  0100               	movlb	0	; () banked
  3316  000E52  6FA5               	movwf	(??_results+1)& (0+255),b
  3317  000E54  0E3F               	movlw	63
  3318  000E56  0100               	movlb	0	; () banked
  3319  000E58  6FA4               	movwf	??_results& (0+255),b
  3320  000E5A  0E2B               	movlw	43
  3321  000E5C                     u4337:
  3322  000E5C  2EE8               	decfsz	wreg,f,c
  3323  000E5E  D7FE               	bra	u4337
  3324  000E60  2FA4               	decfsz	??_results& (0+255),f,b
  3325  000E62  D7FC               	bra	u4337
  3326  000E64  2FA5               	decfsz	(??_results+1)& (0+255),f,b
  3327  000E66  D7FA               	bra	u4337
  3328  000E68  0100               	movlb	0	; () banked
  3329  000E6A  2BA9               	incf	results@i_710& (0+255),f,b
  3330  000E6C  D7EB               	goto	l4319
  3331  000E6E                     l318:
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;operation.c: 211: (INTCONbits.GIE = 0);
  3335  000E6E  9EF2               	bcf	intcon,7,c	;volatile
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;operation.c: 212: initLCD();
  3339  000E70  EC76  F00C         	call	_initLCD	;wreg free
  3340                           
  3341                           ;operation.c: 213: __nop();
  3342  000E74  F000               	nop	
  3343                           
  3344                           ;operation.c: 214: __nop();
  3345  000E76  F000               	nop	
  3346                           
  3347                           ;operation.c: 215: printf("Press 0 to Reset");
  3348  000E78  0E13               	movlw	low STR_16
  3349  000E7A  0100               	movlb	0	; () banked
  3350  000E7C  6F8E               	movwf	printf@f& (0+255),b
  3351  000E7E  0EFF               	movlw	high STR_16
  3352  000E80  0100               	movlb	0	; () banked
  3353  000E82  6F8F               	movwf	(printf@f+1)& (0+255),b
  3354  000E84  EC09  F000         	call	_printf	;wreg free
  3355                           
  3356                           ;operation.c: 216: (INTCONbits.GIE = 1);
  3357  000E88  8EF2               	bsf	intcon,7,c	;volatile
  3358                           
  3359                           ;operation.c: 217: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  3360  000E8A  0E00               	movlw	0
  3361  000E8C  0100               	movlb	0	; () banked
  3362  000E8E  6FAA               	movwf	results@i_712& (0+255),b
  3363  000E90                     l4339:
  3364                           
  3365                           ; BSR set to: 0
  3366  000E90  0E09               	movlw	9
  3367  000E92  0100               	movlb	0	; () banked
  3368  000E94  65AA               	cpfsgt	results@i_712& (0+255),b
  3369  000E96  D001               	goto	l4343
  3370  000E98  D010               	goto	l320
  3371  000E9A                     l4343:
  3372                           
  3373                           ; BSR set to: 0
  3374  000E9A  0E02               	movlw	2
  3375  000E9C  0100               	movlb	0	; () banked
  3376  000E9E  6FA5               	movwf	(??_results+1)& (0+255),b
  3377  000EA0  0E3F               	movlw	63
  3378  000EA2  0100               	movlb	0	; () banked
  3379  000EA4  6FA4               	movwf	??_results& (0+255),b
  3380  000EA6  0E2B               	movlw	43
  3381  000EA8                     u4347:
  3382  000EA8  2EE8               	decfsz	wreg,f,c
  3383  000EAA  D7FE               	bra	u4347
  3384  000EAC  2FA4               	decfsz	??_results& (0+255),f,b
  3385  000EAE  D7FC               	bra	u4347
  3386  000EB0  2FA5               	decfsz	(??_results+1)& (0+255),f,b
  3387  000EB2  D7FA               	bra	u4347
  3388  000EB4  0100               	movlb	0	; () banked
  3389  000EB6  2BAA               	incf	results@i_712& (0+255),f,b
  3390  000EB8  D7EB               	goto	l4339
  3391  000EBA                     l320:
  3392                           
  3393                           ; BSR set to: 0
  3394                           ;operation.c: 218: (INTCONbits.GIE = 0);
  3395  000EBA  9EF2               	bcf	intcon,7,c	;volatile
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;operation.c: 221: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3399  000EBC  3881               	swapf	3969,w,c	;volatile
  3400  000EBE  0B0F               	andlw	15
  3401  000EC0  0B0F               	andlw	15
  3402  000EC2  0100               	movlb	0	; () banked
  3403  000EC4  6FA6               	movwf	results@keypress& (0+255),b
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;operation.c: 222: unsigned char keypress_temp = keys[keypress];
  3407  000EC6  0100               	movlb	0	; () banked
  3408  000EC8  51A6               	movf	results@keypress& (0+255),w,b
  3409  000ECA  0D01               	mullw	1
  3410  000ECC  0E8D               	movlw	low _keys
  3411  000ECE  24F3               	addwf	prodl,w,c
  3412  000ED0  6EF6               	movwf	tblptrl,c
  3413  000ED2  0EFE               	movlw	high _keys
  3414  000ED4  20F4               	addwfc	prodh,w,c
  3415  000ED6  6EF7               	movwf	tblptrh,c
  3416  000ED8                     	if	1	;There are 3 active tblptr bytes
  3417  000ED8  6AF8               	clrf	tblptru,c
  3418  000EDA  0E00               	movlw	low (__mediumconst shr (0+16))
  3419  000EDC  22F8               	addwfc	tblptru,f,c
  3420  000EDE                     	endif
  3421  000EDE  0008               	tblrd		*
  3422  000EE0  CFF5 F0A7          	movff	tablat,results@keypress_temp
  3423                           
  3424                           ; BSR set to: 0
  3425                           ;operation.c: 224: if(keypress_temp == '0'){
  3426  000EE4  0E30               	movlw	48
  3427  000EE6  0100               	movlb	0	; () banked
  3428  000EE8  19A7               	xorwf	results@keypress_temp& (0+255),w,b
  3429  000EEA  B4D8               	btfsc	status,2,c
  3430  000EEC  0012               	return	
  3431  000EEE  D774               	goto	l4295
  3432  000EF0                     __end_of_results:
  3433                           	opt stack 0
  3434                           tosu	equ	0xFFF
  3435                           tosh	equ	0xFFE
  3436                           tosl	equ	0xFFD
  3437                           pclath	equ	0xFFA
  3438                           tblptru	equ	0xFF8
  3439                           tblptrh	equ	0xFF7
  3440                           tblptrl	equ	0xFF6
  3441                           tablat	equ	0xFF5
  3442                           prodh	equ	0xFF4
  3443                           prodl	equ	0xFF3
  3444                           intcon	equ	0xFF2
  3445                           intcon3	equ	0xFF0
  3446                           postinc0	equ	0xFEE
  3447                           wreg	equ	0xFE8
  3448                           indf2	equ	0xFDF
  3449                           fsr2h	equ	0xFDA
  3450                           fsr2l	equ	0xFD9
  3451                           status	equ	0xFD8
  3452                           
  3453 ;; *************** function _printf *****************
  3454 ;; Defined at:
  3455 ;;		line 464 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  3458 ;;		 -> STR_22(13), STR_21(15), STR_20(15), STR_19(17), 
  3459 ;;		 -> STR_18(22), STR_17(19), STR_16(17), STR_15(17), 
  3460 ;;		 -> STR_14(17), STR_13(13), STR_12(9), STR_11(5), 
  3461 ;;		 -> STR_10(17), STR_9(15), STR_8(13), STR_7(15), 
  3462 ;;		 -> STR_6(15), STR_5(15), STR_4(14), STR_3(12), 
  3463 ;;		 -> STR_2(16), STR_1(2), 
  3464 ;; Auto vars:     Size  Location     Type
  3465 ;;  idx             1   26[BANK0 ] unsigned char 
  3466 ;;  tmpval          4    0        struct .
  3467 ;;  cp              3    0        PTR const unsigned char 
  3468 ;;  width           2   33[BANK0 ] int 
  3469 ;;  val             2   30[BANK0 ] unsigned int 
  3470 ;;  ap              2   27[BANK0 ] PTR void [1]
  3471 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3472 ;;  len             2    0        unsigned int 
  3473 ;;  c               1   35[BANK0 ] char 
  3474 ;;  flag            1   32[BANK0 ] unsigned char 
  3475 ;;  prec            1   29[BANK0 ] char 
  3476 ;; Return value:  Size  Location     Type
  3477 ;;                  2   14[BANK0 ] int 
  3478 ;; Registers used:
  3479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3480 ;; Tracked objects:
  3481 ;;		On entry : 0/0
  3482 ;;		On exit  : 0/0
  3483 ;;		Unchanged: 0/0
  3484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3485 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3486 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3487 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3488 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3489 ;;Total ram usage:       22 bytes
  3490 ;; Hardware stack levels used:    1
  3491 ;; Hardware stack levels required when called:    7
  3492 ;; This function calls:
  3493 ;;		___lwdiv
  3494 ;;		___lwmod
  3495 ;;		___wmul
  3496 ;;		_isdigit
  3497 ;;		_putch
  3498 ;; This function is called by:
  3499 ;;		_top_rocker_initial
  3500 ;;		_top_rocker_idle
  3501 ;;		_solenoids_out
  3502 ;;		_solenoids_back
  3503 ;;		_top_rocker_release
  3504 ;;		_top_rocker_restore
  3505 ;;		_standby
  3506 ;;		_startSorting
  3507 ;;		_initialization
  3508 ;;		_results
  3509 ;; This function uses a non-reentrant model
  3510 ;;
  3511                           
  3512                           	psect	text16
  3513  000012                     __ptext16:
  3514                           	opt stack 0
  3515  000012                     _printf:
  3516                           	opt stack 21
  3517                           
  3518                           ;doprnt.c: 466: va_list ap;
  3519                           ;doprnt.c: 499: signed char c;
  3520                           ;doprnt.c: 501: int width;
  3521                           ;doprnt.c: 506: signed char prec;
  3522                           ;doprnt.c: 508: unsigned char flag;
  3523                           ;doprnt.c: 523: union {
  3524                           ;doprnt.c: 524: unsigned long vd;
  3525                           ;doprnt.c: 525: double integ;
  3526                           ;doprnt.c: 526: } tmpval;
  3527                           ;doprnt.c: 528: unsigned int val;
  3528                           ;doprnt.c: 529: unsigned len;
  3529                           ;doprnt.c: 530: const char * cp;
  3530                           ;doprnt.c: 533: *ap = __va_start();
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;incstack = 0
  3534  000012  0E90               	movlw	low (?_printf+2)
  3535  000014  0100               	movlb	0	; () banked
  3536  000016  6F9B               	movwf	printf@ap& (0+255),b
  3537  000018  0E00               	movlw	high (?_printf+2)
  3538  00001A  0100               	movlb	0	; () banked
  3539  00001C  6F9C               	movwf	(printf@ap+1)& (0+255),b
  3540                           
  3541                           ;doprnt.c: 536: while(c = *f++) {
  3542  00001E  D1D8               	goto	l3881
  3543  000020                     l3755:
  3544                           
  3545                           ; BSR set to: 0
  3546                           ;doprnt.c: 538: if(c != '%')
  3547  000020  0E25               	movlw	37
  3548  000022  0100               	movlb	0	; () banked
  3549  000024  19A3               	xorwf	printf@c& (0+255),w,b
  3550  000026  B4D8               	btfsc	status,2,c
  3551  000028  D005               	goto	l3759
  3552                           
  3553                           ; BSR set to: 0
  3554                           ;doprnt.c: 540: {
  3555                           ;doprnt.c: 541: (putch(c) );
  3556  00002A  0100               	movlb	0	; () banked
  3557  00002C  51A3               	movf	printf@c& (0+255),w,b
  3558  00002E  ECEF  F00D         	call	_putch
  3559                           
  3560                           ;doprnt.c: 542: continue;
  3561  000032  D1CE               	goto	l3881
  3562  000034                     l3759:
  3563                           
  3564                           ;doprnt.c: 543: }
  3565                           ;doprnt.c: 546: width = 0;
  3566  000034  0E00               	movlw	0
  3567  000036  0100               	movlb	0	; () banked
  3568  000038  6FA2               	movwf	(printf@width+1)& (0+255),b
  3569  00003A  0E00               	movlw	0
  3570  00003C  6FA1               	movwf	printf@width& (0+255),b
  3571                           
  3572                           ;doprnt.c: 548: flag = 0;
  3573  00003E  0E00               	movlw	0
  3574  000040  0100               	movlb	0	; () banked
  3575  000042  6FA0               	movwf	printf@flag& (0+255),b
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;doprnt.c: 551: switch(*f) {
  3579                           
  3580                           ;doprnt.c: 550: for(;;) {
  3581  000044  D005               	goto	l3765
  3582  000046                     l3761:
  3583                           
  3584                           ;doprnt.c: 580: flag |= 0x04;
  3585  000046  0100               	movlb	0	; () banked
  3586  000048  85A0               	bsf	printf@flag& (0+255),2,b
  3587                           
  3588                           ;doprnt.c: 581: f++;
  3589  00004A  0100               	movlb	0	; () banked
  3590  00004C  4B8E               	infsnz	printf@f& (0+255),f,b
  3591  00004E  2B8F               	incf	(printf@f+1)& (0+255),f,b
  3592  000050                     l3765:
  3593  000050  C08E  FFF6         	movff	printf@f,tblptrl
  3594  000054  C08F  FFF7         	movff	printf@f+1,tblptrh
  3595  000058                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3596  000058  6AF8               	clrf	tblptru,c
  3597  00005A                     	endif
  3598  00005A                     	if	0	;tblptru may be non-zero
  3599  00005A                     	endif
  3600  00005A  0008               	tblrd		*
  3601  00005C  50F5               	movf	tablat,w,c
  3602                           
  3603                           ; Switch size 1, requested type "space"
  3604                           ; Number of cases is 1, Range of values is 48 to 48
  3605                           ; switch strategies available:
  3606                           ; Name         Instructions Cycles
  3607                           ; simple_byte            4     3 (average)
  3608                           ;	Chosen strategy is simple_byte
  3609  00005E  0A30               	xorlw	48	; case 48
  3610  000060  B4D8               	btfsc	status,2,c
  3611  000062  D7F1               	goto	l3761
  3612                           
  3613                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3614                           
  3615                           ;doprnt.c: 586: }
  3616                           
  3617                           ;doprnt.c: 585: break;
  3618  000064  C08E  FFF6         	movff	printf@f,tblptrl
  3619  000068  C08F  FFF7         	movff	printf@f+1,tblptrh
  3620  00006C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3621  00006C  6AF8               	clrf	tblptru,c
  3622  00006E                     	endif
  3623  00006E                     	if	0	;tblptru may be non-zero
  3624  00006E                     	endif
  3625  00006E  0008               	tblrd		*
  3626  000070  50F5               	movf	tablat,w,c
  3627  000072  EC4B  F00D         	call	_isdigit
  3628  000076  A0D8               	btfss	status,0,c
  3629  000078  D046               	goto	l3783
  3630                           
  3631                           ;doprnt.c: 598: width = 0;
  3632  00007A  0E00               	movlw	0
  3633  00007C  0100               	movlb	0	; () banked
  3634  00007E  6FA2               	movwf	(printf@width+1)& (0+255),b
  3635  000080  0E00               	movlw	0
  3636  000082  6FA1               	movwf	printf@width& (0+255),b
  3637  000084                     l3771:
  3638                           
  3639                           ;doprnt.c: 600: width *= 10;
  3640  000084  C0A1  F088         	movff	printf@width,___wmul@multiplier
  3641  000088  C0A2  F089         	movff	printf@width+1,___wmul@multiplier+1
  3642  00008C  0E00               	movlw	0
  3643  00008E  0100               	movlb	0	; () banked
  3644  000090  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3645  000092  0E0A               	movlw	10
  3646  000094  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  3647  000096  EC19  F00D         	call	___wmul	;wreg free
  3648  00009A  C088  F0A1         	movff	?___wmul,printf@width
  3649  00009E  C089  F0A2         	movff	?___wmul+1,printf@width+1
  3650                           
  3651                           ;doprnt.c: 601: width += *f++ - '0';
  3652  0000A2  0ED0               	movlw	208
  3653  0000A4  0100               	movlb	0	; () banked
  3654  0000A6  6F96               	movwf	??_printf& (0+255),b
  3655  0000A8  0EFF               	movlw	255
  3656  0000AA  0100               	movlb	0	; () banked
  3657  0000AC  6F97               	movwf	(??_printf+1)& (0+255),b
  3658  0000AE  C08E  FFF6         	movff	printf@f,tblptrl
  3659  0000B2  C08F  FFF7         	movff	printf@f+1,tblptrh
  3660  0000B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3661  0000B6  6AF8               	clrf	tblptru,c
  3662  0000B8                     	endif
  3663  0000B8                     	if	0	;tblptru may be non-zero
  3664  0000B8                     	endif
  3665  0000B8  0008               	tblrd		*
  3666  0000BA  50F5               	movf	tablat,w,c
  3667  0000BC  0100               	movlb	0	; () banked
  3668  0000BE  6F98               	movwf	(??_printf+2)& (0+255),b
  3669  0000C0  6B99               	clrf	(??_printf+3)& (0+255),b
  3670  0000C2  0100               	movlb	0	; () banked
  3671  0000C4  5196               	movf	??_printf& (0+255),w,b
  3672  0000C6  0100               	movlb	0	; () banked
  3673  0000C8  2798               	addwf	(??_printf+2)& (0+255),f,b
  3674  0000CA  0100               	movlb	0	; () banked
  3675  0000CC  5197               	movf	(??_printf+1)& (0+255),w,b
  3676  0000CE  0100               	movlb	0	; () banked
  3677  0000D0  2399               	addwfc	(??_printf+3)& (0+255),f,b
  3678  0000D2  0100               	movlb	0	; () banked
  3679  0000D4  5198               	movf	(??_printf+2)& (0+255),w,b
  3680  0000D6  0100               	movlb	0	; () banked
  3681  0000D8  27A1               	addwf	printf@width& (0+255),f,b
  3682  0000DA  0100               	movlb	0	; () banked
  3683  0000DC  5199               	movf	(??_printf+3)& (0+255),w,b
  3684  0000DE  0100               	movlb	0	; () banked
  3685  0000E0  23A2               	addwfc	(printf@width+1)& (0+255),f,b
  3686                           
  3687                           ; BSR set to: 0
  3688  0000E2  0100               	movlb	0	; () banked
  3689  0000E4  4B8E               	infsnz	printf@f& (0+255),f,b
  3690  0000E6  2B8F               	incf	(printf@f+1)& (0+255),f,b
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3694  0000E8  C08E  FFF6         	movff	printf@f,tblptrl
  3695  0000EC  C08F  FFF7         	movff	printf@f+1,tblptrh
  3696  0000F0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3697  0000F0  6AF8               	clrf	tblptru,c
  3698  0000F2                     	endif
  3699  0000F2                     	if	0	;tblptru may be non-zero
  3700  0000F2                     	endif
  3701  0000F2  0008               	tblrd		*
  3702  0000F4  50F5               	movf	tablat,w,c
  3703  0000F6  EC4B  F00D         	call	_isdigit
  3704  0000FA  A0D8               	btfss	status,0,c
  3705  0000FC  D004               	goto	l3783
  3706  0000FE  D7C2               	goto	l3771
  3707  000100                     l3779:
  3708                           
  3709                           ;doprnt.c: 721: flag |= 0x80;
  3710  000100  0100               	movlb	0	; () banked
  3711  000102  8FA0               	bsf	printf@flag& (0+255),7,b
  3712                           
  3713                           ;doprnt.c: 723: break;
  3714  000104  D01A               	goto	l477
  3715  000106                     l3783:
  3716  000106  C08E  FFF6         	movff	printf@f,tblptrl
  3717  00010A  C08F  FFF7         	movff	printf@f+1,tblptrh
  3718  00010E  0100               	movlb	0	; () banked
  3719  000110  4B8E               	infsnz	printf@f& (0+255),f,b
  3720  000112  2B8F               	incf	(printf@f+1)& (0+255),f,b
  3721  000114                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3722  000114  6AF8               	clrf	tblptru,c
  3723  000116                     	endif
  3724  000116                     	if	0	;tblptru may be non-zero
  3725  000116                     	endif
  3726  000116  0008               	tblrd		*
  3727  000118  CFF5 F0A3          	movff	tablat,printf@c
  3728  00011C  0100               	movlb	0	; () banked
  3729  00011E  51A3               	movf	printf@c& (0+255),w,b
  3730                           
  3731                           ; Switch size 1, requested type "space"
  3732                           ; Number of cases is 4, Range of values is 0 to 120
  3733                           ; switch strategies available:
  3734                           ; Name         Instructions Cycles
  3735                           ; simple_byte           13     7 (average)
  3736                           ;	Chosen strategy is simple_byte
  3737  000120  0A00               	xorlw	0	; case 0
  3738  000122  B4D8               	btfsc	status,2,c
  3739  000124  0012               	return	
  3740  000126  0A64               	xorlw	100	; case 100
  3741  000128  B4D8               	btfsc	status,2,c
  3742  00012A  D007               	goto	l477
  3743  00012C  0A0D               	xorlw	13	; case 105
  3744  00012E  B4D8               	btfsc	status,2,c
  3745  000130  D004               	goto	l477
  3746  000132  0A11               	xorlw	17	; case 120
  3747  000134  B4D8               	btfsc	status,2,c
  3748  000136  D7E4               	goto	l3779
  3749  000138  D14B               	goto	l3881
  3750  00013A                     l477:
  3751                           
  3752                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3753  00013A  0100               	movlb	0	; () banked
  3754  00013C  BFA0               	btfsc	printf@flag& (0+255),7,b
  3755  00013E  D019               	goto	l3795
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;doprnt.c: 1253: {
  3759                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3760  000140  C09B  FFD9         	movff	printf@ap,fsr2l
  3761  000144  C09C  FFDA         	movff	printf@ap+1,fsr2h
  3762  000148  CFDE F09E          	movff	postinc2,printf@val
  3763  00014C  CFDD F09F          	movff	postdec2,printf@val+1
  3764                           
  3765                           ; BSR set to: 0
  3766  000150  0E02               	movlw	2
  3767  000152  0100               	movlb	0	; () banked
  3768  000154  279B               	addwf	printf@ap& (0+255),f,b
  3769  000156  0E00               	movlw	0
  3770  000158  239C               	addwfc	(printf@ap+1)& (0+255),f,b
  3771                           
  3772                           ; BSR set to: 0
  3773                           ;doprnt.c: 1261: if((int)val < 0) {
  3774  00015A  0100               	movlb	0	; () banked
  3775  00015C  AF9F               	btfss	(printf@val+1)& (0+255),7,b
  3776  00015E  D059               	goto	l3829
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;doprnt.c: 1262: flag |= 0x03;
  3780  000160  0E03               	movlw	3
  3781  000162  0100               	movlb	0	; () banked
  3782  000164  13A0               	iorwf	printf@flag& (0+255),f,b
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;doprnt.c: 1263: val = -val;
  3786  000166  0100               	movlb	0	; () banked
  3787  000168  6D9E               	negf	printf@val& (0+255),b
  3788  00016A  1F9F               	comf	(printf@val+1)& (0+255),f,b
  3789  00016C  B0D8               	btfsc	status,0,c
  3790  00016E  2B9F               	incf	(printf@val+1)& (0+255),f,b
  3791                           
  3792                           ; BSR set to: 0
  3793                           ;doprnt.c: 1264: }
  3794                           ;doprnt.c: 1266: }
  3795  000170  D050               	goto	l3829
  3796  000172                     l3795:
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;doprnt.c: 1268: else
  3800                           ;doprnt.c: 1273: {
  3801                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3802  000172  C09B  FFD9         	movff	printf@ap,fsr2l
  3803  000176  C09C  FFDA         	movff	printf@ap+1,fsr2h
  3804  00017A  CFDE F09E          	movff	postinc2,printf@val
  3805  00017E  CFDD F09F          	movff	postdec2,printf@val+1
  3806                           
  3807                           ; BSR set to: 0
  3808  000182  0E02               	movlw	2
  3809  000184  0100               	movlb	0	; () banked
  3810  000186  279B               	addwf	printf@ap& (0+255),f,b
  3811  000188  0E00               	movlw	0
  3812  00018A  239C               	addwfc	(printf@ap+1)& (0+255),f,b
  3813                           
  3814                           ; BSR set to: 0
  3815                           ;doprnt.c: 1287: }
  3816                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3817  00018C  D042               	goto	l3829
  3818  00018E                     l3799:
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3822  00018E  0E01               	movlw	1
  3823  000190  0100               	movlb	0	; () banked
  3824  000192  6FA3               	movwf	printf@c& (0+255),b
  3825  000194                     l3801:
  3826                           
  3827                           ; BSR set to: 0
  3828  000194  0E05               	movlw	5
  3829  000196  0100               	movlb	0	; () banked
  3830  000198  19A3               	xorwf	printf@c& (0+255),w,b
  3831  00019A  B4D8               	btfsc	status,2,c
  3832  00019C  D043               	goto	l3831
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;doprnt.c: 1306: if(val < dpowers[c])
  3836                           
  3837                           ; BSR set to: 0
  3838                           
  3839                           ; BSR set to: 0
  3840  00019E  0100               	movlb	0	; () banked
  3841  0001A0  51A3               	movf	printf@c& (0+255),w,b
  3842  0001A2  0D02               	mullw	2
  3843  0001A4  0E9E               	movlw	low _dpowers
  3844  0001A6  24F3               	addwf	prodl,w,c
  3845  0001A8  6EF6               	movwf	tblptrl,c
  3846  0001AA  0EFE               	movlw	high _dpowers
  3847  0001AC  20F4               	addwfc	prodh,w,c
  3848  0001AE  6EF7               	movwf	tblptrh,c
  3849  0001B0                     	if	1	;There are 3 active tblptr bytes
  3850  0001B0  6AF8               	clrf	tblptru,c
  3851  0001B2  0E00               	movlw	low (__mediumconst shr (0+16))
  3852  0001B4  22F8               	addwfc	tblptru,f,c
  3853  0001B6                     	endif
  3854  0001B6  0009               	tblrd		*+
  3855  0001B8  50F5               	movf	tablat,w,c
  3856  0001BA  0100               	movlb	0	; () banked
  3857  0001BC  5D9E               	subwf	printf@val& (0+255),w,b
  3858  0001BE  0009               	tblrd		*+
  3859  0001C0  50F5               	movf	tablat,w,c
  3860  0001C2  0100               	movlb	0	; () banked
  3861  0001C4  599F               	subwfb	(printf@val+1)& (0+255),w,b
  3862  0001C6  A0D8               	btfss	status,0,c
  3863  0001C8  D02D               	goto	l3831
  3864                           
  3865                           ; BSR set to: 0
  3866                           
  3867                           ; BSR set to: 0
  3868                           
  3869                           ; BSR set to: 0
  3870                           ;doprnt.c: 1307: break;
  3871  0001CA  0100               	movlb	0	; () banked
  3872  0001CC  2BA3               	incf	printf@c& (0+255),f,b
  3873  0001CE  D7E2               	goto	l3801
  3874  0001D0                     l3813:
  3875                           
  3876                           ; BSR set to: 0
  3877                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3878  0001D0  0E01               	movlw	1
  3879  0001D2  0100               	movlb	0	; () banked
  3880  0001D4  6FA3               	movwf	printf@c& (0+255),b
  3881  0001D6                     l3815:
  3882                           
  3883                           ; BSR set to: 0
  3884  0001D6  0E04               	movlw	4
  3885  0001D8  0100               	movlb	0	; () banked
  3886  0001DA  19A3               	xorwf	printf@c& (0+255),w,b
  3887  0001DC  B4D8               	btfsc	status,2,c
  3888  0001DE  D022               	goto	l3831
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3892                           
  3893                           ; BSR set to: 0
  3894                           
  3895                           ; BSR set to: 0
  3896  0001E0  0100               	movlb	0	; () banked
  3897  0001E2  51A3               	movf	printf@c& (0+255),w,b
  3898  0001E4  0D02               	mullw	2
  3899  0001E6  0EA8               	movlw	low _hexpowers
  3900  0001E8  24F3               	addwf	prodl,w,c
  3901  0001EA  6EF6               	movwf	tblptrl,c
  3902  0001EC  0EFE               	movlw	high _hexpowers
  3903  0001EE  20F4               	addwfc	prodh,w,c
  3904  0001F0  6EF7               	movwf	tblptrh,c
  3905  0001F2                     	if	1	;There are 3 active tblptr bytes
  3906  0001F2  6AF8               	clrf	tblptru,c
  3907  0001F4  0E00               	movlw	low (__mediumconst shr (0+16))
  3908  0001F6  22F8               	addwfc	tblptru,f,c
  3909  0001F8                     	endif
  3910  0001F8  0009               	tblrd		*+
  3911  0001FA  50F5               	movf	tablat,w,c
  3912  0001FC  0100               	movlb	0	; () banked
  3913  0001FE  5D9E               	subwf	printf@val& (0+255),w,b
  3914  000200  0009               	tblrd		*+
  3915  000202  50F5               	movf	tablat,w,c
  3916  000204  0100               	movlb	0	; () banked
  3917  000206  599F               	subwfb	(printf@val+1)& (0+255),w,b
  3918  000208  A0D8               	btfss	status,0,c
  3919  00020A  D00C               	goto	l3831
  3920                           
  3921                           ; BSR set to: 0
  3922                           
  3923                           ; BSR set to: 0
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;doprnt.c: 1318: break;
  3927  00020C  0100               	movlb	0	; () banked
  3928  00020E  2BA3               	incf	printf@c& (0+255),f,b
  3929  000210  D7E2               	goto	l3815
  3930  000212                     l3829:
  3931                           
  3932                           ; BSR set to: 0
  3933  000212  0100               	movlb	0	; () banked
  3934  000214  51A0               	movf	printf@flag& (0+255),w,b
  3935  000216  0B80               	andlw	128
  3936                           
  3937                           ; Switch size 1, requested type "space"
  3938                           ; Number of cases is 2, Range of values is 0 to 128
  3939                           ; switch strategies available:
  3940                           ; Name         Instructions Cycles
  3941                           ; simple_byte            7     4 (average)
  3942                           ;	Chosen strategy is simple_byte
  3943  000218  0A00               	xorlw	0	; case 0
  3944  00021A  B4D8               	btfsc	status,2,c
  3945  00021C  D7B8               	goto	l3799
  3946  00021E  0A80               	xorlw	128	; case 128
  3947  000220  B4D8               	btfsc	status,2,c
  3948  000222  D7D6               	goto	l3813
  3949  000224                     l3831:
  3950                           
  3951                           ; BSR set to: 0
  3952                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3953  000224  0100               	movlb	0	; () banked
  3954  000226  51A1               	movf	printf@width& (0+255),w,b
  3955  000228  0100               	movlb	0	; () banked
  3956  00022A  11A2               	iorwf	(printf@width+1)& (0+255),w,b
  3957  00022C  B4D8               	btfsc	status,2,c
  3958  00022E  D00B               	goto	l3837
  3959                           
  3960                           ; BSR set to: 0
  3961  000230  C0A0  F096         	movff	printf@flag,??_printf
  3962  000234  0E03               	movlw	3
  3963  000236  0100               	movlb	0	; () banked
  3964  000238  1796               	andwf	??_printf& (0+255),f,b
  3965  00023A  B4D8               	btfsc	status,2,c
  3966  00023C  D004               	goto	l3837
  3967                           
  3968                           ; BSR set to: 0
  3969                           ;doprnt.c: 1346: width--;
  3970  00023E  0100               	movlb	0	; () banked
  3971  000240  07A1               	decf	printf@width& (0+255),f,b
  3972  000242  A0D8               	btfss	status,0,c
  3973  000244  07A2               	decf	(printf@width+1)& (0+255),f,b
  3974  000246                     l3837:
  3975                           
  3976                           ; BSR set to: 0
  3977                           ;doprnt.c: 1381: if(width > c)
  3978  000246  0E80               	movlw	128
  3979  000248  0100               	movlb	0	; () banked
  3980  00024A  BFA3               	btfsc	printf@c& (0+255),7,b
  3981  00024C  0E7F               	movlw	127
  3982  00024E  0100               	movlb	0	; () banked
  3983  000250  6F96               	movwf	??_printf& (0+255),b
  3984  000252  0100               	movlb	0	; () banked
  3985  000254  51A1               	movf	printf@width& (0+255),w,b
  3986  000256  0100               	movlb	0	; () banked
  3987  000258  5DA3               	subwf	printf@c& (0+255),w,b
  3988  00025A  0100               	movlb	0	; () banked
  3989  00025C  51A2               	movf	(printf@width+1)& (0+255),w,b
  3990  00025E  0A80               	xorlw	128
  3991  000260  0100               	movlb	0	; () banked
  3992  000262  5996               	subwfb	??_printf& (0+255),w,b
  3993  000264  B0D8               	btfsc	status,0,c
  3994  000266  D00B               	goto	l3841
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;doprnt.c: 1382: width -= c;
  3998  000268  0100               	movlb	0	; () banked
  3999  00026A  51A3               	movf	printf@c& (0+255),w,b
  4000  00026C  0100               	movlb	0	; () banked
  4001  00026E  5FA1               	subwf	printf@width& (0+255),f,b
  4002  000270  0E00               	movlw	0
  4003  000272  0100               	movlb	0	; () banked
  4004  000274  BFA3               	btfsc	printf@c& (0+255),7,b
  4005  000276  0EFF               	movlw	255
  4006  000278  0100               	movlb	0	; () banked
  4007  00027A  5BA2               	subwfb	(printf@width+1)& (0+255),f,b
  4008  00027C  D005               	goto	l3843
  4009  00027E                     l3841:
  4010                           
  4011                           ; BSR set to: 0
  4012                           ;doprnt.c: 1383: else
  4013                           ;doprnt.c: 1384: width = 0;
  4014  00027E  0E00               	movlw	0
  4015  000280  0100               	movlb	0	; () banked
  4016  000282  6FA2               	movwf	(printf@width+1)& (0+255),b
  4017  000284  0E00               	movlw	0
  4018  000286  6FA1               	movwf	printf@width& (0+255),b
  4019  000288                     l3843:
  4020                           
  4021                           ; BSR set to: 0
  4022                           ;doprnt.c: 1387: if(flag & 0x04) {
  4023  000288  0100               	movlb	0	; () banked
  4024  00028A  A5A0               	btfss	printf@flag& (0+255),2,b
  4025  00028C  D018               	goto	l3855
  4026                           
  4027                           ; BSR set to: 0
  4028                           ;doprnt.c: 1392: if(flag & 0x03)
  4029  00028E  C0A0  F096         	movff	printf@flag,??_printf
  4030  000292  0E03               	movlw	3
  4031  000294  0100               	movlb	0	; () banked
  4032  000296  1796               	andwf	??_printf& (0+255),f,b
  4033  000298  B4D8               	btfsc	status,2,c
  4034  00029A  D003               	goto	l3849
  4035                           
  4036                           ; BSR set to: 0
  4037                           ;doprnt.c: 1393: (putch('-') );
  4038  00029C  0E2D               	movlw	45
  4039  00029E  ECEF  F00D         	call	_putch
  4040  0002A2                     l3849:
  4041                           
  4042                           ;doprnt.c: 1415: if(width)
  4043  0002A2  0100               	movlb	0	; () banked
  4044  0002A4  51A1               	movf	printf@width& (0+255),w,b
  4045  0002A6  0100               	movlb	0	; () banked
  4046  0002A8  11A2               	iorwf	(printf@width+1)& (0+255),w,b
  4047  0002AA  B4D8               	btfsc	status,2,c
  4048  0002AC  D025               	goto	l3865
  4049                           
  4050                           ; BSR set to: 0
  4051                           ;doprnt.c: 1417: (putch('0') );
  4052                           
  4053                           ; BSR set to: 0
  4054                           
  4055                           ;doprnt.c: 1416: do
  4056  0002AE  0E30               	movlw	48
  4057  0002B0  ECEF  F00D         	call	_putch
  4058                           
  4059                           ;doprnt.c: 1418: while(--width);
  4060  0002B4  0100               	movlb	0	; () banked
  4061  0002B6  07A1               	decf	printf@width& (0+255),f,b
  4062  0002B8  A0D8               	btfss	status,0,c
  4063  0002BA  07A2               	decf	(printf@width+1)& (0+255),f,b
  4064  0002BC  D7F2               	goto	l3849
  4065  0002BE                     l3855:
  4066                           
  4067                           ; BSR set to: 0
  4068                           ;doprnt.c: 1422: {
  4069                           ;doprnt.c: 1424: if(width
  4070                           ;doprnt.c: 1428: )
  4071  0002BE  0100               	movlb	0	; () banked
  4072  0002C0  51A1               	movf	printf@width& (0+255),w,b
  4073  0002C2  0100               	movlb	0	; () banked
  4074  0002C4  11A2               	iorwf	(printf@width+1)& (0+255),w,b
  4075  0002C6  B4D8               	btfsc	status,2,c
  4076  0002C8  D00D               	goto	l3861
  4077  0002CA                     l3857:
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;doprnt.c: 1430: (putch(' ') );
  4081  0002CA  0E20               	movlw	32
  4082  0002CC  ECEF  F00D         	call	_putch
  4083                           
  4084                           ;doprnt.c: 1431: while(--width);
  4085  0002D0  0100               	movlb	0	; () banked
  4086  0002D2  07A1               	decf	printf@width& (0+255),f,b
  4087  0002D4  A0D8               	btfss	status,0,c
  4088  0002D6  07A2               	decf	(printf@width+1)& (0+255),f,b
  4089  0002D8  0100               	movlb	0	; () banked
  4090  0002DA  51A1               	movf	printf@width& (0+255),w,b
  4091  0002DC  0100               	movlb	0	; () banked
  4092  0002DE  11A2               	iorwf	(printf@width+1)& (0+255),w,b
  4093  0002E0  A4D8               	btfss	status,2,c
  4094  0002E2  D7F3               	goto	l3857
  4095  0002E4                     l3861:
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;doprnt.c: 1438: if(flag & 0x03)
  4099  0002E4  C0A0  F096         	movff	printf@flag,??_printf
  4100  0002E8  0E03               	movlw	3
  4101  0002EA  0100               	movlb	0	; () banked
  4102  0002EC  1796               	andwf	??_printf& (0+255),f,b
  4103  0002EE  B4D8               	btfsc	status,2,c
  4104  0002F0  D003               	goto	l3865
  4105                           
  4106                           ; BSR set to: 0
  4107                           ;doprnt.c: 1439: (putch('-') );
  4108  0002F2  0E2D               	movlw	45
  4109  0002F4  ECEF  F00D         	call	_putch
  4110  0002F8                     l3865:
  4111                           
  4112                           ;doprnt.c: 1469: }
  4113                           ;doprnt.c: 1472: prec = c;
  4114  0002F8  C0A3  F09D         	movff	printf@c,printf@prec
  4115                           
  4116                           ;doprnt.c: 1474: while(prec--) {
  4117  0002FC  D063               	goto	l3879
  4118  0002FE                     l3867:
  4119                           
  4120                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4121  0002FE  0100               	movlb	0	; () banked
  4122  000300  519D               	movf	printf@prec& (0+255),w,b
  4123  000302  0D02               	mullw	2
  4124  000304  0E9E               	movlw	low _dpowers
  4125  000306  24F3               	addwf	prodl,w,c
  4126  000308  6EF6               	movwf	tblptrl,c
  4127  00030A  0EFE               	movlw	high _dpowers
  4128  00030C  20F4               	addwfc	prodh,w,c
  4129  00030E  6EF7               	movwf	tblptrh,c
  4130  000310                     	if	1	;There are 3 active tblptr bytes
  4131  000310  6AF8               	clrf	tblptru,c
  4132  000312  0E00               	movlw	low (__mediumconst shr (0+16))
  4133  000314  22F8               	addwfc	tblptru,f,c
  4134  000316                     	endif
  4135  000316  0009               	tblrd		*+
  4136  000318  CFF5 F082          	movff	tablat,___lwdiv@divisor
  4137  00031C  000A               	tblrd		*-
  4138  00031E  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  4139  000322  C09E  F080         	movff	printf@val,___lwdiv@dividend
  4140  000326  C09F  F081         	movff	printf@val+1,___lwdiv@dividend+1
  4141  00032A  ECA0  F009         	call	___lwdiv	;wreg free
  4142  00032E  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  4143  000332  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  4144  000336  0E00               	movlw	0
  4145  000338  0100               	movlb	0	; () banked
  4146  00033A  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  4147  00033C  0E0A               	movlw	10
  4148  00033E  6F89               	movwf	___lwmod@divisor& (0+255),b
  4149  000340  ECE2  F00A         	call	___lwmod	;wreg free
  4150  000344  0100               	movlb	0	; () banked
  4151  000346  5187               	movf	?___lwmod& (0+255),w,b
  4152  000348  0F30               	addlw	48
  4153  00034A  0100               	movlb	0	; () banked
  4154  00034C  6FA3               	movwf	printf@c& (0+255),b
  4155                           
  4156                           ;doprnt.c: 1491: break;
  4157  00034E  D036               	goto	l3877
  4158  000350                     l3869:
  4159                           
  4160                           ; BSR set to: 0
  4161                           ;doprnt.c: 1499: {
  4162                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4163  000350  C09E  F080         	movff	printf@val,___lwdiv@dividend
  4164  000354  C09F  F081         	movff	printf@val+1,___lwdiv@dividend+1
  4165  000358  0100               	movlb	0	; () banked
  4166  00035A  519D               	movf	printf@prec& (0+255),w,b
  4167  00035C  0D02               	mullw	2
  4168  00035E  0EA8               	movlw	low _hexpowers
  4169  000360  24F3               	addwf	prodl,w,c
  4170  000362  6EF6               	movwf	tblptrl,c
  4171  000364  0EFE               	movlw	high _hexpowers
  4172  000366  20F4               	addwfc	prodh,w,c
  4173  000368  6EF7               	movwf	tblptrh,c
  4174  00036A                     	if	1	;There are 3 active tblptr bytes
  4175  00036A  6AF8               	clrf	tblptru,c
  4176  00036C  0E00               	movlw	low (__mediumconst shr (0+16))
  4177  00036E  22F8               	addwfc	tblptru,f,c
  4178  000370                     	endif
  4179  000370  0009               	tblrd		*+
  4180  000372  CFF5 F082          	movff	tablat,___lwdiv@divisor
  4181  000376  000A               	tblrd		*-
  4182  000378  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  4183  00037C  ECA0  F009         	call	___lwdiv	;wreg free
  4184  000380  0100               	movlb	0	; () banked
  4185  000382  5180               	movf	?___lwdiv& (0+255),w,b
  4186  000384  0B0F               	andlw	15
  4187  000386  0100               	movlb	0	; () banked
  4188  000388  6F9A               	movwf	printf@idx& (0+255),b
  4189                           
  4190                           ; BSR set to: 0
  4191                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4192  00038A  0100               	movlb	0	; () banked
  4193  00038C  519A               	movf	printf@idx& (0+255),w,b
  4194  00038E  0D01               	mullw	1
  4195  000390  0EE0               	movlw	low STR_23
  4196  000392  24F3               	addwf	prodl,w,c
  4197  000394  6EF6               	movwf	tblptrl,c
  4198  000396  0EFE               	movlw	high STR_23
  4199  000398  20F4               	addwfc	prodh,w,c
  4200  00039A  6EF7               	movwf	tblptrh,c
  4201  00039C                     	if	1	;There are 3 active tblptr bytes
  4202  00039C  6AF8               	clrf	tblptru,c
  4203  00039E  0E00               	movlw	low (__mediumconst shr (0+16))
  4204  0003A0  22F8               	addwfc	tblptru,f,c
  4205  0003A2                     	endif
  4206  0003A2  0008               	tblrd		*
  4207  0003A4  CFF5 F0A3          	movff	tablat,printf@c
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;doprnt.c: 1523: }
  4211                           
  4212                           ;doprnt.c: 1508: }
  4213                           ;doprnt.c: 1510: break;
  4214  0003A8  D009               	goto	l3877
  4215  0003AA                     l3875:
  4216  0003AA  0100               	movlb	0	; () banked
  4217  0003AC  51A0               	movf	printf@flag& (0+255),w,b
  4218  0003AE  0B80               	andlw	128
  4219                           
  4220                           ; Switch size 1, requested type "space"
  4221                           ; Number of cases is 2, Range of values is 0 to 128
  4222                           ; switch strategies available:
  4223                           ; Name         Instructions Cycles
  4224                           ; simple_byte            7     4 (average)
  4225                           ;	Chosen strategy is simple_byte
  4226  0003B0  0A00               	xorlw	0	; case 0
  4227  0003B2  B4D8               	btfsc	status,2,c
  4228  0003B4  D7A4               	goto	l3867
  4229  0003B6  0A80               	xorlw	128	; case 128
  4230  0003B8  B4D8               	btfsc	status,2,c
  4231  0003BA  D7CA               	goto	l3869
  4232  0003BC                     l3877:
  4233                           
  4234                           ; BSR set to: 0
  4235                           ;doprnt.c: 1524: (putch(c) );
  4236  0003BC  0100               	movlb	0	; () banked
  4237  0003BE  51A3               	movf	printf@c& (0+255),w,b
  4238  0003C0  ECEF  F00D         	call	_putch
  4239  0003C4                     l3879:
  4240  0003C4  0100               	movlb	0	; () banked
  4241  0003C6  079D               	decf	printf@prec& (0+255),f,b
  4242  0003C8  0100               	movlb	0	; () banked
  4243  0003CA  299D               	incf	printf@prec& (0+255),w,b
  4244  0003CC  A4D8               	btfss	status,2,c
  4245  0003CE  D7ED               	goto	l3875
  4246  0003D0                     l3881:
  4247  0003D0  C08E  FFF6         	movff	printf@f,tblptrl
  4248  0003D4  C08F  FFF7         	movff	printf@f+1,tblptrh
  4249  0003D8  0100               	movlb	0	; () banked
  4250  0003DA  4B8E               	infsnz	printf@f& (0+255),f,b
  4251  0003DC  2B8F               	incf	(printf@f+1)& (0+255),f,b
  4252  0003DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4253  0003DE  6AF8               	clrf	tblptru,c
  4254  0003E0                     	endif
  4255  0003E0                     	if	0	;tblptru may be non-zero
  4256  0003E0                     	endif
  4257  0003E0  0008               	tblrd		*
  4258  0003E2  CFF5 F0A3          	movff	tablat,printf@c
  4259  0003E6  0100               	movlb	0	; () banked
  4260  0003E8  51A3               	movf	printf@c& (0+255),w,b
  4261  0003EA  B4D8               	btfsc	status,2,c
  4262  0003EC  0012               	return	
  4263  0003EE  D618               	goto	l3755
  4264  0003F0                     __end_of_printf:
  4265                           	opt stack 0
  4266                           tosu	equ	0xFFF
  4267                           tosh	equ	0xFFE
  4268                           tosl	equ	0xFFD
  4269                           pclath	equ	0xFFA
  4270                           tblptru	equ	0xFF8
  4271                           tblptrh	equ	0xFF7
  4272                           tblptrl	equ	0xFF6
  4273                           tablat	equ	0xFF5
  4274                           prodh	equ	0xFF4
  4275                           prodl	equ	0xFF3
  4276                           intcon	equ	0xFF2
  4277                           intcon3	equ	0xFF0
  4278                           postinc0	equ	0xFEE
  4279                           wreg	equ	0xFE8
  4280                           indf2	equ	0xFDF
  4281                           postinc2	equ	0xFDE
  4282                           postdec2	equ	0xFDD
  4283                           fsr2h	equ	0xFDA
  4284                           fsr2l	equ	0xFD9
  4285                           status	equ	0xFD8
  4286                           
  4287 ;; *************** function _putch *****************
  4288 ;; Defined at:
  4289 ;;		line 30 in file "lcd.c"
  4290 ;; Parameters:    Size  Location     Type
  4291 ;;  data            1    wreg     unsigned char 
  4292 ;; Auto vars:     Size  Location     Type
  4293 ;;  data            1    2[BANK0 ] unsigned char 
  4294 ;; Return value:  Size  Location     Type
  4295 ;;                  1    wreg      void 
  4296 ;; Registers used:
  4297 ;;		wreg, status,2, status,0, cstack
  4298 ;; Tracked objects:
  4299 ;;		On entry : 0/0
  4300 ;;		On exit  : 0/0
  4301 ;;		Unchanged: 0/0
  4302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4304 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4306 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4307 ;;Total ram usage:        1 bytes
  4308 ;; Hardware stack levels used:    1
  4309 ;; Hardware stack levels required when called:    6
  4310 ;; This function calls:
  4311 ;;		_lcdNibble
  4312 ;; This function is called by:
  4313 ;;		_printf
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           	psect	text17
  4318  001BDE                     __ptext17:
  4319                           	opt stack 0
  4320  001BDE                     _putch:
  4321                           	opt stack 21
  4322                           
  4323                           ;incstack = 0
  4324                           ;putch@data stored from wreg
  4325  001BDE  0100               	movlb	0	; () banked
  4326  001BE0  6F82               	movwf	putch@data& (0+255),b
  4327                           
  4328                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  4329  001BE2  848C               	bsf	3980,2,c	;volatile
  4330                           
  4331                           ;lcd.c: 32: lcdNibble(data);
  4332  001BE4  0100               	movlb	0	; () banked
  4333  001BE6  5182               	movf	putch@data& (0+255),w,b
  4334  001BE8  EC4A  F00A         	call	_lcdNibble
  4335  001BEC  0012               	return		;funcret
  4336  001BEE                     __end_of_putch:
  4337                           	opt stack 0
  4338                           tosu	equ	0xFFF
  4339                           tosh	equ	0xFFE
  4340                           tosl	equ	0xFFD
  4341                           pclath	equ	0xFFA
  4342                           tblptru	equ	0xFF8
  4343                           tblptrh	equ	0xFF7
  4344                           tblptrl	equ	0xFF6
  4345                           tablat	equ	0xFF5
  4346                           prodh	equ	0xFF4
  4347                           prodl	equ	0xFF3
  4348                           intcon	equ	0xFF2
  4349                           intcon3	equ	0xFF0
  4350                           postinc0	equ	0xFEE
  4351                           wreg	equ	0xFE8
  4352                           indf2	equ	0xFDF
  4353                           postinc2	equ	0xFDE
  4354                           postdec2	equ	0xFDD
  4355                           fsr2h	equ	0xFDA
  4356                           fsr2l	equ	0xFD9
  4357                           status	equ	0xFD8
  4358                           
  4359 ;; *************** function _isdigit *****************
  4360 ;; Defined at:
  4361 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/isdigit.c"
  4362 ;; Parameters:    Size  Location     Type
  4363 ;;  c               1    wreg     unsigned char 
  4364 ;; Auto vars:     Size  Location     Type
  4365 ;;  c               1    2[BANK0 ] unsigned char 
  4366 ;; Return value:  Size  Location     Type
  4367 ;;		None               void
  4368 ;; Registers used:
  4369 ;;		wreg, status,2, status,0
  4370 ;; Tracked objects:
  4371 ;;		On entry : 0/0
  4372 ;;		On exit  : 0/0
  4373 ;;		Unchanged: 0/0
  4374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4376 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4377 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4378 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4379 ;;Total ram usage:        3 bytes
  4380 ;; Hardware stack levels used:    1
  4381 ;; Hardware stack levels required when called:    5
  4382 ;; This function calls:
  4383 ;;		Nothing
  4384 ;; This function is called by:
  4385 ;;		_printf
  4386 ;; This function uses a non-reentrant model
  4387 ;;
  4388                           
  4389                           	psect	text18
  4390  001A96                     __ptext18:
  4391                           	opt stack 0
  4392  001A96                     _isdigit:
  4393                           	opt stack 22
  4394                           
  4395                           ;incstack = 0
  4396                           ;isdigit@c stored from wreg
  4397  001A96  0100               	movlb	0	; () banked
  4398  001A98  6F82               	movwf	isdigit@c& (0+255),b
  4399  001A9A  0E00               	movlw	0
  4400  001A9C  0100               	movlb	0	; () banked
  4401  001A9E  6F81               	movwf	_isdigit$1082& (0+255),b
  4402                           
  4403                           ; BSR set to: 0
  4404  001AA0  0E3A               	movlw	58
  4405  001AA2  0100               	movlb	0	; () banked
  4406  001AA4  6182               	cpfslt	isdigit@c& (0+255),b
  4407  001AA6  D007               	goto	l3691
  4408                           
  4409                           ; BSR set to: 0
  4410  001AA8  0E2F               	movlw	47
  4411  001AAA  0100               	movlb	0	; () banked
  4412  001AAC  6582               	cpfsgt	isdigit@c& (0+255),b
  4413  001AAE  D003               	goto	l3691
  4414                           
  4415                           ; BSR set to: 0
  4416  001AB0  0E01               	movlw	1
  4417  001AB2  0100               	movlb	0	; () banked
  4418  001AB4  6F81               	movwf	_isdigit$1082& (0+255),b
  4419  001AB6                     l3691:
  4420                           
  4421                           ; BSR set to: 0
  4422  001AB6  C081  F080         	movff	_isdigit$1082,??_isdigit
  4423  001ABA  0100               	movlb	0	; () banked
  4424  001ABC  3180               	rrcf	??_isdigit& (0+255),w,b
  4425  001ABE  0012               	return	
  4426  001AC0                     __end_of_isdigit:
  4427                           	opt stack 0
  4428                           tosu	equ	0xFFF
  4429                           tosh	equ	0xFFE
  4430                           tosl	equ	0xFFD
  4431                           pclath	equ	0xFFA
  4432                           tblptru	equ	0xFF8
  4433                           tblptrh	equ	0xFF7
  4434                           tblptrl	equ	0xFF6
  4435                           tablat	equ	0xFF5
  4436                           prodh	equ	0xFF4
  4437                           prodl	equ	0xFF3
  4438                           intcon	equ	0xFF2
  4439                           intcon3	equ	0xFF0
  4440                           postinc0	equ	0xFEE
  4441                           wreg	equ	0xFE8
  4442                           indf2	equ	0xFDF
  4443                           postinc2	equ	0xFDE
  4444                           postdec2	equ	0xFDD
  4445                           fsr2h	equ	0xFDA
  4446                           fsr2l	equ	0xFD9
  4447                           status	equ	0xFD8
  4448                           
  4449 ;; *************** function ___lwmod *****************
  4450 ;; Defined at:
  4451 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
  4452 ;; Parameters:    Size  Location     Type
  4453 ;;  dividend        2    7[BANK0 ] unsigned int 
  4454 ;;  divisor         2    9[BANK0 ] unsigned int 
  4455 ;; Auto vars:     Size  Location     Type
  4456 ;;  counter         1   11[BANK0 ] unsigned char 
  4457 ;; Return value:  Size  Location     Type
  4458 ;;                  2    7[BANK0 ] unsigned int 
  4459 ;; Registers used:
  4460 ;;		wreg, status,2, status,0
  4461 ;; Tracked objects:
  4462 ;;		On entry : 0/0
  4463 ;;		On exit  : 0/0
  4464 ;;		Unchanged: 0/0
  4465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4466 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4467 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4469 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4470 ;;Total ram usage:        5 bytes
  4471 ;; Hardware stack levels used:    1
  4472 ;; Hardware stack levels required when called:    5
  4473 ;; This function calls:
  4474 ;;		Nothing
  4475 ;; This function is called by:
  4476 ;;		_printf
  4477 ;; This function uses a non-reentrant model
  4478 ;;
  4479                           
  4480                           	psect	text19
  4481  0015C4                     __ptext19:
  4482                           	opt stack 0
  4483  0015C4                     ___lwmod:
  4484                           	opt stack 22
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;incstack = 0
  4488  0015C4  0100               	movlb	0	; () banked
  4489  0015C6  5189               	movf	___lwmod@divisor& (0+255),w,b
  4490  0015C8  0100               	movlb	0	; () banked
  4491  0015CA  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4492  0015CC  B4D8               	btfsc	status,2,c
  4493  0015CE  D026               	goto	l932
  4494                           
  4495                           ; BSR set to: 0
  4496  0015D0  0E01               	movlw	1
  4497  0015D2  0100               	movlb	0	; () banked
  4498  0015D4  6F8B               	movwf	___lwmod@counter& (0+255),b
  4499  0015D6  D006               	goto	l3729
  4500  0015D8                     l3727:
  4501                           
  4502                           ; BSR set to: 0
  4503  0015D8  0100               	movlb	0	; () banked
  4504  0015DA  90D8               	bcf	status,0,c
  4505  0015DC  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  4506  0015DE  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4507  0015E0  0100               	movlb	0	; () banked
  4508  0015E2  2B8B               	incf	___lwmod@counter& (0+255),f,b
  4509  0015E4                     l3729:
  4510                           
  4511                           ; BSR set to: 0
  4512  0015E4  0100               	movlb	0	; () banked
  4513  0015E6  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4514  0015E8  D7F7               	goto	l3727
  4515  0015EA                     l3731:
  4516                           
  4517                           ; BSR set to: 0
  4518  0015EA  0100               	movlb	0	; () banked
  4519  0015EC  5189               	movf	___lwmod@divisor& (0+255),w,b
  4520  0015EE  0100               	movlb	0	; () banked
  4521  0015F0  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  4522  0015F2  0100               	movlb	0	; () banked
  4523  0015F4  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4524  0015F6  0100               	movlb	0	; () banked
  4525  0015F8  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4526  0015FA  A0D8               	btfss	status,0,c
  4527  0015FC  D008               	goto	l3735
  4528                           
  4529                           ; BSR set to: 0
  4530  0015FE  0100               	movlb	0	; () banked
  4531  001600  5189               	movf	___lwmod@divisor& (0+255),w,b
  4532  001602  0100               	movlb	0	; () banked
  4533  001604  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  4534  001606  0100               	movlb	0	; () banked
  4535  001608  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4536  00160A  0100               	movlb	0	; () banked
  4537  00160C  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4538  00160E                     l3735:
  4539                           
  4540                           ; BSR set to: 0
  4541  00160E  0100               	movlb	0	; () banked
  4542  001610  90D8               	bcf	status,0,c
  4543  001612  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4544  001614  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  4545                           
  4546                           ; BSR set to: 0
  4547  001616  0100               	movlb	0	; () banked
  4548  001618  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  4549  00161A  D7E7               	goto	l3731
  4550  00161C                     l932:
  4551                           
  4552                           ; BSR set to: 0
  4553  00161C  C087  F087         	movff	___lwmod@dividend,?___lwmod
  4554  001620  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  4555                           
  4556                           ; BSR set to: 0
  4557  001624  0012               	return		;funcret
  4558  001626                     __end_of___lwmod:
  4559                           	opt stack 0
  4560                           tosu	equ	0xFFF
  4561                           tosh	equ	0xFFE
  4562                           tosl	equ	0xFFD
  4563                           pclath	equ	0xFFA
  4564                           tblptru	equ	0xFF8
  4565                           tblptrh	equ	0xFF7
  4566                           tblptrl	equ	0xFF6
  4567                           tablat	equ	0xFF5
  4568                           prodh	equ	0xFF4
  4569                           prodl	equ	0xFF3
  4570                           intcon	equ	0xFF2
  4571                           intcon3	equ	0xFF0
  4572                           postinc0	equ	0xFEE
  4573                           wreg	equ	0xFE8
  4574                           indf2	equ	0xFDF
  4575                           postinc2	equ	0xFDE
  4576                           postdec2	equ	0xFDD
  4577                           fsr2h	equ	0xFDA
  4578                           fsr2l	equ	0xFD9
  4579                           status	equ	0xFD8
  4580                           
  4581 ;; *************** function ___lwdiv *****************
  4582 ;; Defined at:
  4583 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  4584 ;; Parameters:    Size  Location     Type
  4585 ;;  dividend        2    0[BANK0 ] unsigned int 
  4586 ;;  divisor         2    2[BANK0 ] unsigned int 
  4587 ;; Auto vars:     Size  Location     Type
  4588 ;;  quotient        2    5[BANK0 ] unsigned int 
  4589 ;;  counter         1    4[BANK0 ] unsigned char 
  4590 ;; Return value:  Size  Location     Type
  4591 ;;                  2    0[BANK0 ] unsigned int 
  4592 ;; Registers used:
  4593 ;;		wreg, status,2, status,0
  4594 ;; Tracked objects:
  4595 ;;		On entry : 0/0
  4596 ;;		On exit  : 0/0
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4599 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4600 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4602 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4603 ;;Total ram usage:        7 bytes
  4604 ;; Hardware stack levels used:    1
  4605 ;; Hardware stack levels required when called:    5
  4606 ;; This function calls:
  4607 ;;		Nothing
  4608 ;; This function is called by:
  4609 ;;		_printf
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           	psect	text20
  4614  001340                     __ptext20:
  4615                           	opt stack 0
  4616  001340                     ___lwdiv:
  4617                           	opt stack 22
  4618                           
  4619                           ; BSR set to: 0
  4620                           ;incstack = 0
  4621  001340  0E00               	movlw	0
  4622  001342  0100               	movlb	0	; () banked
  4623  001344  6F86               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4624  001346  0E00               	movlw	0
  4625  001348  6F85               	movwf	___lwdiv@quotient& (0+255),b
  4626                           
  4627                           ; BSR set to: 0
  4628  00134A  0100               	movlb	0	; () banked
  4629  00134C  5182               	movf	___lwdiv@divisor& (0+255),w,b
  4630  00134E  0100               	movlb	0	; () banked
  4631  001350  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4632  001352  B4D8               	btfsc	status,2,c
  4633  001354  D02C               	goto	l922
  4634                           
  4635                           ; BSR set to: 0
  4636  001356  0E01               	movlw	1
  4637  001358  0100               	movlb	0	; () banked
  4638  00135A  6F84               	movwf	___lwdiv@counter& (0+255),b
  4639  00135C  D006               	goto	l3709
  4640  00135E                     l3707:
  4641                           
  4642                           ; BSR set to: 0
  4643  00135E  0100               	movlb	0	; () banked
  4644  001360  90D8               	bcf	status,0,c
  4645  001362  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  4646  001364  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4647  001366  0100               	movlb	0	; () banked
  4648  001368  2B84               	incf	___lwdiv@counter& (0+255),f,b
  4649  00136A                     l3709:
  4650                           
  4651                           ; BSR set to: 0
  4652  00136A  0100               	movlb	0	; () banked
  4653  00136C  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4654  00136E  D7F7               	goto	l3707
  4655  001370                     l3711:
  4656                           
  4657                           ; BSR set to: 0
  4658  001370  0100               	movlb	0	; () banked
  4659  001372  90D8               	bcf	status,0,c
  4660  001374  3785               	rlcf	___lwdiv@quotient& (0+255),f,b
  4661  001376  3786               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4662                           
  4663                           ; BSR set to: 0
  4664  001378  0100               	movlb	0	; () banked
  4665  00137A  5182               	movf	___lwdiv@divisor& (0+255),w,b
  4666  00137C  0100               	movlb	0	; () banked
  4667  00137E  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  4668  001380  0100               	movlb	0	; () banked
  4669  001382  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4670  001384  0100               	movlb	0	; () banked
  4671  001386  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4672  001388  A0D8               	btfss	status,0,c
  4673  00138A  D00A               	goto	l3719
  4674                           
  4675                           ; BSR set to: 0
  4676  00138C  0100               	movlb	0	; () banked
  4677  00138E  5182               	movf	___lwdiv@divisor& (0+255),w,b
  4678  001390  0100               	movlb	0	; () banked
  4679  001392  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  4680  001394  0100               	movlb	0	; () banked
  4681  001396  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4682  001398  0100               	movlb	0	; () banked
  4683  00139A  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4684                           
  4685                           ; BSR set to: 0
  4686  00139C  0100               	movlb	0	; () banked
  4687  00139E  8185               	bsf	___lwdiv@quotient& (0+255),0,b
  4688  0013A0                     l3719:
  4689                           
  4690                           ; BSR set to: 0
  4691  0013A0  0100               	movlb	0	; () banked
  4692  0013A2  90D8               	bcf	status,0,c
  4693  0013A4  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4694  0013A6  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  4695                           
  4696                           ; BSR set to: 0
  4697  0013A8  0100               	movlb	0	; () banked
  4698  0013AA  2F84               	decfsz	___lwdiv@counter& (0+255),f,b
  4699  0013AC  D7E1               	goto	l3711
  4700  0013AE                     l922:
  4701                           
  4702                           ; BSR set to: 0
  4703  0013AE  C085  F080         	movff	___lwdiv@quotient,?___lwdiv
  4704  0013B2  C086  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4705                           
  4706                           ; BSR set to: 0
  4707  0013B6  0012               	return		;funcret
  4708  0013B8                     __end_of___lwdiv:
  4709                           	opt stack 0
  4710                           tosu	equ	0xFFF
  4711                           tosh	equ	0xFFE
  4712                           tosl	equ	0xFFD
  4713                           pclath	equ	0xFFA
  4714                           tblptru	equ	0xFF8
  4715                           tblptrh	equ	0xFF7
  4716                           tblptrl	equ	0xFF6
  4717                           tablat	equ	0xFF5
  4718                           prodh	equ	0xFF4
  4719                           prodl	equ	0xFF3
  4720                           intcon	equ	0xFF2
  4721                           intcon3	equ	0xFF0
  4722                           postinc0	equ	0xFEE
  4723                           wreg	equ	0xFE8
  4724                           indf2	equ	0xFDF
  4725                           postinc2	equ	0xFDE
  4726                           postdec2	equ	0xFDD
  4727                           fsr2h	equ	0xFDA
  4728                           fsr2l	equ	0xFD9
  4729                           status	equ	0xFD8
  4730                           
  4731 ;; *************** function _initLCD *****************
  4732 ;; Defined at:
  4733 ;;		line 14 in file "lcd.c"
  4734 ;; Parameters:    Size  Location     Type
  4735 ;;		None
  4736 ;; Auto vars:     Size  Location     Type
  4737 ;;		None
  4738 ;; Return value:  Size  Location     Type
  4739 ;;                  1    wreg      void 
  4740 ;; Registers used:
  4741 ;;		wreg, status,2, status,0, cstack
  4742 ;; Tracked objects:
  4743 ;;		On entry : 0/0
  4744 ;;		On exit  : 0/0
  4745 ;;		Unchanged: 0/0
  4746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4749 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4750 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4751 ;;Total ram usage:        1 bytes
  4752 ;; Hardware stack levels used:    1
  4753 ;; Hardware stack levels required when called:    7
  4754 ;; This function calls:
  4755 ;;		_lcdInst
  4756 ;; This function is called by:
  4757 ;;		_top_rocker_initial
  4758 ;;		_top_rocker_idle
  4759 ;;		_solenoids_out
  4760 ;;		_solenoids_back
  4761 ;;		_top_rocker_release
  4762 ;;		_top_rocker_restore
  4763 ;;		_standby
  4764 ;;		_startSorting
  4765 ;;		_initialization
  4766 ;;		_results
  4767 ;;		_main
  4768 ;; This function uses a non-reentrant model
  4769 ;;
  4770                           
  4771                           	psect	text21
  4772  0018EC                     __ptext21:
  4773                           	opt stack 0
  4774  0018EC                     _initLCD:
  4775                           	opt stack 21
  4776                           
  4777                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  4778                           
  4779                           ; BSR set to: 0
  4780                           ;incstack = 0
  4781  0018EC  0E31               	movlw	49
  4782  0018EE  0100               	movlb	0	; () banked
  4783  0018F0  6F83               	movwf	??_initLCD& (0+255),b
  4784  0018F2  0EB2               	movlw	178
  4785  0018F4                     u4357:
  4786  0018F4  2EE8               	decfsz	wreg,f,c
  4787  0018F6  D7FE               	bra	u4357
  4788  0018F8  2F83               	decfsz	??_initLCD& (0+255),f,b
  4789  0018FA  D7FC               	bra	u4357
  4790  0018FC  F000               	nop	
  4791                           
  4792                           ;lcd.c: 16: lcdInst(0b00110011);
  4793  0018FE  0E33               	movlw	51
  4794  001900  ECF7  F00D         	call	_lcdInst
  4795                           
  4796                           ;lcd.c: 17: lcdInst(0b00110010);
  4797  001904  0E32               	movlw	50
  4798  001906  ECF7  F00D         	call	_lcdInst
  4799                           
  4800                           ;lcd.c: 18: lcdInst(0b00101000);
  4801  00190A  0E28               	movlw	40
  4802  00190C  ECF7  F00D         	call	_lcdInst
  4803                           
  4804                           ;lcd.c: 19: lcdInst(0b00001111);
  4805  001910  0E0F               	movlw	15
  4806  001912  ECF7  F00D         	call	_lcdInst
  4807                           
  4808                           ;lcd.c: 20: lcdInst(0b00000110);
  4809  001916  0E06               	movlw	6
  4810  001918  ECF7  F00D         	call	_lcdInst
  4811                           
  4812                           ;lcd.c: 21: lcdInst(0b00000001);
  4813  00191C  0E01               	movlw	1
  4814  00191E  ECF7  F00D         	call	_lcdInst
  4815                           
  4816                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  4817  001922  0E31               	movlw	49
  4818  001924  0100               	movlb	0	; () banked
  4819  001926  6F83               	movwf	??_initLCD& (0+255),b
  4820  001928  0EB2               	movlw	178
  4821  00192A                     u4367:
  4822  00192A  2EE8               	decfsz	wreg,f,c
  4823  00192C  D7FE               	bra	u4367
  4824  00192E  2F83               	decfsz	??_initLCD& (0+255),f,b
  4825  001930  D7FC               	bra	u4367
  4826  001932  F000               	nop	
  4827  001934  0012               	return		;funcret
  4828  001936                     __end_of_initLCD:
  4829                           	opt stack 0
  4830                           tosu	equ	0xFFF
  4831                           tosh	equ	0xFFE
  4832                           tosl	equ	0xFFD
  4833                           pclath	equ	0xFFA
  4834                           tblptru	equ	0xFF8
  4835                           tblptrh	equ	0xFF7
  4836                           tblptrl	equ	0xFF6
  4837                           tablat	equ	0xFF5
  4838                           prodh	equ	0xFF4
  4839                           prodl	equ	0xFF3
  4840                           intcon	equ	0xFF2
  4841                           intcon3	equ	0xFF0
  4842                           postinc0	equ	0xFEE
  4843                           wreg	equ	0xFE8
  4844                           indf2	equ	0xFDF
  4845                           postinc2	equ	0xFDE
  4846                           postdec2	equ	0xFDD
  4847                           fsr2h	equ	0xFDA
  4848                           fsr2l	equ	0xFD9
  4849                           status	equ	0xFD8
  4850                           
  4851 ;; *************** function _lcdInst *****************
  4852 ;; Defined at:
  4853 ;;		line 25 in file "lcd.c"
  4854 ;; Parameters:    Size  Location     Type
  4855 ;;  data            1    wreg     unsigned char 
  4856 ;; Auto vars:     Size  Location     Type
  4857 ;;  data            1    2[BANK0 ] unsigned char 
  4858 ;; Return value:  Size  Location     Type
  4859 ;;                  1    wreg      void 
  4860 ;; Registers used:
  4861 ;;		wreg, status,2, status,0, cstack
  4862 ;; Tracked objects:
  4863 ;;		On entry : 0/0
  4864 ;;		On exit  : 0/0
  4865 ;;		Unchanged: 0/0
  4866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4868 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4870 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4871 ;;Total ram usage:        1 bytes
  4872 ;; Hardware stack levels used:    1
  4873 ;; Hardware stack levels required when called:    6
  4874 ;; This function calls:
  4875 ;;		_lcdNibble
  4876 ;; This function is called by:
  4877 ;;		_initLCD
  4878 ;;		_top_rocker_initial
  4879 ;;		_top_rocker_idle
  4880 ;;		_solenoids_out
  4881 ;;		_solenoids_back
  4882 ;;		_top_rocker_release
  4883 ;;		_top_rocker_restore
  4884 ;;		_standby
  4885 ;;		_startSorting
  4886 ;;		_initialization
  4887 ;;		_results
  4888 ;; This function uses a non-reentrant model
  4889 ;;
  4890                           
  4891                           	psect	text22
  4892  001BEE                     __ptext22:
  4893                           	opt stack 0
  4894  001BEE                     _lcdInst:
  4895                           	opt stack 22
  4896                           
  4897                           ;incstack = 0
  4898                           ;lcdInst@data stored from wreg
  4899  001BEE  0100               	movlb	0	; () banked
  4900  001BF0  6F82               	movwf	lcdInst@data& (0+255),b
  4901                           
  4902                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  4903  001BF2  948C               	bcf	3980,2,c	;volatile
  4904                           
  4905                           ;lcd.c: 27: lcdNibble(data);
  4906  001BF4  0100               	movlb	0	; () banked
  4907  001BF6  5182               	movf	lcdInst@data& (0+255),w,b
  4908  001BF8  EC4A  F00A         	call	_lcdNibble
  4909  001BFC  0012               	return		;funcret
  4910  001BFE                     __end_of_lcdInst:
  4911                           	opt stack 0
  4912                           tosu	equ	0xFFF
  4913                           tosh	equ	0xFFE
  4914                           tosl	equ	0xFFD
  4915                           pclath	equ	0xFFA
  4916                           tblptru	equ	0xFF8
  4917                           tblptrh	equ	0xFF7
  4918                           tblptrl	equ	0xFF6
  4919                           tablat	equ	0xFF5
  4920                           prodh	equ	0xFF4
  4921                           prodl	equ	0xFF3
  4922                           intcon	equ	0xFF2
  4923                           intcon3	equ	0xFF0
  4924                           postinc0	equ	0xFEE
  4925                           wreg	equ	0xFE8
  4926                           indf2	equ	0xFDF
  4927                           postinc2	equ	0xFDE
  4928                           postdec2	equ	0xFDD
  4929                           fsr2h	equ	0xFDA
  4930                           fsr2l	equ	0xFD9
  4931                           status	equ	0xFD8
  4932                           
  4933 ;; *************** function _lcdNibble *****************
  4934 ;; Defined at:
  4935 ;;		line 35 in file "lcd.c"
  4936 ;; Parameters:    Size  Location     Type
  4937 ;;  data            1    wreg     unsigned char 
  4938 ;; Auto vars:     Size  Location     Type
  4939 ;;  data            1    1[BANK0 ] unsigned char 
  4940 ;;  temp            1    0[BANK0 ] unsigned char 
  4941 ;; Return value:  Size  Location     Type
  4942 ;;                  1    wreg      void 
  4943 ;; Registers used:
  4944 ;;		wreg, status,2, status,0
  4945 ;; Tracked objects:
  4946 ;;		On entry : 0/0
  4947 ;;		On exit  : 0/0
  4948 ;;		Unchanged: 0/0
  4949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4951 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4953 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4954 ;;Total ram usage:        2 bytes
  4955 ;; Hardware stack levels used:    1
  4956 ;; Hardware stack levels required when called:    5
  4957 ;; This function calls:
  4958 ;;		Nothing
  4959 ;; This function is called by:
  4960 ;;		_lcdInst
  4961 ;;		_putch
  4962 ;; This function uses a non-reentrant model
  4963 ;;
  4964                           
  4965                           	psect	text23
  4966  001494                     __ptext23:
  4967                           	opt stack 0
  4968  001494                     _lcdNibble:
  4969                           	opt stack 21
  4970                           
  4971                           ;incstack = 0
  4972                           ;lcdNibble@data stored from wreg
  4973  001494  0100               	movlb	0	; () banked
  4974  001496  6F81               	movwf	lcdNibble@data& (0+255),b
  4975                           
  4976                           ;lcd.c: 37: char temp = data & 0xF0;
  4977  001498  0100               	movlb	0	; () banked
  4978  00149A  5181               	movf	lcdNibble@data& (0+255),w,b
  4979  00149C  0BF0               	andlw	240
  4980  00149E  0100               	movlb	0	; () banked
  4981  0014A0  6F80               	movwf	lcdNibble@temp& (0+255),b
  4982                           
  4983                           ;lcd.c: 38: LATD = LATD & 0x0F;
  4984  0014A2  508C               	movf	3980,w,c	;volatile
  4985  0014A4  0B0F               	andlw	15
  4986  0014A6  6E8C               	movwf	3980,c	;volatile
  4987                           
  4988                           ;lcd.c: 39: LATD = temp | LATD;
  4989  0014A8  0100               	movlb	0	; () banked
  4990  0014AA  5180               	movf	lcdNibble@temp& (0+255),w,b
  4991  0014AC  108C               	iorwf	3980,w,c	;volatile
  4992  0014AE  6E8C               	movwf	3980,c	;volatile
  4993                           
  4994                           ; BSR set to: 0
  4995                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  4996  0014B0  968C               	bcf	3980,3,c	;volatile
  4997                           
  4998                           ; BSR set to: 0
  4999                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
  5000  0014B2  0E14               	movlw	20
  5001  0014B4                     u4377:
  5002  0014B4  2EE8               	decfsz	wreg,f,c
  5003  0014B6  D7FE               	bra	u4377
  5004  0014B8  D000               	nop2	
  5005                           
  5006                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  5007  0014BA  868C               	bsf	3980,3,c	;volatile
  5008                           
  5009                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
  5010  0014BC  0E14               	movlw	20
  5011  0014BE                     u4387:
  5012  0014BE  2EE8               	decfsz	wreg,f,c
  5013  0014C0  D7FE               	bra	u4387
  5014  0014C2  D000               	nop2	
  5015                           
  5016                           ;lcd.c: 46: data = data << 4;
  5017  0014C4  0100               	movlb	0	; () banked
  5018  0014C6  3981               	swapf	lcdNibble@data& (0+255),w,b
  5019  0014C8  0BF0               	andlw	240
  5020  0014CA  0100               	movlb	0	; () banked
  5021  0014CC  6F81               	movwf	lcdNibble@data& (0+255),b
  5022                           
  5023                           ;lcd.c: 48: temp = data & 0xF0;
  5024  0014CE  0100               	movlb	0	; () banked
  5025  0014D0  5181               	movf	lcdNibble@data& (0+255),w,b
  5026  0014D2  0BF0               	andlw	240
  5027  0014D4  0100               	movlb	0	; () banked
  5028  0014D6  6F80               	movwf	lcdNibble@temp& (0+255),b
  5029                           
  5030                           ;lcd.c: 49: LATD = LATD & 0x0F;
  5031  0014D8  508C               	movf	3980,w,c	;volatile
  5032  0014DA  0B0F               	andlw	15
  5033  0014DC  6E8C               	movwf	3980,c	;volatile
  5034                           
  5035                           ;lcd.c: 50: LATD = temp | LATD;
  5036  0014DE  0100               	movlb	0	; () banked
  5037  0014E0  5180               	movf	lcdNibble@temp& (0+255),w,b
  5038  0014E2  108C               	iorwf	3980,w,c	;volatile
  5039  0014E4  6E8C               	movwf	3980,c	;volatile
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  5043  0014E6  968C               	bcf	3980,3,c	;volatile
  5044                           
  5045                           ; BSR set to: 0
  5046                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
  5047  0014E8  0E14               	movlw	20
  5048  0014EA                     u4397:
  5049  0014EA  2EE8               	decfsz	wreg,f,c
  5050  0014EC  D7FE               	bra	u4397
  5051  0014EE  D000               	nop2	
  5052                           
  5053                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  5054  0014F0  868C               	bsf	3980,3,c	;volatile
  5055                           
  5056                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
  5057  0014F2  0E14               	movlw	20
  5058  0014F4                     u4407:
  5059  0014F4  2EE8               	decfsz	wreg,f,c
  5060  0014F6  D7FE               	bra	u4407
  5061  0014F8  D000               	nop2	
  5062  0014FA  0012               	return		;funcret
  5063  0014FC                     __end_of_lcdNibble:
  5064                           	opt stack 0
  5065                           tosu	equ	0xFFF
  5066                           tosh	equ	0xFFE
  5067                           tosl	equ	0xFFD
  5068                           pclath	equ	0xFFA
  5069                           tblptru	equ	0xFF8
  5070                           tblptrh	equ	0xFF7
  5071                           tblptrl	equ	0xFF6
  5072                           tablat	equ	0xFF5
  5073                           prodh	equ	0xFF4
  5074                           prodl	equ	0xFF3
  5075                           intcon	equ	0xFF2
  5076                           intcon3	equ	0xFF0
  5077                           postinc0	equ	0xFEE
  5078                           wreg	equ	0xFE8
  5079                           indf2	equ	0xFDF
  5080                           postinc2	equ	0xFDE
  5081                           postdec2	equ	0xFDD
  5082                           fsr2h	equ	0xFDA
  5083                           fsr2l	equ	0xFD9
  5084                           status	equ	0xFD8
  5085                           
  5086 ;; *************** function _done_sorting *****************
  5087 ;; Defined at:
  5088 ;;		line 159 in file "operation.c"
  5089 ;; Parameters:    Size  Location     Type
  5090 ;;		None
  5091 ;; Auto vars:     Size  Location     Type
  5092 ;;  i               1   23[BANK0 ] unsigned char 
  5093 ;;  End_time        2   24[BANK0 ] unsigned char [2]
  5094 ;;  total_second    2   21[BANK0 ] int 
  5095 ;; Return value:  Size  Location     Type
  5096 ;;                  2   14[BANK0 ] int 
  5097 ;; Registers used:
  5098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5099 ;; Tracked objects:
  5100 ;;		On entry : 0/0
  5101 ;;		On exit  : 0/0
  5102 ;;		Unchanged: 0/0
  5103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5104 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5105 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5106 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5107 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;Total ram usage:       12 bytes
  5109 ;; Hardware stack levels used:    1
  5110 ;; Hardware stack levels required when called:    7
  5111 ;; This function calls:
  5112 ;;		_I2C_Master_Read
  5113 ;;		_I2C_Master_Start
  5114 ;;		_I2C_Master_Stop
  5115 ;;		_I2C_Master_Write
  5116 ;;		___awdiv
  5117 ;;		___wmul
  5118 ;; This function is called by:
  5119 ;;		_main
  5120 ;; This function uses a non-reentrant model
  5121 ;;
  5122                           
  5123                           	psect	text24
  5124  0009F2                     __ptext24:
  5125                           	opt stack 0
  5126  0009F2                     _done_sorting:
  5127                           	opt stack 23
  5128                           
  5129                           ;operation.c: 161: fsm1 = 0;
  5130                           
  5131                           ;incstack = 0
  5132  0009F2  0E00               	movlw	0
  5133  0009F4  0100               	movlb	0	; () banked
  5134  0009F6  6FCA               	movwf	(_fsm1+1)& (0+255),b
  5135  0009F8  0E00               	movlw	0
  5136  0009FA  6FC9               	movwf	_fsm1& (0+255),b
  5137                           
  5138                           ; BSR set to: 0
  5139                           ;operation.c: 164: signed int total_second;
  5140                           ;operation.c: 165: unsigned char End_time[2];
  5141                           ;operation.c: 168: I2C_Master_Start();
  5142  0009FC  EC14  F00E         	call	_I2C_Master_Start	;wreg free
  5143                           
  5144                           ;operation.c: 169: I2C_Master_Write(0b11010000);
  5145  000A00  0E00               	movlw	0
  5146  000A02  0100               	movlb	0	; () banked
  5147  000A04  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5148  000A06  0ED0               	movlw	208
  5149  000A08  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5150  000A0A  EC0B  F00E         	call	_I2C_Master_Write	;wreg free
  5151                           
  5152                           ;operation.c: 170: I2C_Master_Write(0x00);
  5153  000A0E  0E00               	movlw	0
  5154  000A10  0100               	movlb	0	; () banked
  5155  000A12  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5156  000A14  0E00               	movlw	0
  5157  000A16  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5158  000A18  EC0B  F00E         	call	_I2C_Master_Write	;wreg free
  5159                           
  5160                           ;operation.c: 171: I2C_Master_Stop();
  5161  000A1C  EC10  F00E         	call	_I2C_Master_Stop	;wreg free
  5162                           
  5163                           ;operation.c: 174: I2C_Master_Start();
  5164  000A20  EC14  F00E         	call	_I2C_Master_Start	;wreg free
  5165                           
  5166                           ;operation.c: 175: I2C_Master_Write(0b11010001);
  5167  000A24  0E00               	movlw	0
  5168  000A26  0100               	movlb	0	; () banked
  5169  000A28  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5170  000A2A  0ED1               	movlw	209
  5171  000A2C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5172  000A2E  EC0B  F00E         	call	_I2C_Master_Write	;wreg free
  5173                           
  5174                           ;operation.c: 176: for(unsigned char i=0;i<0x06;i++){
  5175  000A32  0E00               	movlw	0
  5176  000A34  0100               	movlb	0	; () banked
  5177  000A36  6F97               	movwf	done_sorting@i& (0+255),b
  5178  000A38                     l4259:
  5179                           
  5180                           ; BSR set to: 0
  5181  000A38  0E05               	movlw	5
  5182  000A3A  0100               	movlb	0	; () banked
  5183  000A3C  6597               	cpfsgt	done_sorting@i& (0+255),b
  5184  000A3E  D001               	goto	l4263
  5185  000A40  D010               	goto	l4269
  5186  000A42                     l4263:
  5187                           
  5188                           ; BSR set to: 0
  5189                           ;operation.c: 177: time[i] = I2C_Master_Read(1);
  5190  000A42  0100               	movlb	0	; () banked
  5191  000A44  5197               	movf	done_sorting@i& (0+255),w,b
  5192  000A46  0D01               	mullw	1
  5193  000A48  0EB2               	movlw	low _time
  5194  000A4A  24F3               	addwf	prodl,w,c
  5195  000A4C  6ED9               	movwf	fsr2l,c
  5196  000A4E  0E00               	movlw	high _time
  5197  000A50  20F4               	addwfc	prodh,w,c
  5198  000A52  6EDA               	movwf	fsr2h,c
  5199  000A54  0E01               	movlw	1
  5200  000A56  EC34  F00D         	call	_I2C_Master_Read
  5201  000A5A  6EDF               	movwf	indf2,c
  5202  000A5C  0100               	movlb	0	; () banked
  5203  000A5E  2B97               	incf	done_sorting@i& (0+255),f,b
  5204  000A60  D7EB               	goto	l4259
  5205  000A62                     l4269:
  5206                           
  5207                           ; BSR set to: 0
  5208                           ;operation.c: 178: }
  5209                           ;operation.c: 179: time[6] = I2C_Master_Read(0);
  5210  000A62  0E00               	movlw	0
  5211  000A64  EC34  F00D         	call	_I2C_Master_Read
  5212  000A68  0100               	movlb	0	; () banked
  5213  000A6A  6FB8               	movwf	(_time+6)& (0+255),b
  5214                           
  5215                           ;operation.c: 180: I2C_Master_Stop();
  5216  000A6C  EC10  F00E         	call	_I2C_Master_Stop	;wreg free
  5217                           
  5218                           ;operation.c: 182: End_time[2] = time[2];
  5219  000A70  C0B4  F09A         	movff	_time+2,done_sorting@End_time+2
  5220                           
  5221                           ;operation.c: 183: End_time[1] = time[1];
  5222  000A74  C0B3  F099         	movff	_time+1,done_sorting@End_time+1
  5223                           
  5224                           ;operation.c: 184: End_time[0] = time[0];
  5225  000A78  C0B2  F098         	movff	_time,done_sorting@End_time
  5226                           
  5227                           ;operation.c: 186: total_start = (Start_time[1]/16*10 + Start_time[1]%16)*60 + (Start_ti
      +                          me[0]/16*10 + Start_time[0]%16);
  5228  000A7C  C0C2  F090         	movff	_Start_time+1,??_done_sorting
  5229  000A80  0E0F               	movlw	15
  5230  000A82  0100               	movlb	0	; () banked
  5231  000A84  1790               	andwf	??_done_sorting& (0+255),f,b
  5232  000A86  0E00               	movlw	0
  5233  000A88  0100               	movlb	0	; () banked
  5234  000A8A  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  5235  000A8C  0E10               	movlw	16
  5236  000A8E  6F82               	movwf	___awdiv@divisor& (0+255),b
  5237  000A90  C0C2  F080         	movff	_Start_time+1,___awdiv@dividend
  5238  000A94  0100               	movlb	0	; () banked
  5239  000A96  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  5240  000A98  EC5A  F008         	call	___awdiv	;wreg free
  5241  000A9C  C080  F088         	movff	?___awdiv,___wmul@multiplier
  5242  000AA0  C081  F089         	movff	?___awdiv+1,___wmul@multiplier+1
  5243  000AA4  0E00               	movlw	0
  5244  000AA6  0100               	movlb	0	; () banked
  5245  000AA8  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5246  000AAA  0E0A               	movlw	10
  5247  000AAC  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  5248  000AAE  EC19  F00D         	call	___wmul	;wreg free
  5249  000AB2  0100               	movlb	0	; () banked
  5250  000AB4  5190               	movf	??_done_sorting& (0+255),w,b
  5251  000AB6  0100               	movlb	0	; () banked
  5252  000AB8  2588               	addwf	?___wmul& (0+255),w,b
  5253  000ABA  0100               	movlb	0	; () banked
  5254  000ABC  6F93               	movwf	_done_sorting$1433& (0+255),b
  5255  000ABE  0100               	movlb	0	; () banked
  5256  000AC0  0E00               	movlw	0
  5257  000AC2  0100               	movlb	0	; () banked
  5258  000AC4  2189               	addwfc	(?___wmul+1)& (0+255),w,b
  5259  000AC6  0100               	movlb	0	; () banked
  5260  000AC8  6F94               	movwf	(_done_sorting$1433+1)& (0+255),b
  5261                           
  5262                           ; BSR set to: 0
  5263                           ;operation.c: 186: total_start = (Start_time[1]/16*10 + Start_time[1]%16)*60 + (Start_ti
      +                          me[0]/16*10 + Start_time[0]%16);
  5264  000ACA  0E00               	movlw	0
  5265  000ACC  0100               	movlb	0	; () banked
  5266  000ACE  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  5267  000AD0  0E10               	movlw	16
  5268  000AD2  6F82               	movwf	___awdiv@divisor& (0+255),b
  5269  000AD4  C0C1  F080         	movff	_Start_time,___awdiv@dividend
  5270  000AD8  0100               	movlb	0	; () banked
  5271  000ADA  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  5272  000ADC  EC5A  F008         	call	___awdiv	;wreg free
  5273  000AE0  C080  F088         	movff	?___awdiv,___wmul@multiplier
  5274  000AE4  C081  F089         	movff	?___awdiv+1,___wmul@multiplier+1
  5275  000AE8  0E00               	movlw	0
  5276  000AEA  0100               	movlb	0	; () banked
  5277  000AEC  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5278  000AEE  0E0A               	movlw	10
  5279  000AF0  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  5280  000AF2  EC19  F00D         	call	___wmul	;wreg free
  5281  000AF6  C088  F090         	movff	?___wmul,??_done_sorting
  5282  000AFA  C089  F091         	movff	?___wmul+1,??_done_sorting+1
  5283  000AFE  C0C1  F092         	movff	_Start_time,??_done_sorting+2
  5284  000B02  0E0F               	movlw	15
  5285  000B04  0100               	movlb	0	; () banked
  5286  000B06  1792               	andwf	(??_done_sorting+2)& (0+255),f,b
  5287  000B08  0100               	movlb	0	; () banked
  5288  000B0A  5192               	movf	(??_done_sorting+2)& (0+255),w,b
  5289  000B0C  0100               	movlb	0	; () banked
  5290  000B0E  2790               	addwf	??_done_sorting& (0+255),f,b
  5291  000B10  0E00               	movlw	0
  5292  000B12  2391               	addwfc	(??_done_sorting+1)& (0+255),f,b
  5293  000B14  C093  F088         	movff	_done_sorting$1433,___wmul@multiplier
  5294  000B18  C094  F089         	movff	_done_sorting$1433+1,___wmul@multiplier+1
  5295  000B1C  0E00               	movlw	0
  5296  000B1E  0100               	movlb	0	; () banked
  5297  000B20  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5298  000B22  0E3C               	movlw	60
  5299  000B24  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  5300  000B26  EC19  F00D         	call	___wmul	;wreg free
  5301  000B2A  0100               	movlb	0	; () banked
  5302  000B2C  5188               	movf	?___wmul& (0+255),w,b
  5303  000B2E  0100               	movlb	0	; () banked
  5304  000B30  2790               	addwf	??_done_sorting& (0+255),f,b
  5305  000B32  0100               	movlb	0	; () banked
  5306  000B34  5189               	movf	(?___wmul+1)& (0+255),w,b
  5307  000B36  0100               	movlb	0	; () banked
  5308  000B38  2391               	addwfc	(??_done_sorting+1)& (0+255),f,b
  5309  000B3A  C090  F0BD         	movff	??_done_sorting,_total_start
  5310  000B3E  C091  F0BE         	movff	??_done_sorting+1,_total_start+1
  5311  000B42  0100               	movlb	0	; () banked
  5312  000B44  0E00               	movlw	0
  5313  000B46  BFBE               	btfsc	(_total_start+1)& (0+255),7,b
  5314  000B48  0EFF               	movlw	-1
  5315  000B4A  6FBF               	movwf	(_total_start+2)& (0+255),b
  5316  000B4C  6FC0               	movwf	(_total_start+3)& (0+255),b
  5317                           
  5318                           ; BSR set to: 0
  5319                           ;operation.c: 187: total_end = (End_time[1]/16*10 + End_time[1]%16)*60 + (End_time[0]/16
      +                          *10 + End_time[0]%16);
  5320  000B4E  C099  F090         	movff	done_sorting@End_time+1,??_done_sorting
  5321  000B52  0E0F               	movlw	15
  5322  000B54  0100               	movlb	0	; () banked
  5323  000B56  1790               	andwf	??_done_sorting& (0+255),f,b
  5324  000B58  0E00               	movlw	0
  5325  000B5A  0100               	movlb	0	; () banked
  5326  000B5C  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  5327  000B5E  0E10               	movlw	16
  5328  000B60  6F82               	movwf	___awdiv@divisor& (0+255),b
  5329  000B62  C099  F080         	movff	done_sorting@End_time+1,___awdiv@dividend
  5330  000B66  0100               	movlb	0	; () banked
  5331  000B68  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  5332  000B6A  EC5A  F008         	call	___awdiv	;wreg free
  5333  000B6E  C080  F088         	movff	?___awdiv,___wmul@multiplier
  5334  000B72  C081  F089         	movff	?___awdiv+1,___wmul@multiplier+1
  5335  000B76  0E00               	movlw	0
  5336  000B78  0100               	movlb	0	; () banked
  5337  000B7A  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5338  000B7C  0E0A               	movlw	10
  5339  000B7E  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  5340  000B80  EC19  F00D         	call	___wmul	;wreg free
  5341  000B84  0100               	movlb	0	; () banked
  5342  000B86  5190               	movf	??_done_sorting& (0+255),w,b
  5343  000B88  0100               	movlb	0	; () banked
  5344  000B8A  2588               	addwf	?___wmul& (0+255),w,b
  5345  000B8C  0100               	movlb	0	; () banked
  5346  000B8E  6F93               	movwf	_done_sorting$1433& (0+255),b
  5347  000B90  0100               	movlb	0	; () banked
  5348  000B92  0E00               	movlw	0
  5349  000B94  0100               	movlb	0	; () banked
  5350  000B96  2189               	addwfc	(?___wmul+1)& (0+255),w,b
  5351  000B98  0100               	movlb	0	; () banked
  5352  000B9A  6F94               	movwf	(_done_sorting$1433+1)& (0+255),b
  5353                           
  5354                           ; BSR set to: 0
  5355                           ;operation.c: 187: total_end = (End_time[1]/16*10 + End_time[1]%16)*60 + (End_time[0]/16
      +                          *10 + End_time[0]%16);
  5356  000B9C  0E00               	movlw	0
  5357  000B9E  0100               	movlb	0	; () banked
  5358  000BA0  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  5359  000BA2  0E10               	movlw	16
  5360  000BA4  6F82               	movwf	___awdiv@divisor& (0+255),b
  5361  000BA6  C098  F080         	movff	done_sorting@End_time,___awdiv@dividend
  5362  000BAA  0100               	movlb	0	; () banked
  5363  000BAC  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  5364  000BAE  EC5A  F008         	call	___awdiv	;wreg free
  5365  000BB2  C080  F088         	movff	?___awdiv,___wmul@multiplier
  5366  000BB6  C081  F089         	movff	?___awdiv+1,___wmul@multiplier+1
  5367  000BBA  0E00               	movlw	0
  5368  000BBC  0100               	movlb	0	; () banked
  5369  000BBE  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5370  000BC0  0E0A               	movlw	10
  5371  000BC2  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  5372  000BC4  EC19  F00D         	call	___wmul	;wreg free
  5373  000BC8  C088  F090         	movff	?___wmul,??_done_sorting
  5374  000BCC  C089  F091         	movff	?___wmul+1,??_done_sorting+1
  5375  000BD0  C098  F092         	movff	done_sorting@End_time,??_done_sorting+2
  5376  000BD4  0E0F               	movlw	15
  5377  000BD6  0100               	movlb	0	; () banked
  5378  000BD8  1792               	andwf	(??_done_sorting+2)& (0+255),f,b
  5379  000BDA  0100               	movlb	0	; () banked
  5380  000BDC  5192               	movf	(??_done_sorting+2)& (0+255),w,b
  5381  000BDE  0100               	movlb	0	; () banked
  5382  000BE0  2790               	addwf	??_done_sorting& (0+255),f,b
  5383  000BE2  0E00               	movlw	0
  5384  000BE4  2391               	addwfc	(??_done_sorting+1)& (0+255),f,b
  5385  000BE6  C093  F088         	movff	_done_sorting$1433,___wmul@multiplier
  5386  000BEA  C094  F089         	movff	_done_sorting$1433+1,___wmul@multiplier+1
  5387  000BEE  0E00               	movlw	0
  5388  000BF0  0100               	movlb	0	; () banked
  5389  000BF2  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5390  000BF4  0E3C               	movlw	60
  5391  000BF6  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  5392  000BF8  EC19  F00D         	call	___wmul	;wreg free
  5393  000BFC  0100               	movlb	0	; () banked
  5394  000BFE  5188               	movf	?___wmul& (0+255),w,b
  5395  000C00  0100               	movlb	0	; () banked
  5396  000C02  2790               	addwf	??_done_sorting& (0+255),f,b
  5397  000C04  0100               	movlb	0	; () banked
  5398  000C06  5189               	movf	(?___wmul+1)& (0+255),w,b
  5399  000C08  0100               	movlb	0	; () banked
  5400  000C0A  2391               	addwfc	(??_done_sorting+1)& (0+255),f,b
  5401  000C0C  C090  F0B9         	movff	??_done_sorting,_total_end
  5402  000C10  C091  F0BA         	movff	??_done_sorting+1,_total_end+1
  5403  000C14  0100               	movlb	0	; () banked
  5404  000C16  0E00               	movlw	0
  5405  000C18  BFBA               	btfsc	(_total_end+1)& (0+255),7,b
  5406  000C1A  0EFF               	movlw	-1
  5407  000C1C  6FBB               	movwf	(_total_end+2)& (0+255),b
  5408  000C1E  6FBC               	movwf	(_total_end+3)& (0+255),b
  5409                           
  5410                           ; BSR set to: 0
  5411                           ;operation.c: 188: total_second = total_end - total_start;
  5412  000C20  C0BD  F090         	movff	_total_start,??_done_sorting
  5413  000C24  C0BE  F091         	movff	_total_start+1,??_done_sorting+1
  5414  000C28  0100               	movlb	0	; () banked
  5415  000C2A  1F90               	comf	??_done_sorting& (0+255),f,b
  5416  000C2C  1F91               	comf	(??_done_sorting+1)& (0+255),f,b
  5417  000C2E  4B90               	infsnz	??_done_sorting& (0+255),f,b
  5418  000C30  2B91               	incf	(??_done_sorting+1)& (0+255),f,b
  5419  000C32  0100               	movlb	0	; () banked
  5420  000C34  51B9               	movf	_total_end& (0+255),w,b
  5421  000C36  0100               	movlb	0	; () banked
  5422  000C38  2590               	addwf	??_done_sorting& (0+255),w,b
  5423  000C3A  0100               	movlb	0	; () banked
  5424  000C3C  6F95               	movwf	done_sorting@total_second& (0+255),b
  5425  000C3E  0100               	movlb	0	; () banked
  5426  000C40  51BA               	movf	(_total_end+1)& (0+255),w,b
  5427  000C42  0100               	movlb	0	; () banked
  5428  000C44  2191               	addwfc	(??_done_sorting+1)& (0+255),w,b
  5429  000C46  0100               	movlb	0	; () banked
  5430  000C48  6F96               	movwf	(done_sorting@total_second+1)& (0+255),b
  5431                           
  5432                           ; BSR set to: 0
  5433                           ;operation.c: 190: if(total_second <= 0){
  5434  000C4A  0100               	movlb	0	; () banked
  5435  000C4C  BF96               	btfsc	(done_sorting@total_second+1)& (0+255),7,b
  5436  000C4E  D007               	goto	l4289
  5437  000C50  0100               	movlb	0	; () banked
  5438  000C52  5196               	movf	(done_sorting@total_second+1)& (0+255),w,b
  5439  000C54  E10E               	bnz	l4291
  5440  000C56  0100               	movlb	0	; () banked
  5441  000C58  0595               	decf	done_sorting@total_second& (0+255),w,b
  5442  000C5A  B0D8               	btfsc	status,0,c
  5443  000C5C  D00A               	goto	l4291
  5444  000C5E                     l4289:
  5445                           
  5446                           ; BSR set to: 0
  5447                           ;operation.c: 191: total_second = 3600 + total_second;
  5448  000C5E  0E10               	movlw	16
  5449  000C60  0100               	movlb	0	; () banked
  5450  000C62  2595               	addwf	done_sorting@total_second& (0+255),w,b
  5451  000C64  0100               	movlb	0	; () banked
  5452  000C66  6F95               	movwf	done_sorting@total_second& (0+255),b
  5453  000C68  0E0E               	movlw	14
  5454  000C6A  0100               	movlb	0	; () banked
  5455  000C6C  2196               	addwfc	(done_sorting@total_second+1)& (0+255),w,b
  5456  000C6E  0100               	movlb	0	; () banked
  5457  000C70  6F96               	movwf	(done_sorting@total_second+1)& (0+255),b
  5458  000C72                     l4291:
  5459                           
  5460                           ; BSR set to: 0
  5461                           ;operation.c: 192: }
  5462                           ;operation.c: 193: return total_second;
  5463  000C72  C095  F08E         	movff	done_sorting@total_second,?_done_sorting
  5464  000C76  C096  F08F         	movff	done_sorting@total_second+1,?_done_sorting+1
  5465  000C7A  0012               	return	
  5466  000C7C                     __end_of_done_sorting:
  5467                           	opt stack 0
  5468                           tosu	equ	0xFFF
  5469                           tosh	equ	0xFFE
  5470                           tosl	equ	0xFFD
  5471                           pclath	equ	0xFFA
  5472                           tblptru	equ	0xFF8
  5473                           tblptrh	equ	0xFF7
  5474                           tblptrl	equ	0xFF6
  5475                           tablat	equ	0xFF5
  5476                           prodh	equ	0xFF4
  5477                           prodl	equ	0xFF3
  5478                           intcon	equ	0xFF2
  5479                           intcon3	equ	0xFF0
  5480                           postinc0	equ	0xFEE
  5481                           wreg	equ	0xFE8
  5482                           indf2	equ	0xFDF
  5483                           postinc2	equ	0xFDE
  5484                           postdec2	equ	0xFDD
  5485                           fsr2h	equ	0xFDA
  5486                           fsr2l	equ	0xFD9
  5487                           status	equ	0xFD8
  5488                           
  5489 ;; *************** function ___wmul *****************
  5490 ;; Defined at:
  5491 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/Umul16.c"
  5492 ;; Parameters:    Size  Location     Type
  5493 ;;  multiplier      2    8[BANK0 ] unsigned int 
  5494 ;;  multiplicand    2   10[BANK0 ] unsigned int 
  5495 ;; Auto vars:     Size  Location     Type
  5496 ;;  product         2   12[BANK0 ] unsigned int 
  5497 ;; Return value:  Size  Location     Type
  5498 ;;                  2    8[BANK0 ] unsigned int 
  5499 ;; Registers used:
  5500 ;;		wreg, status,2, status,0, prodl, prodh
  5501 ;; Tracked objects:
  5502 ;;		On entry : 0/0
  5503 ;;		On exit  : 0/0
  5504 ;;		Unchanged: 0/0
  5505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5506 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5507 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5509 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5510 ;;Total ram usage:        6 bytes
  5511 ;; Hardware stack levels used:    1
  5512 ;; Hardware stack levels required when called:    5
  5513 ;; This function calls:
  5514 ;;		Nothing
  5515 ;; This function is called by:
  5516 ;;		_done_sorting
  5517 ;;		_printf
  5518 ;; This function uses a non-reentrant model
  5519 ;;
  5520                           
  5521                           	psect	text25
  5522  001A32                     __ptext25:
  5523                           	opt stack 0
  5524  001A32                     ___wmul:
  5525                           	opt stack 22
  5526                           
  5527                           ; BSR set to: 0
  5528                           ;incstack = 0
  5529  001A32  0100               	movlb	0	; () banked
  5530  001A34  5188               	movf	___wmul@multiplier& (0+255),w,b
  5531  001A36  0100               	movlb	0	; () banked
  5532  001A38  038A               	mulwf	___wmul@multiplicand& (0+255),b
  5533  001A3A  CFF3 F08C          	movff	prodl,___wmul@product
  5534  001A3E  CFF4 F08D          	movff	prodh,___wmul@product+1
  5535  001A42  0100               	movlb	0	; () banked
  5536  001A44  5188               	movf	___wmul@multiplier& (0+255),w,b
  5537  001A46  0100               	movlb	0	; () banked
  5538  001A48  038B               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  5539  001A4A  50F3               	movf	prodl,w,c
  5540  001A4C  0100               	movlb	0	; () banked
  5541  001A4E  278D               	addwf	(___wmul@product+1)& (0+255),f,b
  5542  001A50  0100               	movlb	0	; () banked
  5543  001A52  5189               	movf	(___wmul@multiplier+1)& (0+255),w,b
  5544  001A54  0100               	movlb	0	; () banked
  5545  001A56  038A               	mulwf	___wmul@multiplicand& (0+255),b
  5546  001A58  50F3               	movf	prodl,w,c
  5547  001A5A  0100               	movlb	0	; () banked
  5548  001A5C  278D               	addwf	(___wmul@product+1)& (0+255),f,b
  5549                           
  5550                           ; BSR set to: 0
  5551  001A5E  C08C  F088         	movff	___wmul@product,?___wmul
  5552  001A62  C08D  F089         	movff	___wmul@product+1,?___wmul+1
  5553  001A66  0012               	return	
  5554  001A68                     __end_of___wmul:
  5555                           	opt stack 0
  5556                           tosu	equ	0xFFF
  5557                           tosh	equ	0xFFE
  5558                           tosl	equ	0xFFD
  5559                           pclath	equ	0xFFA
  5560                           tblptru	equ	0xFF8
  5561                           tblptrh	equ	0xFF7
  5562                           tblptrl	equ	0xFF6
  5563                           tablat	equ	0xFF5
  5564                           prodh	equ	0xFF4
  5565                           prodl	equ	0xFF3
  5566                           intcon	equ	0xFF2
  5567                           intcon3	equ	0xFF0
  5568                           postinc0	equ	0xFEE
  5569                           wreg	equ	0xFE8
  5570                           indf2	equ	0xFDF
  5571                           postinc2	equ	0xFDE
  5572                           postdec2	equ	0xFDD
  5573                           fsr2h	equ	0xFDA
  5574                           fsr2l	equ	0xFD9
  5575                           status	equ	0xFD8
  5576                           
  5577 ;; *************** function ___awdiv *****************
  5578 ;; Defined at:
  5579 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awdiv.c"
  5580 ;; Parameters:    Size  Location     Type
  5581 ;;  dividend        2    0[BANK0 ] int 
  5582 ;;  divisor         2    2[BANK0 ] int 
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;  quotient        2    6[BANK0 ] int 
  5585 ;;  sign            1    5[BANK0 ] unsigned char 
  5586 ;;  counter         1    4[BANK0 ] unsigned char 
  5587 ;; Return value:  Size  Location     Type
  5588 ;;                  2    0[BANK0 ] int 
  5589 ;; Registers used:
  5590 ;;		wreg, status,2, status,0
  5591 ;; Tracked objects:
  5592 ;;		On entry : 0/0
  5593 ;;		On exit  : 0/0
  5594 ;;		Unchanged: 0/0
  5595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5596 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5597 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5599 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5600 ;;Total ram usage:        8 bytes
  5601 ;; Hardware stack levels used:    1
  5602 ;; Hardware stack levels required when called:    5
  5603 ;; This function calls:
  5604 ;;		Nothing
  5605 ;; This function is called by:
  5606 ;;		_done_sorting
  5607 ;; This function uses a non-reentrant model
  5608 ;;
  5609                           
  5610                           	psect	text26
  5611  0010B4                     __ptext26:
  5612                           	opt stack 0
  5613  0010B4                     ___awdiv:
  5614                           	opt stack 24
  5615                           
  5616                           ; BSR set to: 0
  5617                           ;incstack = 0
  5618  0010B4  0E00               	movlw	0
  5619  0010B6  0100               	movlb	0	; () banked
  5620  0010B8  6F85               	movwf	___awdiv@sign& (0+255),b
  5621                           
  5622                           ; BSR set to: 0
  5623  0010BA  0100               	movlb	0	; () banked
  5624  0010BC  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5625  0010BE  D008               	goto	l4095
  5626                           
  5627                           ; BSR set to: 0
  5628  0010C0  0100               	movlb	0	; () banked
  5629  0010C2  6D82               	negf	___awdiv@divisor& (0+255),b
  5630  0010C4  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5631  0010C6  B0D8               	btfsc	status,0,c
  5632  0010C8  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5633                           
  5634                           ; BSR set to: 0
  5635  0010CA  0E01               	movlw	1
  5636  0010CC  0100               	movlb	0	; () banked
  5637  0010CE  6F85               	movwf	___awdiv@sign& (0+255),b
  5638  0010D0                     l4095:
  5639                           
  5640                           ; BSR set to: 0
  5641  0010D0  0100               	movlb	0	; () banked
  5642  0010D2  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5643  0010D4  D008               	goto	l4101
  5644                           
  5645                           ; BSR set to: 0
  5646  0010D6  0100               	movlb	0	; () banked
  5647  0010D8  6D80               	negf	___awdiv@dividend& (0+255),b
  5648  0010DA  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5649  0010DC  B0D8               	btfsc	status,0,c
  5650  0010DE  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5651                           
  5652                           ; BSR set to: 0
  5653  0010E0  0E01               	movlw	1
  5654  0010E2  0100               	movlb	0	; () banked
  5655  0010E4  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  5656  0010E6                     l4101:
  5657                           
  5658                           ; BSR set to: 0
  5659  0010E6  0E00               	movlw	0
  5660  0010E8  0100               	movlb	0	; () banked
  5661  0010EA  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  5662  0010EC  0E00               	movlw	0
  5663  0010EE  6F86               	movwf	___awdiv@quotient& (0+255),b
  5664                           
  5665                           ; BSR set to: 0
  5666  0010F0  0100               	movlb	0	; () banked
  5667  0010F2  5182               	movf	___awdiv@divisor& (0+255),w,b
  5668  0010F4  0100               	movlb	0	; () banked
  5669  0010F6  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5670  0010F8  B4D8               	btfsc	status,2,c
  5671  0010FA  D02C               	goto	l4123
  5672                           
  5673                           ; BSR set to: 0
  5674  0010FC  0E01               	movlw	1
  5675  0010FE  0100               	movlb	0	; () banked
  5676  001100  6F84               	movwf	___awdiv@counter& (0+255),b
  5677  001102  D006               	goto	l4109
  5678  001104                     l4107:
  5679                           
  5680                           ; BSR set to: 0
  5681  001104  0100               	movlb	0	; () banked
  5682  001106  90D8               	bcf	status,0,c
  5683  001108  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  5684  00110A  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5685  00110C  0100               	movlb	0	; () banked
  5686  00110E  2B84               	incf	___awdiv@counter& (0+255),f,b
  5687  001110                     l4109:
  5688                           
  5689                           ; BSR set to: 0
  5690  001110  0100               	movlb	0	; () banked
  5691  001112  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5692  001114  D7F7               	goto	l4107
  5693  001116                     l4111:
  5694                           
  5695                           ; BSR set to: 0
  5696  001116  0100               	movlb	0	; () banked
  5697  001118  90D8               	bcf	status,0,c
  5698  00111A  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  5699  00111C  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5700                           
  5701                           ; BSR set to: 0
  5702  00111E  0100               	movlb	0	; () banked
  5703  001120  5182               	movf	___awdiv@divisor& (0+255),w,b
  5704  001122  0100               	movlb	0	; () banked
  5705  001124  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  5706  001126  0100               	movlb	0	; () banked
  5707  001128  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5708  00112A  0100               	movlb	0	; () banked
  5709  00112C  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5710  00112E  A0D8               	btfss	status,0,c
  5711  001130  D00A               	goto	l4119
  5712                           
  5713                           ; BSR set to: 0
  5714  001132  0100               	movlb	0	; () banked
  5715  001134  5182               	movf	___awdiv@divisor& (0+255),w,b
  5716  001136  0100               	movlb	0	; () banked
  5717  001138  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  5718  00113A  0100               	movlb	0	; () banked
  5719  00113C  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5720  00113E  0100               	movlb	0	; () banked
  5721  001140  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5722                           
  5723                           ; BSR set to: 0
  5724  001142  0100               	movlb	0	; () banked
  5725  001144  8186               	bsf	___awdiv@quotient& (0+255),0,b
  5726  001146                     l4119:
  5727                           
  5728                           ; BSR set to: 0
  5729  001146  0100               	movlb	0	; () banked
  5730  001148  90D8               	bcf	status,0,c
  5731  00114A  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5732  00114C  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  5733                           
  5734                           ; BSR set to: 0
  5735  00114E  0100               	movlb	0	; () banked
  5736  001150  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  5737  001152  D7E1               	goto	l4111
  5738  001154                     l4123:
  5739                           
  5740                           ; BSR set to: 0
  5741  001154  0100               	movlb	0	; () banked
  5742  001156  5185               	movf	___awdiv@sign& (0+255),w,b
  5743  001158  0100               	movlb	0	; () banked
  5744  00115A  B4D8               	btfsc	status,2,c
  5745  00115C  D005               	goto	l4127
  5746                           
  5747                           ; BSR set to: 0
  5748  00115E  0100               	movlb	0	; () banked
  5749  001160  6D86               	negf	___awdiv@quotient& (0+255),b
  5750  001162  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5751  001164  B0D8               	btfsc	status,0,c
  5752  001166  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5753  001168                     l4127:
  5754                           
  5755                           ; BSR set to: 0
  5756  001168  C086  F080         	movff	___awdiv@quotient,?___awdiv
  5757  00116C  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  5758  001170  0012               	return	
  5759  001172                     __end_of___awdiv:
  5760                           	opt stack 0
  5761                           tosu	equ	0xFFF
  5762                           tosh	equ	0xFFE
  5763                           tosl	equ	0xFFD
  5764                           pclath	equ	0xFFA
  5765                           tblptru	equ	0xFF8
  5766                           tblptrh	equ	0xFF7
  5767                           tblptrl	equ	0xFF6
  5768                           tablat	equ	0xFF5
  5769                           prodh	equ	0xFF4
  5770                           prodl	equ	0xFF3
  5771                           intcon	equ	0xFF2
  5772                           intcon3	equ	0xFF0
  5773                           postinc0	equ	0xFEE
  5774                           wreg	equ	0xFE8
  5775                           indf2	equ	0xFDF
  5776                           postinc2	equ	0xFDE
  5777                           postdec2	equ	0xFDD
  5778                           fsr2h	equ	0xFDA
  5779                           fsr2l	equ	0xFD9
  5780                           status	equ	0xFD8
  5781                           
  5782 ;; *************** function _I2C_Master_Write *****************
  5783 ;; Defined at:
  5784 ;;		line 47 in file "I2C.c"
  5785 ;; Parameters:    Size  Location     Type
  5786 ;;  d               2    1[BANK0 ] unsigned int 
  5787 ;; Auto vars:     Size  Location     Type
  5788 ;;		None
  5789 ;; Return value:  Size  Location     Type
  5790 ;;                  1    wreg      void 
  5791 ;; Registers used:
  5792 ;;		wreg, status,2, status,0, cstack
  5793 ;; Tracked objects:
  5794 ;;		On entry : 0/0
  5795 ;;		On exit  : 0/0
  5796 ;;		Unchanged: 0/0
  5797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5798 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5801 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5802 ;;Total ram usage:        2 bytes
  5803 ;; Hardware stack levels used:    1
  5804 ;; Hardware stack levels required when called:    6
  5805 ;; This function calls:
  5806 ;;		_I2C_Master_Wait
  5807 ;; This function is called by:
  5808 ;;		_standby
  5809 ;;		_done_sorting
  5810 ;;		_set_time
  5811 ;; This function uses a non-reentrant model
  5812 ;;
  5813                           
  5814                           	psect	text27
  5815  001C16                     __ptext27:
  5816                           	opt stack 0
  5817  001C16                     _I2C_Master_Write:
  5818                           	opt stack 23
  5819                           
  5820                           ;I2C.c: 49: I2C_Master_Wait();
  5821                           
  5822                           ; BSR set to: 0
  5823                           ;incstack = 0
  5824  001C16  ECE5  F00D         	call	_I2C_Master_Wait	;wreg free
  5825                           
  5826                           ;I2C.c: 50: SSPBUF = d;
  5827  001C1A  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5828  001C1E  0012               	return		;funcret
  5829  001C20                     __end_of_I2C_Master_Write:
  5830                           	opt stack 0
  5831                           tosu	equ	0xFFF
  5832                           tosh	equ	0xFFE
  5833                           tosl	equ	0xFFD
  5834                           pclath	equ	0xFFA
  5835                           tblptru	equ	0xFF8
  5836                           tblptrh	equ	0xFF7
  5837                           tblptrl	equ	0xFF6
  5838                           tablat	equ	0xFF5
  5839                           prodh	equ	0xFF4
  5840                           prodl	equ	0xFF3
  5841                           intcon	equ	0xFF2
  5842                           intcon3	equ	0xFF0
  5843                           postinc0	equ	0xFEE
  5844                           wreg	equ	0xFE8
  5845                           indf2	equ	0xFDF
  5846                           postinc2	equ	0xFDE
  5847                           postdec2	equ	0xFDD
  5848                           fsr2h	equ	0xFDA
  5849                           fsr2l	equ	0xFD9
  5850                           status	equ	0xFD8
  5851                           
  5852 ;; *************** function _I2C_Master_Stop *****************
  5853 ;; Defined at:
  5854 ;;		line 41 in file "I2C.c"
  5855 ;; Parameters:    Size  Location     Type
  5856 ;;		None
  5857 ;; Auto vars:     Size  Location     Type
  5858 ;;		None
  5859 ;; Return value:  Size  Location     Type
  5860 ;;                  1    wreg      void 
  5861 ;; Registers used:
  5862 ;;		wreg, status,2, status,0, cstack
  5863 ;; Tracked objects:
  5864 ;;		On entry : 0/0
  5865 ;;		On exit  : 0/0
  5866 ;;		Unchanged: 0/0
  5867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5872 ;;Total ram usage:        0 bytes
  5873 ;; Hardware stack levels used:    1
  5874 ;; Hardware stack levels required when called:    6
  5875 ;; This function calls:
  5876 ;;		_I2C_Master_Wait
  5877 ;; This function is called by:
  5878 ;;		_standby
  5879 ;;		_done_sorting
  5880 ;;		_set_time
  5881 ;; This function uses a non-reentrant model
  5882 ;;
  5883                           
  5884                           	psect	text28
  5885  001C20                     __ptext28:
  5886                           	opt stack 0
  5887  001C20                     _I2C_Master_Stop:
  5888                           	opt stack 23
  5889                           
  5890                           ;I2C.c: 43: I2C_Master_Wait();
  5891                           
  5892                           ;incstack = 0
  5893  001C20  ECE5  F00D         	call	_I2C_Master_Wait	;wreg free
  5894                           
  5895                           ;I2C.c: 44: PEN = 1;
  5896  001C24  84C5               	bsf	4037,2,c	;volatile
  5897  001C26  0012               	return		;funcret
  5898  001C28                     __end_of_I2C_Master_Stop:
  5899                           	opt stack 0
  5900                           tosu	equ	0xFFF
  5901                           tosh	equ	0xFFE
  5902                           tosl	equ	0xFFD
  5903                           pclath	equ	0xFFA
  5904                           tblptru	equ	0xFF8
  5905                           tblptrh	equ	0xFF7
  5906                           tblptrl	equ	0xFF6
  5907                           tablat	equ	0xFF5
  5908                           prodh	equ	0xFF4
  5909                           prodl	equ	0xFF3
  5910                           intcon	equ	0xFF2
  5911                           intcon3	equ	0xFF0
  5912                           postinc0	equ	0xFEE
  5913                           wreg	equ	0xFE8
  5914                           indf2	equ	0xFDF
  5915                           postinc2	equ	0xFDE
  5916                           postdec2	equ	0xFDD
  5917                           fsr2h	equ	0xFDA
  5918                           fsr2l	equ	0xFD9
  5919                           status	equ	0xFD8
  5920                           
  5921 ;; *************** function _I2C_Master_Start *****************
  5922 ;; Defined at:
  5923 ;;		line 29 in file "I2C.c"
  5924 ;; Parameters:    Size  Location     Type
  5925 ;;		None
  5926 ;; Auto vars:     Size  Location     Type
  5927 ;;		None
  5928 ;; Return value:  Size  Location     Type
  5929 ;;                  1    wreg      void 
  5930 ;; Registers used:
  5931 ;;		wreg, status,2, status,0, cstack
  5932 ;; Tracked objects:
  5933 ;;		On entry : 0/0
  5934 ;;		On exit  : 0/0
  5935 ;;		Unchanged: 0/0
  5936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5941 ;;Total ram usage:        0 bytes
  5942 ;; Hardware stack levels used:    1
  5943 ;; Hardware stack levels required when called:    6
  5944 ;; This function calls:
  5945 ;;		_I2C_Master_Wait
  5946 ;; This function is called by:
  5947 ;;		_standby
  5948 ;;		_done_sorting
  5949 ;;		_set_time
  5950 ;; This function uses a non-reentrant model
  5951 ;;
  5952                           
  5953                           	psect	text29
  5954  001C28                     __ptext29:
  5955                           	opt stack 0
  5956  001C28                     _I2C_Master_Start:
  5957                           	opt stack 23
  5958                           
  5959                           ;I2C.c: 31: I2C_Master_Wait();
  5960                           
  5961                           ;incstack = 0
  5962  001C28  ECE5  F00D         	call	_I2C_Master_Wait	;wreg free
  5963                           
  5964                           ;I2C.c: 32: SEN = 1;
  5965  001C2C  80C5               	bsf	4037,0,c	;volatile
  5966  001C2E  0012               	return		;funcret
  5967  001C30                     __end_of_I2C_Master_Start:
  5968                           	opt stack 0
  5969                           tosu	equ	0xFFF
  5970                           tosh	equ	0xFFE
  5971                           tosl	equ	0xFFD
  5972                           pclath	equ	0xFFA
  5973                           tblptru	equ	0xFF8
  5974                           tblptrh	equ	0xFF7
  5975                           tblptrl	equ	0xFF6
  5976                           tablat	equ	0xFF5
  5977                           prodh	equ	0xFF4
  5978                           prodl	equ	0xFF3
  5979                           intcon	equ	0xFF2
  5980                           intcon3	equ	0xFF0
  5981                           postinc0	equ	0xFEE
  5982                           wreg	equ	0xFE8
  5983                           indf2	equ	0xFDF
  5984                           postinc2	equ	0xFDE
  5985                           postdec2	equ	0xFDD
  5986                           fsr2h	equ	0xFDA
  5987                           fsr2l	equ	0xFD9
  5988                           status	equ	0xFD8
  5989                           
  5990 ;; *************** function _I2C_Master_Read *****************
  5991 ;; Defined at:
  5992 ;;		line 53 in file "I2C.c"
  5993 ;; Parameters:    Size  Location     Type
  5994 ;;  a               1    wreg     unsigned char 
  5995 ;; Auto vars:     Size  Location     Type
  5996 ;;  a               1    1[BANK0 ] unsigned char 
  5997 ;;  temp            1    2[BANK0 ] unsigned char 
  5998 ;; Return value:  Size  Location     Type
  5999 ;;                  1    wreg      unsigned char 
  6000 ;; Registers used:
  6001 ;;		wreg, status,2, status,0, cstack
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6008 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6010 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6011 ;;Total ram usage:        2 bytes
  6012 ;; Hardware stack levels used:    1
  6013 ;; Hardware stack levels required when called:    6
  6014 ;; This function calls:
  6015 ;;		_I2C_Master_Wait
  6016 ;; This function is called by:
  6017 ;;		_standby
  6018 ;;		_done_sorting
  6019 ;; This function uses a non-reentrant model
  6020 ;;
  6021                           
  6022                           	psect	text30
  6023  001A68                     __ptext30:
  6024                           	opt stack 0
  6025  001A68                     _I2C_Master_Read:
  6026                           	opt stack 23
  6027                           
  6028                           ;incstack = 0
  6029                           ;I2C_Master_Read@a stored from wreg
  6030  001A68  0100               	movlb	0	; () banked
  6031  001A6A  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  6032                           
  6033                           ;I2C.c: 55: unsigned char temp;
  6034                           ;I2C.c: 56: I2C_Master_Wait();
  6035  001A6C  ECE5  F00D         	call	_I2C_Master_Wait	;wreg free
  6036                           
  6037                           ;I2C.c: 57: RCEN = 1;
  6038  001A70  86C5               	bsf	4037,3,c	;volatile
  6039                           
  6040                           ;I2C.c: 58: I2C_Master_Wait();
  6041  001A72  ECE5  F00D         	call	_I2C_Master_Wait	;wreg free
  6042                           
  6043                           ;I2C.c: 59: temp = SSPBUF;
  6044  001A76  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  6045                           
  6046                           ;I2C.c: 60: I2C_Master_Wait();
  6047  001A7A  ECE5  F00D         	call	_I2C_Master_Wait	;wreg free
  6048                           
  6049                           ;I2C.c: 61: ACKDT = (a)?0:1;
  6050  001A7E  0100               	movlb	0	; () banked
  6051  001A80  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  6052  001A82  0100               	movlb	0	; () banked
  6053  001A84  A4D8               	btfss	status,2,c
  6054  001A86  D002               	goto	u3600
  6055  001A88  8AC5               	bsf	4037,5,c	;volatile
  6056  001A8A  D001               	goto	l3949
  6057  001A8C                     u3600:
  6058  001A8C  9AC5               	bcf	4037,5,c	;volatile
  6059  001A8E                     l3949:
  6060                           
  6061                           ;I2C.c: 62: ACKEN = 1;
  6062  001A8E  88C5               	bsf	4037,4,c	;volatile
  6063                           
  6064                           ;I2C.c: 63: return temp;
  6065  001A90  0100               	movlb	0	; () banked
  6066  001A92  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  6067  001A94  0012               	return	
  6068  001A96                     __end_of_I2C_Master_Read:
  6069                           	opt stack 0
  6070                           tosu	equ	0xFFF
  6071                           tosh	equ	0xFFE
  6072                           tosl	equ	0xFFD
  6073                           pclath	equ	0xFFA
  6074                           tblptru	equ	0xFF8
  6075                           tblptrh	equ	0xFF7
  6076                           tblptrl	equ	0xFF6
  6077                           tablat	equ	0xFF5
  6078                           prodh	equ	0xFF4
  6079                           prodl	equ	0xFF3
  6080                           intcon	equ	0xFF2
  6081                           intcon3	equ	0xFF0
  6082                           postinc0	equ	0xFEE
  6083                           wreg	equ	0xFE8
  6084                           indf2	equ	0xFDF
  6085                           postinc2	equ	0xFDE
  6086                           postdec2	equ	0xFDD
  6087                           fsr2h	equ	0xFDA
  6088                           fsr2l	equ	0xFD9
  6089                           status	equ	0xFD8
  6090                           
  6091 ;; *************** function _I2C_Master_Wait *****************
  6092 ;; Defined at:
  6093 ;;		line 24 in file "I2C.c"
  6094 ;; Parameters:    Size  Location     Type
  6095 ;;		None
  6096 ;; Auto vars:     Size  Location     Type
  6097 ;;		None
  6098 ;; Return value:  Size  Location     Type
  6099 ;;                  1    wreg      void 
  6100 ;; Registers used:
  6101 ;;		wreg, status,2, status,0
  6102 ;; Tracked objects:
  6103 ;;		On entry : 0/0
  6104 ;;		On exit  : 0/0
  6105 ;;		Unchanged: 0/0
  6106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6109 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6110 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6111 ;;Total ram usage:        1 bytes
  6112 ;; Hardware stack levels used:    1
  6113 ;; Hardware stack levels required when called:    5
  6114 ;; This function calls:
  6115 ;;		Nothing
  6116 ;; This function is called by:
  6117 ;;		_I2C_Master_Start
  6118 ;;		_I2C_Master_Stop
  6119 ;;		_I2C_Master_Write
  6120 ;;		_I2C_Master_Read
  6121 ;;		_I2C_Master_RepeatedStart
  6122 ;; This function uses a non-reentrant model
  6123 ;;
  6124                           
  6125                           	psect	text31
  6126  001BCA                     __ptext31:
  6127                           	opt stack 0
  6128  001BCA                     _I2C_Master_Wait:
  6129                           	opt stack 23
  6130  001BCA                     l44:
  6131  001BCA  B4C7               	btfsc	4039,2,c	;volatile
  6132  001BCC  D7FE               	goto	l44
  6133  001BCE  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  6134  001BD2  0E1F               	movlw	31
  6135  001BD4  0100               	movlb	0	; () banked
  6136  001BD6  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  6137  001BD8  B4D8               	btfsc	status,2,c
  6138  001BDA  0012               	return	
  6139  001BDC  D7F6               	goto	l44
  6140  001BDE                     __end_of_I2C_Master_Wait:
  6141                           	opt stack 0
  6142                           tosu	equ	0xFFF
  6143                           tosh	equ	0xFFE
  6144                           tosl	equ	0xFFD
  6145                           pclath	equ	0xFFA
  6146                           tblptru	equ	0xFF8
  6147                           tblptrh	equ	0xFF7
  6148                           tblptrl	equ	0xFF6
  6149                           tablat	equ	0xFF5
  6150                           prodh	equ	0xFF4
  6151                           prodl	equ	0xFF3
  6152                           intcon	equ	0xFF2
  6153                           intcon3	equ	0xFF0
  6154                           postinc0	equ	0xFEE
  6155                           wreg	equ	0xFE8
  6156                           indf2	equ	0xFDF
  6157                           postinc2	equ	0xFDE
  6158                           postdec2	equ	0xFDD
  6159                           fsr2h	equ	0xFDA
  6160                           fsr2l	equ	0xFD9
  6161                           status	equ	0xFD8
  6162                           
  6163 ;; *************** function _I2C_Master_Init *****************
  6164 ;; Defined at:
  6165 ;;		line 13 in file "I2C.c"
  6166 ;; Parameters:    Size  Location     Type
  6167 ;;  c               4   13[BANK0 ] const unsigned long 
  6168 ;; Auto vars:     Size  Location     Type
  6169 ;;		None
  6170 ;; Return value:  Size  Location     Type
  6171 ;;                  1    wreg      void 
  6172 ;; Registers used:
  6173 ;;		wreg, status,2, status,0, cstack
  6174 ;; Tracked objects:
  6175 ;;		On entry : 0/0
  6176 ;;		On exit  : 0/0
  6177 ;;		Unchanged: 0/0
  6178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6179 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6181 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6182 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6183 ;;Total ram usage:        8 bytes
  6184 ;; Hardware stack levels used:    1
  6185 ;; Hardware stack levels required when called:    6
  6186 ;; This function calls:
  6187 ;;		___lldiv
  6188 ;; This function is called by:
  6189 ;;		_main
  6190 ;; This function uses a non-reentrant model
  6191 ;;
  6192                           
  6193                           	psect	text32
  6194  001626                     __ptext32:
  6195                           	opt stack 0
  6196  001626                     _I2C_Master_Init:
  6197                           	opt stack 24
  6198                           
  6199                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  6200                           
  6201                           ; BSR set to: 0
  6202                           ;incstack = 0
  6203  001626  0E00               	movlw	0
  6204  001628  6EC7               	movwf	4039,c	;volatile
  6205                           
  6206                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  6207  00162A  0E28               	movlw	40
  6208  00162C  6EC6               	movwf	4038,c	;volatile
  6209                           
  6210                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  6211  00162E  0E00               	movlw	0
  6212  001630  6EC5               	movwf	4037,c	;volatile
  6213                           
  6214                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  6215  001632  0E80               	movlw	128
  6216  001634  0100               	movlb	0	; () banked
  6217  001636  6F80               	movwf	___lldiv@dividend& (0+255),b
  6218  001638  0E96               	movlw	150
  6219  00163A  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6220  00163C  0E98               	movlw	152
  6221  00163E  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6222  001640  0E00               	movlw	0
  6223  001642  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6224  001644  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6225  001648  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6226  00164C  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6227  001650  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6228  001654  0E02               	movlw	2
  6229  001656                     u3865:
  6230  001656  90D8               	bcf	status,0,c
  6231  001658  0100               	movlb	0	; () banked
  6232  00165A  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6233  00165C  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6234  00165E  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6235  001660  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6236  001662  2EE8               	decfsz	wreg,f,c
  6237  001664  D7F8               	goto	u3865
  6238  001666  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6239  00166A  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6240  00166E  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6241  001672  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6242  001676  ECB9  F008         	call	___lldiv	;wreg free
  6243  00167A  0100               	movlb	0	; () banked
  6244  00167C  0580               	decf	?___lldiv& (0+255),w,b
  6245  00167E  6EC8               	movwf	4040,c	;volatile
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;I2C.c: 20: TRISC3 = 1;
  6249  001680  8694               	bsf	3988,3,c	;volatile
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;I2C.c: 21: TRISC4 = 1;
  6253  001682  8894               	bsf	3988,4,c	;volatile
  6254                           
  6255                           ; BSR set to: 0
  6256  001684  0012               	return		;funcret
  6257  001686                     __end_of_I2C_Master_Init:
  6258                           	opt stack 0
  6259                           tosu	equ	0xFFF
  6260                           tosh	equ	0xFFE
  6261                           tosl	equ	0xFFD
  6262                           pclath	equ	0xFFA
  6263                           tblptru	equ	0xFF8
  6264                           tblptrh	equ	0xFF7
  6265                           tblptrl	equ	0xFF6
  6266                           tablat	equ	0xFF5
  6267                           prodh	equ	0xFF4
  6268                           prodl	equ	0xFF3
  6269                           intcon	equ	0xFF2
  6270                           intcon3	equ	0xFF0
  6271                           postinc0	equ	0xFEE
  6272                           wreg	equ	0xFE8
  6273                           indf2	equ	0xFDF
  6274                           postinc2	equ	0xFDE
  6275                           postdec2	equ	0xFDD
  6276                           fsr2h	equ	0xFDA
  6277                           fsr2l	equ	0xFD9
  6278                           status	equ	0xFD8
  6279                           
  6280 ;; *************** function ___lldiv *****************
  6281 ;; Defined at:
  6282 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lldiv.c"
  6283 ;; Parameters:    Size  Location     Type
  6284 ;;  dividend        4    0[BANK0 ] unsigned long 
  6285 ;;  divisor         4    4[BANK0 ] unsigned long 
  6286 ;; Auto vars:     Size  Location     Type
  6287 ;;  quotient        4    8[BANK0 ] unsigned long 
  6288 ;;  counter         1   12[BANK0 ] unsigned char 
  6289 ;; Return value:  Size  Location     Type
  6290 ;;                  4    0[BANK0 ] unsigned long 
  6291 ;; Registers used:
  6292 ;;		wreg, status,2, status,0
  6293 ;; Tracked objects:
  6294 ;;		On entry : 0/0
  6295 ;;		On exit  : 0/0
  6296 ;;		Unchanged: 0/0
  6297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6298 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6299 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6301 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6302 ;;Total ram usage:       13 bytes
  6303 ;; Hardware stack levels used:    1
  6304 ;; Hardware stack levels required when called:    5
  6305 ;; This function calls:
  6306 ;;		Nothing
  6307 ;; This function is called by:
  6308 ;;		_I2C_Master_Init
  6309 ;; This function uses a non-reentrant model
  6310 ;;
  6311                           
  6312                           	psect	text33
  6313  001172                     __ptext33:
  6314                           	opt stack 0
  6315  001172                     ___lldiv:
  6316                           	opt stack 24
  6317                           
  6318                           ; BSR set to: 0
  6319                           ;incstack = 0
  6320  001172  0E00               	movlw	0
  6321  001174  0100               	movlb	0	; () banked
  6322  001176  6F88               	movwf	___lldiv@quotient& (0+255),b
  6323  001178  0E00               	movlw	0
  6324  00117A  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  6325  00117C  0E00               	movlw	0
  6326  00117E  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6327  001180  0E00               	movlw	0
  6328  001182  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6329                           
  6330                           ; BSR set to: 0
  6331  001184  0100               	movlb	0	; () banked
  6332  001186  5184               	movf	___lldiv@divisor& (0+255),w,b
  6333  001188  0100               	movlb	0	; () banked
  6334  00118A  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6335  00118C  0100               	movlb	0	; () banked
  6336  00118E  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6337  001190  0100               	movlb	0	; () banked
  6338  001192  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6339  001194  B4D8               	btfsc	status,2,c
  6340  001196  D042               	goto	l869
  6341                           
  6342                           ; BSR set to: 0
  6343  001198  0E01               	movlw	1
  6344  00119A  0100               	movlb	0	; () banked
  6345  00119C  6F8C               	movwf	___lldiv@counter& (0+255),b
  6346  00119E  D008               	goto	l4139
  6347  0011A0                     l4137:
  6348                           
  6349                           ; BSR set to: 0
  6350  0011A0  0100               	movlb	0	; () banked
  6351  0011A2  90D8               	bcf	status,0,c
  6352  0011A4  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  6353  0011A6  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6354  0011A8  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6355  0011AA  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6356  0011AC  0100               	movlb	0	; () banked
  6357  0011AE  2B8C               	incf	___lldiv@counter& (0+255),f,b
  6358  0011B0                     l4139:
  6359                           
  6360                           ; BSR set to: 0
  6361  0011B0  0100               	movlb	0	; () banked
  6362  0011B2  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6363  0011B4  D7F5               	goto	l4137
  6364  0011B6                     l4141:
  6365                           
  6366                           ; BSR set to: 0
  6367  0011B6  0100               	movlb	0	; () banked
  6368  0011B8  90D8               	bcf	status,0,c
  6369  0011BA  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6370  0011BC  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6371  0011BE  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6372  0011C0  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6373                           
  6374                           ; BSR set to: 0
  6375  0011C2  0100               	movlb	0	; () banked
  6376  0011C4  5184               	movf	___lldiv@divisor& (0+255),w,b
  6377  0011C6  0100               	movlb	0	; () banked
  6378  0011C8  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  6379  0011CA  0100               	movlb	0	; () banked
  6380  0011CC  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6381  0011CE  0100               	movlb	0	; () banked
  6382  0011D0  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6383  0011D2  0100               	movlb	0	; () banked
  6384  0011D4  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6385  0011D6  0100               	movlb	0	; () banked
  6386  0011D8  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6387  0011DA  0100               	movlb	0	; () banked
  6388  0011DC  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6389  0011DE  0100               	movlb	0	; () banked
  6390  0011E0  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6391  0011E2  A0D8               	btfss	status,0,c
  6392  0011E4  D012               	goto	l4149
  6393                           
  6394                           ; BSR set to: 0
  6395  0011E6  0100               	movlb	0	; () banked
  6396  0011E8  5184               	movf	___lldiv@divisor& (0+255),w,b
  6397  0011EA  0100               	movlb	0	; () banked
  6398  0011EC  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  6399  0011EE  0100               	movlb	0	; () banked
  6400  0011F0  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6401  0011F2  0100               	movlb	0	; () banked
  6402  0011F4  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6403  0011F6  0100               	movlb	0	; () banked
  6404  0011F8  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6405  0011FA  0100               	movlb	0	; () banked
  6406  0011FC  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6407  0011FE  0100               	movlb	0	; () banked
  6408  001200  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6409  001202  0100               	movlb	0	; () banked
  6410  001204  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6411                           
  6412                           ; BSR set to: 0
  6413  001206  0100               	movlb	0	; () banked
  6414  001208  8188               	bsf	___lldiv@quotient& (0+255),0,b
  6415  00120A                     l4149:
  6416                           
  6417                           ; BSR set to: 0
  6418  00120A  0100               	movlb	0	; () banked
  6419  00120C  90D8               	bcf	status,0,c
  6420  00120E  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6421  001210  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6422  001212  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6423  001214  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  6424                           
  6425                           ; BSR set to: 0
  6426  001216  0100               	movlb	0	; () banked
  6427  001218  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  6428  00121A  D7CD               	goto	l4141
  6429  00121C                     l869:
  6430                           
  6431                           ; BSR set to: 0
  6432  00121C  C088  F080         	movff	___lldiv@quotient,?___lldiv
  6433  001220  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  6434  001224  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  6435  001228  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  6436                           
  6437                           ; BSR set to: 0
  6438  00122C  0012               	return		;funcret
  6439  00122E                     __end_of___lldiv:
  6440                           	opt stack 0
  6441                           tosu	equ	0xFFF
  6442                           tosh	equ	0xFFE
  6443                           tosl	equ	0xFFD
  6444                           pclath	equ	0xFFA
  6445                           tblptru	equ	0xFF8
  6446                           tblptrh	equ	0xFF7
  6447                           tblptrl	equ	0xFF6
  6448                           tablat	equ	0xFF5
  6449                           prodh	equ	0xFF4
  6450                           prodl	equ	0xFF3
  6451                           intcon	equ	0xFF2
  6452                           intcon3	equ	0xFF0
  6453                           postinc0	equ	0xFEE
  6454                           wreg	equ	0xFE8
  6455                           indf2	equ	0xFDF
  6456                           postinc2	equ	0xFDE
  6457                           postdec2	equ	0xFDD
  6458                           fsr2h	equ	0xFDA
  6459                           fsr2l	equ	0xFD9
  6460                           status	equ	0xFD8
  6461                           
  6462 ;; *************** function _keypressed *****************
  6463 ;; Defined at:
  6464 ;;		line 19 in file "Interrupt_ISR.c"
  6465 ;; Parameters:    Size  Location     Type
  6466 ;;		None
  6467 ;; Auto vars:     Size  Location     Type
  6468 ;;  i               1   60[COMRAM] unsigned char 
  6469 ;;  i               1   59[COMRAM] unsigned char 
  6470 ;;  i               1   58[COMRAM] unsigned char 
  6471 ;;  i               1   57[COMRAM] unsigned char 
  6472 ;;  i               1   56[COMRAM] unsigned char 
  6473 ;;  i               1   55[COMRAM] unsigned char 
  6474 ;;  i               1   54[COMRAM] unsigned char 
  6475 ;;  i               1   53[COMRAM] unsigned char 
  6476 ;;  i               1   52[COMRAM] unsigned char 
  6477 ;;  i               1   51[COMRAM] unsigned char 
  6478 ;;  i               1   50[COMRAM] unsigned char 
  6479 ;;  i               1   49[COMRAM] unsigned char 
  6480 ;;  keypress_tem    1   61[COMRAM] unsigned char 
  6481 ;;  keypress        1   48[COMRAM] unsigned char 
  6482 ;; Return value:  Size  Location     Type
  6483 ;;                  1    wreg      void 
  6484 ;; Registers used:
  6485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6486 ;; Tracked objects:
  6487 ;;		On entry : 0/0
  6488 ;;		On exit  : 0/0
  6489 ;;		Unchanged: 0/0
  6490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6492 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6493 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6494 ;;      Totals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6495 ;;Total ram usage:       30 bytes
  6496 ;; Hardware stack levels used:    1
  6497 ;; Hardware stack levels required when called:    4
  6498 ;; This function calls:
  6499 ;;		_op_time
  6500 ;;		_pop_results
  6501 ;;		_tin_results
  6502 ;;		_tot_sorted
  6503 ;;		i2_initLCD
  6504 ;;		i2_lcdInst
  6505 ;;		i2_printf
  6506 ;; This function is called by:
  6507 ;;		Interrupt level 2
  6508 ;; This function uses a non-reentrant model
  6509 ;;
  6510                           
  6511                           	psect	intcode
  6512  000008                     __pintcode:
  6513                           	opt stack 0
  6514  000008                     _keypressed:
  6515                           	opt stack 20
  6516                           
  6517                           ; BSR set to: 0
  6518                           ;incstack = 0
  6519  000008  824B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6520  00000A  ED93  F003         	call	int_func,f	;refresh shadow registers
  6521                           tosu	equ	0xFFF
  6522                           tosh	equ	0xFFE
  6523                           tosl	equ	0xFFD
  6524                           pclath	equ	0xFFA
  6525                           tblptru	equ	0xFF8
  6526                           tblptrh	equ	0xFF7
  6527                           tblptrl	equ	0xFF6
  6528                           tablat	equ	0xFF5
  6529                           prodh	equ	0xFF4
  6530                           prodl	equ	0xFF3
  6531                           intcon	equ	0xFF2
  6532                           intcon3	equ	0xFF0
  6533                           postinc0	equ	0xFEE
  6534                           wreg	equ	0xFE8
  6535                           indf2	equ	0xFDF
  6536                           postinc2	equ	0xFDE
  6537                           postdec2	equ	0xFDD
  6538                           fsr2h	equ	0xFDA
  6539                           fsr2l	equ	0xFD9
  6540                           status	equ	0xFD8
  6541                           
  6542                           	psect	intcode_body
  6543  000726                     __pintcode_body:
  6544                           	opt stack 20
  6545  000726                     int_func:
  6546                           	opt stack 20
  6547  000726  0006               	pop		; remove dummy address from shadow register refresh
  6548  000728  CFFA F023          	movff	pclath,??_keypressed+2
  6549  00072C  CFFB F024          	movff	pclatu,??_keypressed+3
  6550  000730  CFE9 F025          	movff	fsr0l,??_keypressed+4
  6551  000734  CFEA F026          	movff	fsr0h,??_keypressed+5
  6552  000738  CFE1 F027          	movff	fsr1l,??_keypressed+6
  6553  00073C  CFE2 F028          	movff	fsr1h,??_keypressed+7
  6554  000740  CFD9 F029          	movff	fsr2l,??_keypressed+8
  6555  000744  CFDA F02A          	movff	fsr2h,??_keypressed+9
  6556  000748  CFF3 F02B          	movff	prodl,??_keypressed+10
  6557  00074C  CFF4 F02C          	movff	prodh,??_keypressed+11
  6558  000750  CFF6 F02D          	movff	tblptrl,??_keypressed+12
  6559  000754  CFF7 F02E          	movff	tblptrh,??_keypressed+13
  6560  000758  CFF8 F02F          	movff	tblptru,??_keypressed+14
  6561  00075C  CFF5 F030          	movff	tablat,??_keypressed+15
  6562                           
  6563                           ;Interrupt_ISR.c: 21: if(INT1IF){
  6564  000760  A0F0               	btfss	intcon3,0,c	;volatile
  6565  000762  D129               	goto	i2l120
  6566                           
  6567                           ;Interrupt_ISR.c: 22: lcdInst(0b11000000);;
  6568  000764  0EC0               	movlw	192
  6569  000766  EC05  F00E         	call	i2_lcdInst
  6570                           
  6571                           ;Interrupt_ISR.c: 23: unsigned char keypress = (PORTB & 0xF0) >> 4;
  6572  00076A  3881               	swapf	3969,w,c	;volatile
  6573  00076C  0B0F               	andlw	15
  6574  00076E  0B0F               	andlw	15
  6575  000770  6E31               	movwf	keypressed@keypress,c
  6576                           
  6577                           ;Interrupt_ISR.c: 25: unsigned char keypress_temp = keys[keypress];
  6578  000772  5031               	movf	keypressed@keypress,w,c
  6579  000774  0D01               	mullw	1
  6580  000776  0E8D               	movlw	low _keys
  6581  000778  24F3               	addwf	prodl,w,c
  6582  00077A  6EF6               	movwf	tblptrl,c
  6583  00077C  0EFE               	movlw	high _keys
  6584  00077E  20F4               	addwfc	prodh,w,c
  6585  000780  6EF7               	movwf	tblptrh,c
  6586  000782                     	if	1	;There are 3 active tblptr bytes
  6587  000782  6AF8               	clrf	tblptru,c
  6588  000784  0E00               	movlw	low (__mediumconst shr (0+16))
  6589  000786  22F8               	addwfc	tblptru,f,c
  6590  000788                     	endif
  6591  000788  0008               	tblrd		*
  6592  00078A  CFF5 F03E          	movff	tablat,keypressed@keypress_temp
  6593                           
  6594                           ;Interrupt_ISR.c: 26: if (keypress_temp == 0b01000001){
  6595  00078E  0E41               	movlw	65
  6596  000790  183E               	xorwf	keypressed@keypress_temp,w,c
  6597  000792  A4D8               	btfss	status,2,c
  6598  000794  D03E               	goto	i2l3489
  6599                           
  6600                           ;Interrupt_ISR.c: 27: tot_sorted();
  6601  000796  ECC6  F00D         	call	_tot_sorted	;wreg free
  6602                           
  6603                           ;Interrupt_ISR.c: 29: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  6604  00079A  0E00               	movlw	0
  6605  00079C  6E32               	movwf	keypressed@i,c
  6606  00079E                     i2l3461:
  6607  00079E  0E09               	movlw	9
  6608  0007A0  6432               	cpfsgt	keypressed@i,c
  6609  0007A2  D001               	goto	i2l3465
  6610  0007A4  D00E               	goto	i2l3469
  6611  0007A6                     i2l3465:
  6612  0007A6  0E02               	movlw	2
  6613  0007A8  6E22               	movwf	(??_keypressed+1)& (0+255),c
  6614  0007AA  0E3F               	movlw	63
  6615  0007AC  6E21               	movwf	??_keypressed& (0+255),c
  6616  0007AE  0E2B               	movlw	43
  6617  0007B0                     i2u441_47:
  6618  0007B0  2EE8               	decfsz	wreg,f,c
  6619  0007B2  D7FE               	bra	i2u441_47
  6620  0007B4  2E21               	decfsz	??_keypressed& (0+255),f,c
  6621  0007B6  D7FC               	bra	i2u441_47
  6622  0007B8  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  6623  0007BA  D7FA               	bra	i2u441_47
  6624  0007BC  F000               	nop	
  6625  0007BE  2A32               	incf	keypressed@i,f,c
  6626  0007C0  D7EE               	goto	i2l3461
  6627  0007C2                     i2l3469:
  6628                           
  6629                           ;Interrupt_ISR.c: 30: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  6630  0007C2  0E00               	movlw	0
  6631  0007C4  6E33               	movwf	keypressed@i_144,c
  6632  0007C6                     i2l3471:
  6633  0007C6  0E09               	movlw	9
  6634  0007C8  6433               	cpfsgt	keypressed@i_144,c
  6635  0007CA  D001               	goto	i2l3475
  6636  0007CC  D00E               	goto	i2l3479
  6637  0007CE                     i2l3475:
  6638  0007CE  0E02               	movlw	2
  6639  0007D0  6E22               	movwf	(??_keypressed+1)& (0+255),c
  6640  0007D2  0E3F               	movlw	63
  6641  0007D4  6E21               	movwf	??_keypressed& (0+255),c
  6642  0007D6  0E2B               	movlw	43
  6643  0007D8                     i2u442_47:
  6644  0007D8  2EE8               	decfsz	wreg,f,c
  6645  0007DA  D7FE               	bra	i2u442_47
  6646  0007DC  2E21               	decfsz	??_keypressed& (0+255),f,c
  6647  0007DE  D7FC               	bra	i2u442_47
  6648  0007E0  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  6649  0007E2  D7FA               	bra	i2u442_47
  6650  0007E4  F000               	nop	
  6651  0007E6  2A33               	incf	keypressed@i_144,f,c
  6652  0007E8  D7EE               	goto	i2l3471
  6653  0007EA                     i2l3479:
  6654                           
  6655                           ;Interrupt_ISR.c: 31: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  6656  0007EA  0E00               	movlw	0
  6657  0007EC  6E34               	movwf	keypressed@i_145,c
  6658  0007EE                     i2l3481:
  6659  0007EE  0E09               	movlw	9
  6660  0007F0  6434               	cpfsgt	keypressed@i_145,c
  6661  0007F2  D001               	goto	i2l3485
  6662  0007F4  D0DC               	goto	i2l3595
  6663  0007F6                     i2l3485:
  6664  0007F6  0E02               	movlw	2
  6665  0007F8  6E22               	movwf	(??_keypressed+1)& (0+255),c
  6666  0007FA  0E3F               	movlw	63
  6667  0007FC  6E21               	movwf	??_keypressed& (0+255),c
  6668  0007FE  0E2B               	movlw	43
  6669  000800                     i2u443_47:
  6670  000800  2EE8               	decfsz	wreg,f,c
  6671  000802  D7FE               	bra	i2u443_47
  6672  000804  2E21               	decfsz	??_keypressed& (0+255),f,c
  6673  000806  D7FC               	bra	i2u443_47
  6674  000808  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  6675  00080A  D7FA               	bra	i2u443_47
  6676  00080C  F000               	nop	
  6677  00080E  2A34               	incf	keypressed@i_145,f,c
  6678  000810  D7EE               	goto	i2l3481
  6679  000812                     i2l3489:
  6680                           
  6681                           ;Interrupt_ISR.c: 33: else if(keypress_temp == 0b01000010){
  6682  000812  0E42               	movlw	66
  6683  000814  183E               	xorwf	keypressed@keypress_temp,w,c
  6684  000816  A4D8               	btfss	status,2,c
  6685  000818  D03E               	goto	i2l3523
  6686                           
  6687                           ;Interrupt_ISR.c: 34: pop_results();
  6688  00081A  ECFC  F00C         	call	_pop_results	;wreg free
  6689                           
  6690                           ;Interrupt_ISR.c: 36: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  6691  00081E  0E00               	movlw	0
  6692  000820  6E35               	movwf	keypressed@i_146,c
  6693  000822                     i2l3495:
  6694  000822  0E09               	movlw	9
  6695  000824  6435               	cpfsgt	keypressed@i_146,c
  6696  000826  D001               	goto	i2l3499
  6697  000828  D00E               	goto	i2l3503
  6698  00082A                     i2l3499:
  6699  00082A  0E02               	movlw	2
  6700  00082C  6E22               	movwf	(??_keypressed+1)& (0+255),c
  6701  00082E  0E3F               	movlw	63
  6702  000830  6E21               	movwf	??_keypressed& (0+255),c
  6703  000832  0E2B               	movlw	43
  6704  000834                     i2u444_47:
  6705  000834  2EE8               	decfsz	wreg,f,c
  6706  000836  D7FE               	bra	i2u444_47
  6707  000838  2E21               	decfsz	??_keypressed& (0+255),f,c
  6708  00083A  D7FC               	bra	i2u444_47
  6709  00083C  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  6710  00083E  D7FA               	bra	i2u444_47
  6711  000840  F000               	nop	
  6712  000842  2A35               	incf	keypressed@i_146,f,c
  6713  000844  D7EE               	goto	i2l3495
  6714  000846                     i2l3503:
  6715                           
  6716                           ;Interrupt_ISR.c: 37: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  6717  000846  0E00               	movlw	0
  6718  000848  6E36               	movwf	keypressed@i_147,c
  6719  00084A                     i2l3505:
  6720  00084A  0E09               	movlw	9
  6721  00084C  6436               	cpfsgt	keypressed@i_147,c
  6722  00084E  D001               	goto	i2l3509
  6723  000850  D00E               	goto	i2l3513
  6724  000852                     i2l3509:
  6725  000852  0E02               	movlw	2
  6726  000854  6E22               	movwf	(??_keypressed+1)& (0+255),c
  6727  000856  0E3F               	movlw	63
  6728  000858  6E21               	movwf	??_keypressed& (0+255),c
  6729  00085A  0E2B               	movlw	43
  6730  00085C                     i2u445_47:
  6731  00085C  2EE8               	decfsz	wreg,f,c
  6732  00085E  D7FE               	bra	i2u445_47
  6733  000860  2E21               	decfsz	??_keypressed& (0+255),f,c
  6734  000862  D7FC               	bra	i2u445_47
  6735  000864  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  6736  000866  D7FA               	bra	i2u445_47
  6737  000868  F000               	nop	
  6738  00086A  2A36               	incf	keypressed@i_147,f,c
  6739  00086C  D7EE               	goto	i2l3505
  6740  00086E                     i2l3513:
  6741                           
  6742                           ;Interrupt_ISR.c: 38: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  6743  00086E  0E00               	movlw	0
  6744  000870  6E37               	movwf	keypressed@i_148,c
  6745  000872                     i2l3515:
  6746  000872  0E09               	movlw	9
  6747  000874  6437               	cpfsgt	keypressed@i_148,c
  6748  000876  D001               	goto	i2l3519
  6749  000878  D09A               	goto	i2l3595
  6750  00087A                     i2l3519:
  6751  00087A  0E02               	movlw	2
  6752  00087C  6E22               	movwf	(??_keypressed+1)& (0+255),c
  6753  00087E  0E3F               	movlw	63
  6754  000880  6E21               	movwf	??_keypressed& (0+255),c
  6755  000882  0E2B               	movlw	43
  6756  000884                     i2u446_47:
  6757  000884  2EE8               	decfsz	wreg,f,c
  6758  000886  D7FE               	bra	i2u446_47
  6759  000888  2E21               	decfsz	??_keypressed& (0+255),f,c
  6760  00088A  D7FC               	bra	i2u446_47
  6761  00088C  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  6762  00088E  D7FA               	bra	i2u446_47
  6763  000890  F000               	nop	
  6764  000892  2A37               	incf	keypressed@i_148,f,c
  6765  000894  D7EE               	goto	i2l3515
  6766  000896                     i2l3523:
  6767                           
  6768                           ;Interrupt_ISR.c: 40: else if(keypress_temp == 0b01000011){
  6769  000896  0E43               	movlw	67
  6770  000898  183E               	xorwf	keypressed@keypress_temp,w,c
  6771  00089A  A4D8               	btfss	status,2,c
  6772  00089C  D03E               	goto	i2l3557
  6773                           
  6774                           ;Interrupt_ISR.c: 41: tin_results();
  6775  00089E  ECDF  F00C         	call	_tin_results	;wreg free
  6776                           
  6777                           ;Interrupt_ISR.c: 43: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  6778  0008A2  0E00               	movlw	0
  6779  0008A4  6E38               	movwf	keypressed@i_149,c
  6780  0008A6                     i2l3529:
  6781  0008A6  0E09               	movlw	9
  6782  0008A8  6438               	cpfsgt	keypressed@i_149,c
  6783  0008AA  D001               	goto	i2l3533
  6784  0008AC  D00E               	goto	i2l3537
  6785  0008AE                     i2l3533:
  6786  0008AE  0E02               	movlw	2
  6787  0008B0  6E22               	movwf	(??_keypressed+1)& (0+255),c
  6788  0008B2  0E3F               	movlw	63
  6789  0008B4  6E21               	movwf	??_keypressed& (0+255),c
  6790  0008B6  0E2B               	movlw	43
  6791  0008B8                     i2u447_47:
  6792  0008B8  2EE8               	decfsz	wreg,f,c
  6793  0008BA  D7FE               	bra	i2u447_47
  6794  0008BC  2E21               	decfsz	??_keypressed& (0+255),f,c
  6795  0008BE  D7FC               	bra	i2u447_47
  6796  0008C0  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  6797  0008C2  D7FA               	bra	i2u447_47
  6798  0008C4  F000               	nop	
  6799  0008C6  2A38               	incf	keypressed@i_149,f,c
  6800  0008C8  D7EE               	goto	i2l3529
  6801  0008CA                     i2l3537:
  6802                           
  6803                           ;Interrupt_ISR.c: 44: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  6804  0008CA  0E00               	movlw	0
  6805  0008CC  6E39               	movwf	keypressed@i_150,c
  6806  0008CE                     i2l3539:
  6807  0008CE  0E09               	movlw	9
  6808  0008D0  6439               	cpfsgt	keypressed@i_150,c
  6809  0008D2  D001               	goto	i2l3543
  6810  0008D4  D00E               	goto	i2l3547
  6811  0008D6                     i2l3543:
  6812  0008D6  0E02               	movlw	2
  6813  0008D8  6E22               	movwf	(??_keypressed+1)& (0+255),c
  6814  0008DA  0E3F               	movlw	63
  6815  0008DC  6E21               	movwf	??_keypressed& (0+255),c
  6816  0008DE  0E2B               	movlw	43
  6817  0008E0                     i2u448_47:
  6818  0008E0  2EE8               	decfsz	wreg,f,c
  6819  0008E2  D7FE               	bra	i2u448_47
  6820  0008E4  2E21               	decfsz	??_keypressed& (0+255),f,c
  6821  0008E6  D7FC               	bra	i2u448_47
  6822  0008E8  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  6823  0008EA  D7FA               	bra	i2u448_47
  6824  0008EC  F000               	nop	
  6825  0008EE  2A39               	incf	keypressed@i_150,f,c
  6826  0008F0  D7EE               	goto	i2l3539
  6827  0008F2                     i2l3547:
  6828                           
  6829                           ;Interrupt_ISR.c: 45: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  6830  0008F2  0E00               	movlw	0
  6831  0008F4  6E3A               	movwf	keypressed@i_151,c
  6832  0008F6                     i2l3549:
  6833  0008F6  0E09               	movlw	9
  6834  0008F8  643A               	cpfsgt	keypressed@i_151,c
  6835  0008FA  D001               	goto	i2l3553
  6836  0008FC  D058               	goto	i2l3595
  6837  0008FE                     i2l3553:
  6838  0008FE  0E02               	movlw	2
  6839  000900  6E22               	movwf	(??_keypressed+1)& (0+255),c
  6840  000902  0E3F               	movlw	63
  6841  000904  6E21               	movwf	??_keypressed& (0+255),c
  6842  000906  0E2B               	movlw	43
  6843  000908                     i2u449_47:
  6844  000908  2EE8               	decfsz	wreg,f,c
  6845  00090A  D7FE               	bra	i2u449_47
  6846  00090C  2E21               	decfsz	??_keypressed& (0+255),f,c
  6847  00090E  D7FC               	bra	i2u449_47
  6848  000910  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  6849  000912  D7FA               	bra	i2u449_47
  6850  000914  F000               	nop	
  6851  000916  2A3A               	incf	keypressed@i_151,f,c
  6852  000918  D7EE               	goto	i2l3549
  6853  00091A                     i2l3557:
  6854                           
  6855                           ;Interrupt_ISR.c: 47: else if(keypress_temp == 0b01000100){
  6856  00091A  0E44               	movlw	68
  6857  00091C  183E               	xorwf	keypressed@keypress_temp,w,c
  6858  00091E  A4D8               	btfss	status,2,c
  6859  000920  D03E               	goto	i2l3591
  6860                           
  6861                           ;Interrupt_ISR.c: 48: op_time();
  6862  000922  EC4E  F00C         	call	_op_time	;wreg free
  6863                           
  6864                           ;Interrupt_ISR.c: 50: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  6865  000926  0E00               	movlw	0
  6866  000928  6E3B               	movwf	keypressed@i_152,c
  6867  00092A                     i2l3563:
  6868  00092A  0E09               	movlw	9
  6869  00092C  643B               	cpfsgt	keypressed@i_152,c
  6870  00092E  D001               	goto	i2l3567
  6871  000930  D00E               	goto	i2l3571
  6872  000932                     i2l3567:
  6873  000932  0E02               	movlw	2
  6874  000934  6E22               	movwf	(??_keypressed+1)& (0+255),c
  6875  000936  0E3F               	movlw	63
  6876  000938  6E21               	movwf	??_keypressed& (0+255),c
  6877  00093A  0E2B               	movlw	43
  6878  00093C                     i2u450_47:
  6879  00093C  2EE8               	decfsz	wreg,f,c
  6880  00093E  D7FE               	bra	i2u450_47
  6881  000940  2E21               	decfsz	??_keypressed& (0+255),f,c
  6882  000942  D7FC               	bra	i2u450_47
  6883  000944  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  6884  000946  D7FA               	bra	i2u450_47
  6885  000948  F000               	nop	
  6886  00094A  2A3B               	incf	keypressed@i_152,f,c
  6887  00094C  D7EE               	goto	i2l3563
  6888  00094E                     i2l3571:
  6889                           
  6890                           ;Interrupt_ISR.c: 51: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  6891  00094E  0E00               	movlw	0
  6892  000950  6E3C               	movwf	keypressed@i_153,c
  6893  000952                     i2l3573:
  6894  000952  0E09               	movlw	9
  6895  000954  643C               	cpfsgt	keypressed@i_153,c
  6896  000956  D001               	goto	i2l3577
  6897  000958  D00E               	goto	i2l3581
  6898  00095A                     i2l3577:
  6899  00095A  0E02               	movlw	2
  6900  00095C  6E22               	movwf	(??_keypressed+1)& (0+255),c
  6901  00095E  0E3F               	movlw	63
  6902  000960  6E21               	movwf	??_keypressed& (0+255),c
  6903  000962  0E2B               	movlw	43
  6904  000964                     i2u451_47:
  6905  000964  2EE8               	decfsz	wreg,f,c
  6906  000966  D7FE               	bra	i2u451_47
  6907  000968  2E21               	decfsz	??_keypressed& (0+255),f,c
  6908  00096A  D7FC               	bra	i2u451_47
  6909  00096C  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  6910  00096E  D7FA               	bra	i2u451_47
  6911  000970  F000               	nop	
  6912  000972  2A3C               	incf	keypressed@i_153,f,c
  6913  000974  D7EE               	goto	i2l3573
  6914  000976                     i2l3581:
  6915                           
  6916                           ;Interrupt_ISR.c: 52: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  6917  000976  0E00               	movlw	0
  6918  000978  6E3D               	movwf	keypressed@i_154,c
  6919  00097A                     i2l3583:
  6920  00097A  0E09               	movlw	9
  6921  00097C  643D               	cpfsgt	keypressed@i_154,c
  6922  00097E  D001               	goto	i2l3587
  6923  000980  D016               	goto	i2l3595
  6924  000982                     i2l3587:
  6925  000982  0E02               	movlw	2
  6926  000984  6E22               	movwf	(??_keypressed+1)& (0+255),c
  6927  000986  0E3F               	movlw	63
  6928  000988  6E21               	movwf	??_keypressed& (0+255),c
  6929  00098A  0E2B               	movlw	43
  6930  00098C                     i2u452_47:
  6931  00098C  2EE8               	decfsz	wreg,f,c
  6932  00098E  D7FE               	bra	i2u452_47
  6933  000990  2E21               	decfsz	??_keypressed& (0+255),f,c
  6934  000992  D7FC               	bra	i2u452_47
  6935  000994  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  6936  000996  D7FA               	bra	i2u452_47
  6937  000998  F000               	nop	
  6938  00099A  2A3D               	incf	keypressed@i_154,f,c
  6939  00099C  D7EE               	goto	i2l3583
  6940  00099E                     i2l3591:
  6941                           
  6942                           ;Interrupt_ISR.c: 54: else{
  6943                           ;Interrupt_ISR.c: 55: initLCD();
  6944  00099E  EC9B  F00C         	call	i2_initLCD	;wreg free
  6945                           
  6946                           ;Interrupt_ISR.c: 56: printf(" ");
  6947  0009A2  0EC9               	movlw	low (STR_8+11)
  6948  0009A4  6E0D               	movwf	i2printf@f,c
  6949  0009A6  0EFF               	movlw	high (STR_8+11)
  6950  0009A8  6E0E               	movwf	i2printf@f+1,c
  6951  0009AA  ECF8  F001         	call	i2_printf	;wreg free
  6952  0009AE                     i2l3595:
  6953                           
  6954                           ;Interrupt_ISR.c: 57: }
  6955                           ;Interrupt_ISR.c: 58: lcdInst(0b10000000);;
  6956  0009AE  0E80               	movlw	128
  6957  0009B0  EC05  F00E         	call	i2_lcdInst
  6958                           
  6959                           ;Interrupt_ISR.c: 59: INT1IF = 0;
  6960  0009B4  90F0               	bcf	intcon3,0,c	;volatile
  6961  0009B6                     i2l120:
  6962  0009B6  C030  FFF5         	movff	??_keypressed+15,tablat
  6963  0009BA  C02F  FFF8         	movff	??_keypressed+14,tblptru
  6964  0009BE  C02E  FFF7         	movff	??_keypressed+13,tblptrh
  6965  0009C2  C02D  FFF6         	movff	??_keypressed+12,tblptrl
  6966  0009C6  C02C  FFF4         	movff	??_keypressed+11,prodh
  6967  0009CA  C02B  FFF3         	movff	??_keypressed+10,prodl
  6968  0009CE  C02A  FFDA         	movff	??_keypressed+9,fsr2h
  6969  0009D2  C029  FFD9         	movff	??_keypressed+8,fsr2l
  6970  0009D6  C028  FFE2         	movff	??_keypressed+7,fsr1h
  6971  0009DA  C027  FFE1         	movff	??_keypressed+6,fsr1l
  6972  0009DE  C026  FFEA         	movff	??_keypressed+5,fsr0h
  6973  0009E2  C025  FFE9         	movff	??_keypressed+4,fsr0l
  6974  0009E6  C024  FFFB         	movff	??_keypressed+3,pclatu
  6975  0009EA  C023  FFFA         	movff	??_keypressed+2,pclath
  6976  0009EE  924B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6977  0009F0  0011               	retfie		f
  6978  0009F2                     __end_of_keypressed:
  6979                           	opt stack 0
  6980                           tosu	equ	0xFFF
  6981                           tosh	equ	0xFFE
  6982                           tosl	equ	0xFFD
  6983                           pclatu	equ	0xFFB
  6984                           pclath	equ	0xFFA
  6985                           tblptru	equ	0xFF8
  6986                           tblptrh	equ	0xFF7
  6987                           tblptrl	equ	0xFF6
  6988                           tablat	equ	0xFF5
  6989                           prodh	equ	0xFF4
  6990                           prodl	equ	0xFF3
  6991                           intcon	equ	0xFF2
  6992                           intcon3	equ	0xFF0
  6993                           postinc0	equ	0xFEE
  6994                           fsr0h	equ	0xFEA
  6995                           fsr0l	equ	0xFE9
  6996                           wreg	equ	0xFE8
  6997                           fsr1h	equ	0xFE2
  6998                           fsr1l	equ	0xFE1
  6999                           indf2	equ	0xFDF
  7000                           postinc2	equ	0xFDE
  7001                           postdec2	equ	0xFDD
  7002                           fsr2h	equ	0xFDA
  7003                           fsr2l	equ	0xFD9
  7004                           status	equ	0xFD8
  7005                           
  7006 ;; *************** function _tot_sorted *****************
  7007 ;; Defined at:
  7008 ;;		line 232 in file "operation.c"
  7009 ;; Parameters:    Size  Location     Type
  7010 ;;		None
  7011 ;; Auto vars:     Size  Location     Type
  7012 ;;		None
  7013 ;; Return value:  Size  Location     Type
  7014 ;;                  1    wreg      void 
  7015 ;; Registers used:
  7016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7017 ;; Tracked objects:
  7018 ;;		On entry : 0/0
  7019 ;;		On exit  : 0/0
  7020 ;;		Unchanged: 0/0
  7021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7025 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7026 ;;Total ram usage:        0 bytes
  7027 ;; Hardware stack levels used:    1
  7028 ;; Hardware stack levels required when called:    3
  7029 ;; This function calls:
  7030 ;;		i2_initLCD
  7031 ;;		i2_lcdInst
  7032 ;;		i2_printf
  7033 ;; This function is called by:
  7034 ;;		_keypressed
  7035 ;; This function uses a non-reentrant model
  7036 ;;
  7037                           
  7038                           	psect	text35
  7039  001B8C                     __ptext35:
  7040                           	opt stack 0
  7041  001B8C                     _tot_sorted:
  7042                           	opt stack 20
  7043                           
  7044                           ;operation.c: 233: lcdInst(0b10000000);;
  7045                           
  7046                           ;incstack = 0
  7047  001B8C  0E80               	movlw	128
  7048  001B8E  EC05  F00E         	call	i2_lcdInst
  7049                           
  7050                           ;operation.c: 234: initLCD();
  7051  001B92  EC9B  F00C         	call	i2_initLCD	;wreg free
  7052                           
  7053                           ;operation.c: 235: printf("Total Sorted: %02x", tot);
  7054  001B96  0ECD               	movlw	low STR_17
  7055  001B98  6E0D               	movwf	i2printf@f,c
  7056  001B9A  0EFE               	movlw	high STR_17
  7057  001B9C  6E0E               	movwf	i2printf@f+1,c
  7058  001B9E  C049  F00F         	movff	_tot,?i2_printf+2
  7059  001BA2  C04A  F010         	movff	_tot+1,?i2_printf+3
  7060  001BA6  ECF8  F001         	call	i2_printf	;wreg free
  7061  001BAA  0012               	return	
  7062  001BAC                     __end_of_tot_sorted:
  7063                           	opt stack 0
  7064                           tosu	equ	0xFFF
  7065                           tosh	equ	0xFFE
  7066                           tosl	equ	0xFFD
  7067                           pclatu	equ	0xFFB
  7068                           pclath	equ	0xFFA
  7069                           tblptru	equ	0xFF8
  7070                           tblptrh	equ	0xFF7
  7071                           tblptrl	equ	0xFF6
  7072                           tablat	equ	0xFF5
  7073                           prodh	equ	0xFF4
  7074                           prodl	equ	0xFF3
  7075                           intcon	equ	0xFF2
  7076                           intcon3	equ	0xFF0
  7077                           postinc0	equ	0xFEE
  7078                           fsr0h	equ	0xFEA
  7079                           fsr0l	equ	0xFE9
  7080                           wreg	equ	0xFE8
  7081                           fsr1h	equ	0xFE2
  7082                           fsr1l	equ	0xFE1
  7083                           indf2	equ	0xFDF
  7084                           postinc2	equ	0xFDE
  7085                           postdec2	equ	0xFDD
  7086                           fsr2h	equ	0xFDA
  7087                           fsr2l	equ	0xFD9
  7088                           status	equ	0xFD8
  7089                           
  7090 ;; *************** function _tin_results *****************
  7091 ;; Defined at:
  7092 ;;		line 246 in file "operation.c"
  7093 ;; Parameters:    Size  Location     Type
  7094 ;;		None
  7095 ;; Auto vars:     Size  Location     Type
  7096 ;;		None
  7097 ;; Return value:  Size  Location     Type
  7098 ;;                  1    wreg      void 
  7099 ;; Registers used:
  7100 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7101 ;; Tracked objects:
  7102 ;;		On entry : 0/0
  7103 ;;		On exit  : 0/0
  7104 ;;		Unchanged: 0/0
  7105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7110 ;;Total ram usage:        0 bytes
  7111 ;; Hardware stack levels used:    1
  7112 ;; Hardware stack levels required when called:    3
  7113 ;; This function calls:
  7114 ;;		i2_initLCD
  7115 ;;		i2_lcdInst
  7116 ;;		i2_printf
  7117 ;; This function is called by:
  7118 ;;		_keypressed
  7119 ;; This function uses a non-reentrant model
  7120 ;;
  7121                           
  7122                           	psect	text36
  7123  0019BE                     __ptext36:
  7124                           	opt stack 0
  7125  0019BE                     _tin_results:
  7126                           	opt stack 20
  7127                           
  7128                           ;operation.c: 247: lcdInst(0b10000000);;
  7129                           
  7130                           ;incstack = 0
  7131  0019BE  0E80               	movlw	128
  7132  0019C0  EC05  F00E         	call	i2_lcdInst
  7133                           
  7134                           ;operation.c: 248: initLCD();
  7135  0019C4  EC9B  F00C         	call	i2_initLCD	;wreg free
  7136                           
  7137                           ;operation.c: 249: printf("With Label: %02x",tin_can);
  7138  0019C8  0E35               	movlw	low STR_19
  7139  0019CA  6E0D               	movwf	i2printf@f,c
  7140  0019CC  0EFF               	movlw	high STR_19
  7141  0019CE  6E0E               	movwf	i2printf@f+1,c
  7142  0019D0  C045  F00F         	movff	_tin_can,?i2_printf+2
  7143  0019D4  C046  F010         	movff	_tin_can+1,?i2_printf+3
  7144  0019D8  ECF8  F001         	call	i2_printf	;wreg free
  7145                           
  7146                           ;operation.c: 250: lcdInst(0b11000000);;
  7147  0019DC  0EC0               	movlw	192
  7148  0019DE  EC05  F00E         	call	i2_lcdInst
  7149                           
  7150                           ;operation.c: 251: printf("No Label: %02x",tin_can_label);
  7151  0019E2  0E65               	movlw	low STR_20
  7152  0019E4  6E0D               	movwf	i2printf@f,c
  7153  0019E6  0EFF               	movlw	high STR_20
  7154  0019E8  6E0E               	movwf	i2printf@f+1,c
  7155  0019EA  C043  F00F         	movff	_tin_can_label,?i2_printf+2
  7156  0019EE  C044  F010         	movff	_tin_can_label+1,?i2_printf+3
  7157  0019F2  ECF8  F001         	call	i2_printf	;wreg free
  7158  0019F6  0012               	return	
  7159  0019F8                     __end_of_tin_results:
  7160                           	opt stack 0
  7161                           tosu	equ	0xFFF
  7162                           tosh	equ	0xFFE
  7163                           tosl	equ	0xFFD
  7164                           pclatu	equ	0xFFB
  7165                           pclath	equ	0xFFA
  7166                           tblptru	equ	0xFF8
  7167                           tblptrh	equ	0xFF7
  7168                           tblptrl	equ	0xFF6
  7169                           tablat	equ	0xFF5
  7170                           prodh	equ	0xFF4
  7171                           prodl	equ	0xFF3
  7172                           intcon	equ	0xFF2
  7173                           intcon3	equ	0xFF0
  7174                           postinc0	equ	0xFEE
  7175                           fsr0h	equ	0xFEA
  7176                           fsr0l	equ	0xFE9
  7177                           wreg	equ	0xFE8
  7178                           fsr1h	equ	0xFE2
  7179                           fsr1l	equ	0xFE1
  7180                           indf2	equ	0xFDF
  7181                           postinc2	equ	0xFDE
  7182                           postdec2	equ	0xFDD
  7183                           fsr2h	equ	0xFDA
  7184                           fsr2l	equ	0xFD9
  7185                           status	equ	0xFD8
  7186                           
  7187 ;; *************** function _pop_results *****************
  7188 ;; Defined at:
  7189 ;;		line 255 in file "operation.c"
  7190 ;; Parameters:    Size  Location     Type
  7191 ;;		None
  7192 ;; Auto vars:     Size  Location     Type
  7193 ;;		None
  7194 ;; Return value:  Size  Location     Type
  7195 ;;                  1    wreg      void 
  7196 ;; Registers used:
  7197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7198 ;; Tracked objects:
  7199 ;;		On entry : 0/0
  7200 ;;		On exit  : 0/0
  7201 ;;		Unchanged: 0/0
  7202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7207 ;;Total ram usage:        0 bytes
  7208 ;; Hardware stack levels used:    1
  7209 ;; Hardware stack levels required when called:    3
  7210 ;; This function calls:
  7211 ;;		i2_initLCD
  7212 ;;		i2_lcdInst
  7213 ;;		i2_printf
  7214 ;; This function is called by:
  7215 ;;		_keypressed
  7216 ;; This function uses a non-reentrant model
  7217 ;;
  7218                           
  7219                           	psect	text37
  7220  0019F8                     __ptext37:
  7221                           	opt stack 0
  7222  0019F8                     _pop_results:
  7223                           	opt stack 20
  7224                           
  7225                           ;operation.c: 256: lcdInst(0b10000000);;
  7226                           
  7227                           ;incstack = 0
  7228  0019F8  0E80               	movlw	128
  7229  0019FA  EC05  F00E         	call	i2_lcdInst
  7230                           
  7231                           ;operation.c: 257: initLCD();
  7232  0019FE  EC9B  F00C         	call	i2_initLCD	;wreg free
  7233                           
  7234                           ;operation.c: 258: printf("With Tab: %02x",pop_can_tab);
  7235  001A02  0E56               	movlw	low STR_21
  7236  001A04  6E0D               	movwf	i2printf@f,c
  7237  001A06  0EFF               	movlw	high STR_21
  7238  001A08  6E0E               	movwf	i2printf@f+1,c
  7239  001A0A  C041  F00F         	movff	_pop_can_tab,?i2_printf+2
  7240  001A0E  C042  F010         	movff	_pop_can_tab+1,?i2_printf+3
  7241  001A12  ECF8  F001         	call	i2_printf	;wreg free
  7242                           
  7243                           ;operation.c: 259: lcdInst(0b11000000);;
  7244  001A16  0EC0               	movlw	192
  7245  001A18  EC05  F00E         	call	i2_lcdInst
  7246                           
  7247                           ;operation.c: 260: printf("No Tab: %02x",pop_can);
  7248  001A1C  0ED8               	movlw	low STR_22
  7249  001A1E  6E0D               	movwf	i2printf@f,c
  7250  001A20  0EFF               	movlw	high STR_22
  7251  001A22  6E0E               	movwf	i2printf@f+1,c
  7252  001A24  C03F  F00F         	movff	_pop_can,?i2_printf+2
  7253  001A28  C040  F010         	movff	_pop_can+1,?i2_printf+3
  7254  001A2C  ECF8  F001         	call	i2_printf	;wreg free
  7255  001A30  0012               	return	
  7256  001A32                     __end_of_pop_results:
  7257                           	opt stack 0
  7258                           tosu	equ	0xFFF
  7259                           tosh	equ	0xFFE
  7260                           tosl	equ	0xFFD
  7261                           pclatu	equ	0xFFB
  7262                           pclath	equ	0xFFA
  7263                           tblptru	equ	0xFF8
  7264                           tblptrh	equ	0xFF7
  7265                           tblptrl	equ	0xFF6
  7266                           tablat	equ	0xFF5
  7267                           prodh	equ	0xFF4
  7268                           prodl	equ	0xFF3
  7269                           intcon	equ	0xFF2
  7270                           intcon3	equ	0xFF0
  7271                           postinc0	equ	0xFEE
  7272                           fsr0h	equ	0xFEA
  7273                           fsr0l	equ	0xFE9
  7274                           wreg	equ	0xFE8
  7275                           fsr1h	equ	0xFE2
  7276                           fsr1l	equ	0xFE1
  7277                           indf2	equ	0xFDF
  7278                           postinc2	equ	0xFDE
  7279                           postdec2	equ	0xFDD
  7280                           fsr2h	equ	0xFDA
  7281                           fsr2l	equ	0xFD9
  7282                           status	equ	0xFD8
  7283                           
  7284 ;; *************** function _op_time *****************
  7285 ;; Defined at:
  7286 ;;		line 239 in file "operation.c"
  7287 ;; Parameters:    Size  Location     Type
  7288 ;;		None
  7289 ;; Auto vars:     Size  Location     Type
  7290 ;;		None
  7291 ;; Return value:  Size  Location     Type
  7292 ;;                  1    wreg      void 
  7293 ;; Registers used:
  7294 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7295 ;; Tracked objects:
  7296 ;;		On entry : 0/0
  7297 ;;		On exit  : 0/0
  7298 ;;		Unchanged: 0/0
  7299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7304 ;;Total ram usage:        0 bytes
  7305 ;; Hardware stack levels used:    1
  7306 ;; Hardware stack levels required when called:    3
  7307 ;; This function calls:
  7308 ;;		___awmod
  7309 ;;		i2___awdiv
  7310 ;;		i2_initLCD
  7311 ;;		i2_lcdInst
  7312 ;;		i2_printf
  7313 ;; This function is called by:
  7314 ;;		_keypressed
  7315 ;; This function uses a non-reentrant model
  7316 ;;
  7317                           
  7318                           	psect	text38
  7319  00189C                     __ptext38:
  7320                           	opt stack 0
  7321  00189C                     _op_time:
  7322                           	opt stack 20
  7323                           
  7324                           ;operation.c: 240: lcdInst(0b10000000);;
  7325                           
  7326                           ;incstack = 0
  7327  00189C  0E80               	movlw	128
  7328  00189E  EC05  F00E         	call	i2_lcdInst
  7329                           
  7330                           ;operation.c: 241: initLCD();
  7331  0018A2  EC9B  F00C         	call	i2_initLCD	;wreg free
  7332                           
  7333                           ;operation.c: 242: printf("Time: %01d min %02d s", operation_time/60, operation_time%60 
      +                          );
  7334  0018A6  0EB7               	movlw	low STR_18
  7335  0018A8  6E0D               	movwf	i2printf@f,c
  7336  0018AA  0EFE               	movlw	high STR_18
  7337  0018AC  6E0E               	movwf	i2printf@f+1,c
  7338  0018AE  C047  F001         	movff	_operation_time,i2___awdiv@dividend
  7339  0018B2  C048  F002         	movff	_operation_time+1,i2___awdiv@dividend+1
  7340  0018B6  0E00               	movlw	0
  7341  0018B8  6E04               	movwf	i2___awdiv@divisor+1,c
  7342  0018BA  0E3C               	movlw	60
  7343  0018BC  6E03               	movwf	i2___awdiv@divisor,c
  7344  0018BE  EC5E  F009         	call	i2___awdiv	;wreg free
  7345  0018C2  C001  F00F         	movff	?i2___awdiv,?i2_printf+2
  7346  0018C6  C002  F010         	movff	?i2___awdiv+1,?i2_printf+3
  7347  0018CA  C047  F001         	movff	_operation_time,___awmod@dividend
  7348  0018CE  C048  F002         	movff	_operation_time+1,___awmod@dividend+1
  7349  0018D2  0E00               	movlw	0
  7350  0018D4  6E04               	movwf	___awmod@divisor+1,c
  7351  0018D6  0E3C               	movlw	60
  7352  0018D8  6E03               	movwf	___awmod@divisor,c
  7353  0018DA  ECDC  F009         	call	___awmod	;wreg free
  7354  0018DE  C001  F011         	movff	?___awmod,?i2_printf+4
  7355  0018E2  C002  F012         	movff	?___awmod+1,?i2_printf+5
  7356  0018E6  ECF8  F001         	call	i2_printf	;wreg free
  7357  0018EA  0012               	return	
  7358  0018EC                     __end_of_op_time:
  7359                           	opt stack 0
  7360                           tosu	equ	0xFFF
  7361                           tosh	equ	0xFFE
  7362                           tosl	equ	0xFFD
  7363                           pclatu	equ	0xFFB
  7364                           pclath	equ	0xFFA
  7365                           tblptru	equ	0xFF8
  7366                           tblptrh	equ	0xFF7
  7367                           tblptrl	equ	0xFF6
  7368                           tablat	equ	0xFF5
  7369                           prodh	equ	0xFF4
  7370                           prodl	equ	0xFF3
  7371                           intcon	equ	0xFF2
  7372                           intcon3	equ	0xFF0
  7373                           postinc0	equ	0xFEE
  7374                           fsr0h	equ	0xFEA
  7375                           fsr0l	equ	0xFE9
  7376                           wreg	equ	0xFE8
  7377                           fsr1h	equ	0xFE2
  7378                           fsr1l	equ	0xFE1
  7379                           indf2	equ	0xFDF
  7380                           postinc2	equ	0xFDE
  7381                           postdec2	equ	0xFDD
  7382                           fsr2h	equ	0xFDA
  7383                           fsr2l	equ	0xFD9
  7384                           status	equ	0xFD8
  7385                           
  7386 ;; *************** function i2_printf *****************
  7387 ;; Defined at:
  7388 ;;		line 464 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
  7389 ;; Parameters:    Size  Location     Type
  7390 ;;  f               2   12[COMRAM] PTR const unsigned char 
  7391 ;;		 -> STR_22(13), STR_21(15), STR_20(15), STR_19(17), 
  7392 ;;		 -> STR_18(22), STR_17(19), STR_16(17), STR_15(17), 
  7393 ;;		 -> STR_14(17), STR_13(13), STR_12(9), STR_11(5), 
  7394 ;;		 -> STR_10(17), STR_9(15), STR_8(13), STR_7(15), 
  7395 ;;		 -> STR_6(15), STR_5(15), STR_4(14), STR_3(12), 
  7396 ;;		 -> STR_2(16), STR_1(2), 
  7397 ;; Auto vars:     Size  Location     Type
  7398 ;;  printf          4    0        struct .
  7399 ;;  printf          3    0        PTR const unsigned char 
  7400 ;;  printf          2   29[COMRAM] int 
  7401 ;;  printf          2   26[COMRAM] unsigned int 
  7402 ;;  printf          2   23[COMRAM] PTR void [1]
  7403 ;;		 -> ?i2_printf(2), ?_printf(2), 
  7404 ;;  printf          2    0        unsigned int 
  7405 ;;  printf          1   31[COMRAM] char 
  7406 ;;  printf          1   28[COMRAM] unsigned char 
  7407 ;;  printf          1   25[COMRAM] char 
  7408 ;;  printf          1   22[COMRAM] unsigned char 
  7409 ;; Return value:  Size  Location     Type
  7410 ;;                  2   12[COMRAM] int 
  7411 ;; Registers used:
  7412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7413 ;; Tracked objects:
  7414 ;;		On entry : 0/0
  7415 ;;		On exit  : 0/0
  7416 ;;		Unchanged: 0/0
  7417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7418 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7419 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7420 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7421 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7422 ;;Total ram usage:       20 bytes
  7423 ;; Hardware stack levels used:    1
  7424 ;; Hardware stack levels required when called:    2
  7425 ;; This function calls:
  7426 ;;		i2___lwdiv
  7427 ;;		i2___lwmod
  7428 ;;		i2___wmul
  7429 ;;		i2_isdigit
  7430 ;;		i2_putch
  7431 ;; This function is called by:
  7432 ;;		_keypressed
  7433 ;;		_tot_sorted
  7434 ;;		_op_time
  7435 ;;		_tin_results
  7436 ;;		_pop_results
  7437 ;; This function uses a non-reentrant model
  7438 ;;
  7439                           
  7440                           	psect	text39
  7441  0003F0                     __ptext39:
  7442                           	opt stack 0
  7443  0003F0                     i2_printf:
  7444                           	opt stack 21
  7445                           
  7446                           ;doprnt.c: 466: va_list ap;
  7447                           ;doprnt.c: 499: signed char c;
  7448                           ;doprnt.c: 501: int width;
  7449                           ;doprnt.c: 506: signed char prec;
  7450                           ;doprnt.c: 508: unsigned char flag;
  7451                           ;doprnt.c: 523: union {
  7452                           ;doprnt.c: 524: unsigned long vd;
  7453                           ;doprnt.c: 525: double integ;
  7454                           ;doprnt.c: 526: } tmpval;
  7455                           ;doprnt.c: 528: unsigned int val;
  7456                           ;doprnt.c: 529: unsigned len;
  7457                           ;doprnt.c: 530: const char * cp;
  7458                           ;doprnt.c: 533: *ap = __va_start();
  7459                           
  7460                           ;incstack = 0
  7461  0003F0  0E0F               	movlw	low (?i2_printf+2)
  7462  0003F2  6E18               	movwf	i2printf@ap,c
  7463  0003F4  0E00               	movlw	high (?i2_printf+2)
  7464  0003F6  6E19               	movwf	i2printf@ap+1,c
  7465                           
  7466                           ;doprnt.c: 536: while(c = *f++) {
  7467  0003F8  D188               	goto	i2l3151
  7468  0003FA                     i2l3025:
  7469                           
  7470                           ;doprnt.c: 538: if(c != '%')
  7471  0003FA  0E25               	movlw	37
  7472  0003FC  1820               	xorwf	i2printf@c,w,c
  7473  0003FE  B4D8               	btfsc	status,2,c
  7474  000400  D004               	goto	i2l3029
  7475                           
  7476                           ;doprnt.c: 540: {
  7477                           ;doprnt.c: 541: (putch(c) );
  7478  000402  5020               	movf	i2printf@c,w,c
  7479  000404  ECFF  F00D         	call	i2_putch
  7480                           
  7481                           ;doprnt.c: 542: continue;
  7482  000408  D180               	goto	i2l3151
  7483  00040A                     i2l3029:
  7484                           
  7485                           ;doprnt.c: 543: }
  7486                           ;doprnt.c: 546: width = 0;
  7487  00040A  0E00               	movlw	0
  7488  00040C  6E1F               	movwf	i2printf@width+1,c
  7489  00040E  0E00               	movlw	0
  7490  000410  6E1E               	movwf	i2printf@width,c
  7491                           
  7492                           ;doprnt.c: 548: flag = 0;
  7493  000412  0E00               	movlw	0
  7494  000414  6E1D               	movwf	i2printf@flag,c
  7495                           
  7496                           ;doprnt.c: 551: switch(*f) {
  7497                           
  7498                           ;doprnt.c: 550: for(;;) {
  7499  000416  D003               	goto	i2l3035
  7500  000418                     i2l3031:
  7501                           
  7502                           ;doprnt.c: 580: flag |= 0x04;
  7503  000418  841D               	bsf	i2printf@flag,2,c
  7504                           
  7505                           ;doprnt.c: 581: f++;
  7506  00041A  4A0D               	infsnz	i2printf@f,f,c
  7507  00041C  2A0E               	incf	i2printf@f+1,f,c
  7508  00041E                     i2l3035:
  7509  00041E  C00D  FFF6         	movff	i2printf@f,tblptrl
  7510  000422  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7511  000426                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7512  000426  6AF8               	clrf	tblptru,c
  7513  000428                     	endif
  7514  000428                     	if	0	;tblptru may be non-zero
  7515  000428                     	endif
  7516  000428  0008               	tblrd		*
  7517  00042A  50F5               	movf	tablat,w,c
  7518                           
  7519                           ; Switch size 1, requested type "space"
  7520                           ; Number of cases is 1, Range of values is 48 to 48
  7521                           ; switch strategies available:
  7522                           ; Name         Instructions Cycles
  7523                           ; simple_byte            4     3 (average)
  7524                           ;	Chosen strategy is simple_byte
  7525  00042C  0A30               	xorlw	48	; case 48
  7526  00042E  B4D8               	btfsc	status,2,c
  7527  000430  D7F3               	goto	i2l3031
  7528                           
  7529                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7530                           
  7531                           ;doprnt.c: 586: }
  7532                           
  7533                           ;doprnt.c: 585: break;
  7534  000432  C00D  FFF6         	movff	i2printf@f,tblptrl
  7535  000436  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7536  00043A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7537  00043A  6AF8               	clrf	tblptru,c
  7538  00043C                     	endif
  7539  00043C                     	if	0	;tblptru may be non-zero
  7540  00043C                     	endif
  7541  00043C  0008               	tblrd		*
  7542  00043E  50F5               	movf	tablat,w,c
  7543  000440  ECD6  F00D         	call	i2_isdigit
  7544  000444  A0D8               	btfss	status,0,c
  7545  000446  D037               	goto	i2l3053
  7546                           
  7547                           ;doprnt.c: 598: width = 0;
  7548  000448  0E00               	movlw	0
  7549  00044A  6E1F               	movwf	i2printf@width+1,c
  7550  00044C  0E00               	movlw	0
  7551  00044E  6E1E               	movwf	i2printf@width,c
  7552  000450                     i2l3041:
  7553                           
  7554                           ;doprnt.c: 600: width *= 10;
  7555  000450  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
  7556  000454  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  7557  000458  0E00               	movlw	0
  7558  00045A  6E04               	movwf	i2___wmul@multiplicand+1,c
  7559  00045C  0E0A               	movlw	10
  7560  00045E  6E03               	movwf	i2___wmul@multiplicand,c
  7561  000460  EC60  F00D         	call	i2___wmul	;wreg free
  7562  000464  C001  F01E         	movff	?i2___wmul,i2printf@width
  7563  000468  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
  7564                           
  7565                           ;doprnt.c: 601: width += *f++ - '0';
  7566  00046C  0ED0               	movlw	208
  7567  00046E  6E13               	movwf	??i2_printf& (0+255),c
  7568  000470  0EFF               	movlw	255
  7569  000472  6E14               	movwf	(??i2_printf+1)& (0+255),c
  7570  000474  C00D  FFF6         	movff	i2printf@f,tblptrl
  7571  000478  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7572  00047C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7573  00047C  6AF8               	clrf	tblptru,c
  7574  00047E                     	endif
  7575  00047E                     	if	0	;tblptru may be non-zero
  7576  00047E                     	endif
  7577  00047E  0008               	tblrd		*
  7578  000480  50F5               	movf	tablat,w,c
  7579  000482  6E15               	movwf	(??i2_printf+2)& (0+255),c
  7580  000484  6A16               	clrf	(??i2_printf+3)& (0+255),c
  7581  000486  5013               	movf	??i2_printf,w,c
  7582  000488  2615               	addwf	??i2_printf+2,f,c
  7583  00048A  5014               	movf	??i2_printf+1,w,c
  7584  00048C  2216               	addwfc	??i2_printf+3,f,c
  7585  00048E  5015               	movf	??i2_printf+2,w,c
  7586  000490  261E               	addwf	i2printf@width,f,c
  7587  000492  5016               	movf	??i2_printf+3,w,c
  7588  000494  221F               	addwfc	i2printf@width+1,f,c
  7589  000496  4A0D               	infsnz	i2printf@f,f,c
  7590  000498  2A0E               	incf	i2printf@f+1,f,c
  7591                           
  7592                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7593  00049A  C00D  FFF6         	movff	i2printf@f,tblptrl
  7594  00049E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7595  0004A2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7596  0004A2  6AF8               	clrf	tblptru,c
  7597  0004A4                     	endif
  7598  0004A4                     	if	0	;tblptru may be non-zero
  7599  0004A4                     	endif
  7600  0004A4  0008               	tblrd		*
  7601  0004A6  50F5               	movf	tablat,w,c
  7602  0004A8  ECD6  F00D         	call	i2_isdigit
  7603  0004AC  A0D8               	btfss	status,0,c
  7604  0004AE  D003               	goto	i2l3053
  7605  0004B0  D7CF               	goto	i2l3041
  7606  0004B2                     i2l3049:
  7607                           
  7608                           ;doprnt.c: 721: flag |= 0x80;
  7609  0004B2  8E1D               	bsf	i2printf@flag,7,c
  7610                           
  7611                           ;doprnt.c: 723: break;
  7612  0004B4  D018               	goto	i2l477
  7613  0004B6                     i2l3053:
  7614  0004B6  C00D  FFF6         	movff	i2printf@f,tblptrl
  7615  0004BA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7616  0004BE  4A0D               	infsnz	i2printf@f,f,c
  7617  0004C0  2A0E               	incf	i2printf@f+1,f,c
  7618  0004C2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7619  0004C2  6AF8               	clrf	tblptru,c
  7620  0004C4                     	endif
  7621  0004C4                     	if	0	;tblptru may be non-zero
  7622  0004C4                     	endif
  7623  0004C4  0008               	tblrd		*
  7624  0004C6  CFF5 F020          	movff	tablat,i2printf@c
  7625  0004CA  5020               	movf	i2printf@c,w,c
  7626                           
  7627                           ; Switch size 1, requested type "space"
  7628                           ; Number of cases is 4, Range of values is 0 to 120
  7629                           ; switch strategies available:
  7630                           ; Name         Instructions Cycles
  7631                           ; simple_byte           13     7 (average)
  7632                           ;	Chosen strategy is simple_byte
  7633  0004CC  0A00               	xorlw	0	; case 0
  7634  0004CE  B4D8               	btfsc	status,2,c
  7635  0004D0  0012               	return	
  7636  0004D2  0A64               	xorlw	100	; case 100
  7637  0004D4  B4D8               	btfsc	status,2,c
  7638  0004D6  D007               	goto	i2l477
  7639  0004D8  0A0D               	xorlw	13	; case 105
  7640  0004DA  B4D8               	btfsc	status,2,c
  7641  0004DC  D004               	goto	i2l477
  7642  0004DE  0A11               	xorlw	17	; case 120
  7643  0004E0  B4D8               	btfsc	status,2,c
  7644  0004E2  D7E7               	goto	i2l3049
  7645  0004E4  D112               	goto	i2l3151
  7646  0004E6                     i2l477:
  7647                           
  7648                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7649  0004E6  BE1D               	btfsc	i2printf@flag,7,c
  7650  0004E8  D015               	goto	i2l3065
  7651                           
  7652                           ;doprnt.c: 1253: {
  7653                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7654  0004EA  C018  FFD9         	movff	i2printf@ap,fsr2l
  7655  0004EE  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  7656  0004F2  CFDE F01B          	movff	postinc2,i2printf@val
  7657  0004F6  CFDD F01C          	movff	postdec2,i2printf@val+1
  7658  0004FA  0E02               	movlw	2
  7659  0004FC  2618               	addwf	i2printf@ap,f,c
  7660  0004FE  0E00               	movlw	0
  7661  000500  2219               	addwfc	i2printf@ap+1,f,c
  7662                           
  7663                           ;doprnt.c: 1261: if((int)val < 0) {
  7664  000502  AE1C               	btfss	i2printf@val+1,7,c
  7665  000504  D04A               	goto	i2l3099
  7666                           
  7667                           ;doprnt.c: 1262: flag |= 0x03;
  7668  000506  0E03               	movlw	3
  7669  000508  121D               	iorwf	i2printf@flag,f,c
  7670                           
  7671                           ;doprnt.c: 1263: val = -val;
  7672  00050A  6C1B               	negf	i2printf@val,c
  7673  00050C  1E1C               	comf	i2printf@val+1,f,c
  7674  00050E  B0D8               	btfsc	status,0,c
  7675  000510  2A1C               	incf	i2printf@val+1,f,c
  7676                           
  7677                           ;doprnt.c: 1264: }
  7678                           ;doprnt.c: 1266: }
  7679  000512  D043               	goto	i2l3099
  7680  000514                     i2l3065:
  7681                           
  7682                           ;doprnt.c: 1268: else
  7683                           ;doprnt.c: 1273: {
  7684                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7685  000514  C018  FFD9         	movff	i2printf@ap,fsr2l
  7686  000518  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  7687  00051C  CFDE F01B          	movff	postinc2,i2printf@val
  7688  000520  CFDD F01C          	movff	postdec2,i2printf@val+1
  7689  000524  0E02               	movlw	2
  7690  000526  2618               	addwf	i2printf@ap,f,c
  7691  000528  0E00               	movlw	0
  7692  00052A  2219               	addwfc	i2printf@ap+1,f,c
  7693                           
  7694                           ;doprnt.c: 1287: }
  7695                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7696  00052C  D036               	goto	i2l3099
  7697  00052E                     i2l3069:
  7698                           
  7699                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7700  00052E  0E01               	movlw	1
  7701  000530  6E20               	movwf	i2printf@c,c
  7702  000532                     i2l3071:
  7703  000532  0E05               	movlw	5
  7704  000534  1820               	xorwf	i2printf@c,w,c
  7705  000536  B4D8               	btfsc	status,2,c
  7706  000538  D038               	goto	i2l3101
  7707                           
  7708                           ;doprnt.c: 1306: if(val < dpowers[c])
  7709  00053A  5020               	movf	i2printf@c,w,c
  7710  00053C  0D02               	mullw	2
  7711  00053E  0E9E               	movlw	low _dpowers
  7712  000540  24F3               	addwf	prodl,w,c
  7713  000542  6EF6               	movwf	tblptrl,c
  7714  000544  0EFE               	movlw	high _dpowers
  7715  000546  20F4               	addwfc	prodh,w,c
  7716  000548  6EF7               	movwf	tblptrh,c
  7717  00054A                     	if	1	;There are 3 active tblptr bytes
  7718  00054A  6AF8               	clrf	tblptru,c
  7719  00054C  0E00               	movlw	low (__mediumconst shr (0+16))
  7720  00054E  22F8               	addwfc	tblptru,f,c
  7721  000550                     	endif
  7722  000550  0009               	tblrd		*+
  7723  000552  50F5               	movf	tablat,w,c
  7724  000554  5C1B               	subwf	i2printf@val,w,c
  7725  000556  0009               	tblrd		*+
  7726  000558  50F5               	movf	tablat,w,c
  7727  00055A  581C               	subwfb	i2printf@val+1,w,c
  7728  00055C  A0D8               	btfss	status,0,c
  7729  00055E  D025               	goto	i2l3101
  7730                           
  7731                           ;doprnt.c: 1307: break;
  7732  000560  2A20               	incf	i2printf@c,f,c
  7733  000562  D7E7               	goto	i2l3071
  7734  000564                     i2l3083:
  7735                           
  7736                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7737  000564  0E01               	movlw	1
  7738  000566  6E20               	movwf	i2printf@c,c
  7739  000568                     i2l3085:
  7740  000568  0E04               	movlw	4
  7741  00056A  1820               	xorwf	i2printf@c,w,c
  7742  00056C  B4D8               	btfsc	status,2,c
  7743  00056E  D01D               	goto	i2l3101
  7744                           
  7745                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7746  000570  5020               	movf	i2printf@c,w,c
  7747  000572  0D02               	mullw	2
  7748  000574  0EA8               	movlw	low _hexpowers
  7749  000576  24F3               	addwf	prodl,w,c
  7750  000578  6EF6               	movwf	tblptrl,c
  7751  00057A  0EFE               	movlw	high _hexpowers
  7752  00057C  20F4               	addwfc	prodh,w,c
  7753  00057E  6EF7               	movwf	tblptrh,c
  7754  000580                     	if	1	;There are 3 active tblptr bytes
  7755  000580  6AF8               	clrf	tblptru,c
  7756  000582  0E00               	movlw	low (__mediumconst shr (0+16))
  7757  000584  22F8               	addwfc	tblptru,f,c
  7758  000586                     	endif
  7759  000586  0009               	tblrd		*+
  7760  000588  50F5               	movf	tablat,w,c
  7761  00058A  5C1B               	subwf	i2printf@val,w,c
  7762  00058C  0009               	tblrd		*+
  7763  00058E  50F5               	movf	tablat,w,c
  7764  000590  581C               	subwfb	i2printf@val+1,w,c
  7765  000592  A0D8               	btfss	status,0,c
  7766  000594  D00A               	goto	i2l3101
  7767                           
  7768                           ;doprnt.c: 1318: break;
  7769  000596  2A20               	incf	i2printf@c,f,c
  7770  000598  D7E7               	goto	i2l3085
  7771  00059A                     i2l3099:
  7772  00059A  501D               	movf	i2printf@flag,w,c
  7773  00059C  0B80               	andlw	128
  7774                           
  7775                           ; Switch size 1, requested type "space"
  7776                           ; Number of cases is 2, Range of values is 0 to 128
  7777                           ; switch strategies available:
  7778                           ; Name         Instructions Cycles
  7779                           ; simple_byte            7     4 (average)
  7780                           ;	Chosen strategy is simple_byte
  7781  00059E  0A00               	xorlw	0	; case 0
  7782  0005A0  B4D8               	btfsc	status,2,c
  7783  0005A2  D7C5               	goto	i2l3069
  7784  0005A4  0A80               	xorlw	128	; case 128
  7785  0005A6  B4D8               	btfsc	status,2,c
  7786  0005A8  D7DD               	goto	i2l3083
  7787  0005AA                     i2l3101:
  7788                           
  7789                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7790  0005AA  501E               	movf	i2printf@width,w,c
  7791  0005AC  101F               	iorwf	i2printf@width+1,w,c
  7792  0005AE  B4D8               	btfsc	status,2,c
  7793  0005B0  D009               	goto	i2l3107
  7794  0005B2  C01D  F013         	movff	i2printf@flag,??i2_printf
  7795  0005B6  0E03               	movlw	3
  7796  0005B8  1613               	andwf	??i2_printf,f,c
  7797  0005BA  B4D8               	btfsc	status,2,c
  7798  0005BC  D003               	goto	i2l3107
  7799                           
  7800                           ;doprnt.c: 1346: width--;
  7801  0005BE  061E               	decf	i2printf@width,f,c
  7802  0005C0  A0D8               	btfss	status,0,c
  7803  0005C2  061F               	decf	i2printf@width+1,f,c
  7804  0005C4                     i2l3107:
  7805                           
  7806                           ;doprnt.c: 1381: if(width > c)
  7807  0005C4  0E80               	movlw	128
  7808  0005C6  BE20               	btfsc	i2printf@c,7,c
  7809  0005C8  0E7F               	movlw	127
  7810  0005CA  6E13               	movwf	??i2_printf& (0+255),c
  7811  0005CC  501E               	movf	i2printf@width,w,c
  7812  0005CE  5C20               	subwf	i2printf@c,w,c
  7813  0005D0  501F               	movf	i2printf@width+1,w,c
  7814  0005D2  0A80               	xorlw	128
  7815  0005D4  5813               	subwfb	??i2_printf& (0+255),w,c
  7816  0005D6  B0D8               	btfsc	status,0,c
  7817  0005D8  D007               	goto	i2l3111
  7818                           
  7819                           ;doprnt.c: 1382: width -= c;
  7820  0005DA  5020               	movf	i2printf@c,w,c
  7821  0005DC  5E1E               	subwf	i2printf@width,f,c
  7822  0005DE  0E00               	movlw	0
  7823  0005E0  BE20               	btfsc	i2printf@c,7,c
  7824  0005E2  0EFF               	movlw	255
  7825  0005E4  5A1F               	subwfb	i2printf@width+1,f,c
  7826  0005E6  D004               	goto	i2l3113
  7827  0005E8                     i2l3111:
  7828                           
  7829                           ;doprnt.c: 1383: else
  7830                           ;doprnt.c: 1384: width = 0;
  7831  0005E8  0E00               	movlw	0
  7832  0005EA  6E1F               	movwf	i2printf@width+1,c
  7833  0005EC  0E00               	movlw	0
  7834  0005EE  6E1E               	movwf	i2printf@width,c
  7835  0005F0                     i2l3113:
  7836                           
  7837                           ;doprnt.c: 1387: if(flag & 0x04) {
  7838  0005F0  A41D               	btfss	i2printf@flag,2,c
  7839  0005F2  D014               	goto	i2l3125
  7840                           
  7841                           ;doprnt.c: 1392: if(flag & 0x03)
  7842  0005F4  C01D  F013         	movff	i2printf@flag,??i2_printf
  7843  0005F8  0E03               	movlw	3
  7844  0005FA  1613               	andwf	??i2_printf,f,c
  7845  0005FC  B4D8               	btfsc	status,2,c
  7846  0005FE  D003               	goto	i2l3119
  7847                           
  7848                           ;doprnt.c: 1393: (putch('-') );
  7849  000600  0E2D               	movlw	45
  7850  000602  ECFF  F00D         	call	i2_putch
  7851  000606                     i2l3119:
  7852                           
  7853                           ;doprnt.c: 1415: if(width)
  7854  000606  501E               	movf	i2printf@width,w,c
  7855  000608  101F               	iorwf	i2printf@width+1,w,c
  7856  00060A  B4D8               	btfsc	status,2,c
  7857  00060C  D01E               	goto	i2l3135
  7858                           
  7859                           ;doprnt.c: 1417: (putch('0') );
  7860                           
  7861                           ;doprnt.c: 1416: do
  7862  00060E  0E30               	movlw	48
  7863  000610  ECFF  F00D         	call	i2_putch
  7864                           
  7865                           ;doprnt.c: 1418: while(--width);
  7866  000614  061E               	decf	i2printf@width,f,c
  7867  000616  A0D8               	btfss	status,0,c
  7868  000618  061F               	decf	i2printf@width+1,f,c
  7869  00061A  D7F5               	goto	i2l3119
  7870  00061C                     i2l3125:
  7871                           
  7872                           ;doprnt.c: 1422: {
  7873                           ;doprnt.c: 1424: if(width
  7874                           ;doprnt.c: 1428: )
  7875  00061C  501E               	movf	i2printf@width,w,c
  7876  00061E  101F               	iorwf	i2printf@width+1,w,c
  7877  000620  B4D8               	btfsc	status,2,c
  7878  000622  D00A               	goto	i2l3131
  7879  000624                     i2l3127:
  7880                           
  7881                           ;doprnt.c: 1430: (putch(' ') );
  7882  000624  0E20               	movlw	32
  7883  000626  ECFF  F00D         	call	i2_putch
  7884                           
  7885                           ;doprnt.c: 1431: while(--width);
  7886  00062A  061E               	decf	i2printf@width,f,c
  7887  00062C  A0D8               	btfss	status,0,c
  7888  00062E  061F               	decf	i2printf@width+1,f,c
  7889  000630  501E               	movf	i2printf@width,w,c
  7890  000632  101F               	iorwf	i2printf@width+1,w,c
  7891  000634  A4D8               	btfss	status,2,c
  7892  000636  D7F6               	goto	i2l3127
  7893  000638                     i2l3131:
  7894                           
  7895                           ;doprnt.c: 1438: if(flag & 0x03)
  7896  000638  C01D  F013         	movff	i2printf@flag,??i2_printf
  7897  00063C  0E03               	movlw	3
  7898  00063E  1613               	andwf	??i2_printf,f,c
  7899  000640  B4D8               	btfsc	status,2,c
  7900  000642  D003               	goto	i2l3135
  7901                           
  7902                           ;doprnt.c: 1439: (putch('-') );
  7903  000644  0E2D               	movlw	45
  7904  000646  ECFF  F00D         	call	i2_putch
  7905  00064A                     i2l3135:
  7906                           
  7907                           ;doprnt.c: 1469: }
  7908                           ;doprnt.c: 1472: prec = c;
  7909  00064A  C020  F01A         	movff	i2printf@c,i2printf@prec
  7910                           
  7911                           ;doprnt.c: 1474: while(prec--) {
  7912  00064E  D059               	goto	i2l3149
  7913  000650                     i2l3137:
  7914                           
  7915                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7916  000650  501A               	movf	i2printf@prec,w,c
  7917  000652  0D02               	mullw	2
  7918  000654  0E9E               	movlw	low _dpowers
  7919  000656  24F3               	addwf	prodl,w,c
  7920  000658  6EF6               	movwf	tblptrl,c
  7921  00065A  0EFE               	movlw	high _dpowers
  7922  00065C  20F4               	addwfc	prodh,w,c
  7923  00065E  6EF7               	movwf	tblptrh,c
  7924  000660                     	if	1	;There are 3 active tblptr bytes
  7925  000660  6AF8               	clrf	tblptru,c
  7926  000662  0E00               	movlw	low (__mediumconst shr (0+16))
  7927  000664  22F8               	addwfc	tblptru,f,c
  7928  000666                     	endif
  7929  000666  0009               	tblrd		*+
  7930  000668  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7931  00066C  000A               	tblrd		*-
  7932  00066E  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7933  000672  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7934  000676  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7935  00067A  EC25  F00C         	call	i2___lwdiv	;wreg free
  7936  00067E  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  7937  000682  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  7938  000686  0E00               	movlw	0
  7939  000688  6E0B               	movwf	i2___lwmod@divisor+1,c
  7940  00068A  0E0A               	movlw	10
  7941  00068C  6E0A               	movwf	i2___lwmod@divisor,c
  7942  00068E  ECBE  F00C         	call	i2___lwmod	;wreg free
  7943  000692  5008               	movf	?i2___lwmod,w,c
  7944  000694  0F30               	addlw	48
  7945  000696  6E20               	movwf	i2printf@c,c
  7946                           
  7947                           ;doprnt.c: 1491: break;
  7948  000698  D031               	goto	i2l3147
  7949  00069A                     i2l3139:
  7950                           
  7951                           ;doprnt.c: 1499: {
  7952                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7953  00069A  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7954  00069E  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7955  0006A2  501A               	movf	i2printf@prec,w,c
  7956  0006A4  0D02               	mullw	2
  7957  0006A6  0EA8               	movlw	low _hexpowers
  7958  0006A8  24F3               	addwf	prodl,w,c
  7959  0006AA  6EF6               	movwf	tblptrl,c
  7960  0006AC  0EFE               	movlw	high _hexpowers
  7961  0006AE  20F4               	addwfc	prodh,w,c
  7962  0006B0  6EF7               	movwf	tblptrh,c
  7963  0006B2                     	if	1	;There are 3 active tblptr bytes
  7964  0006B2  6AF8               	clrf	tblptru,c
  7965  0006B4  0E00               	movlw	low (__mediumconst shr (0+16))
  7966  0006B6  22F8               	addwfc	tblptru,f,c
  7967  0006B8                     	endif
  7968  0006B8  0009               	tblrd		*+
  7969  0006BA  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7970  0006BE  000A               	tblrd		*-
  7971  0006C0  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7972  0006C4  EC25  F00C         	call	i2___lwdiv	;wreg free
  7973  0006C8  5001               	movf	?i2___lwdiv,w,c
  7974  0006CA  0B0F               	andlw	15
  7975  0006CC  6E17               	movwf	i2printf@idx,c
  7976                           
  7977                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7978  0006CE  5017               	movf	i2printf@idx,w,c
  7979  0006D0  0D01               	mullw	1
  7980  0006D2  0EE0               	movlw	low STR_23
  7981  0006D4  24F3               	addwf	prodl,w,c
  7982  0006D6  6EF6               	movwf	tblptrl,c
  7983  0006D8  0EFE               	movlw	high STR_23
  7984  0006DA  20F4               	addwfc	prodh,w,c
  7985  0006DC  6EF7               	movwf	tblptrh,c
  7986  0006DE                     	if	1	;There are 3 active tblptr bytes
  7987  0006DE  6AF8               	clrf	tblptru,c
  7988  0006E0  0E00               	movlw	low (__mediumconst shr (0+16))
  7989  0006E2  22F8               	addwfc	tblptru,f,c
  7990  0006E4                     	endif
  7991  0006E4  0008               	tblrd		*
  7992  0006E6  CFF5 F020          	movff	tablat,i2printf@c
  7993                           
  7994                           ;doprnt.c: 1523: }
  7995                           
  7996                           ;doprnt.c: 1508: }
  7997                           ;doprnt.c: 1510: break;
  7998  0006EA  D008               	goto	i2l3147
  7999  0006EC                     i2l3145:
  8000  0006EC  501D               	movf	i2printf@flag,w,c
  8001  0006EE  0B80               	andlw	128
  8002                           
  8003                           ; Switch size 1, requested type "space"
  8004                           ; Number of cases is 2, Range of values is 0 to 128
  8005                           ; switch strategies available:
  8006                           ; Name         Instructions Cycles
  8007                           ; simple_byte            7     4 (average)
  8008                           ;	Chosen strategy is simple_byte
  8009  0006F0  0A00               	xorlw	0	; case 0
  8010  0006F2  B4D8               	btfsc	status,2,c
  8011  0006F4  D7AD               	goto	i2l3137
  8012  0006F6  0A80               	xorlw	128	; case 128
  8013  0006F8  B4D8               	btfsc	status,2,c
  8014  0006FA  D7CF               	goto	i2l3139
  8015  0006FC                     i2l3147:
  8016                           
  8017                           ;doprnt.c: 1524: (putch(c) );
  8018  0006FC  5020               	movf	i2printf@c,w,c
  8019  0006FE  ECFF  F00D         	call	i2_putch
  8020  000702                     i2l3149:
  8021  000702  061A               	decf	i2printf@prec,f,c
  8022  000704  281A               	incf	i2printf@prec,w,c
  8023  000706  A4D8               	btfss	status,2,c
  8024  000708  D7F1               	goto	i2l3145
  8025  00070A                     i2l3151:
  8026  00070A  C00D  FFF6         	movff	i2printf@f,tblptrl
  8027  00070E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8028  000712  4A0D               	infsnz	i2printf@f,f,c
  8029  000714  2A0E               	incf	i2printf@f+1,f,c
  8030  000716                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8031  000716  6AF8               	clrf	tblptru,c
  8032  000718                     	endif
  8033  000718                     	if	0	;tblptru may be non-zero
  8034  000718                     	endif
  8035  000718  0008               	tblrd		*
  8036  00071A  CFF5 F020          	movff	tablat,i2printf@c
  8037  00071E  5020               	movf	i2printf@c,w,c
  8038  000720  B4D8               	btfsc	status,2,c
  8039  000722  0012               	return	
  8040  000724  D66A               	goto	i2l3025
  8041  000726                     __end_ofi2_printf:
  8042                           	opt stack 0
  8043                           tosu	equ	0xFFF
  8044                           tosh	equ	0xFFE
  8045                           tosl	equ	0xFFD
  8046                           pclatu	equ	0xFFB
  8047                           pclath	equ	0xFFA
  8048                           tblptru	equ	0xFF8
  8049                           tblptrh	equ	0xFF7
  8050                           tblptrl	equ	0xFF6
  8051                           tablat	equ	0xFF5
  8052                           prodh	equ	0xFF4
  8053                           prodl	equ	0xFF3
  8054                           intcon	equ	0xFF2
  8055                           intcon3	equ	0xFF0
  8056                           postinc0	equ	0xFEE
  8057                           fsr0h	equ	0xFEA
  8058                           fsr0l	equ	0xFE9
  8059                           wreg	equ	0xFE8
  8060                           fsr1h	equ	0xFE2
  8061                           fsr1l	equ	0xFE1
  8062                           indf2	equ	0xFDF
  8063                           postinc2	equ	0xFDE
  8064                           postdec2	equ	0xFDD
  8065                           fsr2h	equ	0xFDA
  8066                           fsr2l	equ	0xFD9
  8067                           status	equ	0xFD8
  8068                           
  8069 ;; *************** function i2_putch *****************
  8070 ;; Defined at:
  8071 ;;		line 30 in file "lcd.c"
  8072 ;; Parameters:    Size  Location     Type
  8073 ;;  data            1    wreg     unsigned char 
  8074 ;; Auto vars:     Size  Location     Type
  8075 ;;  data            1    2[COMRAM] unsigned char 
  8076 ;; Return value:  Size  Location     Type
  8077 ;;                  1    wreg      void 
  8078 ;; Registers used:
  8079 ;;		wreg, status,2, status,0, cstack
  8080 ;; Tracked objects:
  8081 ;;		On entry : 0/0
  8082 ;;		On exit  : 0/0
  8083 ;;		Unchanged: 0/0
  8084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8086 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8088 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8089 ;;Total ram usage:        1 bytes
  8090 ;; Hardware stack levels used:    1
  8091 ;; Hardware stack levels required when called:    1
  8092 ;; This function calls:
  8093 ;;		i2_lcdNibble
  8094 ;; This function is called by:
  8095 ;;		i2_printf
  8096 ;; This function uses a non-reentrant model
  8097 ;;
  8098                           
  8099                           	psect	text40
  8100  001BFE                     __ptext40:
  8101                           	opt stack 0
  8102  001BFE                     i2_putch:
  8103                           	opt stack 21
  8104                           
  8105                           ;incstack = 0
  8106                           ;i2putch@data stored from wreg
  8107  001BFE  6E03               	movwf	i2putch@data,c
  8108                           
  8109                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  8110  001C00  848C               	bsf	3980,2,c	;volatile
  8111                           
  8112                           ;lcd.c: 32: lcdNibble(data);
  8113  001C02  5003               	movf	i2putch@data,w,c
  8114  001C04  ECFA  F00B         	call	i2_lcdNibble
  8115  001C08  0012               	return		;funcret
  8116  001C0A                     __end_ofi2_putch:
  8117                           	opt stack 0
  8118                           tosu	equ	0xFFF
  8119                           tosh	equ	0xFFE
  8120                           tosl	equ	0xFFD
  8121                           pclatu	equ	0xFFB
  8122                           pclath	equ	0xFFA
  8123                           tblptru	equ	0xFF8
  8124                           tblptrh	equ	0xFF7
  8125                           tblptrl	equ	0xFF6
  8126                           tablat	equ	0xFF5
  8127                           prodh	equ	0xFF4
  8128                           prodl	equ	0xFF3
  8129                           intcon	equ	0xFF2
  8130                           intcon3	equ	0xFF0
  8131                           postinc0	equ	0xFEE
  8132                           fsr0h	equ	0xFEA
  8133                           fsr0l	equ	0xFE9
  8134                           wreg	equ	0xFE8
  8135                           fsr1h	equ	0xFE2
  8136                           fsr1l	equ	0xFE1
  8137                           indf2	equ	0xFDF
  8138                           postinc2	equ	0xFDE
  8139                           postdec2	equ	0xFDD
  8140                           fsr2h	equ	0xFDA
  8141                           fsr2l	equ	0xFD9
  8142                           status	equ	0xFD8
  8143                           
  8144 ;; *************** function i2_isdigit *****************
  8145 ;; Defined at:
  8146 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/isdigit.c"
  8147 ;; Parameters:    Size  Location     Type
  8148 ;;  c               1    wreg     unsigned char 
  8149 ;; Auto vars:     Size  Location     Type
  8150 ;;  c               1    2[COMRAM] unsigned char 
  8151 ;; Return value:  Size  Location     Type
  8152 ;;		None               void
  8153 ;; Registers used:
  8154 ;;		wreg, status,2, status,0
  8155 ;; Tracked objects:
  8156 ;;		On entry : 0/0
  8157 ;;		On exit  : 0/0
  8158 ;;		Unchanged: 0/0
  8159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8161 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8162 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8163 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8164 ;;Total ram usage:        3 bytes
  8165 ;; Hardware stack levels used:    1
  8166 ;; This function calls:
  8167 ;;		Nothing
  8168 ;; This function is called by:
  8169 ;;		i2_printf
  8170 ;; This function uses a non-reentrant model
  8171 ;;
  8172                           
  8173                           	psect	text41
  8174  001BAC                     __ptext41:
  8175                           	opt stack 0
  8176  001BAC                     i2_isdigit:
  8177                           	opt stack 22
  8178                           
  8179                           ;incstack = 0
  8180                           ;i2isdigit@c stored from wreg
  8181  001BAC  6E03               	movwf	i2isdigit@c,c
  8182  001BAE  0E00               	movlw	0
  8183  001BB0  6E02               	movwf	i2_isdigit$1082,c
  8184  001BB2  0E3A               	movlw	58
  8185  001BB4  6003               	cpfslt	i2isdigit@c,c
  8186  001BB6  D005               	goto	i2l2707
  8187  001BB8  0E2F               	movlw	47
  8188  001BBA  6403               	cpfsgt	i2isdigit@c,c
  8189  001BBC  D002               	goto	i2l2707
  8190  001BBE  0E01               	movlw	1
  8191  001BC0  6E02               	movwf	i2_isdigit$1082,c
  8192  001BC2                     i2l2707:
  8193  001BC2  C002  F001         	movff	i2_isdigit$1082,??i2_isdigit
  8194  001BC6  3001               	rrcf	??i2_isdigit,w,c
  8195  001BC8  0012               	return	
  8196  001BCA                     __end_ofi2_isdigit:
  8197                           	opt stack 0
  8198                           tosu	equ	0xFFF
  8199                           tosh	equ	0xFFE
  8200                           tosl	equ	0xFFD
  8201                           pclatu	equ	0xFFB
  8202                           pclath	equ	0xFFA
  8203                           tblptru	equ	0xFF8
  8204                           tblptrh	equ	0xFF7
  8205                           tblptrl	equ	0xFF6
  8206                           tablat	equ	0xFF5
  8207                           prodh	equ	0xFF4
  8208                           prodl	equ	0xFF3
  8209                           intcon	equ	0xFF2
  8210                           intcon3	equ	0xFF0
  8211                           postinc0	equ	0xFEE
  8212                           fsr0h	equ	0xFEA
  8213                           fsr0l	equ	0xFE9
  8214                           wreg	equ	0xFE8
  8215                           fsr1h	equ	0xFE2
  8216                           fsr1l	equ	0xFE1
  8217                           indf2	equ	0xFDF
  8218                           postinc2	equ	0xFDE
  8219                           postdec2	equ	0xFDD
  8220                           fsr2h	equ	0xFDA
  8221                           fsr2l	equ	0xFD9
  8222                           status	equ	0xFD8
  8223                           
  8224 ;; *************** function i2___wmul *****************
  8225 ;; Defined at:
  8226 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/Umul16.c"
  8227 ;; Parameters:    Size  Location     Type
  8228 ;;  multiplier      2    0[COMRAM] unsigned int 
  8229 ;;  multiplicand    2    2[COMRAM] unsigned int 
  8230 ;; Auto vars:     Size  Location     Type
  8231 ;;  __wmul          2    4[COMRAM] unsigned int 
  8232 ;; Return value:  Size  Location     Type
  8233 ;;                  2    0[COMRAM] unsigned int 
  8234 ;; Registers used:
  8235 ;;		wreg, status,2, status,0, prodl, prodh
  8236 ;; Tracked objects:
  8237 ;;		On entry : 0/0
  8238 ;;		On exit  : 0/0
  8239 ;;		Unchanged: 0/0
  8240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8241 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8242 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8244 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8245 ;;Total ram usage:        6 bytes
  8246 ;; Hardware stack levels used:    1
  8247 ;; This function calls:
  8248 ;;		Nothing
  8249 ;; This function is called by:
  8250 ;;		i2_printf
  8251 ;; This function uses a non-reentrant model
  8252 ;;
  8253                           
  8254                           	psect	text42
  8255  001AC0                     __ptext42:
  8256                           	opt stack 0
  8257  001AC0                     i2___wmul:
  8258                           	opt stack 22
  8259                           
  8260                           ;incstack = 0
  8261  001AC0  5001               	movf	i2___wmul@multiplier,w,c
  8262  001AC2  0203               	mulwf	i2___wmul@multiplicand,c
  8263  001AC4  CFF3 F005          	movff	prodl,i2___wmul@product
  8264  001AC8  CFF4 F006          	movff	prodh,i2___wmul@product+1
  8265  001ACC  5001               	movf	i2___wmul@multiplier,w,c
  8266  001ACE  0204               	mulwf	i2___wmul@multiplicand+1,c
  8267  001AD0  50F3               	movf	prodl,w,c
  8268  001AD2  2606               	addwf	i2___wmul@product+1,f,c
  8269  001AD4  5002               	movf	i2___wmul@multiplier+1,w,c
  8270  001AD6  0203               	mulwf	i2___wmul@multiplicand,c
  8271  001AD8  50F3               	movf	prodl,w,c
  8272  001ADA  2606               	addwf	i2___wmul@product+1,f,c
  8273  001ADC  C005  F001         	movff	i2___wmul@product,?i2___wmul
  8274  001AE0  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  8275  001AE4  0012               	return	
  8276  001AE6                     __end_ofi2___wmul:
  8277                           	opt stack 0
  8278                           tosu	equ	0xFFF
  8279                           tosh	equ	0xFFE
  8280                           tosl	equ	0xFFD
  8281                           pclatu	equ	0xFFB
  8282                           pclath	equ	0xFFA
  8283                           tblptru	equ	0xFF8
  8284                           tblptrh	equ	0xFF7
  8285                           tblptrl	equ	0xFF6
  8286                           tablat	equ	0xFF5
  8287                           prodh	equ	0xFF4
  8288                           prodl	equ	0xFF3
  8289                           intcon	equ	0xFF2
  8290                           intcon3	equ	0xFF0
  8291                           postinc0	equ	0xFEE
  8292                           fsr0h	equ	0xFEA
  8293                           fsr0l	equ	0xFE9
  8294                           wreg	equ	0xFE8
  8295                           fsr1h	equ	0xFE2
  8296                           fsr1l	equ	0xFE1
  8297                           indf2	equ	0xFDF
  8298                           postinc2	equ	0xFDE
  8299                           postdec2	equ	0xFDD
  8300                           fsr2h	equ	0xFDA
  8301                           fsr2l	equ	0xFD9
  8302                           status	equ	0xFD8
  8303                           
  8304 ;; *************** function i2___lwmod *****************
  8305 ;; Defined at:
  8306 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
  8307 ;; Parameters:    Size  Location     Type
  8308 ;;  dividend        2    7[COMRAM] unsigned int 
  8309 ;;  divisor         2    9[COMRAM] unsigned int 
  8310 ;; Auto vars:     Size  Location     Type
  8311 ;;  __lwmod         1   11[COMRAM] unsigned char 
  8312 ;; Return value:  Size  Location     Type
  8313 ;;                  2    7[COMRAM] unsigned int 
  8314 ;; Registers used:
  8315 ;;		wreg, status,2, status,0
  8316 ;; Tracked objects:
  8317 ;;		On entry : 0/0
  8318 ;;		On exit  : 0/0
  8319 ;;		Unchanged: 0/0
  8320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8321 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8322 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8324 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8325 ;;Total ram usage:        5 bytes
  8326 ;; Hardware stack levels used:    1
  8327 ;; This function calls:
  8328 ;;		Nothing
  8329 ;; This function is called by:
  8330 ;;		i2_printf
  8331 ;; This function uses a non-reentrant model
  8332 ;;
  8333                           
  8334                           	psect	text43
  8335  00197C                     __ptext43:
  8336                           	opt stack 0
  8337  00197C                     i2___lwmod:
  8338                           	opt stack 22
  8339                           
  8340                           ;incstack = 0
  8341  00197C  500A               	movf	i2___lwmod@divisor,w,c
  8342  00197E  100B               	iorwf	i2___lwmod@divisor+1,w,c
  8343  001980  B4D8               	btfsc	status,2,c
  8344  001982  D018               	goto	i2l932
  8345  001984  0E01               	movlw	1
  8346  001986  6E0C               	movwf	i2___lwmod@counter,c
  8347  001988  D004               	goto	i2l2739
  8348  00198A                     i2l2737:
  8349  00198A  90D8               	bcf	status,0,c
  8350  00198C  360A               	rlcf	i2___lwmod@divisor,f,c
  8351  00198E  360B               	rlcf	i2___lwmod@divisor+1,f,c
  8352  001990  2A0C               	incf	i2___lwmod@counter,f,c
  8353  001992                     i2l2739:
  8354  001992  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  8355  001994  D7FA               	goto	i2l2737
  8356  001996                     i2l2741:
  8357  001996  500A               	movf	i2___lwmod@divisor,w,c
  8358  001998  5C08               	subwf	i2___lwmod@dividend,w,c
  8359  00199A  500B               	movf	i2___lwmod@divisor+1,w,c
  8360  00199C  5809               	subwfb	i2___lwmod@dividend+1,w,c
  8361  00199E  A0D8               	btfss	status,0,c
  8362  0019A0  D004               	goto	i2l2745
  8363  0019A2  500A               	movf	i2___lwmod@divisor,w,c
  8364  0019A4  5E08               	subwf	i2___lwmod@dividend,f,c
  8365  0019A6  500B               	movf	i2___lwmod@divisor+1,w,c
  8366  0019A8  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  8367  0019AA                     i2l2745:
  8368  0019AA  90D8               	bcf	status,0,c
  8369  0019AC  320B               	rrcf	i2___lwmod@divisor+1,f,c
  8370  0019AE  320A               	rrcf	i2___lwmod@divisor,f,c
  8371  0019B0  2E0C               	decfsz	i2___lwmod@counter,f,c
  8372  0019B2  D7F1               	goto	i2l2741
  8373  0019B4                     i2l932:
  8374  0019B4  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  8375  0019B8  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  8376  0019BC  0012               	return		;funcret
  8377  0019BE                     __end_ofi2___lwmod:
  8378                           	opt stack 0
  8379                           tosu	equ	0xFFF
  8380                           tosh	equ	0xFFE
  8381                           tosl	equ	0xFFD
  8382                           pclatu	equ	0xFFB
  8383                           pclath	equ	0xFFA
  8384                           tblptru	equ	0xFF8
  8385                           tblptrh	equ	0xFF7
  8386                           tblptrl	equ	0xFF6
  8387                           tablat	equ	0xFF5
  8388                           prodh	equ	0xFF4
  8389                           prodl	equ	0xFF3
  8390                           intcon	equ	0xFF2
  8391                           intcon3	equ	0xFF0
  8392                           postinc0	equ	0xFEE
  8393                           fsr0h	equ	0xFEA
  8394                           fsr0l	equ	0xFE9
  8395                           wreg	equ	0xFE8
  8396                           fsr1h	equ	0xFE2
  8397                           fsr1l	equ	0xFE1
  8398                           indf2	equ	0xFDF
  8399                           postinc2	equ	0xFDE
  8400                           postdec2	equ	0xFDD
  8401                           fsr2h	equ	0xFDA
  8402                           fsr2l	equ	0xFD9
  8403                           status	equ	0xFD8
  8404                           
  8405 ;; *************** function i2___lwdiv *****************
  8406 ;; Defined at:
  8407 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  8408 ;; Parameters:    Size  Location     Type
  8409 ;;  dividend        2    0[COMRAM] unsigned int 
  8410 ;;  divisor         2    2[COMRAM] unsigned int 
  8411 ;; Auto vars:     Size  Location     Type
  8412 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  8413 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  8414 ;; Return value:  Size  Location     Type
  8415 ;;                  2    0[COMRAM] unsigned int 
  8416 ;; Registers used:
  8417 ;;		wreg, status,2, status,0
  8418 ;; Tracked objects:
  8419 ;;		On entry : 0/0
  8420 ;;		On exit  : 0/0
  8421 ;;		Unchanged: 0/0
  8422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8423 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8424 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8426 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8427 ;;Total ram usage:        7 bytes
  8428 ;; Hardware stack levels used:    1
  8429 ;; This function calls:
  8430 ;;		Nothing
  8431 ;; This function is called by:
  8432 ;;		i2_printf
  8433 ;; This function uses a non-reentrant model
  8434 ;;
  8435                           
  8436                           	psect	text44
  8437  00184A                     __ptext44:
  8438                           	opt stack 0
  8439  00184A                     i2___lwdiv:
  8440                           	opt stack 22
  8441                           
  8442                           ;incstack = 0
  8443  00184A  0E00               	movlw	0
  8444  00184C  6E06               	movwf	i2___lwdiv@quotient+1,c
  8445  00184E  0E00               	movlw	0
  8446  001850  6E05               	movwf	i2___lwdiv@quotient,c
  8447  001852  5003               	movf	i2___lwdiv@divisor,w,c
  8448  001854  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  8449  001856  B4D8               	btfsc	status,2,c
  8450  001858  D01C               	goto	i2l922
  8451  00185A  0E01               	movlw	1
  8452  00185C  6E07               	movwf	i2___lwdiv@counter,c
  8453  00185E  D004               	goto	i2l2719
  8454  001860                     i2l2717:
  8455  001860  90D8               	bcf	status,0,c
  8456  001862  3603               	rlcf	i2___lwdiv@divisor,f,c
  8457  001864  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  8458  001866  2A07               	incf	i2___lwdiv@counter,f,c
  8459  001868                     i2l2719:
  8460  001868  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  8461  00186A  D7FA               	goto	i2l2717
  8462  00186C                     i2l2721:
  8463  00186C  90D8               	bcf	status,0,c
  8464  00186E  3605               	rlcf	i2___lwdiv@quotient,f,c
  8465  001870  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  8466  001872  5003               	movf	i2___lwdiv@divisor,w,c
  8467  001874  5C01               	subwf	i2___lwdiv@dividend,w,c
  8468  001876  5004               	movf	i2___lwdiv@divisor+1,w,c
  8469  001878  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  8470  00187A  A0D8               	btfss	status,0,c
  8471  00187C  D005               	goto	i2l2729
  8472  00187E  5003               	movf	i2___lwdiv@divisor,w,c
  8473  001880  5E01               	subwf	i2___lwdiv@dividend,f,c
  8474  001882  5004               	movf	i2___lwdiv@divisor+1,w,c
  8475  001884  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  8476  001886  8005               	bsf	i2___lwdiv@quotient,0,c
  8477  001888                     i2l2729:
  8478  001888  90D8               	bcf	status,0,c
  8479  00188A  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  8480  00188C  3203               	rrcf	i2___lwdiv@divisor,f,c
  8481  00188E  2E07               	decfsz	i2___lwdiv@counter,f,c
  8482  001890  D7ED               	goto	i2l2721
  8483  001892                     i2l922:
  8484  001892  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  8485  001896  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  8486  00189A  0012               	return		;funcret
  8487  00189C                     __end_ofi2___lwdiv:
  8488                           	opt stack 0
  8489                           tosu	equ	0xFFF
  8490                           tosh	equ	0xFFE
  8491                           tosl	equ	0xFFD
  8492                           pclatu	equ	0xFFB
  8493                           pclath	equ	0xFFA
  8494                           tblptru	equ	0xFF8
  8495                           tblptrh	equ	0xFF7
  8496                           tblptrl	equ	0xFF6
  8497                           tablat	equ	0xFF5
  8498                           prodh	equ	0xFF4
  8499                           prodl	equ	0xFF3
  8500                           intcon	equ	0xFF2
  8501                           intcon3	equ	0xFF0
  8502                           postinc0	equ	0xFEE
  8503                           fsr0h	equ	0xFEA
  8504                           fsr0l	equ	0xFE9
  8505                           wreg	equ	0xFE8
  8506                           fsr1h	equ	0xFE2
  8507                           fsr1l	equ	0xFE1
  8508                           indf2	equ	0xFDF
  8509                           postinc2	equ	0xFDE
  8510                           postdec2	equ	0xFDD
  8511                           fsr2h	equ	0xFDA
  8512                           fsr2l	equ	0xFD9
  8513                           status	equ	0xFD8
  8514                           
  8515 ;; *************** function i2_initLCD *****************
  8516 ;; Defined at:
  8517 ;;		line 14 in file "lcd.c"
  8518 ;; Parameters:    Size  Location     Type
  8519 ;;		None
  8520 ;; Auto vars:     Size  Location     Type
  8521 ;;		None
  8522 ;; Return value:  Size  Location     Type
  8523 ;;                  1    wreg      void 
  8524 ;; Registers used:
  8525 ;;		wreg, status,2, status,0, cstack
  8526 ;; Tracked objects:
  8527 ;;		On entry : 0/0
  8528 ;;		On exit  : 0/0
  8529 ;;		Unchanged: 0/0
  8530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8533 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8534 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8535 ;;Total ram usage:        1 bytes
  8536 ;; Hardware stack levels used:    1
  8537 ;; Hardware stack levels required when called:    2
  8538 ;; This function calls:
  8539 ;;		i2_lcdInst
  8540 ;; This function is called by:
  8541 ;;		_keypressed
  8542 ;;		_tot_sorted
  8543 ;;		_op_time
  8544 ;;		_tin_results
  8545 ;;		_pop_results
  8546 ;; This function uses a non-reentrant model
  8547 ;;
  8548                           
  8549                           	psect	text45
  8550  001936                     __ptext45:
  8551                           	opt stack 0
  8552  001936                     i2_initLCD:
  8553                           	opt stack 21
  8554                           
  8555                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  8556                           
  8557                           ;incstack = 0
  8558  001936  0E31               	movlw	49
  8559  001938  6E04               	movwf	??i2_initLCD& (0+255),c
  8560  00193A  0EB2               	movlw	178
  8561  00193C                     i2u453_47:
  8562  00193C  2EE8               	decfsz	wreg,f,c
  8563  00193E  D7FE               	bra	i2u453_47
  8564  001940  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  8565  001942  D7FC               	bra	i2u453_47
  8566  001944  D000               	nop2	
  8567                           
  8568                           ;lcd.c: 16: lcdInst(0b00110011);
  8569  001946  0E33               	movlw	51
  8570  001948  EC05  F00E         	call	i2_lcdInst
  8571                           
  8572                           ;lcd.c: 17: lcdInst(0b00110010);
  8573  00194C  0E32               	movlw	50
  8574  00194E  EC05  F00E         	call	i2_lcdInst
  8575                           
  8576                           ;lcd.c: 18: lcdInst(0b00101000);
  8577  001952  0E28               	movlw	40
  8578  001954  EC05  F00E         	call	i2_lcdInst
  8579                           
  8580                           ;lcd.c: 19: lcdInst(0b00001111);
  8581  001958  0E0F               	movlw	15
  8582  00195A  EC05  F00E         	call	i2_lcdInst
  8583                           
  8584                           ;lcd.c: 20: lcdInst(0b00000110);
  8585  00195E  0E06               	movlw	6
  8586  001960  EC05  F00E         	call	i2_lcdInst
  8587                           
  8588                           ;lcd.c: 21: lcdInst(0b00000001);
  8589  001964  0E01               	movlw	1
  8590  001966  EC05  F00E         	call	i2_lcdInst
  8591                           
  8592                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  8593  00196A  0E31               	movlw	49
  8594  00196C  6E04               	movwf	??i2_initLCD& (0+255),c
  8595  00196E  0EB2               	movlw	178
  8596  001970                     i2u454_47:
  8597  001970  2EE8               	decfsz	wreg,f,c
  8598  001972  D7FE               	bra	i2u454_47
  8599  001974  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  8600  001976  D7FC               	bra	i2u454_47
  8601  001978  D000               	nop2	
  8602  00197A  0012               	return		;funcret
  8603  00197C                     __end_ofi2_initLCD:
  8604                           	opt stack 0
  8605                           tosu	equ	0xFFF
  8606                           tosh	equ	0xFFE
  8607                           tosl	equ	0xFFD
  8608                           pclatu	equ	0xFFB
  8609                           pclath	equ	0xFFA
  8610                           tblptru	equ	0xFF8
  8611                           tblptrh	equ	0xFF7
  8612                           tblptrl	equ	0xFF6
  8613                           tablat	equ	0xFF5
  8614                           prodh	equ	0xFF4
  8615                           prodl	equ	0xFF3
  8616                           intcon	equ	0xFF2
  8617                           intcon3	equ	0xFF0
  8618                           postinc0	equ	0xFEE
  8619                           fsr0h	equ	0xFEA
  8620                           fsr0l	equ	0xFE9
  8621                           wreg	equ	0xFE8
  8622                           fsr1h	equ	0xFE2
  8623                           fsr1l	equ	0xFE1
  8624                           indf2	equ	0xFDF
  8625                           postinc2	equ	0xFDE
  8626                           postdec2	equ	0xFDD
  8627                           fsr2h	equ	0xFDA
  8628                           fsr2l	equ	0xFD9
  8629                           status	equ	0xFD8
  8630                           
  8631 ;; *************** function i2_lcdInst *****************
  8632 ;; Defined at:
  8633 ;;		line 25 in file "lcd.c"
  8634 ;; Parameters:    Size  Location     Type
  8635 ;;  data            1    wreg     unsigned char 
  8636 ;; Auto vars:     Size  Location     Type
  8637 ;;  data            1    2[COMRAM] unsigned char 
  8638 ;; Return value:  Size  Location     Type
  8639 ;;                  1    wreg      void 
  8640 ;; Registers used:
  8641 ;;		wreg, status,2, status,0, cstack
  8642 ;; Tracked objects:
  8643 ;;		On entry : 0/0
  8644 ;;		On exit  : 0/0
  8645 ;;		Unchanged: 0/0
  8646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8648 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8650 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8651 ;;Total ram usage:        1 bytes
  8652 ;; Hardware stack levels used:    1
  8653 ;; Hardware stack levels required when called:    1
  8654 ;; This function calls:
  8655 ;;		i2_lcdNibble
  8656 ;; This function is called by:
  8657 ;;		_keypressed
  8658 ;;		_tot_sorted
  8659 ;;		_op_time
  8660 ;;		_tin_results
  8661 ;;		_pop_results
  8662 ;;		i2_initLCD
  8663 ;; This function uses a non-reentrant model
  8664 ;;
  8665                           
  8666                           	psect	text46
  8667  001C0A                     __ptext46:
  8668                           	opt stack 0
  8669  001C0A                     i2_lcdInst:
  8670                           	opt stack 22
  8671                           
  8672                           ;incstack = 0
  8673                           ;i2lcdInst@data stored from wreg
  8674  001C0A  6E03               	movwf	i2lcdInst@data,c
  8675                           
  8676                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  8677  001C0C  948C               	bcf	3980,2,c	;volatile
  8678                           
  8679                           ;lcd.c: 27: lcdNibble(data);
  8680  001C0E  5003               	movf	i2lcdInst@data,w,c
  8681  001C10  ECFA  F00B         	call	i2_lcdNibble
  8682  001C14  0012               	return		;funcret
  8683  001C16                     __end_ofi2_lcdInst:
  8684                           	opt stack 0
  8685                           tosu	equ	0xFFF
  8686                           tosh	equ	0xFFE
  8687                           tosl	equ	0xFFD
  8688                           pclatu	equ	0xFFB
  8689                           pclath	equ	0xFFA
  8690                           tblptru	equ	0xFF8
  8691                           tblptrh	equ	0xFF7
  8692                           tblptrl	equ	0xFF6
  8693                           tablat	equ	0xFF5
  8694                           prodh	equ	0xFF4
  8695                           prodl	equ	0xFF3
  8696                           intcon	equ	0xFF2
  8697                           intcon3	equ	0xFF0
  8698                           postinc0	equ	0xFEE
  8699                           fsr0h	equ	0xFEA
  8700                           fsr0l	equ	0xFE9
  8701                           wreg	equ	0xFE8
  8702                           fsr1h	equ	0xFE2
  8703                           fsr1l	equ	0xFE1
  8704                           indf2	equ	0xFDF
  8705                           postinc2	equ	0xFDE
  8706                           postdec2	equ	0xFDD
  8707                           fsr2h	equ	0xFDA
  8708                           fsr2l	equ	0xFD9
  8709                           status	equ	0xFD8
  8710                           
  8711 ;; *************** function i2_lcdNibble *****************
  8712 ;; Defined at:
  8713 ;;		line 35 in file "lcd.c"
  8714 ;; Parameters:    Size  Location     Type
  8715 ;;  data            1    wreg     unsigned char 
  8716 ;; Auto vars:     Size  Location     Type
  8717 ;;  data            1    1[COMRAM] unsigned char 
  8718 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  8719 ;; Return value:  Size  Location     Type
  8720 ;;                  1    wreg      void 
  8721 ;; Registers used:
  8722 ;;		wreg, status,2, status,0
  8723 ;; Tracked objects:
  8724 ;;		On entry : 0/0
  8725 ;;		On exit  : 0/0
  8726 ;;		Unchanged: 0/0
  8727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8729 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8731 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8732 ;;Total ram usage:        2 bytes
  8733 ;; Hardware stack levels used:    1
  8734 ;; This function calls:
  8735 ;;		Nothing
  8736 ;; This function is called by:
  8737 ;;		i2_lcdInst
  8738 ;;		i2_putch
  8739 ;; This function uses a non-reentrant model
  8740 ;;
  8741                           
  8742                           	psect	text47
  8743  0017F4                     __ptext47:
  8744                           	opt stack 0
  8745  0017F4                     i2_lcdNibble:
  8746                           	opt stack 21
  8747                           
  8748                           ;incstack = 0
  8749                           ;i2lcdNibble@data stored from wreg
  8750  0017F4  6E02               	movwf	i2lcdNibble@data,c
  8751                           
  8752                           ;lcd.c: 37: char temp = data & 0xF0;
  8753  0017F6  5002               	movf	i2lcdNibble@data,w,c
  8754  0017F8  0BF0               	andlw	240
  8755  0017FA  6E01               	movwf	i2lcdNibble@temp,c
  8756                           
  8757                           ;lcd.c: 38: LATD = LATD & 0x0F;
  8758  0017FC  508C               	movf	3980,w,c	;volatile
  8759  0017FE  0B0F               	andlw	15
  8760  001800  6E8C               	movwf	3980,c	;volatile
  8761                           
  8762                           ;lcd.c: 39: LATD = temp | LATD;
  8763  001802  5001               	movf	i2lcdNibble@temp,w,c
  8764  001804  108C               	iorwf	3980,w,c	;volatile
  8765  001806  6E8C               	movwf	3980,c	;volatile
  8766                           
  8767                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  8768  001808  968C               	bcf	3980,3,c	;volatile
  8769                           
  8770                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8771  00180A  0E14               	movlw	20
  8772  00180C                     i2u455_47:
  8773  00180C  2EE8               	decfsz	wreg,f,c
  8774  00180E  D7FE               	bra	i2u455_47
  8775  001810  D000               	nop2	
  8776                           
  8777                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  8778  001812  868C               	bsf	3980,3,c	;volatile
  8779                           
  8780                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8781  001814  0E14               	movlw	20
  8782  001816                     i2u456_47:
  8783  001816  2EE8               	decfsz	wreg,f,c
  8784  001818  D7FE               	bra	i2u456_47
  8785  00181A  D000               	nop2	
  8786                           
  8787                           ;lcd.c: 46: data = data << 4;
  8788  00181C  3802               	swapf	i2lcdNibble@data,w,c
  8789  00181E  0BF0               	andlw	240
  8790  001820  6E02               	movwf	i2lcdNibble@data,c
  8791                           
  8792                           ;lcd.c: 48: temp = data & 0xF0;
  8793  001822  5002               	movf	i2lcdNibble@data,w,c
  8794  001824  0BF0               	andlw	240
  8795  001826  6E01               	movwf	i2lcdNibble@temp,c
  8796                           
  8797                           ;lcd.c: 49: LATD = LATD & 0x0F;
  8798  001828  508C               	movf	3980,w,c	;volatile
  8799  00182A  0B0F               	andlw	15
  8800  00182C  6E8C               	movwf	3980,c	;volatile
  8801                           
  8802                           ;lcd.c: 50: LATD = temp | LATD;
  8803  00182E  5001               	movf	i2lcdNibble@temp,w,c
  8804  001830  108C               	iorwf	3980,w,c	;volatile
  8805  001832  6E8C               	movwf	3980,c	;volatile
  8806                           
  8807                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  8808  001834  968C               	bcf	3980,3,c	;volatile
  8809                           
  8810                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8811  001836  0E14               	movlw	20
  8812  001838                     i2u457_47:
  8813  001838  2EE8               	decfsz	wreg,f,c
  8814  00183A  D7FE               	bra	i2u457_47
  8815  00183C  D000               	nop2	
  8816                           
  8817                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  8818  00183E  868C               	bsf	3980,3,c	;volatile
  8819                           
  8820                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8821  001840  0E14               	movlw	20
  8822  001842                     i2u458_47:
  8823  001842  2EE8               	decfsz	wreg,f,c
  8824  001844  D7FE               	bra	i2u458_47
  8825  001846  D000               	nop2	
  8826  001848  0012               	return		;funcret
  8827  00184A                     __end_ofi2_lcdNibble:
  8828                           	opt stack 0
  8829                           tosu	equ	0xFFF
  8830                           tosh	equ	0xFFE
  8831                           tosl	equ	0xFFD
  8832                           pclatu	equ	0xFFB
  8833                           pclath	equ	0xFFA
  8834                           tblptru	equ	0xFF8
  8835                           tblptrh	equ	0xFF7
  8836                           tblptrl	equ	0xFF6
  8837                           tablat	equ	0xFF5
  8838                           prodh	equ	0xFF4
  8839                           prodl	equ	0xFF3
  8840                           intcon	equ	0xFF2
  8841                           intcon3	equ	0xFF0
  8842                           postinc0	equ	0xFEE
  8843                           fsr0h	equ	0xFEA
  8844                           fsr0l	equ	0xFE9
  8845                           wreg	equ	0xFE8
  8846                           fsr1h	equ	0xFE2
  8847                           fsr1l	equ	0xFE1
  8848                           indf2	equ	0xFDF
  8849                           postinc2	equ	0xFDE
  8850                           postdec2	equ	0xFDD
  8851                           fsr2h	equ	0xFDA
  8852                           fsr2l	equ	0xFD9
  8853                           status	equ	0xFD8
  8854                           
  8855 ;; *************** function i2___awdiv *****************
  8856 ;; Defined at:
  8857 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awdiv.c"
  8858 ;; Parameters:    Size  Location     Type
  8859 ;;  dividend        2    0[COMRAM] int 
  8860 ;;  divisor         2    2[COMRAM] int 
  8861 ;; Auto vars:     Size  Location     Type
  8862 ;;  __awdiv         2    6[COMRAM] int 
  8863 ;;  __awdiv         1    5[COMRAM] unsigned char 
  8864 ;;  __awdiv         1    4[COMRAM] unsigned char 
  8865 ;; Return value:  Size  Location     Type
  8866 ;;                  2    0[COMRAM] int 
  8867 ;; Registers used:
  8868 ;;		wreg, status,2, status,0
  8869 ;; Tracked objects:
  8870 ;;		On entry : 0/0
  8871 ;;		On exit  : 0/0
  8872 ;;		Unchanged: 0/0
  8873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8874 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8875 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8877 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8878 ;;Total ram usage:        8 bytes
  8879 ;; Hardware stack levels used:    1
  8880 ;; This function calls:
  8881 ;;		Nothing
  8882 ;; This function is called by:
  8883 ;;		_op_time
  8884 ;; This function uses a non-reentrant model
  8885 ;;
  8886                           
  8887                           	psect	text48
  8888  0012BC                     __ptext48:
  8889                           	opt stack 0
  8890  0012BC                     i2___awdiv:
  8891                           	opt stack 22
  8892                           
  8893                           ;incstack = 0
  8894  0012BC  0E00               	movlw	0
  8895  0012BE  6E06               	movwf	i2___awdiv@sign,c
  8896  0012C0  AE04               	btfss	i2___awdiv@divisor+1,7,c
  8897  0012C2  D006               	goto	i2l3161
  8898  0012C4  6C03               	negf	i2___awdiv@divisor,c
  8899  0012C6  1E04               	comf	i2___awdiv@divisor+1,f,c
  8900  0012C8  B0D8               	btfsc	status,0,c
  8901  0012CA  2A04               	incf	i2___awdiv@divisor+1,f,c
  8902  0012CC  0E01               	movlw	1
  8903  0012CE  6E06               	movwf	i2___awdiv@sign,c
  8904  0012D0                     i2l3161:
  8905  0012D0  AE02               	btfss	i2___awdiv@dividend+1,7,c
  8906  0012D2  D006               	goto	i2l3167
  8907  0012D4  6C01               	negf	i2___awdiv@dividend,c
  8908  0012D6  1E02               	comf	i2___awdiv@dividend+1,f,c
  8909  0012D8  B0D8               	btfsc	status,0,c
  8910  0012DA  2A02               	incf	i2___awdiv@dividend+1,f,c
  8911  0012DC  0E01               	movlw	1
  8912  0012DE  1A06               	xorwf	i2___awdiv@sign,f,c
  8913  0012E0                     i2l3167:
  8914  0012E0  0E00               	movlw	0
  8915  0012E2  6E08               	movwf	i2___awdiv@quotient+1,c
  8916  0012E4  0E00               	movlw	0
  8917  0012E6  6E07               	movwf	i2___awdiv@quotient,c
  8918  0012E8  5003               	movf	i2___awdiv@divisor,w,c
  8919  0012EA  1004               	iorwf	i2___awdiv@divisor+1,w,c
  8920  0012EC  B4D8               	btfsc	status,2,c
  8921  0012EE  D01C               	goto	i2l3189
  8922  0012F0  0E01               	movlw	1
  8923  0012F2  6E05               	movwf	i2___awdiv@counter,c
  8924  0012F4  D004               	goto	i2l3175
  8925  0012F6                     i2l3173:
  8926  0012F6  90D8               	bcf	status,0,c
  8927  0012F8  3603               	rlcf	i2___awdiv@divisor,f,c
  8928  0012FA  3604               	rlcf	i2___awdiv@divisor+1,f,c
  8929  0012FC  2A05               	incf	i2___awdiv@counter,f,c
  8930  0012FE                     i2l3175:
  8931  0012FE  AE04               	btfss	i2___awdiv@divisor+1,7,c
  8932  001300  D7FA               	goto	i2l3173
  8933  001302                     i2l3177:
  8934  001302  90D8               	bcf	status,0,c
  8935  001304  3607               	rlcf	i2___awdiv@quotient,f,c
  8936  001306  3608               	rlcf	i2___awdiv@quotient+1,f,c
  8937  001308  5003               	movf	i2___awdiv@divisor,w,c
  8938  00130A  5C01               	subwf	i2___awdiv@dividend,w,c
  8939  00130C  5004               	movf	i2___awdiv@divisor+1,w,c
  8940  00130E  5802               	subwfb	i2___awdiv@dividend+1,w,c
  8941  001310  A0D8               	btfss	status,0,c
  8942  001312  D005               	goto	i2l3185
  8943  001314  5003               	movf	i2___awdiv@divisor,w,c
  8944  001316  5E01               	subwf	i2___awdiv@dividend,f,c
  8945  001318  5004               	movf	i2___awdiv@divisor+1,w,c
  8946  00131A  5A02               	subwfb	i2___awdiv@dividend+1,f,c
  8947  00131C  8007               	bsf	i2___awdiv@quotient,0,c
  8948  00131E                     i2l3185:
  8949  00131E  90D8               	bcf	status,0,c
  8950  001320  3204               	rrcf	i2___awdiv@divisor+1,f,c
  8951  001322  3203               	rrcf	i2___awdiv@divisor,f,c
  8952  001324  2E05               	decfsz	i2___awdiv@counter,f,c
  8953  001326  D7ED               	goto	i2l3177
  8954  001328                     i2l3189:
  8955  001328  5006               	movf	i2___awdiv@sign,w,c
  8956  00132A  B4D8               	btfsc	status,2,c
  8957  00132C  D004               	goto	i2l3193
  8958  00132E  6C07               	negf	i2___awdiv@quotient,c
  8959  001330  1E08               	comf	i2___awdiv@quotient+1,f,c
  8960  001332  B0D8               	btfsc	status,0,c
  8961  001334  2A08               	incf	i2___awdiv@quotient+1,f,c
  8962  001336                     i2l3193:
  8963  001336  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
  8964  00133A  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  8965  00133E  0012               	return	
  8966  001340                     __end_ofi2___awdiv:
  8967                           	opt stack 0
  8968                           tosu	equ	0xFFF
  8969                           tosh	equ	0xFFE
  8970                           tosl	equ	0xFFD
  8971                           pclatu	equ	0xFFB
  8972                           pclath	equ	0xFFA
  8973                           tblptru	equ	0xFF8
  8974                           tblptrh	equ	0xFF7
  8975                           tblptrl	equ	0xFF6
  8976                           tablat	equ	0xFF5
  8977                           prodh	equ	0xFF4
  8978                           prodl	equ	0xFF3
  8979                           intcon	equ	0xFF2
  8980                           intcon3	equ	0xFF0
  8981                           postinc0	equ	0xFEE
  8982                           fsr0h	equ	0xFEA
  8983                           fsr0l	equ	0xFE9
  8984                           wreg	equ	0xFE8
  8985                           fsr1h	equ	0xFE2
  8986                           fsr1l	equ	0xFE1
  8987                           indf2	equ	0xFDF
  8988                           postinc2	equ	0xFDE
  8989                           postdec2	equ	0xFDD
  8990                           fsr2h	equ	0xFDA
  8991                           fsr2l	equ	0xFD9
  8992                           status	equ	0xFD8
  8993                           
  8994 ;; *************** function ___awmod *****************
  8995 ;; Defined at:
  8996 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awmod.c"
  8997 ;; Parameters:    Size  Location     Type
  8998 ;;  dividend        2    0[COMRAM] int 
  8999 ;;  divisor         2    2[COMRAM] int 
  9000 ;; Auto vars:     Size  Location     Type
  9001 ;;  sign            1    5[COMRAM] unsigned char 
  9002 ;;  counter         1    4[COMRAM] unsigned char 
  9003 ;; Return value:  Size  Location     Type
  9004 ;;                  2    0[COMRAM] int 
  9005 ;; Registers used:
  9006 ;;		wreg, status,2, status,0
  9007 ;; Tracked objects:
  9008 ;;		On entry : 0/0
  9009 ;;		On exit  : 0/0
  9010 ;;		Unchanged: 0/0
  9011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9012 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9013 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9015 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9016 ;;Total ram usage:        6 bytes
  9017 ;; Hardware stack levels used:    1
  9018 ;; This function calls:
  9019 ;;		Nothing
  9020 ;; This function is called by:
  9021 ;;		_op_time
  9022 ;; This function uses a non-reentrant model
  9023 ;;
  9024                           
  9025                           	psect	text49
  9026  0013B8                     __ptext49:
  9027                           	opt stack 0
  9028  0013B8                     ___awmod:
  9029                           	opt stack 22
  9030                           
  9031                           ;incstack = 0
  9032  0013B8  0E00               	movlw	0
  9033  0013BA  6E06               	movwf	___awmod@sign,c
  9034  0013BC  AE02               	btfss	___awmod@dividend+1,7,c
  9035  0013BE  D006               	goto	i2l2959
  9036  0013C0  6C01               	negf	___awmod@dividend,c
  9037  0013C2  1E02               	comf	___awmod@dividend+1,f,c
  9038  0013C4  B0D8               	btfsc	status,0,c
  9039  0013C6  2A02               	incf	___awmod@dividend+1,f,c
  9040  0013C8  0E01               	movlw	1
  9041  0013CA  6E06               	movwf	___awmod@sign,c
  9042  0013CC                     i2l2959:
  9043  0013CC  AE04               	btfss	___awmod@divisor+1,7,c
  9044  0013CE  D004               	goto	i2l2963
  9045  0013D0  6C03               	negf	___awmod@divisor,c
  9046  0013D2  1E04               	comf	___awmod@divisor+1,f,c
  9047  0013D4  B0D8               	btfsc	status,0,c
  9048  0013D6  2A04               	incf	___awmod@divisor+1,f,c
  9049  0013D8                     i2l2963:
  9050  0013D8  5003               	movf	___awmod@divisor,w,c
  9051  0013DA  1004               	iorwf	___awmod@divisor+1,w,c
  9052  0013DC  B4D8               	btfsc	status,2,c
  9053  0013DE  D018               	goto	i2l2979
  9054  0013E0  0E01               	movlw	1
  9055  0013E2  6E05               	movwf	___awmod@counter,c
  9056  0013E4  D004               	goto	i2l2969
  9057  0013E6                     i2l2967:
  9058  0013E6  90D8               	bcf	status,0,c
  9059  0013E8  3603               	rlcf	___awmod@divisor,f,c
  9060  0013EA  3604               	rlcf	___awmod@divisor+1,f,c
  9061  0013EC  2A05               	incf	___awmod@counter,f,c
  9062  0013EE                     i2l2969:
  9063  0013EE  AE04               	btfss	___awmod@divisor+1,7,c
  9064  0013F0  D7FA               	goto	i2l2967
  9065  0013F2                     i2l2971:
  9066  0013F2  5003               	movf	___awmod@divisor,w,c
  9067  0013F4  5C01               	subwf	___awmod@dividend,w,c
  9068  0013F6  5004               	movf	___awmod@divisor+1,w,c
  9069  0013F8  5802               	subwfb	___awmod@dividend+1,w,c
  9070  0013FA  A0D8               	btfss	status,0,c
  9071  0013FC  D004               	goto	i2l2975
  9072  0013FE  5003               	movf	___awmod@divisor,w,c
  9073  001400  5E01               	subwf	___awmod@dividend,f,c
  9074  001402  5004               	movf	___awmod@divisor+1,w,c
  9075  001404  5A02               	subwfb	___awmod@dividend+1,f,c
  9076  001406                     i2l2975:
  9077  001406  90D8               	bcf	status,0,c
  9078  001408  3204               	rrcf	___awmod@divisor+1,f,c
  9079  00140A  3203               	rrcf	___awmod@divisor,f,c
  9080  00140C  2E05               	decfsz	___awmod@counter,f,c
  9081  00140E  D7F1               	goto	i2l2971
  9082  001410                     i2l2979:
  9083  001410  5006               	movf	___awmod@sign,w,c
  9084  001412  B4D8               	btfsc	status,2,c
  9085  001414  D004               	goto	i2l2983
  9086  001416  6C01               	negf	___awmod@dividend,c
  9087  001418  1E02               	comf	___awmod@dividend+1,f,c
  9088  00141A  B0D8               	btfsc	status,0,c
  9089  00141C  2A02               	incf	___awmod@dividend+1,f,c
  9090  00141E                     i2l2983:
  9091  00141E  C001  F001         	movff	___awmod@dividend,?___awmod
  9092  001422  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  9093  001426  0012               	return	
  9094  001428                     __end_of___awmod:
  9095                           	opt stack 0
  9096                           tosu	equ	0xFFF
  9097                           tosh	equ	0xFFE
  9098                           tosl	equ	0xFFD
  9099                           pclatu	equ	0xFFB
  9100                           pclath	equ	0xFFA
  9101                           tblptru	equ	0xFF8
  9102                           tblptrh	equ	0xFF7
  9103                           tblptrl	equ	0xFF6
  9104                           tablat	equ	0xFF5
  9105                           prodh	equ	0xFF4
  9106                           prodl	equ	0xFF3
  9107                           intcon	equ	0xFF2
  9108                           intcon3	equ	0xFF0
  9109                           postinc0	equ	0xFEE
  9110                           fsr0h	equ	0xFEA
  9111                           fsr0l	equ	0xFE9
  9112                           wreg	equ	0xFE8
  9113                           fsr1h	equ	0xFE2
  9114                           fsr1l	equ	0xFE1
  9115                           indf2	equ	0xFDF
  9116                           postinc2	equ	0xFDE
  9117                           postdec2	equ	0xFDD
  9118                           fsr2h	equ	0xFDA
  9119                           fsr2l	equ	0xFD9
  9120                           status	equ	0xFD8
  9121                           tosu	equ	0xFFF
  9122                           tosh	equ	0xFFE
  9123                           tosl	equ	0xFFD
  9124                           pclatu	equ	0xFFB
  9125                           pclath	equ	0xFFA
  9126                           tblptru	equ	0xFF8
  9127                           tblptrh	equ	0xFF7
  9128                           tblptrl	equ	0xFF6
  9129                           tablat	equ	0xFF5
  9130                           prodh	equ	0xFF4
  9131                           prodl	equ	0xFF3
  9132                           intcon	equ	0xFF2
  9133                           intcon3	equ	0xFF0
  9134                           postinc0	equ	0xFEE
  9135                           fsr0h	equ	0xFEA
  9136                           fsr0l	equ	0xFE9
  9137                           wreg	equ	0xFE8
  9138                           fsr1h	equ	0xFE2
  9139                           fsr1l	equ	0xFE1
  9140                           indf2	equ	0xFDF
  9141                           postinc2	equ	0xFDE
  9142                           postdec2	equ	0xFDD
  9143                           fsr2h	equ	0xFDA
  9144                           fsr2l	equ	0xFD9
  9145                           status	equ	0xFD8
  9146                           
  9147                           	psect	text50
  9148  000000                     __ptext50:
  9149                           	opt stack 0
  9150                           tosu	equ	0xFFF
  9151                           tosh	equ	0xFFE
  9152                           tosl	equ	0xFFD
  9153                           pclatu	equ	0xFFB
  9154                           pclath	equ	0xFFA
  9155                           tblptru	equ	0xFF8
  9156                           tblptrh	equ	0xFF7
  9157                           tblptrl	equ	0xFF6
  9158                           tablat	equ	0xFF5
  9159                           prodh	equ	0xFF4
  9160                           prodl	equ	0xFF3
  9161                           intcon	equ	0xFF2
  9162                           intcon3	equ	0xFF0
  9163                           postinc0	equ	0xFEE
  9164                           fsr0h	equ	0xFEA
  9165                           fsr0l	equ	0xFE9
  9166                           wreg	equ	0xFE8
  9167                           fsr1h	equ	0xFE2
  9168                           fsr1l	equ	0xFE1
  9169                           indf2	equ	0xFDF
  9170                           postinc2	equ	0xFDE
  9171                           postdec2	equ	0xFDD
  9172                           fsr2h	equ	0xFDA
  9173                           fsr2l	equ	0xFD9
  9174                           status	equ	0xFD8
  9175                           
  9176                           	psect	rparam
  9177  0000                     tosu	equ	0xFFF
  9178                           tosh	equ	0xFFE
  9179                           tosl	equ	0xFFD
  9180                           pclatu	equ	0xFFB
  9181                           pclath	equ	0xFFA
  9182                           tblptru	equ	0xFF8
  9183                           tblptrh	equ	0xFF7
  9184                           tblptrl	equ	0xFF6
  9185                           tablat	equ	0xFF5
  9186                           prodh	equ	0xFF4
  9187                           prodl	equ	0xFF3
  9188                           intcon	equ	0xFF2
  9189                           intcon3	equ	0xFF0
  9190                           postinc0	equ	0xFEE
  9191                           fsr0h	equ	0xFEA
  9192                           fsr0l	equ	0xFE9
  9193                           wreg	equ	0xFE8
  9194                           fsr1h	equ	0xFE2
  9195                           fsr1l	equ	0xFE1
  9196                           indf2	equ	0xFDF
  9197                           postinc2	equ	0xFDE
  9198                           postdec2	equ	0xFDD
  9199                           fsr2h	equ	0xFDA
  9200                           fsr2l	equ	0xFD9
  9201                           status	equ	0xFD8
  9202                           
  9203                           	psect	temp
  9204  00004B                     btemp:
  9205                           	opt stack 0
  9206  00004B                     	ds	1
  9207  0000                     int$flags	set	btemp
  9208                           tosu	equ	0xFFF
  9209                           tosh	equ	0xFFE
  9210                           tosl	equ	0xFFD
  9211                           pclatu	equ	0xFFB
  9212                           pclath	equ	0xFFA
  9213                           tblptru	equ	0xFF8
  9214                           tblptrh	equ	0xFF7
  9215                           tblptrl	equ	0xFF6
  9216                           tablat	equ	0xFF5
  9217                           prodh	equ	0xFF4
  9218                           prodl	equ	0xFF3
  9219                           intcon	equ	0xFF2
  9220                           intcon3	equ	0xFF0
  9221                           postinc0	equ	0xFEE
  9222                           fsr0h	equ	0xFEA
  9223                           fsr0l	equ	0xFE9
  9224                           wreg	equ	0xFE8
  9225                           fsr1h	equ	0xFE2
  9226                           fsr1l	equ	0xFE1
  9227                           indf2	equ	0xFDF
  9228                           postinc2	equ	0xFDE
  9229                           postdec2	equ	0xFDD
  9230                           fsr2h	equ	0xFDA
  9231                           fsr2l	equ	0xFD9
  9232                           status	equ	0xFD8


Data Sizes:
    Strings     328
    Constant    42
    Data        0
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     62      74
    BANK0           128     50      77
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_22(CODE[13]), STR_21(CODE[15]), STR_20(CODE[15]), STR_19(CODE[17]), 
		 -> STR_18(CODE[22]), STR_17(CODE[19]), STR_16(CODE[17]), STR_15(CODE[17]), 
		 -> STR_14(CODE[17]), STR_13(CODE[13]), STR_12(CODE[9]), STR_11(CODE[5]), 
		 -> STR_10(CODE[17]), STR_9(CODE[15]), STR_8(CODE[13]), STR_7(CODE[15]), 
		 -> STR_6(CODE[15]), STR_5(CODE[15]), STR_4(CODE[14]), STR_3(CODE[12]), 
		 -> STR_2(CODE[16]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    topRockerState	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), top_rocker_restore(), top_rocker_release(), solenoids_back(), 
		 -> solenoids_out(), top_rocker_idle(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _keypressed in COMRAM

    _keypressed->i2_printf
    _tot_sorted->i2_printf
    _tin_results->i2_printf
    _pop_results->i2_printf
    _op_time->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _main->_startSorting
    _startSorting->_initialization
    _top_rocker_restore->_printf
    _top_rocker_release->_printf
    _top_rocker_idle->_printf
    _solenoids_out->_printf
    _solenoids_back->_printf
    _initialization->_top_rocker_initial
    _top_rocker_initial->_printf
    _standby->_printf
    _set_time->_I2C_Master_Write
    _results->_printf
    _printf->___wmul
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _done_sorting->___wmul
    ___wmul->___awdiv
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   65706
                                             46 BANK0      4     4      0
                    _I2C_Master_Init
                       _done_sorting
                            _initLCD
                            _results
                           _set_time
                            _standby
                       _startSorting
 ---------------------------------------------------------------------------------
 (1) _startSorting                                         4     4      0   47292
                                             42 BANK0      4     4      0
                   Absolute function *
                            _initLCD
                     _initialization
                            _lcdInst
                             _printf
                     _solenoids_back *
                      _solenoids_out *
                    _top_rocker_idle *
                 _top_rocker_release *
                 _top_rocker_restore *
 ---------------------------------------------------------------------------------
 (2) _top_rocker_restore                                   3     3      0    5903
                                             36 BANK0      3     3      0
                            _initLCD
                            _lcdInst
                             _printf
                _top_rocker_motor_cw
 ---------------------------------------------------------------------------------
 (3) _top_rocker_motor_cw                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _top_rocker_release                                   3     3      0    5903
                                             36 BANK0      3     3      0
                            _initLCD
                            _lcdInst
                             _printf
               _top_rocker_motor_ccw
 ---------------------------------------------------------------------------------
 (3) _top_rocker_motor_ccw                                 2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _top_rocker_idle                                      3     3      0    5903
                                             36 BANK0      3     3      0
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _solenoids_out                                        3     3      0    5903
                                             36 BANK0      3     3      0
                            _initLCD
                            _lcdInst
                            _pop_out
                             _printf
 ---------------------------------------------------------------------------------
 (3) _pop_out                                              2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _solenoids_back                                       3     3      0    5903
                                             36 BANK0      3     3      0
                            _go_back
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _go_back                                              2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _initialization                                       3     3      0   11806
                                             39 BANK0      3     3      0
                            _initLCD
                            _lcdInst
                             _printf
                 _top_rocker_initial
 ---------------------------------------------------------------------------------
 (3) _top_rocker_initial                                   3     3      0    5903
                                             36 BANK0      3     3      0
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _standby                                              6     6      0    6859
                                             36 BANK0      6     6      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _set_time                                             1     1      0     823
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _results                                              7     7      0    6107
                                             36 BANK0      7     7      0
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              31    23      8    5445
                                             14 BANK0     22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     549
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _done_sorting                                        14    12      2    3791
                                             14 BANK0     12    10      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1316
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1145
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     724
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      65
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     503
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     395
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _keypressed                                          30    30      0   13130
                                             32 COMRAM    30    30      0
                            _op_time
                        _pop_results
                        _tin_results
                         _tot_sorted
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _tot_sorted                                           0     0      0    2338
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _tin_results                                          0     0      0    2338
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _pop_results                                          0     0      0    2338
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _op_time                                              0     0      0    3114
                            ___awmod
                          i2___awdiv
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) i2_printf                                            29    23      6    2068
                                             12 COMRAM    20    14      6
                            ___awmod (ARG)
                          i2___awdiv (ARG)
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (9) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (8) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (8) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) i2___awdiv                                            8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (9) ___awmod                                              6     2      4     424
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _done_sorting
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _initLCD
     _lcdInst
       _lcdNibble
   _results
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _set_time
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _standby
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _startSorting
     Absolute function(Fake) *
     _initLCD *
       _lcdInst
         _lcdNibble
     _initialization *
       _initLCD
         _lcdInst
           _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
           ___awdiv (ARG)
         _isdigit
         _putch
           _lcdNibble
       _top_rocker_initial
         _initLCD
           _lcdInst
             _lcdNibble
         _lcdInst
           _lcdNibble
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___awdiv (ARG)
           _isdigit
           _putch
             _lcdNibble
     _lcdInst *
       _lcdNibble
     _printf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
     _solenoids_back *
       _go_back
       _initLCD
         _lcdInst
           _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
           ___awdiv (ARG)
         _isdigit
         _putch
           _lcdNibble
     _solenoids_out *
       _initLCD
         _lcdInst
           _lcdNibble
       _lcdInst
         _lcdNibble
       _pop_out
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
           ___awdiv (ARG)
         _isdigit
         _putch
           _lcdNibble
     _top_rocker_idle *
       _initLCD
         _lcdInst
           _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
           ___awdiv (ARG)
         _isdigit
         _putch
           _lcdNibble
     _top_rocker_release *
       _initLCD
         _lcdInst
           _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
           ___awdiv (ARG)
         _isdigit
         _putch
           _lcdNibble
       _top_rocker_motor_ccw
     _top_rocker_restore *
       _initLCD
         _lcdInst
           _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
           ___awdiv (ARG)
         _isdigit
         _putch
           _lcdNibble
       _top_rocker_motor_cw

 _keypressed (ROOT)
   _op_time
     ___awmod
     i2___awdiv
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   _pop_results
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   _tin_results
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   _tot_sorted
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     ___awmod (ARG)
     i2___awdiv (ARG)
     i2___lwdiv (ARG)
     i2___lwmod (ARG)
       i2___lwdiv (ARG)
     i2___wmul (ARG)
     i2_isdigit (ARG)
     i2_putch (ARG)
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     32      4D       5       60.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3E      4A       1       58.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      97      34        0.0%
DATA                 0      0      97       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Feb 28 22:28:34 2017

                           l44 1BCA                   ___awdiv@sign 0085            ___wmul@multiplicand 008A  
           i2___lwdiv@dividend 0001                    __CFG_BORV$3 000000                  _solenoids_out 16E4  
                 __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000  
                 __CFG_CP3$OFF 000000                    __CFG_OSC$HS 000000                            l320 0EBA  
                          l304 16DA                            l318 0E6E                            l191 1472  
                          l280 0D6E                            l277 0C8C                            l477 013A  
                          l922 13AE                            l932 161C                            l869 121C  
                 __CFG_CPB$OFF 000000                            _PEN 007E2A                   __CFG_CPD$OFF 000000  
                          _SEN 007E28                 _solenoids_back 122E                            _tot 0049  
                ?_done_sorting 008E                   ___awmod@sign 0006                            prod 000FF3  
                          tosl 000FFD                            wreg 000FE8                   __CFG_LVP$OFF 000000  
                  _total_start 00BD                   __CFG_WDT$OFF 000000                           l4011 1278  
                         l4003 124E                           l4101 10E6                           l4111 1116  
                         l4007 1258                           l4031 151C                           l4017 12A0  
                         l4107 1104                           l4123 1154                           l4203 0DB8  
                         l4035 1526                           l4141 11B6                           l4109 1110  
                         l4061 178A                           l4053 1760                           l4127 1168  
                         l4119 1146                           l4039 1546                           l4223 1026  
                         l4215 0FFC                           l4137 11A0                           l4313 0E1E  
                         l4081 16BA                           l4057 176A                           l4225 103E  
                         l4209 0FDC                           l4401 0F5A                           l4139 11B0  
                         l4323 0E4E                           l4171 0CC8                           l4235 108A  
                         l4219 1006                           l4411 0F8A                           l4149 120A  
                         l4317 0E3E                           l4309 0E14                           l4181 0CF2  
                         l4077 16B0                           l4405 0F7A                           l4095 10D0  
                         l4263 0A42                           l3711 1370                           l4343 0E9A  
                         l4319 0E44                           l4175 0CD2                           l4239 1094  
                         l4415 0FAA                           l4407 0F80                           l3801 0194  
                         l4291 0C72                           l4259 0A38                           l3707 135E  
                         l3731 15EA                           l4339 0E90                           l4363 1592  
                         l4269 0A62                           l3709 136A                           l3813 01D0  
                         l4197 0DA8                           l3719 13A0                           l3735 160E  
                         l3727 15D8                           l3815 01D6                           l3831 0224  
                         l4295 0DD8                           l4359 1588                           l4199 0DAE  
                         l4391 0F42                           l4289 0C5E                           l3729 15E4  
                         l3841 027E                           l3761 0046                           l4369 15BE  
                         l3913 17E6                           l3905 17BC                           l3691 1AB6  
                         l3843 0288                           l3771 0084                           l3755 0020  
                         l3861 02E4                           l3837 0246                           l3829 0212  
                         l3765 0050                           l3909 17C6                           l4397 0F50  
                         l3855 02BE                           l3783 0106                           l3759 0034  
                         l3857 02CA                           l3865 02F8                           l3849 02A2  
                         l3881 03D0                           l3961 1448                           l3867 02FE  
                         l3875 03AA                           l3795 0172                           l3779 0100  
                         l3971 1480                           l3949 1A8E                           l3869 0350  
                         l3877 03BC                           l3965 1452                           l3879 03C4  
                         l3799 018E                           l3991 172E                           l3983 1704  
                         l3987 170E                           STR_1 FFC9                           STR_2 FF46  
                         STR_3 FFE5                           STR_4 FFB0                           STR_5 FFA1  
                         STR_6 FF92                           STR_7 FF83                           STR_8 FFBE  
                         STR_9 FF74                   _startSorting 0FD8                           _LATA 000F89  
                         _LATB 000F8A                           _LATC 000F8B                           _LATD 000F8C  
                         _LATE 000F8D                           u4207 1534                           u3600 1A8C  
                         u4217 1266                           u4307 17D4                           u4227 171C  
                         u4317 0DC6                           u4237 1460                           u4157 0F68  
                         u4407 14F4                           u4327 0E2C                           u4247 1778  
                         u4167 0F98                           u4337 0E5C                           u4257 1B1A  
                         u4177 1014                           u4347 0EA8                           u4267 1B3C  
                         u4187 104C                           u4357 18F4                           u4277 1B5C  
                         u4197 10A2                           u4367 192A                           u4287 1B7C  
                         u4377 14B4                           u4297 16C8                           u3690 1284  
                         u4387 14BE                           _RCEN 007E2B                           u4397 14EA  
                         u3960 106A                           u3865 1656                           u3698 1288  
                         u3958 102A                           _RSEN 007E29       __size_of_top_rocker_idle 006C  
             ??_initialization 00A7                           _fsm1 00C9                           _main 0EF0  
                         _keys FE8D                           _time 00B2                           fsr0h 000FEA  
                         fsr1h 000FE2             i2___lwdiv@quotient 0005                           fsr2h 000FDA  
                         fsr0l 000FE9                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           btemp 004B                           prodh 000FF4  
                         prodl 000FF3                           start 000E                  __CFG_IESO$OFF 000000  
              __end_ofi2_putch 1C0A                  __CFG_MCLRE$ON 000000   __end_of_top_rocker_motor_ccw 1B4C  
                 ___param_bank 000000                    i2_lcdNibble 17F4                 ?_solenoids_out 0001  
             ?_I2C_Master_Init 008D               ?_I2C_Master_Read 0001               ?_I2C_Master_Wait 0001  
             ?_I2C_Master_Stop 0001         __end_of_solenoids_back 12BC                          ?_main 0001  
                        _ACKEN 007E2C                          _ACKDT 007E2D                __end_of___awdiv 1172  
                        STR_10 FF24                          STR_11 FFFA                          STR_12 FFF1  
                        STR_20 FF65                          STR_13 FFCB                          STR_21 FF56  
                        STR_22 FFD8                          STR_14 FEF1                          STR_15 FF02  
                        STR_23 FEE0                          STR_16 FF13                          STR_17 FECD  
                        STR_18 FEB7                          STR_19 FF35                __end_of___awmod 1428  
              __end_of___lldiv 122E                ___awdiv@divisor 0082                __end_of___lwdiv 13B8  
                        i2l120 09B6                standby@keypress 00A6                __end_of___lwmod 1626  
               ??_done_sorting 0090                          i2l477 04E6                          i2l922 1892  
                        i2l932 19B4                ___awdiv@counter 0084                          _PORTB 000F81  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                        _TRISD 000F95                          _TRISE 000F96                  __CFG_PWRT$OFF 000000  
                __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000  
                __CFG_WRT3$OFF 000000                __end_of_lcdInst 1BFE                 __CFG_EBTR0$OFF 000000  
               __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000  
               __CFG_EBTR3$OFF 000000                __end_of_go_back 1B8C                  __CFG_WRTB$OFF 000000  
                __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000                __end_of_initLCD 1936  
               __CFG_EBTRB$OFF 000000                     i2isdigit@c 0003                __end_of_dpowers FEA8  
                        _tabed 00C7                __end_of_isdigit 1AC0                          _putch 1BDE  
                        main@i 00B0                __end_of_op_time 18EC                          pclath 000FFA  
                        tablat 000FF5                __end_of_pop_out 1B6C                __end_of_results 0EF0  
             __end_ofi2___wmul 1AE6                __end_of_standby 0DD8                          status 000FD8  
          _top_rocker_motor_cw 1B08             __size_ofi2___awdiv 0084                 __CFG_PBADEN$ON 000000  
                i2printf@width 001E                   standby@i_680 00A8               __end_ofi2_printf 0726  
           __size_ofi2___lwdiv 0052             __size_ofi2___lwmod 0042              startSorting@i_686 00AD  
              __initialization 1AE6             __size_ofi2_lcdInst 000C                   __end_of_main 0FD8  
                 __end_of_keys FE9E                     i2printf@ap 0018             __size_ofi2_initLCD 0046  
           __size_ofi2_isdigit 001E           ?_top_rocker_motor_cw 0001                ?_solenoids_back 0001  
                       ??_main 00AE                  __activetblptr 000003              ?_I2C_Master_Start 0001  
            ?_I2C_Master_Write 0081             ??_I2C_Master_Start 0081                         _ADCON0 000FC2  
                       _ADCON1 000FC1             ??_I2C_Master_Write 0083               ___awdiv@dividend 0080  
              i2lcdNibble@data 0002                         ?_putch 0001                i2lcdNibble@temp 0001  
                       _INT1IE 007F83                         _INT1IF 007F80                         i2l3101 05AA  
                       i2l3111 05E8                         i2l3031 0418                         i2l3113 05F0  
                       i2l3041 0450                         i2l3025 03FA                         i2l3131 0638  
                       i2l3107 05C4                         i2l3035 041E                         i2l3125 061C  
                       i2l3053 04B6                         i2l3029 040A                         i2l3127 0624  
                       i2l3135 064A                         i2l3119 0606                         i2l3071 0532  
                       i2l3151 070A                         i2l3161 12D0                         i2l3137 0650  
                       i2l3145 06EC                         i2l3065 0514                         i2l3049 04B2  
                       i2l3139 069A                         i2l3147 06FC                         i2l3083 0564  
                       i2l3173 12F6                         i2l3149 0702                         i2l3085 0568  
                       i2l3069 052E                         i2l3175 12FE                         i2l3167 12E0  
                       i2l3503 0846                         i2l3193 1336                         i2l3185 131E  
                       i2l3177 1302                         i2l2721 186C                         i2l3513 086E  
                       i2l3505 084A                         i2l2707 1BC2                         i2l3099 059A  
                       i2l3515 0872                         i2l3523 0896                         i2l3189 1328  
                       i2l2717 1860                         i2l2741 1996                         i2l3533 08AE  
                       i2l3509 0852                         i2l3461 079E                         i2l2719 1868  
                       i2l3543 08D6                         i2l3519 087A                         i2l3471 07C6  
                       i2l2729 1888                         i2l2745 19AA                         i2l2737 198A  
                       i2l3553 08FE                         i2l3537 08CA                         i2l3529 08A6  
                       i2l3481 07EE                         i2l3465 07A6                         i2l2739 1992  
                       i2l3571 094E                         i2l3563 092A                         i2l3547 08F2  
                       i2l3539 08CE                         i2l3475 07CE                         i2l3581 0976  
                       i2l3573 0952                         i2l3549 08F6                         i2l3557 091A  
                       i2l3485 07F6                         i2l3469 07C2                         i2l3583 097A  
                       i2l3567 0932                         i2l3591 099E                         i2l3495 0822  
                       i2l3479 07EA                         i2l3577 095A                         i2l3489 0812  
                       i2l2971 13F2                         i2l2963 13D8                         i2l3587 0982  
                       i2l3499 082A                         i2l3595 09AE                         i2l2983 141E  
                       i2l2975 1406                         i2l2967 13E6                         i2l2959 13CC  
                       i2l2969 13EE                         i2l2979 1410                solenoids_back@i 00A6  
                    ??i2_putch 0003                         _SSPADD 000FC8                         _TRISC3 007CA3  
                       _TRISC4 007CA4                         _SSPBUF 000FC9                 __CFG_XINST$OFF 000000  
            ??_top_rocker_idle 00A4                ??_solenoids_out 00A4                         ___wmul 1A32  
                    ??___awdiv 0084                 __CFG_STVREN$ON 000000                      ??___awmod 0005  
                    ??___lldiv 0088                      ??___lwdiv 0084                      ??___lwmod 008B  
                       clear_0 1AEC                         clear_1 1AF8               ___awdiv@quotient 0086  
        ??_top_rocker_motor_cw 0080                ___awmod@divisor 0003                ___awmod@counter 0005  
                    ??_lcdInst 0082                         _printf 0012                      ??_go_back 0080  
               i2___awdiv@sign 0006                      ??_initLCD 0083                   ?_pop_results 0001  
                    ??_isdigit 0080              __end_ofi2___awdiv 1340               __end_of_set_time 15C4  
            __end_ofi2___lwdiv 189C                   __mediumconst FE8C              __end_ofi2___lwmod 19BE  
                    ??_op_time 0021                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                      ??_pop_out 0080                   ?_tin_results 0001  
                    ??_results 00A4                      ??_standby 00A4           _top_rocker_motor_ccw 1B2A  
            __end_ofi2_lcdInst 1C16                     _Start_time 00C1              __end_ofi2_initLCD 197C  
            __end_ofi2_isdigit 1BCA                     __accesstop 0080        __end_of__initialization 1AFE  
                done_sorting@i 0097                  ___rparam_used 000001     __end_of_top_rocker_initial 17F4  
         __end_of_done_sorting 0C7C     __end_of_top_rocker_release 1562     __end_of_top_rocker_restore 179C  
           i2___lwmod@dividend 0008                 __pcstackCOMRAM 0001                  __end_of_putch 1BEE  
                  i2printf@idx 0017                    i2printf@val 001B                      ?i2___wmul 0001  
           __size_of_lcdNibble 0068                    i2putch@data 0003                    keypressed@i 0032  
                    ?i2_printf 000D          ?_top_rocker_motor_ccw 0001                        ??_putch 0082  
                   __pbssBANK0 00B2                   ?i2_lcdNibble 0001                        ?___wmul 0088  
      keypressed@keypress_temp 003E                        ?_printf 008E                     ??i2___wmul 0005  
                   ??i2_printf 0013                        _SSPCON1 000FC6                        _SSPCON2 000FC5  
                      _SSPSTAT 000FC7                        i2_putch 1BFE              __end_of_lcdNibble 14FC  
                      __Hparam 0000                        __Lparam 0000                      ?_set_time 0001  
             ??_solenoids_back 00A4                        ___awdiv 10B4                        ___awmod 13B8  
                      ___lldiv 1172                __size_of___wmul 0036                        ___lwdiv 1340  
                      ___lwmod 15C4                        __pcinit 1AE6                        __ramtop 1000  
                      _lcdInst 1BEE                        __ptext0 0EF0                        __ptext1 0FD8  
                      __ptext2 14FC                        __ptext3 122E                        __ptext4 16E4  
                      __ptext5 1428                        __ptext6 1740                        __ptext7 1B08  
                      __ptext8 1B2A                        __ptext9 1B4C                        _go_back 1B6C  
              __size_of_printf 03DE                        _initLCD 18EC              __end_of_hexpowers FEB0  
                      _dpowers FE9E                        _isdigit 1A96               ___awmod@dividend 0001  
         done_sorting@End_time 0098         ??_top_rocker_motor_ccw 0080                        _op_time 189C  
                   _keypressed 0008       __size_of_I2C_Master_Init 0060       __size_of_I2C_Master_Read 002E  
                      _pop_can 003F       __size_of_I2C_Master_Wait 0014                        _tin_can 0045  
            __end_of_real_time FEB7       __size_of_I2C_Master_Stop 0008                        _pop_out 1B4C  
                      _results 0DD8           __size_of_pop_results 003A                        _standby 0C7C  
               __pintcode_body 0726                _top_rocker_idle 1428           end_of_initialization 1AFE  
         __size_of_tin_results 003A                  startSorting@i 00AC          __size_of_done_sorting 028A  
                      int_func 0726            i2___wmul@multiplier 0001                 _operation_time 0047  
    __size_of_I2C_Master_Start 0008      __size_of_I2C_Master_Write 000A                ___lldiv@divisor 0084  
              ___lldiv@counter 008C                     ??_set_time 0083                        printf@c 00A3  
                      printf@f 008E               I2C_Master_Init@c 008D               I2C_Master_Read@a 0081  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
      __size_of_initialization 005E                      _PORTAbits 000F80                      _PORTBbits 000F81  
                    _PORTCbits 000F82            top_rocker_initial@i 00A6                   _done_sorting 09F2  
          top_rocker_release@i 00A6                      i2___awdiv 12BC              i2___lwdiv@divisor 0003  
                    i2___lwdiv 184A                      i2___lwmod 197C              i2___lwdiv@counter 0007  
         results@keypress_temp 00A7                      i2_lcdInst 1C0A                    printf@width 00A1  
                    i2_initLCD 1936             i2___awdiv@dividend 0001                     _tot_sorted 1B8C  
          top_rocker_restore@i 00A6                      i2_isdigit 1BAC    __end_of_top_rocker_motor_cw 1B2A  
        __end_of_solenoids_out 1740                 __end_of___wmul 1A68           __size_ofi2_lcdNibble 0056  
                i2lcdInst@data 0003             _top_rocker_initial 179C             _top_rocker_release 14FC  
             i2___wmul@product 0005                 __end_of_printf 03F0        __end_of_top_rocker_idle 1494  
           _top_rocker_restore 1740                   i2printf@flag 001D                   i2printf@prec 001A  
          start_initialization 1AE6                    ?_keypressed 0001             i2___awdiv@quotient 0007  
            __size_ofi2___wmul 0026            ?_top_rocker_initial 0001                      i2printf@c 0020  
                    i2printf@f 000D            ?_top_rocker_release 0001                     ?i2___awdiv 0001  
                ?_startSorting 0001            ?_top_rocker_restore 0001                     ?i2___lwdiv 0001  
                   ?i2___lwmod 0008              __size_ofi2_printf 0336              ??_I2C_Master_Init 0091  
            ??_I2C_Master_Read 0081              ??_I2C_Master_Wait 0080                     ?i2_lcdInst 0001  
            ??_I2C_Master_Stop 0081                     ?i2_initLCD 0001                     ?i2_isdigit 0001  
               solenoids_out@i 00A6           ??_top_rocker_initial 00A4           ??_top_rocker_release 00A4  
                     ??___wmul 008C           ??_top_rocker_restore 00A4               __CFG_LPT1OSC$OFF 000000  
     done_sorting@total_second 0095                       ??_printf 0096                    __pbssCOMRAM 003F  
                __pcstackBANK0 0080              i2___lwmod@divisor 000A              i2___lwmod@counter 000C  
                 _isdigit$1082 0081                 ??_startSorting 00AA                       ?i2_putch 0001  
                  ?_tot_sorted 0001               _I2C_Master_Start 1C28               _I2C_Master_Write 1C16  
             ___lwdiv@dividend 0080              __CFG_CCP2MX$PORTC 000000            __size_of_keypressed 09EA  
                    __pintcode 0008                  __pmediumconst FE8C                      _lcdNibble 1494  
                     ?___awdiv 0080                       ?___awmod 0001                 _initialization 1686  
                     ?___lldiv 0080                       ?___lwdiv 0080                       ?___lwmod 0087  
            __size_of_set_time 0062                       ?_lcdInst 0001                       ?_go_back 0001  
                     ?_initLCD 0001                       ?_isdigit 0001               ?_top_rocker_idle 0001  
                     ?_op_time 0001                       ?_pop_out 0001                       ?_results 0001  
                    _hexpowers FEA8                       ?_standby 0001               ___lwdiv@quotient 0085  
                  ??i2___awdiv 0005                    ??i2___lwdiv 0005                    ??i2___lwmod 000C  
               __size_of_putch 0010                      _real_time FEB0                keypressed@i_150 0039  
              keypressed@i_151 003A                keypressed@i_152 003B                keypressed@i_144 0033  
              keypressed@i_153 003C                keypressed@i_145 0034                keypressed@i_154 003D  
              keypressed@i_146 0035                keypressed@i_147 0036                keypressed@i_148 0037  
              keypressed@i_149 0038                    ??i2_lcdInst 0003                 ___wmul@product 008C  
                     _LATAbits 000F89                       _LATBbits 000F8A                       _LATCbits 000F8B  
                     _LATDbits 000F8C                       _LATEbits 000F8D                    ??i2_initLCD 0004  
                  ??i2_isdigit 0001                       i2u441_47 07B0                       i2u450_47 093C  
                     i2u442_47 07D8                       i2u451_47 0964                       i2u443_47 0800  
       __end_of_initialization 16E4                       i2u452_47 098C                       i2u444_47 0834  
                     i2u453_47 193C                       i2u445_47 085C                       i2u454_47 1970  
                     i2u446_47 0884                       i2u455_47 180C                       i2u447_47 08B8  
                     i2u456_47 1816                       i2u448_47 08E0                       i2u457_47 1838  
                     i2u449_47 0908                       i2u458_47 1842               __CFG_WDTPS$32768 000000  
                   ?_lcdNibble 0001                      main@i_776 00B1              ___wmul@multiplier 0088  
                     i2___wmul 1AC0                  lcdNibble@data 0081                  ??_pop_results 0021  
                    _total_end 00B9                     printf@flag 00A0                  lcdNibble@temp 0080  
                   printf@prec 009D            __size_of_tot_sorted 0020              i2___awdiv@divisor 0003  
            i2___awdiv@counter 0005                  ??_tin_results 0021                       i2_printf 03F0  
__size_of_top_rocker_motor_ccw 0022            I2C_Master_Read@temp 0082                initialization@i 00A9  
                _tin_can_label 0043               __size_ofi2_putch 000C             keypressed@keypress 0031  
                     __Hrparam 0000                ?_initialization 0001                       __Lrparam 0000  
           __CFG_BOREN$SBORDIS 000000           __end_of_startSorting 10B4               __size_of___awdiv 00BE  
             __size_of___awmod 0070          i2___wmul@multiplicand 0003               __size_of___lldiv 00BC  
             __size_of___lwdiv 0078               __size_of___lwmod 0062               __size_of_lcdInst 0010  
             __size_of_go_back 0020                _I2C_Master_Init 1626                _I2C_Master_Read 1A68  
             __size_of_initLCD 004A        __size_of_solenoids_back 008E                _I2C_Master_Wait 1BCA  
              _I2C_Master_Stop 1C20                   ??_keypressed 0021               __size_of_isdigit 002A  
              ___lwdiv@divisor 0082                ___lwdiv@counter 0084               __size_of_op_time 0050  
                     __ptext10 1B6C                       __ptext11 1686                       __ptext20 1340  
                     __ptext12 179C                       __ptext21 18EC                       __ptext13 0C7C  
                     __ptext30 1A68                       __ptext22 1BEE                       __ptext14 1562  
                     __ptext31 1BCA                       __ptext23 1494                       __ptext15 0DD8  
                     __ptext40 1BFE                       __ptext32 1626                       __ptext24 09F2  
                     __ptext16 0012                       __ptext41 1BAC                       __ptext33 1172  
                     __ptext25 1A32                       __ptext17 1BDE                       __ptext50 0000  
                     __ptext42 1AC0                       __ptext26 10B4                       __ptext18 1A96  
                     __ptext43 197C                       __ptext35 1B8C                       __ptext27 1C16  
                     __ptext19 15C4                       __ptext44 184A                       __ptext36 19BE  
                     __ptext28 1C20                       __ptext45 1936                       __ptext37 19F8  
                     __ptext29 1C28                       __ptext46 1C0A                       __ptext38 189C  
                     __ptext47 17F4                       __ptext39 03F0                       __ptext48 12BC  
                     __ptext49 13B8               __size_of_pop_out 0020               __size_of_results 0118  
             __size_of_standby 015C            __end_of_pop_results 1A32                 i2_isdigit$1082 0002  
            _done_sorting$1433 0093            __end_of_tin_results 19F8                  __size_of_main 00E8  
                    set_time@i 0083                       _set_time 1562                  ??i2_lcdNibble 0001  
                  ??_lcdNibble 0080             __end_of_keypressed 09F2                       int$flags 004B  
                     _top_move 00C5                      printf@idx 009A                      printf@val 009E  
 __size_of_top_rocker_motor_cw 0022                      putch@data 0082       __end_of_I2C_Master_Start 1C30  
         standby@keypress_temp 00A7       __end_of_I2C_Master_Write 1C20                     _INTCONbits 000FF2  
                     isdigit@c 0082                       intlevel2 0000         __size_of_solenoids_out 005C  
             ___lwmod@dividend 0087               ___lldiv@dividend 0080                results@keypress 00A6  
                 ??_tot_sorted 0021         _start_top_distribution 00C3               top_rocker_idle@i 00A6  
  __size_of_top_rocker_initial 0058                       results@i 00A8                 _topRockerState 00CB  
                  _pop_can_tab 0041    __size_of_top_rocker_release 0066                       printf@ap 009B  
  __size_of_top_rocker_restore 005C        __end_of_I2C_Master_Init 1686        __end_of_I2C_Master_Read 1A96  
                     standby@i 00A9        __end_of_I2C_Master_Wait 1BDE        __end_of_I2C_Master_Stop 1C28  
                  lcdInst@data 0082            __end_ofi2_lcdNibble 184A               ___lldiv@quotient 0088  
            I2C_Master_Write@d 0081                ___lwmod@divisor 0089                    _pop_results 19F8  
              ___lwmod@counter 008B             __end_of_tot_sorted 1BAC                    _tin_results 19BE  
                 results@i_710 00A9                   results@i_712 00AA          __size_of_startSorting 00DC  



Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Mar 17 15:58:51 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1
    76                           	psect	text64,global,reloc=2,class=CODE,delta=1
    77                           	psect	text65,global,reloc=2,class=CODE,delta=1
    78                           	psect	text66,global,reloc=2,class=CODE,delta=1
    79                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    81                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    83                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    84  0000                     
    85                           ; Version 1.41
    86                           ; Generated 25/01/2017 GMT
    87                           ; 
    88                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    89                           ; All rights reserved.
    90                           ; 
    91                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    92                           ; 
    93                           ; Redistribution and use in source and binary forms, with or without modification, are
    94                           ; permitted provided that the following conditions are met:
    95                           ; 
    96                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    97                           ;        conditions and the following disclaimer.
    98                           ; 
    99                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   100                           ;        of conditions and the following disclaimer in the documentation and/or other
   101                           ;        materials provided with the distribution.
   102                           ; 
   103                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   104                           ;        software without specific prior written permission.
   105                           ; 
   106                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   107                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   108                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   109                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   110                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   111                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   112                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   113                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   114                           ; 
   115                           ; 
   116                           ; Code-generator required, PIC18F4620 Definitions
   117                           ; 
   118                           ; SFR Addresses
   119  0000                     
   120                           	psect	mediumconst
   121  00FEE8                     __pmediumconst:
   122                           	opt stack 0
   123  00FEE8  00                 	db	0
   124  00FEE9                     _keys:
   125                           	opt stack 0
   126  00FEE9  31                 	db	49
   127  00FEEA  32                 	db	50
   128  00FEEB  33                 	db	51
   129  00FEEC  41                 	db	65
   130  00FEED  34                 	db	52
   131  00FEEE  35                 	db	53
   132  00FEEF  36                 	db	54
   133  00FEF0  42                 	db	66
   134  00FEF1  37                 	db	55
   135  00FEF2  38                 	db	56
   136  00FEF3  39                 	db	57
   137  00FEF4  43                 	db	67
   138  00FEF5  2A                 	db	42
   139  00FEF6  30                 	db	48
   140  00FEF7  23                 	db	35
   141  00FEF8  44                 	db	68
   142  00FEF9  00                 	db	0
   143  00FEFA                     __end_of_keys:
   144                           	opt stack 0
   145  00FEFA                     _dpowers:
   146                           	opt stack 0
   147  00FEFA  0001               	dw	1
   148  00FEFC  000A               	dw	10
   149  00FEFE  0064               	dw	100
   150  00FF00  03E8               	dw	1000
   151  00FF02  2710               	dw	10000
   152  00FF04                     __end_of_dpowers:
   153                           	opt stack 0
   154  00FF04                     _hexpowers:
   155                           	opt stack 0
   156  00FF04  0001               	dw	1
   157  00FF06  0010               	dw	16
   158  00FF08  0100               	dw	256
   159  00FF0A  1000               	dw	4096
   160  00FF0C                     __end_of_hexpowers:
   161                           	opt stack 0
   162  00FF0C                     _real_time:
   163                           	opt stack 0
   164  00FF0C  45                 	db	69
   165  00FF0D  59                 	db	89
   166  00FF0E  17                 	db	23
   167  00FF0F  04                 	db	4
   168  00FF10  31                 	db	49
   169  00FF11  02                 	db	2
   170  00FF12  17                 	db	23
   171  00FF13                     __end_of_real_time:
   172                           	opt stack 0
   173  0000                     _LATEbits	set	3981
   174  0000                     _PORTBbits	set	3969
   175  0000                     _INTCONbits	set	4082
   176  0000                     _LATCbits	set	3979
   177  0000                     _LATBbits	set	3978
   178  0000                     _LATAbits	set	3977
   179  0000                     _ADCON1	set	4033
   180  0000                     _ADCON0	set	4034
   181  0000                     _LATE	set	3981
   182  0000                     _LATC	set	3979
   183  0000                     _LATB	set	3978
   184  0000                     _LATA	set	3977
   185  0000                     _TRISE	set	3990
   186  0000                     _TRISD	set	3989
   187  0000                     _TRISC	set	3988
   188  0000                     _TRISB	set	3987
   189  0000                     _TRISA	set	3986
   190  0000                     _LATD	set	3980
   191  0000                     _LATDbits	set	3980
   192  0000                     _PORTB	set	3969
   193  0000                     _SSPBUF	set	4041
   194  0000                     _SSPADD	set	4040
   195  0000                     _SSPCON2	set	4037
   196  0000                     _SSPCON1	set	4038
   197  0000                     _SSPSTAT	set	4039
   198  0000                     _PORTCbits	set	3970
   199  0000                     _PORTAbits	set	3968
   200  0000                     _INT1IE	set	32643
   201  0000                     _INT1IF	set	32640
   202  0000                     _ACKEN	set	32300
   203  0000                     _ACKDT	set	32301
   204  0000                     _RCEN	set	32299
   205  0000                     _PEN	set	32298
   206  0000                     _RSEN	set	32297
   207  0000                     _SEN	set	32296
   208  0000                     _TRISC4	set	31908
   209  0000                     _TRISC3	set	31907
   210  00FF13                     STR_11:
   211  00FF13  54                 	db	84	;'T'
   212  00FF14  69                 	db	105	;'i'
   213  00FF15  6D                 	db	109	;'m'
   214  00FF16  65                 	db	101	;'e'
   215  00FF17  3A                 	db	58	;':'
   216  00FF18  20                 	db	32
   217  00FF19  25                 	db	37
   218  00FF1A  30                 	db	48	;'0'
   219  00FF1B  31                 	db	49	;'1'
   220  00FF1C  64                 	db	100	;'d'
   221  00FF1D  20                 	db	32
   222  00FF1E  6D                 	db	109	;'m'
   223  00FF1F  69                 	db	105	;'i'
   224  00FF20  6E                 	db	110	;'n'
   225  00FF21  20                 	db	32
   226  00FF22  25                 	db	37
   227  00FF23  30                 	db	48	;'0'
   228  00FF24  32                 	db	50	;'2'
   229  00FF25  64                 	db	100	;'d'
   230  00FF26  20                 	db	32
   231  00FF27  73                 	db	115	;'s'
   232  00FF28  00                 	db	0
   233  00FF29                     STR_10:
   234  00FF29  54                 	db	84	;'T'
   235  00FF2A  6F                 	db	111	;'o'
   236  00FF2B  74                 	db	116	;'t'
   237  00FF2C  61                 	db	97	;'a'
   238  00FF2D  6C                 	db	108	;'l'
   239  00FF2E  20                 	db	32
   240  00FF2F  53                 	db	83	;'S'
   241  00FF30  6F                 	db	111	;'o'
   242  00FF31  72                 	db	114	;'r'
   243  00FF32  74                 	db	116	;'t'
   244  00FF33  65                 	db	101	;'e'
   245  00FF34  64                 	db	100	;'d'
   246  00FF35  3A                 	db	58	;':'
   247  00FF36  20                 	db	32
   248  00FF37  25                 	db	37
   249  00FF38  30                 	db	48	;'0'
   250  00FF39  32                 	db	50	;'2'
   251  00FF3A  78                 	db	120	;'x'
   252  00FF3B  00                 	db	0
   253  00FF3C                     STR_16:
   254  00FF3C  30                 	db	48	;'0'
   255  00FF3D  31                 	db	49	;'1'
   256  00FF3E  32                 	db	50	;'2'
   257  00FF3F  33                 	db	51	;'3'
   258  00FF40  34                 	db	52	;'4'
   259  00FF41  35                 	db	53	;'5'
   260  00FF42  36                 	db	54	;'6'
   261  00FF43  37                 	db	55	;'7'
   262  00FF44  38                 	db	56	;'8'
   263  00FF45  39                 	db	57	;'9'
   264  00FF46  61                 	db	97	;'a'
   265  00FF47  62                 	db	98	;'b'
   266  00FF48  63                 	db	99	;'c'
   267  00FF49  64                 	db	100	;'d'
   268  00FF4A  65                 	db	101	;'e'
   269  00FF4B  66                 	db	102	;'f'
   270  00FF4C  00                 	db	0
   271  00FF4D                     STR_7:
   272  00FF4D  41                 	db	65	;'A'
   273  00FF4E  3A                 	db	58	;':'
   274  00FF4F  54                 	db	84	;'T'
   275  00FF50  6F                 	db	111	;'o'
   276  00FF51  74                 	db	116	;'t'
   277  00FF52  61                 	db	97	;'a'
   278  00FF53  6C                 	db	108	;'l'
   279  00FF54  20                 	db	32
   280  00FF55  20                 	db	32
   281  00FF56  20                 	db	32
   282  00FF57  42                 	db	66	;'B'
   283  00FF58  3A                 	db	58	;':'
   284  00FF59  50                 	db	80	;'P'
   285  00FF5A  6F                 	db	111	;'o'
   286  00FF5B  70                 	db	112	;'p'
   287  00FF5C  20                 	db	32
   288  00FF5D  00                 	db	0
   289  00FF5E                     STR_8:
   290  00FF5E  43                 	db	67	;'C'
   291  00FF5F  3A                 	db	58	;':'
   292  00FF60  54                 	db	84	;'T'
   293  00FF61  69                 	db	105	;'i'
   294  00FF62  6E                 	db	110	;'n'
   295  00FF63  20                 	db	32
   296  00FF64  20                 	db	32
   297  00FF65  20                 	db	32
   298  00FF66  20                 	db	32
   299  00FF67  20                 	db	32
   300  00FF68  44                 	db	68	;'D'
   301  00FF69  3A                 	db	58	;':'
   302  00FF6A  54                 	db	84	;'T'
   303  00FF6B  69                 	db	105	;'i'
   304  00FF6C  6D                 	db	109	;'m'
   305  00FF6D  65                 	db	101	;'e'
   306  00FF6E  00                 	db	0
   307  00FF6F                     STR_9:
   308  00FF6F  50                 	db	80	;'P'
   309  00FF70  72                 	db	114	;'r'
   310  00FF71  65                 	db	101	;'e'
   311  00FF72  73                 	db	115	;'s'
   312  00FF73  73                 	db	115	;'s'
   313  00FF74  20                 	db	32
   314  00FF75  30                 	db	48	;'0'
   315  00FF76  20                 	db	32
   316  00FF77  74                 	db	116	;'t'
   317  00FF78  6F                 	db	111	;'o'
   318  00FF79  20                 	db	32
   319  00FF7A  52                 	db	82	;'R'
   320  00FF7B  65                 	db	101	;'e'
   321  00FF7C  73                 	db	115	;'s'
   322  00FF7D  65                 	db	101	;'e'
   323  00FF7E  74                 	db	116	;'t'
   324  00FF7F  00                 	db	0
   325  00FF80                     STR_4:
   326  00FF80  50                 	db	80	;'P'
   327  00FF81  72                 	db	114	;'r'
   328  00FF82  65                 	db	101	;'e'
   329  00FF83  73                 	db	115	;'s'
   330  00FF84  73                 	db	115	;'s'
   331  00FF85  20                 	db	32
   332  00FF86  23                 	db	35
   333  00FF87  20                 	db	32
   334  00FF88  74                 	db	116	;'t'
   335  00FF89  6F                 	db	111	;'o'
   336  00FF8A  20                 	db	32
   337  00FF8B  53                 	db	83	;'S'
   338  00FF8C  74                 	db	116	;'t'
   339  00FF8D  61                 	db	97	;'a'
   340  00FF8E  72                 	db	114	;'r'
   341  00FF8F  74                 	db	116	;'t'
   342  00FF90  00                 	db	0
   343  00FF91                     STR_12:
   344  00FF91  57                 	db	87	;'W'
   345  00FF92  69                 	db	105	;'i'
   346  00FF93  74                 	db	116	;'t'
   347  00FF94  68                 	db	104	;'h'
   348  00FF95  20                 	db	32
   349  00FF96  4C                 	db	76	;'L'
   350  00FF97  61                 	db	97	;'a'
   351  00FF98  62                 	db	98	;'b'
   352  00FF99  65                 	db	101	;'e'
   353  00FF9A  6C                 	db	108	;'l'
   354  00FF9B  3A                 	db	58	;':'
   355  00FF9C  20                 	db	32
   356  00FF9D  25                 	db	37
   357  00FF9E  30                 	db	48	;'0'
   358  00FF9F  32                 	db	50	;'2'
   359  00FFA0  78                 	db	120	;'x'
   360  00FFA1  00                 	db	0
   361  00FFA2                     STR_14:
   362  00FFA2  57                 	db	87	;'W'
   363  00FFA3  69                 	db	105	;'i'
   364  00FFA4  74                 	db	116	;'t'
   365  00FFA5  68                 	db	104	;'h'
   366  00FFA6  20                 	db	32
   367  00FFA7  54                 	db	84	;'T'
   368  00FFA8  61                 	db	97	;'a'
   369  00FFA9  62                 	db	98	;'b'
   370  00FFAA  3A                 	db	58	;':'
   371  00FFAB  20                 	db	32
   372  00FFAC  25                 	db	37
   373  00FFAD  30                 	db	48	;'0'
   374  00FFAE  32                 	db	50	;'2'
   375  00FFAF  78                 	db	120	;'x'
   376  00FFB0  00                 	db	0
   377  00FFB1                     STR_13:
   378  00FFB1  4E                 	db	78	;'N'
   379  00FFB2  6F                 	db	111	;'o'
   380  00FFB3  20                 	db	32
   381  00FFB4  4C                 	db	76	;'L'
   382  00FFB5  61                 	db	97	;'a'
   383  00FFB6  62                 	db	98	;'b'
   384  00FFB7  65                 	db	101	;'e'
   385  00FFB8  6C                 	db	108	;'l'
   386  00FFB9  3A                 	db	58	;':'
   387  00FFBA  20                 	db	32
   388  00FFBB  25                 	db	37
   389  00FFBC  30                 	db	48	;'0'
   390  00FFBD  32                 	db	50	;'2'
   391  00FFBE  78                 	db	120	;'x'
   392  00FFBF  00                 	db	0
   393  00FFC0                     STR_3:
   394  00FFC0  25                 	db	37
   395  00FFC1  30                 	db	48	;'0'
   396  00FFC2  32                 	db	50	;'2'
   397  00FFC3  78                 	db	120	;'x'
   398  00FFC4  3A                 	db	58	;':'
   399  00FFC5  25                 	db	37
   400  00FFC6  30                 	db	48	;'0'
   401  00FFC7  32                 	db	50	;'2'
   402  00FFC8  78                 	db	120	;'x'
   403  00FFC9  3A                 	db	58	;':'
   404  00FFCA  25                 	db	37
   405  00FFCB  30                 	db	48	;'0'
   406  00FFCC  32                 	db	50	;'2'
   407  00FFCD  78                 	db	120	;'x'
   408  00FFCE  00                 	db	0
   409  00FFCF                     STR_2:
   410  00FFCF  25                 	db	37
   411  00FFD0  30                 	db	48	;'0'
   412  00FFD1  32                 	db	50	;'2'
   413  00FFD2  78                 	db	120	;'x'
   414  00FFD3  2F                 	db	47
   415  00FFD4  25                 	db	37
   416  00FFD5  30                 	db	48	;'0'
   417  00FFD6  32                 	db	50	;'2'
   418  00FFD7  78                 	db	120	;'x'
   419  00FFD8  20                 	db	32
   420  00FFD9  20                 	db	32
   421  00FFDA  20                 	db	32
   422  00FFDB  00                 	db	0
   423  00FFDC                     STR_6:
   424  00FFDC  49                 	db	73	;'I'
   425  00FFDD  6E                 	db	110	;'n'
   426  00FFDE  69                 	db	105	;'i'
   427  00FFDF  74                 	db	116	;'t'
   428  00FFE0  69                 	db	105	;'i'
   429  00FFE1  61                 	db	97	;'a'
   430  00FFE2  6C                 	db	108	;'l'
   431  00FFE3  69                 	db	105	;'i'
   432  00FFE4  7A                 	db	122	;'z'
   433  00FFE5  69                 	db	105	;'i'
   434  00FFE6  6E                 	db	110	;'n'
   435  00FFE7  67                 	db	103	;'g'
   436  00FFE8  00                 	db	0
   437  00FFE9                     STR_15:
   438  00FFE9  4E                 	db	78	;'N'
   439  00FFEA  6F                 	db	111	;'o'
   440  00FFEB  20                 	db	32
   441  00FFEC  54                 	db	84	;'T'
   442  00FFED  61                 	db	97	;'a'
   443  00FFEE  62                 	db	98	;'b'
   444  00FFEF  3A                 	db	58	;':'
   445  00FFF0  20                 	db	32
   446  00FFF1  25                 	db	37
   447  00FFF2  30                 	db	48	;'0'
   448  00FFF3  32                 	db	50	;'2'
   449  00FFF4  78                 	db	120	;'x'
   450  00FFF5  00                 	db	0
   451  00FFF6                     STR_5:
   452  00FFF6  43                 	db	67	;'C'
   453  00FFF7  6F                 	db	111	;'o'
   454  00FFF8  6D                 	db	109	;'m'
   455  00FFF9  70                 	db	112	;'p'
   456  00FFFA  6C                 	db	108	;'l'
   457  00FFFB  65                 	db	101	;'e'
   458  00FFFC  74                 	db	116	;'t'
   459  00FFFD  65                 	db	101	;'e'
   460  00FFFE  00                 	db	0
   461  0000                     
   462                           ; #config settings
   463  00FFFF  00                 	db	0	; dummy byte at the end
   464  0000                     
   465                           	psect	cinit
   466  001B9E                     __pcinit:
   467                           	opt stack 0
   468  001B9E                     start_initialization:
   469                           	opt stack 0
   470  001B9E                     __initialization:
   471                           	opt stack 0
   472                           
   473                           ; Clear objects allocated to BANK0 (39 bytes)
   474  001B9E  EE00  F0AB         	lfsr	0,__pbssBANK0
   475  001BA2  0E27               	movlw	39
   476  001BA4                     clear_0:
   477  001BA4  6AEE               	clrf	postinc0,c
   478  001BA6  06E8               	decf	wreg,f,c
   479  001BA8  E1FD               	bnz	clear_0
   480                           
   481                           ; Clear objects allocated to COMRAM (14 bytes)
   482  001BAA  EE00  F03F         	lfsr	0,__pbssCOMRAM
   483  001BAE  0E0E               	movlw	14
   484  001BB0                     clear_1:
   485  001BB0  6AEE               	clrf	postinc0,c
   486  001BB2  06E8               	decf	wreg,f,c
   487  001BB4  E1FD               	bnz	clear_1
   488  001BB6                     end_of_initialization:
   489                           	opt stack 0
   490  001BB6                     __end_of__initialization:
   491                           	opt stack 0
   492  001BB6  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   493  001BB8  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   494  001BBA  0100               	movlb	0
   495  001BBC  EFE0  F008         	goto	_main	;jump to C main() function
   496                           postinc0	equ	0xFEE
   497                           wreg	equ	0xFE8
   498                           
   499                           	psect	bssCOMRAM
   500  00003F                     __pbssCOMRAM:
   501                           	opt stack 0
   502  00003F                     _top_move:
   503                           	opt stack 0
   504  00003F                     	ds	2
   505  000041                     _tabed:
   506                           	opt stack 0
   507  000041                     	ds	2
   508  000043                     _tot:
   509                           	opt stack 0
   510  000043                     	ds	2
   511  000045                     _operation_time:
   512                           	opt stack 0
   513  000045                     	ds	2
   514  000047                     _labeled:
   515                           	opt stack 0
   516  000047                     	ds	2
   517  000049                     _bottom_move:
   518                           	opt stack 0
   519  000049                     	ds	2
   520  00004B                     _start_bottom_distribution:
   521                           	opt stack 0
   522  00004B                     	ds	2
   523                           postinc0	equ	0xFEE
   524                           wreg	equ	0xFE8
   525                           
   526                           	psect	bssBANK0
   527  0000AB                     __pbssBANK0:
   528                           	opt stack 0
   529  0000AB                     _time:
   530                           	opt stack 0
   531  0000AB                     	ds	7
   532  0000B2                     _total_end:
   533                           	opt stack 0
   534  0000B2                     	ds	4
   535  0000B6                     _total_start:
   536                           	opt stack 0
   537  0000B6                     	ds	4
   538  0000BA                     _Start_time:
   539                           	opt stack 0
   540  0000BA                     	ds	2
   541  0000BC                     _fsm1:
   542                           	opt stack 0
   543  0000BC                     	ds	2
   544  0000BE                     _start_top_distribution:
   545                           	opt stack 0
   546  0000BE                     	ds	2
   547  0000C0                     _pop_can_tab:
   548                           	opt stack 0
   549  0000C0                     	ds	2
   550  0000C2                     _pop_can:
   551                           	opt stack 0
   552  0000C2                     	ds	2
   553  0000C4                     _tin_can:
   554                           	opt stack 0
   555  0000C4                     	ds	2
   556  0000C6                     _tin_can_label:
   557                           	opt stack 0
   558  0000C6                     	ds	2
   559  0000C8                     _fsm2:
   560                           	opt stack 0
   561  0000C8                     	ds	2
   562  0000CA                     _bottomRockerState:
   563                           	opt stack 0
   564  0000CA                     	ds	2
   565  0000CC                     _bottomDistributionState:
   566                           	opt stack 0
   567  0000CC                     	ds	2
   568  0000CE                     _topDistributionState:
   569                           	opt stack 0
   570  0000CE                     	ds	2
   571  0000D0                     _topRockerState:
   572                           	opt stack 0
   573  0000D0                     	ds	2
   574                           postinc0	equ	0xFEE
   575                           wreg	equ	0xFE8
   576                           
   577                           	psect	cstackBANK0
   578  000080                     __pcstackBANK0:
   579                           	opt stack 0
   580  000080                     ??_bottom_distribution_motor_cw:
   581  000080                     ??_bottom_distribution_motor_ccw:
   582  000080                     ??_bottom_rocker_idle:
   583  000080                     ??_bottom_rocker_motor_ccw:
   584  000080                     ??_bottom_rocker_motor_cw:
   585  000080                     ??_isdigit:
   586  000080                     ??_I2C_Master_Wait:
   587  000080                     ??_top_rocker_motor_cw:
   588  000080                     ??_top_rocker_motor_ccw:
   589  000080                     ??_top_distribution_motor_ccw:
   590  000080                     ??_top_distribution_motor_cw:
   591  000080                     ??_pop_out:
   592  000080                     ??_go_back:
   593  000080                     ?___awdiv:
   594                           	opt stack 0
   595  000080                     ?___lwdiv:
   596                           	opt stack 0
   597  000080                     ?___lldiv:
   598                           	opt stack 0
   599  000080                     lcdNibble@temp:
   600                           	opt stack 0
   601  000080                     ___awdiv@dividend:
   602                           	opt stack 0
   603  000080                     ___lwdiv@dividend:
   604                           	opt stack 0
   605  000080                     ___lldiv@dividend:
   606                           	opt stack 0
   607                           
   608                           ; 4 bytes @ 0x0
   609  000080                     	ds	1
   610  000081                     I2C_Master_Read@a:
   611                           	opt stack 0
   612  000081                     lcdNibble@data:
   613                           	opt stack 0
   614  000081                     _isdigit$1350:
   615                           	opt stack 0
   616  000081                     I2C_Master_Write@d:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x1
   620  000081                     	ds	1
   621  000082                     ??_solenoids_back:
   622  000082                     I2C_Master_Read@temp:
   623                           	opt stack 0
   624  000082                     lcdInst@data:
   625                           	opt stack 0
   626  000082                     putch@data:
   627                           	opt stack 0
   628  000082                     isdigit@c:
   629                           	opt stack 0
   630  000082                     top_rocker_motor_ccw@j:
   631                           	opt stack 0
   632  000082                     bottom_rocker_motor_ccw@k:
   633                           	opt stack 0
   634  000082                     ___awdiv@divisor:
   635                           	opt stack 0
   636  000082                     ___lwdiv@divisor:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0x2
   640  000082                     	ds	1
   641  000083                     ??_initLCD:
   642  000083                     set_time@i:
   643                           	opt stack 0
   644                           
   645                           ; 1 bytes @ 0x3
   646  000083                     	ds	1
   647  000084                     ___awdiv@counter:
   648                           	opt stack 0
   649  000084                     ___lwdiv@counter:
   650                           	opt stack 0
   651  000084                     ___lldiv@divisor:
   652                           	opt stack 0
   653                           
   654                           ; 4 bytes @ 0x4
   655  000084                     	ds	1
   656  000085                     ___awdiv@sign:
   657                           	opt stack 0
   658  000085                     ___lwdiv@quotient:
   659                           	opt stack 0
   660                           
   661                           ; 2 bytes @ 0x5
   662  000085                     	ds	1
   663  000086                     ___awdiv@quotient:
   664                           	opt stack 0
   665                           
   666                           ; 2 bytes @ 0x6
   667  000086                     	ds	1
   668  000087                     ?___lwmod:
   669                           	opt stack 0
   670  000087                     ___lwmod@dividend:
   671                           	opt stack 0
   672                           
   673                           ; 2 bytes @ 0x7
   674  000087                     	ds	1
   675  000088                     ?___wmul:
   676                           	opt stack 0
   677  000088                     ___wmul@multiplier:
   678                           	opt stack 0
   679  000088                     ___lldiv@quotient:
   680                           	opt stack 0
   681                           
   682                           ; 4 bytes @ 0x8
   683  000088                     	ds	1
   684  000089                     ___lwmod@divisor:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x9
   688  000089                     	ds	1
   689  00008A                     ___wmul@multiplicand:
   690                           	opt stack 0
   691                           
   692                           ; 2 bytes @ 0xA
   693  00008A                     	ds	1
   694  00008B                     ___lwmod@counter:
   695                           	opt stack 0
   696                           
   697                           ; 1 bytes @ 0xB
   698  00008B                     	ds	1
   699  00008C                     ___lldiv@counter:
   700                           	opt stack 0
   701  00008C                     ___wmul@product:
   702                           	opt stack 0
   703                           
   704                           ; 2 bytes @ 0xC
   705  00008C                     	ds	1
   706  00008D                     I2C_Master_Init@c:
   707                           	opt stack 0
   708                           
   709                           ; 4 bytes @ 0xD
   710  00008D                     	ds	1
   711  00008E                     ?_printf:
   712                           	opt stack 0
   713  00008E                     ?_done_sorting:
   714                           	opt stack 0
   715  00008E                     printf@f:
   716                           	opt stack 0
   717                           
   718                           ; 2 bytes @ 0xE
   719  00008E                     	ds	2
   720  000090                     ??_done_sorting:
   721                           
   722                           ; 1 bytes @ 0x10
   723  000090                     	ds	1
   724  000091                     ??_I2C_Master_Init:
   725                           
   726                           ; 1 bytes @ 0x11
   727  000091                     	ds	2
   728  000093                     _done_sorting$1703:
   729                           	opt stack 0
   730                           
   731                           ; 2 bytes @ 0x13
   732  000093                     	ds	2
   733  000095                     done_sorting@total_second:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x15
   737  000095                     	ds	1
   738  000096                     ??_printf:
   739                           
   740                           ; 1 bytes @ 0x16
   741  000096                     	ds	1
   742  000097                     done_sorting@i:
   743                           	opt stack 0
   744                           
   745                           ; 1 bytes @ 0x17
   746  000097                     	ds	1
   747  000098                     done_sorting@End_time:
   748                           	opt stack 0
   749                           
   750                           ; 2 bytes @ 0x18
   751  000098                     	ds	2
   752  00009A                     printf@idx:
   753                           	opt stack 0
   754                           
   755                           ; 1 bytes @ 0x1A
   756  00009A                     	ds	1
   757  00009B                     printf@ap:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0x1B
   761  00009B                     	ds	2
   762  00009D                     printf@prec:
   763                           	opt stack 0
   764                           
   765                           ; 1 bytes @ 0x1D
   766  00009D                     	ds	1
   767  00009E                     printf@val:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x1E
   771  00009E                     	ds	2
   772  0000A0                     printf@flag:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x20
   776  0000A0                     	ds	1
   777  0000A1                     printf@width:
   778                           	opt stack 0
   779                           
   780                           ; 2 bytes @ 0x21
   781  0000A1                     	ds	2
   782  0000A3                     printf@c:
   783                           	opt stack 0
   784                           
   785                           ; 1 bytes @ 0x23
   786  0000A3                     	ds	1
   787  0000A4                     ??_standby:
   788  0000A4                     ??_results:
   789  0000A4                     ??_initialization:
   790                           
   791                           ; 1 bytes @ 0x24
   792  0000A4                     	ds	2
   793  0000A6                     standby@keypress:
   794                           	opt stack 0
   795  0000A6                     initialization@i:
   796                           	opt stack 0
   797  0000A6                     results@keypress:
   798                           	opt stack 0
   799                           
   800                           ; 1 bytes @ 0x26
   801  0000A6                     	ds	1
   802  0000A7                     ??_startSorting:
   803  0000A7                     standby@keypress_temp:
   804                           	opt stack 0
   805  0000A7                     results@keypress_temp:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x27
   809  0000A7                     	ds	1
   810  0000A8                     standby@i_875:
   811                           	opt stack 0
   812  0000A8                     results@i:
   813                           	opt stack 0
   814                           
   815                           ; 1 bytes @ 0x28
   816  0000A8                     	ds	1
   817  0000A9                     standby@i:
   818                           	opt stack 0
   819  0000A9                     startSorting@i:
   820                           	opt stack 0
   821  0000A9                     results@i_899:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0x29
   825  0000A9                     	ds	1
   826  0000AA                     results@i_901:
   827                           	opt stack 0
   828                           
   829                           ; 1 bytes @ 0x2A
   830  0000AA                     	ds	1
   831  0000AB                     postinc0	equ	0xFEE
   832                           wreg	equ	0xFE8
   833                           
   834                           ; 1 bytes @ 0x2B
   835                           
   836                           	psect	cstackCOMRAM
   837  000001                     __pcstackCOMRAM:
   838                           	opt stack 0
   839  000001                     ??i2_isdigit:
   840  000001                     ?___awmod:
   841                           	opt stack 0
   842  000001                     ?i2___wmul:
   843                           	opt stack 0
   844  000001                     ?i2___awdiv:
   845                           	opt stack 0
   846  000001                     ?i2___lwdiv:
   847                           	opt stack 0
   848  000001                     i2lcdNibble@temp:
   849                           	opt stack 0
   850  000001                     ___awmod@dividend:
   851                           	opt stack 0
   852  000001                     i2___wmul@multiplier:
   853                           	opt stack 0
   854  000001                     i2___awdiv@dividend:
   855                           	opt stack 0
   856  000001                     i2___lwdiv@dividend:
   857                           	opt stack 0
   858                           
   859                           ; 2 bytes @ 0x0
   860  000001                     	ds	1
   861  000002                     i2lcdNibble@data:
   862                           	opt stack 0
   863  000002                     i2_isdigit$1350:
   864                           	opt stack 0
   865                           
   866                           ; 1 bytes @ 0x1
   867  000002                     	ds	1
   868  000003                     i2lcdInst@data:
   869                           	opt stack 0
   870  000003                     i2putch@data:
   871                           	opt stack 0
   872  000003                     i2isdigit@c:
   873                           	opt stack 0
   874  000003                     ___awmod@divisor:
   875                           	opt stack 0
   876  000003                     i2___wmul@multiplicand:
   877                           	opt stack 0
   878  000003                     i2___awdiv@divisor:
   879                           	opt stack 0
   880  000003                     i2___lwdiv@divisor:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x2
   884  000003                     	ds	1
   885  000004                     ??i2_initLCD:
   886                           
   887                           ; 1 bytes @ 0x3
   888  000004                     	ds	1
   889  000005                     ___awmod@counter:
   890                           	opt stack 0
   891  000005                     i2___awdiv@counter:
   892                           	opt stack 0
   893  000005                     i2___wmul@product:
   894                           	opt stack 0
   895  000005                     i2___lwdiv@quotient:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x4
   899  000005                     	ds	1
   900  000006                     ___awmod@sign:
   901                           	opt stack 0
   902  000006                     i2___awdiv@sign:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0x5
   906  000006                     	ds	1
   907  000007                     i2___lwdiv@counter:
   908                           	opt stack 0
   909  000007                     i2___awdiv@quotient:
   910                           	opt stack 0
   911                           
   912                           ; 2 bytes @ 0x6
   913  000007                     	ds	1
   914  000008                     ?i2___lwmod:
   915                           	opt stack 0
   916  000008                     i2___lwmod@dividend:
   917                           	opt stack 0
   918                           
   919                           ; 2 bytes @ 0x7
   920  000008                     	ds	2
   921  00000A                     i2___lwmod@divisor:
   922                           	opt stack 0
   923                           
   924                           ; 2 bytes @ 0x9
   925  00000A                     	ds	2
   926  00000C                     i2___lwmod@counter:
   927                           	opt stack 0
   928                           
   929                           ; 1 bytes @ 0xB
   930  00000C                     	ds	1
   931  00000D                     ?i2_printf:
   932                           	opt stack 0
   933  00000D                     i2printf@f:
   934                           	opt stack 0
   935                           
   936                           ; 2 bytes @ 0xC
   937  00000D                     	ds	6
   938  000013                     ??i2_printf:
   939                           
   940                           ; 1 bytes @ 0x12
   941  000013                     	ds	4
   942  000017                     i2printf@idx:
   943                           	opt stack 0
   944                           
   945                           ; 1 bytes @ 0x16
   946  000017                     	ds	1
   947  000018                     i2printf@ap:
   948                           	opt stack 0
   949                           
   950                           ; 2 bytes @ 0x17
   951  000018                     	ds	2
   952  00001A                     i2printf@prec:
   953                           	opt stack 0
   954                           
   955                           ; 1 bytes @ 0x19
   956  00001A                     	ds	1
   957  00001B                     i2printf@val:
   958                           	opt stack 0
   959                           
   960                           ; 2 bytes @ 0x1A
   961  00001B                     	ds	2
   962  00001D                     i2printf@flag:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x1C
   966  00001D                     	ds	1
   967  00001E                     i2printf@width:
   968                           	opt stack 0
   969                           
   970                           ; 2 bytes @ 0x1D
   971  00001E                     	ds	2
   972  000020                     i2printf@c:
   973                           	opt stack 0
   974                           
   975                           ; 1 bytes @ 0x1F
   976  000020                     	ds	1
   977  000021                     ??_keypressed:
   978                           
   979                           ; 1 bytes @ 0x20
   980  000021                     	ds	16
   981  000031                     keypressed@keypress:
   982                           	opt stack 0
   983                           
   984                           ; 1 bytes @ 0x30
   985  000031                     	ds	1
   986  000032                     keypressed@i:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0x31
   990  000032                     	ds	1
   991  000033                     keypressed@i_333:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x32
   995  000033                     	ds	1
   996  000034                     keypressed@i_334:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0x33
  1000  000034                     	ds	1
  1001  000035                     keypressed@i_335:
  1002                           	opt stack 0
  1003                           
  1004                           ; 1 bytes @ 0x34
  1005  000035                     	ds	1
  1006  000036                     keypressed@i_336:
  1007                           	opt stack 0
  1008                           
  1009                           ; 1 bytes @ 0x35
  1010  000036                     	ds	1
  1011  000037                     keypressed@i_337:
  1012                           	opt stack 0
  1013                           
  1014                           ; 1 bytes @ 0x36
  1015  000037                     	ds	1
  1016  000038                     keypressed@i_338:
  1017                           	opt stack 0
  1018                           
  1019                           ; 1 bytes @ 0x37
  1020  000038                     	ds	1
  1021  000039                     keypressed@i_339:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x38
  1025  000039                     	ds	1
  1026  00003A                     keypressed@i_340:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0x39
  1030  00003A                     	ds	1
  1031  00003B                     keypressed@i_341:
  1032                           	opt stack 0
  1033                           
  1034                           ; 1 bytes @ 0x3A
  1035  00003B                     	ds	1
  1036  00003C                     keypressed@i_342:
  1037                           	opt stack 0
  1038                           
  1039                           ; 1 bytes @ 0x3B
  1040  00003C                     	ds	1
  1041  00003D                     keypressed@i_343:
  1042                           	opt stack 0
  1043                           
  1044                           ; 1 bytes @ 0x3C
  1045  00003D                     	ds	1
  1046  00003E                     keypressed@keypress_temp:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x3D
  1050  00003E                     	ds	1
  1051                           postinc0	equ	0xFEE
  1052                           wreg	equ	0xFE8
  1053                           
  1054 ;;
  1055 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1056 ;;
  1057 ;; *************** function _main *****************
  1058 ;; Defined at:
  1059 ;;		line 82 in file "main.c"
  1060 ;; Parameters:    Size  Location     Type
  1061 ;;		None
  1062 ;; Auto vars:     Size  Location     Type
  1063 ;;		None
  1064 ;; Return value:  Size  Location     Type
  1065 ;;                  1    wreg      void 
  1066 ;; Registers used:
  1067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1068 ;; Tracked objects:
  1069 ;;		On entry : 0/0
  1070 ;;		On exit  : 0/0
  1071 ;;		Unchanged: 0/0
  1072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1077 ;;Total ram usage:        0 bytes
  1078 ;; Hardware stack levels required when called:   10
  1079 ;; This function calls:
  1080 ;;		_I2C_Master_Init
  1081 ;;		_done_sorting
  1082 ;;		_initLCD
  1083 ;;		_results
  1084 ;;		_set_time
  1085 ;;		_standby
  1086 ;;		_startSorting
  1087 ;; This function is called by:
  1088 ;;		Startup code after reset
  1089 ;; This function uses a non-reentrant model
  1090 ;;
  1091                           
  1092                           	psect	text0
  1093  0011C0                     __ptext0:
  1094                           	opt stack 0
  1095  0011C0                     _main:
  1096                           	opt stack 21
  1097                           
  1098                           ;main.c: 84: TRISA = 0xF6;
  1099                           
  1100                           ;incstack = 0
  1101  0011C0  0EF6               	movlw	246
  1102  0011C2  6E92               	movwf	3986,c	;volatile
  1103                           
  1104                           ;main.c: 86: TRISB = 0xF2;
  1105  0011C4  0EF2               	movlw	242
  1106  0011C6  6E93               	movwf	3987,c	;volatile
  1107                           
  1108                           ;main.c: 89: TRISC = 0x1F;
  1109  0011C8  0E1F               	movlw	31
  1110  0011CA  6E94               	movwf	3988,c	;volatile
  1111                           
  1112                           ;main.c: 90: TRISD = 0x00;
  1113  0011CC  0E00               	movlw	0
  1114  0011CE  6E95               	movwf	3989,c	;volatile
  1115                           
  1116                           ;main.c: 91: TRISE = 0x00;
  1117  0011D0  0E00               	movlw	0
  1118  0011D2  6E96               	movwf	3990,c	;volatile
  1119                           
  1120                           ;main.c: 94: LATA = 0xF6;
  1121  0011D4  0EF6               	movlw	246
  1122  0011D6  6E89               	movwf	3977,c	;volatile
  1123                           
  1124                           ;main.c: 95: LATB = 0x00;
  1125  0011D8  0E00               	movlw	0
  1126  0011DA  6E8A               	movwf	3978,c	;volatile
  1127                           
  1128                           ;main.c: 96: LATC = 0x00;
  1129  0011DC  0E00               	movlw	0
  1130  0011DE  6E8B               	movwf	3979,c	;volatile
  1131                           
  1132                           ;main.c: 97: LATD = 0x01;
  1133  0011E0  0E01               	movlw	1
  1134  0011E2  6E8C               	movwf	3980,c	;volatile
  1135                           
  1136                           ;main.c: 99: LATE = 0x08;
  1137  0011E4  0E08               	movlw	8
  1138  0011E6  6E8D               	movwf	3981,c	;volatile
  1139                           
  1140                           ;main.c: 101: ADCON0 = 0x00;
  1141  0011E8  0E00               	movlw	0
  1142  0011EA  6EC2               	movwf	4034,c	;volatile
  1143                           
  1144                           ;main.c: 102: ADCON1 = 0xFF;
  1145  0011EC  68C1               	setf	4033,c	;volatile
  1146                           
  1147                           ;main.c: 104: initLCD();
  1148  0011EE  EC1D  F00C         	call	_initLCD	;wreg free
  1149                           
  1150                           ;main.c: 105: __nop();
  1151  0011F2  F000               	nop	
  1152                           
  1153                           ;main.c: 106: __nop();
  1154  0011F4  F000               	nop	
  1155                           
  1156                           ;main.c: 107: INT1IE = 1;
  1157  0011F6  86F0               	bsf	intcon3,3,c	;volatile
  1158                           
  1159                           ;main.c: 110: I2C_Master_Init(10000);
  1160  0011F8  0E10               	movlw	16
  1161  0011FA  0100               	movlb	0	; () banked
  1162  0011FC  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  1163  0011FE  0E27               	movlw	39
  1164  001200  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1165  001202  0E00               	movlw	0
  1166  001204  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1167  001206  0E00               	movlw	0
  1168  001208  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1169  00120A  EC49  F00B         	call	_I2C_Master_Init	;wreg free
  1170                           
  1171                           ;main.c: 111: set_time();
  1172  00120E  ECE7  F00A         	call	_set_time	;wreg free
  1173  001212                     l4877:
  1174                           
  1175                           ;main.c: 118: standby();
  1176  001212  EC04  F007         	call	_standby	;wreg free
  1177                           
  1178                           ;main.c: 121: startSorting();
  1179  001216  ECB2  F007         	call	_startSorting	;wreg free
  1180                           
  1181                           ;main.c: 124: operation_time = done_sorting();
  1182  00121A  ECFF  F004         	call	_done_sorting	;wreg free
  1183  00121E  C08E  F045         	movff	?_done_sorting,_operation_time
  1184  001222  C08F  F046         	movff	?_done_sorting+1,_operation_time+1
  1185                           
  1186                           ;main.c: 126: __nop();
  1187  001226  F000               	nop	
  1188                           
  1189                           ;main.c: 127: __nop();
  1190  001228  F000               	nop	
  1191                           
  1192                           ;main.c: 130: LATA = 0xF6;
  1193  00122A  0EF6               	movlw	246
  1194  00122C  6E89               	movwf	3977,c	;volatile
  1195                           
  1196                           ;main.c: 131: LATB = 0x00;
  1197  00122E  0E00               	movlw	0
  1198  001230  6E8A               	movwf	3978,c	;volatile
  1199                           
  1200                           ;main.c: 132: LATC = 0x00;
  1201  001232  0E00               	movlw	0
  1202  001234  6E8B               	movwf	3979,c	;volatile
  1203                           
  1204                           ;main.c: 133: LATD = 0x01;
  1205  001236  0E01               	movlw	1
  1206  001238  6E8C               	movwf	3980,c	;volatile
  1207                           
  1208                           ;main.c: 135: LATE = 0x08;
  1209  00123A  0E08               	movlw	8
  1210  00123C  6E8D               	movwf	3981,c	;volatile
  1211                           
  1212                           ;main.c: 137: results();
  1213  00123E  EC49  F006         	call	_results	;wreg free
  1214  001242  D7E7               	goto	l4877
  1215                           
  1216                           ;main.c: 138: }
  1217                           ;main.c: 139: __nop();
  1218  001244  F000               	nop	
  1219                           
  1220                           ;main.c: 140: __nop();
  1221  001246  F000               	nop	
  1222  001248                     __end_of_main:
  1223                           	opt stack 0
  1224                           intcon3	equ	0xFF0
  1225                           postinc0	equ	0xFEE
  1226                           wreg	equ	0xFE8
  1227                           
  1228 ;; *************** function _startSorting *****************
  1229 ;; Defined at:
  1230 ;;		line 80 in file "operation.c"
  1231 ;; Parameters:    Size  Location     Type
  1232 ;;		None
  1233 ;; Auto vars:     Size  Location     Type
  1234 ;;  i               1   41[BANK0 ] unsigned char 
  1235 ;; Return value:  Size  Location     Type
  1236 ;;                  1    wreg      void 
  1237 ;; Registers used:
  1238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1239 ;; Tracked objects:
  1240 ;;		On entry : 0/0
  1241 ;;		On exit  : 0/0
  1242 ;;		Unchanged: 0/0
  1243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1245 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1246 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1247 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1248 ;;Total ram usage:        3 bytes
  1249 ;; Hardware stack levels used:    1
  1250 ;; Hardware stack levels required when called:    9
  1251 ;; This function calls:
  1252 ;;		Absolute function
  1253 ;;		_bottom_distribution_idle
  1254 ;;		_bottom_distribution_move
  1255 ;;		_bottom_distribution_prepare
  1256 ;;		_bottom_rocker_idle
  1257 ;;		_bottom_rocker_release
  1258 ;;		_bottom_rocker_restore
  1259 ;;		_initLCD
  1260 ;;		_initialization
  1261 ;;		_lcdInst
  1262 ;;		_printf
  1263 ;;		_solenoids_back
  1264 ;;		_solenoids_out
  1265 ;;		_top_distribution_idle
  1266 ;;		_top_distribution_move
  1267 ;;		_top_distribution_prepare
  1268 ;;		_top_rocker_idle
  1269 ;;		_top_rocker_release
  1270 ;;		_top_rocker_restore
  1271 ;; This function is called by:
  1272 ;;		_main
  1273 ;; This function uses a non-reentrant model
  1274 ;;
  1275                           
  1276                           	psect	text1
  1277  000F64                     __ptext1:
  1278                           	opt stack 0
  1279  000F64                     _startSorting:
  1280                           	opt stack 21
  1281                           
  1282                           ;operation.c: 83: initialization();
  1283                           
  1284                           ;incstack = 0
  1285  000F64  EC7F  F00A         	call	_initialization	;wreg free
  1286  000F68                     l4705:
  1287                           
  1288                           ;operation.c: 100: (INTCONbits.GIE = 1);
  1289  000F68  8EF2               	bsf	intcon,7,c	;volatile
  1290                           
  1291                           ;operation.c: 101: (*topRockerState)();
  1292  000F6A  D801               	call	u3948
  1293  000F6C  D00A               	goto	l4709
  1294  000F6E                     u3948:
  1295  000F6E  0005               	push	
  1296  000F70  6EFA               	movwf	pclath,c
  1297  000F72  0100               	movlb	0	; () banked
  1298  000F74  51D0               	movf	_topRockerState& (0+255),w,b
  1299  000F76  6EFD               	movwf	tosl,c
  1300  000F78  51D1               	movf	(_topRockerState+1)& (0+255),w,b
  1301  000F7A  6EFE               	movwf	tosh,c
  1302  000F7C  6AFF               	clrf	tosu,c
  1303  000F7E  50FA               	movf	pclath,w,c
  1304  000F80  0012               	return		;indir
  1305  000F82                     l4709:
  1306                           
  1307                           ;operation.c: 102: (*bottomRockerState)();
  1308  000F82  D801               	call	u3958
  1309  000F84  D00A               	goto	l4711
  1310  000F86                     u3958:
  1311  000F86  0005               	push	
  1312  000F88  6EFA               	movwf	pclath,c
  1313  000F8A  0100               	movlb	0	; () banked
  1314  000F8C  51CA               	movf	_bottomRockerState& (0+255),w,b
  1315  000F8E  6EFD               	movwf	tosl,c
  1316  000F90  51CB               	movf	(_bottomRockerState+1)& (0+255),w,b
  1317  000F92  6EFE               	movwf	tosh,c
  1318  000F94  6AFF               	clrf	tosu,c
  1319  000F96  50FA               	movf	pclath,w,c
  1320  000F98  0012               	return		;indir
  1321  000F9A                     l4711:
  1322                           
  1323                           ;operation.c: 103: (*topDistributionState)();
  1324  000F9A  D801               	call	u3968
  1325  000F9C  D00A               	goto	l4713
  1326  000F9E                     u3968:
  1327  000F9E  0005               	push	
  1328  000FA0  6EFA               	movwf	pclath,c
  1329  000FA2  0100               	movlb	0	; () banked
  1330  000FA4  51CE               	movf	_topDistributionState& (0+255),w,b
  1331  000FA6  6EFD               	movwf	tosl,c
  1332  000FA8  51CF               	movf	(_topDistributionState+1)& (0+255),w,b
  1333  000FAA  6EFE               	movwf	tosh,c
  1334  000FAC  6AFF               	clrf	tosu,c
  1335  000FAE  50FA               	movf	pclath,w,c
  1336  000FB0  0012               	return		;indir
  1337  000FB2                     l4713:
  1338                           
  1339                           ;operation.c: 104: (*bottomDistributionState)();
  1340  000FB2  D801               	call	u3978
  1341  000FB4  D00A               	goto	l4715
  1342  000FB6                     u3978:
  1343  000FB6  0005               	push	
  1344  000FB8  6EFA               	movwf	pclath,c
  1345  000FBA  0100               	movlb	0	; () banked
  1346  000FBC  51CC               	movf	_bottomDistributionState& (0+255),w,b
  1347  000FBE  6EFD               	movwf	tosl,c
  1348  000FC0  51CD               	movf	(_bottomDistributionState+1)& (0+255),w,b
  1349  000FC2  6EFE               	movwf	tosh,c
  1350  000FC4  6AFF               	clrf	tosu,c
  1351  000FC6  50FA               	movf	pclath,w,c
  1352  000FC8  0012               	return		;indir
  1353  000FCA                     l4715:
  1354                           
  1355                           ;operation.c: 106: LATEbits.LATE0 = 0;
  1356  000FCA  908D               	bcf	3981,0,c	;volatile
  1357                           
  1358                           ;operation.c: 107: _delay((unsigned long)((800)*(10000000/4000.0)));
  1359  000FCC  0E0B               	movlw	11
  1360  000FCE  0100               	movlb	0	; () banked
  1361  000FD0  6FA8               	movwf	(??_startSorting+1)& (0+255),b
  1362  000FD2  0E26               	movlw	38
  1363  000FD4  0100               	movlb	0	; () banked
  1364  000FD6  6FA7               	movwf	??_startSorting& (0+255),b
  1365  000FD8  0E5D               	movlw	93
  1366  000FDA                     u4117:
  1367  000FDA  2EE8               	decfsz	wreg,f,c
  1368  000FDC  D7FE               	bra	u4117
  1369  000FDE  2FA7               	decfsz	??_startSorting& (0+255),f,b
  1370  000FE0  D7FC               	bra	u4117
  1371  000FE2  2FA8               	decfsz	(??_startSorting+1)& (0+255),f,b
  1372  000FE4  D7FA               	bra	u4117
  1373  000FE6  D000               	nop2	
  1374                           
  1375                           ;operation.c: 108: LATEbits.LATE0 = 1;
  1376  000FE8  808D               	bsf	3981,0,c	;volatile
  1377                           
  1378                           ;operation.c: 110: (INTCONbits.GIE = 0);
  1379  000FEA  9EF2               	bcf	intcon,7,c	;volatile
  1380                           
  1381                           ;operation.c: 114: if(fsm2>=40){
  1382  000FEC  0100               	movlb	0	; () banked
  1383  000FEE  51C9               	movf	(_fsm2+1)& (0+255),w,b
  1384  000FF0  E105               	bnz	u3980
  1385  000FF2  0E28               	movlw	40
  1386  000FF4  0100               	movlb	0	; () banked
  1387  000FF6  5DC8               	subwf	_fsm2& (0+255),w,b
  1388  000FF8  A0D8               	btfss	status,0,c
  1389  000FFA  D7B6               	goto	l4705
  1390  000FFC                     u3980:
  1391                           
  1392                           ; BSR set to: 0
  1393                           ;operation.c: 117: lcdInst(0b10000000);;
  1394  000FFC  0E80               	movlw	128
  1395  000FFE  ECA3  F00E         	call	_lcdInst
  1396                           
  1397                           ;operation.c: 118: initLCD();
  1398  001002  EC1D  F00C         	call	_initLCD	;wreg free
  1399                           
  1400                           ;operation.c: 119: printf("Complete");
  1401  001006  0EF6               	movlw	low STR_5
  1402  001008  0100               	movlb	0	; () banked
  1403  00100A  6F8E               	movwf	printf@f& (0+255),b
  1404  00100C  0EFF               	movlw	high STR_5
  1405  00100E  0100               	movlb	0	; () banked
  1406  001010  6F8F               	movwf	(printf@f+1)& (0+255),b
  1407  001012  EC09  F000         	call	_printf	;wreg free
  1408                           
  1409                           ;operation.c: 120: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  1410  001016  0E00               	movlw	0
  1411  001018  0100               	movlb	0	; () banked
  1412  00101A  6FA9               	movwf	startSorting@i& (0+255),b
  1413  00101C                     l4731:
  1414                           
  1415                           ; BSR set to: 0
  1416  00101C  0E09               	movlw	9
  1417  00101E  0100               	movlb	0	; () banked
  1418  001020  65A9               	cpfsgt	startSorting@i& (0+255),b
  1419  001022  D001               	goto	l4735
  1420  001024  0012               	return	
  1421  001026                     l4735:
  1422                           
  1423                           ; BSR set to: 0
  1424  001026  0E02               	movlw	2
  1425  001028  0100               	movlb	0	; () banked
  1426  00102A  6FA8               	movwf	(??_startSorting+1)& (0+255),b
  1427  00102C  0E3F               	movlw	63
  1428  00102E  0100               	movlb	0	; () banked
  1429  001030  6FA7               	movwf	??_startSorting& (0+255),b
  1430  001032  0E2B               	movlw	43
  1431  001034                     u4127:
  1432  001034  2EE8               	decfsz	wreg,f,c
  1433  001036  D7FE               	bra	u4127
  1434  001038  2FA7               	decfsz	??_startSorting& (0+255),f,b
  1435  00103A  D7FC               	bra	u4127
  1436  00103C  2FA8               	decfsz	(??_startSorting+1)& (0+255),f,b
  1437  00103E  D7FA               	bra	u4127
  1438  001040  0100               	movlb	0	; () banked
  1439  001042  2BA9               	incf	startSorting@i& (0+255),f,b
  1440  001044  D7EB               	goto	l4731
  1441  001046                     __end_of_startSorting:
  1442                           	opt stack 0
  1443                           tosu	equ	0xFFF
  1444                           tosh	equ	0xFFE
  1445                           tosl	equ	0xFFD
  1446                           pclath	equ	0xFFA
  1447                           intcon	equ	0xFF2
  1448                           intcon3	equ	0xFF0
  1449                           postinc0	equ	0xFEE
  1450                           wreg	equ	0xFE8
  1451                           status	equ	0xFD8
  1452                           
  1453 ;; *************** function _top_rocker_release *****************
  1454 ;; Defined at:
  1455 ;;		line 139 in file "top_rocker_fsm.c"
  1456 ;; Parameters:    Size  Location     Type
  1457 ;;		None
  1458 ;; Auto vars:     Size  Location     Type
  1459 ;;		None
  1460 ;; Return value:  Size  Location     Type
  1461 ;;                  1    wreg      void 
  1462 ;; Registers used:
  1463 ;;		wreg, status,2, status,0, cstack
  1464 ;; Tracked objects:
  1465 ;;		On entry : 0/0
  1466 ;;		On exit  : 0/0
  1467 ;;		Unchanged: 0/0
  1468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1473 ;;Total ram usage:        0 bytes
  1474 ;; Hardware stack levels used:    1
  1475 ;; Hardware stack levels required when called:    6
  1476 ;; This function calls:
  1477 ;;		_top_rocker_motor_ccw
  1478 ;; This function is called by:
  1479 ;;		_solenoids_back
  1480 ;;		_startSorting
  1481 ;; This function uses a non-reentrant model
  1482 ;;
  1483                           
  1484                           	psect	text2
  1485  001CBE                     __ptext2:
  1486                           	opt stack 0
  1487  001CBE                     _top_rocker_release:
  1488                           	opt stack 23
  1489                           
  1490                           ;top_rocker_fsm.c: 142: top_rocker_motor_ccw();
  1491                           
  1492                           ; BSR set to: 0
  1493                           ;incstack = 0
  1494  001CBE  ECA2  F009         	call	_top_rocker_motor_ccw	;wreg free
  1495                           
  1496                           ;top_rocker_fsm.c: 147: topRockerState = top_rocker_restore;
  1497  001CC2  0E00               	movlw	low _top_rocker_restore
  1498  001CC4  0100               	movlb	0	; () banked
  1499  001CC6  6FD0               	movwf	_topRockerState& (0+255),b
  1500  001CC8  0E1D               	movlw	high _top_rocker_restore
  1501  001CCA  0100               	movlb	0	; () banked
  1502  001CCC  6FD1               	movwf	(_topRockerState+1)& (0+255),b
  1503                           
  1504                           ; BSR set to: 0
  1505                           ;top_rocker_fsm.c: 150: start_top_distribution = 1;
  1506  001CCE  0E00               	movlw	0
  1507  001CD0  0100               	movlb	0	; () banked
  1508  001CD2  6FBF               	movwf	(_start_top_distribution+1)& (0+255),b
  1509  001CD4  0E01               	movlw	1
  1510  001CD6  6FBE               	movwf	_start_top_distribution& (0+255),b
  1511  001CD8  0012               	return	
  1512  001CDA                     __end_of_top_rocker_release:
  1513                           	opt stack 0
  1514                           tosu	equ	0xFFF
  1515                           tosh	equ	0xFFE
  1516                           tosl	equ	0xFFD
  1517                           pclath	equ	0xFFA
  1518                           intcon	equ	0xFF2
  1519                           intcon3	equ	0xFF0
  1520                           postinc0	equ	0xFEE
  1521                           wreg	equ	0xFE8
  1522                           status	equ	0xFD8
  1523                           
  1524 ;; *************** function _solenoids_back *****************
  1525 ;; Defined at:
  1526 ;;		line 99 in file "top_rocker_fsm.c"
  1527 ;; Parameters:    Size  Location     Type
  1528 ;;		None
  1529 ;; Auto vars:     Size  Location     Type
  1530 ;;		None
  1531 ;; Return value:  Size  Location     Type
  1532 ;;                  1    wreg      void 
  1533 ;; Registers used:
  1534 ;;		wreg, status,2, status,0, cstack
  1535 ;; Tracked objects:
  1536 ;;		On entry : 0/0
  1537 ;;		On exit  : 0/0
  1538 ;;		Unchanged: 0/0
  1539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1542 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1543 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1544 ;;Total ram usage:        1 bytes
  1545 ;; Hardware stack levels used:    1
  1546 ;; Hardware stack levels required when called:    6
  1547 ;; This function calls:
  1548 ;;		_go_back
  1549 ;; This function is called by:
  1550 ;;		_solenoids_out
  1551 ;;		_startSorting
  1552 ;; This function uses a non-reentrant model
  1553 ;;
  1554                           
  1555                           	psect	text3
  1556  00179A                     __ptext3:
  1557                           	opt stack 0
  1558  00179A                     _solenoids_back:
  1559                           	opt stack 23
  1560                           
  1561                           ;top_rocker_fsm.c: 101: tabed = PORTCbits.RC1;
  1562                           
  1563                           ; BSR set to: 0
  1564                           ;incstack = 0
  1565  00179A  A282               	btfss	3970,1,c	;volatile
  1566  00179C  D004               	goto	u3710
  1567  00179E  0100               	movlb	0	; () banked
  1568  0017A0  6B82               	clrf	??_solenoids_back& (0+255),b
  1569  0017A2  2B82               	incf	??_solenoids_back& (0+255),f,b
  1570  0017A4  D002               	goto	u3718
  1571  0017A6                     u3710:
  1572  0017A6  0100               	movlb	0	; () banked
  1573  0017A8  6B82               	clrf	??_solenoids_back& (0+255),b
  1574  0017AA                     u3718:
  1575  0017AA  0100               	movlb	0	; () banked
  1576  0017AC  5182               	movf	??_solenoids_back& (0+255),w,b
  1577  0017AE  6E41               	movwf	_tabed,c
  1578  0017B0  6A42               	clrf	_tabed+1,c
  1579                           
  1580                           ; BSR set to: 0
  1581                           ;top_rocker_fsm.c: 103: if(tabed){
  1582  0017B2  5041               	movf	_tabed,w,c
  1583  0017B4  1042               	iorwf	_tabed+1,w,c
  1584  0017B6  B4D8               	btfsc	status,2,c
  1585  0017B8  D008               	goto	l4513
  1586                           
  1587                           ; BSR set to: 0
  1588                           ;top_rocker_fsm.c: 104: top_move = 1;
  1589  0017BA  0E00               	movlw	0
  1590  0017BC  6E40               	movwf	_top_move+1,c
  1591  0017BE  0E01               	movlw	1
  1592  0017C0  6E3F               	movwf	_top_move,c
  1593                           
  1594                           ; BSR set to: 0
  1595                           ;top_rocker_fsm.c: 106: pop_can_tab++;
  1596  0017C2  0100               	movlb	0	; () banked
  1597  0017C4  4BC0               	infsnz	_pop_can_tab& (0+255),f,b
  1598  0017C6  2BC1               	incf	(_pop_can_tab+1)& (0+255),f,b
  1599                           
  1600                           ;top_rocker_fsm.c: 116: }else{
  1601  0017C8  D007               	goto	l4517
  1602  0017CA                     l4513:
  1603                           
  1604                           ; BSR set to: 0
  1605                           ;top_rocker_fsm.c: 125: pop_can++;
  1606  0017CA  0100               	movlb	0	; () banked
  1607  0017CC  4BC2               	infsnz	_pop_can& (0+255),f,b
  1608  0017CE  2BC3               	incf	(_pop_can+1)& (0+255),f,b
  1609                           
  1610                           ; BSR set to: 0
  1611                           ;top_rocker_fsm.c: 126: top_move = 0;
  1612  0017D0  0E00               	movlw	0
  1613  0017D2  6E40               	movwf	_top_move+1,c
  1614  0017D4  0E00               	movlw	0
  1615  0017D6  6E3F               	movwf	_top_move,c
  1616  0017D8                     l4517:
  1617                           
  1618                           ; BSR set to: 0
  1619                           ;top_rocker_fsm.c: 127: }
  1620                           ;top_rocker_fsm.c: 130: go_back();
  1621  0017D8  EC10  F00E         	call	_go_back	;wreg free
  1622                           
  1623                           ;top_rocker_fsm.c: 133: topRockerState = top_rocker_release;
  1624  0017DC  0EBE               	movlw	low _top_rocker_release
  1625  0017DE  0100               	movlb	0	; () banked
  1626  0017E0  6FD0               	movwf	_topRockerState& (0+255),b
  1627  0017E2  0E1C               	movlw	high _top_rocker_release
  1628  0017E4  0100               	movlb	0	; () banked
  1629  0017E6  6FD1               	movwf	(_topRockerState+1)& (0+255),b
  1630  0017E8  0012               	return	
  1631  0017EA                     __end_of_solenoids_back:
  1632                           	opt stack 0
  1633                           tosu	equ	0xFFF
  1634                           tosh	equ	0xFFE
  1635                           tosl	equ	0xFFD
  1636                           pclath	equ	0xFFA
  1637                           intcon	equ	0xFF2
  1638                           intcon3	equ	0xFF0
  1639                           postinc0	equ	0xFEE
  1640                           wreg	equ	0xFE8
  1641                           status	equ	0xFD8
  1642                           
  1643 ;; *************** function _solenoids_out *****************
  1644 ;; Defined at:
  1645 ;;		line 89 in file "top_rocker_fsm.c"
  1646 ;; Parameters:    Size  Location     Type
  1647 ;;		None
  1648 ;; Auto vars:     Size  Location     Type
  1649 ;;		None
  1650 ;; Return value:  Size  Location     Type
  1651 ;;                  1    wreg      void 
  1652 ;; Registers used:
  1653 ;;		wreg, status,2, status,0, cstack
  1654 ;; Tracked objects:
  1655 ;;		On entry : 0/0
  1656 ;;		On exit  : 0/0
  1657 ;;		Unchanged: 0/0
  1658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1663 ;;Total ram usage:        0 bytes
  1664 ;; Hardware stack levels used:    1
  1665 ;; Hardware stack levels required when called:    6
  1666 ;; This function calls:
  1667 ;;		_pop_out
  1668 ;; This function is called by:
  1669 ;;		_top_rocker_idle
  1670 ;;		_startSorting
  1671 ;; This function uses a non-reentrant model
  1672 ;;
  1673                           
  1674                           	psect	text4
  1675  001CEE                     __ptext4:
  1676                           	opt stack 0
  1677  001CEE                     _solenoids_out:
  1678                           	opt stack 23
  1679                           
  1680                           ;top_rocker_fsm.c: 92: pop_out();
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;incstack = 0
  1684  001CEE  EC00  F00E         	call	_pop_out	;wreg free
  1685                           
  1686                           ;top_rocker_fsm.c: 94: topRockerState = solenoids_back;
  1687  001CF2  0E9A               	movlw	low _solenoids_back
  1688  001CF4  0100               	movlb	0	; () banked
  1689  001CF6  6FD0               	movwf	_topRockerState& (0+255),b
  1690  001CF8  0E17               	movlw	high _solenoids_back
  1691  001CFA  0100               	movlb	0	; () banked
  1692  001CFC  6FD1               	movwf	(_topRockerState+1)& (0+255),b
  1693  001CFE  0012               	return	
  1694  001D00                     __end_of_solenoids_out:
  1695                           	opt stack 0
  1696                           tosu	equ	0xFFF
  1697                           tosh	equ	0xFFE
  1698                           tosl	equ	0xFFD
  1699                           pclath	equ	0xFFA
  1700                           intcon	equ	0xFF2
  1701                           intcon3	equ	0xFF0
  1702                           postinc0	equ	0xFEE
  1703                           wreg	equ	0xFE8
  1704                           status	equ	0xFD8
  1705                           
  1706 ;; *************** function _top_rocker_idle *****************
  1707 ;; Defined at:
  1708 ;;		line 50 in file "top_rocker_fsm.c"
  1709 ;; Parameters:    Size  Location     Type
  1710 ;;		None
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;		None
  1713 ;; Return value:  Size  Location     Type
  1714 ;;                  1    wreg      void 
  1715 ;; Registers used:
  1716 ;;		wreg, status,2, status,0, cstack
  1717 ;; Tracked objects:
  1718 ;;		On entry : 0/0
  1719 ;;		On exit  : 0/0
  1720 ;;		Unchanged: 0/0
  1721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1726 ;;Total ram usage:        0 bytes
  1727 ;; Hardware stack levels used:    1
  1728 ;; Hardware stack levels required when called:    8
  1729 ;; This function calls:
  1730 ;;		_initLCD
  1731 ;; This function is called by:
  1732 ;;		_top_rocker_initial
  1733 ;;		_top_rocker_restore
  1734 ;;		_startSorting
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           	psect	text5
  1739  001A6C                     __ptext5:
  1740                           	opt stack 0
  1741  001A6C                     _top_rocker_idle:
  1742                           	opt stack 21
  1743                           
  1744                           ;top_rocker_fsm.c: 62: initLCD();
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;incstack = 0
  1748  001A6C  EC1D  F00C         	call	_initLCD	;wreg free
  1749                           
  1750                           ;top_rocker_fsm.c: 63: if( PORTAbits.RA2 == 1){
  1751  001A70  A480               	btfss	3968,2,c	;volatile
  1752  001A72  D004               	goto	l4493
  1753                           
  1754                           ;top_rocker_fsm.c: 65: fsm1++;
  1755  001A74  0100               	movlb	0	; () banked
  1756  001A76  4BBC               	infsnz	_fsm1& (0+255),f,b
  1757  001A78  2BBD               	incf	(_fsm1+1)& (0+255),f,b
  1758                           
  1759                           ;top_rocker_fsm.c: 73: }else{
  1760  001A7A  0012               	return	
  1761  001A7C                     l4493:
  1762                           
  1763                           ;top_rocker_fsm.c: 82: topRockerState = solenoids_out;
  1764  001A7C  0EEE               	movlw	low _solenoids_out
  1765  001A7E  0100               	movlb	0	; () banked
  1766  001A80  6FD0               	movwf	_topRockerState& (0+255),b
  1767  001A82  0E1C               	movlw	high _solenoids_out
  1768  001A84  0100               	movlb	0	; () banked
  1769  001A86  6FD1               	movwf	(_topRockerState+1)& (0+255),b
  1770                           
  1771                           ; BSR set to: 0
  1772                           ;top_rocker_fsm.c: 83: fsm1 = 0;
  1773  001A88  0E00               	movlw	0
  1774  001A8A  0100               	movlb	0	; () banked
  1775  001A8C  6FBD               	movwf	(_fsm1+1)& (0+255),b
  1776  001A8E  0E00               	movlw	0
  1777  001A90  6FBC               	movwf	_fsm1& (0+255),b
  1778                           
  1779                           ; BSR set to: 0
  1780  001A92  0012               	return	
  1781  001A94                     __end_of_top_rocker_idle:
  1782                           	opt stack 0
  1783                           tosu	equ	0xFFF
  1784                           tosh	equ	0xFFE
  1785                           tosl	equ	0xFFD
  1786                           pclath	equ	0xFFA
  1787                           intcon	equ	0xFF2
  1788                           intcon3	equ	0xFF0
  1789                           postinc0	equ	0xFEE
  1790                           wreg	equ	0xFE8
  1791                           status	equ	0xFD8
  1792                           
  1793 ;; *************** function _top_rocker_restore *****************
  1794 ;; Defined at:
  1795 ;;		line 155 in file "top_rocker_fsm.c"
  1796 ;; Parameters:    Size  Location     Type
  1797 ;;		None
  1798 ;; Auto vars:     Size  Location     Type
  1799 ;;		None
  1800 ;; Return value:  Size  Location     Type
  1801 ;;                  1    wreg      void 
  1802 ;; Registers used:
  1803 ;;		wreg, status,2, status,0, cstack
  1804 ;; Tracked objects:
  1805 ;;		On entry : 0/0
  1806 ;;		On exit  : 0/0
  1807 ;;		Unchanged: 0/0
  1808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1813 ;;Total ram usage:        0 bytes
  1814 ;; Hardware stack levels used:    1
  1815 ;; Hardware stack levels required when called:    6
  1816 ;; This function calls:
  1817 ;;		_top_rocker_motor_cw
  1818 ;; This function is called by:
  1819 ;;		_top_rocker_release
  1820 ;;		_startSorting
  1821 ;; This function uses a non-reentrant model
  1822 ;;
  1823                           
  1824                           	psect	text6
  1825  001D00                     __ptext6:
  1826                           	opt stack 0
  1827  001D00                     _top_rocker_restore:
  1828                           	opt stack 23
  1829                           
  1830                           ;top_rocker_fsm.c: 166: top_rocker_motor_cw();
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;incstack = 0
  1834  001D00  EC4A  F00D         	call	_top_rocker_motor_cw	;wreg free
  1835                           
  1836                           ;top_rocker_fsm.c: 169: topRockerState = top_rocker_idle;
  1837  001D04  0E6C               	movlw	low _top_rocker_idle
  1838  001D06  0100               	movlb	0	; () banked
  1839  001D08  6FD0               	movwf	_topRockerState& (0+255),b
  1840  001D0A  0E1A               	movlw	high _top_rocker_idle
  1841  001D0C  0100               	movlb	0	; () banked
  1842  001D0E  6FD1               	movwf	(_topRockerState+1)& (0+255),b
  1843  001D10  0012               	return	
  1844  001D12                     __end_of_top_rocker_restore:
  1845                           	opt stack 0
  1846                           tosu	equ	0xFFF
  1847                           tosh	equ	0xFFE
  1848                           tosl	equ	0xFFD
  1849                           pclath	equ	0xFFA
  1850                           intcon	equ	0xFF2
  1851                           intcon3	equ	0xFF0
  1852                           postinc0	equ	0xFEE
  1853                           wreg	equ	0xFE8
  1854                           status	equ	0xFD8
  1855                           
  1856 ;; *************** function _top_rocker_motor_cw *****************
  1857 ;; Defined at:
  1858 ;;		line 25 in file "motors.c"
  1859 ;; Parameters:    Size  Location     Type
  1860 ;;		None
  1861 ;; Auto vars:     Size  Location     Type
  1862 ;;		None
  1863 ;; Return value:  Size  Location     Type
  1864 ;;                  1    wreg      void 
  1865 ;; Registers used:
  1866 ;;		wreg
  1867 ;; Tracked objects:
  1868 ;;		On entry : 0/0
  1869 ;;		On exit  : 0/0
  1870 ;;		Unchanged: 0/0
  1871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1874 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1875 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1876 ;;Total ram usage:        2 bytes
  1877 ;; Hardware stack levels used:    1
  1878 ;; Hardware stack levels required when called:    5
  1879 ;; This function calls:
  1880 ;;		Nothing
  1881 ;; This function is called by:
  1882 ;;		_top_rocker_restore
  1883 ;; This function uses a non-reentrant model
  1884 ;;
  1885                           
  1886                           	psect	text7
  1887  001A94                     __ptext7:
  1888                           	opt stack 0
  1889  001A94                     _top_rocker_motor_cw:
  1890                           	opt stack 23
  1891                           
  1892                           ;motors.c: 28: LATAbits.LATA0 = 0;
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;incstack = 0
  1896  001A94  9089               	bcf	3977,0,c	;volatile
  1897                           
  1898                           ;motors.c: 29: LATAbits.LATA3 = 1;
  1899  001A96  8689               	bsf	3977,3,c	;volatile
  1900                           
  1901                           ;motors.c: 30: _delay((unsigned long)((500)*(10000000/4000.0)));
  1902  001A98  0E07               	movlw	7
  1903  001A9A  0100               	movlb	0	; () banked
  1904  001A9C  6F81               	movwf	(??_top_rocker_motor_cw+1)& (0+255),b
  1905  001A9E  0E58               	movlw	88
  1906  001AA0  0100               	movlb	0	; () banked
  1907  001AA2  6F80               	movwf	??_top_rocker_motor_cw& (0+255),b
  1908  001AA4  0E59               	movlw	89
  1909  001AA6                     u4137:
  1910  001AA6  2EE8               	decfsz	wreg,f,c
  1911  001AA8  D7FE               	bra	u4137
  1912  001AAA  2F80               	decfsz	??_top_rocker_motor_cw& (0+255),f,b
  1913  001AAC  D7FC               	bra	u4137
  1914  001AAE  2F81               	decfsz	(??_top_rocker_motor_cw+1)& (0+255),f,b
  1915  001AB0  D7FA               	bra	u4137
  1916  001AB2  D000               	nop2	
  1917                           
  1918                           ;motors.c: 33: LATAbits.LATA0 = 0;
  1919  001AB4  9089               	bcf	3977,0,c	;volatile
  1920                           
  1921                           ;motors.c: 34: LATAbits.LATA3 = 0;
  1922  001AB6  9689               	bcf	3977,3,c	;volatile
  1923  001AB8  0012               	return	
  1924  001ABA                     __end_of_top_rocker_motor_cw:
  1925                           	opt stack 0
  1926                           tosu	equ	0xFFF
  1927                           tosh	equ	0xFFE
  1928                           tosl	equ	0xFFD
  1929                           pclath	equ	0xFFA
  1930                           intcon	equ	0xFF2
  1931                           intcon3	equ	0xFF0
  1932                           postinc0	equ	0xFEE
  1933                           wreg	equ	0xFE8
  1934                           status	equ	0xFD8
  1935                           
  1936 ;; *************** function _top_rocker_motor_ccw *****************
  1937 ;; Defined at:
  1938 ;;		line 39 in file "motors.c"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;		None
  1941 ;; Auto vars:     Size  Location     Type
  1942 ;;  j               2    2[BANK0 ] int 
  1943 ;; Return value:  Size  Location     Type
  1944 ;;                  1    wreg      void 
  1945 ;; Registers used:
  1946 ;;		wreg, status,2, status,0
  1947 ;; Tracked objects:
  1948 ;;		On entry : 0/0
  1949 ;;		On exit  : 0/0
  1950 ;;		Unchanged: 0/0
  1951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1953 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1954 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1955 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1956 ;;Total ram usage:        4 bytes
  1957 ;; Hardware stack levels used:    1
  1958 ;; Hardware stack levels required when called:    5
  1959 ;; This function calls:
  1960 ;;		Nothing
  1961 ;; This function is called by:
  1962 ;;		_top_rocker_release
  1963 ;; This function uses a non-reentrant model
  1964 ;;
  1965                           
  1966                           	psect	text8
  1967  001344                     __ptext8:
  1968                           	opt stack 0
  1969  001344                     _top_rocker_motor_ccw:
  1970                           	opt stack 23
  1971                           
  1972                           ;motors.c: 41: int j;
  1973                           ;motors.c: 42: for(j=0;j<=5;j++){
  1974                           
  1975                           ;incstack = 0
  1976  001344  0E00               	movlw	0
  1977  001346  0100               	movlb	0	; () banked
  1978  001348  6F83               	movwf	(top_rocker_motor_ccw@j+1)& (0+255),b
  1979  00134A  0E00               	movlw	0
  1980  00134C  6F82               	movwf	top_rocker_motor_ccw@j& (0+255),b
  1981                           
  1982                           ; BSR set to: 0
  1983  00134E  0100               	movlb	0	; () banked
  1984  001350  BF83               	btfsc	(top_rocker_motor_ccw@j+1)& (0+255),7,b
  1985  001352  D008               	goto	l359
  1986  001354  0100               	movlb	0	; () banked
  1987  001356  5183               	movf	(top_rocker_motor_ccw@j+1)& (0+255),w,b
  1988  001358  E12A               	bnz	l360
  1989  00135A  0E06               	movlw	6
  1990  00135C  0100               	movlb	0	; () banked
  1991  00135E  5D82               	subwf	top_rocker_motor_ccw@j& (0+255),w,b
  1992  001360  B0D8               	btfsc	status,0,c
  1993  001362  D025               	goto	l360
  1994  001364                     l359:
  1995                           
  1996                           ; BSR set to: 0
  1997                           ;motors.c: 44: LATAbits.LATA0 = 1;
  1998  001364  8089               	bsf	3977,0,c	;volatile
  1999                           
  2000                           ;motors.c: 45: LATAbits.LATA3 = 0;
  2001  001366  9689               	bcf	3977,3,c	;volatile
  2002                           
  2003                           ; BSR set to: 0
  2004                           ;motors.c: 46: _delay((unsigned long)((85)*(10000000/4000.0)));
  2005  001368  0E02               	movlw	2
  2006  00136A  0100               	movlb	0	; () banked
  2007  00136C  6F81               	movwf	(??_top_rocker_motor_ccw+1)& (0+255),b
  2008  00136E  0E14               	movlw	20
  2009  001370  0100               	movlb	0	; () banked
  2010  001372  6F80               	movwf	??_top_rocker_motor_ccw& (0+255),b
  2011  001374  0EF6               	movlw	246
  2012  001376                     u4147:
  2013  001376  2EE8               	decfsz	wreg,f,c
  2014  001378  D7FE               	bra	u4147
  2015  00137A  2F80               	decfsz	??_top_rocker_motor_ccw& (0+255),f,b
  2016  00137C  D7FC               	bra	u4147
  2017  00137E  2F81               	decfsz	(??_top_rocker_motor_ccw+1)& (0+255),f,b
  2018  001380  D7FA               	bra	u4147
  2019  001382  F000               	nop	
  2020                           
  2021                           ;motors.c: 49: LATAbits.LATA0 = 0;
  2022  001384  9089               	bcf	3977,0,c	;volatile
  2023                           
  2024                           ;motors.c: 50: LATAbits.LATA3 = 0;
  2025  001386  9689               	bcf	3977,3,c	;volatile
  2026                           
  2027                           ;motors.c: 51: _delay((unsigned long)((10)*(10000000/4000.0)));
  2028  001388  0E21               	movlw	33
  2029  00138A  0100               	movlb	0	; () banked
  2030  00138C  6F80               	movwf	??_top_rocker_motor_ccw& (0+255),b
  2031  00138E  0E76               	movlw	118
  2032  001390                     u4157:
  2033  001390  2EE8               	decfsz	wreg,f,c
  2034  001392  D7FE               	bra	u4157
  2035  001394  2F80               	decfsz	??_top_rocker_motor_ccw& (0+255),f,b
  2036  001396  D7FC               	bra	u4157
  2037  001398  F000               	nop	
  2038  00139A  0100               	movlb	0	; () banked
  2039  00139C  4B82               	infsnz	top_rocker_motor_ccw@j& (0+255),f,b
  2040  00139E  2B83               	incf	(top_rocker_motor_ccw@j+1)& (0+255),f,b
  2041  0013A0  0100               	movlb	0	; () banked
  2042  0013A2  BF83               	btfsc	(top_rocker_motor_ccw@j+1)& (0+255),7,b
  2043  0013A4  D7DF               	goto	l359
  2044  0013A6  0100               	movlb	0	; () banked
  2045  0013A8  5183               	movf	(top_rocker_motor_ccw@j+1)& (0+255),w,b
  2046  0013AA  E101               	bnz	u3590
  2047  0013AC  D7D6               	goto	L1
  2048  0013AE                     u3590:
  2049  0013AE                     l360:
  2050                           
  2051                           ; BSR set to: 0
  2052                           ;motors.c: 52: }
  2053                           ;motors.c: 53: LATAbits.LATA0 = 0;
  2054  0013AE  9089               	bcf	3977,0,c	;volatile
  2055                           
  2056                           ;motors.c: 54: LATAbits.LATA3 = 0;
  2057  0013B0  9689               	bcf	3977,3,c	;volatile
  2058                           
  2059                           ; BSR set to: 0
  2060                           
  2061                           ;motors.c: 57: return;
  2062  0013B2  0012               	return		;funcret
  2063  0013B4                     __end_of_top_rocker_motor_ccw:
  2064                           	opt stack 0
  2065                           tosu	equ	0xFFF
  2066                           tosh	equ	0xFFE
  2067                           tosl	equ	0xFFD
  2068                           pclath	equ	0xFFA
  2069                           intcon	equ	0xFF2
  2070                           intcon3	equ	0xFF0
  2071                           postinc0	equ	0xFEE
  2072                           wreg	equ	0xFE8
  2073                           status	equ	0xFD8
  2074                           
  2075 ;; *************** function _top_distribution_move *****************
  2076 ;; Defined at:
  2077 ;;		line 81 in file "top_distribution_fsm.c"
  2078 ;; Parameters:    Size  Location     Type
  2079 ;;		None
  2080 ;; Auto vars:     Size  Location     Type
  2081 ;;		None
  2082 ;; Return value:  Size  Location     Type
  2083 ;;                  1    wreg      void 
  2084 ;; Registers used:
  2085 ;;		wreg, status,2, status,0, cstack
  2086 ;; Tracked objects:
  2087 ;;		On entry : 0/0
  2088 ;;		On exit  : 0/0
  2089 ;;		Unchanged: 0/0
  2090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2095 ;;Total ram usage:        0 bytes
  2096 ;; Hardware stack levels used:    1
  2097 ;; Hardware stack levels required when called:    6
  2098 ;; This function calls:
  2099 ;;		_top_distribution_motor_ccw
  2100 ;;		_top_distribution_motor_cw
  2101 ;; This function is called by:
  2102 ;;		_top_distribution_prepare
  2103 ;;		_startSorting
  2104 ;; This function uses a non-reentrant model
  2105 ;;
  2106                           
  2107                           	psect	text9
  2108  001BC0                     __ptext9:
  2109                           	opt stack 0
  2110  001BC0                     _top_distribution_move:
  2111                           	opt stack 23
  2112                           
  2113                           ;top_distribution_fsm.c: 85: if(top_move == 1){
  2114                           
  2115                           ; BSR set to: 0
  2116                           ;incstack = 0
  2117  001BC0  043F               	decf	_top_move,w,c
  2118  001BC2  1040               	iorwf	_top_move+1,w,c
  2119  001BC4  A4D8               	btfss	status,2,c
  2120  001BC6  D003               	goto	l4561
  2121                           
  2122                           ;top_distribution_fsm.c: 86: top_distribution_motor_ccw();
  2123  001BC8  EC70  F00D         	call	_top_distribution_motor_ccw	;wreg free
  2124                           
  2125                           ;top_distribution_fsm.c: 96: }else{
  2126  001BCC  D002               	goto	l4563
  2127  001BCE                     l4561:
  2128                           
  2129                           ;top_distribution_fsm.c: 97: top_distribution_motor_cw();
  2130  001BCE  EC5D  F00D         	call	_top_distribution_motor_cw	;wreg free
  2131  001BD2                     l4563:
  2132                           
  2133                           ;top_distribution_fsm.c: 108: }
  2134                           ;top_distribution_fsm.c: 111: topDistributionState = top_distribution_idle;
  2135  001BD2  0EB6               	movlw	low _top_distribution_idle
  2136  001BD4  0100               	movlb	0	; () banked
  2137  001BD6  6FCE               	movwf	_topDistributionState& (0+255),b
  2138  001BD8  0E19               	movlw	high _top_distribution_idle
  2139  001BDA  0100               	movlb	0	; () banked
  2140  001BDC  6FCF               	movwf	(_topDistributionState+1)& (0+255),b
  2141  001BDE  0012               	return	
  2142  001BE0                     __end_of_top_distribution_move:
  2143                           	opt stack 0
  2144                           tosu	equ	0xFFF
  2145                           tosh	equ	0xFFE
  2146                           tosl	equ	0xFFD
  2147                           pclath	equ	0xFFA
  2148                           intcon	equ	0xFF2
  2149                           intcon3	equ	0xFF0
  2150                           postinc0	equ	0xFEE
  2151                           wreg	equ	0xFE8
  2152                           status	equ	0xFD8
  2153                           
  2154 ;; *************** function _top_distribution_idle *****************
  2155 ;; Defined at:
  2156 ;;		line 35 in file "top_distribution_fsm.c"
  2157 ;; Parameters:    Size  Location     Type
  2158 ;;		None
  2159 ;; Auto vars:     Size  Location     Type
  2160 ;;		None
  2161 ;; Return value:  Size  Location     Type
  2162 ;;                  1    wreg      void 
  2163 ;; Registers used:
  2164 ;;		wreg, status,2, status,0
  2165 ;; Tracked objects:
  2166 ;;		On entry : 0/0
  2167 ;;		On exit  : 0/0
  2168 ;;		Unchanged: 0/0
  2169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2174 ;;Total ram usage:        0 bytes
  2175 ;; Hardware stack levels used:    1
  2176 ;; Hardware stack levels required when called:    5
  2177 ;; This function calls:
  2178 ;;		Nothing
  2179 ;; This function is called by:
  2180 ;;		_top_distribution_initial
  2181 ;;		_top_distribution_move
  2182 ;;		_startSorting
  2183 ;; This function uses a non-reentrant model
  2184 ;;
  2185                           
  2186                           	psect	text10
  2187  0019B6                     __ptext10:
  2188                           	opt stack 0
  2189  0019B6                     _top_distribution_idle:
  2190                           	opt stack 24
  2191                           
  2192                           ;top_distribution_fsm.c: 38: if(start_top_distribution==1){
  2193                           
  2194                           ; BSR set to: 0
  2195                           ;incstack = 0
  2196  0019B6  0100               	movlb	0	; () banked
  2197  0019B8  05BE               	decf	_start_top_distribution& (0+255),w,b
  2198  0019BA  0100               	movlb	0	; () banked
  2199  0019BC  11BF               	iorwf	(_start_top_distribution+1)& (0+255),w,b
  2200  0019BE  A4D8               	btfss	status,2,c
  2201  0019C0  D00C               	goto	l4543
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;top_distribution_fsm.c: 40: topDistributionState = top_distribution_prepare;
  2205  0019C2  0EE0               	movlw	low _top_distribution_prepare
  2206  0019C4  0100               	movlb	0	; () banked
  2207  0019C6  6FCE               	movwf	_topDistributionState& (0+255),b
  2208  0019C8  0E1B               	movlw	high _top_distribution_prepare
  2209  0019CA  0100               	movlb	0	; () banked
  2210  0019CC  6FCF               	movwf	(_topDistributionState+1)& (0+255),b
  2211                           
  2212                           ; BSR set to: 0
  2213                           ;top_distribution_fsm.c: 41: start_top_distribution = 0;
  2214  0019CE  0E00               	movlw	0
  2215  0019D0  0100               	movlb	0	; () banked
  2216  0019D2  6FBF               	movwf	(_start_top_distribution+1)& (0+255),b
  2217  0019D4  0E00               	movlw	0
  2218  0019D6  6FBE               	movwf	_start_top_distribution& (0+255),b
  2219                           
  2220                           ;top_distribution_fsm.c: 42: }else{
  2221  0019D8  0012               	return	
  2222  0019DA                     l4543:
  2223                           
  2224                           ; BSR set to: 0
  2225                           ;top_distribution_fsm.c: 43: topDistributionState = top_distribution_idle;
  2226  0019DA  0EB6               	movlw	low _top_distribution_idle
  2227  0019DC  0100               	movlb	0	; () banked
  2228  0019DE  6FCE               	movwf	_topDistributionState& (0+255),b
  2229  0019E0  0E19               	movlw	high _top_distribution_idle
  2230  0019E2  0100               	movlb	0	; () banked
  2231  0019E4  6FCF               	movwf	(_topDistributionState+1)& (0+255),b
  2232                           
  2233                           ; BSR set to: 0
  2234  0019E6  0012               	return	
  2235  0019E8                     __end_of_top_distribution_idle:
  2236                           	opt stack 0
  2237                           tosu	equ	0xFFF
  2238                           tosh	equ	0xFFE
  2239                           tosl	equ	0xFFD
  2240                           pclath	equ	0xFFA
  2241                           intcon	equ	0xFF2
  2242                           intcon3	equ	0xFF0
  2243                           postinc0	equ	0xFEE
  2244                           wreg	equ	0xFE8
  2245                           status	equ	0xFD8
  2246                           
  2247 ;; *************** function _top_distribution_prepare *****************
  2248 ;; Defined at:
  2249 ;;		line 49 in file "top_distribution_fsm.c"
  2250 ;; Parameters:    Size  Location     Type
  2251 ;;		None
  2252 ;; Auto vars:     Size  Location     Type
  2253 ;;		None
  2254 ;; Return value:  Size  Location     Type
  2255 ;;                  1    wreg      void 
  2256 ;; Registers used:
  2257 ;;		wreg, status,2, status,0, cstack
  2258 ;; Tracked objects:
  2259 ;;		On entry : 0/0
  2260 ;;		On exit  : 0/0
  2261 ;;		Unchanged: 0/0
  2262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2267 ;;Total ram usage:        0 bytes
  2268 ;; Hardware stack levels used:    1
  2269 ;; Hardware stack levels required when called:    6
  2270 ;; This function calls:
  2271 ;;		_top_distribution_motor_ccw
  2272 ;;		_top_distribution_motor_cw
  2273 ;; This function is called by:
  2274 ;;		_top_distribution_idle
  2275 ;;		_startSorting
  2276 ;; This function uses a non-reentrant model
  2277 ;;
  2278                           
  2279                           	psect	text11
  2280  001BE0                     __ptext11:
  2281                           	opt stack 0
  2282  001BE0                     _top_distribution_prepare:
  2283                           	opt stack 23
  2284                           
  2285                           ;top_distribution_fsm.c: 52: if(top_move == 1){
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;incstack = 0
  2289  001BE0  043F               	decf	_top_move,w,c
  2290  001BE2  1040               	iorwf	_top_move+1,w,c
  2291  001BE4  A4D8               	btfss	status,2,c
  2292  001BE6  D003               	goto	l4551
  2293                           
  2294                           ;top_distribution_fsm.c: 54: top_distribution_motor_cw();
  2295  001BE8  EC5D  F00D         	call	_top_distribution_motor_cw	;wreg free
  2296                           
  2297                           ;top_distribution_fsm.c: 62: }else{
  2298  001BEC  D002               	goto	l4553
  2299  001BEE                     l4551:
  2300                           
  2301                           ;top_distribution_fsm.c: 64: top_distribution_motor_ccw();
  2302  001BEE  EC70  F00D         	call	_top_distribution_motor_ccw	;wreg free
  2303  001BF2                     l4553:
  2304                           
  2305                           ;top_distribution_fsm.c: 73: }
  2306                           ;top_distribution_fsm.c: 76: topDistributionState = top_distribution_move;
  2307  001BF2  0EC0               	movlw	low _top_distribution_move
  2308  001BF4  0100               	movlb	0	; () banked
  2309  001BF6  6FCE               	movwf	_topDistributionState& (0+255),b
  2310  001BF8  0E1B               	movlw	high _top_distribution_move
  2311  001BFA  0100               	movlb	0	; () banked
  2312  001BFC  6FCF               	movwf	(_topDistributionState+1)& (0+255),b
  2313  001BFE  0012               	return	
  2314  001C00                     __end_of_top_distribution_prepare:
  2315                           	opt stack 0
  2316                           tosu	equ	0xFFF
  2317                           tosh	equ	0xFFE
  2318                           tosl	equ	0xFFD
  2319                           pclath	equ	0xFFA
  2320                           intcon	equ	0xFF2
  2321                           intcon3	equ	0xFF0
  2322                           postinc0	equ	0xFEE
  2323                           wreg	equ	0xFE8
  2324                           status	equ	0xFD8
  2325                           
  2326 ;; *************** function _top_distribution_motor_cw *****************
  2327 ;; Defined at:
  2328 ;;		line 109 in file "motors.c"
  2329 ;; Parameters:    Size  Location     Type
  2330 ;;		None
  2331 ;; Auto vars:     Size  Location     Type
  2332 ;;		None
  2333 ;; Return value:  Size  Location     Type
  2334 ;;                  1    wreg      void 
  2335 ;; Registers used:
  2336 ;;		wreg
  2337 ;; Tracked objects:
  2338 ;;		On entry : 0/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2344 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2345 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2346 ;;Total ram usage:        2 bytes
  2347 ;; Hardware stack levels used:    1
  2348 ;; Hardware stack levels required when called:    5
  2349 ;; This function calls:
  2350 ;;		Nothing
  2351 ;; This function is called by:
  2352 ;;		_top_distribution_prepare
  2353 ;;		_top_distribution_move
  2354 ;; This function uses a non-reentrant model
  2355 ;;
  2356                           
  2357                           	psect	text12
  2358  001ABA                     __ptext12:
  2359                           	opt stack 0
  2360  001ABA                     _top_distribution_motor_cw:
  2361                           	opt stack 23
  2362                           
  2363                           ;motors.c: 112: LATCbits.LATC5 = 0;
  2364                           
  2365                           ; BSR set to: 0
  2366                           ;incstack = 0
  2367  001ABA  9A8B               	bcf	3979,5,c	;volatile
  2368                           
  2369                           ;motors.c: 113: LATCbits.LATC6 = 1;
  2370  001ABC  8C8B               	bsf	3979,6,c	;volatile
  2371                           
  2372                           ;motors.c: 114: _delay((unsigned long)((500)*(10000000/4000.0)));
  2373  001ABE  0E07               	movlw	7
  2374  001AC0  0100               	movlb	0	; () banked
  2375  001AC2  6F81               	movwf	(??_top_distribution_motor_cw+1)& (0+255),b
  2376  001AC4  0E58               	movlw	88
  2377  001AC6  0100               	movlb	0	; () banked
  2378  001AC8  6F80               	movwf	??_top_distribution_motor_cw& (0+255),b
  2379  001ACA  0E59               	movlw	89
  2380  001ACC                     u4167:
  2381  001ACC  2EE8               	decfsz	wreg,f,c
  2382  001ACE  D7FE               	bra	u4167
  2383  001AD0  2F80               	decfsz	??_top_distribution_motor_cw& (0+255),f,b
  2384  001AD2  D7FC               	bra	u4167
  2385  001AD4  2F81               	decfsz	(??_top_distribution_motor_cw+1)& (0+255),f,b
  2386  001AD6  D7FA               	bra	u4167
  2387  001AD8  D000               	nop2	
  2388                           
  2389                           ;motors.c: 117: LATCbits.LATC5 = 0;
  2390  001ADA  9A8B               	bcf	3979,5,c	;volatile
  2391                           
  2392                           ;motors.c: 118: LATCbits.LATC6 = 0;
  2393  001ADC  9C8B               	bcf	3979,6,c	;volatile
  2394  001ADE  0012               	return	
  2395  001AE0                     __end_of_top_distribution_motor_cw:
  2396                           	opt stack 0
  2397                           tosu	equ	0xFFF
  2398                           tosh	equ	0xFFE
  2399                           tosl	equ	0xFFD
  2400                           pclath	equ	0xFFA
  2401                           intcon	equ	0xFF2
  2402                           intcon3	equ	0xFF0
  2403                           postinc0	equ	0xFEE
  2404                           wreg	equ	0xFE8
  2405                           status	equ	0xFD8
  2406                           
  2407 ;; *************** function _top_distribution_motor_ccw *****************
  2408 ;; Defined at:
  2409 ;;		line 95 in file "motors.c"
  2410 ;; Parameters:    Size  Location     Type
  2411 ;;		None
  2412 ;; Auto vars:     Size  Location     Type
  2413 ;;		None
  2414 ;; Return value:  Size  Location     Type
  2415 ;;                  1    wreg      void 
  2416 ;; Registers used:
  2417 ;;		wreg
  2418 ;; Tracked objects:
  2419 ;;		On entry : 0/0
  2420 ;;		On exit  : 0/0
  2421 ;;		Unchanged: 0/0
  2422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2425 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2426 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2427 ;;Total ram usage:        2 bytes
  2428 ;; Hardware stack levels used:    1
  2429 ;; Hardware stack levels required when called:    5
  2430 ;; This function calls:
  2431 ;;		Nothing
  2432 ;; This function is called by:
  2433 ;;		_top_distribution_prepare
  2434 ;;		_top_distribution_move
  2435 ;; This function uses a non-reentrant model
  2436 ;;
  2437                           
  2438                           	psect	text13
  2439  001AE0                     __ptext13:
  2440                           	opt stack 0
  2441  001AE0                     _top_distribution_motor_ccw:
  2442                           	opt stack 23
  2443                           
  2444                           ;motors.c: 98: LATCbits.LATC5 = 1;
  2445                           
  2446                           ;incstack = 0
  2447  001AE0  8A8B               	bsf	3979,5,c	;volatile
  2448                           
  2449                           ;motors.c: 99: LATCbits.LATC6 = 0;
  2450  001AE2  9C8B               	bcf	3979,6,c	;volatile
  2451                           
  2452                           ;motors.c: 100: _delay((unsigned long)((500)*(10000000/4000.0)));
  2453  001AE4  0E07               	movlw	7
  2454  001AE6  0100               	movlb	0	; () banked
  2455  001AE8  6F81               	movwf	(??_top_distribution_motor_ccw+1)& (0+255),b
  2456  001AEA  0E58               	movlw	88
  2457  001AEC  0100               	movlb	0	; () banked
  2458  001AEE  6F80               	movwf	??_top_distribution_motor_ccw& (0+255),b
  2459  001AF0  0E59               	movlw	89
  2460  001AF2                     u4177:
  2461  001AF2  2EE8               	decfsz	wreg,f,c
  2462  001AF4  D7FE               	bra	u4177
  2463  001AF6  2F80               	decfsz	??_top_distribution_motor_ccw& (0+255),f,b
  2464  001AF8  D7FC               	bra	u4177
  2465  001AFA  2F81               	decfsz	(??_top_distribution_motor_ccw+1)& (0+255),f,b
  2466  001AFC  D7FA               	bra	u4177
  2467  001AFE  D000               	nop2	
  2468                           
  2469                           ;motors.c: 103: LATCbits.LATC5 = 0;
  2470  001B00  9A8B               	bcf	3979,5,c	;volatile
  2471                           
  2472                           ;motors.c: 104: LATCbits.LATC6 = 0;
  2473  001B02  9C8B               	bcf	3979,6,c	;volatile
  2474  001B04  0012               	return	
  2475  001B06                     __end_of_top_distribution_motor_ccw:
  2476                           	opt stack 0
  2477                           tosu	equ	0xFFF
  2478                           tosh	equ	0xFFE
  2479                           tosl	equ	0xFFD
  2480                           pclath	equ	0xFFA
  2481                           intcon	equ	0xFF2
  2482                           intcon3	equ	0xFF0
  2483                           postinc0	equ	0xFEE
  2484                           wreg	equ	0xFE8
  2485                           status	equ	0xFD8
  2486                           
  2487 ;; *************** function _pop_out *****************
  2488 ;; Defined at:
  2489 ;;		line 25 in file "solenoids.c"
  2490 ;; Parameters:    Size  Location     Type
  2491 ;;		None
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;		None
  2494 ;; Return value:  Size  Location     Type
  2495 ;;                  1    wreg      void 
  2496 ;; Registers used:
  2497 ;;		wreg
  2498 ;; Tracked objects:
  2499 ;;		On entry : 0/0
  2500 ;;		On exit  : 0/0
  2501 ;;		Unchanged: 0/0
  2502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2505 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2506 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2507 ;;Total ram usage:        2 bytes
  2508 ;; Hardware stack levels used:    1
  2509 ;; Hardware stack levels required when called:    5
  2510 ;; This function calls:
  2511 ;;		Nothing
  2512 ;; This function is called by:
  2513 ;;		_solenoids_out
  2514 ;; This function uses a non-reentrant model
  2515 ;;
  2516                           
  2517                           	psect	text14
  2518  001C00                     __ptext14:
  2519                           	opt stack 0
  2520  001C00                     _pop_out:
  2521                           	opt stack 23
  2522                           
  2523                           ;solenoids.c: 27: LATDbits.LATD0 = 0;
  2524                           
  2525                           ;incstack = 0
  2526  001C00  908C               	bcf	3980,0,c	;volatile
  2527                           
  2528                           ;solenoids.c: 28: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2529  001C02  0E0D               	movlw	13
  2530  001C04  0100               	movlb	0	; () banked
  2531  001C06  6F81               	movwf	(??_pop_out+1)& (0+255),b
  2532  001C08  0EAF               	movlw	175
  2533  001C0A  0100               	movlb	0	; () banked
  2534  001C0C  6F80               	movwf	??_pop_out& (0+255),b
  2535  001C0E  0EB6               	movlw	182
  2536  001C10                     u4187:
  2537  001C10  2EE8               	decfsz	wreg,f,c
  2538  001C12  D7FE               	bra	u4187
  2539  001C14  2F80               	decfsz	??_pop_out& (0+255),f,b
  2540  001C16  D7FC               	bra	u4187
  2541  001C18  2F81               	decfsz	(??_pop_out+1)& (0+255),f,b
  2542  001C1A  D7FA               	bra	u4187
  2543  001C1C  F000               	nop	
  2544  001C1E  0012               	return	
  2545  001C20                     __end_of_pop_out:
  2546                           	opt stack 0
  2547                           tosu	equ	0xFFF
  2548                           tosh	equ	0xFFE
  2549                           tosl	equ	0xFFD
  2550                           pclath	equ	0xFFA
  2551                           intcon	equ	0xFF2
  2552                           intcon3	equ	0xFF0
  2553                           postinc0	equ	0xFEE
  2554                           wreg	equ	0xFE8
  2555                           status	equ	0xFD8
  2556                           
  2557 ;; *************** function _go_back *****************
  2558 ;; Defined at:
  2559 ;;		line 32 in file "solenoids.c"
  2560 ;; Parameters:    Size  Location     Type
  2561 ;;		None
  2562 ;; Auto vars:     Size  Location     Type
  2563 ;;		None
  2564 ;; Return value:  Size  Location     Type
  2565 ;;                  1    wreg      void 
  2566 ;; Registers used:
  2567 ;;		wreg
  2568 ;; Tracked objects:
  2569 ;;		On entry : 0/0
  2570 ;;		On exit  : 0/0
  2571 ;;		Unchanged: 0/0
  2572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2575 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2576 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2577 ;;Total ram usage:        2 bytes
  2578 ;; Hardware stack levels used:    1
  2579 ;; Hardware stack levels required when called:    5
  2580 ;; This function calls:
  2581 ;;		Nothing
  2582 ;; This function is called by:
  2583 ;;		_solenoids_back
  2584 ;; This function uses a non-reentrant model
  2585 ;;
  2586                           
  2587                           	psect	text15
  2588  001C20                     __ptext15:
  2589                           	opt stack 0
  2590  001C20                     _go_back:
  2591                           	opt stack 23
  2592                           
  2593                           ;solenoids.c: 34: LATDbits.LATD0 = 1;
  2594                           
  2595                           ;incstack = 0
  2596  001C20  808C               	bsf	3980,0,c	;volatile
  2597                           
  2598                           ;solenoids.c: 35: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2599  001C22  0E0D               	movlw	13
  2600  001C24  0100               	movlb	0	; () banked
  2601  001C26  6F81               	movwf	(??_go_back+1)& (0+255),b
  2602  001C28  0EAF               	movlw	175
  2603  001C2A  0100               	movlb	0	; () banked
  2604  001C2C  6F80               	movwf	??_go_back& (0+255),b
  2605  001C2E  0EB6               	movlw	182
  2606  001C30                     u4197:
  2607  001C30  2EE8               	decfsz	wreg,f,c
  2608  001C32  D7FE               	bra	u4197
  2609  001C34  2F80               	decfsz	??_go_back& (0+255),f,b
  2610  001C36  D7FC               	bra	u4197
  2611  001C38  2F81               	decfsz	(??_go_back+1)& (0+255),f,b
  2612  001C3A  D7FA               	bra	u4197
  2613  001C3C  F000               	nop	
  2614  001C3E  0012               	return	
  2615  001C40                     __end_of_go_back:
  2616                           	opt stack 0
  2617                           tosu	equ	0xFFF
  2618                           tosh	equ	0xFFE
  2619                           tosl	equ	0xFFD
  2620                           pclath	equ	0xFFA
  2621                           intcon	equ	0xFF2
  2622                           intcon3	equ	0xFF0
  2623                           postinc0	equ	0xFEE
  2624                           wreg	equ	0xFE8
  2625                           status	equ	0xFD8
  2626                           
  2627 ;; *************** function _initialization *****************
  2628 ;; Defined at:
  2629 ;;		line 157 in file "operation.c"
  2630 ;; Parameters:    Size  Location     Type
  2631 ;;		None
  2632 ;; Auto vars:     Size  Location     Type
  2633 ;;  i               1   38[BANK0 ] unsigned char 
  2634 ;; Return value:  Size  Location     Type
  2635 ;;                  1    wreg      void 
  2636 ;; Registers used:
  2637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2638 ;; Tracked objects:
  2639 ;;		On entry : 0/0
  2640 ;;		On exit  : 0/0
  2641 ;;		Unchanged: 0/0
  2642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2644 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2645 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2646 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2647 ;;Total ram usage:        3 bytes
  2648 ;; Hardware stack levels used:    1
  2649 ;; Hardware stack levels required when called:    8
  2650 ;; This function calls:
  2651 ;;		_bottom_distribution_initial
  2652 ;;		_bottom_rocker_initial
  2653 ;;		_initLCD
  2654 ;;		_lcdInst
  2655 ;;		_printf
  2656 ;;		_top_distribution_initial
  2657 ;;		_top_rocker_initial
  2658 ;; This function is called by:
  2659 ;;		_startSorting
  2660 ;; This function uses a non-reentrant model
  2661 ;;
  2662                           
  2663                           	psect	text16
  2664  0014FE                     __ptext16:
  2665                           	opt stack 0
  2666  0014FE                     _initialization:
  2667                           	opt stack 21
  2668                           
  2669                           ;operation.c: 161: fsm1 = 0;
  2670                           
  2671                           ;incstack = 0
  2672  0014FE  0E00               	movlw	0
  2673  001500  0100               	movlb	0	; () banked
  2674  001502  6FBD               	movwf	(_fsm1+1)& (0+255),b
  2675  001504  0E00               	movlw	0
  2676  001506  6FBC               	movwf	_fsm1& (0+255),b
  2677                           
  2678                           ; BSR set to: 0
  2679                           ;operation.c: 163: initLCD();
  2680  001508  EC1D  F00C         	call	_initLCD	;wreg free
  2681                           
  2682                           ;operation.c: 164: lcdInst(0b10000000);;
  2683  00150C  0E80               	movlw	128
  2684  00150E  ECA3  F00E         	call	_lcdInst
  2685                           
  2686                           ;operation.c: 165: printf("Initializing");
  2687  001512  0EDC               	movlw	low STR_6
  2688  001514  0100               	movlb	0	; () banked
  2689  001516  6F8E               	movwf	printf@f& (0+255),b
  2690  001518  0EFF               	movlw	high STR_6
  2691  00151A  0100               	movlb	0	; () banked
  2692  00151C  6F8F               	movwf	(printf@f+1)& (0+255),b
  2693  00151E  EC09  F000         	call	_printf	;wreg free
  2694                           
  2695                           ;operation.c: 166: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  2696  001522  0E00               	movlw	0
  2697  001524  0100               	movlb	0	; () banked
  2698  001526  6FA6               	movwf	initialization@i& (0+255),b
  2699  001528                     l4477:
  2700                           
  2701                           ; BSR set to: 0
  2702  001528  0E09               	movlw	9
  2703  00152A  0100               	movlb	0	; () banked
  2704  00152C  65A6               	cpfsgt	initialization@i& (0+255),b
  2705  00152E  D001               	goto	l4481
  2706  001530  D010               	goto	l479
  2707  001532                     l4481:
  2708                           
  2709                           ; BSR set to: 0
  2710  001532  0E02               	movlw	2
  2711  001534  0100               	movlb	0	; () banked
  2712  001536  6FA5               	movwf	(??_initialization+1)& (0+255),b
  2713  001538  0E3F               	movlw	63
  2714  00153A  0100               	movlb	0	; () banked
  2715  00153C  6FA4               	movwf	??_initialization& (0+255),b
  2716  00153E  0E2B               	movlw	43
  2717  001540                     u4207:
  2718  001540  2EE8               	decfsz	wreg,f,c
  2719  001542  D7FE               	bra	u4207
  2720  001544  2FA4               	decfsz	??_initialization& (0+255),f,b
  2721  001546  D7FC               	bra	u4207
  2722  001548  2FA5               	decfsz	(??_initialization+1)& (0+255),f,b
  2723  00154A  D7FA               	bra	u4207
  2724  00154C  0100               	movlb	0	; () banked
  2725  00154E  2BA6               	incf	initialization@i& (0+255),f,b
  2726  001550  D7EB               	goto	l4477
  2727  001552                     l479:
  2728                           
  2729                           ; BSR set to: 0
  2730                           ;operation.c: 169: LATEbits.LATE0 = 1;
  2731  001552  808D               	bsf	3981,0,c	;volatile
  2732                           
  2733                           ; BSR set to: 0
  2734                           ;operation.c: 173: top_rocker_initial();
  2735  001554  ECAB  F00E         	call	_top_rocker_initial	;wreg free
  2736                           
  2737                           ;operation.c: 174: bottom_rocker_initial();
  2738  001558  ECB9  F00E         	call	_bottom_rocker_initial	;wreg free
  2739                           
  2740                           ;operation.c: 177: top_distribution_initial();
  2741  00155C  ECB2  F00E         	call	_top_distribution_initial	;wreg free
  2742                           
  2743                           ;operation.c: 178: bottom_distribution_initial();
  2744  001560  ECC0  F00E         	call	_bottom_distribution_initial	;wreg free
  2745  001564  0012               	return		;funcret
  2746  001566                     __end_of_initialization:
  2747                           	opt stack 0
  2748                           tosu	equ	0xFFF
  2749                           tosh	equ	0xFFE
  2750                           tosl	equ	0xFFD
  2751                           pclath	equ	0xFFA
  2752                           intcon	equ	0xFF2
  2753                           intcon3	equ	0xFF0
  2754                           postinc0	equ	0xFEE
  2755                           wreg	equ	0xFE8
  2756                           status	equ	0xFD8
  2757                           
  2758 ;; *************** function _top_rocker_initial *****************
  2759 ;; Defined at:
  2760 ;;		line 31 in file "top_rocker_fsm.c"
  2761 ;; Parameters:    Size  Location     Type
  2762 ;;		None
  2763 ;; Auto vars:     Size  Location     Type
  2764 ;;		None
  2765 ;; Return value:  Size  Location     Type
  2766 ;;                  1    wreg      void 
  2767 ;; Registers used:
  2768 ;;		wreg, status,2, status,0
  2769 ;; Tracked objects:
  2770 ;;		On entry : 0/0
  2771 ;;		On exit  : 0/0
  2772 ;;		Unchanged: 0/0
  2773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2778 ;;Total ram usage:        0 bytes
  2779 ;; Hardware stack levels used:    1
  2780 ;; Hardware stack levels required when called:    5
  2781 ;; This function calls:
  2782 ;;		Nothing
  2783 ;; This function is called by:
  2784 ;;		_initialization
  2785 ;; This function uses a non-reentrant model
  2786 ;;
  2787                           
  2788                           	psect	text17
  2789  001D56                     __ptext17:
  2790                           	opt stack 0
  2791  001D56                     _top_rocker_initial:
  2792                           	opt stack 23
  2793                           
  2794                           ;top_rocker_fsm.c: 44: topRockerState = top_rocker_idle;
  2795                           
  2796                           ;incstack = 0
  2797  001D56  0E6C               	movlw	low _top_rocker_idle
  2798  001D58  0100               	movlb	0	; () banked
  2799  001D5A  6FD0               	movwf	_topRockerState& (0+255),b
  2800  001D5C  0E1A               	movlw	high _top_rocker_idle
  2801  001D5E  0100               	movlb	0	; () banked
  2802  001D60  6FD1               	movwf	(_topRockerState+1)& (0+255),b
  2803  001D62  0012               	return	
  2804  001D64                     __end_of_top_rocker_initial:
  2805                           	opt stack 0
  2806                           tosu	equ	0xFFF
  2807                           tosh	equ	0xFFE
  2808                           tosl	equ	0xFFD
  2809                           pclath	equ	0xFFA
  2810                           intcon	equ	0xFF2
  2811                           intcon3	equ	0xFF0
  2812                           postinc0	equ	0xFEE
  2813                           wreg	equ	0xFE8
  2814                           status	equ	0xFD8
  2815                           
  2816 ;; *************** function _top_distribution_initial *****************
  2817 ;; Defined at:
  2818 ;;		line 26 in file "top_distribution_fsm.c"
  2819 ;; Parameters:    Size  Location     Type
  2820 ;;		None
  2821 ;; Auto vars:     Size  Location     Type
  2822 ;;		None
  2823 ;; Return value:  Size  Location     Type
  2824 ;;                  1    wreg      void 
  2825 ;; Registers used:
  2826 ;;		wreg, status,2, status,0
  2827 ;; Tracked objects:
  2828 ;;		On entry : 0/0
  2829 ;;		On exit  : 0/0
  2830 ;;		Unchanged: 0/0
  2831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2836 ;;Total ram usage:        0 bytes
  2837 ;; Hardware stack levels used:    1
  2838 ;; Hardware stack levels required when called:    5
  2839 ;; This function calls:
  2840 ;;		Nothing
  2841 ;; This function is called by:
  2842 ;;		_initialization
  2843 ;; This function uses a non-reentrant model
  2844 ;;
  2845                           
  2846                           	psect	text18
  2847  001D64                     __ptext18:
  2848                           	opt stack 0
  2849  001D64                     _top_distribution_initial:
  2850                           	opt stack 23
  2851                           
  2852                           ;top_distribution_fsm.c: 31: topDistributionState = top_distribution_idle;
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;incstack = 0
  2856  001D64  0EB6               	movlw	low _top_distribution_idle
  2857  001D66  0100               	movlb	0	; () banked
  2858  001D68  6FCE               	movwf	_topDistributionState& (0+255),b
  2859  001D6A  0E19               	movlw	high _top_distribution_idle
  2860  001D6C  0100               	movlb	0	; () banked
  2861  001D6E  6FCF               	movwf	(_topDistributionState+1)& (0+255),b
  2862  001D70  0012               	return	
  2863  001D72                     __end_of_top_distribution_initial:
  2864                           	opt stack 0
  2865                           tosu	equ	0xFFF
  2866                           tosh	equ	0xFFE
  2867                           tosl	equ	0xFFD
  2868                           pclath	equ	0xFFA
  2869                           intcon	equ	0xFF2
  2870                           intcon3	equ	0xFF0
  2871                           postinc0	equ	0xFEE
  2872                           wreg	equ	0xFE8
  2873                           status	equ	0xFD8
  2874                           
  2875 ;; *************** function _bottom_rocker_initial *****************
  2876 ;; Defined at:
  2877 ;;		line 31 in file "bottom_rocker_fsm.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;		None
  2880 ;; Auto vars:     Size  Location     Type
  2881 ;;		None
  2882 ;; Return value:  Size  Location     Type
  2883 ;;                  1    wreg      void 
  2884 ;; Registers used:
  2885 ;;		wreg, status,2, status,0
  2886 ;; Tracked objects:
  2887 ;;		On entry : 0/0
  2888 ;;		On exit  : 0/0
  2889 ;;		Unchanged: 0/0
  2890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2895 ;;Total ram usage:        0 bytes
  2896 ;; Hardware stack levels used:    1
  2897 ;; Hardware stack levels required when called:    5
  2898 ;; This function calls:
  2899 ;;		Nothing
  2900 ;; This function is called by:
  2901 ;;		_initialization
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           	psect	text19
  2906  001D72                     __ptext19:
  2907                           	opt stack 0
  2908  001D72                     _bottom_rocker_initial:
  2909                           	opt stack 23
  2910                           
  2911                           ;bottom_rocker_fsm.c: 38: bottomRockerState = bottom_rocker_idle;
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;incstack = 0
  2915  001D72  0E94               	movlw	low _bottom_rocker_idle
  2916  001D74  0100               	movlb	0	; () banked
  2917  001D76  6FCA               	movwf	_bottomRockerState& (0+255),b
  2918  001D78  0E14               	movlw	high _bottom_rocker_idle
  2919  001D7A  0100               	movlb	0	; () banked
  2920  001D7C  6FCB               	movwf	(_bottomRockerState+1)& (0+255),b
  2921  001D7E  0012               	return	
  2922  001D80                     __end_of_bottom_rocker_initial:
  2923                           	opt stack 0
  2924                           tosu	equ	0xFFF
  2925                           tosh	equ	0xFFE
  2926                           tosl	equ	0xFFD
  2927                           pclath	equ	0xFFA
  2928                           intcon	equ	0xFF2
  2929                           intcon3	equ	0xFF0
  2930                           postinc0	equ	0xFEE
  2931                           wreg	equ	0xFE8
  2932                           status	equ	0xFD8
  2933                           
  2934 ;; *************** function _bottom_distribution_initial *****************
  2935 ;; Defined at:
  2936 ;;		line 28 in file "bottom_distribution_fsm.c"
  2937 ;; Parameters:    Size  Location     Type
  2938 ;;		None
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;		None
  2941 ;; Return value:  Size  Location     Type
  2942 ;;                  1    wreg      void 
  2943 ;; Registers used:
  2944 ;;		wreg, status,2, status,0
  2945 ;; Tracked objects:
  2946 ;;		On entry : 0/0
  2947 ;;		On exit  : 0/0
  2948 ;;		Unchanged: 0/0
  2949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2954 ;;Total ram usage:        0 bytes
  2955 ;; Hardware stack levels used:    1
  2956 ;; Hardware stack levels required when called:    5
  2957 ;; This function calls:
  2958 ;;		Nothing
  2959 ;; This function is called by:
  2960 ;;		_initialization
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964                           	psect	text20
  2965  001D80                     __ptext20:
  2966                           	opt stack 0
  2967  001D80                     _bottom_distribution_initial:
  2968                           	opt stack 23
  2969                           
  2970                           ;bottom_distribution_fsm.c: 41: bottomDistributionState = bottom_distribution_idle;
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;incstack = 0
  2974  001D80  0E16               	movlw	low _bottom_distribution_idle
  2975  001D82  0100               	movlb	0	; () banked
  2976  001D84  6FCC               	movwf	_bottomDistributionState& (0+255),b
  2977  001D86  0E1A               	movlw	high _bottom_distribution_idle
  2978  001D88  0100               	movlb	0	; () banked
  2979  001D8A  6FCD               	movwf	(_bottomDistributionState+1)& (0+255),b
  2980  001D8C  0012               	return	
  2981  001D8E                     __end_of_bottom_distribution_initial:
  2982                           	opt stack 0
  2983                           tosu	equ	0xFFF
  2984                           tosh	equ	0xFFE
  2985                           tosl	equ	0xFFD
  2986                           pclath	equ	0xFFA
  2987                           intcon	equ	0xFF2
  2988                           intcon3	equ	0xFF0
  2989                           postinc0	equ	0xFEE
  2990                           wreg	equ	0xFE8
  2991                           status	equ	0xFD8
  2992                           
  2993 ;; *************** function _bottom_rocker_release *****************
  2994 ;; Defined at:
  2995 ;;		line 119 in file "bottom_rocker_fsm.c"
  2996 ;; Parameters:    Size  Location     Type
  2997 ;;		None
  2998 ;; Auto vars:     Size  Location     Type
  2999 ;;		None
  3000 ;; Return value:  Size  Location     Type
  3001 ;;                  1    wreg      void 
  3002 ;; Registers used:
  3003 ;;		wreg, status,2, status,0, cstack
  3004 ;; Tracked objects:
  3005 ;;		On entry : 0/0
  3006 ;;		On exit  : 0/0
  3007 ;;		Unchanged: 0/0
  3008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3013 ;;Total ram usage:        0 bytes
  3014 ;; Hardware stack levels used:    1
  3015 ;; Hardware stack levels required when called:    6
  3016 ;; This function calls:
  3017 ;;		_bottom_rocker_motor_ccw
  3018 ;; This function is called by:
  3019 ;;		_bottom_rocker_idle
  3020 ;;		_startSorting
  3021 ;; This function uses a non-reentrant model
  3022 ;;
  3023                           
  3024                           	psect	text21
  3025  001D12                     __ptext21:
  3026                           	opt stack 0
  3027  001D12                     _bottom_rocker_release:
  3028                           	opt stack 23
  3029                           
  3030                           ;bottom_rocker_fsm.c: 130: bottom_rocker_motor_ccw();
  3031                           
  3032                           ; BSR set to: 0
  3033                           ;incstack = 0
  3034  001D12  ECDA  F009         	call	_bottom_rocker_motor_ccw	;wreg free
  3035                           
  3036                           ;bottom_rocker_fsm.c: 133: bottomRockerState = bottom_rocker_restore;
  3037  001D16  0E24               	movlw	low _bottom_rocker_restore
  3038  001D18  0100               	movlb	0	; () banked
  3039  001D1A  6FCA               	movwf	_bottomRockerState& (0+255),b
  3040  001D1C  0E1D               	movlw	high _bottom_rocker_restore
  3041  001D1E  0100               	movlb	0	; () banked
  3042  001D20  6FCB               	movwf	(_bottomRockerState+1)& (0+255),b
  3043  001D22  0012               	return	
  3044  001D24                     __end_of_bottom_rocker_release:
  3045                           	opt stack 0
  3046                           tosu	equ	0xFFF
  3047                           tosh	equ	0xFFE
  3048                           tosl	equ	0xFFD
  3049                           pclath	equ	0xFFA
  3050                           intcon	equ	0xFF2
  3051                           intcon3	equ	0xFF0
  3052                           postinc0	equ	0xFEE
  3053                           wreg	equ	0xFE8
  3054                           status	equ	0xFD8
  3055                           
  3056 ;; *************** function _bottom_rocker_idle *****************
  3057 ;; Defined at:
  3058 ;;		line 43 in file "bottom_rocker_fsm.c"
  3059 ;; Parameters:    Size  Location     Type
  3060 ;;		None
  3061 ;; Auto vars:     Size  Location     Type
  3062 ;;		None
  3063 ;; Return value:  Size  Location     Type
  3064 ;;                  1    wreg      void 
  3065 ;; Registers used:
  3066 ;;		wreg, status,2, status,0
  3067 ;; Tracked objects:
  3068 ;;		On entry : 0/0
  3069 ;;		On exit  : 0/0
  3070 ;;		Unchanged: 0/0
  3071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3074 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3075 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3076 ;;Total ram usage:        1 bytes
  3077 ;; Hardware stack levels used:    1
  3078 ;; Hardware stack levels required when called:    5
  3079 ;; This function calls:
  3080 ;;		Nothing
  3081 ;; This function is called by:
  3082 ;;		_bottom_rocker_initial
  3083 ;;		_bottom_rocker_restore
  3084 ;;		_startSorting
  3085 ;; This function uses a non-reentrant model
  3086 ;;
  3087                           
  3088                           	psect	text22
  3089  001494                     __ptext22:
  3090                           	opt stack 0
  3091  001494                     _bottom_rocker_idle:
  3092                           	opt stack 24
  3093                           
  3094                           ;bottom_rocker_fsm.c: 57: if( PORTAbits.RA1 == 1){
  3095                           
  3096                           ; BSR set to: 0
  3097                           ;incstack = 0
  3098  001494  A280               	btfss	3968,1,c	;volatile
  3099  001496  D004               	goto	l4411
  3100                           
  3101                           ;bottom_rocker_fsm.c: 58: fsm2++;
  3102  001498  0100               	movlb	0	; () banked
  3103  00149A  4BC8               	infsnz	_fsm2& (0+255),f,b
  3104  00149C  2BC9               	incf	(_fsm2+1)& (0+255),f,b
  3105                           
  3106                           ;bottom_rocker_fsm.c: 67: }else{
  3107  00149E  0012               	return	
  3108  0014A0                     l4411:
  3109                           
  3110                           ;bottom_rocker_fsm.c: 77: fsm2 = 0;
  3111  0014A0  0E00               	movlw	0
  3112  0014A2  0100               	movlb	0	; () banked
  3113  0014A4  6FC9               	movwf	(_fsm2+1)& (0+255),b
  3114  0014A6  0E00               	movlw	0
  3115  0014A8  6FC8               	movwf	_fsm2& (0+255),b
  3116                           
  3117                           ;bottom_rocker_fsm.c: 79: labeled = PORTCbits.RC2;
  3118  0014AA  A482               	btfss	3970,2,c	;volatile
  3119  0014AC  D004               	goto	u3640
  3120  0014AE  0100               	movlb	0	; () banked
  3121  0014B0  6B80               	clrf	??_bottom_rocker_idle& (0+255),b
  3122  0014B2  2B80               	incf	??_bottom_rocker_idle& (0+255),f,b
  3123  0014B4  D002               	goto	u3648
  3124  0014B6                     u3640:
  3125  0014B6  0100               	movlb	0	; () banked
  3126  0014B8  6B80               	clrf	??_bottom_rocker_idle& (0+255),b
  3127  0014BA                     u3648:
  3128  0014BA  0100               	movlb	0	; () banked
  3129  0014BC  5180               	movf	??_bottom_rocker_idle& (0+255),w,b
  3130  0014BE  6E47               	movwf	_labeled,c
  3131  0014C0  6A48               	clrf	_labeled+1,c
  3132                           
  3133                           ; BSR set to: 0
  3134                           ;bottom_rocker_fsm.c: 81: if(labeled){
  3135  0014C2  5047               	movf	_labeled,w,c
  3136  0014C4  1048               	iorwf	_labeled+1,w,c
  3137  0014C6  B4D8               	btfsc	status,2,c
  3138  0014C8  D008               	goto	l4419
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;bottom_rocker_fsm.c: 82: bottom_move = 1;
  3142  0014CA  0E00               	movlw	0
  3143  0014CC  6E4A               	movwf	_bottom_move+1,c
  3144  0014CE  0E01               	movlw	1
  3145  0014D0  6E49               	movwf	_bottom_move,c
  3146                           
  3147                           ; BSR set to: 0
  3148                           ;bottom_rocker_fsm.c: 84: tin_can_label++;
  3149  0014D2  0100               	movlb	0	; () banked
  3150  0014D4  4BC6               	infsnz	_tin_can_label& (0+255),f,b
  3151  0014D6  2BC7               	incf	(_tin_can_label+1)& (0+255),f,b
  3152                           
  3153                           ;bottom_rocker_fsm.c: 94: }else{
  3154  0014D8  D007               	goto	l4423
  3155  0014DA                     l4419:
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;bottom_rocker_fsm.c: 95: bottom_move = 0;
  3159  0014DA  0E00               	movlw	0
  3160  0014DC  6E4A               	movwf	_bottom_move+1,c
  3161  0014DE  0E00               	movlw	0
  3162  0014E0  6E49               	movwf	_bottom_move,c
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;bottom_rocker_fsm.c: 96: tin_can++;
  3166  0014E2  0100               	movlb	0	; () banked
  3167  0014E4  4BC4               	infsnz	_tin_can& (0+255),f,b
  3168  0014E6  2BC5               	incf	(_tin_can+1)& (0+255),f,b
  3169  0014E8                     l4423:
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;bottom_rocker_fsm.c: 106: }
  3173                           ;bottom_rocker_fsm.c: 109: start_bottom_distribution = 1;
  3174  0014E8  0E00               	movlw	0
  3175  0014EA  6E4C               	movwf	_start_bottom_distribution+1,c
  3176  0014EC  0E01               	movlw	1
  3177  0014EE  6E4B               	movwf	_start_bottom_distribution,c
  3178                           
  3179                           ; BSR set to: 0
  3180                           ;bottom_rocker_fsm.c: 112: bottomRockerState = bottom_rocker_release;
  3181  0014F0  0E12               	movlw	low _bottom_rocker_release
  3182  0014F2  0100               	movlb	0	; () banked
  3183  0014F4  6FCA               	movwf	_bottomRockerState& (0+255),b
  3184  0014F6  0E1D               	movlw	high _bottom_rocker_release
  3185  0014F8  0100               	movlb	0	; () banked
  3186  0014FA  6FCB               	movwf	(_bottomRockerState+1)& (0+255),b
  3187                           
  3188                           ; BSR set to: 0
  3189  0014FC  0012               	return	
  3190  0014FE                     __end_of_bottom_rocker_idle:
  3191                           	opt stack 0
  3192                           tosu	equ	0xFFF
  3193                           tosh	equ	0xFFE
  3194                           tosl	equ	0xFFD
  3195                           pclath	equ	0xFFA
  3196                           intcon	equ	0xFF2
  3197                           intcon3	equ	0xFF0
  3198                           postinc0	equ	0xFEE
  3199                           wreg	equ	0xFE8
  3200                           status	equ	0xFD8
  3201                           
  3202 ;; *************** function _bottom_rocker_restore *****************
  3203 ;; Defined at:
  3204 ;;		line 138 in file "bottom_rocker_fsm.c"
  3205 ;; Parameters:    Size  Location     Type
  3206 ;;		None
  3207 ;; Auto vars:     Size  Location     Type
  3208 ;;		None
  3209 ;; Return value:  Size  Location     Type
  3210 ;;                  1    wreg      void 
  3211 ;; Registers used:
  3212 ;;		wreg, status,2, status,0, cstack
  3213 ;; Tracked objects:
  3214 ;;		On entry : 0/0
  3215 ;;		On exit  : 0/0
  3216 ;;		Unchanged: 0/0
  3217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3222 ;;Total ram usage:        0 bytes
  3223 ;; Hardware stack levels used:    1
  3224 ;; Hardware stack levels required when called:    6
  3225 ;; This function calls:
  3226 ;;		_bottom_rocker_motor_cw
  3227 ;; This function is called by:
  3228 ;;		_bottom_rocker_release
  3229 ;;		_startSorting
  3230 ;; This function uses a non-reentrant model
  3231 ;;
  3232                           
  3233                           	psect	text23
  3234  001D24                     __ptext23:
  3235                           	opt stack 0
  3236  001D24                     _bottom_rocker_restore:
  3237                           	opt stack 23
  3238                           
  3239                           ;bottom_rocker_fsm.c: 149: bottom_rocker_motor_cw();
  3240                           
  3241                           ; BSR set to: 0
  3242                           ;incstack = 0
  3243  001D24  EC83  F00D         	call	_bottom_rocker_motor_cw	;wreg free
  3244                           
  3245                           ;bottom_rocker_fsm.c: 152: bottomRockerState = bottom_rocker_idle;
  3246  001D28  0E94               	movlw	low _bottom_rocker_idle
  3247  001D2A  0100               	movlb	0	; () banked
  3248  001D2C  6FCA               	movwf	_bottomRockerState& (0+255),b
  3249  001D2E  0E14               	movlw	high _bottom_rocker_idle
  3250  001D30  0100               	movlb	0	; () banked
  3251  001D32  6FCB               	movwf	(_bottomRockerState+1)& (0+255),b
  3252  001D34  0012               	return	
  3253  001D36                     __end_of_bottom_rocker_restore:
  3254                           	opt stack 0
  3255                           tosu	equ	0xFFF
  3256                           tosh	equ	0xFFE
  3257                           tosl	equ	0xFFD
  3258                           pclath	equ	0xFFA
  3259                           intcon	equ	0xFF2
  3260                           intcon3	equ	0xFF0
  3261                           postinc0	equ	0xFEE
  3262                           wreg	equ	0xFE8
  3263                           status	equ	0xFD8
  3264                           
  3265 ;; *************** function _bottom_rocker_motor_cw *****************
  3266 ;; Defined at:
  3267 ;;		line 62 in file "motors.c"
  3268 ;; Parameters:    Size  Location     Type
  3269 ;;		None
  3270 ;; Auto vars:     Size  Location     Type
  3271 ;;		None
  3272 ;; Return value:  Size  Location     Type
  3273 ;;                  1    wreg      void 
  3274 ;; Registers used:
  3275 ;;		wreg
  3276 ;; Tracked objects:
  3277 ;;		On entry : 0/0
  3278 ;;		On exit  : 0/0
  3279 ;;		Unchanged: 0/0
  3280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3283 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3284 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3285 ;;Total ram usage:        2 bytes
  3286 ;; Hardware stack levels used:    1
  3287 ;; Hardware stack levels required when called:    5
  3288 ;; This function calls:
  3289 ;;		Nothing
  3290 ;; This function is called by:
  3291 ;;		_bottom_rocker_restore
  3292 ;; This function uses a non-reentrant model
  3293 ;;
  3294                           
  3295                           	psect	text24
  3296  001B06                     __ptext24:
  3297                           	opt stack 0
  3298  001B06                     _bottom_rocker_motor_cw:
  3299                           	opt stack 23
  3300                           
  3301                           ;motors.c: 65: LATBbits.LATB2 = 0;
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;incstack = 0
  3305  001B06  948A               	bcf	3978,2,c	;volatile
  3306                           
  3307                           ;motors.c: 66: LATBbits.LATB3 = 1;
  3308  001B08  868A               	bsf	3978,3,c	;volatile
  3309                           
  3310                           ;motors.c: 67: _delay((unsigned long)((500)*(10000000/4000.0)));
  3311  001B0A  0E07               	movlw	7
  3312  001B0C  0100               	movlb	0	; () banked
  3313  001B0E  6F81               	movwf	(??_bottom_rocker_motor_cw+1)& (0+255),b
  3314  001B10  0E58               	movlw	88
  3315  001B12  0100               	movlb	0	; () banked
  3316  001B14  6F80               	movwf	??_bottom_rocker_motor_cw& (0+255),b
  3317  001B16  0E59               	movlw	89
  3318  001B18                     u4217:
  3319  001B18  2EE8               	decfsz	wreg,f,c
  3320  001B1A  D7FE               	bra	u4217
  3321  001B1C  2F80               	decfsz	??_bottom_rocker_motor_cw& (0+255),f,b
  3322  001B1E  D7FC               	bra	u4217
  3323  001B20  2F81               	decfsz	(??_bottom_rocker_motor_cw+1)& (0+255),f,b
  3324  001B22  D7FA               	bra	u4217
  3325  001B24  D000               	nop2	
  3326                           
  3327                           ;motors.c: 70: LATBbits.LATB2 = 0;
  3328  001B26  948A               	bcf	3978,2,c	;volatile
  3329                           
  3330                           ;motors.c: 71: LATBbits.LATB3 = 0;
  3331  001B28  968A               	bcf	3978,3,c	;volatile
  3332  001B2A  0012               	return	
  3333  001B2C                     __end_of_bottom_rocker_motor_cw:
  3334                           	opt stack 0
  3335                           tosu	equ	0xFFF
  3336                           tosh	equ	0xFFE
  3337                           tosl	equ	0xFFD
  3338                           pclath	equ	0xFFA
  3339                           intcon	equ	0xFF2
  3340                           intcon3	equ	0xFF0
  3341                           postinc0	equ	0xFEE
  3342                           wreg	equ	0xFE8
  3343                           status	equ	0xFD8
  3344                           
  3345 ;; *************** function _bottom_rocker_motor_ccw *****************
  3346 ;; Defined at:
  3347 ;;		line 75 in file "motors.c"
  3348 ;; Parameters:    Size  Location     Type
  3349 ;;		None
  3350 ;; Auto vars:     Size  Location     Type
  3351 ;;  k               2    2[BANK0 ] int 
  3352 ;; Return value:  Size  Location     Type
  3353 ;;                  1    wreg      void 
  3354 ;; Registers used:
  3355 ;;		wreg, status,2, status,0
  3356 ;; Tracked objects:
  3357 ;;		On entry : 0/0
  3358 ;;		On exit  : 0/0
  3359 ;;		Unchanged: 0/0
  3360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3362 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3363 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3364 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3365 ;;Total ram usage:        4 bytes
  3366 ;; Hardware stack levels used:    1
  3367 ;; Hardware stack levels required when called:    5
  3368 ;; This function calls:
  3369 ;;		Nothing
  3370 ;; This function is called by:
  3371 ;;		_bottom_rocker_release
  3372 ;; This function uses a non-reentrant model
  3373 ;;
  3374                           
  3375                           	psect	text25
  3376  0013B4                     __ptext25:
  3377                           	opt stack 0
  3378  0013B4                     _bottom_rocker_motor_ccw:
  3379                           	opt stack 23
  3380                           
  3381                           ;motors.c: 76: int k;
  3382                           ;motors.c: 77: for(k=0;k<=5;k++){
  3383                           
  3384                           ;incstack = 0
  3385  0013B4  0E00               	movlw	0
  3386  0013B6  0100               	movlb	0	; () banked
  3387  0013B8  6F83               	movwf	(bottom_rocker_motor_ccw@k+1)& (0+255),b
  3388  0013BA  0E00               	movlw	0
  3389  0013BC  6F82               	movwf	bottom_rocker_motor_ccw@k& (0+255),b
  3390                           
  3391                           ; BSR set to: 0
  3392  0013BE  0100               	movlb	0	; () banked
  3393  0013C0  BF83               	btfsc	(bottom_rocker_motor_ccw@k+1)& (0+255),7,b
  3394  0013C2  D008               	goto	l367
  3395  0013C4  0100               	movlb	0	; () banked
  3396  0013C6  5183               	movf	(bottom_rocker_motor_ccw@k+1)& (0+255),w,b
  3397  0013C8  E12A               	bnz	l368
  3398  0013CA  0E06               	movlw	6
  3399  0013CC  0100               	movlb	0	; () banked
  3400  0013CE  5D82               	subwf	bottom_rocker_motor_ccw@k& (0+255),w,b
  3401  0013D0  B0D8               	btfsc	status,0,c
  3402  0013D2  D025               	goto	l368
  3403  0013D4                     l367:
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;motors.c: 79: LATBbits.LATB2 = 1;
  3407  0013D4  848A               	bsf	3978,2,c	;volatile
  3408                           
  3409                           ;motors.c: 80: LATBbits.LATB3 = 0;
  3410  0013D6  968A               	bcf	3978,3,c	;volatile
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;motors.c: 81: _delay((unsigned long)((85)*(10000000/4000.0)));
  3414  0013D8  0E02               	movlw	2
  3415  0013DA  0100               	movlb	0	; () banked
  3416  0013DC  6F81               	movwf	(??_bottom_rocker_motor_ccw+1)& (0+255),b
  3417  0013DE  0E14               	movlw	20
  3418  0013E0  0100               	movlb	0	; () banked
  3419  0013E2  6F80               	movwf	??_bottom_rocker_motor_ccw& (0+255),b
  3420  0013E4  0EF6               	movlw	246
  3421  0013E6                     u4227:
  3422  0013E6  2EE8               	decfsz	wreg,f,c
  3423  0013E8  D7FE               	bra	u4227
  3424  0013EA  2F80               	decfsz	??_bottom_rocker_motor_ccw& (0+255),f,b
  3425  0013EC  D7FC               	bra	u4227
  3426  0013EE  2F81               	decfsz	(??_bottom_rocker_motor_ccw+1)& (0+255),f,b
  3427  0013F0  D7FA               	bra	u4227
  3428  0013F2  F000               	nop	
  3429                           
  3430                           ;motors.c: 84: LATBbits.LATB2 = 0;
  3431  0013F4  948A               	bcf	3978,2,c	;volatile
  3432                           
  3433                           ;motors.c: 85: LATBbits.LATB3 = 0;
  3434  0013F6  968A               	bcf	3978,3,c	;volatile
  3435                           
  3436                           ;motors.c: 86: _delay((unsigned long)((10)*(10000000/4000.0)));
  3437  0013F8  0E21               	movlw	33
  3438  0013FA  0100               	movlb	0	; () banked
  3439  0013FC  6F80               	movwf	??_bottom_rocker_motor_ccw& (0+255),b
  3440  0013FE  0E76               	movlw	118
  3441  001400                     u4237:
  3442  001400  2EE8               	decfsz	wreg,f,c
  3443  001402  D7FE               	bra	u4237
  3444  001404  2F80               	decfsz	??_bottom_rocker_motor_ccw& (0+255),f,b
  3445  001406  D7FC               	bra	u4237
  3446  001408  F000               	nop	
  3447  00140A  0100               	movlb	0	; () banked
  3448  00140C  4B82               	infsnz	bottom_rocker_motor_ccw@k& (0+255),f,b
  3449  00140E  2B83               	incf	(bottom_rocker_motor_ccw@k+1)& (0+255),f,b
  3450  001410  0100               	movlb	0	; () banked
  3451  001412  BF83               	btfsc	(bottom_rocker_motor_ccw@k+1)& (0+255),7,b
  3452  001414  D7DF               	goto	l367
  3453  001416  0100               	movlb	0	; () banked
  3454  001418  5183               	movf	(bottom_rocker_motor_ccw@k+1)& (0+255),w,b
  3455  00141A  E101               	bnz	u3320
  3456  00141C  D7D6               	goto	L2
  3457  00141E                     u3320:
  3458  00141E                     l368:
  3459                           
  3460                           ; BSR set to: 0
  3461                           ;motors.c: 87: }
  3462                           ;motors.c: 88: LATBbits.LATB2 = 0;
  3463  00141E  948A               	bcf	3978,2,c	;volatile
  3464                           
  3465                           ;motors.c: 89: LATBbits.LATB3 = 0;
  3466  001420  968A               	bcf	3978,3,c	;volatile
  3467                           
  3468                           ; BSR set to: 0
  3469                           
  3470                           ;motors.c: 91: return;
  3471  001422  0012               	return		;funcret
  3472  001424                     __end_of_bottom_rocker_motor_ccw:
  3473                           	opt stack 0
  3474                           tosu	equ	0xFFF
  3475                           tosh	equ	0xFFE
  3476                           tosl	equ	0xFFD
  3477                           pclath	equ	0xFFA
  3478                           intcon	equ	0xFF2
  3479                           intcon3	equ	0xFF0
  3480                           postinc0	equ	0xFEE
  3481                           wreg	equ	0xFE8
  3482                           status	equ	0xFD8
  3483                           
  3484 ;; *************** function _bottom_distribution_move *****************
  3485 ;; Defined at:
  3486 ;;		line 105 in file "bottom_distribution_fsm.c"
  3487 ;; Parameters:    Size  Location     Type
  3488 ;;		None
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;		None
  3491 ;; Return value:  Size  Location     Type
  3492 ;;                  1    wreg      void 
  3493 ;; Registers used:
  3494 ;;		wreg, status,2, status,0, cstack
  3495 ;; Tracked objects:
  3496 ;;		On entry : 0/0
  3497 ;;		On exit  : 0/0
  3498 ;;		Unchanged: 0/0
  3499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3504 ;;Total ram usage:        0 bytes
  3505 ;; Hardware stack levels used:    1
  3506 ;; Hardware stack levels required when called:    6
  3507 ;; This function calls:
  3508 ;;		_bottom_distribution_motor_ccw
  3509 ;;		_bottom_distribution_motor_cw
  3510 ;; This function is called by:
  3511 ;;		_bottom_distribution_prepare
  3512 ;;		_startSorting
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           	psect	text26
  3517  001C40                     __ptext26:
  3518                           	opt stack 0
  3519  001C40                     _bottom_distribution_move:
  3520                           	opt stack 23
  3521                           
  3522                           ;bottom_distribution_fsm.c: 118: if(bottom_move == 1){
  3523                           
  3524                           ; BSR set to: 0
  3525                           ;incstack = 0
  3526  001C40  0449               	decf	_bottom_move,w,c
  3527  001C42  104A               	iorwf	_bottom_move+1,w,c
  3528  001C44  A4D8               	btfss	status,2,c
  3529  001C46  D003               	goto	l4401
  3530                           
  3531                           ;bottom_distribution_fsm.c: 120: bottom_distribution_motor_ccw();
  3532  001C48  ECA9  F00D         	call	_bottom_distribution_motor_ccw	;wreg free
  3533                           
  3534                           ;bottom_distribution_fsm.c: 122: }else{
  3535  001C4C  D002               	goto	l4403
  3536  001C4E                     l4401:
  3537                           
  3538                           ;bottom_distribution_fsm.c: 124: bottom_distribution_motor_cw();
  3539  001C4E  EC96  F00D         	call	_bottom_distribution_motor_cw	;wreg free
  3540  001C52                     l4403:
  3541                           
  3542                           ;bottom_distribution_fsm.c: 125: }
  3543                           ;bottom_distribution_fsm.c: 128: bottomDistributionState = bottom_distribution_idle;
  3544  001C52  0E16               	movlw	low _bottom_distribution_idle
  3545  001C54  0100               	movlb	0	; () banked
  3546  001C56  6FCC               	movwf	_bottomDistributionState& (0+255),b
  3547  001C58  0E1A               	movlw	high _bottom_distribution_idle
  3548  001C5A  0100               	movlb	0	; () banked
  3549  001C5C  6FCD               	movwf	(_bottomDistributionState+1)& (0+255),b
  3550  001C5E  0012               	return	
  3551  001C60                     __end_of_bottom_distribution_move:
  3552                           	opt stack 0
  3553                           tosu	equ	0xFFF
  3554                           tosh	equ	0xFFE
  3555                           tosl	equ	0xFFD
  3556                           pclath	equ	0xFFA
  3557                           intcon	equ	0xFF2
  3558                           intcon3	equ	0xFF0
  3559                           postinc0	equ	0xFEE
  3560                           wreg	equ	0xFE8
  3561                           status	equ	0xFD8
  3562                           
  3563 ;; *************** function _bottom_distribution_idle *****************
  3564 ;; Defined at:
  3565 ;;		line 45 in file "bottom_distribution_fsm.c"
  3566 ;; Parameters:    Size  Location     Type
  3567 ;;		None
  3568 ;; Auto vars:     Size  Location     Type
  3569 ;;		None
  3570 ;; Return value:  Size  Location     Type
  3571 ;;                  1    wreg      void 
  3572 ;; Registers used:
  3573 ;;		wreg, status,2, status,0
  3574 ;; Tracked objects:
  3575 ;;		On entry : 0/0
  3576 ;;		On exit  : 0/0
  3577 ;;		Unchanged: 0/0
  3578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3583 ;;Total ram usage:        0 bytes
  3584 ;; Hardware stack levels used:    1
  3585 ;; Hardware stack levels required when called:    5
  3586 ;; This function calls:
  3587 ;;		Nothing
  3588 ;; This function is called by:
  3589 ;;		_bottom_distribution_initial
  3590 ;;		_bottom_distribution_move
  3591 ;;		_startSorting
  3592 ;; This function uses a non-reentrant model
  3593 ;;
  3594                           
  3595                           	psect	text27
  3596  001A16                     __ptext27:
  3597                           	opt stack 0
  3598  001A16                     _bottom_distribution_idle:
  3599                           	opt stack 24
  3600                           
  3601                           ;bottom_distribution_fsm.c: 49: if(start_bottom_distribution ==1){
  3602                           
  3603                           ; BSR set to: 0
  3604                           ;incstack = 0
  3605  001A16  044B               	decf	_start_bottom_distribution,w,c
  3606  001A18  104C               	iorwf	_start_bottom_distribution+1,w,c
  3607  001A1A  A4D8               	btfss	status,2,c
  3608  001A1C  D00B               	goto	l4383
  3609                           
  3610                           ;bottom_distribution_fsm.c: 59: bottomDistributionState = bottom_distribution_prepare;
  3611  001A1E  0E60               	movlw	low _bottom_distribution_prepare
  3612  001A20  0100               	movlb	0	; () banked
  3613  001A22  6FCC               	movwf	_bottomDistributionState& (0+255),b
  3614  001A24  0E1C               	movlw	high _bottom_distribution_prepare
  3615  001A26  0100               	movlb	0	; () banked
  3616  001A28  6FCD               	movwf	(_bottomDistributionState+1)& (0+255),b
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;bottom_distribution_fsm.c: 60: start_bottom_distribution = 0;
  3620  001A2A  0E00               	movlw	0
  3621  001A2C  6E4C               	movwf	_start_bottom_distribution+1,c
  3622  001A2E  0E00               	movlw	0
  3623  001A30  6E4B               	movwf	_start_bottom_distribution,c
  3624                           
  3625                           ;bottom_distribution_fsm.c: 62: }else{
  3626  001A32  0012               	return	
  3627  001A34                     l4383:
  3628                           
  3629                           ;bottom_distribution_fsm.c: 63: bottomDistributionState = bottom_distribution_idle;
  3630  001A34  0E16               	movlw	low _bottom_distribution_idle
  3631  001A36  0100               	movlb	0	; () banked
  3632  001A38  6FCC               	movwf	_bottomDistributionState& (0+255),b
  3633  001A3A  0E1A               	movlw	high _bottom_distribution_idle
  3634  001A3C  0100               	movlb	0	; () banked
  3635  001A3E  6FCD               	movwf	(_bottomDistributionState+1)& (0+255),b
  3636                           
  3637                           ; BSR set to: 0
  3638  001A40  0012               	return	
  3639  001A42                     __end_of_bottom_distribution_idle:
  3640                           	opt stack 0
  3641                           tosu	equ	0xFFF
  3642                           tosh	equ	0xFFE
  3643                           tosl	equ	0xFFD
  3644                           pclath	equ	0xFFA
  3645                           intcon	equ	0xFF2
  3646                           intcon3	equ	0xFF0
  3647                           postinc0	equ	0xFEE
  3648                           wreg	equ	0xFE8
  3649                           status	equ	0xFD8
  3650                           
  3651 ;; *************** function _bottom_distribution_prepare *****************
  3652 ;; Defined at:
  3653 ;;		line 69 in file "bottom_distribution_fsm.c"
  3654 ;; Parameters:    Size  Location     Type
  3655 ;;		None
  3656 ;; Auto vars:     Size  Location     Type
  3657 ;;		None
  3658 ;; Return value:  Size  Location     Type
  3659 ;;                  1    wreg      void 
  3660 ;; Registers used:
  3661 ;;		wreg, status,2, status,0, cstack
  3662 ;; Tracked objects:
  3663 ;;		On entry : 0/0
  3664 ;;		On exit  : 0/0
  3665 ;;		Unchanged: 0/0
  3666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3671 ;;Total ram usage:        0 bytes
  3672 ;; Hardware stack levels used:    1
  3673 ;; Hardware stack levels required when called:    6
  3674 ;; This function calls:
  3675 ;;		_bottom_distribution_motor_ccw
  3676 ;;		_bottom_distribution_motor_cw
  3677 ;; This function is called by:
  3678 ;;		_bottom_distribution_idle
  3679 ;;		_startSorting
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           	psect	text28
  3684  001C60                     __ptext28:
  3685                           	opt stack 0
  3686  001C60                     _bottom_distribution_prepare:
  3687                           	opt stack 23
  3688                           
  3689                           ;bottom_distribution_fsm.c: 72: if(bottom_move == 1){
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;incstack = 0
  3693  001C60  0449               	decf	_bottom_move,w,c
  3694  001C62  104A               	iorwf	_bottom_move+1,w,c
  3695  001C64  A4D8               	btfss	status,2,c
  3696  001C66  D003               	goto	l4391
  3697                           
  3698                           ;bottom_distribution_fsm.c: 82: bottom_distribution_motor_cw();
  3699  001C68  EC96  F00D         	call	_bottom_distribution_motor_cw	;wreg free
  3700                           
  3701                           ;bottom_distribution_fsm.c: 84: }else{
  3702  001C6C  D002               	goto	l4393
  3703  001C6E                     l4391:
  3704                           
  3705                           ;bottom_distribution_fsm.c: 95: bottom_distribution_motor_ccw();
  3706  001C6E  ECA9  F00D         	call	_bottom_distribution_motor_ccw	;wreg free
  3707  001C72                     l4393:
  3708                           
  3709                           ;bottom_distribution_fsm.c: 97: }
  3710                           ;bottom_distribution_fsm.c: 100: bottomDistributionState = bottom_distribution_move;
  3711  001C72  0E40               	movlw	low _bottom_distribution_move
  3712  001C74  0100               	movlb	0	; () banked
  3713  001C76  6FCC               	movwf	_bottomDistributionState& (0+255),b
  3714  001C78  0E1C               	movlw	high _bottom_distribution_move
  3715  001C7A  0100               	movlb	0	; () banked
  3716  001C7C  6FCD               	movwf	(_bottomDistributionState+1)& (0+255),b
  3717  001C7E  0012               	return	
  3718  001C80                     __end_of_bottom_distribution_prepare:
  3719                           	opt stack 0
  3720                           tosu	equ	0xFFF
  3721                           tosh	equ	0xFFE
  3722                           tosl	equ	0xFFD
  3723                           pclath	equ	0xFFA
  3724                           intcon	equ	0xFF2
  3725                           intcon3	equ	0xFF0
  3726                           postinc0	equ	0xFEE
  3727                           wreg	equ	0xFE8
  3728                           status	equ	0xFD8
  3729                           
  3730 ;; *************** function _bottom_distribution_motor_cw *****************
  3731 ;; Defined at:
  3732 ;;		line 124 in file "motors.c"
  3733 ;; Parameters:    Size  Location     Type
  3734 ;;		None
  3735 ;; Auto vars:     Size  Location     Type
  3736 ;;		None
  3737 ;; Return value:  Size  Location     Type
  3738 ;;                  1    wreg      void 
  3739 ;; Registers used:
  3740 ;;		wreg
  3741 ;; Tracked objects:
  3742 ;;		On entry : 0/0
  3743 ;;		On exit  : 0/0
  3744 ;;		Unchanged: 0/0
  3745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3748 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3749 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3750 ;;Total ram usage:        2 bytes
  3751 ;; Hardware stack levels used:    1
  3752 ;; Hardware stack levels required when called:    5
  3753 ;; This function calls:
  3754 ;;		Nothing
  3755 ;; This function is called by:
  3756 ;;		_bottom_distribution_prepare
  3757 ;;		_bottom_distribution_move
  3758 ;; This function uses a non-reentrant model
  3759 ;;
  3760                           
  3761                           	psect	text29
  3762  001B2C                     __ptext29:
  3763                           	opt stack 0
  3764  001B2C                     _bottom_distribution_motor_cw:
  3765                           	opt stack 23
  3766                           
  3767                           ;motors.c: 127: LATDbits.LATD1 = 0;
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;incstack = 0
  3771  001B2C  928C               	bcf	3980,1,c	;volatile
  3772                           
  3773                           ;motors.c: 128: LATBbits.LATB0 = 1;
  3774  001B2E  808A               	bsf	3978,0,c	;volatile
  3775                           
  3776                           ;motors.c: 129: _delay((unsigned long)((500)*(10000000/4000.0)));
  3777  001B30  0E07               	movlw	7
  3778  001B32  0100               	movlb	0	; () banked
  3779  001B34  6F81               	movwf	(??_bottom_distribution_motor_cw+1)& (0+255),b
  3780  001B36  0E58               	movlw	88
  3781  001B38  0100               	movlb	0	; () banked
  3782  001B3A  6F80               	movwf	??_bottom_distribution_motor_cw& (0+255),b
  3783  001B3C  0E59               	movlw	89
  3784  001B3E                     u4247:
  3785  001B3E  2EE8               	decfsz	wreg,f,c
  3786  001B40  D7FE               	bra	u4247
  3787  001B42  2F80               	decfsz	??_bottom_distribution_motor_cw& (0+255),f,b
  3788  001B44  D7FC               	bra	u4247
  3789  001B46  2F81               	decfsz	(??_bottom_distribution_motor_cw+1)& (0+255),f,b
  3790  001B48  D7FA               	bra	u4247
  3791  001B4A  D000               	nop2	
  3792                           
  3793                           ;motors.c: 132: LATDbits.LATD1 = 0;
  3794  001B4C  928C               	bcf	3980,1,c	;volatile
  3795                           
  3796                           ;motors.c: 133: LATBbits.LATB0 = 0;
  3797  001B4E  908A               	bcf	3978,0,c	;volatile
  3798  001B50  0012               	return	
  3799  001B52                     __end_of_bottom_distribution_motor_cw:
  3800                           	opt stack 0
  3801                           tosu	equ	0xFFF
  3802                           tosh	equ	0xFFE
  3803                           tosl	equ	0xFFD
  3804                           pclath	equ	0xFFA
  3805                           intcon	equ	0xFF2
  3806                           intcon3	equ	0xFF0
  3807                           postinc0	equ	0xFEE
  3808                           wreg	equ	0xFE8
  3809                           status	equ	0xFD8
  3810                           
  3811 ;; *************** function _bottom_distribution_motor_ccw *****************
  3812 ;; Defined at:
  3813 ;;		line 138 in file "motors.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;		None
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;		None
  3818 ;; Return value:  Size  Location     Type
  3819 ;;                  1    wreg      void 
  3820 ;; Registers used:
  3821 ;;		wreg
  3822 ;; Tracked objects:
  3823 ;;		On entry : 0/0
  3824 ;;		On exit  : 0/0
  3825 ;;		Unchanged: 0/0
  3826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3829 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3830 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3831 ;;Total ram usage:        2 bytes
  3832 ;; Hardware stack levels used:    1
  3833 ;; Hardware stack levels required when called:    5
  3834 ;; This function calls:
  3835 ;;		Nothing
  3836 ;; This function is called by:
  3837 ;;		_bottom_distribution_prepare
  3838 ;;		_bottom_distribution_move
  3839 ;; This function uses a non-reentrant model
  3840 ;;
  3841                           
  3842                           	psect	text30
  3843  001B52                     __ptext30:
  3844                           	opt stack 0
  3845  001B52                     _bottom_distribution_motor_ccw:
  3846                           	opt stack 23
  3847                           
  3848                           ;motors.c: 141: LATDbits.LATD1 = 1;
  3849                           
  3850                           ;incstack = 0
  3851  001B52  828C               	bsf	3980,1,c	;volatile
  3852                           
  3853                           ;motors.c: 142: LATBbits.LATB0 = 0;
  3854  001B54  908A               	bcf	3978,0,c	;volatile
  3855                           
  3856                           ;motors.c: 143: _delay((unsigned long)((500)*(10000000/4000.0)));
  3857  001B56  0E07               	movlw	7
  3858  001B58  0100               	movlb	0	; () banked
  3859  001B5A  6F81               	movwf	(??_bottom_distribution_motor_ccw+1)& (0+255),b
  3860  001B5C  0E58               	movlw	88
  3861  001B5E  0100               	movlb	0	; () banked
  3862  001B60  6F80               	movwf	??_bottom_distribution_motor_ccw& (0+255),b
  3863  001B62  0E59               	movlw	89
  3864  001B64                     u4257:
  3865  001B64  2EE8               	decfsz	wreg,f,c
  3866  001B66  D7FE               	bra	u4257
  3867  001B68  2F80               	decfsz	??_bottom_distribution_motor_ccw& (0+255),f,b
  3868  001B6A  D7FC               	bra	u4257
  3869  001B6C  2F81               	decfsz	(??_bottom_distribution_motor_ccw+1)& (0+255),f,b
  3870  001B6E  D7FA               	bra	u4257
  3871  001B70  D000               	nop2	
  3872                           
  3873                           ;motors.c: 146: LATDbits.LATD1 = 0;
  3874  001B72  928C               	bcf	3980,1,c	;volatile
  3875                           
  3876                           ;motors.c: 147: LATBbits.LATB0 = 0;
  3877  001B74  908A               	bcf	3978,0,c	;volatile
  3878  001B76  0012               	return	
  3879  001B78                     __end_of_bottom_distribution_motor_ccw:
  3880                           	opt stack 0
  3881                           tosu	equ	0xFFF
  3882                           tosh	equ	0xFFE
  3883                           tosl	equ	0xFFD
  3884                           pclath	equ	0xFFA
  3885                           intcon	equ	0xFF2
  3886                           intcon3	equ	0xFF0
  3887                           postinc0	equ	0xFEE
  3888                           wreg	equ	0xFE8
  3889                           status	equ	0xFD8
  3890                           
  3891 ;; *************** function _standby *****************
  3892 ;; Defined at:
  3893 ;;		line 29 in file "operation.c"
  3894 ;; Parameters:    Size  Location     Type
  3895 ;;		None
  3896 ;; Auto vars:     Size  Location     Type
  3897 ;;  i               1   40[BANK0 ] unsigned char 
  3898 ;;  i               1   41[BANK0 ] unsigned char 
  3899 ;;  keypress_tem    1   39[BANK0 ] unsigned char 
  3900 ;;  keypress        1   38[BANK0 ] unsigned char 
  3901 ;; Return value:  Size  Location     Type
  3902 ;;                  1    wreg      void 
  3903 ;; Registers used:
  3904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3905 ;; Tracked objects:
  3906 ;;		On entry : 0/0
  3907 ;;		On exit  : 0/0
  3908 ;;		Unchanged: 0/0
  3909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3911 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3912 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3913 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3914 ;;Total ram usage:        6 bytes
  3915 ;; Hardware stack levels used:    1
  3916 ;; Hardware stack levels required when called:    8
  3917 ;; This function calls:
  3918 ;;		_I2C_Master_Read
  3919 ;;		_I2C_Master_Start
  3920 ;;		_I2C_Master_Stop
  3921 ;;		_I2C_Master_Write
  3922 ;;		_initLCD
  3923 ;;		_lcdInst
  3924 ;;		_printf
  3925 ;; This function is called by:
  3926 ;;		_main
  3927 ;; This function uses a non-reentrant model
  3928 ;;
  3929                           
  3930                           	psect	text31
  3931  000E08                     __ptext31:
  3932                           	opt stack 0
  3933  000E08                     _standby:
  3934                           	opt stack 22
  3935                           
  3936                           ;operation.c: 31: (INTCONbits.GIE = 0);
  3937                           
  3938                           ;incstack = 0
  3939  000E08  9EF2               	bcf	intcon,7,c	;volatile
  3940                           
  3941                           ;operation.c: 32: lcdInst(0b10000000);;
  3942  000E0A  0E80               	movlw	128
  3943  000E0C  ECA3  F00E         	call	_lcdInst
  3944                           
  3945                           ;operation.c: 33: initLCD();
  3946  000E10  EC1D  F00C         	call	_initLCD	;wreg free
  3947                           
  3948                           ;operation.c: 34: __nop();
  3949  000E14  F000               	nop	
  3950                           
  3951                           ;operation.c: 35: __nop();
  3952  000E16  F000               	nop	
  3953  000E18                     l454:
  3954                           
  3955                           ;operation.c: 39: I2C_Master_Start();
  3956  000E18  ECDC  F00E         	call	_I2C_Master_Start	;wreg free
  3957                           
  3958                           ;operation.c: 40: I2C_Master_Write(0b11010000);
  3959  000E1C  0E00               	movlw	0
  3960  000E1E  0100               	movlb	0	; () banked
  3961  000E20  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3962  000E22  0ED0               	movlw	208
  3963  000E24  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3964  000E26  ECD3  F00E         	call	_I2C_Master_Write	;wreg free
  3965                           
  3966                           ;operation.c: 41: I2C_Master_Write(0x00);
  3967  000E2A  0E00               	movlw	0
  3968  000E2C  0100               	movlb	0	; () banked
  3969  000E2E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3970  000E30  0E00               	movlw	0
  3971  000E32  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3972  000E34  ECD3  F00E         	call	_I2C_Master_Write	;wreg free
  3973                           
  3974                           ;operation.c: 42: I2C_Master_Stop();
  3975  000E38  ECD8  F00E         	call	_I2C_Master_Stop	;wreg free
  3976                           
  3977                           ;operation.c: 45: I2C_Master_Start();
  3978  000E3C  ECDC  F00E         	call	_I2C_Master_Start	;wreg free
  3979                           
  3980                           ;operation.c: 46: I2C_Master_Write(0b11010001);
  3981  000E40  0E00               	movlw	0
  3982  000E42  0100               	movlb	0	; () banked
  3983  000E44  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3984  000E46  0ED1               	movlw	209
  3985  000E48  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3986  000E4A  ECD3  F00E         	call	_I2C_Master_Write	;wreg free
  3987                           
  3988                           ;operation.c: 47: for(unsigned char i=0;i<0x06;i++){
  3989  000E4E  0E00               	movlw	0
  3990  000E50  0100               	movlb	0	; () banked
  3991  000E52  6FA9               	movwf	standby@i& (0+255),b
  3992  000E54                     l4667:
  3993                           
  3994                           ; BSR set to: 0
  3995  000E54  0E05               	movlw	5
  3996  000E56  0100               	movlb	0	; () banked
  3997  000E58  65A9               	cpfsgt	standby@i& (0+255),b
  3998  000E5A  D001               	goto	l4671
  3999  000E5C  D010               	goto	l4677
  4000  000E5E                     l4671:
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;operation.c: 48: time[i] = I2C_Master_Read(1);
  4004  000E5E  0100               	movlb	0	; () banked
  4005  000E60  51A9               	movf	standby@i& (0+255),w,b
  4006  000E62  0D01               	mullw	1
  4007  000E64  0EAB               	movlw	low _time
  4008  000E66  24F3               	addwf	prodl,w,c
  4009  000E68  6ED9               	movwf	fsr2l,c
  4010  000E6A  0E00               	movlw	high _time
  4011  000E6C  20F4               	addwfc	prodh,w,c
  4012  000E6E  6EDA               	movwf	fsr2h,c
  4013  000E70  0E01               	movlw	1
  4014  000E72  ECF4  F00C         	call	_I2C_Master_Read
  4015  000E76  6EDF               	movwf	indf2,c
  4016  000E78  0100               	movlb	0	; () banked
  4017  000E7A  2BA9               	incf	standby@i& (0+255),f,b
  4018  000E7C  D7EB               	goto	l4667
  4019  000E7E                     l4677:
  4020                           
  4021                           ; BSR set to: 0
  4022                           ;operation.c: 49: }
  4023                           ;operation.c: 50: time[6] = I2C_Master_Read(0);
  4024  000E7E  0E00               	movlw	0
  4025  000E80  ECF4  F00C         	call	_I2C_Master_Read
  4026  000E84  0100               	movlb	0	; () banked
  4027  000E86  6FB1               	movwf	(_time+6)& (0+255),b
  4028                           
  4029                           ;operation.c: 51: I2C_Master_Stop();
  4030  000E88  ECD8  F00E         	call	_I2C_Master_Stop	;wreg free
  4031                           
  4032                           ;operation.c: 53: lcdInst(0b10000000);;
  4033  000E8C  0E80               	movlw	128
  4034  000E8E  ECA3  F00E         	call	_lcdInst
  4035                           
  4036                           ;operation.c: 54: printf("%02x/%02x   ",time[5],time[4]);
  4037  000E92  0ECF               	movlw	low STR_2
  4038  000E94  0100               	movlb	0	; () banked
  4039  000E96  6F8E               	movwf	printf@f& (0+255),b
  4040  000E98  0EFF               	movlw	high STR_2
  4041  000E9A  0100               	movlb	0	; () banked
  4042  000E9C  6F8F               	movwf	(printf@f+1)& (0+255),b
  4043  000E9E  C0B0  F090         	movff	_time+5,?_printf+2
  4044  000EA2  0100               	movlb	0	; () banked
  4045  000EA4  6B91               	clrf	(?_printf+3)& (0+255),b
  4046  000EA6  C0AF  F092         	movff	_time+4,?_printf+4
  4047  000EAA  0100               	movlb	0	; () banked
  4048  000EAC  6B93               	clrf	(?_printf+5)& (0+255),b
  4049  000EAE  EC09  F000         	call	_printf	;wreg free
  4050                           
  4051                           ;operation.c: 55: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  4052  000EB2  0EC0               	movlw	low STR_3
  4053  000EB4  0100               	movlb	0	; () banked
  4054  000EB6  6F8E               	movwf	printf@f& (0+255),b
  4055  000EB8  0EFF               	movlw	high STR_3
  4056  000EBA  0100               	movlb	0	; () banked
  4057  000EBC  6F8F               	movwf	(printf@f+1)& (0+255),b
  4058  000EBE  C0AD  F090         	movff	_time+2,?_printf+2
  4059  000EC2  0100               	movlb	0	; () banked
  4060  000EC4  6B91               	clrf	(?_printf+3)& (0+255),b
  4061  000EC6  C0AC  F092         	movff	_time+1,?_printf+4
  4062  000ECA  0100               	movlb	0	; () banked
  4063  000ECC  6B93               	clrf	(?_printf+5)& (0+255),b
  4064  000ECE  C0AB  F094         	movff	_time,?_printf+6
  4065  000ED2  0100               	movlb	0	; () banked
  4066  000ED4  6B95               	clrf	(?_printf+7)& (0+255),b
  4067  000ED6  EC09  F000         	call	_printf	;wreg free
  4068                           
  4069                           ;operation.c: 57: lcdInst(0b11000000);;
  4070  000EDA  0EC0               	movlw	192
  4071  000EDC  ECA3  F00E         	call	_lcdInst
  4072                           
  4073                           ;operation.c: 58: printf("Press # to Start");
  4074  000EE0  0E80               	movlw	low STR_4
  4075  000EE2  0100               	movlb	0	; () banked
  4076  000EE4  6F8E               	movwf	printf@f& (0+255),b
  4077  000EE6  0EFF               	movlw	high STR_4
  4078  000EE8  0100               	movlb	0	; () banked
  4079  000EEA  6F8F               	movwf	(printf@f+1)& (0+255),b
  4080  000EEC  EC09  F000         	call	_printf	;wreg free
  4081                           
  4082                           ;operation.c: 61: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4083  000EF0  3881               	swapf	3969,w,c	;volatile
  4084  000EF2  0B0F               	andlw	15
  4085  000EF4  0B0F               	andlw	15
  4086  000EF6  0100               	movlb	0	; () banked
  4087  000EF8  6FA6               	movwf	standby@keypress& (0+255),b
  4088  000EFA                     l457:
  4089  000EFA  B281               	btfsc	3969,1,c	;volatile
  4090  000EFC  D7FE               	goto	l457
  4091                           
  4092                           ;operation.c: 64: }
  4093                           ;operation.c: 65: unsigned char keypress_temp = keys[keypress];
  4094  000EFE  0100               	movlb	0	; () banked
  4095  000F00  51A6               	movf	standby@keypress& (0+255),w,b
  4096  000F02  0D01               	mullw	1
  4097  000F04  0EE9               	movlw	low _keys
  4098  000F06  24F3               	addwf	prodl,w,c
  4099  000F08  6EF6               	movwf	tblptrl,c
  4100  000F0A  0EFE               	movlw	high _keys
  4101  000F0C  20F4               	addwfc	prodh,w,c
  4102  000F0E  6EF7               	movwf	tblptrh,c
  4103  000F10                     	if	1	;There are 3 active tblptr bytes
  4104  000F10  6AF8               	clrf	tblptru,c
  4105  000F12  0E00               	movlw	low (__mediumconst shr (0+16))
  4106  000F14  22F8               	addwfc	tblptru,f,c
  4107  000F16                     	endif
  4108  000F16  0008               	tblrd		*
  4109  000F18  CFF5 F0A7          	movff	tablat,standby@keypress_temp
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;operation.c: 67: if(keypress_temp == '#'){
  4113  000F1C  0E23               	movlw	35
  4114  000F1E  0100               	movlb	0	; () banked
  4115  000F20  19A7               	xorwf	standby@keypress_temp& (0+255),w,b
  4116  000F22  A4D8               	btfss	status,2,c
  4117  000F24  D007               	goto	l4693
  4118                           
  4119                           ; BSR set to: 0
  4120                           ;operation.c: 68: Start_time[2] = time[2];
  4121  000F26  C0AD  F0BC         	movff	_time+2,_Start_time+2
  4122                           
  4123                           ;operation.c: 69: Start_time[1] = time[1];
  4124  000F2A  C0AC  F0BB         	movff	_time+1,_Start_time+1
  4125                           
  4126                           ;operation.c: 70: Start_time[0] = time[0];
  4127  000F2E  C0AB  F0BA         	movff	_time,_Start_time
  4128                           
  4129                           ;operation.c: 71: break;
  4130  000F32  0012               	return	
  4131  000F34                     l4693:
  4132                           
  4133                           ; BSR set to: 0
  4134                           ;operation.c: 72: }
  4135                           ;operation.c: 73: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)))
      +                          ;};
  4136  000F34  0E00               	movlw	0
  4137  000F36  0100               	movlb	0	; () banked
  4138  000F38  6FA8               	movwf	standby@i_875& (0+255),b
  4139  000F3A                     l4695:
  4140                           
  4141                           ; BSR set to: 0
  4142  000F3A  0E09               	movlw	9
  4143  000F3C  0100               	movlb	0	; () banked
  4144  000F3E  65A8               	cpfsgt	standby@i_875& (0+255),b
  4145  000F40  D001               	goto	l4699
  4146  000F42  D76A               	goto	l454
  4147  000F44                     l4699:
  4148                           
  4149                           ; BSR set to: 0
  4150  000F44  0E02               	movlw	2
  4151  000F46  0100               	movlb	0	; () banked
  4152  000F48  6FA5               	movwf	(??_standby+1)& (0+255),b
  4153  000F4A  0E3F               	movlw	63
  4154  000F4C  0100               	movlb	0	; () banked
  4155  000F4E  6FA4               	movwf	??_standby& (0+255),b
  4156  000F50  0E2B               	movlw	43
  4157  000F52                     u4267:
  4158  000F52  2EE8               	decfsz	wreg,f,c
  4159  000F54  D7FE               	bra	u4267
  4160  000F56  2FA4               	decfsz	??_standby& (0+255),f,b
  4161  000F58  D7FC               	bra	u4267
  4162  000F5A  2FA5               	decfsz	(??_standby+1)& (0+255),f,b
  4163  000F5C  D7FA               	bra	u4267
  4164  000F5E  0100               	movlb	0	; () banked
  4165  000F60  2BA8               	incf	standby@i_875& (0+255),f,b
  4166  000F62  D7EB               	goto	l4695
  4167  000F64                     __end_of_standby:
  4168                           	opt stack 0
  4169                           tosu	equ	0xFFF
  4170                           tosh	equ	0xFFE
  4171                           tosl	equ	0xFFD
  4172                           pclath	equ	0xFFA
  4173                           tblptru	equ	0xFF8
  4174                           tblptrh	equ	0xFF7
  4175                           tblptrl	equ	0xFF6
  4176                           tablat	equ	0xFF5
  4177                           prodh	equ	0xFF4
  4178                           prodl	equ	0xFF3
  4179                           intcon	equ	0xFF2
  4180                           intcon3	equ	0xFF0
  4181                           postinc0	equ	0xFEE
  4182                           wreg	equ	0xFE8
  4183                           indf2	equ	0xFDF
  4184                           fsr2h	equ	0xFDA
  4185                           fsr2l	equ	0xFD9
  4186                           status	equ	0xFD8
  4187                           
  4188 ;; *************** function _set_time *****************
  4189 ;; Defined at:
  4190 ;;		line 72 in file "main.c"
  4191 ;; Parameters:    Size  Location     Type
  4192 ;;		None
  4193 ;; Auto vars:     Size  Location     Type
  4194 ;;  i               1    3[BANK0 ] unsigned char 
  4195 ;; Return value:  Size  Location     Type
  4196 ;;                  1    wreg      void 
  4197 ;; Registers used:
  4198 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4199 ;; Tracked objects:
  4200 ;;		On entry : 0/0
  4201 ;;		On exit  : 0/0
  4202 ;;		Unchanged: 0/0
  4203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4205 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4207 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;Total ram usage:        1 bytes
  4209 ;; Hardware stack levels used:    1
  4210 ;; Hardware stack levels required when called:    7
  4211 ;; This function calls:
  4212 ;;		_I2C_Master_Start
  4213 ;;		_I2C_Master_Stop
  4214 ;;		_I2C_Master_Write
  4215 ;; This function is called by:
  4216 ;;		_main
  4217 ;; This function uses a non-reentrant model
  4218 ;;
  4219                           
  4220                           	psect	text32
  4221  0015CE                     __ptext32:
  4222                           	opt stack 0
  4223  0015CE                     _set_time:
  4224                           	opt stack 23
  4225                           
  4226                           ;main.c: 73: I2C_Master_Start();
  4227                           
  4228                           ; BSR set to: 0
  4229                           ;incstack = 0
  4230  0015CE  ECDC  F00E         	call	_I2C_Master_Start	;wreg free
  4231                           
  4232                           ;main.c: 74: I2C_Master_Write(0b11010000);
  4233  0015D2  0E00               	movlw	0
  4234  0015D4  0100               	movlb	0	; () banked
  4235  0015D6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4236  0015D8  0ED0               	movlw	208
  4237  0015DA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4238  0015DC  ECD3  F00E         	call	_I2C_Master_Write	;wreg free
  4239                           
  4240                           ;main.c: 75: I2C_Master_Write(0x00);
  4241  0015E0  0E00               	movlw	0
  4242  0015E2  0100               	movlb	0	; () banked
  4243  0015E4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4244  0015E6  0E00               	movlw	0
  4245  0015E8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4246  0015EA  ECD3  F00E         	call	_I2C_Master_Write	;wreg free
  4247                           
  4248                           ;main.c: 76: for(char i=0; i<7; i++){
  4249  0015EE  0E00               	movlw	0
  4250  0015F0  0100               	movlb	0	; () banked
  4251  0015F2  6F83               	movwf	set_time@i& (0+255),b
  4252  0015F4                     l4645:
  4253                           
  4254                           ; BSR set to: 0
  4255  0015F4  0E06               	movlw	6
  4256  0015F6  0100               	movlb	0	; () banked
  4257  0015F8  6583               	cpfsgt	set_time@i& (0+255),b
  4258  0015FA  D001               	goto	l4649
  4259  0015FC  D016               	goto	l4655
  4260  0015FE                     l4649:
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;main.c: 77: I2C_Master_Write(real_time[i]);
  4264  0015FE  0100               	movlb	0	; () banked
  4265  001600  5183               	movf	set_time@i& (0+255),w,b
  4266  001602  0D01               	mullw	1
  4267  001604  0E0C               	movlw	low _real_time
  4268  001606  24F3               	addwf	prodl,w,c
  4269  001608  6EF6               	movwf	tblptrl,c
  4270  00160A  0EFF               	movlw	high _real_time
  4271  00160C  20F4               	addwfc	prodh,w,c
  4272  00160E  6EF7               	movwf	tblptrh,c
  4273  001610                     	if	1	;There are 3 active tblptr bytes
  4274  001610  6AF8               	clrf	tblptru,c
  4275  001612  0E00               	movlw	low (__mediumconst shr (0+16))
  4276  001614  22F8               	addwfc	tblptru,f,c
  4277  001616                     	endif
  4278  001616  0008               	tblrd		*
  4279  001618  50F5               	movf	tablat,w,c
  4280  00161A  0100               	movlb	0	; () banked
  4281  00161C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4282  00161E  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  4283  001620  ECD3  F00E         	call	_I2C_Master_Write	;wreg free
  4284  001624  0100               	movlb	0	; () banked
  4285  001626  2B83               	incf	set_time@i& (0+255),f,b
  4286  001628  D7E5               	goto	l4645
  4287  00162A                     l4655:
  4288                           
  4289                           ; BSR set to: 0
  4290                           ;main.c: 78: }
  4291                           ;main.c: 79: I2C_Master_Stop();
  4292  00162A  ECD8  F00E         	call	_I2C_Master_Stop	;wreg free
  4293  00162E  0012               	return		;funcret
  4294  001630                     __end_of_set_time:
  4295                           	opt stack 0
  4296                           tosu	equ	0xFFF
  4297                           tosh	equ	0xFFE
  4298                           tosl	equ	0xFFD
  4299                           pclath	equ	0xFFA
  4300                           tblptru	equ	0xFF8
  4301                           tblptrh	equ	0xFF7
  4302                           tblptrl	equ	0xFF6
  4303                           tablat	equ	0xFF5
  4304                           prodh	equ	0xFF4
  4305                           prodl	equ	0xFF3
  4306                           intcon	equ	0xFF2
  4307                           intcon3	equ	0xFF0
  4308                           postinc0	equ	0xFEE
  4309                           wreg	equ	0xFE8
  4310                           indf2	equ	0xFDF
  4311                           fsr2h	equ	0xFDA
  4312                           fsr2l	equ	0xFD9
  4313                           status	equ	0xFD8
  4314                           
  4315 ;; *************** function _results *****************
  4316 ;; Defined at:
  4317 ;;		line 222 in file "operation.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;		None
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;  i               1   42[BANK0 ] unsigned char 
  4322 ;;  i               1   41[BANK0 ] unsigned char 
  4323 ;;  i               1   40[BANK0 ] unsigned char 
  4324 ;;  keypress_tem    1   39[BANK0 ] unsigned char 
  4325 ;;  keypress        1   38[BANK0 ] unsigned char 
  4326 ;; Return value:  Size  Location     Type
  4327 ;;                  1    wreg      void 
  4328 ;; Registers used:
  4329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4330 ;; Tracked objects:
  4331 ;;		On entry : 0/0
  4332 ;;		On exit  : 0/0
  4333 ;;		Unchanged: 0/0
  4334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4336 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4337 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4338 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4339 ;;Total ram usage:        7 bytes
  4340 ;; Hardware stack levels used:    1
  4341 ;; Hardware stack levels required when called:    8
  4342 ;; This function calls:
  4343 ;;		_initLCD
  4344 ;;		_lcdInst
  4345 ;;		_printf
  4346 ;; This function is called by:
  4347 ;;		_main
  4348 ;; This function uses a non-reentrant model
  4349 ;;
  4350                           
  4351                           	psect	text33
  4352  000C92                     __ptext33:
  4353                           	opt stack 0
  4354  000C92                     _results:
  4355                           	opt stack 22
  4356                           
  4357                           ;operation.c: 224: tot = pop_can + pop_can_tab + tin_can + tin_can_label;
  4358                           
  4359                           ;incstack = 0
  4360  000C92  0100               	movlb	0	; () banked
  4361  000C94  51C0               	movf	_pop_can_tab& (0+255),w,b
  4362  000C96  0100               	movlb	0	; () banked
  4363  000C98  25C2               	addwf	_pop_can& (0+255),w,b
  4364  000C9A  0100               	movlb	0	; () banked
  4365  000C9C  6FA4               	movwf	??_results& (0+255),b
  4366  000C9E  0100               	movlb	0	; () banked
  4367  000CA0  51C1               	movf	(_pop_can_tab+1)& (0+255),w,b
  4368  000CA2  0100               	movlb	0	; () banked
  4369  000CA4  21C3               	addwfc	(_pop_can+1)& (0+255),w,b
  4370  000CA6  0100               	movlb	0	; () banked
  4371  000CA8  6FA5               	movwf	(??_results+1)& (0+255),b
  4372  000CAA  0100               	movlb	0	; () banked
  4373  000CAC  51C4               	movf	_tin_can& (0+255),w,b
  4374  000CAE  0100               	movlb	0	; () banked
  4375  000CB0  27A4               	addwf	??_results& (0+255),f,b
  4376  000CB2  0100               	movlb	0	; () banked
  4377  000CB4  51C5               	movf	(_tin_can+1)& (0+255),w,b
  4378  000CB6  0100               	movlb	0	; () banked
  4379  000CB8  23A5               	addwfc	(??_results+1)& (0+255),f,b
  4380  000CBA  0100               	movlb	0	; () banked
  4381  000CBC  51C6               	movf	_tin_can_label& (0+255),w,b
  4382  000CBE  0100               	movlb	0	; () banked
  4383  000CC0  25A4               	addwf	??_results& (0+255),w,b
  4384  000CC2  6E43               	movwf	_tot,c
  4385  000CC4  0100               	movlb	0	; () banked
  4386  000CC6  51C7               	movf	(_tin_can_label+1)& (0+255),w,b
  4387  000CC8  0100               	movlb	0	; () banked
  4388  000CCA  21A5               	addwfc	(??_results+1)& (0+255),w,b
  4389  000CCC  6E44               	movwf	_tot+1,c
  4390  000CCE                     l4793:
  4391                           
  4392                           ; BSR set to: 0
  4393                           ;operation.c: 227: lcdInst(0b10000000);;
  4394  000CCE  0E80               	movlw	128
  4395  000CD0  ECA3  F00E         	call	_lcdInst
  4396                           
  4397                           ;operation.c: 228: initLCD();
  4398  000CD4  EC1D  F00C         	call	_initLCD	;wreg free
  4399                           
  4400                           ;operation.c: 229: __nop();
  4401  000CD8  F000               	nop	
  4402                           
  4403                           ;operation.c: 230: __nop();
  4404  000CDA  F000               	nop	
  4405                           
  4406                           ;operation.c: 232: printf("A:Total   B:Pop ");
  4407  000CDC  0E4D               	movlw	low STR_7
  4408  000CDE  0100               	movlb	0	; () banked
  4409  000CE0  6F8E               	movwf	printf@f& (0+255),b
  4410  000CE2  0EFF               	movlw	high STR_7
  4411  000CE4  0100               	movlb	0	; () banked
  4412  000CE6  6F8F               	movwf	(printf@f+1)& (0+255),b
  4413  000CE8  EC09  F000         	call	_printf	;wreg free
  4414                           
  4415                           ;operation.c: 233: lcdInst(0b11000000);;
  4416  000CEC  0EC0               	movlw	192
  4417  000CEE  ECA3  F00E         	call	_lcdInst
  4418                           
  4419                           ;operation.c: 234: printf("C:Tin     D:Time");
  4420  000CF2  0E5E               	movlw	low STR_8
  4421  000CF4  0100               	movlb	0	; () banked
  4422  000CF6  6F8E               	movwf	printf@f& (0+255),b
  4423  000CF8  0EFF               	movlw	high STR_8
  4424  000CFA  0100               	movlb	0	; () banked
  4425  000CFC  6F8F               	movwf	(printf@f+1)& (0+255),b
  4426  000CFE  EC09  F000         	call	_printf	;wreg free
  4427                           
  4428                           ;operation.c: 235: (INTCONbits.GIE = 1);
  4429  000D02  8EF2               	bsf	intcon,7,c	;volatile
  4430                           
  4431                           ;operation.c: 236: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  4432  000D04  0E00               	movlw	0
  4433  000D06  0100               	movlb	0	; () banked
  4434  000D08  6FA8               	movwf	results@i& (0+255),b
  4435  000D0A                     l4811:
  4436                           
  4437                           ; BSR set to: 0
  4438  000D0A  0E09               	movlw	9
  4439  000D0C  0100               	movlb	0	; () banked
  4440  000D0E  65A8               	cpfsgt	results@i& (0+255),b
  4441  000D10  D001               	goto	l4815
  4442  000D12  D010               	goto	l4819
  4443  000D14                     l4815:
  4444                           
  4445                           ; BSR set to: 0
  4446  000D14  0E02               	movlw	2
  4447  000D16  0100               	movlb	0	; () banked
  4448  000D18  6FA5               	movwf	(??_results+1)& (0+255),b
  4449  000D1A  0E3F               	movlw	63
  4450  000D1C  0100               	movlb	0	; () banked
  4451  000D1E  6FA4               	movwf	??_results& (0+255),b
  4452  000D20  0E2B               	movlw	43
  4453  000D22                     u4277:
  4454  000D22  2EE8               	decfsz	wreg,f,c
  4455  000D24  D7FE               	bra	u4277
  4456  000D26  2FA4               	decfsz	??_results& (0+255),f,b
  4457  000D28  D7FC               	bra	u4277
  4458  000D2A  2FA5               	decfsz	(??_results+1)& (0+255),f,b
  4459  000D2C  D7FA               	bra	u4277
  4460  000D2E  0100               	movlb	0	; () banked
  4461  000D30  2BA8               	incf	results@i& (0+255),f,b
  4462  000D32  D7EB               	goto	l4811
  4463  000D34                     l4819:
  4464                           
  4465                           ; BSR set to: 0
  4466                           ;operation.c: 237: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  4467  000D34  0E00               	movlw	0
  4468  000D36  0100               	movlb	0	; () banked
  4469  000D38  6FA9               	movwf	results@i_899& (0+255),b
  4470  000D3A                     l4821:
  4471                           
  4472                           ; BSR set to: 0
  4473  000D3A  0E09               	movlw	9
  4474  000D3C  0100               	movlb	0	; () banked
  4475  000D3E  65A9               	cpfsgt	results@i_899& (0+255),b
  4476  000D40  D001               	goto	l4825
  4477  000D42  D010               	goto	l493
  4478  000D44                     l4825:
  4479                           
  4480                           ; BSR set to: 0
  4481  000D44  0E02               	movlw	2
  4482  000D46  0100               	movlb	0	; () banked
  4483  000D48  6FA5               	movwf	(??_results+1)& (0+255),b
  4484  000D4A  0E3F               	movlw	63
  4485  000D4C  0100               	movlb	0	; () banked
  4486  000D4E  6FA4               	movwf	??_results& (0+255),b
  4487  000D50  0E2B               	movlw	43
  4488  000D52                     u4287:
  4489  000D52  2EE8               	decfsz	wreg,f,c
  4490  000D54  D7FE               	bra	u4287
  4491  000D56  2FA4               	decfsz	??_results& (0+255),f,b
  4492  000D58  D7FC               	bra	u4287
  4493  000D5A  2FA5               	decfsz	(??_results+1)& (0+255),f,b
  4494  000D5C  D7FA               	bra	u4287
  4495  000D5E  0100               	movlb	0	; () banked
  4496  000D60  2BA9               	incf	results@i_899& (0+255),f,b
  4497  000D62  D7EB               	goto	l4821
  4498  000D64                     l493:
  4499                           
  4500                           ; BSR set to: 0
  4501                           ;operation.c: 238: (INTCONbits.GIE = 0);
  4502  000D64  9EF2               	bcf	intcon,7,c	;volatile
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;operation.c: 239: initLCD();
  4506  000D66  EC1D  F00C         	call	_initLCD	;wreg free
  4507                           
  4508                           ;operation.c: 240: __nop();
  4509  000D6A  F000               	nop	
  4510                           
  4511                           ;operation.c: 241: __nop();
  4512  000D6C  F000               	nop	
  4513                           
  4514                           ;operation.c: 242: printf("Press 0 to Reset");
  4515  000D6E  0E6F               	movlw	low STR_9
  4516  000D70  0100               	movlb	0	; () banked
  4517  000D72  6F8E               	movwf	printf@f& (0+255),b
  4518  000D74  0EFF               	movlw	high STR_9
  4519  000D76  0100               	movlb	0	; () banked
  4520  000D78  6F8F               	movwf	(printf@f+1)& (0+255),b
  4521  000D7A  EC09  F000         	call	_printf	;wreg free
  4522                           
  4523                           ;operation.c: 243: (INTCONbits.GIE = 1);
  4524  000D7E  8EF2               	bsf	intcon,7,c	;volatile
  4525                           
  4526                           ;operation.c: 244: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  4527  000D80  0E00               	movlw	0
  4528  000D82  0100               	movlb	0	; () banked
  4529  000D84  6FAA               	movwf	results@i_901& (0+255),b
  4530  000D86                     l4841:
  4531                           
  4532                           ; BSR set to: 0
  4533  000D86  0E09               	movlw	9
  4534  000D88  0100               	movlb	0	; () banked
  4535  000D8A  65AA               	cpfsgt	results@i_901& (0+255),b
  4536  000D8C  D001               	goto	l4845
  4537  000D8E  D010               	goto	l495
  4538  000D90                     l4845:
  4539                           
  4540                           ; BSR set to: 0
  4541  000D90  0E02               	movlw	2
  4542  000D92  0100               	movlb	0	; () banked
  4543  000D94  6FA5               	movwf	(??_results+1)& (0+255),b
  4544  000D96  0E3F               	movlw	63
  4545  000D98  0100               	movlb	0	; () banked
  4546  000D9A  6FA4               	movwf	??_results& (0+255),b
  4547  000D9C  0E2B               	movlw	43
  4548  000D9E                     u4297:
  4549  000D9E  2EE8               	decfsz	wreg,f,c
  4550  000DA0  D7FE               	bra	u4297
  4551  000DA2  2FA4               	decfsz	??_results& (0+255),f,b
  4552  000DA4  D7FC               	bra	u4297
  4553  000DA6  2FA5               	decfsz	(??_results+1)& (0+255),f,b
  4554  000DA8  D7FA               	bra	u4297
  4555  000DAA  0100               	movlb	0	; () banked
  4556  000DAC  2BAA               	incf	results@i_901& (0+255),f,b
  4557  000DAE  D7EB               	goto	l4841
  4558  000DB0                     l495:
  4559                           
  4560                           ; BSR set to: 0
  4561                           ;operation.c: 245: (INTCONbits.GIE = 0);
  4562  000DB0  9EF2               	bcf	intcon,7,c	;volatile
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;operation.c: 248: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4566  000DB2  3881               	swapf	3969,w,c	;volatile
  4567  000DB4  0B0F               	andlw	15
  4568  000DB6  0B0F               	andlw	15
  4569  000DB8  0100               	movlb	0	; () banked
  4570  000DBA  6FA6               	movwf	results@keypress& (0+255),b
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;operation.c: 249: unsigned char keypress_temp = keys[keypress];
  4574  000DBC  0100               	movlb	0	; () banked
  4575  000DBE  51A6               	movf	results@keypress& (0+255),w,b
  4576  000DC0  0D01               	mullw	1
  4577  000DC2  0EE9               	movlw	low _keys
  4578  000DC4  24F3               	addwf	prodl,w,c
  4579  000DC6  6EF6               	movwf	tblptrl,c
  4580  000DC8  0EFE               	movlw	high _keys
  4581  000DCA  20F4               	addwfc	prodh,w,c
  4582  000DCC  6EF7               	movwf	tblptrh,c
  4583  000DCE                     	if	1	;There are 3 active tblptr bytes
  4584  000DCE  6AF8               	clrf	tblptru,c
  4585  000DD0  0E00               	movlw	low (__mediumconst shr (0+16))
  4586  000DD2  22F8               	addwfc	tblptru,f,c
  4587  000DD4                     	endif
  4588  000DD4  0008               	tblrd		*
  4589  000DD6  CFF5 F0A7          	movff	tablat,results@keypress_temp
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;operation.c: 251: if(keypress_temp == '0'){
  4593  000DDA  0E30               	movlw	48
  4594  000DDC  0100               	movlb	0	; () banked
  4595  000DDE  19A7               	xorwf	results@keypress_temp& (0+255),w,b
  4596  000DE0  A4D8               	btfss	status,2,c
  4597  000DE2  D775               	goto	l4793
  4598                           
  4599                           ; BSR set to: 0
  4600                           ;operation.c: 252: pop_can = pop_can_tab = tin_can = tin_can_label = 0;
  4601  000DE4  0E00               	movlw	0
  4602  000DE6  0100               	movlb	0	; () banked
  4603  000DE8  6FC7               	movwf	(_tin_can_label+1)& (0+255),b
  4604  000DEA  0E00               	movlw	0
  4605  000DEC  6FC6               	movwf	_tin_can_label& (0+255),b
  4606  000DEE  C0C6  F0C4         	movff	_tin_can_label,_tin_can
  4607  000DF2  C0C7  F0C5         	movff	_tin_can_label+1,_tin_can+1
  4608  000DF6  C0C4  F0C0         	movff	_tin_can,_pop_can_tab
  4609  000DFA  C0C5  F0C1         	movff	_tin_can+1,_pop_can_tab+1
  4610  000DFE  C0C0  F0C2         	movff	_pop_can_tab,_pop_can
  4611  000E02  C0C1  F0C3         	movff	_pop_can_tab+1,_pop_can+1
  4612                           
  4613                           ;operation.c: 253: break;
  4614  000E06  0012               	return	
  4615  000E08                     __end_of_results:
  4616                           	opt stack 0
  4617                           tosu	equ	0xFFF
  4618                           tosh	equ	0xFFE
  4619                           tosl	equ	0xFFD
  4620                           pclath	equ	0xFFA
  4621                           tblptru	equ	0xFF8
  4622                           tblptrh	equ	0xFF7
  4623                           tblptrl	equ	0xFF6
  4624                           tablat	equ	0xFF5
  4625                           prodh	equ	0xFF4
  4626                           prodl	equ	0xFF3
  4627                           intcon	equ	0xFF2
  4628                           intcon3	equ	0xFF0
  4629                           postinc0	equ	0xFEE
  4630                           wreg	equ	0xFE8
  4631                           indf2	equ	0xFDF
  4632                           fsr2h	equ	0xFDA
  4633                           fsr2l	equ	0xFD9
  4634                           status	equ	0xFD8
  4635                           
  4636 ;; *************** function _printf *****************
  4637 ;; Defined at:
  4638 ;;		line 464 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
  4639 ;; Parameters:    Size  Location     Type
  4640 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  4641 ;;		 -> STR_15(13), STR_14(15), STR_13(15), STR_12(17), 
  4642 ;;		 -> STR_11(22), STR_10(19), STR_9(17), STR_8(17), 
  4643 ;;		 -> STR_7(17), STR_6(13), STR_5(9), STR_4(17), 
  4644 ;;		 -> STR_3(15), STR_2(13), STR_1(2), 
  4645 ;; Auto vars:     Size  Location     Type
  4646 ;;  idx             1   26[BANK0 ] unsigned char 
  4647 ;;  tmpval          4    0        struct .
  4648 ;;  cp              3    0        PTR const unsigned char 
  4649 ;;  width           2   33[BANK0 ] int 
  4650 ;;  val             2   30[BANK0 ] unsigned int 
  4651 ;;  ap              2   27[BANK0 ] PTR void [1]
  4652 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4653 ;;  len             2    0        unsigned int 
  4654 ;;  c               1   35[BANK0 ] char 
  4655 ;;  flag            1   32[BANK0 ] unsigned char 
  4656 ;;  prec            1   29[BANK0 ] char 
  4657 ;; Return value:  Size  Location     Type
  4658 ;;                  2   14[BANK0 ] int 
  4659 ;; Registers used:
  4660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4661 ;; Tracked objects:
  4662 ;;		On entry : 0/0
  4663 ;;		On exit  : 0/0
  4664 ;;		Unchanged: 0/0
  4665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4666 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4667 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4668 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4669 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4670 ;;Total ram usage:       22 bytes
  4671 ;; Hardware stack levels used:    1
  4672 ;; Hardware stack levels required when called:    7
  4673 ;; This function calls:
  4674 ;;		___lwdiv
  4675 ;;		___lwmod
  4676 ;;		___wmul
  4677 ;;		_isdigit
  4678 ;;		_putch
  4679 ;; This function is called by:
  4680 ;;		_standby
  4681 ;;		_startSorting
  4682 ;;		_initialization
  4683 ;;		_results
  4684 ;; This function uses a non-reentrant model
  4685 ;;
  4686                           
  4687                           	psect	text34
  4688  000012                     __ptext34:
  4689                           	opt stack 0
  4690  000012                     _printf:
  4691                           	opt stack 22
  4692                           
  4693                           ;doprnt.c: 466: va_list ap;
  4694                           ;doprnt.c: 499: signed char c;
  4695                           ;doprnt.c: 501: int width;
  4696                           ;doprnt.c: 506: signed char prec;
  4697                           ;doprnt.c: 508: unsigned char flag;
  4698                           ;doprnt.c: 523: union {
  4699                           ;doprnt.c: 524: unsigned long vd;
  4700                           ;doprnt.c: 525: double integ;
  4701                           ;doprnt.c: 526: } tmpval;
  4702                           ;doprnt.c: 528: unsigned int val;
  4703                           ;doprnt.c: 529: unsigned len;
  4704                           ;doprnt.c: 530: const char * cp;
  4705                           ;doprnt.c: 533: *ap = __va_start();
  4706                           
  4707                           ; BSR set to: 0
  4708                           ;incstack = 0
  4709  000012  0E90               	movlw	low (?_printf+2)
  4710  000014  0100               	movlb	0	; () banked
  4711  000016  6F9B               	movwf	printf@ap& (0+255),b
  4712  000018  0E00               	movlw	high (?_printf+2)
  4713  00001A  0100               	movlb	0	; () banked
  4714  00001C  6F9C               	movwf	(printf@ap+1)& (0+255),b
  4715                           
  4716                           ;doprnt.c: 536: while(c = *f++) {
  4717  00001E  D1D8               	goto	l4311
  4718  000020                     l4185:
  4719                           
  4720                           ; BSR set to: 0
  4721                           ;doprnt.c: 538: if(c != '%')
  4722  000020  0E25               	movlw	37
  4723  000022  0100               	movlb	0	; () banked
  4724  000024  19A3               	xorwf	printf@c& (0+255),w,b
  4725  000026  B4D8               	btfsc	status,2,c
  4726  000028  D005               	goto	l4189
  4727                           
  4728                           ; BSR set to: 0
  4729                           ;doprnt.c: 540: {
  4730                           ;doprnt.c: 541: (putch(c) );
  4731  00002A  0100               	movlb	0	; () banked
  4732  00002C  51A3               	movf	printf@c& (0+255),w,b
  4733  00002E  EC9B  F00E         	call	_putch
  4734                           
  4735                           ;doprnt.c: 542: continue;
  4736  000032  D1CE               	goto	l4311
  4737  000034                     l4189:
  4738                           
  4739                           ;doprnt.c: 543: }
  4740                           ;doprnt.c: 546: width = 0;
  4741  000034  0E00               	movlw	0
  4742  000036  0100               	movlb	0	; () banked
  4743  000038  6FA2               	movwf	(printf@width+1)& (0+255),b
  4744  00003A  0E00               	movlw	0
  4745  00003C  6FA1               	movwf	printf@width& (0+255),b
  4746                           
  4747                           ;doprnt.c: 548: flag = 0;
  4748  00003E  0E00               	movlw	0
  4749  000040  0100               	movlb	0	; () banked
  4750  000042  6FA0               	movwf	printf@flag& (0+255),b
  4751                           
  4752                           ; BSR set to: 0
  4753                           ;doprnt.c: 551: switch(*f) {
  4754                           
  4755                           ;doprnt.c: 550: for(;;) {
  4756  000044  D005               	goto	l4195
  4757  000046                     l4191:
  4758                           
  4759                           ;doprnt.c: 580: flag |= 0x04;
  4760  000046  0100               	movlb	0	; () banked
  4761  000048  85A0               	bsf	printf@flag& (0+255),2,b
  4762                           
  4763                           ;doprnt.c: 581: f++;
  4764  00004A  0100               	movlb	0	; () banked
  4765  00004C  4B8E               	infsnz	printf@f& (0+255),f,b
  4766  00004E  2B8F               	incf	(printf@f+1)& (0+255),f,b
  4767  000050                     l4195:
  4768  000050  C08E  FFF6         	movff	printf@f,tblptrl
  4769  000054  C08F  FFF7         	movff	printf@f+1,tblptrh
  4770  000058                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4771  000058  6AF8               	clrf	tblptru,c
  4772  00005A                     	endif
  4773  00005A                     	if	0	;tblptru may be non-zero
  4774  00005A                     	endif
  4775  00005A  0008               	tblrd		*
  4776  00005C  50F5               	movf	tablat,w,c
  4777                           
  4778                           ; Switch size 1, requested type "space"
  4779                           ; Number of cases is 1, Range of values is 48 to 48
  4780                           ; switch strategies available:
  4781                           ; Name         Instructions Cycles
  4782                           ; simple_byte            4     3 (average)
  4783                           ;	Chosen strategy is simple_byte
  4784  00005E  0A30               	xorlw	48	; case 48
  4785  000060  B4D8               	btfsc	status,2,c
  4786  000062  D7F1               	goto	l4191
  4787                           
  4788                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4789                           
  4790                           ;doprnt.c: 586: }
  4791                           
  4792                           ;doprnt.c: 585: break;
  4793  000064  C08E  FFF6         	movff	printf@f,tblptrl
  4794  000068  C08F  FFF7         	movff	printf@f+1,tblptrh
  4795  00006C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4796  00006C  6AF8               	clrf	tblptru,c
  4797  00006E                     	endif
  4798  00006E                     	if	0	;tblptru may be non-zero
  4799  00006E                     	endif
  4800  00006E  0008               	tblrd		*
  4801  000070  50F5               	movf	tablat,w,c
  4802  000072  EC21  F00D         	call	_isdigit
  4803  000076  A0D8               	btfss	status,0,c
  4804  000078  D046               	goto	l4213
  4805                           
  4806                           ;doprnt.c: 598: width = 0;
  4807  00007A  0E00               	movlw	0
  4808  00007C  0100               	movlb	0	; () banked
  4809  00007E  6FA2               	movwf	(printf@width+1)& (0+255),b
  4810  000080  0E00               	movlw	0
  4811  000082  6FA1               	movwf	printf@width& (0+255),b
  4812  000084                     l4201:
  4813                           
  4814                           ;doprnt.c: 600: width *= 10;
  4815  000084  C0A1  F088         	movff	printf@width,___wmul@multiplier
  4816  000088  C0A2  F089         	movff	printf@width+1,___wmul@multiplier+1
  4817  00008C  0E00               	movlw	0
  4818  00008E  0100               	movlb	0	; () banked
  4819  000090  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4820  000092  0E0A               	movlw	10
  4821  000094  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  4822  000096  ECC0  F00C         	call	___wmul	;wreg free
  4823  00009A  C088  F0A1         	movff	?___wmul,printf@width
  4824  00009E  C089  F0A2         	movff	?___wmul+1,printf@width+1
  4825                           
  4826                           ;doprnt.c: 601: width += *f++ - '0';
  4827  0000A2  0ED0               	movlw	208
  4828  0000A4  0100               	movlb	0	; () banked
  4829  0000A6  6F96               	movwf	??_printf& (0+255),b
  4830  0000A8  0EFF               	movlw	255
  4831  0000AA  0100               	movlb	0	; () banked
  4832  0000AC  6F97               	movwf	(??_printf+1)& (0+255),b
  4833  0000AE  C08E  FFF6         	movff	printf@f,tblptrl
  4834  0000B2  C08F  FFF7         	movff	printf@f+1,tblptrh
  4835  0000B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4836  0000B6  6AF8               	clrf	tblptru,c
  4837  0000B8                     	endif
  4838  0000B8                     	if	0	;tblptru may be non-zero
  4839  0000B8                     	endif
  4840  0000B8  0008               	tblrd		*
  4841  0000BA  50F5               	movf	tablat,w,c
  4842  0000BC  0100               	movlb	0	; () banked
  4843  0000BE  6F98               	movwf	(??_printf+2)& (0+255),b
  4844  0000C0  6B99               	clrf	(??_printf+3)& (0+255),b
  4845  0000C2  0100               	movlb	0	; () banked
  4846  0000C4  5196               	movf	??_printf& (0+255),w,b
  4847  0000C6  0100               	movlb	0	; () banked
  4848  0000C8  2798               	addwf	(??_printf+2)& (0+255),f,b
  4849  0000CA  0100               	movlb	0	; () banked
  4850  0000CC  5197               	movf	(??_printf+1)& (0+255),w,b
  4851  0000CE  0100               	movlb	0	; () banked
  4852  0000D0  2399               	addwfc	(??_printf+3)& (0+255),f,b
  4853  0000D2  0100               	movlb	0	; () banked
  4854  0000D4  5198               	movf	(??_printf+2)& (0+255),w,b
  4855  0000D6  0100               	movlb	0	; () banked
  4856  0000D8  27A1               	addwf	printf@width& (0+255),f,b
  4857  0000DA  0100               	movlb	0	; () banked
  4858  0000DC  5199               	movf	(??_printf+3)& (0+255),w,b
  4859  0000DE  0100               	movlb	0	; () banked
  4860  0000E0  23A2               	addwfc	(printf@width+1)& (0+255),f,b
  4861                           
  4862                           ; BSR set to: 0
  4863  0000E2  0100               	movlb	0	; () banked
  4864  0000E4  4B8E               	infsnz	printf@f& (0+255),f,b
  4865  0000E6  2B8F               	incf	(printf@f+1)& (0+255),f,b
  4866                           
  4867                           ; BSR set to: 0
  4868                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4869  0000E8  C08E  FFF6         	movff	printf@f,tblptrl
  4870  0000EC  C08F  FFF7         	movff	printf@f+1,tblptrh
  4871  0000F0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4872  0000F0  6AF8               	clrf	tblptru,c
  4873  0000F2                     	endif
  4874  0000F2                     	if	0	;tblptru may be non-zero
  4875  0000F2                     	endif
  4876  0000F2  0008               	tblrd		*
  4877  0000F4  50F5               	movf	tablat,w,c
  4878  0000F6  EC21  F00D         	call	_isdigit
  4879  0000FA  A0D8               	btfss	status,0,c
  4880  0000FC  D004               	goto	l4213
  4881  0000FE  D7C2               	goto	l4201
  4882  000100                     l4209:
  4883                           
  4884                           ;doprnt.c: 721: flag |= 0x80;
  4885  000100  0100               	movlb	0	; () banked
  4886  000102  8FA0               	bsf	printf@flag& (0+255),7,b
  4887                           
  4888                           ;doprnt.c: 723: break;
  4889  000104  D01A               	goto	l659
  4890  000106                     l4213:
  4891  000106  C08E  FFF6         	movff	printf@f,tblptrl
  4892  00010A  C08F  FFF7         	movff	printf@f+1,tblptrh
  4893  00010E  0100               	movlb	0	; () banked
  4894  000110  4B8E               	infsnz	printf@f& (0+255),f,b
  4895  000112  2B8F               	incf	(printf@f+1)& (0+255),f,b
  4896  000114                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4897  000114  6AF8               	clrf	tblptru,c
  4898  000116                     	endif
  4899  000116                     	if	0	;tblptru may be non-zero
  4900  000116                     	endif
  4901  000116  0008               	tblrd		*
  4902  000118  CFF5 F0A3          	movff	tablat,printf@c
  4903  00011C  0100               	movlb	0	; () banked
  4904  00011E  51A3               	movf	printf@c& (0+255),w,b
  4905                           
  4906                           ; Switch size 1, requested type "space"
  4907                           ; Number of cases is 4, Range of values is 0 to 120
  4908                           ; switch strategies available:
  4909                           ; Name         Instructions Cycles
  4910                           ; simple_byte           13     7 (average)
  4911                           ;	Chosen strategy is simple_byte
  4912  000120  0A00               	xorlw	0	; case 0
  4913  000122  B4D8               	btfsc	status,2,c
  4914  000124  0012               	return	
  4915  000126  0A64               	xorlw	100	; case 100
  4916  000128  B4D8               	btfsc	status,2,c
  4917  00012A  D007               	goto	l659
  4918  00012C  0A0D               	xorlw	13	; case 105
  4919  00012E  B4D8               	btfsc	status,2,c
  4920  000130  D004               	goto	l659
  4921  000132  0A11               	xorlw	17	; case 120
  4922  000134  B4D8               	btfsc	status,2,c
  4923  000136  D7E4               	goto	l4209
  4924  000138  D14B               	goto	l4311
  4925  00013A                     l659:
  4926                           
  4927                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4928  00013A  0100               	movlb	0	; () banked
  4929  00013C  BFA0               	btfsc	printf@flag& (0+255),7,b
  4930  00013E  D019               	goto	l4225
  4931                           
  4932                           ; BSR set to: 0
  4933                           ;doprnt.c: 1253: {
  4934                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4935  000140  C09B  FFD9         	movff	printf@ap,fsr2l
  4936  000144  C09C  FFDA         	movff	printf@ap+1,fsr2h
  4937  000148  CFDE F09E          	movff	postinc2,printf@val
  4938  00014C  CFDD F09F          	movff	postdec2,printf@val+1
  4939                           
  4940                           ; BSR set to: 0
  4941  000150  0E02               	movlw	2
  4942  000152  0100               	movlb	0	; () banked
  4943  000154  279B               	addwf	printf@ap& (0+255),f,b
  4944  000156  0E00               	movlw	0
  4945  000158  239C               	addwfc	(printf@ap+1)& (0+255),f,b
  4946                           
  4947                           ; BSR set to: 0
  4948                           ;doprnt.c: 1261: if((int)val < 0) {
  4949  00015A  0100               	movlb	0	; () banked
  4950  00015C  AF9F               	btfss	(printf@val+1)& (0+255),7,b
  4951  00015E  D059               	goto	l4259
  4952                           
  4953                           ; BSR set to: 0
  4954                           ;doprnt.c: 1262: flag |= 0x03;
  4955  000160  0E03               	movlw	3
  4956  000162  0100               	movlb	0	; () banked
  4957  000164  13A0               	iorwf	printf@flag& (0+255),f,b
  4958                           
  4959                           ; BSR set to: 0
  4960                           ;doprnt.c: 1263: val = -val;
  4961  000166  0100               	movlb	0	; () banked
  4962  000168  6D9E               	negf	printf@val& (0+255),b
  4963  00016A  1F9F               	comf	(printf@val+1)& (0+255),f,b
  4964  00016C  B0D8               	btfsc	status,0,c
  4965  00016E  2B9F               	incf	(printf@val+1)& (0+255),f,b
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;doprnt.c: 1264: }
  4969                           ;doprnt.c: 1266: }
  4970  000170  D050               	goto	l4259
  4971  000172                     l4225:
  4972                           
  4973                           ; BSR set to: 0
  4974                           ;doprnt.c: 1268: else
  4975                           ;doprnt.c: 1273: {
  4976                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4977  000172  C09B  FFD9         	movff	printf@ap,fsr2l
  4978  000176  C09C  FFDA         	movff	printf@ap+1,fsr2h
  4979  00017A  CFDE F09E          	movff	postinc2,printf@val
  4980  00017E  CFDD F09F          	movff	postdec2,printf@val+1
  4981                           
  4982                           ; BSR set to: 0
  4983  000182  0E02               	movlw	2
  4984  000184  0100               	movlb	0	; () banked
  4985  000186  279B               	addwf	printf@ap& (0+255),f,b
  4986  000188  0E00               	movlw	0
  4987  00018A  239C               	addwfc	(printf@ap+1)& (0+255),f,b
  4988                           
  4989                           ; BSR set to: 0
  4990                           ;doprnt.c: 1287: }
  4991                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4992  00018C  D042               	goto	l4259
  4993  00018E                     l4229:
  4994                           
  4995                           ; BSR set to: 0
  4996                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4997  00018E  0E01               	movlw	1
  4998  000190  0100               	movlb	0	; () banked
  4999  000192  6FA3               	movwf	printf@c& (0+255),b
  5000  000194                     l4231:
  5001                           
  5002                           ; BSR set to: 0
  5003  000194  0E05               	movlw	5
  5004  000196  0100               	movlb	0	; () banked
  5005  000198  19A3               	xorwf	printf@c& (0+255),w,b
  5006  00019A  B4D8               	btfsc	status,2,c
  5007  00019C  D043               	goto	l4261
  5008                           
  5009                           ; BSR set to: 0
  5010                           ;doprnt.c: 1306: if(val < dpowers[c])
  5011                           
  5012                           ; BSR set to: 0
  5013                           
  5014                           ; BSR set to: 0
  5015  00019E  0100               	movlb	0	; () banked
  5016  0001A0  51A3               	movf	printf@c& (0+255),w,b
  5017  0001A2  0D02               	mullw	2
  5018  0001A4  0EFA               	movlw	low _dpowers
  5019  0001A6  24F3               	addwf	prodl,w,c
  5020  0001A8  6EF6               	movwf	tblptrl,c
  5021  0001AA  0EFE               	movlw	high _dpowers
  5022  0001AC  20F4               	addwfc	prodh,w,c
  5023  0001AE  6EF7               	movwf	tblptrh,c
  5024  0001B0                     	if	1	;There are 3 active tblptr bytes
  5025  0001B0  6AF8               	clrf	tblptru,c
  5026  0001B2  0E00               	movlw	low (__mediumconst shr (0+16))
  5027  0001B4  22F8               	addwfc	tblptru,f,c
  5028  0001B6                     	endif
  5029  0001B6  0009               	tblrd		*+
  5030  0001B8  50F5               	movf	tablat,w,c
  5031  0001BA  0100               	movlb	0	; () banked
  5032  0001BC  5D9E               	subwf	printf@val& (0+255),w,b
  5033  0001BE  0009               	tblrd		*+
  5034  0001C0  50F5               	movf	tablat,w,c
  5035  0001C2  0100               	movlb	0	; () banked
  5036  0001C4  599F               	subwfb	(printf@val+1)& (0+255),w,b
  5037  0001C6  A0D8               	btfss	status,0,c
  5038  0001C8  D02D               	goto	l4261
  5039                           
  5040                           ; BSR set to: 0
  5041                           
  5042                           ; BSR set to: 0
  5043                           
  5044                           ; BSR set to: 0
  5045                           ;doprnt.c: 1307: break;
  5046  0001CA  0100               	movlb	0	; () banked
  5047  0001CC  2BA3               	incf	printf@c& (0+255),f,b
  5048  0001CE  D7E2               	goto	l4231
  5049  0001D0                     l4243:
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5053  0001D0  0E01               	movlw	1
  5054  0001D2  0100               	movlb	0	; () banked
  5055  0001D4  6FA3               	movwf	printf@c& (0+255),b
  5056  0001D6                     l4245:
  5057                           
  5058                           ; BSR set to: 0
  5059  0001D6  0E04               	movlw	4
  5060  0001D8  0100               	movlb	0	; () banked
  5061  0001DA  19A3               	xorwf	printf@c& (0+255),w,b
  5062  0001DC  B4D8               	btfsc	status,2,c
  5063  0001DE  D022               	goto	l4261
  5064                           
  5065                           ; BSR set to: 0
  5066                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5067                           
  5068                           ; BSR set to: 0
  5069                           
  5070                           ; BSR set to: 0
  5071  0001E0  0100               	movlb	0	; () banked
  5072  0001E2  51A3               	movf	printf@c& (0+255),w,b
  5073  0001E4  0D02               	mullw	2
  5074  0001E6  0E04               	movlw	low _hexpowers
  5075  0001E8  24F3               	addwf	prodl,w,c
  5076  0001EA  6EF6               	movwf	tblptrl,c
  5077  0001EC  0EFF               	movlw	high _hexpowers
  5078  0001EE  20F4               	addwfc	prodh,w,c
  5079  0001F0  6EF7               	movwf	tblptrh,c
  5080  0001F2                     	if	1	;There are 3 active tblptr bytes
  5081  0001F2  6AF8               	clrf	tblptru,c
  5082  0001F4  0E00               	movlw	low (__mediumconst shr (0+16))
  5083  0001F6  22F8               	addwfc	tblptru,f,c
  5084  0001F8                     	endif
  5085  0001F8  0009               	tblrd		*+
  5086  0001FA  50F5               	movf	tablat,w,c
  5087  0001FC  0100               	movlb	0	; () banked
  5088  0001FE  5D9E               	subwf	printf@val& (0+255),w,b
  5089  000200  0009               	tblrd		*+
  5090  000202  50F5               	movf	tablat,w,c
  5091  000204  0100               	movlb	0	; () banked
  5092  000206  599F               	subwfb	(printf@val+1)& (0+255),w,b
  5093  000208  A0D8               	btfss	status,0,c
  5094  00020A  D00C               	goto	l4261
  5095                           
  5096                           ; BSR set to: 0
  5097                           
  5098                           ; BSR set to: 0
  5099                           
  5100                           ; BSR set to: 0
  5101                           ;doprnt.c: 1318: break;
  5102  00020C  0100               	movlb	0	; () banked
  5103  00020E  2BA3               	incf	printf@c& (0+255),f,b
  5104  000210  D7E2               	goto	l4245
  5105  000212                     l4259:
  5106                           
  5107                           ; BSR set to: 0
  5108  000212  0100               	movlb	0	; () banked
  5109  000214  51A0               	movf	printf@flag& (0+255),w,b
  5110  000216  0B80               	andlw	128
  5111                           
  5112                           ; Switch size 1, requested type "space"
  5113                           ; Number of cases is 2, Range of values is 0 to 128
  5114                           ; switch strategies available:
  5115                           ; Name         Instructions Cycles
  5116                           ; simple_byte            7     4 (average)
  5117                           ;	Chosen strategy is simple_byte
  5118  000218  0A00               	xorlw	0	; case 0
  5119  00021A  B4D8               	btfsc	status,2,c
  5120  00021C  D7B8               	goto	l4229
  5121  00021E  0A80               	xorlw	128	; case 128
  5122  000220  B4D8               	btfsc	status,2,c
  5123  000222  D7D6               	goto	l4243
  5124  000224                     l4261:
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5128  000224  0100               	movlb	0	; () banked
  5129  000226  51A1               	movf	printf@width& (0+255),w,b
  5130  000228  0100               	movlb	0	; () banked
  5131  00022A  11A2               	iorwf	(printf@width+1)& (0+255),w,b
  5132  00022C  B4D8               	btfsc	status,2,c
  5133  00022E  D00B               	goto	l4267
  5134                           
  5135                           ; BSR set to: 0
  5136  000230  C0A0  F096         	movff	printf@flag,??_printf
  5137  000234  0E03               	movlw	3
  5138  000236  0100               	movlb	0	; () banked
  5139  000238  1796               	andwf	??_printf& (0+255),f,b
  5140  00023A  B4D8               	btfsc	status,2,c
  5141  00023C  D004               	goto	l4267
  5142                           
  5143                           ; BSR set to: 0
  5144                           ;doprnt.c: 1346: width--;
  5145  00023E  0100               	movlb	0	; () banked
  5146  000240  07A1               	decf	printf@width& (0+255),f,b
  5147  000242  A0D8               	btfss	status,0,c
  5148  000244  07A2               	decf	(printf@width+1)& (0+255),f,b
  5149  000246                     l4267:
  5150                           
  5151                           ; BSR set to: 0
  5152                           ;doprnt.c: 1381: if(width > c)
  5153  000246  0E80               	movlw	128
  5154  000248  0100               	movlb	0	; () banked
  5155  00024A  BFA3               	btfsc	printf@c& (0+255),7,b
  5156  00024C  0E7F               	movlw	127
  5157  00024E  0100               	movlb	0	; () banked
  5158  000250  6F96               	movwf	??_printf& (0+255),b
  5159  000252  0100               	movlb	0	; () banked
  5160  000254  51A1               	movf	printf@width& (0+255),w,b
  5161  000256  0100               	movlb	0	; () banked
  5162  000258  5DA3               	subwf	printf@c& (0+255),w,b
  5163  00025A  0100               	movlb	0	; () banked
  5164  00025C  51A2               	movf	(printf@width+1)& (0+255),w,b
  5165  00025E  0A80               	xorlw	128
  5166  000260  0100               	movlb	0	; () banked
  5167  000262  5996               	subwfb	??_printf& (0+255),w,b
  5168  000264  B0D8               	btfsc	status,0,c
  5169  000266  D00B               	goto	l4271
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;doprnt.c: 1382: width -= c;
  5173  000268  0100               	movlb	0	; () banked
  5174  00026A  51A3               	movf	printf@c& (0+255),w,b
  5175  00026C  0100               	movlb	0	; () banked
  5176  00026E  5FA1               	subwf	printf@width& (0+255),f,b
  5177  000270  0E00               	movlw	0
  5178  000272  0100               	movlb	0	; () banked
  5179  000274  BFA3               	btfsc	printf@c& (0+255),7,b
  5180  000276  0EFF               	movlw	255
  5181  000278  0100               	movlb	0	; () banked
  5182  00027A  5BA2               	subwfb	(printf@width+1)& (0+255),f,b
  5183  00027C  D005               	goto	l4273
  5184  00027E                     l4271:
  5185                           
  5186                           ; BSR set to: 0
  5187                           ;doprnt.c: 1383: else
  5188                           ;doprnt.c: 1384: width = 0;
  5189  00027E  0E00               	movlw	0
  5190  000280  0100               	movlb	0	; () banked
  5191  000282  6FA2               	movwf	(printf@width+1)& (0+255),b
  5192  000284  0E00               	movlw	0
  5193  000286  6FA1               	movwf	printf@width& (0+255),b
  5194  000288                     l4273:
  5195                           
  5196                           ; BSR set to: 0
  5197                           ;doprnt.c: 1387: if(flag & 0x04) {
  5198  000288  0100               	movlb	0	; () banked
  5199  00028A  A5A0               	btfss	printf@flag& (0+255),2,b
  5200  00028C  D018               	goto	l4285
  5201                           
  5202                           ; BSR set to: 0
  5203                           ;doprnt.c: 1392: if(flag & 0x03)
  5204  00028E  C0A0  F096         	movff	printf@flag,??_printf
  5205  000292  0E03               	movlw	3
  5206  000294  0100               	movlb	0	; () banked
  5207  000296  1796               	andwf	??_printf& (0+255),f,b
  5208  000298  B4D8               	btfsc	status,2,c
  5209  00029A  D003               	goto	l4279
  5210                           
  5211                           ; BSR set to: 0
  5212                           ;doprnt.c: 1393: (putch('-') );
  5213  00029C  0E2D               	movlw	45
  5214  00029E  EC9B  F00E         	call	_putch
  5215  0002A2                     l4279:
  5216                           
  5217                           ;doprnt.c: 1415: if(width)
  5218  0002A2  0100               	movlb	0	; () banked
  5219  0002A4  51A1               	movf	printf@width& (0+255),w,b
  5220  0002A6  0100               	movlb	0	; () banked
  5221  0002A8  11A2               	iorwf	(printf@width+1)& (0+255),w,b
  5222  0002AA  B4D8               	btfsc	status,2,c
  5223  0002AC  D025               	goto	l4295
  5224                           
  5225                           ; BSR set to: 0
  5226                           ;doprnt.c: 1417: (putch('0') );
  5227                           
  5228                           ; BSR set to: 0
  5229                           
  5230                           ;doprnt.c: 1416: do
  5231  0002AE  0E30               	movlw	48
  5232  0002B0  EC9B  F00E         	call	_putch
  5233                           
  5234                           ;doprnt.c: 1418: while(--width);
  5235  0002B4  0100               	movlb	0	; () banked
  5236  0002B6  07A1               	decf	printf@width& (0+255),f,b
  5237  0002B8  A0D8               	btfss	status,0,c
  5238  0002BA  07A2               	decf	(printf@width+1)& (0+255),f,b
  5239  0002BC  D7F2               	goto	l4279
  5240  0002BE                     l4285:
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;doprnt.c: 1422: {
  5244                           ;doprnt.c: 1424: if(width
  5245                           ;doprnt.c: 1428: )
  5246  0002BE  0100               	movlb	0	; () banked
  5247  0002C0  51A1               	movf	printf@width& (0+255),w,b
  5248  0002C2  0100               	movlb	0	; () banked
  5249  0002C4  11A2               	iorwf	(printf@width+1)& (0+255),w,b
  5250  0002C6  B4D8               	btfsc	status,2,c
  5251  0002C8  D00D               	goto	l4291
  5252  0002CA                     l4287:
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;doprnt.c: 1430: (putch(' ') );
  5256  0002CA  0E20               	movlw	32
  5257  0002CC  EC9B  F00E         	call	_putch
  5258                           
  5259                           ;doprnt.c: 1431: while(--width);
  5260  0002D0  0100               	movlb	0	; () banked
  5261  0002D2  07A1               	decf	printf@width& (0+255),f,b
  5262  0002D4  A0D8               	btfss	status,0,c
  5263  0002D6  07A2               	decf	(printf@width+1)& (0+255),f,b
  5264  0002D8  0100               	movlb	0	; () banked
  5265  0002DA  51A1               	movf	printf@width& (0+255),w,b
  5266  0002DC  0100               	movlb	0	; () banked
  5267  0002DE  11A2               	iorwf	(printf@width+1)& (0+255),w,b
  5268  0002E0  A4D8               	btfss	status,2,c
  5269  0002E2  D7F3               	goto	l4287
  5270  0002E4                     l4291:
  5271                           
  5272                           ; BSR set to: 0
  5273                           ;doprnt.c: 1438: if(flag & 0x03)
  5274  0002E4  C0A0  F096         	movff	printf@flag,??_printf
  5275  0002E8  0E03               	movlw	3
  5276  0002EA  0100               	movlb	0	; () banked
  5277  0002EC  1796               	andwf	??_printf& (0+255),f,b
  5278  0002EE  B4D8               	btfsc	status,2,c
  5279  0002F0  D003               	goto	l4295
  5280                           
  5281                           ; BSR set to: 0
  5282                           ;doprnt.c: 1439: (putch('-') );
  5283  0002F2  0E2D               	movlw	45
  5284  0002F4  EC9B  F00E         	call	_putch
  5285  0002F8                     l4295:
  5286                           
  5287                           ;doprnt.c: 1469: }
  5288                           ;doprnt.c: 1472: prec = c;
  5289  0002F8  C0A3  F09D         	movff	printf@c,printf@prec
  5290                           
  5291                           ;doprnt.c: 1474: while(prec--) {
  5292  0002FC  D063               	goto	l4309
  5293  0002FE                     l4297:
  5294                           
  5295                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5296  0002FE  0100               	movlb	0	; () banked
  5297  000300  519D               	movf	printf@prec& (0+255),w,b
  5298  000302  0D02               	mullw	2
  5299  000304  0EFA               	movlw	low _dpowers
  5300  000306  24F3               	addwf	prodl,w,c
  5301  000308  6EF6               	movwf	tblptrl,c
  5302  00030A  0EFE               	movlw	high _dpowers
  5303  00030C  20F4               	addwfc	prodh,w,c
  5304  00030E  6EF7               	movwf	tblptrh,c
  5305  000310                     	if	1	;There are 3 active tblptr bytes
  5306  000310  6AF8               	clrf	tblptru,c
  5307  000312  0E00               	movlw	low (__mediumconst shr (0+16))
  5308  000314  22F8               	addwfc	tblptru,f,c
  5309  000316                     	endif
  5310  000316  0009               	tblrd		*+
  5311  000318  CFF5 F082          	movff	tablat,___lwdiv@divisor
  5312  00031C  000A               	tblrd		*-
  5313  00031E  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  5314  000322  C09E  F080         	movff	printf@val,___lwdiv@dividend
  5315  000326  C09F  F081         	movff	printf@val+1,___lwdiv@dividend+1
  5316  00032A  EC66  F009         	call	___lwdiv	;wreg free
  5317  00032E  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  5318  000332  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  5319  000336  0E00               	movlw	0
  5320  000338  0100               	movlb	0	; () banked
  5321  00033A  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  5322  00033C  0E0A               	movlw	10
  5323  00033E  6F89               	movwf	___lwmod@divisor& (0+255),b
  5324  000340  EC18  F00B         	call	___lwmod	;wreg free
  5325  000344  0100               	movlb	0	; () banked
  5326  000346  5187               	movf	?___lwmod& (0+255),w,b
  5327  000348  0F30               	addlw	48
  5328  00034A  0100               	movlb	0	; () banked
  5329  00034C  6FA3               	movwf	printf@c& (0+255),b
  5330                           
  5331                           ;doprnt.c: 1491: break;
  5332  00034E  D036               	goto	l4307
  5333  000350                     l4299:
  5334                           
  5335                           ; BSR set to: 0
  5336                           ;doprnt.c: 1499: {
  5337                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5338  000350  C09E  F080         	movff	printf@val,___lwdiv@dividend
  5339  000354  C09F  F081         	movff	printf@val+1,___lwdiv@dividend+1
  5340  000358  0100               	movlb	0	; () banked
  5341  00035A  519D               	movf	printf@prec& (0+255),w,b
  5342  00035C  0D02               	mullw	2
  5343  00035E  0E04               	movlw	low _hexpowers
  5344  000360  24F3               	addwf	prodl,w,c
  5345  000362  6EF6               	movwf	tblptrl,c
  5346  000364  0EFF               	movlw	high _hexpowers
  5347  000366  20F4               	addwfc	prodh,w,c
  5348  000368  6EF7               	movwf	tblptrh,c
  5349  00036A                     	if	1	;There are 3 active tblptr bytes
  5350  00036A  6AF8               	clrf	tblptru,c
  5351  00036C  0E00               	movlw	low (__mediumconst shr (0+16))
  5352  00036E  22F8               	addwfc	tblptru,f,c
  5353  000370                     	endif
  5354  000370  0009               	tblrd		*+
  5355  000372  CFF5 F082          	movff	tablat,___lwdiv@divisor
  5356  000376  000A               	tblrd		*-
  5357  000378  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  5358  00037C  EC66  F009         	call	___lwdiv	;wreg free
  5359  000380  0100               	movlb	0	; () banked
  5360  000382  5180               	movf	?___lwdiv& (0+255),w,b
  5361  000384  0B0F               	andlw	15
  5362  000386  0100               	movlb	0	; () banked
  5363  000388  6F9A               	movwf	printf@idx& (0+255),b
  5364                           
  5365                           ; BSR set to: 0
  5366                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5367  00038A  0100               	movlb	0	; () banked
  5368  00038C  519A               	movf	printf@idx& (0+255),w,b
  5369  00038E  0D01               	mullw	1
  5370  000390  0E3C               	movlw	low STR_16
  5371  000392  24F3               	addwf	prodl,w,c
  5372  000394  6EF6               	movwf	tblptrl,c
  5373  000396  0EFF               	movlw	high STR_16
  5374  000398  20F4               	addwfc	prodh,w,c
  5375  00039A  6EF7               	movwf	tblptrh,c
  5376  00039C                     	if	1	;There are 3 active tblptr bytes
  5377  00039C  6AF8               	clrf	tblptru,c
  5378  00039E  0E00               	movlw	low (__mediumconst shr (0+16))
  5379  0003A0  22F8               	addwfc	tblptru,f,c
  5380  0003A2                     	endif
  5381  0003A2  0008               	tblrd		*
  5382  0003A4  CFF5 F0A3          	movff	tablat,printf@c
  5383                           
  5384                           ; BSR set to: 0
  5385                           ;doprnt.c: 1523: }
  5386                           
  5387                           ;doprnt.c: 1508: }
  5388                           ;doprnt.c: 1510: break;
  5389  0003A8  D009               	goto	l4307
  5390  0003AA                     l4305:
  5391  0003AA  0100               	movlb	0	; () banked
  5392  0003AC  51A0               	movf	printf@flag& (0+255),w,b
  5393  0003AE  0B80               	andlw	128
  5394                           
  5395                           ; Switch size 1, requested type "space"
  5396                           ; Number of cases is 2, Range of values is 0 to 128
  5397                           ; switch strategies available:
  5398                           ; Name         Instructions Cycles
  5399                           ; simple_byte            7     4 (average)
  5400                           ;	Chosen strategy is simple_byte
  5401  0003B0  0A00               	xorlw	0	; case 0
  5402  0003B2  B4D8               	btfsc	status,2,c
  5403  0003B4  D7A4               	goto	l4297
  5404  0003B6  0A80               	xorlw	128	; case 128
  5405  0003B8  B4D8               	btfsc	status,2,c
  5406  0003BA  D7CA               	goto	l4299
  5407  0003BC                     l4307:
  5408                           
  5409                           ; BSR set to: 0
  5410                           ;doprnt.c: 1524: (putch(c) );
  5411  0003BC  0100               	movlb	0	; () banked
  5412  0003BE  51A3               	movf	printf@c& (0+255),w,b
  5413  0003C0  EC9B  F00E         	call	_putch
  5414  0003C4                     l4309:
  5415  0003C4  0100               	movlb	0	; () banked
  5416  0003C6  079D               	decf	printf@prec& (0+255),f,b
  5417  0003C8  0100               	movlb	0	; () banked
  5418  0003CA  299D               	incf	printf@prec& (0+255),w,b
  5419  0003CC  A4D8               	btfss	status,2,c
  5420  0003CE  D7ED               	goto	l4305
  5421  0003D0                     l4311:
  5422  0003D0  C08E  FFF6         	movff	printf@f,tblptrl
  5423  0003D4  C08F  FFF7         	movff	printf@f+1,tblptrh
  5424  0003D8  0100               	movlb	0	; () banked
  5425  0003DA  4B8E               	infsnz	printf@f& (0+255),f,b
  5426  0003DC  2B8F               	incf	(printf@f+1)& (0+255),f,b
  5427  0003DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5428  0003DE  6AF8               	clrf	tblptru,c
  5429  0003E0                     	endif
  5430  0003E0                     	if	0	;tblptru may be non-zero
  5431  0003E0                     	endif
  5432  0003E0  0008               	tblrd		*
  5433  0003E2  CFF5 F0A3          	movff	tablat,printf@c
  5434  0003E6  0100               	movlb	0	; () banked
  5435  0003E8  51A3               	movf	printf@c& (0+255),w,b
  5436  0003EA  B4D8               	btfsc	status,2,c
  5437  0003EC  0012               	return	
  5438  0003EE  D618               	goto	l4185
  5439  0003F0                     __end_of_printf:
  5440                           	opt stack 0
  5441                           tosu	equ	0xFFF
  5442                           tosh	equ	0xFFE
  5443                           tosl	equ	0xFFD
  5444                           pclath	equ	0xFFA
  5445                           tblptru	equ	0xFF8
  5446                           tblptrh	equ	0xFF7
  5447                           tblptrl	equ	0xFF6
  5448                           tablat	equ	0xFF5
  5449                           prodh	equ	0xFF4
  5450                           prodl	equ	0xFF3
  5451                           intcon	equ	0xFF2
  5452                           intcon3	equ	0xFF0
  5453                           postinc0	equ	0xFEE
  5454                           wreg	equ	0xFE8
  5455                           indf2	equ	0xFDF
  5456                           postinc2	equ	0xFDE
  5457                           postdec2	equ	0xFDD
  5458                           fsr2h	equ	0xFDA
  5459                           fsr2l	equ	0xFD9
  5460                           status	equ	0xFD8
  5461                           
  5462 ;; *************** function _putch *****************
  5463 ;; Defined at:
  5464 ;;		line 38 in file "lcd.c"
  5465 ;; Parameters:    Size  Location     Type
  5466 ;;  data            1    wreg     unsigned char 
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;  data            1    2[BANK0 ] unsigned char 
  5469 ;; Return value:  Size  Location     Type
  5470 ;;                  1    wreg      void 
  5471 ;; Registers used:
  5472 ;;		wreg, status,2, status,0, cstack
  5473 ;; Tracked objects:
  5474 ;;		On entry : 0/0
  5475 ;;		On exit  : 0/0
  5476 ;;		Unchanged: 0/0
  5477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5479 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5481 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5482 ;;Total ram usage:        1 bytes
  5483 ;; Hardware stack levels used:    1
  5484 ;; Hardware stack levels required when called:    6
  5485 ;; This function calls:
  5486 ;;		_lcdNibble
  5487 ;; This function is called by:
  5488 ;;		_printf
  5489 ;; This function uses a non-reentrant model
  5490 ;;
  5491                           
  5492                           	psect	text35
  5493  001D36                     __ptext35:
  5494                           	opt stack 0
  5495  001D36                     _putch:
  5496                           	opt stack 22
  5497                           
  5498                           ;incstack = 0
  5499                           ;putch@data stored from wreg
  5500  001D36  0100               	movlb	0	; () banked
  5501  001D38  6F82               	movwf	putch@data& (0+255),b
  5502                           
  5503                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  5504  001D3A  848C               	bsf	3980,2,c	;volatile
  5505                           
  5506                           ;lcd.c: 40: lcdNibble(data);
  5507  001D3C  0100               	movlb	0	; () banked
  5508  001D3E  5182               	movf	putch@data& (0+255),w,b
  5509  001D40  ECB3  F00A         	call	_lcdNibble
  5510  001D44  0012               	return		;funcret
  5511  001D46                     __end_of_putch:
  5512                           	opt stack 0
  5513                           tosu	equ	0xFFF
  5514                           tosh	equ	0xFFE
  5515                           tosl	equ	0xFFD
  5516                           pclath	equ	0xFFA
  5517                           tblptru	equ	0xFF8
  5518                           tblptrh	equ	0xFF7
  5519                           tblptrl	equ	0xFF6
  5520                           tablat	equ	0xFF5
  5521                           prodh	equ	0xFF4
  5522                           prodl	equ	0xFF3
  5523                           intcon	equ	0xFF2
  5524                           intcon3	equ	0xFF0
  5525                           postinc0	equ	0xFEE
  5526                           wreg	equ	0xFE8
  5527                           indf2	equ	0xFDF
  5528                           postinc2	equ	0xFDE
  5529                           postdec2	equ	0xFDD
  5530                           fsr2h	equ	0xFDA
  5531                           fsr2l	equ	0xFD9
  5532                           status	equ	0xFD8
  5533                           
  5534 ;; *************** function _isdigit *****************
  5535 ;; Defined at:
  5536 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/isdigit.c"
  5537 ;; Parameters:    Size  Location     Type
  5538 ;;  c               1    wreg     unsigned char 
  5539 ;; Auto vars:     Size  Location     Type
  5540 ;;  c               1    2[BANK0 ] unsigned char 
  5541 ;; Return value:  Size  Location     Type
  5542 ;;		None               void
  5543 ;; Registers used:
  5544 ;;		wreg, status,2, status,0
  5545 ;; Tracked objects:
  5546 ;;		On entry : 0/0
  5547 ;;		On exit  : 0/0
  5548 ;;		Unchanged: 0/0
  5549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5551 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5552 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5553 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5554 ;;Total ram usage:        3 bytes
  5555 ;; Hardware stack levels used:    1
  5556 ;; Hardware stack levels required when called:    5
  5557 ;; This function calls:
  5558 ;;		Nothing
  5559 ;; This function is called by:
  5560 ;;		_printf
  5561 ;; This function uses a non-reentrant model
  5562 ;;
  5563                           
  5564                           	psect	text36
  5565  001A42                     __ptext36:
  5566                           	opt stack 0
  5567  001A42                     _isdigit:
  5568                           	opt stack 23
  5569                           
  5570                           ;incstack = 0
  5571                           ;isdigit@c stored from wreg
  5572  001A42  0100               	movlb	0	; () banked
  5573  001A44  6F82               	movwf	isdigit@c& (0+255),b
  5574  001A46  0E00               	movlw	0
  5575  001A48  0100               	movlb	0	; () banked
  5576  001A4A  6F81               	movwf	_isdigit$1350& (0+255),b
  5577                           
  5578                           ; BSR set to: 0
  5579  001A4C  0E3A               	movlw	58
  5580  001A4E  0100               	movlb	0	; () banked
  5581  001A50  6182               	cpfslt	isdigit@c& (0+255),b
  5582  001A52  D007               	goto	l4065
  5583                           
  5584                           ; BSR set to: 0
  5585  001A54  0E2F               	movlw	47
  5586  001A56  0100               	movlb	0	; () banked
  5587  001A58  6582               	cpfsgt	isdigit@c& (0+255),b
  5588  001A5A  D003               	goto	l4065
  5589                           
  5590                           ; BSR set to: 0
  5591  001A5C  0E01               	movlw	1
  5592  001A5E  0100               	movlb	0	; () banked
  5593  001A60  6F81               	movwf	_isdigit$1350& (0+255),b
  5594  001A62                     l4065:
  5595                           
  5596                           ; BSR set to: 0
  5597  001A62  C081  F080         	movff	_isdigit$1350,??_isdigit
  5598  001A66  0100               	movlb	0	; () banked
  5599  001A68  3180               	rrcf	??_isdigit& (0+255),w,b
  5600  001A6A  0012               	return	
  5601  001A6C                     __end_of_isdigit:
  5602                           	opt stack 0
  5603                           tosu	equ	0xFFF
  5604                           tosh	equ	0xFFE
  5605                           tosl	equ	0xFFD
  5606                           pclath	equ	0xFFA
  5607                           tblptru	equ	0xFF8
  5608                           tblptrh	equ	0xFF7
  5609                           tblptrl	equ	0xFF6
  5610                           tablat	equ	0xFF5
  5611                           prodh	equ	0xFF4
  5612                           prodl	equ	0xFF3
  5613                           intcon	equ	0xFF2
  5614                           intcon3	equ	0xFF0
  5615                           postinc0	equ	0xFEE
  5616                           wreg	equ	0xFE8
  5617                           indf2	equ	0xFDF
  5618                           postinc2	equ	0xFDE
  5619                           postdec2	equ	0xFDD
  5620                           fsr2h	equ	0xFDA
  5621                           fsr2l	equ	0xFD9
  5622                           status	equ	0xFD8
  5623                           
  5624 ;; *************** function ___lwmod *****************
  5625 ;; Defined at:
  5626 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
  5627 ;; Parameters:    Size  Location     Type
  5628 ;;  dividend        2    7[BANK0 ] unsigned int 
  5629 ;;  divisor         2    9[BANK0 ] unsigned int 
  5630 ;; Auto vars:     Size  Location     Type
  5631 ;;  counter         1   11[BANK0 ] unsigned char 
  5632 ;; Return value:  Size  Location     Type
  5633 ;;                  2    7[BANK0 ] unsigned int 
  5634 ;; Registers used:
  5635 ;;		wreg, status,2, status,0
  5636 ;; Tracked objects:
  5637 ;;		On entry : 0/0
  5638 ;;		On exit  : 0/0
  5639 ;;		Unchanged: 0/0
  5640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5641 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5642 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5644 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5645 ;;Total ram usage:        5 bytes
  5646 ;; Hardware stack levels used:    1
  5647 ;; Hardware stack levels required when called:    5
  5648 ;; This function calls:
  5649 ;;		Nothing
  5650 ;; This function is called by:
  5651 ;;		_printf
  5652 ;; This function uses a non-reentrant model
  5653 ;;
  5654                           
  5655                           	psect	text37
  5656  001630                     __ptext37:
  5657                           	opt stack 0
  5658  001630                     ___lwmod:
  5659                           	opt stack 23
  5660                           
  5661                           ; BSR set to: 0
  5662                           ;incstack = 0
  5663  001630  0100               	movlb	0	; () banked
  5664  001632  5189               	movf	___lwmod@divisor& (0+255),w,b
  5665  001634  0100               	movlb	0	; () banked
  5666  001636  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5667  001638  B4D8               	btfsc	status,2,c
  5668  00163A  D026               	goto	l1114
  5669                           
  5670                           ; BSR set to: 0
  5671  00163C  0E01               	movlw	1
  5672  00163E  0100               	movlb	0	; () banked
  5673  001640  6F8B               	movwf	___lwmod@counter& (0+255),b
  5674  001642  D006               	goto	l4103
  5675  001644                     l4101:
  5676                           
  5677                           ; BSR set to: 0
  5678  001644  0100               	movlb	0	; () banked
  5679  001646  90D8               	bcf	status,0,c
  5680  001648  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  5681  00164A  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  5682  00164C  0100               	movlb	0	; () banked
  5683  00164E  2B8B               	incf	___lwmod@counter& (0+255),f,b
  5684  001650                     l4103:
  5685                           
  5686                           ; BSR set to: 0
  5687  001650  0100               	movlb	0	; () banked
  5688  001652  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  5689  001654  D7F7               	goto	l4101
  5690  001656                     l4105:
  5691                           
  5692                           ; BSR set to: 0
  5693  001656  0100               	movlb	0	; () banked
  5694  001658  5189               	movf	___lwmod@divisor& (0+255),w,b
  5695  00165A  0100               	movlb	0	; () banked
  5696  00165C  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  5697  00165E  0100               	movlb	0	; () banked
  5698  001660  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5699  001662  0100               	movlb	0	; () banked
  5700  001664  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  5701  001666  A0D8               	btfss	status,0,c
  5702  001668  D008               	goto	l4109
  5703                           
  5704                           ; BSR set to: 0
  5705  00166A  0100               	movlb	0	; () banked
  5706  00166C  5189               	movf	___lwmod@divisor& (0+255),w,b
  5707  00166E  0100               	movlb	0	; () banked
  5708  001670  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  5709  001672  0100               	movlb	0	; () banked
  5710  001674  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5711  001676  0100               	movlb	0	; () banked
  5712  001678  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  5713  00167A                     l4109:
  5714                           
  5715                           ; BSR set to: 0
  5716  00167A  0100               	movlb	0	; () banked
  5717  00167C  90D8               	bcf	status,0,c
  5718  00167E  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  5719  001680  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  5720                           
  5721                           ; BSR set to: 0
  5722  001682  0100               	movlb	0	; () banked
  5723  001684  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  5724  001686  D7E7               	goto	l4105
  5725  001688                     l1114:
  5726                           
  5727                           ; BSR set to: 0
  5728  001688  C087  F087         	movff	___lwmod@dividend,?___lwmod
  5729  00168C  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  5730                           
  5731                           ; BSR set to: 0
  5732  001690  0012               	return		;funcret
  5733  001692                     __end_of___lwmod:
  5734                           	opt stack 0
  5735                           tosu	equ	0xFFF
  5736                           tosh	equ	0xFFE
  5737                           tosl	equ	0xFFD
  5738                           pclath	equ	0xFFA
  5739                           tblptru	equ	0xFF8
  5740                           tblptrh	equ	0xFF7
  5741                           tblptrl	equ	0xFF6
  5742                           tablat	equ	0xFF5
  5743                           prodh	equ	0xFF4
  5744                           prodl	equ	0xFF3
  5745                           intcon	equ	0xFF2
  5746                           intcon3	equ	0xFF0
  5747                           postinc0	equ	0xFEE
  5748                           wreg	equ	0xFE8
  5749                           indf2	equ	0xFDF
  5750                           postinc2	equ	0xFDE
  5751                           postdec2	equ	0xFDD
  5752                           fsr2h	equ	0xFDA
  5753                           fsr2l	equ	0xFD9
  5754                           status	equ	0xFD8
  5755                           
  5756 ;; *************** function ___lwdiv *****************
  5757 ;; Defined at:
  5758 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  5759 ;; Parameters:    Size  Location     Type
  5760 ;;  dividend        2    0[BANK0 ] unsigned int 
  5761 ;;  divisor         2    2[BANK0 ] unsigned int 
  5762 ;; Auto vars:     Size  Location     Type
  5763 ;;  quotient        2    5[BANK0 ] unsigned int 
  5764 ;;  counter         1    4[BANK0 ] unsigned char 
  5765 ;; Return value:  Size  Location     Type
  5766 ;;                  2    0[BANK0 ] unsigned int 
  5767 ;; Registers used:
  5768 ;;		wreg, status,2, status,0
  5769 ;; Tracked objects:
  5770 ;;		On entry : 0/0
  5771 ;;		On exit  : 0/0
  5772 ;;		Unchanged: 0/0
  5773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5774 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5775 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5777 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5778 ;;Total ram usage:        7 bytes
  5779 ;; Hardware stack levels used:    1
  5780 ;; Hardware stack levels required when called:    5
  5781 ;; This function calls:
  5782 ;;		Nothing
  5783 ;; This function is called by:
  5784 ;;		_printf
  5785 ;; This function uses a non-reentrant model
  5786 ;;
  5787                           
  5788                           	psect	text38
  5789  0012CC                     __ptext38:
  5790                           	opt stack 0
  5791  0012CC                     ___lwdiv:
  5792                           	opt stack 23
  5793                           
  5794                           ; BSR set to: 0
  5795                           ;incstack = 0
  5796  0012CC  0E00               	movlw	0
  5797  0012CE  0100               	movlb	0	; () banked
  5798  0012D0  6F86               	movwf	(___lwdiv@quotient+1)& (0+255),b
  5799  0012D2  0E00               	movlw	0
  5800  0012D4  6F85               	movwf	___lwdiv@quotient& (0+255),b
  5801                           
  5802                           ; BSR set to: 0
  5803  0012D6  0100               	movlb	0	; () banked
  5804  0012D8  5182               	movf	___lwdiv@divisor& (0+255),w,b
  5805  0012DA  0100               	movlb	0	; () banked
  5806  0012DC  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  5807  0012DE  B4D8               	btfsc	status,2,c
  5808  0012E0  D02C               	goto	l1104
  5809                           
  5810                           ; BSR set to: 0
  5811  0012E2  0E01               	movlw	1
  5812  0012E4  0100               	movlb	0	; () banked
  5813  0012E6  6F84               	movwf	___lwdiv@counter& (0+255),b
  5814  0012E8  D006               	goto	l4083
  5815  0012EA                     l4081:
  5816                           
  5817                           ; BSR set to: 0
  5818  0012EA  0100               	movlb	0	; () banked
  5819  0012EC  90D8               	bcf	status,0,c
  5820  0012EE  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  5821  0012F0  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  5822  0012F2  0100               	movlb	0	; () banked
  5823  0012F4  2B84               	incf	___lwdiv@counter& (0+255),f,b
  5824  0012F6                     l4083:
  5825                           
  5826                           ; BSR set to: 0
  5827  0012F6  0100               	movlb	0	; () banked
  5828  0012F8  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  5829  0012FA  D7F7               	goto	l4081
  5830  0012FC                     l4085:
  5831                           
  5832                           ; BSR set to: 0
  5833  0012FC  0100               	movlb	0	; () banked
  5834  0012FE  90D8               	bcf	status,0,c
  5835  001300  3785               	rlcf	___lwdiv@quotient& (0+255),f,b
  5836  001302  3786               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  5837                           
  5838                           ; BSR set to: 0
  5839  001304  0100               	movlb	0	; () banked
  5840  001306  5182               	movf	___lwdiv@divisor& (0+255),w,b
  5841  001308  0100               	movlb	0	; () banked
  5842  00130A  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  5843  00130C  0100               	movlb	0	; () banked
  5844  00130E  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5845  001310  0100               	movlb	0	; () banked
  5846  001312  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  5847  001314  A0D8               	btfss	status,0,c
  5848  001316  D00A               	goto	l4093
  5849                           
  5850                           ; BSR set to: 0
  5851  001318  0100               	movlb	0	; () banked
  5852  00131A  5182               	movf	___lwdiv@divisor& (0+255),w,b
  5853  00131C  0100               	movlb	0	; () banked
  5854  00131E  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  5855  001320  0100               	movlb	0	; () banked
  5856  001322  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5857  001324  0100               	movlb	0	; () banked
  5858  001326  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  5859                           
  5860                           ; BSR set to: 0
  5861  001328  0100               	movlb	0	; () banked
  5862  00132A  8185               	bsf	___lwdiv@quotient& (0+255),0,b
  5863  00132C                     l4093:
  5864                           
  5865                           ; BSR set to: 0
  5866  00132C  0100               	movlb	0	; () banked
  5867  00132E  90D8               	bcf	status,0,c
  5868  001330  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  5869  001332  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  5870                           
  5871                           ; BSR set to: 0
  5872  001334  0100               	movlb	0	; () banked
  5873  001336  2F84               	decfsz	___lwdiv@counter& (0+255),f,b
  5874  001338  D7E1               	goto	l4085
  5875  00133A                     l1104:
  5876                           
  5877                           ; BSR set to: 0
  5878  00133A  C085  F080         	movff	___lwdiv@quotient,?___lwdiv
  5879  00133E  C086  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5880                           
  5881                           ; BSR set to: 0
  5882  001342  0012               	return		;funcret
  5883  001344                     __end_of___lwdiv:
  5884                           	opt stack 0
  5885                           tosu	equ	0xFFF
  5886                           tosh	equ	0xFFE
  5887                           tosl	equ	0xFFD
  5888                           pclath	equ	0xFFA
  5889                           tblptru	equ	0xFF8
  5890                           tblptrh	equ	0xFF7
  5891                           tblptrl	equ	0xFF6
  5892                           tablat	equ	0xFF5
  5893                           prodh	equ	0xFF4
  5894                           prodl	equ	0xFF3
  5895                           intcon	equ	0xFF2
  5896                           intcon3	equ	0xFF0
  5897                           postinc0	equ	0xFEE
  5898                           wreg	equ	0xFE8
  5899                           indf2	equ	0xFDF
  5900                           postinc2	equ	0xFDE
  5901                           postdec2	equ	0xFDD
  5902                           fsr2h	equ	0xFDA
  5903                           fsr2l	equ	0xFD9
  5904                           status	equ	0xFD8
  5905                           
  5906 ;; *************** function _initLCD *****************
  5907 ;; Defined at:
  5908 ;;		line 22 in file "lcd.c"
  5909 ;; Parameters:    Size  Location     Type
  5910 ;;		None
  5911 ;; Auto vars:     Size  Location     Type
  5912 ;;		None
  5913 ;; Return value:  Size  Location     Type
  5914 ;;                  1    wreg      void 
  5915 ;; Registers used:
  5916 ;;		wreg, status,2, status,0, cstack
  5917 ;; Tracked objects:
  5918 ;;		On entry : 0/0
  5919 ;;		On exit  : 0/0
  5920 ;;		Unchanged: 0/0
  5921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5924 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5925 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5926 ;;Total ram usage:        1 bytes
  5927 ;; Hardware stack levels used:    1
  5928 ;; Hardware stack levels required when called:    7
  5929 ;; This function calls:
  5930 ;;		_lcdInst
  5931 ;; This function is called by:
  5932 ;;		_main
  5933 ;;		_standby
  5934 ;;		_startSorting
  5935 ;;		_initialization
  5936 ;;		_results
  5937 ;;		_top_rocker_idle
  5938 ;; This function uses a non-reentrant model
  5939 ;;
  5940                           
  5941                           	psect	text39
  5942  00183A                     __ptext39:
  5943                           	opt stack 0
  5944  00183A                     _initLCD:
  5945                           	opt stack 21
  5946                           
  5947                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  5948                           
  5949                           ; BSR set to: 0
  5950                           ;incstack = 0
  5951  00183A  0E31               	movlw	49
  5952  00183C  0100               	movlb	0	; () banked
  5953  00183E  6F83               	movwf	??_initLCD& (0+255),b
  5954  001840  0EB2               	movlw	178
  5955  001842                     u4307:
  5956  001842  2EE8               	decfsz	wreg,f,c
  5957  001844  D7FE               	bra	u4307
  5958  001846  2F83               	decfsz	??_initLCD& (0+255),f,b
  5959  001848  D7FC               	bra	u4307
  5960  00184A  F000               	nop	
  5961                           
  5962                           ;lcd.c: 24: lcdInst(0b00110011);
  5963  00184C  0E33               	movlw	51
  5964  00184E  ECA3  F00E         	call	_lcdInst
  5965                           
  5966                           ;lcd.c: 25: lcdInst(0b00110010);
  5967  001852  0E32               	movlw	50
  5968  001854  ECA3  F00E         	call	_lcdInst
  5969                           
  5970                           ;lcd.c: 26: lcdInst(0b00101000);
  5971  001858  0E28               	movlw	40
  5972  00185A  ECA3  F00E         	call	_lcdInst
  5973                           
  5974                           ;lcd.c: 27: lcdInst(0b00001111);
  5975  00185E  0E0F               	movlw	15
  5976  001860  ECA3  F00E         	call	_lcdInst
  5977                           
  5978                           ;lcd.c: 28: lcdInst(0b00000110);
  5979  001864  0E06               	movlw	6
  5980  001866  ECA3  F00E         	call	_lcdInst
  5981                           
  5982                           ;lcd.c: 29: lcdInst(0b00000001);
  5983  00186A  0E01               	movlw	1
  5984  00186C  ECA3  F00E         	call	_lcdInst
  5985                           
  5986                           ;lcd.c: 30: _delay((unsigned long)((15)*(10000000/4000.0)));
  5987  001870  0E31               	movlw	49
  5988  001872  0100               	movlb	0	; () banked
  5989  001874  6F83               	movwf	??_initLCD& (0+255),b
  5990  001876  0EB2               	movlw	178
  5991  001878                     u4317:
  5992  001878  2EE8               	decfsz	wreg,f,c
  5993  00187A  D7FE               	bra	u4317
  5994  00187C  2F83               	decfsz	??_initLCD& (0+255),f,b
  5995  00187E  D7FC               	bra	u4317
  5996  001880  F000               	nop	
  5997  001882  0012               	return		;funcret
  5998  001884                     __end_of_initLCD:
  5999                           	opt stack 0
  6000                           tosu	equ	0xFFF
  6001                           tosh	equ	0xFFE
  6002                           tosl	equ	0xFFD
  6003                           pclath	equ	0xFFA
  6004                           tblptru	equ	0xFF8
  6005                           tblptrh	equ	0xFF7
  6006                           tblptrl	equ	0xFF6
  6007                           tablat	equ	0xFF5
  6008                           prodh	equ	0xFF4
  6009                           prodl	equ	0xFF3
  6010                           intcon	equ	0xFF2
  6011                           intcon3	equ	0xFF0
  6012                           postinc0	equ	0xFEE
  6013                           wreg	equ	0xFE8
  6014                           indf2	equ	0xFDF
  6015                           postinc2	equ	0xFDE
  6016                           postdec2	equ	0xFDD
  6017                           fsr2h	equ	0xFDA
  6018                           fsr2l	equ	0xFD9
  6019                           status	equ	0xFD8
  6020                           
  6021 ;; *************** function _lcdInst *****************
  6022 ;; Defined at:
  6023 ;;		line 33 in file "lcd.c"
  6024 ;; Parameters:    Size  Location     Type
  6025 ;;  data            1    wreg     unsigned char 
  6026 ;; Auto vars:     Size  Location     Type
  6027 ;;  data            1    2[BANK0 ] unsigned char 
  6028 ;; Return value:  Size  Location     Type
  6029 ;;                  1    wreg      void 
  6030 ;; Registers used:
  6031 ;;		wreg, status,2, status,0, cstack
  6032 ;; Tracked objects:
  6033 ;;		On entry : 0/0
  6034 ;;		On exit  : 0/0
  6035 ;;		Unchanged: 0/0
  6036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6038 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6040 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6041 ;;Total ram usage:        1 bytes
  6042 ;; Hardware stack levels used:    1
  6043 ;; Hardware stack levels required when called:    6
  6044 ;; This function calls:
  6045 ;;		_lcdNibble
  6046 ;; This function is called by:
  6047 ;;		_initLCD
  6048 ;;		_standby
  6049 ;;		_startSorting
  6050 ;;		_initialization
  6051 ;;		_results
  6052 ;; This function uses a non-reentrant model
  6053 ;;
  6054                           
  6055                           	psect	text40
  6056  001D46                     __ptext40:
  6057                           	opt stack 0
  6058  001D46                     _lcdInst:
  6059                           	opt stack 21
  6060                           
  6061                           ;incstack = 0
  6062                           ;lcdInst@data stored from wreg
  6063  001D46  0100               	movlb	0	; () banked
  6064  001D48  6F82               	movwf	lcdInst@data& (0+255),b
  6065                           
  6066                           ;lcd.c: 34: LATDbits.LATD2 = 0;
  6067  001D4A  948C               	bcf	3980,2,c	;volatile
  6068                           
  6069                           ;lcd.c: 35: lcdNibble(data);
  6070  001D4C  0100               	movlb	0	; () banked
  6071  001D4E  5182               	movf	lcdInst@data& (0+255),w,b
  6072  001D50  ECB3  F00A         	call	_lcdNibble
  6073  001D54  0012               	return		;funcret
  6074  001D56                     __end_of_lcdInst:
  6075                           	opt stack 0
  6076                           tosu	equ	0xFFF
  6077                           tosh	equ	0xFFE
  6078                           tosl	equ	0xFFD
  6079                           pclath	equ	0xFFA
  6080                           tblptru	equ	0xFF8
  6081                           tblptrh	equ	0xFF7
  6082                           tblptrl	equ	0xFF6
  6083                           tablat	equ	0xFF5
  6084                           prodh	equ	0xFF4
  6085                           prodl	equ	0xFF3
  6086                           intcon	equ	0xFF2
  6087                           intcon3	equ	0xFF0
  6088                           postinc0	equ	0xFEE
  6089                           wreg	equ	0xFE8
  6090                           indf2	equ	0xFDF
  6091                           postinc2	equ	0xFDE
  6092                           postdec2	equ	0xFDD
  6093                           fsr2h	equ	0xFDA
  6094                           fsr2l	equ	0xFD9
  6095                           status	equ	0xFD8
  6096                           
  6097 ;; *************** function _lcdNibble *****************
  6098 ;; Defined at:
  6099 ;;		line 43 in file "lcd.c"
  6100 ;; Parameters:    Size  Location     Type
  6101 ;;  data            1    wreg     unsigned char 
  6102 ;; Auto vars:     Size  Location     Type
  6103 ;;  data            1    1[BANK0 ] unsigned char 
  6104 ;;  temp            1    0[BANK0 ] unsigned char 
  6105 ;; Return value:  Size  Location     Type
  6106 ;;                  1    wreg      void 
  6107 ;; Registers used:
  6108 ;;		wreg, status,2, status,0
  6109 ;; Tracked objects:
  6110 ;;		On entry : 0/0
  6111 ;;		On exit  : 0/0
  6112 ;;		Unchanged: 0/0
  6113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6115 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6117 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6118 ;;Total ram usage:        2 bytes
  6119 ;; Hardware stack levels used:    1
  6120 ;; Hardware stack levels required when called:    5
  6121 ;; This function calls:
  6122 ;;		Nothing
  6123 ;; This function is called by:
  6124 ;;		_lcdInst
  6125 ;;		_putch
  6126 ;; This function uses a non-reentrant model
  6127 ;;
  6128                           
  6129                           	psect	text41
  6130  001566                     __ptext41:
  6131                           	opt stack 0
  6132  001566                     _lcdNibble:
  6133                           	opt stack 21
  6134                           
  6135                           ;incstack = 0
  6136                           ;lcdNibble@data stored from wreg
  6137  001566  0100               	movlb	0	; () banked
  6138  001568  6F81               	movwf	lcdNibble@data& (0+255),b
  6139                           
  6140                           ;lcd.c: 45: char temp = data & 0xF0;
  6141  00156A  0100               	movlb	0	; () banked
  6142  00156C  5181               	movf	lcdNibble@data& (0+255),w,b
  6143  00156E  0BF0               	andlw	240
  6144  001570  0100               	movlb	0	; () banked
  6145  001572  6F80               	movwf	lcdNibble@temp& (0+255),b
  6146                           
  6147                           ;lcd.c: 46: LATD = LATD & 0x0F;
  6148  001574  508C               	movf	3980,w,c	;volatile
  6149  001576  0B0F               	andlw	15
  6150  001578  6E8C               	movwf	3980,c	;volatile
  6151                           
  6152                           ;lcd.c: 47: LATD = temp | LATD;
  6153  00157A  0100               	movlb	0	; () banked
  6154  00157C  5180               	movf	lcdNibble@temp& (0+255),w,b
  6155  00157E  108C               	iorwf	3980,w,c	;volatile
  6156  001580  6E8C               	movwf	3980,c	;volatile
  6157                           
  6158                           ; BSR set to: 0
  6159                           ;lcd.c: 49: LATDbits.LATD3 = 0;
  6160  001582  968C               	bcf	3980,3,c	;volatile
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;lcd.c: 50: _delay((unsigned long)((25)*(10000000/4000000.0)));
  6164  001584  0E14               	movlw	20
  6165  001586                     u4327:
  6166  001586  2EE8               	decfsz	wreg,f,c
  6167  001588  D7FE               	bra	u4327
  6168  00158A  D000               	nop2	
  6169                           
  6170                           ;lcd.c: 51: LATDbits.LATD3 = 1;
  6171  00158C  868C               	bsf	3980,3,c	;volatile
  6172                           
  6173                           ;lcd.c: 52: _delay((unsigned long)((25)*(10000000/4000000.0)));
  6174  00158E  0E14               	movlw	20
  6175  001590                     u4337:
  6176  001590  2EE8               	decfsz	wreg,f,c
  6177  001592  D7FE               	bra	u4337
  6178  001594  D000               	nop2	
  6179                           
  6180                           ;lcd.c: 54: data = data << 4;
  6181  001596  0100               	movlb	0	; () banked
  6182  001598  3981               	swapf	lcdNibble@data& (0+255),w,b
  6183  00159A  0BF0               	andlw	240
  6184  00159C  0100               	movlb	0	; () banked
  6185  00159E  6F81               	movwf	lcdNibble@data& (0+255),b
  6186                           
  6187                           ;lcd.c: 56: temp = data & 0xF0;
  6188  0015A0  0100               	movlb	0	; () banked
  6189  0015A2  5181               	movf	lcdNibble@data& (0+255),w,b
  6190  0015A4  0BF0               	andlw	240
  6191  0015A6  0100               	movlb	0	; () banked
  6192  0015A8  6F80               	movwf	lcdNibble@temp& (0+255),b
  6193                           
  6194                           ;lcd.c: 57: LATD = LATD & 0x0F;
  6195  0015AA  508C               	movf	3980,w,c	;volatile
  6196  0015AC  0B0F               	andlw	15
  6197  0015AE  6E8C               	movwf	3980,c	;volatile
  6198                           
  6199                           ;lcd.c: 58: LATD = temp | LATD;
  6200  0015B0  0100               	movlb	0	; () banked
  6201  0015B2  5180               	movf	lcdNibble@temp& (0+255),w,b
  6202  0015B4  108C               	iorwf	3980,w,c	;volatile
  6203  0015B6  6E8C               	movwf	3980,c	;volatile
  6204                           
  6205                           ; BSR set to: 0
  6206                           ;lcd.c: 60: LATDbits.LATD3 = 0;
  6207  0015B8  968C               	bcf	3980,3,c	;volatile
  6208                           
  6209                           ; BSR set to: 0
  6210                           ;lcd.c: 61: _delay((unsigned long)((25)*(10000000/4000000.0)));
  6211  0015BA  0E14               	movlw	20
  6212  0015BC                     u4347:
  6213  0015BC  2EE8               	decfsz	wreg,f,c
  6214  0015BE  D7FE               	bra	u4347
  6215  0015C0  D000               	nop2	
  6216                           
  6217                           ;lcd.c: 62: LATDbits.LATD3 = 1;
  6218  0015C2  868C               	bsf	3980,3,c	;volatile
  6219                           
  6220                           ;lcd.c: 63: _delay((unsigned long)((25)*(10000000/4000000.0)));
  6221  0015C4  0E14               	movlw	20
  6222  0015C6                     u4357:
  6223  0015C6  2EE8               	decfsz	wreg,f,c
  6224  0015C8  D7FE               	bra	u4357
  6225  0015CA  D000               	nop2	
  6226  0015CC  0012               	return		;funcret
  6227  0015CE                     __end_of_lcdNibble:
  6228                           	opt stack 0
  6229                           tosu	equ	0xFFF
  6230                           tosh	equ	0xFFE
  6231                           tosl	equ	0xFFD
  6232                           pclath	equ	0xFFA
  6233                           tblptru	equ	0xFF8
  6234                           tblptrh	equ	0xFF7
  6235                           tblptrl	equ	0xFF6
  6236                           tablat	equ	0xFF5
  6237                           prodh	equ	0xFF4
  6238                           prodl	equ	0xFF3
  6239                           intcon	equ	0xFF2
  6240                           intcon3	equ	0xFF0
  6241                           postinc0	equ	0xFEE
  6242                           wreg	equ	0xFE8
  6243                           indf2	equ	0xFDF
  6244                           postinc2	equ	0xFDE
  6245                           postdec2	equ	0xFDD
  6246                           fsr2h	equ	0xFDA
  6247                           fsr2l	equ	0xFD9
  6248                           status	equ	0xFD8
  6249                           
  6250 ;; *************** function _done_sorting *****************
  6251 ;; Defined at:
  6252 ;;		line 184 in file "operation.c"
  6253 ;; Parameters:    Size  Location     Type
  6254 ;;		None
  6255 ;; Auto vars:     Size  Location     Type
  6256 ;;  i               1   23[BANK0 ] unsigned char 
  6257 ;;  End_time        2   24[BANK0 ] unsigned char [2]
  6258 ;;  total_second    2   21[BANK0 ] int 
  6259 ;; Return value:  Size  Location     Type
  6260 ;;                  2   14[BANK0 ] int 
  6261 ;; Registers used:
  6262 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6263 ;; Tracked objects:
  6264 ;;		On entry : 0/0
  6265 ;;		On exit  : 0/0
  6266 ;;		Unchanged: 0/0
  6267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6268 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6269 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6270 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6271 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6272 ;;Total ram usage:       12 bytes
  6273 ;; Hardware stack levels used:    1
  6274 ;; Hardware stack levels required when called:    7
  6275 ;; This function calls:
  6276 ;;		_I2C_Master_Read
  6277 ;;		_I2C_Master_Start
  6278 ;;		_I2C_Master_Stop
  6279 ;;		_I2C_Master_Write
  6280 ;;		___awdiv
  6281 ;;		___wmul
  6282 ;; This function is called by:
  6283 ;;		_main
  6284 ;; This function uses a non-reentrant model
  6285 ;;
  6286                           
  6287                           	psect	text42
  6288  0009FE                     __ptext42:
  6289                           	opt stack 0
  6290  0009FE                     _done_sorting:
  6291                           	opt stack 23
  6292                           
  6293                           ;operation.c: 186: fsm1 = 0;
  6294                           
  6295                           ;incstack = 0
  6296  0009FE  0E00               	movlw	0
  6297  000A00  0100               	movlb	0	; () banked
  6298  000A02  6FBD               	movwf	(_fsm1+1)& (0+255),b
  6299  000A04  0E00               	movlw	0
  6300  000A06  6FBC               	movwf	_fsm1& (0+255),b
  6301                           
  6302                           ;operation.c: 187: fsm2 = 0;
  6303  000A08  0E00               	movlw	0
  6304  000A0A  0100               	movlb	0	; () banked
  6305  000A0C  6FC9               	movwf	(_fsm2+1)& (0+255),b
  6306  000A0E  0E00               	movlw	0
  6307  000A10  6FC8               	movwf	_fsm2& (0+255),b
  6308                           
  6309                           ; BSR set to: 0
  6310                           ;operation.c: 189: signed int total_second;
  6311                           ;operation.c: 190: unsigned char End_time[2];
  6312                           ;operation.c: 193: I2C_Master_Start();
  6313  000A12  ECDC  F00E         	call	_I2C_Master_Start	;wreg free
  6314                           
  6315                           ;operation.c: 194: I2C_Master_Write(0b11010000);
  6316  000A16  0E00               	movlw	0
  6317  000A18  0100               	movlb	0	; () banked
  6318  000A1A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6319  000A1C  0ED0               	movlw	208
  6320  000A1E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6321  000A20  ECD3  F00E         	call	_I2C_Master_Write	;wreg free
  6322                           
  6323                           ;operation.c: 195: I2C_Master_Write(0x00);
  6324  000A24  0E00               	movlw	0
  6325  000A26  0100               	movlb	0	; () banked
  6326  000A28  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6327  000A2A  0E00               	movlw	0
  6328  000A2C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6329  000A2E  ECD3  F00E         	call	_I2C_Master_Write	;wreg free
  6330                           
  6331                           ;operation.c: 196: I2C_Master_Stop();
  6332  000A32  ECD8  F00E         	call	_I2C_Master_Stop	;wreg free
  6333                           
  6334                           ;operation.c: 199: I2C_Master_Start();
  6335  000A36  ECDC  F00E         	call	_I2C_Master_Start	;wreg free
  6336                           
  6337                           ;operation.c: 200: I2C_Master_Write(0b11010001);
  6338  000A3A  0E00               	movlw	0
  6339  000A3C  0100               	movlb	0	; () banked
  6340  000A3E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6341  000A40  0ED1               	movlw	209
  6342  000A42  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6343  000A44  ECD3  F00E         	call	_I2C_Master_Write	;wreg free
  6344                           
  6345                           ;operation.c: 201: for(unsigned char i=0;i<0x06;i++){
  6346  000A48  0E00               	movlw	0
  6347  000A4A  0100               	movlb	0	; () banked
  6348  000A4C  6F97               	movwf	done_sorting@i& (0+255),b
  6349  000A4E                     l4755:
  6350                           
  6351                           ; BSR set to: 0
  6352  000A4E  0E05               	movlw	5
  6353  000A50  0100               	movlb	0	; () banked
  6354  000A52  6597               	cpfsgt	done_sorting@i& (0+255),b
  6355  000A54  D001               	goto	l4759
  6356  000A56  D010               	goto	l4765
  6357  000A58                     l4759:
  6358                           
  6359                           ; BSR set to: 0
  6360                           ;operation.c: 202: time[i] = I2C_Master_Read(1);
  6361  000A58  0100               	movlb	0	; () banked
  6362  000A5A  5197               	movf	done_sorting@i& (0+255),w,b
  6363  000A5C  0D01               	mullw	1
  6364  000A5E  0EAB               	movlw	low _time
  6365  000A60  24F3               	addwf	prodl,w,c
  6366  000A62  6ED9               	movwf	fsr2l,c
  6367  000A64  0E00               	movlw	high _time
  6368  000A66  20F4               	addwfc	prodh,w,c
  6369  000A68  6EDA               	movwf	fsr2h,c
  6370  000A6A  0E01               	movlw	1
  6371  000A6C  ECF4  F00C         	call	_I2C_Master_Read
  6372  000A70  6EDF               	movwf	indf2,c
  6373  000A72  0100               	movlb	0	; () banked
  6374  000A74  2B97               	incf	done_sorting@i& (0+255),f,b
  6375  000A76  D7EB               	goto	l4755
  6376  000A78                     l4765:
  6377                           
  6378                           ; BSR set to: 0
  6379                           ;operation.c: 203: }
  6380                           ;operation.c: 204: time[6] = I2C_Master_Read(0);
  6381  000A78  0E00               	movlw	0
  6382  000A7A  ECF4  F00C         	call	_I2C_Master_Read
  6383  000A7E  0100               	movlb	0	; () banked
  6384  000A80  6FB1               	movwf	(_time+6)& (0+255),b
  6385                           
  6386                           ;operation.c: 205: I2C_Master_Stop();
  6387  000A82  ECD8  F00E         	call	_I2C_Master_Stop	;wreg free
  6388                           
  6389                           ;operation.c: 207: End_time[2] = time[2];
  6390  000A86  C0AD  F09A         	movff	_time+2,done_sorting@End_time+2
  6391                           
  6392                           ;operation.c: 208: End_time[1] = time[1];
  6393  000A8A  C0AC  F099         	movff	_time+1,done_sorting@End_time+1
  6394                           
  6395                           ;operation.c: 209: End_time[0] = time[0];
  6396  000A8E  C0AB  F098         	movff	_time,done_sorting@End_time
  6397                           
  6398                           ;operation.c: 211: total_start = (Start_time[1]/16*10 + Start_time[1]%16)*60 + (Start_ti
      +                          me[0]/16*10 + Start_time[0]%16);
  6399  000A92  C0BB  F090         	movff	_Start_time+1,??_done_sorting
  6400  000A96  0E0F               	movlw	15
  6401  000A98  0100               	movlb	0	; () banked
  6402  000A9A  1790               	andwf	??_done_sorting& (0+255),f,b
  6403  000A9C  0E00               	movlw	0
  6404  000A9E  0100               	movlb	0	; () banked
  6405  000AA0  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  6406  000AA2  0E10               	movlw	16
  6407  000AA4  6F82               	movwf	___awdiv@divisor& (0+255),b
  6408  000AA6  C0BB  F080         	movff	_Start_time+1,___awdiv@dividend
  6409  000AAA  0100               	movlb	0	; () banked
  6410  000AAC  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  6411  000AAE  EC23  F008         	call	___awdiv	;wreg free
  6412  000AB2  C080  F088         	movff	?___awdiv,___wmul@multiplier
  6413  000AB6  C081  F089         	movff	?___awdiv+1,___wmul@multiplier+1
  6414  000ABA  0E00               	movlw	0
  6415  000ABC  0100               	movlb	0	; () banked
  6416  000ABE  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6417  000AC0  0E0A               	movlw	10
  6418  000AC2  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  6419  000AC4  ECC0  F00C         	call	___wmul	;wreg free
  6420  000AC8  0100               	movlb	0	; () banked
  6421  000ACA  5190               	movf	??_done_sorting& (0+255),w,b
  6422  000ACC  0100               	movlb	0	; () banked
  6423  000ACE  2588               	addwf	?___wmul& (0+255),w,b
  6424  000AD0  0100               	movlb	0	; () banked
  6425  000AD2  6F93               	movwf	_done_sorting$1703& (0+255),b
  6426  000AD4  0100               	movlb	0	; () banked
  6427  000AD6  0E00               	movlw	0
  6428  000AD8  0100               	movlb	0	; () banked
  6429  000ADA  2189               	addwfc	(?___wmul+1)& (0+255),w,b
  6430  000ADC  0100               	movlb	0	; () banked
  6431  000ADE  6F94               	movwf	(_done_sorting$1703+1)& (0+255),b
  6432                           
  6433                           ; BSR set to: 0
  6434                           ;operation.c: 211: total_start = (Start_time[1]/16*10 + Start_time[1]%16)*60 + (Start_ti
      +                          me[0]/16*10 + Start_time[0]%16);
  6435  000AE0  0E00               	movlw	0
  6436  000AE2  0100               	movlb	0	; () banked
  6437  000AE4  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  6438  000AE6  0E10               	movlw	16
  6439  000AE8  6F82               	movwf	___awdiv@divisor& (0+255),b
  6440  000AEA  C0BA  F080         	movff	_Start_time,___awdiv@dividend
  6441  000AEE  0100               	movlb	0	; () banked
  6442  000AF0  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  6443  000AF2  EC23  F008         	call	___awdiv	;wreg free
  6444  000AF6  C080  F088         	movff	?___awdiv,___wmul@multiplier
  6445  000AFA  C081  F089         	movff	?___awdiv+1,___wmul@multiplier+1
  6446  000AFE  0E00               	movlw	0
  6447  000B00  0100               	movlb	0	; () banked
  6448  000B02  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6449  000B04  0E0A               	movlw	10
  6450  000B06  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  6451  000B08  ECC0  F00C         	call	___wmul	;wreg free
  6452  000B0C  C088  F090         	movff	?___wmul,??_done_sorting
  6453  000B10  C089  F091         	movff	?___wmul+1,??_done_sorting+1
  6454  000B14  C0BA  F092         	movff	_Start_time,??_done_sorting+2
  6455  000B18  0E0F               	movlw	15
  6456  000B1A  0100               	movlb	0	; () banked
  6457  000B1C  1792               	andwf	(??_done_sorting+2)& (0+255),f,b
  6458  000B1E  0100               	movlb	0	; () banked
  6459  000B20  5192               	movf	(??_done_sorting+2)& (0+255),w,b
  6460  000B22  0100               	movlb	0	; () banked
  6461  000B24  2790               	addwf	??_done_sorting& (0+255),f,b
  6462  000B26  0E00               	movlw	0
  6463  000B28  2391               	addwfc	(??_done_sorting+1)& (0+255),f,b
  6464  000B2A  C093  F088         	movff	_done_sorting$1703,___wmul@multiplier
  6465  000B2E  C094  F089         	movff	_done_sorting$1703+1,___wmul@multiplier+1
  6466  000B32  0E00               	movlw	0
  6467  000B34  0100               	movlb	0	; () banked
  6468  000B36  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6469  000B38  0E3C               	movlw	60
  6470  000B3A  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  6471  000B3C  ECC0  F00C         	call	___wmul	;wreg free
  6472  000B40  0100               	movlb	0	; () banked
  6473  000B42  5188               	movf	?___wmul& (0+255),w,b
  6474  000B44  0100               	movlb	0	; () banked
  6475  000B46  2790               	addwf	??_done_sorting& (0+255),f,b
  6476  000B48  0100               	movlb	0	; () banked
  6477  000B4A  5189               	movf	(?___wmul+1)& (0+255),w,b
  6478  000B4C  0100               	movlb	0	; () banked
  6479  000B4E  2391               	addwfc	(??_done_sorting+1)& (0+255),f,b
  6480  000B50  C090  F0B6         	movff	??_done_sorting,_total_start
  6481  000B54  C091  F0B7         	movff	??_done_sorting+1,_total_start+1
  6482  000B58  0100               	movlb	0	; () banked
  6483  000B5A  0E00               	movlw	0
  6484  000B5C  BFB7               	btfsc	(_total_start+1)& (0+255),7,b
  6485  000B5E  0EFF               	movlw	-1
  6486  000B60  6FB8               	movwf	(_total_start+2)& (0+255),b
  6487  000B62  6FB9               	movwf	(_total_start+3)& (0+255),b
  6488                           
  6489                           ; BSR set to: 0
  6490                           ;operation.c: 212: total_end = (End_time[1]/16*10 + End_time[1]%16)*60 + (End_time[0]/16
      +                          *10 + End_time[0]%16);
  6491  000B64  C099  F090         	movff	done_sorting@End_time+1,??_done_sorting
  6492  000B68  0E0F               	movlw	15
  6493  000B6A  0100               	movlb	0	; () banked
  6494  000B6C  1790               	andwf	??_done_sorting& (0+255),f,b
  6495  000B6E  0E00               	movlw	0
  6496  000B70  0100               	movlb	0	; () banked
  6497  000B72  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  6498  000B74  0E10               	movlw	16
  6499  000B76  6F82               	movwf	___awdiv@divisor& (0+255),b
  6500  000B78  C099  F080         	movff	done_sorting@End_time+1,___awdiv@dividend
  6501  000B7C  0100               	movlb	0	; () banked
  6502  000B7E  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  6503  000B80  EC23  F008         	call	___awdiv	;wreg free
  6504  000B84  C080  F088         	movff	?___awdiv,___wmul@multiplier
  6505  000B88  C081  F089         	movff	?___awdiv+1,___wmul@multiplier+1
  6506  000B8C  0E00               	movlw	0
  6507  000B8E  0100               	movlb	0	; () banked
  6508  000B90  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6509  000B92  0E0A               	movlw	10
  6510  000B94  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  6511  000B96  ECC0  F00C         	call	___wmul	;wreg free
  6512  000B9A  0100               	movlb	0	; () banked
  6513  000B9C  5190               	movf	??_done_sorting& (0+255),w,b
  6514  000B9E  0100               	movlb	0	; () banked
  6515  000BA0  2588               	addwf	?___wmul& (0+255),w,b
  6516  000BA2  0100               	movlb	0	; () banked
  6517  000BA4  6F93               	movwf	_done_sorting$1703& (0+255),b
  6518  000BA6  0100               	movlb	0	; () banked
  6519  000BA8  0E00               	movlw	0
  6520  000BAA  0100               	movlb	0	; () banked
  6521  000BAC  2189               	addwfc	(?___wmul+1)& (0+255),w,b
  6522  000BAE  0100               	movlb	0	; () banked
  6523  000BB0  6F94               	movwf	(_done_sorting$1703+1)& (0+255),b
  6524                           
  6525                           ; BSR set to: 0
  6526                           ;operation.c: 212: total_end = (End_time[1]/16*10 + End_time[1]%16)*60 + (End_time[0]/16
      +                          *10 + End_time[0]%16);
  6527  000BB2  0E00               	movlw	0
  6528  000BB4  0100               	movlb	0	; () banked
  6529  000BB6  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  6530  000BB8  0E10               	movlw	16
  6531  000BBA  6F82               	movwf	___awdiv@divisor& (0+255),b
  6532  000BBC  C098  F080         	movff	done_sorting@End_time,___awdiv@dividend
  6533  000BC0  0100               	movlb	0	; () banked
  6534  000BC2  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  6535  000BC4  EC23  F008         	call	___awdiv	;wreg free
  6536  000BC8  C080  F088         	movff	?___awdiv,___wmul@multiplier
  6537  000BCC  C081  F089         	movff	?___awdiv+1,___wmul@multiplier+1
  6538  000BD0  0E00               	movlw	0
  6539  000BD2  0100               	movlb	0	; () banked
  6540  000BD4  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6541  000BD6  0E0A               	movlw	10
  6542  000BD8  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  6543  000BDA  ECC0  F00C         	call	___wmul	;wreg free
  6544  000BDE  C088  F090         	movff	?___wmul,??_done_sorting
  6545  000BE2  C089  F091         	movff	?___wmul+1,??_done_sorting+1
  6546  000BE6  C098  F092         	movff	done_sorting@End_time,??_done_sorting+2
  6547  000BEA  0E0F               	movlw	15
  6548  000BEC  0100               	movlb	0	; () banked
  6549  000BEE  1792               	andwf	(??_done_sorting+2)& (0+255),f,b
  6550  000BF0  0100               	movlb	0	; () banked
  6551  000BF2  5192               	movf	(??_done_sorting+2)& (0+255),w,b
  6552  000BF4  0100               	movlb	0	; () banked
  6553  000BF6  2790               	addwf	??_done_sorting& (0+255),f,b
  6554  000BF8  0E00               	movlw	0
  6555  000BFA  2391               	addwfc	(??_done_sorting+1)& (0+255),f,b
  6556  000BFC  C093  F088         	movff	_done_sorting$1703,___wmul@multiplier
  6557  000C00  C094  F089         	movff	_done_sorting$1703+1,___wmul@multiplier+1
  6558  000C04  0E00               	movlw	0
  6559  000C06  0100               	movlb	0	; () banked
  6560  000C08  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6561  000C0A  0E3C               	movlw	60
  6562  000C0C  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  6563  000C0E  ECC0  F00C         	call	___wmul	;wreg free
  6564  000C12  0100               	movlb	0	; () banked
  6565  000C14  5188               	movf	?___wmul& (0+255),w,b
  6566  000C16  0100               	movlb	0	; () banked
  6567  000C18  2790               	addwf	??_done_sorting& (0+255),f,b
  6568  000C1A  0100               	movlb	0	; () banked
  6569  000C1C  5189               	movf	(?___wmul+1)& (0+255),w,b
  6570  000C1E  0100               	movlb	0	; () banked
  6571  000C20  2391               	addwfc	(??_done_sorting+1)& (0+255),f,b
  6572  000C22  C090  F0B2         	movff	??_done_sorting,_total_end
  6573  000C26  C091  F0B3         	movff	??_done_sorting+1,_total_end+1
  6574  000C2A  0100               	movlb	0	; () banked
  6575  000C2C  0E00               	movlw	0
  6576  000C2E  BFB3               	btfsc	(_total_end+1)& (0+255),7,b
  6577  000C30  0EFF               	movlw	-1
  6578  000C32  6FB4               	movwf	(_total_end+2)& (0+255),b
  6579  000C34  6FB5               	movwf	(_total_end+3)& (0+255),b
  6580                           
  6581                           ; BSR set to: 0
  6582                           ;operation.c: 213: total_second = total_end - total_start;
  6583  000C36  C0B6  F090         	movff	_total_start,??_done_sorting
  6584  000C3A  C0B7  F091         	movff	_total_start+1,??_done_sorting+1
  6585  000C3E  0100               	movlb	0	; () banked
  6586  000C40  1F90               	comf	??_done_sorting& (0+255),f,b
  6587  000C42  1F91               	comf	(??_done_sorting+1)& (0+255),f,b
  6588  000C44  4B90               	infsnz	??_done_sorting& (0+255),f,b
  6589  000C46  2B91               	incf	(??_done_sorting+1)& (0+255),f,b
  6590  000C48  0100               	movlb	0	; () banked
  6591  000C4A  51B2               	movf	_total_end& (0+255),w,b
  6592  000C4C  0100               	movlb	0	; () banked
  6593  000C4E  2590               	addwf	??_done_sorting& (0+255),w,b
  6594  000C50  0100               	movlb	0	; () banked
  6595  000C52  6F95               	movwf	done_sorting@total_second& (0+255),b
  6596  000C54  0100               	movlb	0	; () banked
  6597  000C56  51B3               	movf	(_total_end+1)& (0+255),w,b
  6598  000C58  0100               	movlb	0	; () banked
  6599  000C5A  2191               	addwfc	(??_done_sorting+1)& (0+255),w,b
  6600  000C5C  0100               	movlb	0	; () banked
  6601  000C5E  6F96               	movwf	(done_sorting@total_second+1)& (0+255),b
  6602                           
  6603                           ; BSR set to: 0
  6604                           ;operation.c: 215: if(total_second <= 0){
  6605  000C60  0100               	movlb	0	; () banked
  6606  000C62  BF96               	btfsc	(done_sorting@total_second+1)& (0+255),7,b
  6607  000C64  D007               	goto	l4785
  6608  000C66  0100               	movlb	0	; () banked
  6609  000C68  5196               	movf	(done_sorting@total_second+1)& (0+255),w,b
  6610  000C6A  E10E               	bnz	l4787
  6611  000C6C  0100               	movlb	0	; () banked
  6612  000C6E  0595               	decf	done_sorting@total_second& (0+255),w,b
  6613  000C70  B0D8               	btfsc	status,0,c
  6614  000C72  D00A               	goto	l4787
  6615  000C74                     l4785:
  6616                           
  6617                           ; BSR set to: 0
  6618                           ;operation.c: 216: total_second = 3600 + total_second;
  6619  000C74  0E10               	movlw	16
  6620  000C76  0100               	movlb	0	; () banked
  6621  000C78  2595               	addwf	done_sorting@total_second& (0+255),w,b
  6622  000C7A  0100               	movlb	0	; () banked
  6623  000C7C  6F95               	movwf	done_sorting@total_second& (0+255),b
  6624  000C7E  0E0E               	movlw	14
  6625  000C80  0100               	movlb	0	; () banked
  6626  000C82  2196               	addwfc	(done_sorting@total_second+1)& (0+255),w,b
  6627  000C84  0100               	movlb	0	; () banked
  6628  000C86  6F96               	movwf	(done_sorting@total_second+1)& (0+255),b
  6629  000C88                     l4787:
  6630                           
  6631                           ; BSR set to: 0
  6632                           ;operation.c: 217: }
  6633                           ;operation.c: 218: return total_second;
  6634  000C88  C095  F08E         	movff	done_sorting@total_second,?_done_sorting
  6635  000C8C  C096  F08F         	movff	done_sorting@total_second+1,?_done_sorting+1
  6636  000C90  0012               	return	
  6637  000C92                     __end_of_done_sorting:
  6638                           	opt stack 0
  6639                           tosu	equ	0xFFF
  6640                           tosh	equ	0xFFE
  6641                           tosl	equ	0xFFD
  6642                           pclath	equ	0xFFA
  6643                           tblptru	equ	0xFF8
  6644                           tblptrh	equ	0xFF7
  6645                           tblptrl	equ	0xFF6
  6646                           tablat	equ	0xFF5
  6647                           prodh	equ	0xFF4
  6648                           prodl	equ	0xFF3
  6649                           intcon	equ	0xFF2
  6650                           intcon3	equ	0xFF0
  6651                           postinc0	equ	0xFEE
  6652                           wreg	equ	0xFE8
  6653                           indf2	equ	0xFDF
  6654                           postinc2	equ	0xFDE
  6655                           postdec2	equ	0xFDD
  6656                           fsr2h	equ	0xFDA
  6657                           fsr2l	equ	0xFD9
  6658                           status	equ	0xFD8
  6659                           
  6660 ;; *************** function ___wmul *****************
  6661 ;; Defined at:
  6662 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/Umul16.c"
  6663 ;; Parameters:    Size  Location     Type
  6664 ;;  multiplier      2    8[BANK0 ] unsigned int 
  6665 ;;  multiplicand    2   10[BANK0 ] unsigned int 
  6666 ;; Auto vars:     Size  Location     Type
  6667 ;;  product         2   12[BANK0 ] unsigned int 
  6668 ;; Return value:  Size  Location     Type
  6669 ;;                  2    8[BANK0 ] unsigned int 
  6670 ;; Registers used:
  6671 ;;		wreg, status,2, status,0, prodl, prodh
  6672 ;; Tracked objects:
  6673 ;;		On entry : 0/0
  6674 ;;		On exit  : 0/0
  6675 ;;		Unchanged: 0/0
  6676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6677 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6678 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6680 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6681 ;;Total ram usage:        6 bytes
  6682 ;; Hardware stack levels used:    1
  6683 ;; Hardware stack levels required when called:    5
  6684 ;; This function calls:
  6685 ;;		Nothing
  6686 ;; This function is called by:
  6687 ;;		_done_sorting
  6688 ;;		_printf
  6689 ;; This function uses a non-reentrant model
  6690 ;;
  6691                           
  6692                           	psect	text43
  6693  001980                     __ptext43:
  6694                           	opt stack 0
  6695  001980                     ___wmul:
  6696                           	opt stack 23
  6697                           
  6698                           ; BSR set to: 0
  6699                           ;incstack = 0
  6700  001980  0100               	movlb	0	; () banked
  6701  001982  5188               	movf	___wmul@multiplier& (0+255),w,b
  6702  001984  0100               	movlb	0	; () banked
  6703  001986  038A               	mulwf	___wmul@multiplicand& (0+255),b
  6704  001988  CFF3 F08C          	movff	prodl,___wmul@product
  6705  00198C  CFF4 F08D          	movff	prodh,___wmul@product+1
  6706  001990  0100               	movlb	0	; () banked
  6707  001992  5188               	movf	___wmul@multiplier& (0+255),w,b
  6708  001994  0100               	movlb	0	; () banked
  6709  001996  038B               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  6710  001998  50F3               	movf	prodl,w,c
  6711  00199A  0100               	movlb	0	; () banked
  6712  00199C  278D               	addwf	(___wmul@product+1)& (0+255),f,b
  6713  00199E  0100               	movlb	0	; () banked
  6714  0019A0  5189               	movf	(___wmul@multiplier+1)& (0+255),w,b
  6715  0019A2  0100               	movlb	0	; () banked
  6716  0019A4  038A               	mulwf	___wmul@multiplicand& (0+255),b
  6717  0019A6  50F3               	movf	prodl,w,c
  6718  0019A8  0100               	movlb	0	; () banked
  6719  0019AA  278D               	addwf	(___wmul@product+1)& (0+255),f,b
  6720                           
  6721                           ; BSR set to: 0
  6722  0019AC  C08C  F088         	movff	___wmul@product,?___wmul
  6723  0019B0  C08D  F089         	movff	___wmul@product+1,?___wmul+1
  6724  0019B4  0012               	return	
  6725  0019B6                     __end_of___wmul:
  6726                           	opt stack 0
  6727                           tosu	equ	0xFFF
  6728                           tosh	equ	0xFFE
  6729                           tosl	equ	0xFFD
  6730                           pclath	equ	0xFFA
  6731                           tblptru	equ	0xFF8
  6732                           tblptrh	equ	0xFF7
  6733                           tblptrl	equ	0xFF6
  6734                           tablat	equ	0xFF5
  6735                           prodh	equ	0xFF4
  6736                           prodl	equ	0xFF3
  6737                           intcon	equ	0xFF2
  6738                           intcon3	equ	0xFF0
  6739                           postinc0	equ	0xFEE
  6740                           wreg	equ	0xFE8
  6741                           indf2	equ	0xFDF
  6742                           postinc2	equ	0xFDE
  6743                           postdec2	equ	0xFDD
  6744                           fsr2h	equ	0xFDA
  6745                           fsr2l	equ	0xFD9
  6746                           status	equ	0xFD8
  6747                           
  6748 ;; *************** function ___awdiv *****************
  6749 ;; Defined at:
  6750 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awdiv.c"
  6751 ;; Parameters:    Size  Location     Type
  6752 ;;  dividend        2    0[BANK0 ] int 
  6753 ;;  divisor         2    2[BANK0 ] int 
  6754 ;; Auto vars:     Size  Location     Type
  6755 ;;  quotient        2    6[BANK0 ] int 
  6756 ;;  sign            1    5[BANK0 ] unsigned char 
  6757 ;;  counter         1    4[BANK0 ] unsigned char 
  6758 ;; Return value:  Size  Location     Type
  6759 ;;                  2    0[BANK0 ] int 
  6760 ;; Registers used:
  6761 ;;		wreg, status,2, status,0
  6762 ;; Tracked objects:
  6763 ;;		On entry : 0/0
  6764 ;;		On exit  : 0/0
  6765 ;;		Unchanged: 0/0
  6766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6767 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6768 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6770 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6771 ;;Total ram usage:        8 bytes
  6772 ;; Hardware stack levels used:    1
  6773 ;; Hardware stack levels required when called:    5
  6774 ;; This function calls:
  6775 ;;		Nothing
  6776 ;; This function is called by:
  6777 ;;		_done_sorting
  6778 ;; This function uses a non-reentrant model
  6779 ;;
  6780                           
  6781                           	psect	text44
  6782  001046                     __ptext44:
  6783                           	opt stack 0
  6784  001046                     ___awdiv:
  6785                           	opt stack 24
  6786                           
  6787                           ; BSR set to: 0
  6788                           ;incstack = 0
  6789  001046  0E00               	movlw	0
  6790  001048  0100               	movlb	0	; () banked
  6791  00104A  6F85               	movwf	___awdiv@sign& (0+255),b
  6792                           
  6793                           ; BSR set to: 0
  6794  00104C  0100               	movlb	0	; () banked
  6795  00104E  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6796  001050  D008               	goto	l4575
  6797                           
  6798                           ; BSR set to: 0
  6799  001052  0100               	movlb	0	; () banked
  6800  001054  6D82               	negf	___awdiv@divisor& (0+255),b
  6801  001056  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6802  001058  B0D8               	btfsc	status,0,c
  6803  00105A  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6804                           
  6805                           ; BSR set to: 0
  6806  00105C  0E01               	movlw	1
  6807  00105E  0100               	movlb	0	; () banked
  6808  001060  6F85               	movwf	___awdiv@sign& (0+255),b
  6809  001062                     l4575:
  6810                           
  6811                           ; BSR set to: 0
  6812  001062  0100               	movlb	0	; () banked
  6813  001064  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6814  001066  D008               	goto	l4581
  6815                           
  6816                           ; BSR set to: 0
  6817  001068  0100               	movlb	0	; () banked
  6818  00106A  6D80               	negf	___awdiv@dividend& (0+255),b
  6819  00106C  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6820  00106E  B0D8               	btfsc	status,0,c
  6821  001070  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6822                           
  6823                           ; BSR set to: 0
  6824  001072  0E01               	movlw	1
  6825  001074  0100               	movlb	0	; () banked
  6826  001076  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  6827  001078                     l4581:
  6828                           
  6829                           ; BSR set to: 0
  6830  001078  0E00               	movlw	0
  6831  00107A  0100               	movlb	0	; () banked
  6832  00107C  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  6833  00107E  0E00               	movlw	0
  6834  001080  6F86               	movwf	___awdiv@quotient& (0+255),b
  6835                           
  6836                           ; BSR set to: 0
  6837  001082  0100               	movlb	0	; () banked
  6838  001084  5182               	movf	___awdiv@divisor& (0+255),w,b
  6839  001086  0100               	movlb	0	; () banked
  6840  001088  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6841  00108A  B4D8               	btfsc	status,2,c
  6842  00108C  D02C               	goto	l4603
  6843                           
  6844                           ; BSR set to: 0
  6845  00108E  0E01               	movlw	1
  6846  001090  0100               	movlb	0	; () banked
  6847  001092  6F84               	movwf	___awdiv@counter& (0+255),b
  6848  001094  D006               	goto	l4589
  6849  001096                     l4587:
  6850                           
  6851                           ; BSR set to: 0
  6852  001096  0100               	movlb	0	; () banked
  6853  001098  90D8               	bcf	status,0,c
  6854  00109A  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  6855  00109C  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6856  00109E  0100               	movlb	0	; () banked
  6857  0010A0  2B84               	incf	___awdiv@counter& (0+255),f,b
  6858  0010A2                     l4589:
  6859                           
  6860                           ; BSR set to: 0
  6861  0010A2  0100               	movlb	0	; () banked
  6862  0010A4  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6863  0010A6  D7F7               	goto	l4587
  6864  0010A8                     l4591:
  6865                           
  6866                           ; BSR set to: 0
  6867  0010A8  0100               	movlb	0	; () banked
  6868  0010AA  90D8               	bcf	status,0,c
  6869  0010AC  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  6870  0010AE  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6871                           
  6872                           ; BSR set to: 0
  6873  0010B0  0100               	movlb	0	; () banked
  6874  0010B2  5182               	movf	___awdiv@divisor& (0+255),w,b
  6875  0010B4  0100               	movlb	0	; () banked
  6876  0010B6  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  6877  0010B8  0100               	movlb	0	; () banked
  6878  0010BA  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6879  0010BC  0100               	movlb	0	; () banked
  6880  0010BE  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6881  0010C0  A0D8               	btfss	status,0,c
  6882  0010C2  D00A               	goto	l4599
  6883                           
  6884                           ; BSR set to: 0
  6885  0010C4  0100               	movlb	0	; () banked
  6886  0010C6  5182               	movf	___awdiv@divisor& (0+255),w,b
  6887  0010C8  0100               	movlb	0	; () banked
  6888  0010CA  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  6889  0010CC  0100               	movlb	0	; () banked
  6890  0010CE  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6891  0010D0  0100               	movlb	0	; () banked
  6892  0010D2  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6893                           
  6894                           ; BSR set to: 0
  6895  0010D4  0100               	movlb	0	; () banked
  6896  0010D6  8186               	bsf	___awdiv@quotient& (0+255),0,b
  6897  0010D8                     l4599:
  6898                           
  6899                           ; BSR set to: 0
  6900  0010D8  0100               	movlb	0	; () banked
  6901  0010DA  90D8               	bcf	status,0,c
  6902  0010DC  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6903  0010DE  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  6904                           
  6905                           ; BSR set to: 0
  6906  0010E0  0100               	movlb	0	; () banked
  6907  0010E2  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  6908  0010E4  D7E1               	goto	l4591
  6909  0010E6                     l4603:
  6910                           
  6911                           ; BSR set to: 0
  6912  0010E6  0100               	movlb	0	; () banked
  6913  0010E8  5185               	movf	___awdiv@sign& (0+255),w,b
  6914  0010EA  0100               	movlb	0	; () banked
  6915  0010EC  B4D8               	btfsc	status,2,c
  6916  0010EE  D005               	goto	l4607
  6917                           
  6918                           ; BSR set to: 0
  6919  0010F0  0100               	movlb	0	; () banked
  6920  0010F2  6D86               	negf	___awdiv@quotient& (0+255),b
  6921  0010F4  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6922  0010F6  B0D8               	btfsc	status,0,c
  6923  0010F8  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6924  0010FA                     l4607:
  6925                           
  6926                           ; BSR set to: 0
  6927  0010FA  C086  F080         	movff	___awdiv@quotient,?___awdiv
  6928  0010FE  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  6929  001102  0012               	return	
  6930  001104                     __end_of___awdiv:
  6931                           	opt stack 0
  6932                           tosu	equ	0xFFF
  6933                           tosh	equ	0xFFE
  6934                           tosl	equ	0xFFD
  6935                           pclath	equ	0xFFA
  6936                           tblptru	equ	0xFF8
  6937                           tblptrh	equ	0xFF7
  6938                           tblptrl	equ	0xFF6
  6939                           tablat	equ	0xFF5
  6940                           prodh	equ	0xFF4
  6941                           prodl	equ	0xFF3
  6942                           intcon	equ	0xFF2
  6943                           intcon3	equ	0xFF0
  6944                           postinc0	equ	0xFEE
  6945                           wreg	equ	0xFE8
  6946                           indf2	equ	0xFDF
  6947                           postinc2	equ	0xFDE
  6948                           postdec2	equ	0xFDD
  6949                           fsr2h	equ	0xFDA
  6950                           fsr2l	equ	0xFD9
  6951                           status	equ	0xFD8
  6952                           
  6953 ;; *************** function _I2C_Master_Write *****************
  6954 ;; Defined at:
  6955 ;;		line 57 in file "I2C.c"
  6956 ;; Parameters:    Size  Location     Type
  6957 ;;  d               2    1[BANK0 ] unsigned int 
  6958 ;; Auto vars:     Size  Location     Type
  6959 ;;		None
  6960 ;; Return value:  Size  Location     Type
  6961 ;;                  1    wreg      void 
  6962 ;; Registers used:
  6963 ;;		wreg, status,2, status,0, cstack
  6964 ;; Tracked objects:
  6965 ;;		On entry : 0/0
  6966 ;;		On exit  : 0/0
  6967 ;;		Unchanged: 0/0
  6968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6969 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6972 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6973 ;;Total ram usage:        2 bytes
  6974 ;; Hardware stack levels used:    1
  6975 ;; Hardware stack levels required when called:    6
  6976 ;; This function calls:
  6977 ;;		_I2C_Master_Wait
  6978 ;; This function is called by:
  6979 ;;		_set_time
  6980 ;;		_standby
  6981 ;;		_done_sorting
  6982 ;; This function uses a non-reentrant model
  6983 ;;
  6984                           
  6985                           	psect	text45
  6986  001DA6                     __ptext45:
  6987                           	opt stack 0
  6988  001DA6                     _I2C_Master_Write:
  6989                           	opt stack 23
  6990                           
  6991                           ;I2C.c: 59: I2C_Master_Wait();
  6992                           
  6993                           ; BSR set to: 0
  6994                           ;incstack = 0
  6995  001DA6  EC6D  F00E         	call	_I2C_Master_Wait	;wreg free
  6996                           
  6997                           ;I2C.c: 60: SSPBUF = d;
  6998  001DAA  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  6999  001DAE  0012               	return		;funcret
  7000  001DB0                     __end_of_I2C_Master_Write:
  7001                           	opt stack 0
  7002                           tosu	equ	0xFFF
  7003                           tosh	equ	0xFFE
  7004                           tosl	equ	0xFFD
  7005                           pclath	equ	0xFFA
  7006                           tblptru	equ	0xFF8
  7007                           tblptrh	equ	0xFF7
  7008                           tblptrl	equ	0xFF6
  7009                           tablat	equ	0xFF5
  7010                           prodh	equ	0xFF4
  7011                           prodl	equ	0xFF3
  7012                           intcon	equ	0xFF2
  7013                           intcon3	equ	0xFF0
  7014                           postinc0	equ	0xFEE
  7015                           wreg	equ	0xFE8
  7016                           indf2	equ	0xFDF
  7017                           postinc2	equ	0xFDE
  7018                           postdec2	equ	0xFDD
  7019                           fsr2h	equ	0xFDA
  7020                           fsr2l	equ	0xFD9
  7021                           status	equ	0xFD8
  7022                           
  7023 ;; *************** function _I2C_Master_Stop *****************
  7024 ;; Defined at:
  7025 ;;		line 51 in file "I2C.c"
  7026 ;; Parameters:    Size  Location     Type
  7027 ;;		None
  7028 ;; Auto vars:     Size  Location     Type
  7029 ;;		None
  7030 ;; Return value:  Size  Location     Type
  7031 ;;                  1    wreg      void 
  7032 ;; Registers used:
  7033 ;;		wreg, status,2, status,0, cstack
  7034 ;; Tracked objects:
  7035 ;;		On entry : 0/0
  7036 ;;		On exit  : 0/0
  7037 ;;		Unchanged: 0/0
  7038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7043 ;;Total ram usage:        0 bytes
  7044 ;; Hardware stack levels used:    1
  7045 ;; Hardware stack levels required when called:    6
  7046 ;; This function calls:
  7047 ;;		_I2C_Master_Wait
  7048 ;; This function is called by:
  7049 ;;		_set_time
  7050 ;;		_standby
  7051 ;;		_done_sorting
  7052 ;; This function uses a non-reentrant model
  7053 ;;
  7054                           
  7055                           	psect	text46
  7056  001DB0                     __ptext46:
  7057                           	opt stack 0
  7058  001DB0                     _I2C_Master_Stop:
  7059                           	opt stack 23
  7060                           
  7061                           ;I2C.c: 53: I2C_Master_Wait();
  7062                           
  7063                           ;incstack = 0
  7064  001DB0  EC6D  F00E         	call	_I2C_Master_Wait	;wreg free
  7065                           
  7066                           ;I2C.c: 54: PEN = 1;
  7067  001DB4  84C5               	bsf	4037,2,c	;volatile
  7068  001DB6  0012               	return		;funcret
  7069  001DB8                     __end_of_I2C_Master_Stop:
  7070                           	opt stack 0
  7071                           tosu	equ	0xFFF
  7072                           tosh	equ	0xFFE
  7073                           tosl	equ	0xFFD
  7074                           pclath	equ	0xFFA
  7075                           tblptru	equ	0xFF8
  7076                           tblptrh	equ	0xFF7
  7077                           tblptrl	equ	0xFF6
  7078                           tablat	equ	0xFF5
  7079                           prodh	equ	0xFF4
  7080                           prodl	equ	0xFF3
  7081                           intcon	equ	0xFF2
  7082                           intcon3	equ	0xFF0
  7083                           postinc0	equ	0xFEE
  7084                           wreg	equ	0xFE8
  7085                           indf2	equ	0xFDF
  7086                           postinc2	equ	0xFDE
  7087                           postdec2	equ	0xFDD
  7088                           fsr2h	equ	0xFDA
  7089                           fsr2l	equ	0xFD9
  7090                           status	equ	0xFD8
  7091                           
  7092 ;; *************** function _I2C_Master_Start *****************
  7093 ;; Defined at:
  7094 ;;		line 39 in file "I2C.c"
  7095 ;; Parameters:    Size  Location     Type
  7096 ;;		None
  7097 ;; Auto vars:     Size  Location     Type
  7098 ;;		None
  7099 ;; Return value:  Size  Location     Type
  7100 ;;                  1    wreg      void 
  7101 ;; Registers used:
  7102 ;;		wreg, status,2, status,0, cstack
  7103 ;; Tracked objects:
  7104 ;;		On entry : 0/0
  7105 ;;		On exit  : 0/0
  7106 ;;		Unchanged: 0/0
  7107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7112 ;;Total ram usage:        0 bytes
  7113 ;; Hardware stack levels used:    1
  7114 ;; Hardware stack levels required when called:    6
  7115 ;; This function calls:
  7116 ;;		_I2C_Master_Wait
  7117 ;; This function is called by:
  7118 ;;		_set_time
  7119 ;;		_standby
  7120 ;;		_done_sorting
  7121 ;; This function uses a non-reentrant model
  7122 ;;
  7123                           
  7124                           	psect	text47
  7125  001DB8                     __ptext47:
  7126                           	opt stack 0
  7127  001DB8                     _I2C_Master_Start:
  7128                           	opt stack 23
  7129                           
  7130                           ;I2C.c: 41: I2C_Master_Wait();
  7131                           
  7132                           ;incstack = 0
  7133  001DB8  EC6D  F00E         	call	_I2C_Master_Wait	;wreg free
  7134                           
  7135                           ;I2C.c: 42: SEN = 1;
  7136  001DBC  80C5               	bsf	4037,0,c	;volatile
  7137  001DBE  0012               	return		;funcret
  7138  001DC0                     __end_of_I2C_Master_Start:
  7139                           	opt stack 0
  7140                           tosu	equ	0xFFF
  7141                           tosh	equ	0xFFE
  7142                           tosl	equ	0xFFD
  7143                           pclath	equ	0xFFA
  7144                           tblptru	equ	0xFF8
  7145                           tblptrh	equ	0xFF7
  7146                           tblptrl	equ	0xFF6
  7147                           tablat	equ	0xFF5
  7148                           prodh	equ	0xFF4
  7149                           prodl	equ	0xFF3
  7150                           intcon	equ	0xFF2
  7151                           intcon3	equ	0xFF0
  7152                           postinc0	equ	0xFEE
  7153                           wreg	equ	0xFE8
  7154                           indf2	equ	0xFDF
  7155                           postinc2	equ	0xFDE
  7156                           postdec2	equ	0xFDD
  7157                           fsr2h	equ	0xFDA
  7158                           fsr2l	equ	0xFD9
  7159                           status	equ	0xFD8
  7160                           
  7161 ;; *************** function _I2C_Master_Read *****************
  7162 ;; Defined at:
  7163 ;;		line 63 in file "I2C.c"
  7164 ;; Parameters:    Size  Location     Type
  7165 ;;  a               1    wreg     unsigned char 
  7166 ;; Auto vars:     Size  Location     Type
  7167 ;;  a               1    1[BANK0 ] unsigned char 
  7168 ;;  temp            1    2[BANK0 ] unsigned char 
  7169 ;; Return value:  Size  Location     Type
  7170 ;;                  1    wreg      unsigned char 
  7171 ;; Registers used:
  7172 ;;		wreg, status,2, status,0, cstack
  7173 ;; Tracked objects:
  7174 ;;		On entry : 0/0
  7175 ;;		On exit  : 0/0
  7176 ;;		Unchanged: 0/0
  7177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7179 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7181 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7182 ;;Total ram usage:        2 bytes
  7183 ;; Hardware stack levels used:    1
  7184 ;; Hardware stack levels required when called:    6
  7185 ;; This function calls:
  7186 ;;		_I2C_Master_Wait
  7187 ;; This function is called by:
  7188 ;;		_standby
  7189 ;;		_done_sorting
  7190 ;; This function uses a non-reentrant model
  7191 ;;
  7192                           
  7193                           	psect	text48
  7194  0019E8                     __ptext48:
  7195                           	opt stack 0
  7196  0019E8                     _I2C_Master_Read:
  7197                           	opt stack 23
  7198                           
  7199                           ;incstack = 0
  7200                           ;I2C_Master_Read@a stored from wreg
  7201  0019E8  0100               	movlb	0	; () banked
  7202  0019EA  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  7203                           
  7204                           ;I2C.c: 65: unsigned char temp;
  7205                           ;I2C.c: 66: I2C_Master_Wait();
  7206  0019EC  EC6D  F00E         	call	_I2C_Master_Wait	;wreg free
  7207                           
  7208                           ;I2C.c: 67: RCEN = 1;
  7209  0019F0  86C5               	bsf	4037,3,c	;volatile
  7210                           
  7211                           ;I2C.c: 68: I2C_Master_Wait();
  7212  0019F2  EC6D  F00E         	call	_I2C_Master_Wait	;wreg free
  7213                           
  7214                           ;I2C.c: 69: temp = SSPBUF;
  7215  0019F6  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  7216                           
  7217                           ;I2C.c: 70: I2C_Master_Wait();
  7218  0019FA  EC6D  F00E         	call	_I2C_Master_Wait	;wreg free
  7219                           
  7220                           ;I2C.c: 71: ACKDT = (a)?0:1;
  7221  0019FE  0100               	movlb	0	; () banked
  7222  001A00  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  7223  001A02  0100               	movlb	0	; () banked
  7224  001A04  A4D8               	btfss	status,2,c
  7225  001A06  D002               	goto	u3660
  7226  001A08  8AC5               	bsf	4037,5,c	;volatile
  7227  001A0A  D001               	goto	l4461
  7228  001A0C                     u3660:
  7229  001A0C  9AC5               	bcf	4037,5,c	;volatile
  7230  001A0E                     l4461:
  7231                           
  7232                           ;I2C.c: 72: ACKEN = 1;
  7233  001A0E  88C5               	bsf	4037,4,c	;volatile
  7234                           
  7235                           ;I2C.c: 73: return temp;
  7236  001A10  0100               	movlb	0	; () banked
  7237  001A12  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  7238  001A14  0012               	return	
  7239  001A16                     __end_of_I2C_Master_Read:
  7240                           	opt stack 0
  7241                           tosu	equ	0xFFF
  7242                           tosh	equ	0xFFE
  7243                           tosl	equ	0xFFD
  7244                           pclath	equ	0xFFA
  7245                           tblptru	equ	0xFF8
  7246                           tblptrh	equ	0xFF7
  7247                           tblptrl	equ	0xFF6
  7248                           tablat	equ	0xFF5
  7249                           prodh	equ	0xFF4
  7250                           prodl	equ	0xFF3
  7251                           intcon	equ	0xFF2
  7252                           intcon3	equ	0xFF0
  7253                           postinc0	equ	0xFEE
  7254                           wreg	equ	0xFE8
  7255                           indf2	equ	0xFDF
  7256                           postinc2	equ	0xFDE
  7257                           postdec2	equ	0xFDD
  7258                           fsr2h	equ	0xFDA
  7259                           fsr2l	equ	0xFD9
  7260                           status	equ	0xFD8
  7261                           
  7262 ;; *************** function _I2C_Master_Wait *****************
  7263 ;; Defined at:
  7264 ;;		line 34 in file "I2C.c"
  7265 ;; Parameters:    Size  Location     Type
  7266 ;;		None
  7267 ;; Auto vars:     Size  Location     Type
  7268 ;;		None
  7269 ;; Return value:  Size  Location     Type
  7270 ;;                  1    wreg      void 
  7271 ;; Registers used:
  7272 ;;		wreg, status,2, status,0
  7273 ;; Tracked objects:
  7274 ;;		On entry : 0/0
  7275 ;;		On exit  : 0/0
  7276 ;;		Unchanged: 0/0
  7277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7280 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7281 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7282 ;;Total ram usage:        1 bytes
  7283 ;; Hardware stack levels used:    1
  7284 ;; Hardware stack levels required when called:    5
  7285 ;; This function calls:
  7286 ;;		Nothing
  7287 ;; This function is called by:
  7288 ;;		_I2C_Master_Start
  7289 ;;		_I2C_Master_Stop
  7290 ;;		_I2C_Master_Write
  7291 ;;		_I2C_Master_Read
  7292 ;;		_I2C_Master_RepeatedStart
  7293 ;; This function uses a non-reentrant model
  7294 ;;
  7295                           
  7296                           	psect	text49
  7297  001CDA                     __ptext49:
  7298                           	opt stack 0
  7299  001CDA                     _I2C_Master_Wait:
  7300                           	opt stack 23
  7301  001CDA                     l126:
  7302  001CDA  B4C7               	btfsc	4039,2,c	;volatile
  7303  001CDC  D7FE               	goto	l126
  7304  001CDE  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  7305  001CE2  0E1F               	movlw	31
  7306  001CE4  0100               	movlb	0	; () banked
  7307  001CE6  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  7308  001CE8  B4D8               	btfsc	status,2,c
  7309  001CEA  0012               	return	
  7310  001CEC  D7F6               	goto	l126
  7311  001CEE                     __end_of_I2C_Master_Wait:
  7312                           	opt stack 0
  7313                           tosu	equ	0xFFF
  7314                           tosh	equ	0xFFE
  7315                           tosl	equ	0xFFD
  7316                           pclath	equ	0xFFA
  7317                           tblptru	equ	0xFF8
  7318                           tblptrh	equ	0xFF7
  7319                           tblptrl	equ	0xFF6
  7320                           tablat	equ	0xFF5
  7321                           prodh	equ	0xFF4
  7322                           prodl	equ	0xFF3
  7323                           intcon	equ	0xFF2
  7324                           intcon3	equ	0xFF0
  7325                           postinc0	equ	0xFEE
  7326                           wreg	equ	0xFE8
  7327                           indf2	equ	0xFDF
  7328                           postinc2	equ	0xFDE
  7329                           postdec2	equ	0xFDD
  7330                           fsr2h	equ	0xFDA
  7331                           fsr2l	equ	0xFD9
  7332                           status	equ	0xFD8
  7333                           
  7334 ;; *************** function _I2C_Master_Init *****************
  7335 ;; Defined at:
  7336 ;;		line 23 in file "I2C.c"
  7337 ;; Parameters:    Size  Location     Type
  7338 ;;  c               4   13[BANK0 ] const unsigned long 
  7339 ;; Auto vars:     Size  Location     Type
  7340 ;;		None
  7341 ;; Return value:  Size  Location     Type
  7342 ;;                  1    wreg      void 
  7343 ;; Registers used:
  7344 ;;		wreg, status,2, status,0, cstack
  7345 ;; Tracked objects:
  7346 ;;		On entry : 0/0
  7347 ;;		On exit  : 0/0
  7348 ;;		Unchanged: 0/0
  7349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7350 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7352 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7353 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7354 ;;Total ram usage:        8 bytes
  7355 ;; Hardware stack levels used:    1
  7356 ;; Hardware stack levels required when called:    6
  7357 ;; This function calls:
  7358 ;;		___lldiv
  7359 ;; This function is called by:
  7360 ;;		_main
  7361 ;; This function uses a non-reentrant model
  7362 ;;
  7363                           
  7364                           	psect	text50
  7365  001692                     __ptext50:
  7366                           	opt stack 0
  7367  001692                     _I2C_Master_Init:
  7368                           	opt stack 24
  7369                           
  7370                           ;I2C.c: 26: SSPSTAT = 0b00000000;
  7371                           
  7372                           ; BSR set to: 0
  7373                           ;incstack = 0
  7374  001692  0E00               	movlw	0
  7375  001694  6EC7               	movwf	4039,c	;volatile
  7376                           
  7377                           ;I2C.c: 27: SSPCON1 = 0b00101000;
  7378  001696  0E28               	movlw	40
  7379  001698  6EC6               	movwf	4038,c	;volatile
  7380                           
  7381                           ;I2C.c: 28: SSPCON2 = 0b00000000;
  7382  00169A  0E00               	movlw	0
  7383  00169C  6EC5               	movwf	4037,c	;volatile
  7384                           
  7385                           ;I2C.c: 29: SSPADD = (10000000/(4*c))-1;
  7386  00169E  0E80               	movlw	128
  7387  0016A0  0100               	movlb	0	; () banked
  7388  0016A2  6F80               	movwf	___lldiv@dividend& (0+255),b
  7389  0016A4  0E96               	movlw	150
  7390  0016A6  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  7391  0016A8  0E98               	movlw	152
  7392  0016AA  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  7393  0016AC  0E00               	movlw	0
  7394  0016AE  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  7395  0016B0  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  7396  0016B4  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  7397  0016B8  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  7398  0016BC  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  7399  0016C0  0E02               	movlw	2
  7400  0016C2                     u3855:
  7401  0016C2  90D8               	bcf	status,0,c
  7402  0016C4  0100               	movlb	0	; () banked
  7403  0016C6  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  7404  0016C8  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  7405  0016CA  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  7406  0016CC  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  7407  0016CE  2EE8               	decfsz	wreg,f,c
  7408  0016D0  D7F8               	goto	u3855
  7409  0016D2  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  7410  0016D6  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  7411  0016DA  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  7412  0016DE  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  7413  0016E2  EC82  F008         	call	___lldiv	;wreg free
  7414  0016E6  0100               	movlb	0	; () banked
  7415  0016E8  0580               	decf	?___lldiv& (0+255),w,b
  7416  0016EA  6EC8               	movwf	4040,c	;volatile
  7417                           
  7418                           ; BSR set to: 0
  7419                           ;I2C.c: 30: TRISC3 = 1;
  7420  0016EC  8694               	bsf	3988,3,c	;volatile
  7421                           
  7422                           ; BSR set to: 0
  7423                           ;I2C.c: 31: TRISC4 = 1;
  7424  0016EE  8894               	bsf	3988,4,c	;volatile
  7425                           
  7426                           ; BSR set to: 0
  7427  0016F0  0012               	return		;funcret
  7428  0016F2                     __end_of_I2C_Master_Init:
  7429                           	opt stack 0
  7430                           tosu	equ	0xFFF
  7431                           tosh	equ	0xFFE
  7432                           tosl	equ	0xFFD
  7433                           pclath	equ	0xFFA
  7434                           tblptru	equ	0xFF8
  7435                           tblptrh	equ	0xFF7
  7436                           tblptrl	equ	0xFF6
  7437                           tablat	equ	0xFF5
  7438                           prodh	equ	0xFF4
  7439                           prodl	equ	0xFF3
  7440                           intcon	equ	0xFF2
  7441                           intcon3	equ	0xFF0
  7442                           postinc0	equ	0xFEE
  7443                           wreg	equ	0xFE8
  7444                           indf2	equ	0xFDF
  7445                           postinc2	equ	0xFDE
  7446                           postdec2	equ	0xFDD
  7447                           fsr2h	equ	0xFDA
  7448                           fsr2l	equ	0xFD9
  7449                           status	equ	0xFD8
  7450                           
  7451 ;; *************** function ___lldiv *****************
  7452 ;; Defined at:
  7453 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lldiv.c"
  7454 ;; Parameters:    Size  Location     Type
  7455 ;;  dividend        4    0[BANK0 ] unsigned long 
  7456 ;;  divisor         4    4[BANK0 ] unsigned long 
  7457 ;; Auto vars:     Size  Location     Type
  7458 ;;  quotient        4    8[BANK0 ] unsigned long 
  7459 ;;  counter         1   12[BANK0 ] unsigned char 
  7460 ;; Return value:  Size  Location     Type
  7461 ;;                  4    0[BANK0 ] unsigned long 
  7462 ;; Registers used:
  7463 ;;		wreg, status,2, status,0
  7464 ;; Tracked objects:
  7465 ;;		On entry : 0/0
  7466 ;;		On exit  : 0/0
  7467 ;;		Unchanged: 0/0
  7468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7469 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7470 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7472 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7473 ;;Total ram usage:       13 bytes
  7474 ;; Hardware stack levels used:    1
  7475 ;; Hardware stack levels required when called:    5
  7476 ;; This function calls:
  7477 ;;		Nothing
  7478 ;; This function is called by:
  7479 ;;		_I2C_Master_Init
  7480 ;; This function uses a non-reentrant model
  7481 ;;
  7482                           
  7483                           	psect	text51
  7484  001104                     __ptext51:
  7485                           	opt stack 0
  7486  001104                     ___lldiv:
  7487                           	opt stack 24
  7488                           
  7489                           ; BSR set to: 0
  7490                           ;incstack = 0
  7491  001104  0E00               	movlw	0
  7492  001106  0100               	movlb	0	; () banked
  7493  001108  6F88               	movwf	___lldiv@quotient& (0+255),b
  7494  00110A  0E00               	movlw	0
  7495  00110C  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  7496  00110E  0E00               	movlw	0
  7497  001110  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7498  001112  0E00               	movlw	0
  7499  001114  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7500                           
  7501                           ; BSR set to: 0
  7502  001116  0100               	movlb	0	; () banked
  7503  001118  5184               	movf	___lldiv@divisor& (0+255),w,b
  7504  00111A  0100               	movlb	0	; () banked
  7505  00111C  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7506  00111E  0100               	movlb	0	; () banked
  7507  001120  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7508  001122  0100               	movlb	0	; () banked
  7509  001124  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7510  001126  B4D8               	btfsc	status,2,c
  7511  001128  D042               	goto	l1051
  7512                           
  7513                           ; BSR set to: 0
  7514  00112A  0E01               	movlw	1
  7515  00112C  0100               	movlb	0	; () banked
  7516  00112E  6F8C               	movwf	___lldiv@counter& (0+255),b
  7517  001130  D008               	goto	l4619
  7518  001132                     l4617:
  7519                           
  7520                           ; BSR set to: 0
  7521  001132  0100               	movlb	0	; () banked
  7522  001134  90D8               	bcf	status,0,c
  7523  001136  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  7524  001138  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7525  00113A  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7526  00113C  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7527  00113E  0100               	movlb	0	; () banked
  7528  001140  2B8C               	incf	___lldiv@counter& (0+255),f,b
  7529  001142                     l4619:
  7530                           
  7531                           ; BSR set to: 0
  7532  001142  0100               	movlb	0	; () banked
  7533  001144  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7534  001146  D7F5               	goto	l4617
  7535  001148                     l4621:
  7536                           
  7537                           ; BSR set to: 0
  7538  001148  0100               	movlb	0	; () banked
  7539  00114A  90D8               	bcf	status,0,c
  7540  00114C  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  7541  00114E  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7542  001150  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7543  001152  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7544                           
  7545                           ; BSR set to: 0
  7546  001154  0100               	movlb	0	; () banked
  7547  001156  5184               	movf	___lldiv@divisor& (0+255),w,b
  7548  001158  0100               	movlb	0	; () banked
  7549  00115A  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  7550  00115C  0100               	movlb	0	; () banked
  7551  00115E  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7552  001160  0100               	movlb	0	; () banked
  7553  001162  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7554  001164  0100               	movlb	0	; () banked
  7555  001166  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7556  001168  0100               	movlb	0	; () banked
  7557  00116A  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7558  00116C  0100               	movlb	0	; () banked
  7559  00116E  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7560  001170  0100               	movlb	0	; () banked
  7561  001172  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7562  001174  A0D8               	btfss	status,0,c
  7563  001176  D012               	goto	l4629
  7564                           
  7565                           ; BSR set to: 0
  7566  001178  0100               	movlb	0	; () banked
  7567  00117A  5184               	movf	___lldiv@divisor& (0+255),w,b
  7568  00117C  0100               	movlb	0	; () banked
  7569  00117E  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  7570  001180  0100               	movlb	0	; () banked
  7571  001182  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7572  001184  0100               	movlb	0	; () banked
  7573  001186  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7574  001188  0100               	movlb	0	; () banked
  7575  00118A  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7576  00118C  0100               	movlb	0	; () banked
  7577  00118E  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7578  001190  0100               	movlb	0	; () banked
  7579  001192  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7580  001194  0100               	movlb	0	; () banked
  7581  001196  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7582                           
  7583                           ; BSR set to: 0
  7584  001198  0100               	movlb	0	; () banked
  7585  00119A  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7586  00119C                     l4629:
  7587                           
  7588                           ; BSR set to: 0
  7589  00119C  0100               	movlb	0	; () banked
  7590  00119E  90D8               	bcf	status,0,c
  7591  0011A0  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7592  0011A2  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7593  0011A4  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7594  0011A6  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7595                           
  7596                           ; BSR set to: 0
  7597  0011A8  0100               	movlb	0	; () banked
  7598  0011AA  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7599  0011AC  D7CD               	goto	l4621
  7600  0011AE                     l1051:
  7601                           
  7602                           ; BSR set to: 0
  7603  0011AE  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7604  0011B2  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7605  0011B6  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7606  0011BA  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7607                           
  7608                           ; BSR set to: 0
  7609  0011BE  0012               	return		;funcret
  7610  0011C0                     __end_of___lldiv:
  7611                           	opt stack 0
  7612                           tosu	equ	0xFFF
  7613                           tosh	equ	0xFFE
  7614                           tosl	equ	0xFFD
  7615                           pclath	equ	0xFFA
  7616                           tblptru	equ	0xFF8
  7617                           tblptrh	equ	0xFF7
  7618                           tblptrl	equ	0xFF6
  7619                           tablat	equ	0xFF5
  7620                           prodh	equ	0xFF4
  7621                           prodl	equ	0xFF3
  7622                           intcon	equ	0xFF2
  7623                           intcon3	equ	0xFF0
  7624                           postinc0	equ	0xFEE
  7625                           wreg	equ	0xFE8
  7626                           indf2	equ	0xFDF
  7627                           postinc2	equ	0xFDE
  7628                           postdec2	equ	0xFDD
  7629                           fsr2h	equ	0xFDA
  7630                           fsr2l	equ	0xFD9
  7631                           status	equ	0xFD8
  7632                           
  7633 ;; *************** function _keypressed *****************
  7634 ;; Defined at:
  7635 ;;		line 23 in file "Interrupt_ISR.c"
  7636 ;; Parameters:    Size  Location     Type
  7637 ;;		None
  7638 ;; Auto vars:     Size  Location     Type
  7639 ;;  i               1   60[COMRAM] unsigned char 
  7640 ;;  i               1   59[COMRAM] unsigned char 
  7641 ;;  i               1   58[COMRAM] unsigned char 
  7642 ;;  i               1   57[COMRAM] unsigned char 
  7643 ;;  i               1   56[COMRAM] unsigned char 
  7644 ;;  i               1   55[COMRAM] unsigned char 
  7645 ;;  i               1   54[COMRAM] unsigned char 
  7646 ;;  i               1   53[COMRAM] unsigned char 
  7647 ;;  i               1   52[COMRAM] unsigned char 
  7648 ;;  i               1   51[COMRAM] unsigned char 
  7649 ;;  i               1   50[COMRAM] unsigned char 
  7650 ;;  i               1   49[COMRAM] unsigned char 
  7651 ;;  keypress_tem    1   61[COMRAM] unsigned char 
  7652 ;;  keypress        1   48[COMRAM] unsigned char 
  7653 ;; Return value:  Size  Location     Type
  7654 ;;                  1    wreg      void 
  7655 ;; Registers used:
  7656 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7657 ;; Tracked objects:
  7658 ;;		On entry : 0/0
  7659 ;;		On exit  : 0/0
  7660 ;;		Unchanged: 0/0
  7661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7663 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7664 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7665 ;;      Totals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7666 ;;Total ram usage:       30 bytes
  7667 ;; Hardware stack levels used:    1
  7668 ;; Hardware stack levels required when called:    4
  7669 ;; This function calls:
  7670 ;;		_op_time
  7671 ;;		_pop_results
  7672 ;;		_tin_results
  7673 ;;		_tot_sorted
  7674 ;;		i2_initLCD
  7675 ;;		i2_lcdInst
  7676 ;;		i2_printf
  7677 ;; This function is called by:
  7678 ;;		Interrupt level 2
  7679 ;; This function uses a non-reentrant model
  7680 ;;
  7681                           
  7682                           	psect	intcode
  7683  000008                     __pintcode:
  7684                           	opt stack 0
  7685  000008                     _keypressed:
  7686                           	opt stack 21
  7687                           
  7688                           ; BSR set to: 0
  7689                           ;incstack = 0
  7690  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7691  00000A  ED93  F003         	call	int_func,f	;refresh shadow registers
  7692                           tosu	equ	0xFFF
  7693                           tosh	equ	0xFFE
  7694                           tosl	equ	0xFFD
  7695                           pclath	equ	0xFFA
  7696                           tblptru	equ	0xFF8
  7697                           tblptrh	equ	0xFF7
  7698                           tblptrl	equ	0xFF6
  7699                           tablat	equ	0xFF5
  7700                           prodh	equ	0xFF4
  7701                           prodl	equ	0xFF3
  7702                           intcon	equ	0xFF2
  7703                           intcon3	equ	0xFF0
  7704                           postinc0	equ	0xFEE
  7705                           wreg	equ	0xFE8
  7706                           indf2	equ	0xFDF
  7707                           postinc2	equ	0xFDE
  7708                           postdec2	equ	0xFDD
  7709                           fsr2h	equ	0xFDA
  7710                           fsr2l	equ	0xFD9
  7711                           status	equ	0xFD8
  7712                           
  7713                           	psect	intcode_body
  7714  000726                     __pintcode_body:
  7715                           	opt stack 21
  7716  000726                     int_func:
  7717                           	opt stack 21
  7718  000726  0006               	pop		; remove dummy address from shadow register refresh
  7719  000728  CFFA F023          	movff	pclath,??_keypressed+2
  7720  00072C  CFFB F024          	movff	pclatu,??_keypressed+3
  7721  000730  CFE9 F025          	movff	fsr0l,??_keypressed+4
  7722  000734  CFEA F026          	movff	fsr0h,??_keypressed+5
  7723  000738  CFE1 F027          	movff	fsr1l,??_keypressed+6
  7724  00073C  CFE2 F028          	movff	fsr1h,??_keypressed+7
  7725  000740  CFD9 F029          	movff	fsr2l,??_keypressed+8
  7726  000744  CFDA F02A          	movff	fsr2h,??_keypressed+9
  7727  000748  CFF3 F02B          	movff	prodl,??_keypressed+10
  7728  00074C  CFF4 F02C          	movff	prodh,??_keypressed+11
  7729  000750  CFF6 F02D          	movff	tblptrl,??_keypressed+12
  7730  000754  CFF7 F02E          	movff	tblptrh,??_keypressed+13
  7731  000758  CFF8 F02F          	movff	tblptru,??_keypressed+14
  7732  00075C  CFF5 F030          	movff	tablat,??_keypressed+15
  7733                           
  7734                           ;Interrupt_ISR.c: 25: if(INT1IF){
  7735  000760  A0F0               	btfss	intcon3,0,c	;volatile
  7736  000762  D12F               	goto	i2l208
  7737                           
  7738                           ;Interrupt_ISR.c: 26: lcdInst(0b11000000);;
  7739  000764  0EC0               	movlw	192
  7740  000766  ECCD  F00E         	call	i2_lcdInst
  7741                           
  7742                           ;Interrupt_ISR.c: 27: unsigned char keypress = (PORTB & 0xF0) >> 4;
  7743  00076A  3881               	swapf	3969,w,c	;volatile
  7744  00076C  0B0F               	andlw	15
  7745  00076E  0B0F               	andlw	15
  7746  000770  6E31               	movwf	keypressed@keypress,c
  7747                           
  7748                           ;Interrupt_ISR.c: 29: unsigned char keypress_temp = keys[keypress];
  7749  000772  5031               	movf	keypressed@keypress,w,c
  7750  000774  0D01               	mullw	1
  7751  000776  0EE9               	movlw	low _keys
  7752  000778  24F3               	addwf	prodl,w,c
  7753  00077A  6EF6               	movwf	tblptrl,c
  7754  00077C  0EFE               	movlw	high _keys
  7755  00077E  20F4               	addwfc	prodh,w,c
  7756  000780  6EF7               	movwf	tblptrh,c
  7757  000782                     	if	1	;There are 3 active tblptr bytes
  7758  000782  6AF8               	clrf	tblptru,c
  7759  000784  0E00               	movlw	low (__mediumconst shr (0+16))
  7760  000786  22F8               	addwfc	tblptru,f,c
  7761  000788                     	endif
  7762  000788  0008               	tblrd		*
  7763  00078A  CFF5 F03E          	movff	tablat,keypressed@keypress_temp
  7764                           
  7765                           ;Interrupt_ISR.c: 30: if (keypress_temp == 0b01000001){
  7766  00078E  0E41               	movlw	65
  7767  000790  183E               	xorwf	keypressed@keypress_temp,w,c
  7768  000792  A4D8               	btfss	status,2,c
  7769  000794  D03E               	goto	i2l3879
  7770                           
  7771                           ;Interrupt_ISR.c: 31: tot_sorted();
  7772  000796  EC40  F00E         	call	_tot_sorted	;wreg free
  7773                           
  7774                           ;Interrupt_ISR.c: 33: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  7775  00079A  0E00               	movlw	0
  7776  00079C  6E32               	movwf	keypressed@i,c
  7777  00079E                     i2l3851:
  7778  00079E  0E09               	movlw	9
  7779  0007A0  6432               	cpfsgt	keypressed@i,c
  7780  0007A2  D001               	goto	i2l3855
  7781  0007A4  D00E               	goto	i2l3859
  7782  0007A6                     i2l3855:
  7783  0007A6  0E02               	movlw	2
  7784  0007A8  6E22               	movwf	(??_keypressed+1)& (0+255),c
  7785  0007AA  0E3F               	movlw	63
  7786  0007AC  6E21               	movwf	??_keypressed& (0+255),c
  7787  0007AE  0E2B               	movlw	43
  7788  0007B0                     i2u436_47:
  7789  0007B0  2EE8               	decfsz	wreg,f,c
  7790  0007B2  D7FE               	bra	i2u436_47
  7791  0007B4  2E21               	decfsz	??_keypressed& (0+255),f,c
  7792  0007B6  D7FC               	bra	i2u436_47
  7793  0007B8  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  7794  0007BA  D7FA               	bra	i2u436_47
  7795  0007BC  F000               	nop	
  7796  0007BE  2A32               	incf	keypressed@i,f,c
  7797  0007C0  D7EE               	goto	i2l3851
  7798  0007C2                     i2l3859:
  7799                           
  7800                           ;Interrupt_ISR.c: 34: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  7801  0007C2  0E00               	movlw	0
  7802  0007C4  6E33               	movwf	keypressed@i_333,c
  7803  0007C6                     i2l3861:
  7804  0007C6  0E09               	movlw	9
  7805  0007C8  6433               	cpfsgt	keypressed@i_333,c
  7806  0007CA  D001               	goto	i2l3865
  7807  0007CC  D00E               	goto	i2l3869
  7808  0007CE                     i2l3865:
  7809  0007CE  0E02               	movlw	2
  7810  0007D0  6E22               	movwf	(??_keypressed+1)& (0+255),c
  7811  0007D2  0E3F               	movlw	63
  7812  0007D4  6E21               	movwf	??_keypressed& (0+255),c
  7813  0007D6  0E2B               	movlw	43
  7814  0007D8                     i2u437_47:
  7815  0007D8  2EE8               	decfsz	wreg,f,c
  7816  0007DA  D7FE               	bra	i2u437_47
  7817  0007DC  2E21               	decfsz	??_keypressed& (0+255),f,c
  7818  0007DE  D7FC               	bra	i2u437_47
  7819  0007E0  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  7820  0007E2  D7FA               	bra	i2u437_47
  7821  0007E4  F000               	nop	
  7822  0007E6  2A33               	incf	keypressed@i_333,f,c
  7823  0007E8  D7EE               	goto	i2l3861
  7824  0007EA                     i2l3869:
  7825                           
  7826                           ;Interrupt_ISR.c: 35: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  7827  0007EA  0E00               	movlw	0
  7828  0007EC  6E34               	movwf	keypressed@i_334,c
  7829  0007EE                     i2l3871:
  7830  0007EE  0E09               	movlw	9
  7831  0007F0  6434               	cpfsgt	keypressed@i_334,c
  7832  0007F2  D001               	goto	i2l3875
  7833  0007F4  D0E2               	goto	i2l3989
  7834  0007F6                     i2l3875:
  7835  0007F6  0E02               	movlw	2
  7836  0007F8  6E22               	movwf	(??_keypressed+1)& (0+255),c
  7837  0007FA  0E3F               	movlw	63
  7838  0007FC  6E21               	movwf	??_keypressed& (0+255),c
  7839  0007FE  0E2B               	movlw	43
  7840  000800                     i2u438_47:
  7841  000800  2EE8               	decfsz	wreg,f,c
  7842  000802  D7FE               	bra	i2u438_47
  7843  000804  2E21               	decfsz	??_keypressed& (0+255),f,c
  7844  000806  D7FC               	bra	i2u438_47
  7845  000808  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  7846  00080A  D7FA               	bra	i2u438_47
  7847  00080C  F000               	nop	
  7848  00080E  2A34               	incf	keypressed@i_334,f,c
  7849  000810  D7EE               	goto	i2l3871
  7850  000812                     i2l3879:
  7851                           
  7852                           ;Interrupt_ISR.c: 37: else if(keypress_temp == 0b01000010){
  7853  000812  0E42               	movlw	66
  7854  000814  183E               	xorwf	keypressed@keypress_temp,w,c
  7855  000816  A4D8               	btfss	status,2,c
  7856  000818  D03E               	goto	i2l3913
  7857                           
  7858                           ;Interrupt_ISR.c: 38: pop_results();
  7859  00081A  ECA3  F00C         	call	_pop_results	;wreg free
  7860                           
  7861                           ;Interrupt_ISR.c: 40: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  7862  00081E  0E00               	movlw	0
  7863  000820  6E35               	movwf	keypressed@i_335,c
  7864  000822                     i2l3885:
  7865  000822  0E09               	movlw	9
  7866  000824  6435               	cpfsgt	keypressed@i_335,c
  7867  000826  D001               	goto	i2l3889
  7868  000828  D00E               	goto	i2l3893
  7869  00082A                     i2l3889:
  7870  00082A  0E02               	movlw	2
  7871  00082C  6E22               	movwf	(??_keypressed+1)& (0+255),c
  7872  00082E  0E3F               	movlw	63
  7873  000830  6E21               	movwf	??_keypressed& (0+255),c
  7874  000832  0E2B               	movlw	43
  7875  000834                     i2u439_47:
  7876  000834  2EE8               	decfsz	wreg,f,c
  7877  000836  D7FE               	bra	i2u439_47
  7878  000838  2E21               	decfsz	??_keypressed& (0+255),f,c
  7879  00083A  D7FC               	bra	i2u439_47
  7880  00083C  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  7881  00083E  D7FA               	bra	i2u439_47
  7882  000840  F000               	nop	
  7883  000842  2A35               	incf	keypressed@i_335,f,c
  7884  000844  D7EE               	goto	i2l3885
  7885  000846                     i2l3893:
  7886                           
  7887                           ;Interrupt_ISR.c: 41: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  7888  000846  0E00               	movlw	0
  7889  000848  6E36               	movwf	keypressed@i_336,c
  7890  00084A                     i2l3895:
  7891  00084A  0E09               	movlw	9
  7892  00084C  6436               	cpfsgt	keypressed@i_336,c
  7893  00084E  D001               	goto	i2l3899
  7894  000850  D00E               	goto	i2l3903
  7895  000852                     i2l3899:
  7896  000852  0E02               	movlw	2
  7897  000854  6E22               	movwf	(??_keypressed+1)& (0+255),c
  7898  000856  0E3F               	movlw	63
  7899  000858  6E21               	movwf	??_keypressed& (0+255),c
  7900  00085A  0E2B               	movlw	43
  7901  00085C                     i2u440_47:
  7902  00085C  2EE8               	decfsz	wreg,f,c
  7903  00085E  D7FE               	bra	i2u440_47
  7904  000860  2E21               	decfsz	??_keypressed& (0+255),f,c
  7905  000862  D7FC               	bra	i2u440_47
  7906  000864  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  7907  000866  D7FA               	bra	i2u440_47
  7908  000868  F000               	nop	
  7909  00086A  2A36               	incf	keypressed@i_336,f,c
  7910  00086C  D7EE               	goto	i2l3895
  7911  00086E                     i2l3903:
  7912                           
  7913                           ;Interrupt_ISR.c: 42: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  7914  00086E  0E00               	movlw	0
  7915  000870  6E37               	movwf	keypressed@i_337,c
  7916  000872                     i2l3905:
  7917  000872  0E09               	movlw	9
  7918  000874  6437               	cpfsgt	keypressed@i_337,c
  7919  000876  D001               	goto	i2l3909
  7920  000878  D0A0               	goto	i2l3989
  7921  00087A                     i2l3909:
  7922  00087A  0E02               	movlw	2
  7923  00087C  6E22               	movwf	(??_keypressed+1)& (0+255),c
  7924  00087E  0E3F               	movlw	63
  7925  000880  6E21               	movwf	??_keypressed& (0+255),c
  7926  000882  0E2B               	movlw	43
  7927  000884                     i2u441_47:
  7928  000884  2EE8               	decfsz	wreg,f,c
  7929  000886  D7FE               	bra	i2u441_47
  7930  000888  2E21               	decfsz	??_keypressed& (0+255),f,c
  7931  00088A  D7FC               	bra	i2u441_47
  7932  00088C  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  7933  00088E  D7FA               	bra	i2u441_47
  7934  000890  F000               	nop	
  7935  000892  2A37               	incf	keypressed@i_337,f,c
  7936  000894  D7EE               	goto	i2l3905
  7937  000896                     i2l3913:
  7938                           
  7939                           ;Interrupt_ISR.c: 44: else if(keypress_temp == 0b01000011){
  7940  000896  0E43               	movlw	67
  7941  000898  183E               	xorwf	keypressed@keypress_temp,w,c
  7942  00089A  A4D8               	btfss	status,2,c
  7943  00089C  D03E               	goto	i2l3947
  7944                           
  7945                           ;Interrupt_ISR.c: 45: tin_results();
  7946  00089E  EC86  F00C         	call	_tin_results	;wreg free
  7947                           
  7948                           ;Interrupt_ISR.c: 47: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  7949  0008A2  0E00               	movlw	0
  7950  0008A4  6E38               	movwf	keypressed@i_338,c
  7951  0008A6                     i2l3919:
  7952  0008A6  0E09               	movlw	9
  7953  0008A8  6438               	cpfsgt	keypressed@i_338,c
  7954  0008AA  D001               	goto	i2l3923
  7955  0008AC  D00E               	goto	i2l3927
  7956  0008AE                     i2l3923:
  7957  0008AE  0E02               	movlw	2
  7958  0008B0  6E22               	movwf	(??_keypressed+1)& (0+255),c
  7959  0008B2  0E3F               	movlw	63
  7960  0008B4  6E21               	movwf	??_keypressed& (0+255),c
  7961  0008B6  0E2B               	movlw	43
  7962  0008B8                     i2u442_47:
  7963  0008B8  2EE8               	decfsz	wreg,f,c
  7964  0008BA  D7FE               	bra	i2u442_47
  7965  0008BC  2E21               	decfsz	??_keypressed& (0+255),f,c
  7966  0008BE  D7FC               	bra	i2u442_47
  7967  0008C0  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  7968  0008C2  D7FA               	bra	i2u442_47
  7969  0008C4  F000               	nop	
  7970  0008C6  2A38               	incf	keypressed@i_338,f,c
  7971  0008C8  D7EE               	goto	i2l3919
  7972  0008CA                     i2l3927:
  7973                           
  7974                           ;Interrupt_ISR.c: 48: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  7975  0008CA  0E00               	movlw	0
  7976  0008CC  6E39               	movwf	keypressed@i_339,c
  7977  0008CE                     i2l3929:
  7978  0008CE  0E09               	movlw	9
  7979  0008D0  6439               	cpfsgt	keypressed@i_339,c
  7980  0008D2  D001               	goto	i2l3933
  7981  0008D4  D00E               	goto	i2l3937
  7982  0008D6                     i2l3933:
  7983  0008D6  0E02               	movlw	2
  7984  0008D8  6E22               	movwf	(??_keypressed+1)& (0+255),c
  7985  0008DA  0E3F               	movlw	63
  7986  0008DC  6E21               	movwf	??_keypressed& (0+255),c
  7987  0008DE  0E2B               	movlw	43
  7988  0008E0                     i2u443_47:
  7989  0008E0  2EE8               	decfsz	wreg,f,c
  7990  0008E2  D7FE               	bra	i2u443_47
  7991  0008E4  2E21               	decfsz	??_keypressed& (0+255),f,c
  7992  0008E6  D7FC               	bra	i2u443_47
  7993  0008E8  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  7994  0008EA  D7FA               	bra	i2u443_47
  7995  0008EC  F000               	nop	
  7996  0008EE  2A39               	incf	keypressed@i_339,f,c
  7997  0008F0  D7EE               	goto	i2l3929
  7998  0008F2                     i2l3937:
  7999                           
  8000                           ;Interrupt_ISR.c: 49: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  8001  0008F2  0E00               	movlw	0
  8002  0008F4  6E3A               	movwf	keypressed@i_340,c
  8003  0008F6                     i2l3939:
  8004  0008F6  0E09               	movlw	9
  8005  0008F8  643A               	cpfsgt	keypressed@i_340,c
  8006  0008FA  D001               	goto	i2l3943
  8007  0008FC  D05E               	goto	i2l3989
  8008  0008FE                     i2l3943:
  8009  0008FE  0E02               	movlw	2
  8010  000900  6E22               	movwf	(??_keypressed+1)& (0+255),c
  8011  000902  0E3F               	movlw	63
  8012  000904  6E21               	movwf	??_keypressed& (0+255),c
  8013  000906  0E2B               	movlw	43
  8014  000908                     i2u444_47:
  8015  000908  2EE8               	decfsz	wreg,f,c
  8016  00090A  D7FE               	bra	i2u444_47
  8017  00090C  2E21               	decfsz	??_keypressed& (0+255),f,c
  8018  00090E  D7FC               	bra	i2u444_47
  8019  000910  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  8020  000912  D7FA               	bra	i2u444_47
  8021  000914  F000               	nop	
  8022  000916  2A3A               	incf	keypressed@i_340,f,c
  8023  000918  D7EE               	goto	i2l3939
  8024  00091A                     i2l3947:
  8025                           
  8026                           ;Interrupt_ISR.c: 51: else if(keypress_temp == 0b01000100){
  8027  00091A  0E44               	movlw	68
  8028  00091C  183E               	xorwf	keypressed@keypress_temp,w,c
  8029  00091E  A4D8               	btfss	status,2,c
  8030  000920  D03E               	goto	i2l3981
  8031                           
  8032                           ;Interrupt_ISR.c: 52: op_time();
  8033  000922  ECF5  F00B         	call	_op_time	;wreg free
  8034                           
  8035                           ;Interrupt_ISR.c: 54: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  8036  000926  0E00               	movlw	0
  8037  000928  6E3B               	movwf	keypressed@i_341,c
  8038  00092A                     i2l3953:
  8039  00092A  0E09               	movlw	9
  8040  00092C  643B               	cpfsgt	keypressed@i_341,c
  8041  00092E  D001               	goto	i2l3957
  8042  000930  D00E               	goto	i2l3961
  8043  000932                     i2l3957:
  8044  000932  0E02               	movlw	2
  8045  000934  6E22               	movwf	(??_keypressed+1)& (0+255),c
  8046  000936  0E3F               	movlw	63
  8047  000938  6E21               	movwf	??_keypressed& (0+255),c
  8048  00093A  0E2B               	movlw	43
  8049  00093C                     i2u445_47:
  8050  00093C  2EE8               	decfsz	wreg,f,c
  8051  00093E  D7FE               	bra	i2u445_47
  8052  000940  2E21               	decfsz	??_keypressed& (0+255),f,c
  8053  000942  D7FC               	bra	i2u445_47
  8054  000944  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  8055  000946  D7FA               	bra	i2u445_47
  8056  000948  F000               	nop	
  8057  00094A  2A3B               	incf	keypressed@i_341,f,c
  8058  00094C  D7EE               	goto	i2l3953
  8059  00094E                     i2l3961:
  8060                           
  8061                           ;Interrupt_ISR.c: 55: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  8062  00094E  0E00               	movlw	0
  8063  000950  6E3C               	movwf	keypressed@i_342,c
  8064  000952                     i2l3963:
  8065  000952  0E09               	movlw	9
  8066  000954  643C               	cpfsgt	keypressed@i_342,c
  8067  000956  D001               	goto	i2l3967
  8068  000958  D00E               	goto	i2l3971
  8069  00095A                     i2l3967:
  8070  00095A  0E02               	movlw	2
  8071  00095C  6E22               	movwf	(??_keypressed+1)& (0+255),c
  8072  00095E  0E3F               	movlw	63
  8073  000960  6E21               	movwf	??_keypressed& (0+255),c
  8074  000962  0E2B               	movlw	43
  8075  000964                     i2u446_47:
  8076  000964  2EE8               	decfsz	wreg,f,c
  8077  000966  D7FE               	bra	i2u446_47
  8078  000968  2E21               	decfsz	??_keypressed& (0+255),f,c
  8079  00096A  D7FC               	bra	i2u446_47
  8080  00096C  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  8081  00096E  D7FA               	bra	i2u446_47
  8082  000970  F000               	nop	
  8083  000972  2A3C               	incf	keypressed@i_342,f,c
  8084  000974  D7EE               	goto	i2l3963
  8085  000976                     i2l3971:
  8086                           
  8087                           ;Interrupt_ISR.c: 56: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  8088  000976  0E00               	movlw	0
  8089  000978  6E3D               	movwf	keypressed@i_343,c
  8090  00097A                     i2l3973:
  8091  00097A  0E09               	movlw	9
  8092  00097C  643D               	cpfsgt	keypressed@i_343,c
  8093  00097E  D001               	goto	i2l3977
  8094  000980  D01C               	goto	i2l3989
  8095  000982                     i2l3977:
  8096  000982  0E02               	movlw	2
  8097  000984  6E22               	movwf	(??_keypressed+1)& (0+255),c
  8098  000986  0E3F               	movlw	63
  8099  000988  6E21               	movwf	??_keypressed& (0+255),c
  8100  00098A  0E2B               	movlw	43
  8101  00098C                     i2u447_47:
  8102  00098C  2EE8               	decfsz	wreg,f,c
  8103  00098E  D7FE               	bra	i2u447_47
  8104  000990  2E21               	decfsz	??_keypressed& (0+255),f,c
  8105  000992  D7FC               	bra	i2u447_47
  8106  000994  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  8107  000996  D7FA               	bra	i2u447_47
  8108  000998  F000               	nop	
  8109  00099A  2A3D               	incf	keypressed@i_343,f,c
  8110  00099C  D7EE               	goto	i2l3973
  8111  00099E                     i2l3981:
  8112                           
  8113                           ;Interrupt_ISR.c: 58: else if(keypress_temp == '*'){
  8114  00099E  0E2A               	movlw	42
  8115  0009A0  183E               	xorwf	keypressed@keypress_temp,w,c
  8116  0009A2  A4D8               	btfss	status,2,c
  8117  0009A4  D002               	goto	i2l3985
  8118  0009A6  00FF               	reset		;# 
  8119                           
  8120                           ;Interrupt_ISR.c: 60: }
  8121  0009A8  D008               	goto	i2l3989
  8122  0009AA                     i2l3985:
  8123                           
  8124                           ;Interrupt_ISR.c: 61: else{
  8125                           ;Interrupt_ISR.c: 62: initLCD();
  8126  0009AA  EC42  F00C         	call	i2_initLCD	;wreg free
  8127                           
  8128                           ;Interrupt_ISR.c: 63: printf(" ");
  8129  0009AE  0EDA               	movlw	low (STR_2+11)
  8130  0009B0  6E0D               	movwf	i2printf@f,c
  8131  0009B2  0EFF               	movlw	high (STR_2+11)
  8132  0009B4  6E0E               	movwf	i2printf@f+1,c
  8133  0009B6  ECF8  F001         	call	i2_printf	;wreg free
  8134  0009BA                     i2l3989:
  8135                           
  8136                           ;Interrupt_ISR.c: 64: }
  8137                           ;Interrupt_ISR.c: 65: lcdInst(0b10000000);;
  8138  0009BA  0E80               	movlw	128
  8139  0009BC  ECCD  F00E         	call	i2_lcdInst
  8140                           
  8141                           ;Interrupt_ISR.c: 66: INT1IF = 0;
  8142  0009C0  90F0               	bcf	intcon3,0,c	;volatile
  8143  0009C2                     i2l208:
  8144  0009C2  C030  FFF5         	movff	??_keypressed+15,tablat
  8145  0009C6  C02F  FFF8         	movff	??_keypressed+14,tblptru
  8146  0009CA  C02E  FFF7         	movff	??_keypressed+13,tblptrh
  8147  0009CE  C02D  FFF6         	movff	??_keypressed+12,tblptrl
  8148  0009D2  C02C  FFF4         	movff	??_keypressed+11,prodh
  8149  0009D6  C02B  FFF3         	movff	??_keypressed+10,prodl
  8150  0009DA  C02A  FFDA         	movff	??_keypressed+9,fsr2h
  8151  0009DE  C029  FFD9         	movff	??_keypressed+8,fsr2l
  8152  0009E2  C028  FFE2         	movff	??_keypressed+7,fsr1h
  8153  0009E6  C027  FFE1         	movff	??_keypressed+6,fsr1l
  8154  0009EA  C026  FFEA         	movff	??_keypressed+5,fsr0h
  8155  0009EE  C025  FFE9         	movff	??_keypressed+4,fsr0l
  8156  0009F2  C024  FFFB         	movff	??_keypressed+3,pclatu
  8157  0009F6  C023  FFFA         	movff	??_keypressed+2,pclath
  8158  0009FA  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8159  0009FC  0011               	retfie		f
  8160  0009FE                     __end_of_keypressed:
  8161                           	opt stack 0
  8162                           tosu	equ	0xFFF
  8163                           tosh	equ	0xFFE
  8164                           tosl	equ	0xFFD
  8165                           pclatu	equ	0xFFB
  8166                           pclath	equ	0xFFA
  8167                           tblptru	equ	0xFF8
  8168                           tblptrh	equ	0xFF7
  8169                           tblptrl	equ	0xFF6
  8170                           tablat	equ	0xFF5
  8171                           prodh	equ	0xFF4
  8172                           prodl	equ	0xFF3
  8173                           intcon	equ	0xFF2
  8174                           intcon3	equ	0xFF0
  8175                           postinc0	equ	0xFEE
  8176                           fsr0h	equ	0xFEA
  8177                           fsr0l	equ	0xFE9
  8178                           wreg	equ	0xFE8
  8179                           fsr1h	equ	0xFE2
  8180                           fsr1l	equ	0xFE1
  8181                           indf2	equ	0xFDF
  8182                           postinc2	equ	0xFDE
  8183                           postdec2	equ	0xFDD
  8184                           fsr2h	equ	0xFDA
  8185                           fsr2l	equ	0xFD9
  8186                           status	equ	0xFD8
  8187                           
  8188 ;; *************** function _tot_sorted *****************
  8189 ;; Defined at:
  8190 ;;		line 260 in file "operation.c"
  8191 ;; Parameters:    Size  Location     Type
  8192 ;;		None
  8193 ;; Auto vars:     Size  Location     Type
  8194 ;;		None
  8195 ;; Return value:  Size  Location     Type
  8196 ;;                  1    wreg      void 
  8197 ;; Registers used:
  8198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8199 ;; Tracked objects:
  8200 ;;		On entry : 0/0
  8201 ;;		On exit  : 0/0
  8202 ;;		Unchanged: 0/0
  8203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8208 ;;Total ram usage:        0 bytes
  8209 ;; Hardware stack levels used:    1
  8210 ;; Hardware stack levels required when called:    3
  8211 ;; This function calls:
  8212 ;;		i2_initLCD
  8213 ;;		i2_lcdInst
  8214 ;;		i2_printf
  8215 ;; This function is called by:
  8216 ;;		_keypressed
  8217 ;; This function uses a non-reentrant model
  8218 ;;
  8219                           
  8220                           	psect	text53
  8221  001C80                     __ptext53:
  8222                           	opt stack 0
  8223  001C80                     _tot_sorted:
  8224                           	opt stack 21
  8225                           
  8226                           ;operation.c: 261: lcdInst(0b10000000);;
  8227                           
  8228                           ;incstack = 0
  8229  001C80  0E80               	movlw	128
  8230  001C82  ECCD  F00E         	call	i2_lcdInst
  8231                           
  8232                           ;operation.c: 262: initLCD();
  8233  001C86  EC42  F00C         	call	i2_initLCD	;wreg free
  8234                           
  8235                           ;operation.c: 263: printf("Total Sorted: %02x", tot);
  8236  001C8A  0E29               	movlw	low STR_10
  8237  001C8C  6E0D               	movwf	i2printf@f,c
  8238  001C8E  0EFF               	movlw	high STR_10
  8239  001C90  6E0E               	movwf	i2printf@f+1,c
  8240  001C92  C043  F00F         	movff	_tot,?i2_printf+2
  8241  001C96  C044  F010         	movff	_tot+1,?i2_printf+3
  8242  001C9A  ECF8  F001         	call	i2_printf	;wreg free
  8243  001C9E  0012               	return	
  8244  001CA0                     __end_of_tot_sorted:
  8245                           	opt stack 0
  8246                           tosu	equ	0xFFF
  8247                           tosh	equ	0xFFE
  8248                           tosl	equ	0xFFD
  8249                           pclatu	equ	0xFFB
  8250                           pclath	equ	0xFFA
  8251                           tblptru	equ	0xFF8
  8252                           tblptrh	equ	0xFF7
  8253                           tblptrl	equ	0xFF6
  8254                           tablat	equ	0xFF5
  8255                           prodh	equ	0xFF4
  8256                           prodl	equ	0xFF3
  8257                           intcon	equ	0xFF2
  8258                           intcon3	equ	0xFF0
  8259                           postinc0	equ	0xFEE
  8260                           fsr0h	equ	0xFEA
  8261                           fsr0l	equ	0xFE9
  8262                           wreg	equ	0xFE8
  8263                           fsr1h	equ	0xFE2
  8264                           fsr1l	equ	0xFE1
  8265                           indf2	equ	0xFDF
  8266                           postinc2	equ	0xFDE
  8267                           postdec2	equ	0xFDD
  8268                           fsr2h	equ	0xFDA
  8269                           fsr2l	equ	0xFD9
  8270                           status	equ	0xFD8
  8271                           
  8272 ;; *************** function _tin_results *****************
  8273 ;; Defined at:
  8274 ;;		line 274 in file "operation.c"
  8275 ;; Parameters:    Size  Location     Type
  8276 ;;		None
  8277 ;; Auto vars:     Size  Location     Type
  8278 ;;		None
  8279 ;; Return value:  Size  Location     Type
  8280 ;;                  1    wreg      void 
  8281 ;; Registers used:
  8282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8283 ;; Tracked objects:
  8284 ;;		On entry : 0/0
  8285 ;;		On exit  : 0/0
  8286 ;;		Unchanged: 0/0
  8287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8292 ;;Total ram usage:        0 bytes
  8293 ;; Hardware stack levels used:    1
  8294 ;; Hardware stack levels required when called:    3
  8295 ;; This function calls:
  8296 ;;		i2_initLCD
  8297 ;;		i2_lcdInst
  8298 ;;		i2_printf
  8299 ;; This function is called by:
  8300 ;;		_keypressed
  8301 ;; This function uses a non-reentrant model
  8302 ;;
  8303                           
  8304                           	psect	text54
  8305  00190C                     __ptext54:
  8306                           	opt stack 0
  8307  00190C                     _tin_results:
  8308                           	opt stack 21
  8309                           
  8310                           ;operation.c: 275: lcdInst(0b10000000);;
  8311                           
  8312                           ;incstack = 0
  8313  00190C  0E80               	movlw	128
  8314  00190E  ECCD  F00E         	call	i2_lcdInst
  8315                           
  8316                           ;operation.c: 276: initLCD();
  8317  001912  EC42  F00C         	call	i2_initLCD	;wreg free
  8318                           
  8319                           ;operation.c: 277: printf("With Label: %02x",tin_can);
  8320  001916  0E91               	movlw	low STR_12
  8321  001918  6E0D               	movwf	i2printf@f,c
  8322  00191A  0EFF               	movlw	high STR_12
  8323  00191C  6E0E               	movwf	i2printf@f+1,c
  8324  00191E  C0C4  F00F         	movff	_tin_can,?i2_printf+2
  8325  001922  C0C5  F010         	movff	_tin_can+1,?i2_printf+3
  8326  001926  ECF8  F001         	call	i2_printf	;wreg free
  8327                           
  8328                           ;operation.c: 278: lcdInst(0b11000000);;
  8329  00192A  0EC0               	movlw	192
  8330  00192C  ECCD  F00E         	call	i2_lcdInst
  8331                           
  8332                           ;operation.c: 279: printf("No Label: %02x",tin_can_label);
  8333  001930  0EB1               	movlw	low STR_13
  8334  001932  6E0D               	movwf	i2printf@f,c
  8335  001934  0EFF               	movlw	high STR_13
  8336  001936  6E0E               	movwf	i2printf@f+1,c
  8337  001938  C0C6  F00F         	movff	_tin_can_label,?i2_printf+2
  8338  00193C  C0C7  F010         	movff	_tin_can_label+1,?i2_printf+3
  8339  001940  ECF8  F001         	call	i2_printf	;wreg free
  8340  001944  0012               	return	
  8341  001946                     __end_of_tin_results:
  8342                           	opt stack 0
  8343                           tosu	equ	0xFFF
  8344                           tosh	equ	0xFFE
  8345                           tosl	equ	0xFFD
  8346                           pclatu	equ	0xFFB
  8347                           pclath	equ	0xFFA
  8348                           tblptru	equ	0xFF8
  8349                           tblptrh	equ	0xFF7
  8350                           tblptrl	equ	0xFF6
  8351                           tablat	equ	0xFF5
  8352                           prodh	equ	0xFF4
  8353                           prodl	equ	0xFF3
  8354                           intcon	equ	0xFF2
  8355                           intcon3	equ	0xFF0
  8356                           postinc0	equ	0xFEE
  8357                           fsr0h	equ	0xFEA
  8358                           fsr0l	equ	0xFE9
  8359                           wreg	equ	0xFE8
  8360                           fsr1h	equ	0xFE2
  8361                           fsr1l	equ	0xFE1
  8362                           indf2	equ	0xFDF
  8363                           postinc2	equ	0xFDE
  8364                           postdec2	equ	0xFDD
  8365                           fsr2h	equ	0xFDA
  8366                           fsr2l	equ	0xFD9
  8367                           status	equ	0xFD8
  8368                           
  8369 ;; *************** function _pop_results *****************
  8370 ;; Defined at:
  8371 ;;		line 283 in file "operation.c"
  8372 ;; Parameters:    Size  Location     Type
  8373 ;;		None
  8374 ;; Auto vars:     Size  Location     Type
  8375 ;;		None
  8376 ;; Return value:  Size  Location     Type
  8377 ;;                  1    wreg      void 
  8378 ;; Registers used:
  8379 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8380 ;; Tracked objects:
  8381 ;;		On entry : 0/0
  8382 ;;		On exit  : 0/0
  8383 ;;		Unchanged: 0/0
  8384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8389 ;;Total ram usage:        0 bytes
  8390 ;; Hardware stack levels used:    1
  8391 ;; Hardware stack levels required when called:    3
  8392 ;; This function calls:
  8393 ;;		i2_initLCD
  8394 ;;		i2_lcdInst
  8395 ;;		i2_printf
  8396 ;; This function is called by:
  8397 ;;		_keypressed
  8398 ;; This function uses a non-reentrant model
  8399 ;;
  8400                           
  8401                           	psect	text55
  8402  001946                     __ptext55:
  8403                           	opt stack 0
  8404  001946                     _pop_results:
  8405                           	opt stack 21
  8406                           
  8407                           ;operation.c: 284: lcdInst(0b10000000);;
  8408                           
  8409                           ;incstack = 0
  8410  001946  0E80               	movlw	128
  8411  001948  ECCD  F00E         	call	i2_lcdInst
  8412                           
  8413                           ;operation.c: 285: initLCD();
  8414  00194C  EC42  F00C         	call	i2_initLCD	;wreg free
  8415                           
  8416                           ;operation.c: 286: printf("With Tab: %02x",pop_can_tab);
  8417  001950  0EA2               	movlw	low STR_14
  8418  001952  6E0D               	movwf	i2printf@f,c
  8419  001954  0EFF               	movlw	high STR_14
  8420  001956  6E0E               	movwf	i2printf@f+1,c
  8421  001958  C0C0  F00F         	movff	_pop_can_tab,?i2_printf+2
  8422  00195C  C0C1  F010         	movff	_pop_can_tab+1,?i2_printf+3
  8423  001960  ECF8  F001         	call	i2_printf	;wreg free
  8424                           
  8425                           ;operation.c: 287: lcdInst(0b11000000);;
  8426  001964  0EC0               	movlw	192
  8427  001966  ECCD  F00E         	call	i2_lcdInst
  8428                           
  8429                           ;operation.c: 288: printf("No Tab: %02x",pop_can);
  8430  00196A  0EE9               	movlw	low STR_15
  8431  00196C  6E0D               	movwf	i2printf@f,c
  8432  00196E  0EFF               	movlw	high STR_15
  8433  001970  6E0E               	movwf	i2printf@f+1,c
  8434  001972  C0C2  F00F         	movff	_pop_can,?i2_printf+2
  8435  001976  C0C3  F010         	movff	_pop_can+1,?i2_printf+3
  8436  00197A  ECF8  F001         	call	i2_printf	;wreg free
  8437  00197E  0012               	return	
  8438  001980                     __end_of_pop_results:
  8439                           	opt stack 0
  8440                           tosu	equ	0xFFF
  8441                           tosh	equ	0xFFE
  8442                           tosl	equ	0xFFD
  8443                           pclatu	equ	0xFFB
  8444                           pclath	equ	0xFFA
  8445                           tblptru	equ	0xFF8
  8446                           tblptrh	equ	0xFF7
  8447                           tblptrl	equ	0xFF6
  8448                           tablat	equ	0xFF5
  8449                           prodh	equ	0xFF4
  8450                           prodl	equ	0xFF3
  8451                           intcon	equ	0xFF2
  8452                           intcon3	equ	0xFF0
  8453                           postinc0	equ	0xFEE
  8454                           fsr0h	equ	0xFEA
  8455                           fsr0l	equ	0xFE9
  8456                           wreg	equ	0xFE8
  8457                           fsr1h	equ	0xFE2
  8458                           fsr1l	equ	0xFE1
  8459                           indf2	equ	0xFDF
  8460                           postinc2	equ	0xFDE
  8461                           postdec2	equ	0xFDD
  8462                           fsr2h	equ	0xFDA
  8463                           fsr2l	equ	0xFD9
  8464                           status	equ	0xFD8
  8465                           
  8466 ;; *************** function _op_time *****************
  8467 ;; Defined at:
  8468 ;;		line 267 in file "operation.c"
  8469 ;; Parameters:    Size  Location     Type
  8470 ;;		None
  8471 ;; Auto vars:     Size  Location     Type
  8472 ;;		None
  8473 ;; Return value:  Size  Location     Type
  8474 ;;                  1    wreg      void 
  8475 ;; Registers used:
  8476 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8477 ;; Tracked objects:
  8478 ;;		On entry : 0/0
  8479 ;;		On exit  : 0/0
  8480 ;;		Unchanged: 0/0
  8481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8486 ;;Total ram usage:        0 bytes
  8487 ;; Hardware stack levels used:    1
  8488 ;; Hardware stack levels required when called:    3
  8489 ;; This function calls:
  8490 ;;		___awmod
  8491 ;;		i2___awdiv
  8492 ;;		i2_initLCD
  8493 ;;		i2_lcdInst
  8494 ;;		i2_printf
  8495 ;; This function is called by:
  8496 ;;		_keypressed
  8497 ;; This function uses a non-reentrant model
  8498 ;;
  8499                           
  8500                           	psect	text56
  8501  0017EA                     __ptext56:
  8502                           	opt stack 0
  8503  0017EA                     _op_time:
  8504                           	opt stack 21
  8505                           
  8506                           ;operation.c: 268: lcdInst(0b10000000);;
  8507                           
  8508                           ;incstack = 0
  8509  0017EA  0E80               	movlw	128
  8510  0017EC  ECCD  F00E         	call	i2_lcdInst
  8511                           
  8512                           ;operation.c: 269: initLCD();
  8513  0017F0  EC42  F00C         	call	i2_initLCD	;wreg free
  8514                           
  8515                           ;operation.c: 270: printf("Time: %01d min %02d s", operation_time/60, operation_time%60 
      +                          );
  8516  0017F4  0E13               	movlw	low STR_11
  8517  0017F6  6E0D               	movwf	i2printf@f,c
  8518  0017F8  0EFF               	movlw	high STR_11
  8519  0017FA  6E0E               	movwf	i2printf@f+1,c
  8520  0017FC  C045  F001         	movff	_operation_time,i2___awdiv@dividend
  8521  001800  C046  F002         	movff	_operation_time+1,i2___awdiv@dividend+1
  8522  001804  0E00               	movlw	0
  8523  001806  6E04               	movwf	i2___awdiv@divisor+1,c
  8524  001808  0E3C               	movlw	60
  8525  00180A  6E03               	movwf	i2___awdiv@divisor,c
  8526  00180C  EC24  F009         	call	i2___awdiv	;wreg free
  8527  001810  C001  F00F         	movff	?i2___awdiv,?i2_printf+2
  8528  001814  C002  F010         	movff	?i2___awdiv+1,?i2_printf+3
  8529  001818  C045  F001         	movff	_operation_time,___awmod@dividend
  8530  00181C  C046  F002         	movff	_operation_time+1,___awmod@dividend+1
  8531  001820  0E00               	movlw	0
  8532  001822  6E04               	movwf	___awmod@divisor+1,c
  8533  001824  0E3C               	movlw	60
  8534  001826  6E03               	movwf	___awmod@divisor,c
  8535  001828  EC12  F00A         	call	___awmod	;wreg free
  8536  00182C  C001  F011         	movff	?___awmod,?i2_printf+4
  8537  001830  C002  F012         	movff	?___awmod+1,?i2_printf+5
  8538  001834  ECF8  F001         	call	i2_printf	;wreg free
  8539  001838  0012               	return	
  8540  00183A                     __end_of_op_time:
  8541                           	opt stack 0
  8542                           tosu	equ	0xFFF
  8543                           tosh	equ	0xFFE
  8544                           tosl	equ	0xFFD
  8545                           pclatu	equ	0xFFB
  8546                           pclath	equ	0xFFA
  8547                           tblptru	equ	0xFF8
  8548                           tblptrh	equ	0xFF7
  8549                           tblptrl	equ	0xFF6
  8550                           tablat	equ	0xFF5
  8551                           prodh	equ	0xFF4
  8552                           prodl	equ	0xFF3
  8553                           intcon	equ	0xFF2
  8554                           intcon3	equ	0xFF0
  8555                           postinc0	equ	0xFEE
  8556                           fsr0h	equ	0xFEA
  8557                           fsr0l	equ	0xFE9
  8558                           wreg	equ	0xFE8
  8559                           fsr1h	equ	0xFE2
  8560                           fsr1l	equ	0xFE1
  8561                           indf2	equ	0xFDF
  8562                           postinc2	equ	0xFDE
  8563                           postdec2	equ	0xFDD
  8564                           fsr2h	equ	0xFDA
  8565                           fsr2l	equ	0xFD9
  8566                           status	equ	0xFD8
  8567                           
  8568 ;; *************** function i2_printf *****************
  8569 ;; Defined at:
  8570 ;;		line 464 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
  8571 ;; Parameters:    Size  Location     Type
  8572 ;;  f               2   12[COMRAM] PTR const unsigned char 
  8573 ;;		 -> STR_15(13), STR_14(15), STR_13(15), STR_12(17), 
  8574 ;;		 -> STR_11(22), STR_10(19), STR_9(17), STR_8(17), 
  8575 ;;		 -> STR_7(17), STR_6(13), STR_5(9), STR_4(17), 
  8576 ;;		 -> STR_3(15), STR_2(13), STR_1(2), 
  8577 ;; Auto vars:     Size  Location     Type
  8578 ;;  printf          4    0        struct .
  8579 ;;  printf          3    0        PTR const unsigned char 
  8580 ;;  printf          2   29[COMRAM] int 
  8581 ;;  printf          2   26[COMRAM] unsigned int 
  8582 ;;  printf          2   23[COMRAM] PTR void [1]
  8583 ;;		 -> ?i2_printf(2), ?_printf(2), 
  8584 ;;  printf          2    0        unsigned int 
  8585 ;;  printf          1   31[COMRAM] char 
  8586 ;;  printf          1   28[COMRAM] unsigned char 
  8587 ;;  printf          1   25[COMRAM] char 
  8588 ;;  printf          1   22[COMRAM] unsigned char 
  8589 ;; Return value:  Size  Location     Type
  8590 ;;                  2   12[COMRAM] int 
  8591 ;; Registers used:
  8592 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8593 ;; Tracked objects:
  8594 ;;		On entry : 0/0
  8595 ;;		On exit  : 0/0
  8596 ;;		Unchanged: 0/0
  8597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8598 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8599 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8600 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8601 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8602 ;;Total ram usage:       20 bytes
  8603 ;; Hardware stack levels used:    1
  8604 ;; Hardware stack levels required when called:    2
  8605 ;; This function calls:
  8606 ;;		i2___lwdiv
  8607 ;;		i2___lwmod
  8608 ;;		i2___wmul
  8609 ;;		i2_isdigit
  8610 ;;		i2_putch
  8611 ;; This function is called by:
  8612 ;;		_keypressed
  8613 ;;		_tot_sorted
  8614 ;;		_op_time
  8615 ;;		_tin_results
  8616 ;;		_pop_results
  8617 ;; This function uses a non-reentrant model
  8618 ;;
  8619                           
  8620                           	psect	text57
  8621  0003F0                     __ptext57:
  8622                           	opt stack 0
  8623  0003F0                     i2_printf:
  8624                           	opt stack 22
  8625                           
  8626                           ;doprnt.c: 466: va_list ap;
  8627                           ;doprnt.c: 499: signed char c;
  8628                           ;doprnt.c: 501: int width;
  8629                           ;doprnt.c: 506: signed char prec;
  8630                           ;doprnt.c: 508: unsigned char flag;
  8631                           ;doprnt.c: 523: union {
  8632                           ;doprnt.c: 524: unsigned long vd;
  8633                           ;doprnt.c: 525: double integ;
  8634                           ;doprnt.c: 526: } tmpval;
  8635                           ;doprnt.c: 528: unsigned int val;
  8636                           ;doprnt.c: 529: unsigned len;
  8637                           ;doprnt.c: 530: const char * cp;
  8638                           ;doprnt.c: 533: *ap = __va_start();
  8639                           
  8640                           ;incstack = 0
  8641  0003F0  0E0F               	movlw	low (?i2_printf+2)
  8642  0003F2  6E18               	movwf	i2printf@ap,c
  8643  0003F4  0E00               	movlw	high (?i2_printf+2)
  8644  0003F6  6E19               	movwf	i2printf@ap+1,c
  8645                           
  8646                           ;doprnt.c: 536: while(c = *f++) {
  8647  0003F8  D188               	goto	i2l3535
  8648  0003FA                     i2l3409:
  8649                           
  8650                           ;doprnt.c: 538: if(c != '%')
  8651  0003FA  0E25               	movlw	37
  8652  0003FC  1820               	xorwf	i2printf@c,w,c
  8653  0003FE  B4D8               	btfsc	status,2,c
  8654  000400  D004               	goto	i2l3413
  8655                           
  8656                           ;doprnt.c: 540: {
  8657                           ;doprnt.c: 541: (putch(c) );
  8658  000402  5020               	movf	i2printf@c,w,c
  8659  000404  ECC7  F00E         	call	i2_putch
  8660                           
  8661                           ;doprnt.c: 542: continue;
  8662  000408  D180               	goto	i2l3535
  8663  00040A                     i2l3413:
  8664                           
  8665                           ;doprnt.c: 543: }
  8666                           ;doprnt.c: 546: width = 0;
  8667  00040A  0E00               	movlw	0
  8668  00040C  6E1F               	movwf	i2printf@width+1,c
  8669  00040E  0E00               	movlw	0
  8670  000410  6E1E               	movwf	i2printf@width,c
  8671                           
  8672                           ;doprnt.c: 548: flag = 0;
  8673  000412  0E00               	movlw	0
  8674  000414  6E1D               	movwf	i2printf@flag,c
  8675                           
  8676                           ;doprnt.c: 551: switch(*f) {
  8677                           
  8678                           ;doprnt.c: 550: for(;;) {
  8679  000416  D003               	goto	i2l3419
  8680  000418                     i2l3415:
  8681                           
  8682                           ;doprnt.c: 580: flag |= 0x04;
  8683  000418  841D               	bsf	i2printf@flag,2,c
  8684                           
  8685                           ;doprnt.c: 581: f++;
  8686  00041A  4A0D               	infsnz	i2printf@f,f,c
  8687  00041C  2A0E               	incf	i2printf@f+1,f,c
  8688  00041E                     i2l3419:
  8689  00041E  C00D  FFF6         	movff	i2printf@f,tblptrl
  8690  000422  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8691  000426                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8692  000426  6AF8               	clrf	tblptru,c
  8693  000428                     	endif
  8694  000428                     	if	0	;tblptru may be non-zero
  8695  000428                     	endif
  8696  000428  0008               	tblrd		*
  8697  00042A  50F5               	movf	tablat,w,c
  8698                           
  8699                           ; Switch size 1, requested type "space"
  8700                           ; Number of cases is 1, Range of values is 48 to 48
  8701                           ; switch strategies available:
  8702                           ; Name         Instructions Cycles
  8703                           ; simple_byte            4     3 (average)
  8704                           ;	Chosen strategy is simple_byte
  8705  00042C  0A30               	xorlw	48	; case 48
  8706  00042E  B4D8               	btfsc	status,2,c
  8707  000430  D7F3               	goto	i2l3415
  8708                           
  8709                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8710                           
  8711                           ;doprnt.c: 586: }
  8712                           
  8713                           ;doprnt.c: 585: break;
  8714  000432  C00D  FFF6         	movff	i2printf@f,tblptrl
  8715  000436  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8716  00043A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8717  00043A  6AF8               	clrf	tblptru,c
  8718  00043C                     	endif
  8719  00043C                     	if	0	;tblptru may be non-zero
  8720  00043C                     	endif
  8721  00043C  0008               	tblrd		*
  8722  00043E  50F5               	movf	tablat,w,c
  8723  000440  EC50  F00E         	call	i2_isdigit
  8724  000444  A0D8               	btfss	status,0,c
  8725  000446  D037               	goto	i2l3437
  8726                           
  8727                           ;doprnt.c: 598: width = 0;
  8728  000448  0E00               	movlw	0
  8729  00044A  6E1F               	movwf	i2printf@width+1,c
  8730  00044C  0E00               	movlw	0
  8731  00044E  6E1E               	movwf	i2printf@width,c
  8732  000450                     i2l3425:
  8733                           
  8734                           ;doprnt.c: 600: width *= 10;
  8735  000450  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
  8736  000454  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  8737  000458  0E00               	movlw	0
  8738  00045A  6E04               	movwf	i2___wmul@multiplicand+1,c
  8739  00045C  0E0A               	movlw	10
  8740  00045E  6E03               	movwf	i2___wmul@multiplicand,c
  8741  000460  ECBC  F00D         	call	i2___wmul	;wreg free
  8742  000464  C001  F01E         	movff	?i2___wmul,i2printf@width
  8743  000468  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
  8744                           
  8745                           ;doprnt.c: 601: width += *f++ - '0';
  8746  00046C  0ED0               	movlw	208
  8747  00046E  6E13               	movwf	??i2_printf& (0+255),c
  8748  000470  0EFF               	movlw	255
  8749  000472  6E14               	movwf	(??i2_printf+1)& (0+255),c
  8750  000474  C00D  FFF6         	movff	i2printf@f,tblptrl
  8751  000478  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8752  00047C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8753  00047C  6AF8               	clrf	tblptru,c
  8754  00047E                     	endif
  8755  00047E                     	if	0	;tblptru may be non-zero
  8756  00047E                     	endif
  8757  00047E  0008               	tblrd		*
  8758  000480  50F5               	movf	tablat,w,c
  8759  000482  6E15               	movwf	(??i2_printf+2)& (0+255),c
  8760  000484  6A16               	clrf	(??i2_printf+3)& (0+255),c
  8761  000486  5013               	movf	??i2_printf,w,c
  8762  000488  2615               	addwf	??i2_printf+2,f,c
  8763  00048A  5014               	movf	??i2_printf+1,w,c
  8764  00048C  2216               	addwfc	??i2_printf+3,f,c
  8765  00048E  5015               	movf	??i2_printf+2,w,c
  8766  000490  261E               	addwf	i2printf@width,f,c
  8767  000492  5016               	movf	??i2_printf+3,w,c
  8768  000494  221F               	addwfc	i2printf@width+1,f,c
  8769  000496  4A0D               	infsnz	i2printf@f,f,c
  8770  000498  2A0E               	incf	i2printf@f+1,f,c
  8771                           
  8772                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8773  00049A  C00D  FFF6         	movff	i2printf@f,tblptrl
  8774  00049E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8775  0004A2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8776  0004A2  6AF8               	clrf	tblptru,c
  8777  0004A4                     	endif
  8778  0004A4                     	if	0	;tblptru may be non-zero
  8779  0004A4                     	endif
  8780  0004A4  0008               	tblrd		*
  8781  0004A6  50F5               	movf	tablat,w,c
  8782  0004A8  EC50  F00E         	call	i2_isdigit
  8783  0004AC  A0D8               	btfss	status,0,c
  8784  0004AE  D003               	goto	i2l3437
  8785  0004B0  D7CF               	goto	i2l3425
  8786  0004B2                     i2l3433:
  8787                           
  8788                           ;doprnt.c: 721: flag |= 0x80;
  8789  0004B2  8E1D               	bsf	i2printf@flag,7,c
  8790                           
  8791                           ;doprnt.c: 723: break;
  8792  0004B4  D018               	goto	i2l659
  8793  0004B6                     i2l3437:
  8794  0004B6  C00D  FFF6         	movff	i2printf@f,tblptrl
  8795  0004BA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8796  0004BE  4A0D               	infsnz	i2printf@f,f,c
  8797  0004C0  2A0E               	incf	i2printf@f+1,f,c
  8798  0004C2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8799  0004C2  6AF8               	clrf	tblptru,c
  8800  0004C4                     	endif
  8801  0004C4                     	if	0	;tblptru may be non-zero
  8802  0004C4                     	endif
  8803  0004C4  0008               	tblrd		*
  8804  0004C6  CFF5 F020          	movff	tablat,i2printf@c
  8805  0004CA  5020               	movf	i2printf@c,w,c
  8806                           
  8807                           ; Switch size 1, requested type "space"
  8808                           ; Number of cases is 4, Range of values is 0 to 120
  8809                           ; switch strategies available:
  8810                           ; Name         Instructions Cycles
  8811                           ; simple_byte           13     7 (average)
  8812                           ;	Chosen strategy is simple_byte
  8813  0004CC  0A00               	xorlw	0	; case 0
  8814  0004CE  B4D8               	btfsc	status,2,c
  8815  0004D0  0012               	return	
  8816  0004D2  0A64               	xorlw	100	; case 100
  8817  0004D4  B4D8               	btfsc	status,2,c
  8818  0004D6  D007               	goto	i2l659
  8819  0004D8  0A0D               	xorlw	13	; case 105
  8820  0004DA  B4D8               	btfsc	status,2,c
  8821  0004DC  D004               	goto	i2l659
  8822  0004DE  0A11               	xorlw	17	; case 120
  8823  0004E0  B4D8               	btfsc	status,2,c
  8824  0004E2  D7E7               	goto	i2l3433
  8825  0004E4  D112               	goto	i2l3535
  8826  0004E6                     i2l659:
  8827                           
  8828                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  8829  0004E6  BE1D               	btfsc	i2printf@flag,7,c
  8830  0004E8  D015               	goto	i2l3449
  8831                           
  8832                           ;doprnt.c: 1253: {
  8833                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8834  0004EA  C018  FFD9         	movff	i2printf@ap,fsr2l
  8835  0004EE  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  8836  0004F2  CFDE F01B          	movff	postinc2,i2printf@val
  8837  0004F6  CFDD F01C          	movff	postdec2,i2printf@val+1
  8838  0004FA  0E02               	movlw	2
  8839  0004FC  2618               	addwf	i2printf@ap,f,c
  8840  0004FE  0E00               	movlw	0
  8841  000500  2219               	addwfc	i2printf@ap+1,f,c
  8842                           
  8843                           ;doprnt.c: 1261: if((int)val < 0) {
  8844  000502  AE1C               	btfss	i2printf@val+1,7,c
  8845  000504  D04A               	goto	i2l3483
  8846                           
  8847                           ;doprnt.c: 1262: flag |= 0x03;
  8848  000506  0E03               	movlw	3
  8849  000508  121D               	iorwf	i2printf@flag,f,c
  8850                           
  8851                           ;doprnt.c: 1263: val = -val;
  8852  00050A  6C1B               	negf	i2printf@val,c
  8853  00050C  1E1C               	comf	i2printf@val+1,f,c
  8854  00050E  B0D8               	btfsc	status,0,c
  8855  000510  2A1C               	incf	i2printf@val+1,f,c
  8856                           
  8857                           ;doprnt.c: 1264: }
  8858                           ;doprnt.c: 1266: }
  8859  000512  D043               	goto	i2l3483
  8860  000514                     i2l3449:
  8861                           
  8862                           ;doprnt.c: 1268: else
  8863                           ;doprnt.c: 1273: {
  8864                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8865  000514  C018  FFD9         	movff	i2printf@ap,fsr2l
  8866  000518  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  8867  00051C  CFDE F01B          	movff	postinc2,i2printf@val
  8868  000520  CFDD F01C          	movff	postdec2,i2printf@val+1
  8869  000524  0E02               	movlw	2
  8870  000526  2618               	addwf	i2printf@ap,f,c
  8871  000528  0E00               	movlw	0
  8872  00052A  2219               	addwfc	i2printf@ap+1,f,c
  8873                           
  8874                           ;doprnt.c: 1287: }
  8875                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  8876  00052C  D036               	goto	i2l3483
  8877  00052E                     i2l3453:
  8878                           
  8879                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8880  00052E  0E01               	movlw	1
  8881  000530  6E20               	movwf	i2printf@c,c
  8882  000532                     i2l3455:
  8883  000532  0E05               	movlw	5
  8884  000534  1820               	xorwf	i2printf@c,w,c
  8885  000536  B4D8               	btfsc	status,2,c
  8886  000538  D038               	goto	i2l3485
  8887                           
  8888                           ;doprnt.c: 1306: if(val < dpowers[c])
  8889  00053A  5020               	movf	i2printf@c,w,c
  8890  00053C  0D02               	mullw	2
  8891  00053E  0EFA               	movlw	low _dpowers
  8892  000540  24F3               	addwf	prodl,w,c
  8893  000542  6EF6               	movwf	tblptrl,c
  8894  000544  0EFE               	movlw	high _dpowers
  8895  000546  20F4               	addwfc	prodh,w,c
  8896  000548  6EF7               	movwf	tblptrh,c
  8897  00054A                     	if	1	;There are 3 active tblptr bytes
  8898  00054A  6AF8               	clrf	tblptru,c
  8899  00054C  0E00               	movlw	low (__mediumconst shr (0+16))
  8900  00054E  22F8               	addwfc	tblptru,f,c
  8901  000550                     	endif
  8902  000550  0009               	tblrd		*+
  8903  000552  50F5               	movf	tablat,w,c
  8904  000554  5C1B               	subwf	i2printf@val,w,c
  8905  000556  0009               	tblrd		*+
  8906  000558  50F5               	movf	tablat,w,c
  8907  00055A  581C               	subwfb	i2printf@val+1,w,c
  8908  00055C  A0D8               	btfss	status,0,c
  8909  00055E  D025               	goto	i2l3485
  8910                           
  8911                           ;doprnt.c: 1307: break;
  8912  000560  2A20               	incf	i2printf@c,f,c
  8913  000562  D7E7               	goto	i2l3455
  8914  000564                     i2l3467:
  8915                           
  8916                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8917  000564  0E01               	movlw	1
  8918  000566  6E20               	movwf	i2printf@c,c
  8919  000568                     i2l3469:
  8920  000568  0E04               	movlw	4
  8921  00056A  1820               	xorwf	i2printf@c,w,c
  8922  00056C  B4D8               	btfsc	status,2,c
  8923  00056E  D01D               	goto	i2l3485
  8924                           
  8925                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8926  000570  5020               	movf	i2printf@c,w,c
  8927  000572  0D02               	mullw	2
  8928  000574  0E04               	movlw	low _hexpowers
  8929  000576  24F3               	addwf	prodl,w,c
  8930  000578  6EF6               	movwf	tblptrl,c
  8931  00057A  0EFF               	movlw	high _hexpowers
  8932  00057C  20F4               	addwfc	prodh,w,c
  8933  00057E  6EF7               	movwf	tblptrh,c
  8934  000580                     	if	1	;There are 3 active tblptr bytes
  8935  000580  6AF8               	clrf	tblptru,c
  8936  000582  0E00               	movlw	low (__mediumconst shr (0+16))
  8937  000584  22F8               	addwfc	tblptru,f,c
  8938  000586                     	endif
  8939  000586  0009               	tblrd		*+
  8940  000588  50F5               	movf	tablat,w,c
  8941  00058A  5C1B               	subwf	i2printf@val,w,c
  8942  00058C  0009               	tblrd		*+
  8943  00058E  50F5               	movf	tablat,w,c
  8944  000590  581C               	subwfb	i2printf@val+1,w,c
  8945  000592  A0D8               	btfss	status,0,c
  8946  000594  D00A               	goto	i2l3485
  8947                           
  8948                           ;doprnt.c: 1318: break;
  8949  000596  2A20               	incf	i2printf@c,f,c
  8950  000598  D7E7               	goto	i2l3469
  8951  00059A                     i2l3483:
  8952  00059A  501D               	movf	i2printf@flag,w,c
  8953  00059C  0B80               	andlw	128
  8954                           
  8955                           ; Switch size 1, requested type "space"
  8956                           ; Number of cases is 2, Range of values is 0 to 128
  8957                           ; switch strategies available:
  8958                           ; Name         Instructions Cycles
  8959                           ; simple_byte            7     4 (average)
  8960                           ;	Chosen strategy is simple_byte
  8961  00059E  0A00               	xorlw	0	; case 0
  8962  0005A0  B4D8               	btfsc	status,2,c
  8963  0005A2  D7C5               	goto	i2l3453
  8964  0005A4  0A80               	xorlw	128	; case 128
  8965  0005A6  B4D8               	btfsc	status,2,c
  8966  0005A8  D7DD               	goto	i2l3467
  8967  0005AA                     i2l3485:
  8968                           
  8969                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8970  0005AA  501E               	movf	i2printf@width,w,c
  8971  0005AC  101F               	iorwf	i2printf@width+1,w,c
  8972  0005AE  B4D8               	btfsc	status,2,c
  8973  0005B0  D009               	goto	i2l3491
  8974  0005B2  C01D  F013         	movff	i2printf@flag,??i2_printf
  8975  0005B6  0E03               	movlw	3
  8976  0005B8  1613               	andwf	??i2_printf,f,c
  8977  0005BA  B4D8               	btfsc	status,2,c
  8978  0005BC  D003               	goto	i2l3491
  8979                           
  8980                           ;doprnt.c: 1346: width--;
  8981  0005BE  061E               	decf	i2printf@width,f,c
  8982  0005C0  A0D8               	btfss	status,0,c
  8983  0005C2  061F               	decf	i2printf@width+1,f,c
  8984  0005C4                     i2l3491:
  8985                           
  8986                           ;doprnt.c: 1381: if(width > c)
  8987  0005C4  0E80               	movlw	128
  8988  0005C6  BE20               	btfsc	i2printf@c,7,c
  8989  0005C8  0E7F               	movlw	127
  8990  0005CA  6E13               	movwf	??i2_printf& (0+255),c
  8991  0005CC  501E               	movf	i2printf@width,w,c
  8992  0005CE  5C20               	subwf	i2printf@c,w,c
  8993  0005D0  501F               	movf	i2printf@width+1,w,c
  8994  0005D2  0A80               	xorlw	128
  8995  0005D4  5813               	subwfb	??i2_printf& (0+255),w,c
  8996  0005D6  B0D8               	btfsc	status,0,c
  8997  0005D8  D007               	goto	i2l3495
  8998                           
  8999                           ;doprnt.c: 1382: width -= c;
  9000  0005DA  5020               	movf	i2printf@c,w,c
  9001  0005DC  5E1E               	subwf	i2printf@width,f,c
  9002  0005DE  0E00               	movlw	0
  9003  0005E0  BE20               	btfsc	i2printf@c,7,c
  9004  0005E2  0EFF               	movlw	255
  9005  0005E4  5A1F               	subwfb	i2printf@width+1,f,c
  9006  0005E6  D004               	goto	i2l3497
  9007  0005E8                     i2l3495:
  9008                           
  9009                           ;doprnt.c: 1383: else
  9010                           ;doprnt.c: 1384: width = 0;
  9011  0005E8  0E00               	movlw	0
  9012  0005EA  6E1F               	movwf	i2printf@width+1,c
  9013  0005EC  0E00               	movlw	0
  9014  0005EE  6E1E               	movwf	i2printf@width,c
  9015  0005F0                     i2l3497:
  9016                           
  9017                           ;doprnt.c: 1387: if(flag & 0x04) {
  9018  0005F0  A41D               	btfss	i2printf@flag,2,c
  9019  0005F2  D014               	goto	i2l3509
  9020                           
  9021                           ;doprnt.c: 1392: if(flag & 0x03)
  9022  0005F4  C01D  F013         	movff	i2printf@flag,??i2_printf
  9023  0005F8  0E03               	movlw	3
  9024  0005FA  1613               	andwf	??i2_printf,f,c
  9025  0005FC  B4D8               	btfsc	status,2,c
  9026  0005FE  D003               	goto	i2l3503
  9027                           
  9028                           ;doprnt.c: 1393: (putch('-') );
  9029  000600  0E2D               	movlw	45
  9030  000602  ECC7  F00E         	call	i2_putch
  9031  000606                     i2l3503:
  9032                           
  9033                           ;doprnt.c: 1415: if(width)
  9034  000606  501E               	movf	i2printf@width,w,c
  9035  000608  101F               	iorwf	i2printf@width+1,w,c
  9036  00060A  B4D8               	btfsc	status,2,c
  9037  00060C  D01E               	goto	i2l3519
  9038                           
  9039                           ;doprnt.c: 1417: (putch('0') );
  9040                           
  9041                           ;doprnt.c: 1416: do
  9042  00060E  0E30               	movlw	48
  9043  000610  ECC7  F00E         	call	i2_putch
  9044                           
  9045                           ;doprnt.c: 1418: while(--width);
  9046  000614  061E               	decf	i2printf@width,f,c
  9047  000616  A0D8               	btfss	status,0,c
  9048  000618  061F               	decf	i2printf@width+1,f,c
  9049  00061A  D7F5               	goto	i2l3503
  9050  00061C                     i2l3509:
  9051                           
  9052                           ;doprnt.c: 1422: {
  9053                           ;doprnt.c: 1424: if(width
  9054                           ;doprnt.c: 1428: )
  9055  00061C  501E               	movf	i2printf@width,w,c
  9056  00061E  101F               	iorwf	i2printf@width+1,w,c
  9057  000620  B4D8               	btfsc	status,2,c
  9058  000622  D00A               	goto	i2l3515
  9059  000624                     i2l3511:
  9060                           
  9061                           ;doprnt.c: 1430: (putch(' ') );
  9062  000624  0E20               	movlw	32
  9063  000626  ECC7  F00E         	call	i2_putch
  9064                           
  9065                           ;doprnt.c: 1431: while(--width);
  9066  00062A  061E               	decf	i2printf@width,f,c
  9067  00062C  A0D8               	btfss	status,0,c
  9068  00062E  061F               	decf	i2printf@width+1,f,c
  9069  000630  501E               	movf	i2printf@width,w,c
  9070  000632  101F               	iorwf	i2printf@width+1,w,c
  9071  000634  A4D8               	btfss	status,2,c
  9072  000636  D7F6               	goto	i2l3511
  9073  000638                     i2l3515:
  9074                           
  9075                           ;doprnt.c: 1438: if(flag & 0x03)
  9076  000638  C01D  F013         	movff	i2printf@flag,??i2_printf
  9077  00063C  0E03               	movlw	3
  9078  00063E  1613               	andwf	??i2_printf,f,c
  9079  000640  B4D8               	btfsc	status,2,c
  9080  000642  D003               	goto	i2l3519
  9081                           
  9082                           ;doprnt.c: 1439: (putch('-') );
  9083  000644  0E2D               	movlw	45
  9084  000646  ECC7  F00E         	call	i2_putch
  9085  00064A                     i2l3519:
  9086                           
  9087                           ;doprnt.c: 1469: }
  9088                           ;doprnt.c: 1472: prec = c;
  9089  00064A  C020  F01A         	movff	i2printf@c,i2printf@prec
  9090                           
  9091                           ;doprnt.c: 1474: while(prec--) {
  9092  00064E  D059               	goto	i2l3533
  9093  000650                     i2l3521:
  9094                           
  9095                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9096  000650  501A               	movf	i2printf@prec,w,c
  9097  000652  0D02               	mullw	2
  9098  000654  0EFA               	movlw	low _dpowers
  9099  000656  24F3               	addwf	prodl,w,c
  9100  000658  6EF6               	movwf	tblptrl,c
  9101  00065A  0EFE               	movlw	high _dpowers
  9102  00065C  20F4               	addwfc	prodh,w,c
  9103  00065E  6EF7               	movwf	tblptrh,c
  9104  000660                     	if	1	;There are 3 active tblptr bytes
  9105  000660  6AF8               	clrf	tblptru,c
  9106  000662  0E00               	movlw	low (__mediumconst shr (0+16))
  9107  000664  22F8               	addwfc	tblptru,f,c
  9108  000666                     	endif
  9109  000666  0009               	tblrd		*+
  9110  000668  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  9111  00066C  000A               	tblrd		*-
  9112  00066E  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  9113  000672  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  9114  000676  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  9115  00067A  ECA4  F00B         	call	i2___lwdiv	;wreg free
  9116  00067E  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  9117  000682  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  9118  000686  0E00               	movlw	0
  9119  000688  6E0B               	movwf	i2___lwmod@divisor+1,c
  9120  00068A  0E0A               	movlw	10
  9121  00068C  6E0A               	movwf	i2___lwmod@divisor,c
  9122  00068E  EC65  F00C         	call	i2___lwmod	;wreg free
  9123  000692  5008               	movf	?i2___lwmod,w,c
  9124  000694  0F30               	addlw	48
  9125  000696  6E20               	movwf	i2printf@c,c
  9126                           
  9127                           ;doprnt.c: 1491: break;
  9128  000698  D031               	goto	i2l3531
  9129  00069A                     i2l3523:
  9130                           
  9131                           ;doprnt.c: 1499: {
  9132                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  9133  00069A  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  9134  00069E  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  9135  0006A2  501A               	movf	i2printf@prec,w,c
  9136  0006A4  0D02               	mullw	2
  9137  0006A6  0E04               	movlw	low _hexpowers
  9138  0006A8  24F3               	addwf	prodl,w,c
  9139  0006AA  6EF6               	movwf	tblptrl,c
  9140  0006AC  0EFF               	movlw	high _hexpowers
  9141  0006AE  20F4               	addwfc	prodh,w,c
  9142  0006B0  6EF7               	movwf	tblptrh,c
  9143  0006B2                     	if	1	;There are 3 active tblptr bytes
  9144  0006B2  6AF8               	clrf	tblptru,c
  9145  0006B4  0E00               	movlw	low (__mediumconst shr (0+16))
  9146  0006B6  22F8               	addwfc	tblptru,f,c
  9147  0006B8                     	endif
  9148  0006B8  0009               	tblrd		*+
  9149  0006BA  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  9150  0006BE  000A               	tblrd		*-
  9151  0006C0  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  9152  0006C4  ECA4  F00B         	call	i2___lwdiv	;wreg free
  9153  0006C8  5001               	movf	?i2___lwdiv,w,c
  9154  0006CA  0B0F               	andlw	15
  9155  0006CC  6E17               	movwf	i2printf@idx,c
  9156                           
  9157                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  9158  0006CE  5017               	movf	i2printf@idx,w,c
  9159  0006D0  0D01               	mullw	1
  9160  0006D2  0E3C               	movlw	low STR_16
  9161  0006D4  24F3               	addwf	prodl,w,c
  9162  0006D6  6EF6               	movwf	tblptrl,c
  9163  0006D8  0EFF               	movlw	high STR_16
  9164  0006DA  20F4               	addwfc	prodh,w,c
  9165  0006DC  6EF7               	movwf	tblptrh,c
  9166  0006DE                     	if	1	;There are 3 active tblptr bytes
  9167  0006DE  6AF8               	clrf	tblptru,c
  9168  0006E0  0E00               	movlw	low (__mediumconst shr (0+16))
  9169  0006E2  22F8               	addwfc	tblptru,f,c
  9170  0006E4                     	endif
  9171  0006E4  0008               	tblrd		*
  9172  0006E6  CFF5 F020          	movff	tablat,i2printf@c
  9173                           
  9174                           ;doprnt.c: 1523: }
  9175                           
  9176                           ;doprnt.c: 1508: }
  9177                           ;doprnt.c: 1510: break;
  9178  0006EA  D008               	goto	i2l3531
  9179  0006EC                     i2l3529:
  9180  0006EC  501D               	movf	i2printf@flag,w,c
  9181  0006EE  0B80               	andlw	128
  9182                           
  9183                           ; Switch size 1, requested type "space"
  9184                           ; Number of cases is 2, Range of values is 0 to 128
  9185                           ; switch strategies available:
  9186                           ; Name         Instructions Cycles
  9187                           ; simple_byte            7     4 (average)
  9188                           ;	Chosen strategy is simple_byte
  9189  0006F0  0A00               	xorlw	0	; case 0
  9190  0006F2  B4D8               	btfsc	status,2,c
  9191  0006F4  D7AD               	goto	i2l3521
  9192  0006F6  0A80               	xorlw	128	; case 128
  9193  0006F8  B4D8               	btfsc	status,2,c
  9194  0006FA  D7CF               	goto	i2l3523
  9195  0006FC                     i2l3531:
  9196                           
  9197                           ;doprnt.c: 1524: (putch(c) );
  9198  0006FC  5020               	movf	i2printf@c,w,c
  9199  0006FE  ECC7  F00E         	call	i2_putch
  9200  000702                     i2l3533:
  9201  000702  061A               	decf	i2printf@prec,f,c
  9202  000704  281A               	incf	i2printf@prec,w,c
  9203  000706  A4D8               	btfss	status,2,c
  9204  000708  D7F1               	goto	i2l3529
  9205  00070A                     i2l3535:
  9206  00070A  C00D  FFF6         	movff	i2printf@f,tblptrl
  9207  00070E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9208  000712  4A0D               	infsnz	i2printf@f,f,c
  9209  000714  2A0E               	incf	i2printf@f+1,f,c
  9210  000716                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9211  000716  6AF8               	clrf	tblptru,c
  9212  000718                     	endif
  9213  000718                     	if	0	;tblptru may be non-zero
  9214  000718                     	endif
  9215  000718  0008               	tblrd		*
  9216  00071A  CFF5 F020          	movff	tablat,i2printf@c
  9217  00071E  5020               	movf	i2printf@c,w,c
  9218  000720  B4D8               	btfsc	status,2,c
  9219  000722  0012               	return	
  9220  000724  D66A               	goto	i2l3409
  9221  000726                     __end_ofi2_printf:
  9222                           	opt stack 0
  9223                           tosu	equ	0xFFF
  9224                           tosh	equ	0xFFE
  9225                           tosl	equ	0xFFD
  9226                           pclatu	equ	0xFFB
  9227                           pclath	equ	0xFFA
  9228                           tblptru	equ	0xFF8
  9229                           tblptrh	equ	0xFF7
  9230                           tblptrl	equ	0xFF6
  9231                           tablat	equ	0xFF5
  9232                           prodh	equ	0xFF4
  9233                           prodl	equ	0xFF3
  9234                           intcon	equ	0xFF2
  9235                           intcon3	equ	0xFF0
  9236                           postinc0	equ	0xFEE
  9237                           fsr0h	equ	0xFEA
  9238                           fsr0l	equ	0xFE9
  9239                           wreg	equ	0xFE8
  9240                           fsr1h	equ	0xFE2
  9241                           fsr1l	equ	0xFE1
  9242                           indf2	equ	0xFDF
  9243                           postinc2	equ	0xFDE
  9244                           postdec2	equ	0xFDD
  9245                           fsr2h	equ	0xFDA
  9246                           fsr2l	equ	0xFD9
  9247                           status	equ	0xFD8
  9248                           
  9249 ;; *************** function i2_putch *****************
  9250 ;; Defined at:
  9251 ;;		line 38 in file "lcd.c"
  9252 ;; Parameters:    Size  Location     Type
  9253 ;;  data            1    wreg     unsigned char 
  9254 ;; Auto vars:     Size  Location     Type
  9255 ;;  data            1    2[COMRAM] unsigned char 
  9256 ;; Return value:  Size  Location     Type
  9257 ;;                  1    wreg      void 
  9258 ;; Registers used:
  9259 ;;		wreg, status,2, status,0, cstack
  9260 ;; Tracked objects:
  9261 ;;		On entry : 0/0
  9262 ;;		On exit  : 0/0
  9263 ;;		Unchanged: 0/0
  9264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9266 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9268 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9269 ;;Total ram usage:        1 bytes
  9270 ;; Hardware stack levels used:    1
  9271 ;; Hardware stack levels required when called:    1
  9272 ;; This function calls:
  9273 ;;		i2_lcdNibble
  9274 ;; This function is called by:
  9275 ;;		i2_printf
  9276 ;; This function uses a non-reentrant model
  9277 ;;
  9278                           
  9279                           	psect	text58
  9280  001D8E                     __ptext58:
  9281                           	opt stack 0
  9282  001D8E                     i2_putch:
  9283                           	opt stack 22
  9284                           
  9285                           ;incstack = 0
  9286                           ;i2putch@data stored from wreg
  9287  001D8E  6E03               	movwf	i2putch@data,c
  9288                           
  9289                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  9290  001D90  848C               	bsf	3980,2,c	;volatile
  9291                           
  9292                           ;lcd.c: 40: lcdNibble(data);
  9293  001D92  5003               	movf	i2putch@data,w,c
  9294  001D94  EC79  F00B         	call	i2_lcdNibble
  9295  001D98  0012               	return		;funcret
  9296  001D9A                     __end_ofi2_putch:
  9297                           	opt stack 0
  9298                           tosu	equ	0xFFF
  9299                           tosh	equ	0xFFE
  9300                           tosl	equ	0xFFD
  9301                           pclatu	equ	0xFFB
  9302                           pclath	equ	0xFFA
  9303                           tblptru	equ	0xFF8
  9304                           tblptrh	equ	0xFF7
  9305                           tblptrl	equ	0xFF6
  9306                           tablat	equ	0xFF5
  9307                           prodh	equ	0xFF4
  9308                           prodl	equ	0xFF3
  9309                           intcon	equ	0xFF2
  9310                           intcon3	equ	0xFF0
  9311                           postinc0	equ	0xFEE
  9312                           fsr0h	equ	0xFEA
  9313                           fsr0l	equ	0xFE9
  9314                           wreg	equ	0xFE8
  9315                           fsr1h	equ	0xFE2
  9316                           fsr1l	equ	0xFE1
  9317                           indf2	equ	0xFDF
  9318                           postinc2	equ	0xFDE
  9319                           postdec2	equ	0xFDD
  9320                           fsr2h	equ	0xFDA
  9321                           fsr2l	equ	0xFD9
  9322                           status	equ	0xFD8
  9323                           
  9324 ;; *************** function i2_isdigit *****************
  9325 ;; Defined at:
  9326 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/isdigit.c"
  9327 ;; Parameters:    Size  Location     Type
  9328 ;;  c               1    wreg     unsigned char 
  9329 ;; Auto vars:     Size  Location     Type
  9330 ;;  c               1    2[COMRAM] unsigned char 
  9331 ;; Return value:  Size  Location     Type
  9332 ;;		None               void
  9333 ;; Registers used:
  9334 ;;		wreg, status,2, status,0
  9335 ;; Tracked objects:
  9336 ;;		On entry : 0/0
  9337 ;;		On exit  : 0/0
  9338 ;;		Unchanged: 0/0
  9339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9341 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9342 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9343 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9344 ;;Total ram usage:        3 bytes
  9345 ;; Hardware stack levels used:    1
  9346 ;; This function calls:
  9347 ;;		Nothing
  9348 ;; This function is called by:
  9349 ;;		i2_printf
  9350 ;; This function uses a non-reentrant model
  9351 ;;
  9352                           
  9353                           	psect	text59
  9354  001CA0                     __ptext59:
  9355                           	opt stack 0
  9356  001CA0                     i2_isdigit:
  9357                           	opt stack 23
  9358                           
  9359                           ;incstack = 0
  9360                           ;i2isdigit@c stored from wreg
  9361  001CA0  6E03               	movwf	i2isdigit@c,c
  9362  001CA2  0E00               	movlw	0
  9363  001CA4  6E02               	movwf	i2_isdigit$1350,c
  9364  001CA6  0E3A               	movlw	58
  9365  001CA8  6003               	cpfslt	i2isdigit@c,c
  9366  001CAA  D005               	goto	i2l3059
  9367  001CAC  0E2F               	movlw	47
  9368  001CAE  6403               	cpfsgt	i2isdigit@c,c
  9369  001CB0  D002               	goto	i2l3059
  9370  001CB2  0E01               	movlw	1
  9371  001CB4  6E02               	movwf	i2_isdigit$1350,c
  9372  001CB6                     i2l3059:
  9373  001CB6  C002  F001         	movff	i2_isdigit$1350,??i2_isdigit
  9374  001CBA  3001               	rrcf	??i2_isdigit,w,c
  9375  001CBC  0012               	return	
  9376  001CBE                     __end_ofi2_isdigit:
  9377                           	opt stack 0
  9378                           tosu	equ	0xFFF
  9379                           tosh	equ	0xFFE
  9380                           tosl	equ	0xFFD
  9381                           pclatu	equ	0xFFB
  9382                           pclath	equ	0xFFA
  9383                           tblptru	equ	0xFF8
  9384                           tblptrh	equ	0xFF7
  9385                           tblptrl	equ	0xFF6
  9386                           tablat	equ	0xFF5
  9387                           prodh	equ	0xFF4
  9388                           prodl	equ	0xFF3
  9389                           intcon	equ	0xFF2
  9390                           intcon3	equ	0xFF0
  9391                           postinc0	equ	0xFEE
  9392                           fsr0h	equ	0xFEA
  9393                           fsr0l	equ	0xFE9
  9394                           wreg	equ	0xFE8
  9395                           fsr1h	equ	0xFE2
  9396                           fsr1l	equ	0xFE1
  9397                           indf2	equ	0xFDF
  9398                           postinc2	equ	0xFDE
  9399                           postdec2	equ	0xFDD
  9400                           fsr2h	equ	0xFDA
  9401                           fsr2l	equ	0xFD9
  9402                           status	equ	0xFD8
  9403                           
  9404 ;; *************** function i2___wmul *****************
  9405 ;; Defined at:
  9406 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/Umul16.c"
  9407 ;; Parameters:    Size  Location     Type
  9408 ;;  multiplier      2    0[COMRAM] unsigned int 
  9409 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9410 ;; Auto vars:     Size  Location     Type
  9411 ;;  __wmul          2    4[COMRAM] unsigned int 
  9412 ;; Return value:  Size  Location     Type
  9413 ;;                  2    0[COMRAM] unsigned int 
  9414 ;; Registers used:
  9415 ;;		wreg, status,2, status,0, prodl, prodh
  9416 ;; Tracked objects:
  9417 ;;		On entry : 0/0
  9418 ;;		On exit  : 0/0
  9419 ;;		Unchanged: 0/0
  9420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9421 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9422 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9424 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9425 ;;Total ram usage:        6 bytes
  9426 ;; Hardware stack levels used:    1
  9427 ;; This function calls:
  9428 ;;		Nothing
  9429 ;; This function is called by:
  9430 ;;		i2_printf
  9431 ;; This function uses a non-reentrant model
  9432 ;;
  9433                           
  9434                           	psect	text60
  9435  001B78                     __ptext60:
  9436                           	opt stack 0
  9437  001B78                     i2___wmul:
  9438                           	opt stack 23
  9439                           
  9440                           ;incstack = 0
  9441  001B78  5001               	movf	i2___wmul@multiplier,w,c
  9442  001B7A  0203               	mulwf	i2___wmul@multiplicand,c
  9443  001B7C  CFF3 F005          	movff	prodl,i2___wmul@product
  9444  001B80  CFF4 F006          	movff	prodh,i2___wmul@product+1
  9445  001B84  5001               	movf	i2___wmul@multiplier,w,c
  9446  001B86  0204               	mulwf	i2___wmul@multiplicand+1,c
  9447  001B88  50F3               	movf	prodl,w,c
  9448  001B8A  2606               	addwf	i2___wmul@product+1,f,c
  9449  001B8C  5002               	movf	i2___wmul@multiplier+1,w,c
  9450  001B8E  0203               	mulwf	i2___wmul@multiplicand,c
  9451  001B90  50F3               	movf	prodl,w,c
  9452  001B92  2606               	addwf	i2___wmul@product+1,f,c
  9453  001B94  C005  F001         	movff	i2___wmul@product,?i2___wmul
  9454  001B98  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  9455  001B9C  0012               	return	
  9456  001B9E                     __end_ofi2___wmul:
  9457                           	opt stack 0
  9458                           tosu	equ	0xFFF
  9459                           tosh	equ	0xFFE
  9460                           tosl	equ	0xFFD
  9461                           pclatu	equ	0xFFB
  9462                           pclath	equ	0xFFA
  9463                           tblptru	equ	0xFF8
  9464                           tblptrh	equ	0xFF7
  9465                           tblptrl	equ	0xFF6
  9466                           tablat	equ	0xFF5
  9467                           prodh	equ	0xFF4
  9468                           prodl	equ	0xFF3
  9469                           intcon	equ	0xFF2
  9470                           intcon3	equ	0xFF0
  9471                           postinc0	equ	0xFEE
  9472                           fsr0h	equ	0xFEA
  9473                           fsr0l	equ	0xFE9
  9474                           wreg	equ	0xFE8
  9475                           fsr1h	equ	0xFE2
  9476                           fsr1l	equ	0xFE1
  9477                           indf2	equ	0xFDF
  9478                           postinc2	equ	0xFDE
  9479                           postdec2	equ	0xFDD
  9480                           fsr2h	equ	0xFDA
  9481                           fsr2l	equ	0xFD9
  9482                           status	equ	0xFD8
  9483                           
  9484 ;; *************** function i2___lwmod *****************
  9485 ;; Defined at:
  9486 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
  9487 ;; Parameters:    Size  Location     Type
  9488 ;;  dividend        2    7[COMRAM] unsigned int 
  9489 ;;  divisor         2    9[COMRAM] unsigned int 
  9490 ;; Auto vars:     Size  Location     Type
  9491 ;;  __lwmod         1   11[COMRAM] unsigned char 
  9492 ;; Return value:  Size  Location     Type
  9493 ;;                  2    7[COMRAM] unsigned int 
  9494 ;; Registers used:
  9495 ;;		wreg, status,2, status,0
  9496 ;; Tracked objects:
  9497 ;;		On entry : 0/0
  9498 ;;		On exit  : 0/0
  9499 ;;		Unchanged: 0/0
  9500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9501 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9502 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9504 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9505 ;;Total ram usage:        5 bytes
  9506 ;; Hardware stack levels used:    1
  9507 ;; This function calls:
  9508 ;;		Nothing
  9509 ;; This function is called by:
  9510 ;;		i2_printf
  9511 ;; This function uses a non-reentrant model
  9512 ;;
  9513                           
  9514                           	psect	text61
  9515  0018CA                     __ptext61:
  9516                           	opt stack 0
  9517  0018CA                     i2___lwmod:
  9518                           	opt stack 23
  9519                           
  9520                           ;incstack = 0
  9521  0018CA  500A               	movf	i2___lwmod@divisor,w,c
  9522  0018CC  100B               	iorwf	i2___lwmod@divisor+1,w,c
  9523  0018CE  B4D8               	btfsc	status,2,c
  9524  0018D0  D018               	goto	i2l1114
  9525  0018D2  0E01               	movlw	1
  9526  0018D4  6E0C               	movwf	i2___lwmod@counter,c
  9527  0018D6  D004               	goto	i2l3091
  9528  0018D8                     i2l3089:
  9529  0018D8  90D8               	bcf	status,0,c
  9530  0018DA  360A               	rlcf	i2___lwmod@divisor,f,c
  9531  0018DC  360B               	rlcf	i2___lwmod@divisor+1,f,c
  9532  0018DE  2A0C               	incf	i2___lwmod@counter,f,c
  9533  0018E0                     i2l3091:
  9534  0018E0  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  9535  0018E2  D7FA               	goto	i2l3089
  9536  0018E4                     i2l3093:
  9537  0018E4  500A               	movf	i2___lwmod@divisor,w,c
  9538  0018E6  5C08               	subwf	i2___lwmod@dividend,w,c
  9539  0018E8  500B               	movf	i2___lwmod@divisor+1,w,c
  9540  0018EA  5809               	subwfb	i2___lwmod@dividend+1,w,c
  9541  0018EC  A0D8               	btfss	status,0,c
  9542  0018EE  D004               	goto	i2l3097
  9543  0018F0  500A               	movf	i2___lwmod@divisor,w,c
  9544  0018F2  5E08               	subwf	i2___lwmod@dividend,f,c
  9545  0018F4  500B               	movf	i2___lwmod@divisor+1,w,c
  9546  0018F6  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  9547  0018F8                     i2l3097:
  9548  0018F8  90D8               	bcf	status,0,c
  9549  0018FA  320B               	rrcf	i2___lwmod@divisor+1,f,c
  9550  0018FC  320A               	rrcf	i2___lwmod@divisor,f,c
  9551  0018FE  2E0C               	decfsz	i2___lwmod@counter,f,c
  9552  001900  D7F1               	goto	i2l3093
  9553  001902                     i2l1114:
  9554  001902  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  9555  001906  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  9556  00190A  0012               	return		;funcret
  9557  00190C                     __end_ofi2___lwmod:
  9558                           	opt stack 0
  9559                           tosu	equ	0xFFF
  9560                           tosh	equ	0xFFE
  9561                           tosl	equ	0xFFD
  9562                           pclatu	equ	0xFFB
  9563                           pclath	equ	0xFFA
  9564                           tblptru	equ	0xFF8
  9565                           tblptrh	equ	0xFF7
  9566                           tblptrl	equ	0xFF6
  9567                           tablat	equ	0xFF5
  9568                           prodh	equ	0xFF4
  9569                           prodl	equ	0xFF3
  9570                           intcon	equ	0xFF2
  9571                           intcon3	equ	0xFF0
  9572                           postinc0	equ	0xFEE
  9573                           fsr0h	equ	0xFEA
  9574                           fsr0l	equ	0xFE9
  9575                           wreg	equ	0xFE8
  9576                           fsr1h	equ	0xFE2
  9577                           fsr1l	equ	0xFE1
  9578                           indf2	equ	0xFDF
  9579                           postinc2	equ	0xFDE
  9580                           postdec2	equ	0xFDD
  9581                           fsr2h	equ	0xFDA
  9582                           fsr2l	equ	0xFD9
  9583                           status	equ	0xFD8
  9584                           
  9585 ;; *************** function i2___lwdiv *****************
  9586 ;; Defined at:
  9587 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  9588 ;; Parameters:    Size  Location     Type
  9589 ;;  dividend        2    0[COMRAM] unsigned int 
  9590 ;;  divisor         2    2[COMRAM] unsigned int 
  9591 ;; Auto vars:     Size  Location     Type
  9592 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  9593 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  9594 ;; Return value:  Size  Location     Type
  9595 ;;                  2    0[COMRAM] unsigned int 
  9596 ;; Registers used:
  9597 ;;		wreg, status,2, status,0
  9598 ;; Tracked objects:
  9599 ;;		On entry : 0/0
  9600 ;;		On exit  : 0/0
  9601 ;;		Unchanged: 0/0
  9602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9603 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9604 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9606 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9607 ;;Total ram usage:        7 bytes
  9608 ;; Hardware stack levels used:    1
  9609 ;; This function calls:
  9610 ;;		Nothing
  9611 ;; This function is called by:
  9612 ;;		i2_printf
  9613 ;; This function uses a non-reentrant model
  9614 ;;
  9615                           
  9616                           	psect	text62
  9617  001748                     __ptext62:
  9618                           	opt stack 0
  9619  001748                     i2___lwdiv:
  9620                           	opt stack 23
  9621                           
  9622                           ;incstack = 0
  9623  001748  0E00               	movlw	0
  9624  00174A  6E06               	movwf	i2___lwdiv@quotient+1,c
  9625  00174C  0E00               	movlw	0
  9626  00174E  6E05               	movwf	i2___lwdiv@quotient,c
  9627  001750  5003               	movf	i2___lwdiv@divisor,w,c
  9628  001752  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  9629  001754  B4D8               	btfsc	status,2,c
  9630  001756  D01C               	goto	i2l1104
  9631  001758  0E01               	movlw	1
  9632  00175A  6E07               	movwf	i2___lwdiv@counter,c
  9633  00175C  D004               	goto	i2l3071
  9634  00175E                     i2l3069:
  9635  00175E  90D8               	bcf	status,0,c
  9636  001760  3603               	rlcf	i2___lwdiv@divisor,f,c
  9637  001762  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  9638  001764  2A07               	incf	i2___lwdiv@counter,f,c
  9639  001766                     i2l3071:
  9640  001766  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  9641  001768  D7FA               	goto	i2l3069
  9642  00176A                     i2l3073:
  9643  00176A  90D8               	bcf	status,0,c
  9644  00176C  3605               	rlcf	i2___lwdiv@quotient,f,c
  9645  00176E  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  9646  001770  5003               	movf	i2___lwdiv@divisor,w,c
  9647  001772  5C01               	subwf	i2___lwdiv@dividend,w,c
  9648  001774  5004               	movf	i2___lwdiv@divisor+1,w,c
  9649  001776  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  9650  001778  A0D8               	btfss	status,0,c
  9651  00177A  D005               	goto	i2l3081
  9652  00177C  5003               	movf	i2___lwdiv@divisor,w,c
  9653  00177E  5E01               	subwf	i2___lwdiv@dividend,f,c
  9654  001780  5004               	movf	i2___lwdiv@divisor+1,w,c
  9655  001782  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  9656  001784  8005               	bsf	i2___lwdiv@quotient,0,c
  9657  001786                     i2l3081:
  9658  001786  90D8               	bcf	status,0,c
  9659  001788  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  9660  00178A  3203               	rrcf	i2___lwdiv@divisor,f,c
  9661  00178C  2E07               	decfsz	i2___lwdiv@counter,f,c
  9662  00178E  D7ED               	goto	i2l3073
  9663  001790                     i2l1104:
  9664  001790  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  9665  001794  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  9666  001798  0012               	return		;funcret
  9667  00179A                     __end_ofi2___lwdiv:
  9668                           	opt stack 0
  9669                           tosu	equ	0xFFF
  9670                           tosh	equ	0xFFE
  9671                           tosl	equ	0xFFD
  9672                           pclatu	equ	0xFFB
  9673                           pclath	equ	0xFFA
  9674                           tblptru	equ	0xFF8
  9675                           tblptrh	equ	0xFF7
  9676                           tblptrl	equ	0xFF6
  9677                           tablat	equ	0xFF5
  9678                           prodh	equ	0xFF4
  9679                           prodl	equ	0xFF3
  9680                           intcon	equ	0xFF2
  9681                           intcon3	equ	0xFF0
  9682                           postinc0	equ	0xFEE
  9683                           fsr0h	equ	0xFEA
  9684                           fsr0l	equ	0xFE9
  9685                           wreg	equ	0xFE8
  9686                           fsr1h	equ	0xFE2
  9687                           fsr1l	equ	0xFE1
  9688                           indf2	equ	0xFDF
  9689                           postinc2	equ	0xFDE
  9690                           postdec2	equ	0xFDD
  9691                           fsr2h	equ	0xFDA
  9692                           fsr2l	equ	0xFD9
  9693                           status	equ	0xFD8
  9694                           
  9695 ;; *************** function i2_initLCD *****************
  9696 ;; Defined at:
  9697 ;;		line 22 in file "lcd.c"
  9698 ;; Parameters:    Size  Location     Type
  9699 ;;		None
  9700 ;; Auto vars:     Size  Location     Type
  9701 ;;		None
  9702 ;; Return value:  Size  Location     Type
  9703 ;;                  1    wreg      void 
  9704 ;; Registers used:
  9705 ;;		wreg, status,2, status,0, cstack
  9706 ;; Tracked objects:
  9707 ;;		On entry : 0/0
  9708 ;;		On exit  : 0/0
  9709 ;;		Unchanged: 0/0
  9710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9713 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9714 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9715 ;;Total ram usage:        1 bytes
  9716 ;; Hardware stack levels used:    1
  9717 ;; Hardware stack levels required when called:    2
  9718 ;; This function calls:
  9719 ;;		i2_lcdInst
  9720 ;; This function is called by:
  9721 ;;		_keypressed
  9722 ;;		_tot_sorted
  9723 ;;		_op_time
  9724 ;;		_tin_results
  9725 ;;		_pop_results
  9726 ;; This function uses a non-reentrant model
  9727 ;;
  9728                           
  9729                           	psect	text63
  9730  001884                     __ptext63:
  9731                           	opt stack 0
  9732  001884                     i2_initLCD:
  9733                           	opt stack 22
  9734                           
  9735                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  9736                           
  9737                           ;incstack = 0
  9738  001884  0E31               	movlw	49
  9739  001886  6E04               	movwf	??i2_initLCD& (0+255),c
  9740  001888  0EB2               	movlw	178
  9741  00188A                     i2u448_47:
  9742  00188A  2EE8               	decfsz	wreg,f,c
  9743  00188C  D7FE               	bra	i2u448_47
  9744  00188E  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  9745  001890  D7FC               	bra	i2u448_47
  9746  001892  D000               	nop2	
  9747                           
  9748                           ;lcd.c: 24: lcdInst(0b00110011);
  9749  001894  0E33               	movlw	51
  9750  001896  ECCD  F00E         	call	i2_lcdInst
  9751                           
  9752                           ;lcd.c: 25: lcdInst(0b00110010);
  9753  00189A  0E32               	movlw	50
  9754  00189C  ECCD  F00E         	call	i2_lcdInst
  9755                           
  9756                           ;lcd.c: 26: lcdInst(0b00101000);
  9757  0018A0  0E28               	movlw	40
  9758  0018A2  ECCD  F00E         	call	i2_lcdInst
  9759                           
  9760                           ;lcd.c: 27: lcdInst(0b00001111);
  9761  0018A6  0E0F               	movlw	15
  9762  0018A8  ECCD  F00E         	call	i2_lcdInst
  9763                           
  9764                           ;lcd.c: 28: lcdInst(0b00000110);
  9765  0018AC  0E06               	movlw	6
  9766  0018AE  ECCD  F00E         	call	i2_lcdInst
  9767                           
  9768                           ;lcd.c: 29: lcdInst(0b00000001);
  9769  0018B2  0E01               	movlw	1
  9770  0018B4  ECCD  F00E         	call	i2_lcdInst
  9771                           
  9772                           ;lcd.c: 30: _delay((unsigned long)((15)*(10000000/4000.0)));
  9773  0018B8  0E31               	movlw	49
  9774  0018BA  6E04               	movwf	??i2_initLCD& (0+255),c
  9775  0018BC  0EB2               	movlw	178
  9776  0018BE                     i2u449_47:
  9777  0018BE  2EE8               	decfsz	wreg,f,c
  9778  0018C0  D7FE               	bra	i2u449_47
  9779  0018C2  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  9780  0018C4  D7FC               	bra	i2u449_47
  9781  0018C6  D000               	nop2	
  9782  0018C8  0012               	return		;funcret
  9783  0018CA                     __end_ofi2_initLCD:
  9784                           	opt stack 0
  9785                           tosu	equ	0xFFF
  9786                           tosh	equ	0xFFE
  9787                           tosl	equ	0xFFD
  9788                           pclatu	equ	0xFFB
  9789                           pclath	equ	0xFFA
  9790                           tblptru	equ	0xFF8
  9791                           tblptrh	equ	0xFF7
  9792                           tblptrl	equ	0xFF6
  9793                           tablat	equ	0xFF5
  9794                           prodh	equ	0xFF4
  9795                           prodl	equ	0xFF3
  9796                           intcon	equ	0xFF2
  9797                           intcon3	equ	0xFF0
  9798                           postinc0	equ	0xFEE
  9799                           fsr0h	equ	0xFEA
  9800                           fsr0l	equ	0xFE9
  9801                           wreg	equ	0xFE8
  9802                           fsr1h	equ	0xFE2
  9803                           fsr1l	equ	0xFE1
  9804                           indf2	equ	0xFDF
  9805                           postinc2	equ	0xFDE
  9806                           postdec2	equ	0xFDD
  9807                           fsr2h	equ	0xFDA
  9808                           fsr2l	equ	0xFD9
  9809                           status	equ	0xFD8
  9810                           
  9811 ;; *************** function i2_lcdInst *****************
  9812 ;; Defined at:
  9813 ;;		line 33 in file "lcd.c"
  9814 ;; Parameters:    Size  Location     Type
  9815 ;;  data            1    wreg     unsigned char 
  9816 ;; Auto vars:     Size  Location     Type
  9817 ;;  data            1    2[COMRAM] unsigned char 
  9818 ;; Return value:  Size  Location     Type
  9819 ;;                  1    wreg      void 
  9820 ;; Registers used:
  9821 ;;		wreg, status,2, status,0, cstack
  9822 ;; Tracked objects:
  9823 ;;		On entry : 0/0
  9824 ;;		On exit  : 0/0
  9825 ;;		Unchanged: 0/0
  9826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9828 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9830 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9831 ;;Total ram usage:        1 bytes
  9832 ;; Hardware stack levels used:    1
  9833 ;; Hardware stack levels required when called:    1
  9834 ;; This function calls:
  9835 ;;		i2_lcdNibble
  9836 ;; This function is called by:
  9837 ;;		_keypressed
  9838 ;;		_tot_sorted
  9839 ;;		_op_time
  9840 ;;		_tin_results
  9841 ;;		_pop_results
  9842 ;;		i2_initLCD
  9843 ;; This function uses a non-reentrant model
  9844 ;;
  9845                           
  9846                           	psect	text64
  9847  001D9A                     __ptext64:
  9848                           	opt stack 0
  9849  001D9A                     i2_lcdInst:
  9850                           	opt stack 23
  9851                           
  9852                           ;incstack = 0
  9853                           ;i2lcdInst@data stored from wreg
  9854  001D9A  6E03               	movwf	i2lcdInst@data,c
  9855                           
  9856                           ;lcd.c: 34: LATDbits.LATD2 = 0;
  9857  001D9C  948C               	bcf	3980,2,c	;volatile
  9858                           
  9859                           ;lcd.c: 35: lcdNibble(data);
  9860  001D9E  5003               	movf	i2lcdInst@data,w,c
  9861  001DA0  EC79  F00B         	call	i2_lcdNibble
  9862  001DA4  0012               	return		;funcret
  9863  001DA6                     __end_ofi2_lcdInst:
  9864                           	opt stack 0
  9865                           tosu	equ	0xFFF
  9866                           tosh	equ	0xFFE
  9867                           tosl	equ	0xFFD
  9868                           pclatu	equ	0xFFB
  9869                           pclath	equ	0xFFA
  9870                           tblptru	equ	0xFF8
  9871                           tblptrh	equ	0xFF7
  9872                           tblptrl	equ	0xFF6
  9873                           tablat	equ	0xFF5
  9874                           prodh	equ	0xFF4
  9875                           prodl	equ	0xFF3
  9876                           intcon	equ	0xFF2
  9877                           intcon3	equ	0xFF0
  9878                           postinc0	equ	0xFEE
  9879                           fsr0h	equ	0xFEA
  9880                           fsr0l	equ	0xFE9
  9881                           wreg	equ	0xFE8
  9882                           fsr1h	equ	0xFE2
  9883                           fsr1l	equ	0xFE1
  9884                           indf2	equ	0xFDF
  9885                           postinc2	equ	0xFDE
  9886                           postdec2	equ	0xFDD
  9887                           fsr2h	equ	0xFDA
  9888                           fsr2l	equ	0xFD9
  9889                           status	equ	0xFD8
  9890                           
  9891 ;; *************** function i2_lcdNibble *****************
  9892 ;; Defined at:
  9893 ;;		line 43 in file "lcd.c"
  9894 ;; Parameters:    Size  Location     Type
  9895 ;;  data            1    wreg     unsigned char 
  9896 ;; Auto vars:     Size  Location     Type
  9897 ;;  data            1    1[COMRAM] unsigned char 
  9898 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  9899 ;; Return value:  Size  Location     Type
  9900 ;;                  1    wreg      void 
  9901 ;; Registers used:
  9902 ;;		wreg, status,2, status,0
  9903 ;; Tracked objects:
  9904 ;;		On entry : 0/0
  9905 ;;		On exit  : 0/0
  9906 ;;		Unchanged: 0/0
  9907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9909 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9911 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9912 ;;Total ram usage:        2 bytes
  9913 ;; Hardware stack levels used:    1
  9914 ;; This function calls:
  9915 ;;		Nothing
  9916 ;; This function is called by:
  9917 ;;		i2_lcdInst
  9918 ;;		i2_putch
  9919 ;; This function uses a non-reentrant model
  9920 ;;
  9921                           
  9922                           	psect	text65
  9923  0016F2                     __ptext65:
  9924                           	opt stack 0
  9925  0016F2                     i2_lcdNibble:
  9926                           	opt stack 22
  9927                           
  9928                           ;incstack = 0
  9929                           ;i2lcdNibble@data stored from wreg
  9930  0016F2  6E02               	movwf	i2lcdNibble@data,c
  9931                           
  9932                           ;lcd.c: 45: char temp = data & 0xF0;
  9933  0016F4  5002               	movf	i2lcdNibble@data,w,c
  9934  0016F6  0BF0               	andlw	240
  9935  0016F8  6E01               	movwf	i2lcdNibble@temp,c
  9936                           
  9937                           ;lcd.c: 46: LATD = LATD & 0x0F;
  9938  0016FA  508C               	movf	3980,w,c	;volatile
  9939  0016FC  0B0F               	andlw	15
  9940  0016FE  6E8C               	movwf	3980,c	;volatile
  9941                           
  9942                           ;lcd.c: 47: LATD = temp | LATD;
  9943  001700  5001               	movf	i2lcdNibble@temp,w,c
  9944  001702  108C               	iorwf	3980,w,c	;volatile
  9945  001704  6E8C               	movwf	3980,c	;volatile
  9946                           
  9947                           ;lcd.c: 49: LATDbits.LATD3 = 0;
  9948  001706  968C               	bcf	3980,3,c	;volatile
  9949                           
  9950                           ;lcd.c: 50: _delay((unsigned long)((25)*(10000000/4000000.0)));
  9951  001708  0E14               	movlw	20
  9952  00170A                     i2u450_47:
  9953  00170A  2EE8               	decfsz	wreg,f,c
  9954  00170C  D7FE               	bra	i2u450_47
  9955  00170E  D000               	nop2	
  9956                           
  9957                           ;lcd.c: 51: LATDbits.LATD3 = 1;
  9958  001710  868C               	bsf	3980,3,c	;volatile
  9959                           
  9960                           ;lcd.c: 52: _delay((unsigned long)((25)*(10000000/4000000.0)));
  9961  001712  0E14               	movlw	20
  9962  001714                     i2u451_47:
  9963  001714  2EE8               	decfsz	wreg,f,c
  9964  001716  D7FE               	bra	i2u451_47
  9965  001718  D000               	nop2	
  9966                           
  9967                           ;lcd.c: 54: data = data << 4;
  9968  00171A  3802               	swapf	i2lcdNibble@data,w,c
  9969  00171C  0BF0               	andlw	240
  9970  00171E  6E02               	movwf	i2lcdNibble@data,c
  9971                           
  9972                           ;lcd.c: 56: temp = data & 0xF0;
  9973  001720  5002               	movf	i2lcdNibble@data,w,c
  9974  001722  0BF0               	andlw	240
  9975  001724  6E01               	movwf	i2lcdNibble@temp,c
  9976                           
  9977                           ;lcd.c: 57: LATD = LATD & 0x0F;
  9978  001726  508C               	movf	3980,w,c	;volatile
  9979  001728  0B0F               	andlw	15
  9980  00172A  6E8C               	movwf	3980,c	;volatile
  9981                           
  9982                           ;lcd.c: 58: LATD = temp | LATD;
  9983  00172C  5001               	movf	i2lcdNibble@temp,w,c
  9984  00172E  108C               	iorwf	3980,w,c	;volatile
  9985  001730  6E8C               	movwf	3980,c	;volatile
  9986                           
  9987                           ;lcd.c: 60: LATDbits.LATD3 = 0;
  9988  001732  968C               	bcf	3980,3,c	;volatile
  9989                           
  9990                           ;lcd.c: 61: _delay((unsigned long)((25)*(10000000/4000000.0)));
  9991  001734  0E14               	movlw	20
  9992  001736                     i2u452_47:
  9993  001736  2EE8               	decfsz	wreg,f,c
  9994  001738  D7FE               	bra	i2u452_47
  9995  00173A  D000               	nop2	
  9996                           
  9997                           ;lcd.c: 62: LATDbits.LATD3 = 1;
  9998  00173C  868C               	bsf	3980,3,c	;volatile
  9999                           
 10000                           ;lcd.c: 63: _delay((unsigned long)((25)*(10000000/4000000.0)));
 10001  00173E  0E14               	movlw	20
 10002  001740                     i2u453_47:
 10003  001740  2EE8               	decfsz	wreg,f,c
 10004  001742  D7FE               	bra	i2u453_47
 10005  001744  D000               	nop2	
 10006  001746  0012               	return		;funcret
 10007  001748                     __end_ofi2_lcdNibble:
 10008                           	opt stack 0
 10009                           tosu	equ	0xFFF
 10010                           tosh	equ	0xFFE
 10011                           tosl	equ	0xFFD
 10012                           pclatu	equ	0xFFB
 10013                           pclath	equ	0xFFA
 10014                           tblptru	equ	0xFF8
 10015                           tblptrh	equ	0xFF7
 10016                           tblptrl	equ	0xFF6
 10017                           tablat	equ	0xFF5
 10018                           prodh	equ	0xFF4
 10019                           prodl	equ	0xFF3
 10020                           intcon	equ	0xFF2
 10021                           intcon3	equ	0xFF0
 10022                           postinc0	equ	0xFEE
 10023                           fsr0h	equ	0xFEA
 10024                           fsr0l	equ	0xFE9
 10025                           wreg	equ	0xFE8
 10026                           fsr1h	equ	0xFE2
 10027                           fsr1l	equ	0xFE1
 10028                           indf2	equ	0xFDF
 10029                           postinc2	equ	0xFDE
 10030                           postdec2	equ	0xFDD
 10031                           fsr2h	equ	0xFDA
 10032                           fsr2l	equ	0xFD9
 10033                           status	equ	0xFD8
 10034                           
 10035 ;; *************** function i2___awdiv *****************
 10036 ;; Defined at:
 10037 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awdiv.c"
 10038 ;; Parameters:    Size  Location     Type
 10039 ;;  dividend        2    0[COMRAM] int 
 10040 ;;  divisor         2    2[COMRAM] int 
 10041 ;; Auto vars:     Size  Location     Type
 10042 ;;  __awdiv         2    6[COMRAM] int 
 10043 ;;  __awdiv         1    5[COMRAM] unsigned char 
 10044 ;;  __awdiv         1    4[COMRAM] unsigned char 
 10045 ;; Return value:  Size  Location     Type
 10046 ;;                  2    0[COMRAM] int 
 10047 ;; Registers used:
 10048 ;;		wreg, status,2, status,0
 10049 ;; Tracked objects:
 10050 ;;		On entry : 0/0
 10051 ;;		On exit  : 0/0
 10052 ;;		Unchanged: 0/0
 10053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10054 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10055 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10057 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10058 ;;Total ram usage:        8 bytes
 10059 ;; Hardware stack levels used:    1
 10060 ;; This function calls:
 10061 ;;		Nothing
 10062 ;; This function is called by:
 10063 ;;		_op_time
 10064 ;; This function uses a non-reentrant model
 10065 ;;
 10066                           
 10067                           	psect	text66
 10068  001248                     __ptext66:
 10069                           	opt stack 0
 10070  001248                     i2___awdiv:
 10071                           	opt stack 23
 10072                           
 10073                           ;incstack = 0
 10074  001248  0E00               	movlw	0
 10075  00124A  6E06               	movwf	i2___awdiv@sign,c
 10076  00124C  AE04               	btfss	i2___awdiv@divisor+1,7,c
 10077  00124E  D006               	goto	i2l3545
 10078  001250  6C03               	negf	i2___awdiv@divisor,c
 10079  001252  1E04               	comf	i2___awdiv@divisor+1,f,c
 10080  001254  B0D8               	btfsc	status,0,c
 10081  001256  2A04               	incf	i2___awdiv@divisor+1,f,c
 10082  001258  0E01               	movlw	1
 10083  00125A  6E06               	movwf	i2___awdiv@sign,c
 10084  00125C                     i2l3545:
 10085  00125C  AE02               	btfss	i2___awdiv@dividend+1,7,c
 10086  00125E  D006               	goto	i2l3551
 10087  001260  6C01               	negf	i2___awdiv@dividend,c
 10088  001262  1E02               	comf	i2___awdiv@dividend+1,f,c
 10089  001264  B0D8               	btfsc	status,0,c
 10090  001266  2A02               	incf	i2___awdiv@dividend+1,f,c
 10091  001268  0E01               	movlw	1
 10092  00126A  1A06               	xorwf	i2___awdiv@sign,f,c
 10093  00126C                     i2l3551:
 10094  00126C  0E00               	movlw	0
 10095  00126E  6E08               	movwf	i2___awdiv@quotient+1,c
 10096  001270  0E00               	movlw	0
 10097  001272  6E07               	movwf	i2___awdiv@quotient,c
 10098  001274  5003               	movf	i2___awdiv@divisor,w,c
 10099  001276  1004               	iorwf	i2___awdiv@divisor+1,w,c
 10100  001278  B4D8               	btfsc	status,2,c
 10101  00127A  D01C               	goto	i2l3573
 10102  00127C  0E01               	movlw	1
 10103  00127E  6E05               	movwf	i2___awdiv@counter,c
 10104  001280  D004               	goto	i2l3559
 10105  001282                     i2l3557:
 10106  001282  90D8               	bcf	status,0,c
 10107  001284  3603               	rlcf	i2___awdiv@divisor,f,c
 10108  001286  3604               	rlcf	i2___awdiv@divisor+1,f,c
 10109  001288  2A05               	incf	i2___awdiv@counter,f,c
 10110  00128A                     i2l3559:
 10111  00128A  AE04               	btfss	i2___awdiv@divisor+1,7,c
 10112  00128C  D7FA               	goto	i2l3557
 10113  00128E                     i2l3561:
 10114  00128E  90D8               	bcf	status,0,c
 10115  001290  3607               	rlcf	i2___awdiv@quotient,f,c
 10116  001292  3608               	rlcf	i2___awdiv@quotient+1,f,c
 10117  001294  5003               	movf	i2___awdiv@divisor,w,c
 10118  001296  5C01               	subwf	i2___awdiv@dividend,w,c
 10119  001298  5004               	movf	i2___awdiv@divisor+1,w,c
 10120  00129A  5802               	subwfb	i2___awdiv@dividend+1,w,c
 10121  00129C  A0D8               	btfss	status,0,c
 10122  00129E  D005               	goto	i2l3569
 10123  0012A0  5003               	movf	i2___awdiv@divisor,w,c
 10124  0012A2  5E01               	subwf	i2___awdiv@dividend,f,c
 10125  0012A4  5004               	movf	i2___awdiv@divisor+1,w,c
 10126  0012A6  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 10127  0012A8  8007               	bsf	i2___awdiv@quotient,0,c
 10128  0012AA                     i2l3569:
 10129  0012AA  90D8               	bcf	status,0,c
 10130  0012AC  3204               	rrcf	i2___awdiv@divisor+1,f,c
 10131  0012AE  3203               	rrcf	i2___awdiv@divisor,f,c
 10132  0012B0  2E05               	decfsz	i2___awdiv@counter,f,c
 10133  0012B2  D7ED               	goto	i2l3561
 10134  0012B4                     i2l3573:
 10135  0012B4  5006               	movf	i2___awdiv@sign,w,c
 10136  0012B6  B4D8               	btfsc	status,2,c
 10137  0012B8  D004               	goto	i2l3577
 10138  0012BA  6C07               	negf	i2___awdiv@quotient,c
 10139  0012BC  1E08               	comf	i2___awdiv@quotient+1,f,c
 10140  0012BE  B0D8               	btfsc	status,0,c
 10141  0012C0  2A08               	incf	i2___awdiv@quotient+1,f,c
 10142  0012C2                     i2l3577:
 10143  0012C2  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 10144  0012C6  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 10145  0012CA  0012               	return	
 10146  0012CC                     __end_ofi2___awdiv:
 10147                           	opt stack 0
 10148                           tosu	equ	0xFFF
 10149                           tosh	equ	0xFFE
 10150                           tosl	equ	0xFFD
 10151                           pclatu	equ	0xFFB
 10152                           pclath	equ	0xFFA
 10153                           tblptru	equ	0xFF8
 10154                           tblptrh	equ	0xFF7
 10155                           tblptrl	equ	0xFF6
 10156                           tablat	equ	0xFF5
 10157                           prodh	equ	0xFF4
 10158                           prodl	equ	0xFF3
 10159                           intcon	equ	0xFF2
 10160                           intcon3	equ	0xFF0
 10161                           postinc0	equ	0xFEE
 10162                           fsr0h	equ	0xFEA
 10163                           fsr0l	equ	0xFE9
 10164                           wreg	equ	0xFE8
 10165                           fsr1h	equ	0xFE2
 10166                           fsr1l	equ	0xFE1
 10167                           indf2	equ	0xFDF
 10168                           postinc2	equ	0xFDE
 10169                           postdec2	equ	0xFDD
 10170                           fsr2h	equ	0xFDA
 10171                           fsr2l	equ	0xFD9
 10172                           status	equ	0xFD8
 10173                           
 10174 ;; *************** function ___awmod *****************
 10175 ;; Defined at:
 10176 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awmod.c"
 10177 ;; Parameters:    Size  Location     Type
 10178 ;;  dividend        2    0[COMRAM] int 
 10179 ;;  divisor         2    2[COMRAM] int 
 10180 ;; Auto vars:     Size  Location     Type
 10181 ;;  sign            1    5[COMRAM] unsigned char 
 10182 ;;  counter         1    4[COMRAM] unsigned char 
 10183 ;; Return value:  Size  Location     Type
 10184 ;;                  2    0[COMRAM] int 
 10185 ;; Registers used:
 10186 ;;		wreg, status,2, status,0
 10187 ;; Tracked objects:
 10188 ;;		On entry : 0/0
 10189 ;;		On exit  : 0/0
 10190 ;;		Unchanged: 0/0
 10191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10192 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10193 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10195 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10196 ;;Total ram usage:        6 bytes
 10197 ;; Hardware stack levels used:    1
 10198 ;; This function calls:
 10199 ;;		Nothing
 10200 ;; This function is called by:
 10201 ;;		_op_time
 10202 ;; This function uses a non-reentrant model
 10203 ;;
 10204                           
 10205                           	psect	text67
 10206  001424                     __ptext67:
 10207                           	opt stack 0
 10208  001424                     ___awmod:
 10209                           	opt stack 23
 10210                           
 10211                           ;incstack = 0
 10212  001424  0E00               	movlw	0
 10213  001426  6E06               	movwf	___awmod@sign,c
 10214  001428  AE02               	btfss	___awmod@dividend+1,7,c
 10215  00142A  D006               	goto	i2l3343
 10216  00142C  6C01               	negf	___awmod@dividend,c
 10217  00142E  1E02               	comf	___awmod@dividend+1,f,c
 10218  001430  B0D8               	btfsc	status,0,c
 10219  001432  2A02               	incf	___awmod@dividend+1,f,c
 10220  001434  0E01               	movlw	1
 10221  001436  6E06               	movwf	___awmod@sign,c
 10222  001438                     i2l3343:
 10223  001438  AE04               	btfss	___awmod@divisor+1,7,c
 10224  00143A  D004               	goto	i2l3347
 10225  00143C  6C03               	negf	___awmod@divisor,c
 10226  00143E  1E04               	comf	___awmod@divisor+1,f,c
 10227  001440  B0D8               	btfsc	status,0,c
 10228  001442  2A04               	incf	___awmod@divisor+1,f,c
 10229  001444                     i2l3347:
 10230  001444  5003               	movf	___awmod@divisor,w,c
 10231  001446  1004               	iorwf	___awmod@divisor+1,w,c
 10232  001448  B4D8               	btfsc	status,2,c
 10233  00144A  D018               	goto	i2l3363
 10234  00144C  0E01               	movlw	1
 10235  00144E  6E05               	movwf	___awmod@counter,c
 10236  001450  D004               	goto	i2l3353
 10237  001452                     i2l3351:
 10238  001452  90D8               	bcf	status,0,c
 10239  001454  3603               	rlcf	___awmod@divisor,f,c
 10240  001456  3604               	rlcf	___awmod@divisor+1,f,c
 10241  001458  2A05               	incf	___awmod@counter,f,c
 10242  00145A                     i2l3353:
 10243  00145A  AE04               	btfss	___awmod@divisor+1,7,c
 10244  00145C  D7FA               	goto	i2l3351
 10245  00145E                     i2l3355:
 10246  00145E  5003               	movf	___awmod@divisor,w,c
 10247  001460  5C01               	subwf	___awmod@dividend,w,c
 10248  001462  5004               	movf	___awmod@divisor+1,w,c
 10249  001464  5802               	subwfb	___awmod@dividend+1,w,c
 10250  001466  A0D8               	btfss	status,0,c
 10251  001468  D004               	goto	i2l3359
 10252  00146A  5003               	movf	___awmod@divisor,w,c
 10253  00146C  5E01               	subwf	___awmod@dividend,f,c
 10254  00146E  5004               	movf	___awmod@divisor+1,w,c
 10255  001470  5A02               	subwfb	___awmod@dividend+1,f,c
 10256  001472                     i2l3359:
 10257  001472  90D8               	bcf	status,0,c
 10258  001474  3204               	rrcf	___awmod@divisor+1,f,c
 10259  001476  3203               	rrcf	___awmod@divisor,f,c
 10260  001478  2E05               	decfsz	___awmod@counter,f,c
 10261  00147A  D7F1               	goto	i2l3355
 10262  00147C                     i2l3363:
 10263  00147C  5006               	movf	___awmod@sign,w,c
 10264  00147E  B4D8               	btfsc	status,2,c
 10265  001480  D004               	goto	i2l3367
 10266  001482  6C01               	negf	___awmod@dividend,c
 10267  001484  1E02               	comf	___awmod@dividend+1,f,c
 10268  001486  B0D8               	btfsc	status,0,c
 10269  001488  2A02               	incf	___awmod@dividend+1,f,c
 10270  00148A                     i2l3367:
 10271  00148A  C001  F001         	movff	___awmod@dividend,?___awmod
 10272  00148E  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 10273  001492  0012               	return	
 10274  001494                     __end_of___awmod:
 10275                           	opt stack 0
 10276                           tosu	equ	0xFFF
 10277                           tosh	equ	0xFFE
 10278                           tosl	equ	0xFFD
 10279                           pclatu	equ	0xFFB
 10280                           pclath	equ	0xFFA
 10281                           tblptru	equ	0xFF8
 10282                           tblptrh	equ	0xFF7
 10283                           tblptrl	equ	0xFF6
 10284                           tablat	equ	0xFF5
 10285                           prodh	equ	0xFF4
 10286                           prodl	equ	0xFF3
 10287                           intcon	equ	0xFF2
 10288                           intcon3	equ	0xFF0
 10289                           postinc0	equ	0xFEE
 10290                           fsr0h	equ	0xFEA
 10291                           fsr0l	equ	0xFE9
 10292                           wreg	equ	0xFE8
 10293                           fsr1h	equ	0xFE2
 10294                           fsr1l	equ	0xFE1
 10295                           indf2	equ	0xFDF
 10296                           postinc2	equ	0xFDE
 10297                           postdec2	equ	0xFDD
 10298                           fsr2h	equ	0xFDA
 10299                           fsr2l	equ	0xFD9
 10300                           status	equ	0xFD8
 10301                           tosu	equ	0xFFF
 10302                           tosh	equ	0xFFE
 10303                           tosl	equ	0xFFD
 10304                           pclatu	equ	0xFFB
 10305                           pclath	equ	0xFFA
 10306                           tblptru	equ	0xFF8
 10307                           tblptrh	equ	0xFF7
 10308                           tblptrl	equ	0xFF6
 10309                           tablat	equ	0xFF5
 10310                           prodh	equ	0xFF4
 10311                           prodl	equ	0xFF3
 10312                           intcon	equ	0xFF2
 10313                           intcon3	equ	0xFF0
 10314                           postinc0	equ	0xFEE
 10315                           fsr0h	equ	0xFEA
 10316                           fsr0l	equ	0xFE9
 10317                           wreg	equ	0xFE8
 10318                           fsr1h	equ	0xFE2
 10319                           fsr1l	equ	0xFE1
 10320                           indf2	equ	0xFDF
 10321                           postinc2	equ	0xFDE
 10322                           postdec2	equ	0xFDD
 10323                           fsr2h	equ	0xFDA
 10324                           fsr2l	equ	0xFD9
 10325                           status	equ	0xFD8
 10326                           
 10327                           	psect	text68
 10328  000000                     __ptext68:
 10329                           	opt stack 0
 10330                           tosu	equ	0xFFF
 10331                           tosh	equ	0xFFE
 10332                           tosl	equ	0xFFD
 10333                           pclatu	equ	0xFFB
 10334                           pclath	equ	0xFFA
 10335                           tblptru	equ	0xFF8
 10336                           tblptrh	equ	0xFF7
 10337                           tblptrl	equ	0xFF6
 10338                           tablat	equ	0xFF5
 10339                           prodh	equ	0xFF4
 10340                           prodl	equ	0xFF3
 10341                           intcon	equ	0xFF2
 10342                           intcon3	equ	0xFF0
 10343                           postinc0	equ	0xFEE
 10344                           fsr0h	equ	0xFEA
 10345                           fsr0l	equ	0xFE9
 10346                           wreg	equ	0xFE8
 10347                           fsr1h	equ	0xFE2
 10348                           fsr1l	equ	0xFE1
 10349                           indf2	equ	0xFDF
 10350                           postinc2	equ	0xFDE
 10351                           postdec2	equ	0xFDD
 10352                           fsr2h	equ	0xFDA
 10353                           fsr2l	equ	0xFD9
 10354                           status	equ	0xFD8
 10355                           
 10356                           	psect	rparam
 10357  0000                     tosu	equ	0xFFF
 10358                           tosh	equ	0xFFE
 10359                           tosl	equ	0xFFD
 10360                           pclatu	equ	0xFFB
 10361                           pclath	equ	0xFFA
 10362                           tblptru	equ	0xFF8
 10363                           tblptrh	equ	0xFF7
 10364                           tblptrl	equ	0xFF6
 10365                           tablat	equ	0xFF5
 10366                           prodh	equ	0xFF4
 10367                           prodl	equ	0xFF3
 10368                           intcon	equ	0xFF2
 10369                           intcon3	equ	0xFF0
 10370                           postinc0	equ	0xFEE
 10371                           fsr0h	equ	0xFEA
 10372                           fsr0l	equ	0xFE9
 10373                           wreg	equ	0xFE8
 10374                           fsr1h	equ	0xFE2
 10375                           fsr1l	equ	0xFE1
 10376                           indf2	equ	0xFDF
 10377                           postinc2	equ	0xFDE
 10378                           postdec2	equ	0xFDD
 10379                           fsr2h	equ	0xFDA
 10380                           fsr2l	equ	0xFD9
 10381                           status	equ	0xFD8
 10382                           
 10383                           	psect	temp
 10384  00004D                     btemp:
 10385                           	opt stack 0
 10386  00004D                     	ds	1
 10387  0000                     int$flags	set	btemp
 10388                           tosu	equ	0xFFF
 10389                           tosh	equ	0xFFE
 10390                           tosl	equ	0xFFD
 10391                           pclatu	equ	0xFFB
 10392                           pclath	equ	0xFFA
 10393                           tblptru	equ	0xFF8
 10394                           tblptrh	equ	0xFF7
 10395                           tblptrl	equ	0xFF6
 10396                           tablat	equ	0xFF5
 10397                           prodh	equ	0xFF4
 10398                           prodl	equ	0xFF3
 10399                           intcon	equ	0xFF2
 10400                           intcon3	equ	0xFF0
 10401                           postinc0	equ	0xFEE
 10402                           fsr0h	equ	0xFEA
 10403                           fsr0l	equ	0xFE9
 10404                           wreg	equ	0xFE8
 10405                           fsr1h	equ	0xFE2
 10406                           fsr1l	equ	0xFE1
 10407                           indf2	equ	0xFDF
 10408                           postinc2	equ	0xFDE
 10409                           postdec2	equ	0xFDD
 10410                           fsr2h	equ	0xFDA
 10411                           fsr2l	equ	0xFD9
 10412                           status	equ	0xFD8


Data Sizes:
    Strings     236
    Constant    42
    Data        0
    BSS         53
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     62      76
    BANK0           128     43      82
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_15(CODE[13]), STR_14(CODE[15]), STR_13(CODE[15]), STR_12(CODE[17]), 
		 -> STR_11(CODE[22]), STR_10(CODE[19]), STR_9(CODE[17]), STR_8(CODE[17]), 
		 -> STR_7(CODE[17]), STR_6(CODE[13]), STR_5(CODE[9]), STR_4(CODE[17]), 
		 -> STR_3(CODE[15]), STR_2(CODE[13]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    topDistributionState	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), top_distribution_move(), top_distribution_prepare(), top_distribution_idle(), 

    topRockerState	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), top_rocker_restore(), top_rocker_release(), solenoids_back(), 
		 -> solenoids_out(), top_rocker_idle(), 

    bottomRockerState	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), bottom_rocker_restore(), bottom_rocker_release(), bottom_rocker_idle(), 

    bottomDistributionState	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), bottom_distribution_move(), bottom_distribution_prepare(), bottom_distribution_idle(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _keypressed in COMRAM

    _keypressed->i2_printf
    _tot_sorted->i2_printf
    _tin_results->i2_printf
    _pop_results->i2_printf
    _op_time->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _main->_results
    _startSorting->_initialization
    _top_rocker_restore->_top_rocker_motor_cw
    _top_rocker_release->_top_rocker_motor_ccw
    _top_rocker_idle->_initLCD
    _top_distribution_prepare->_top_distribution_motor_ccw
    _top_distribution_prepare->_top_distribution_motor_cw
    _top_distribution_move->_top_distribution_motor_ccw
    _top_distribution_move->_top_distribution_motor_cw
    _solenoids_out->_pop_out
    _solenoids_back->_go_back
    _initialization->_printf
    _bottom_rocker_restore->_bottom_rocker_motor_cw
    _bottom_rocker_release->_bottom_rocker_motor_ccw
    _bottom_distribution_prepare->_bottom_distribution_motor_ccw
    _bottom_distribution_prepare->_bottom_distribution_motor_cw
    _bottom_distribution_move->_bottom_distribution_motor_ccw
    _bottom_distribution_move->_bottom_distribution_motor_cw
    _standby->_printf
    _set_time->_I2C_Master_Write
    _results->_printf
    _printf->___wmul
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _done_sorting->___wmul
    ___wmul->___awdiv
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   28259
                    _I2C_Master_Init
                       _done_sorting
                            _initLCD
                            _results
                           _set_time
                            _standby
                       _startSorting
 ---------------------------------------------------------------------------------
 (1) _startSorting                                         3     3      0   11059
                                             39 BANK0      3     3      0
                   Absolute function *
           _bottom_distribution_idle *
           _bottom_distribution_move *
        _bottom_distribution_prepare *
                 _bottom_rocker_idle *
              _bottom_rocker_release *
              _bottom_rocker_restore *
                            _initLCD
                     _initialization
                            _lcdInst
                             _printf
                     _solenoids_back *
                      _solenoids_out *
              _top_distribution_idle *
              _top_distribution_move *
           _top_distribution_prepare *
                    _top_rocker_idle *
                 _top_rocker_release *
                 _top_rocker_restore *
 ---------------------------------------------------------------------------------
 (2) _top_rocker_restore                                   0     0      0       0
                _top_rocker_motor_cw
 ---------------------------------------------------------------------------------
 (3) _top_rocker_motor_cw                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _top_rocker_release                                   0     0      0      68
               _top_rocker_motor_ccw
 ---------------------------------------------------------------------------------
 (3) _top_rocker_motor_ccw                                 4     4      0      68
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _top_rocker_idle                                      0     0      0     195
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _top_distribution_prepare                             0     0      0       0
         _top_distribution_motor_ccw
          _top_distribution_motor_cw
 ---------------------------------------------------------------------------------
 (2) _top_distribution_move                                0     0      0       0
         _top_distribution_motor_ccw
          _top_distribution_motor_cw
 ---------------------------------------------------------------------------------
 (3) _top_distribution_motor_cw                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _top_distribution_motor_ccw                           2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _top_distribution_idle                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _solenoids_out                                        0     0      0       0
                            _pop_out
 ---------------------------------------------------------------------------------
 (3) _pop_out                                              2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _solenoids_back                                       1     1      0       0
                                              2 BANK0      1     1      0
                            _go_back
 ---------------------------------------------------------------------------------
 (3) _go_back                                              2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _initialization                                       3     3      0    5364
                                             36 BANK0      3     3      0
        _bottom_distribution_initial
              _bottom_rocker_initial
                            _initLCD
                            _lcdInst
                             _printf
           _top_distribution_initial
                 _top_rocker_initial
 ---------------------------------------------------------------------------------
 (3) _top_rocker_initial                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _top_distribution_initial                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _bottom_rocker_initial                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _bottom_distribution_initial                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _bottom_rocker_restore                                0     0      0       0
             _bottom_rocker_motor_cw
 ---------------------------------------------------------------------------------
 (3) _bottom_rocker_motor_cw                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _bottom_rocker_release                                0     0      0      68
            _bottom_rocker_motor_ccw
 ---------------------------------------------------------------------------------
 (3) _bottom_rocker_motor_ccw                              4     4      0      68
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _bottom_rocker_idle                                   1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _bottom_distribution_prepare                          0     0      0       0
      _bottom_distribution_motor_ccw
       _bottom_distribution_motor_cw
 ---------------------------------------------------------------------------------
 (2) _bottom_distribution_move                             0     0      0       0
      _bottom_distribution_motor_ccw
       _bottom_distribution_motor_cw
 ---------------------------------------------------------------------------------
 (3) _bottom_distribution_motor_cw                         2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _bottom_distribution_motor_ccw                        2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _bottom_distribution_idle                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _standby                                              6     6      0    6320
                                             36 BANK0      6     6      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _set_time                                             1     1      0     823
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _results                                              7     7      0    5568
                                             36 BANK0      7     7      0
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    4906
                                             14 BANK0     22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _done_sorting                                        14    12      2    3791
                                             14 BANK0     12    10      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1316
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1145
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     724
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      65
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     503
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     395
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _keypressed                                          30    30      0   13152
                                             32 COMRAM    30    30      0
                            _op_time
                        _pop_results
                        _tin_results
                         _tot_sorted
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _tot_sorted                                           0     0      0    2338
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _tin_results                                          0     0      0    2338
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _pop_results                                          0     0      0    2338
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _op_time                                              0     0      0    3114
                            ___awmod
                          i2___awdiv
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) i2_printf                                            29    23      6    2068
                                             12 COMRAM    20    14      6
                            ___awmod (ARG)
                          i2___awdiv (ARG)
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (7) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) i2___awdiv                                            8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) ___awmod                                              6     2      4     424
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _done_sorting
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _initLCD
     _lcdInst
       _lcdNibble
   _results
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _set_time
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _standby
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _startSorting
     Absolute function(Fake) *
     _bottom_distribution_idle *
     _bottom_distribution_move *
       _bottom_distribution_motor_ccw
       _bottom_distribution_motor_cw
     _bottom_distribution_prepare *
       _bottom_distribution_motor_ccw
       _bottom_distribution_motor_cw
     _bottom_rocker_idle *
     _bottom_rocker_release *
       _bottom_rocker_motor_ccw
     _bottom_rocker_restore *
       _bottom_rocker_motor_cw
     _initLCD *
       _lcdInst
         _lcdNibble
     _initialization *
       _bottom_distribution_initial
       _bottom_rocker_initial
       _initLCD
         _lcdInst
           _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
           ___awdiv (ARG)
         _isdigit
         _putch
           _lcdNibble
       _top_distribution_initial
       _top_rocker_initial
     _lcdInst *
       _lcdNibble
     _printf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
     _solenoids_back *
       _go_back
     _solenoids_out *
       _pop_out
     _top_distribution_idle *
     _top_distribution_move *
       _top_distribution_motor_ccw
       _top_distribution_motor_cw
     _top_distribution_prepare *
       _top_distribution_motor_ccw
       _top_distribution_motor_cw
     _top_rocker_idle *
       _initLCD
         _lcdInst
           _lcdNibble
     _top_rocker_release *
       _top_rocker_motor_ccw
     _top_rocker_restore *
       _top_rocker_motor_cw

 _keypressed (ROOT)
   _op_time
     ___awmod
     i2___awdiv
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   _pop_results
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   _tin_results
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   _tot_sorted
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     ___awmod (ARG)
     i2___awdiv (ARG)
     i2___lwdiv (ARG)
     i2___lwmod (ARG)
       i2___lwdiv (ARG)
     i2___wmul (ARG)
     i2_isdigit (ARG)
     i2_putch (ARG)
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2B      52       5       64.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3E      4C       1       60.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9E      34        0.0%
DATA                 0      0      9E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Mar 17 15:58:51 2017

                          ___awdiv@sign 0085                     ___wmul@multiplicand 008A  
                    i2___lwdiv@dividend 0001                             __CFG_BORV$3 000000  
                         _solenoids_out 1CEE                            __CFG_CP0$OFF 000000  
                          __CFG_CP1$OFF 000000                            __CFG_CP2$OFF 000000  
                          __CFG_CP3$OFF 000000                             __CFG_OSC$HS 000000  
                                   l126 1CDA                                     l360 13AE  
                                   l454 0E18                                     l367 13D4  
                                   l359 1364                                     l368 141E  
                                   l457 0EFA                                     l493 0D64  
                                   l495 0DB0                                     l479 1552  
                                   l659 013A                            __CFG_CPB$OFF 000000  
                                   _PEN 007E2A                            __CFG_CPD$OFF 000000  
                                   _SEN 007E28                          _solenoids_back 179A  
                                   _tot 0043                           ?_done_sorting 008E  
                          ___awmod@sign 0006                    _topDistributionState 00CE  
                                   prod 000FF3                                     tosl 000FFD  
                                   wreg 000FE8                            __CFG_LVP$OFF 000000  
                           _total_start 00B6       __size_of_top_distribution_initial 000E  
                          __CFG_WDT$OFF 000000                                    l1104 133A  
                                  l1114 1688                                    l1051 11AE  
                                  l4101 1644                                    l4103 1650  
                                  l4105 1656                                    l4201 0084  
                                  l4109 167A                                    l4213 0106  
                                  l4231 0194                                    l4311 03D0  
                                  l4081 12EA                                    l4065 1A62  
                                  l4305 03AA                                    l4225 0172  
                                  l4209 0100                                    l4401 1C4E  
                                  l4083 12F6                                    l4307 03BC  
                                  l4243 01D0                                    l4403 1C52  
                                  l4411 14A0                                    l4093 132C  
                                  l4085 12FC                                    l4309 03C4  
                                  l4245 01D6                                    l4261 0224  
                                  l4229 018E               ?_top_distribution_initial 0001  
                                  l4271 027E                                    l4191 0046  
                                  l4423 14E8                                    l4273 0288  
                                  l4185 0020                                    l4513 17CA  
                                  l4603 10E6                                    l4291 02E4  
                                  l4267 0246                                    l4259 0212  
                                  l4195 0050                                    l4419 14DA  
                                  l4621 1148                                    l4461 1A0E  
                                  l4285 02BE                                    l4189 0034  
                                  l4517 17D8                                    l4607 10FA  
                                  l4287 02CA                                    l4295 02F8  
                                  l4279 02A2                                    l4391 1C6E  
                                  l4383 1A34                                    l4551 1BEE  
                                  l4543 19DA                                    l4711 0F9A  
                                  l4617 1132                                    l4297 02FE  
                                  l4393 1C72                                    l4481 1532  
                                  l4553 1BF2                                    l4561 1BCE  
                                  l4713 0FB2                                    l4705 0F68  
                                  l4619 1142                                    l4299 0350  
                                  l4811 0D0A                                    l4563 1BD2  
                                  l4731 101C                                    l4715 0FCA  
                                  l4629 119C                                    l4581 1078  
                                  l4821 0D3A                                    l4645 15F4  
                                  l4477 1528                                    l4493 1A7C  
                                  l4709 0F82                                    l4591 10A8  
                                  l4575 1062                                    l4815 0D14  
                                  l4655 162A                                    l4671 0E5E  
                                  l4735 1026                                    l4841 0D86  
                                  l4825 0D44                                    l4649 15FE  
                                  l4587 1096                                    l4755 0A4E  
                                  l4819 0D34                                    l4667 0E54  
                                  l4589 10A2                                    l4765 0A78  
                                  l4845 0D90                                    l4693 0F34  
                                  l4677 0E7E                                    l4599 10D8  
                                  l4759 0A58                                    l4695 0F3A  
                                  l4785 0C74                                    l4793 0CCE  
                                  l4787 0C88                                    l4699 0F44  
                                  l4877 1212                                    STR_1 FFDA  
                                  STR_2 FFCF                                    STR_3 FFC0  
                                  STR_4 FF80                                    STR_5 FFF6  
                                  STR_6 FFDC                                    STR_7 FF4D  
                                  STR_8 FF5E                                    STR_9 FF6F  
                          _startSorting 0F64                                    _LATA 000F89  
                                  _LATB 000F8A                                    _LATC 000F8B  
                                  _LATD 000F8C                                    _LATE 000F8D  
                                  u3320 141E                                    u4117 0FDA  
                                  u4207 1540                                    u4127 1034  
                                  u4217 1B18                                    u4137 1AA6  
                                  u4307 1842                                    u4227 13E6  
                                  u4147 1376                                    u4317 1878  
                                  u4237 1400                                    u4157 1390  
                                  u3710 17A6                                    u4327 1586  
                                  u4247 1B3E                                    u4167 1ACC  
                                  u3640 14B6                                    u4337 1590  
                                  u4257 1B64                                    u4177 1AF2  
                                  u4347 15BC                                    u4267 0F52  
                                  u4187 1C10                                    u3660 1A0C  
                                  u4357 15C6                                    u4277 0D22  
                                  u4197 1C30                                    u3590 13AE  
                                  u3718 17AA                                    u4287 0D52  
                                  u3648 14BA                                    u4297 0D9E  
                                  _RCEN 007E2B                                    u3855 16C2  
                                  u3980 0FFC                                    u3948 0F6E  
                                  u3958 0F86                                    u3968 0F9E  
                                  u3978 0FB6                                    _RSEN 007E29  
              __size_of_top_rocker_idle 0028       __size_of_top_distribution_prepare 0020  
             ?_top_distribution_prepare 0001                        ??_initialization 00A4  
                                  _fsm1 00BC                                    _fsm2 00C8  
                                  _main 11C0                                    _keys FEE9  
                                  _time 00AB                                    fsr0h 000FEA  
                                  fsr1h 000FE2                      i2___lwdiv@quotient 0005  
                                  fsr2h 000FDA                                    fsr0l 000FE9  
                                  indf2 000FDF                                    fsr1l 000FE1  
                                  fsr2l 000FD9                                    btemp 004D  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 000E                           __CFG_IESO$OFF 000000  
                       __end_ofi2_putch 1D9A                           __CFG_MCLRE$ON 000000  
          __end_of_top_rocker_motor_ccw 13B4                            ___param_bank 000000  
                           i2_lcdNibble 16F2                          ?_solenoids_out 0001  
                      ?_I2C_Master_Init 008D                        ?_I2C_Master_Read 0001  
                      ?_I2C_Master_Wait 0001                        ?_I2C_Master_Stop 0001  
                __end_of_solenoids_back 17EA                                   ?_main 0001  
                                 _ACKEN 007E2C                                   _ACKDT 007E2D  
                       __end_of___awdiv 1104                                   STR_10 FF29  
                                 STR_11 FF13                                   STR_12 FF91  
                                 STR_13 FFB1                                   STR_14 FFA2  
                                 STR_15 FFE9                                   STR_16 FF3C  
                       __end_of___awmod 1494                         __end_of___lldiv 11C0  
                       ___awdiv@divisor 0082                         __end_of___lwdiv 1344  
                       standby@keypress 00A6                         __end_of___lwmod 1692  
                                 i2l208 09C2                          ??_done_sorting 0090  
                                 i2l659 04E6                         ___awdiv@counter 0084  
                                 _PORTB 000F81                                   _TRISA 000F92  
                                 _TRISB 000F93                                   _TRISC 000F94  
                                 _TRISD 000F95                                   _TRISE 000F96  
                 top_rocker_motor_ccw@j 0082                           __CFG_PWRT$OFF 000000  
                         __CFG_WRT0$OFF 000000                           __CFG_WRT1$OFF 000000  
                         __CFG_WRT2$OFF 000000                           __CFG_WRT3$OFF 000000  
                       __end_of_lcdInst 1D56                          __CFG_EBTR0$OFF 000000  
                        __CFG_FCMEN$OFF 000000                          __CFG_EBTR1$OFF 000000  
                        __CFG_EBTR2$OFF 000000                          __CFG_EBTR3$OFF 000000  
                       __end_of_go_back 1C40              ?_top_distribution_motor_cw 0001  
                         __CFG_WRTB$OFF 000000                           __CFG_WRTC$OFF 000000  
                         __CFG_WRTD$OFF 000000                         __end_of_initLCD 1884  
                        __CFG_EBTRB$OFF 000000                              i2isdigit@c 0003  
                 _bottom_rocker_initial 1D72                         __end_of_dpowers FF04  
                                 _tabed 0041                         __end_of_isdigit 1A6C  
                 _bottom_rocker_release 1D12                                   _putch 1D36  
                       __end_of_op_time 183A                   _bottom_rocker_restore 1D24  
                                 pclath 000FFA                                   tablat 000FF5  
                       __end_of_pop_out 1C20                         __end_of_results 0E08  
                      __end_ofi2___wmul 1B9E                         __end_of_standby 0F64  
                                 status 000FD8                     _top_rocker_motor_cw 1A94  
       __size_of_bottom_rocker_motor_cw 0026                      __size_ofi2___awdiv 0084  
                        __CFG_PBADEN$ON 000000                           i2printf@width 001E  
                          standby@i_875 00A8                        __end_ofi2_printf 0726  
                    __size_ofi2___lwdiv 0052                      __size_ofi2___lwmod 0042  
                       __initialization 1B9E                      __size_ofi2_lcdInst 000C  
                          __end_of_main 1248                            __end_of_keys FEFA  
                            i2printf@ap 0018                      __size_ofi2_initLCD 0046  
                    __size_ofi2_isdigit 001E                    ?_top_rocker_motor_cw 0001  
                       ?_solenoids_back 0001                                  ??_main 00AB  
                         __activetblptr 000003        __end_of_bottom_distribution_idle 1A42  
      __end_of_bottom_distribution_move 1C60                       ?_I2C_Master_Start 0001  
                     ?_I2C_Master_Write 0081                      ??_I2C_Master_Start 0081  
                                _ADCON0 000FC2                                  _ADCON1 000FC1  
                    ??_I2C_Master_Write 0083                        ___awdiv@dividend 0080  
                       i2lcdNibble@data 0002                                  ?_putch 0001  
                       i2lcdNibble@temp 0001                                  _INT1IE 007F83  
                                _INT1IF 007F80                                  i2l1104 1790  
                                i2l1114 1902                                  i2l3071 1766  
                                i2l3081 1786                                  i2l3073 176A  
                                i2l3091 18E0                                  i2l3059 1CB6  
                                i2l3069 175E                                  i2l3093 18E4  
                                i2l3413 040A                                  i2l3351 1452  
                                i2l3343 1438                                  i2l3511 0624  
                                i2l3503 0606                                  i2l3415 0418  
                                i2l3353 145A                                  i2l3097 18F8  
                                i2l3089 18D8                                  i2l3521 0650  
                                i2l3433 04B2                                  i2l3425 0450  
                                i2l3409 03FA                                  i2l3355 145E  
                                i2l3363 147C                                  i2l3347 1444  
                                i2l3523 069A                                  i2l3531 06FC  
                                i2l3515 0638                                  i2l3419 041E  
                                i2l3533 0702                                  i2l3509 061C  
                                i2l3453 052E                                  i2l3437 04B6  
                                i2l3367 148A                                  i2l3359 1472  
                                i2l3551 126C                                  i2l3519 064A  
                                i2l3455 0532                                  i2l3535 070A  
                                i2l3561 128E                                  i2l3545 125C  
                                i2l3529 06EC                                  i2l3449 0514  
                                i2l3491 05C4                                  i2l3467 0564  
                                i2l3483 059A                                  i2l3557 1282  
                                i2l3573 12B4                                  i2l3469 0568  
                                i2l3485 05AA                                  i2l3559 128A  
                                i2l3495 05E8                                  i2l3903 086E  
                                i2l3577 12C2                                  i2l3569 12AA  
                                i2l3497 05F0                                  i2l3905 0872  
                                i2l3913 0896                                  i2l3923 08AE  
                                i2l3851 079E                                  i2l3933 08D6  
                                i2l3909 087A                                  i2l3861 07C6  
                                i2l3943 08FE                                  i2l3927 08CA  
                                i2l3919 08A6                                  i2l3871 07EE  
                                i2l3855 07A6                                  i2l3961 094E  
                                i2l3953 092A                                  i2l3937 08F2  
                                i2l3929 08CE                                  i2l3865 07CE  
                                i2l3971 0976                                  i2l3963 0952  
                                i2l3939 08F6                                  i2l3947 091A  
                                i2l3875 07F6                                  i2l3859 07C2  
                                i2l3973 097A                                  i2l3957 0932  
                                i2l3981 099E                                  i2l3893 0846  
                                i2l3885 0822                                  i2l3869 07EA  
                                i2l3967 095A                                  i2l3895 084A  
                                i2l3879 0812                                  i2l3985 09AA  
                                i2l3977 0982                                  i2l3889 082A  
                                i2l3899 0852                                  i2l3989 09BA  
                             ??i2_putch 0003                                  _SSPADD 000FC8  
                                _TRISC3 007CA3                                  _TRISC4 007CA4  
                                _SSPBUF 000FC9                          __CFG_XINST$OFF 000000  
                     ??_top_rocker_idle 0084                         ??_solenoids_out 0082  
                                ___wmul 1980                               ??___awdiv 0084  
                        __CFG_STVREN$ON 000000                               ??___awmod 0005  
                             ??___lldiv 0088                               ??___lwdiv 0084  
                             ??___lwmod 008B                                  clear_0 1BA4  
                                clear_1 1BB0                        ___awdiv@quotient 0086  
                 ??_top_rocker_motor_cw 0080                         ___awmod@divisor 0003  
                       ___awmod@counter 0005                               ??_lcdInst 0082  
                                _printf 0012                               ??_go_back 0080  
                        i2___awdiv@sign 0006                  _bottom_rocker_motor_cw 1B06  
                             ??_initLCD 0083                            ?_pop_results 0001  
                             ??_isdigit 0080                       __end_ofi2___awdiv 12CC  
                      __end_of_set_time 1630                       __end_ofi2___lwdiv 179A  
                          __mediumconst FEE8                       __end_ofi2___lwmod 190C  
                ?_bottom_rocker_initial 0001                               ??_op_time 0021  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                               ??_pop_out 0080  
                          ?_tin_results 0001                  ?_bottom_rocker_release 0001  
                             ??_results 00A4                 _bottomDistributionState 00CC  
                             ??_standby 00A4                    _top_rocker_motor_ccw 1344  
                     __end_ofi2_lcdInst 1DA6                  ?_bottom_rocker_restore 0001  
                            _Start_time 00BA                       __end_ofi2_initLCD 18CA  
                     __end_ofi2_isdigit 1CBE                              __accesstop 0080  
               __end_of__initialization 1BB6        __size_of_bottom_rocker_motor_ccw 0070  
                         done_sorting@i 0097                           ___rparam_used 000001  
            __end_of_top_rocker_initial 1D64                    __end_of_done_sorting 0C92  
            __end_of_top_rocker_release 1CDA              __end_of_top_rocker_restore 1D12  
                    i2___lwmod@dividend 0008                          __pcstackCOMRAM 0001  
           __size_of_bottom_rocker_idle 006A                           __end_of_putch 1D46  
                           i2printf@idx 0017                             i2printf@val 001B  
   __end_of_bottom_distribution_initial 1D8E             _bottom_distribution_initial 1D80  
                             ?i2___wmul 0001                      __size_of_lcdNibble 0068  
   __end_of_bottom_distribution_prepare 1C80             _bottom_distribution_prepare 1C60  
                           i2putch@data 0003                             keypressed@i 0032  
                             ?i2_printf 000D                   ?_top_rocker_motor_ccw 0001  
                 _top_distribution_idle 19B6               _start_bottom_distribution 004B  
                 _top_distribution_move 1BC0                                 ??_putch 0082  
                            __pbssBANK0 00AB          ?_bottom_distribution_motor_ccw 0001  
     __size_of_bottom_distribution_idle 002C            ??_top_distribution_motor_ccw 0080  
             ?_bottom_distribution_idle 0001       __size_of_bottom_distribution_move 0020  
             ?_bottom_distribution_move 0001                            ?i2_lcdNibble 0001  
                               ?___wmul 0088                 keypressed@keypress_temp 003E  
                               ?_printf 008E                              ??i2___wmul 0005  
                            ??i2_printf 0013             ??_top_distribution_motor_cw 0080  
                               _SSPCON1 000FC6                                 _SSPCON2 000FC5  
                               _SSPSTAT 000FC7     __size_of_top_distribution_motor_ccw 0026  
                               i2_putch 1D8E                       __end_of_lcdNibble 15CE  
                               __Hparam 0000                                 __Lparam 0000  
                             ?_set_time 0001                        ??_solenoids_back 0082  
                               ___awdiv 1046                                 ___awmod 1424  
                               ___lldiv 1104                         __size_of___wmul 0036  
                               ___lwdiv 12CC                                 ___lwmod 1630  
                               __pcinit 1B9E                                 __ramtop 1000  
                               _lcdInst 1D46                                 __ptext0 11C0  
                               __ptext1 0F64                                 __ptext2 1CBE  
                               __ptext3 179A                                 __ptext4 1CEE  
                               __ptext5 1A6C                                 __ptext6 1D00  
                               __ptext7 1A94                                 __ptext8 1344  
                               __ptext9 1BC0                                 _labeled 0047  
                               _go_back 1C20                         __size_of_printf 03DE  
                               _initLCD 183A                       __end_of_hexpowers FF0C  
                               _dpowers FEFA                                 _isdigit 1A42  
                      ___awmod@dividend 0001                    done_sorting@End_time 0098  
                ??_top_rocker_motor_ccw 0080                  ?_top_distribution_idle 0001  
              _top_distribution_initial 1D64                                 _op_time 17EA  
                            _keypressed 0008                  ?_top_distribution_move 0001  
              __size_of_I2C_Master_Init 0060                __size_of_I2C_Master_Read 002E  
                               _pop_can 00C2                __size_of_I2C_Master_Wait 0014  
                               _tin_can 00C4                       __end_of_real_time FF13  
              __size_of_I2C_Master_Stop 0008                                 _pop_out 1C00  
                               _results 0C92                    __size_of_pop_results 003A  
                               _standby 0E08                _top_distribution_prepare 1BE0  
                        __pintcode_body 0726                         _top_rocker_idle 1A6C  
                  end_of_initialization 1BB6                    __size_of_tin_results 003A  
               _bottom_rocker_motor_ccw 13B4                           startSorting@i 00A9  
                 __size_of_done_sorting 0294                                 int_func 0726  
                   i2___wmul@multiplier 0001                          _operation_time 0045  
             __size_of_I2C_Master_Start 0008               __size_of_I2C_Master_Write 000A  
                       ___lldiv@divisor 0084                         ___lldiv@counter 008C  
             _top_distribution_motor_cw 1ABA                              ??_set_time 0083  
                               printf@c 00A3                                 printf@f 008E  
                      I2C_Master_Init@c 008D                        I2C_Master_Read@a 0081  
                               postdec2 000FDD                                 postinc0 000FEE  
                               postinc2 000FDE                 __size_of_initialization 0068  
               ?_bottom_rocker_motor_cw 0001                               _PORTAbits 000F80  
                             _PORTBbits 000F81                               _PORTCbits 000F82  
               ??_bottom_rocker_initial 0080                 ??_bottom_rocker_release 0084  
               ??_bottom_rocker_restore 0082                            _done_sorting 09FE  
                             i2___awdiv 1248                       i2___lwdiv@divisor 0003  
                             i2___lwdiv 1748                               i2___lwmod 18CA  
                     i2___lwdiv@counter 0007                    results@keypress_temp 00A7  
                             i2_lcdInst 1D9A                             printf@width 00A1  
    __end_of_top_distribution_motor_ccw 1B06              _top_distribution_motor_ccw 1AE0  
                             i2_initLCD 1884                      i2___awdiv@dividend 0001  
                            _tot_sorted 1C80                               i2_isdigit 1CA0  
           __end_of_top_rocker_motor_cw 1ABA          __end_of_bottom_rocker_motor_cw 1B2C  
                 __end_of_solenoids_out 1D00                          __end_of___wmul 19B6  
                  __size_ofi2_lcdNibble 0056                           i2lcdInst@data 0003  
                    _top_rocker_initial 1D56                      _top_rocker_release 1CBE  
                      i2___wmul@product 0005                          __end_of_printf 03F0  
               __end_of_top_rocker_idle 1A94                      _top_rocker_restore 1D00  
                          i2printf@flag 001D                            i2printf@prec 001A  
                   start_initialization 1B9E                             ?_keypressed 0001  
                    i2___awdiv@quotient 0007                       __size_ofi2___wmul 0026  
                   ?_top_rocker_initial 0001               ??_bottom_rocker_motor_ccw 0080  
                             i2printf@c 0020                               i2printf@f 000D  
                   ?_top_rocker_release 0001                              ?i2___awdiv 0001  
                         ?_startSorting 0001                     ?_top_rocker_restore 0001  
                            ?i2___lwdiv 0001                              ?i2___lwmod 0008  
                     __size_ofi2_printf 0336    __end_of_bottom_distribution_motor_cw 1B52  
 __size_of_bottom_distribution_motor_cw 0026            _bottom_distribution_motor_cw 1B2C  
                     ??_I2C_Master_Init 0091                       ??_I2C_Master_Read 0081  
                     ??_I2C_Master_Wait 0080                              ?i2_lcdInst 0001  
                     ??_I2C_Master_Stop 0081                              ?i2_initLCD 0001  
                            ?i2_isdigit 0001              __end_of_bottom_rocker_idle 14FE  
                  ??_top_rocker_initial 0080                    ??_top_rocker_release 0084  
                              ??___wmul 008C                    ??_top_rocker_restore 0082  
       ??_bottom_distribution_motor_ccw 0080                        __CFG_LPT1OSC$OFF 000000  
              done_sorting@total_second 0095                                ??_printf 0096  
                           __pbssCOMRAM 003F                           __pcstackBANK0 0080  
                     i2___lwmod@divisor 000A                       i2___lwmod@counter 000C  
                          _isdigit$1350 0081                          ??_startSorting 00A7  
                              ?i2_putch 0001           ?_bottom_distribution_motor_cw 0001  
                           ?_tot_sorted 0001                        _I2C_Master_Start 1DB8  
                     _bottomRockerState 00CA                        _I2C_Master_Write 1DA6  
                      ___lwdiv@dividend 0080                       __CFG_CCP2MX$PORTC 000000  
       __end_of_bottom_rocker_motor_ccw 1424                     __size_of_keypressed 09F6  
                             __pintcode 0008                           __pmediumconst FEE8  
                             _lcdNibble 1566                                ?___awdiv 0080  
                              ?___awmod 0001                          _initialization 14FE  
                              ?___lldiv 0080                                ?___lwdiv 0080  
                              ?___lwmod 0087              ??_top_distribution_initial 0080  
                     __size_of_set_time 0062                                ?_lcdInst 0001  
            ??_top_distribution_prepare 0082                 ??_top_distribution_idle 0080  
                              ?_go_back 0001                 ??_top_distribution_move 0082  
    __size_of_top_distribution_motor_cw 0026                                ?_initLCD 0001  
                              ?_isdigit 0001                        ?_top_rocker_idle 0001  
                              ?_op_time 0001                                ?_pop_out 0001  
                              ?_results 0001                               _hexpowers FF04  
                              ?_standby 0001                        ___lwdiv@quotient 0085  
                           ??i2___awdiv 0005                             ??i2___lwdiv 0005  
                           ??i2___lwmod 000C                          __size_of_putch 0010  
                             _real_time FF0C                         keypressed@i_340 003A  
                       keypressed@i_341 003B                         keypressed@i_333 0033  
                       keypressed@i_342 003C                         keypressed@i_334 0034  
                       keypressed@i_343 003D                         keypressed@i_335 0035  
                       keypressed@i_336 0036                         keypressed@i_337 0037  
                       keypressed@i_338 0038                         keypressed@i_339 0039  
              _bottom_distribution_idle 1A16                             ??i2_lcdInst 0003  
              _bottom_distribution_move 1C40                          ___wmul@product 008C  
                              _LATAbits 000F89                                _LATBbits 000F8A  
                              _LATCbits 000F8B                                _LATDbits 000F8C  
                              _LATEbits 000F8D                             ??i2_initLCD 0004  
                           ??i2_isdigit 0001                                i2u440_47 085C  
                              i2u441_47 0884                                i2u450_47 170A  
                              i2u442_47 08B8                                i2u451_47 1714  
                              i2u443_47 08E0                  __end_of_initialization 1566  
                              i2u452_47 1736                                i2u444_47 0908  
                              i2u436_47 07B0                                i2u453_47 1740  
                              i2u445_47 093C                                i2u437_47 07D8  
                              i2u446_47 0964                                i2u438_47 0800  
                              i2u447_47 098C                                i2u439_47 0834  
                              i2u448_47 188A                                i2u449_47 18BE  
                      __CFG_WDTPS$32768 000000                              ?_lcdNibble 0001  
                     ___wmul@multiplier 0088                                i2___wmul 1B78  
 __end_of_bottom_distribution_motor_ccw 1B78  __size_of_bottom_distribution_motor_ccw 0026  
         _bottom_distribution_motor_ccw 1B52                           lcdNibble@data 0081  
                         ??_pop_results 0021                               _total_end 00B2  
                            printf@flag 00A0                           lcdNibble@temp 0080  
        __size_of_bottom_rocker_initial 000E                              printf@prec 009D  
         __end_of_bottom_rocker_initial 1D80       __end_of_top_distribution_motor_cw 1AE0  
                   __size_of_tot_sorted 0020          __size_of_bottom_rocker_release 0012  
                     i2___awdiv@divisor 0003           __end_of_bottom_rocker_release 1D24  
                     i2___awdiv@counter 0005                           ??_tin_results 0021  
                              i2_printf 03F0          __size_of_bottom_rocker_restore 0012  
         __end_of_bottom_rocker_restore 1D36           __size_of_top_rocker_motor_ccw 0070  
                   I2C_Master_Read@temp 0082                         initialization@i 00A6  
                           _bottom_move 0049                           _tin_can_label 00C6  
                      __size_ofi2_putch 000C                      keypressed@keypress 0031  
           ?_top_distribution_motor_ccw 0001                                __Hrparam 0000  
                       ?_initialization 0001                                __Lrparam 0000  
                    __CFG_BOREN$SBORDIS 000000          ??_bottom_distribution_motor_cw 0080  
                  __end_of_startSorting 1046                        __size_of___awdiv 00BE  
                      __size_of___awmod 0070                   i2___wmul@multiplicand 0003  
                      __size_of___lldiv 00BC                        __size_of___lwdiv 0078  
                      __size_of___lwmod 0062            ?_bottom_distribution_initial 0001  
                      __size_of_lcdInst 0010                        __size_of_go_back 0020  
                       _I2C_Master_Init 1692                         _I2C_Master_Read 19E8  
                      __size_of_initLCD 004A                 __size_of_solenoids_back 0050  
          ?_bottom_distribution_prepare 0001                         _I2C_Master_Wait 1CDA  
                       _I2C_Master_Stop 1DB0                            ??_keypressed 0021  
                      __size_of_isdigit 002A                         ___lwdiv@divisor 0082  
                       ___lwdiv@counter 0084                        __size_of_op_time 0050  
                              __ptext10 19B6                                __ptext11 1BE0  
                              __ptext20 1D80                                __ptext12 1ABA  
                              __ptext21 1D12                                __ptext13 1AE0  
                              __ptext30 1B52                                __ptext22 1494  
                              __ptext14 1C00                                __ptext31 0E08  
                              __ptext23 1D24                                __ptext15 1C20  
                              __ptext40 1D46                                __ptext32 15CE  
                              __ptext24 1B06                                __ptext16 14FE  
                              __ptext41 1566                                __ptext33 0C92  
                              __ptext25 13B4                                __ptext17 1D56  
                              __ptext50 1692                                __ptext42 09FE  
                              __ptext34 0012                                __ptext26 1C40  
                              __ptext18 1D64                                __ptext51 1104  
                              __ptext43 1980                                __ptext35 1D36  
                              __ptext27 1A16                                __ptext19 1D72  
                              __ptext60 1B78                                __ptext44 1046  
                              __ptext36 1A42                                __ptext28 1C60  
                              __ptext61 18CA                                __ptext53 1C80  
                              __ptext45 1DA6                                __ptext37 1630  
                              __ptext29 1B2C                                __ptext62 1748  
                              __ptext54 190C                                __ptext46 1DB0  
                              __ptext38 12CC                                __ptext63 1884  
                              __ptext55 1946                                __ptext47 1DB8  
                              __ptext39 183A                                __ptext64 1D9A  
                              __ptext56 17EA                                __ptext48 19E8  
                              __ptext65 16F2                                __ptext57 03F0  
                              __ptext49 1CDA                                __ptext66 1248  
                              __ptext58 1D8E                                __ptext67 1424  
                              __ptext59 1CA0                                __ptext68 0000  
                      __size_of_pop_out 0020                        __size_of_results 0176  
                      __size_of_standby 015C                     __end_of_pop_results 1980  
                        i2_isdigit$1350 0002                       _done_sorting$1703 0093  
                   __end_of_tin_results 1946                           __size_of_main 0088  
                             set_time@i 0083                                _set_time 15CE  
                         ??i2_lcdNibble 0001                             ??_lcdNibble 0080  
                    __end_of_keypressed 09FE        __end_of_top_distribution_initial 1D72  
                              int$flags 004D                                _top_move 003F  
                             printf@idx 009A                               printf@val 009E  
      __end_of_top_distribution_prepare 1C00            __size_of_top_rocker_motor_cw 0026  
                    _bottom_rocker_idle 1494                               putch@data 0082  
              __end_of_I2C_Master_Start 1DC0                    standby@keypress_temp 00A7  
              __end_of_I2C_Master_Write 1DB0                              _INTCONbits 000FF2  
         ??_bottom_distribution_initial 0080           ??_bottom_distribution_prepare 0082  
                   ?_bottom_rocker_idle 0001                                isdigit@c 0082  
              bottom_rocker_motor_ccw@k 0082                                intlevel2 0000  
                __size_of_solenoids_out 0012                        ___lwmod@dividend 0087  
                      ___lldiv@dividend 0080                         results@keypress 00A6  
                          ??_tot_sorted 0021                  _start_top_distribution 00BE  
                  ??_bottom_rocker_idle 0080             __size_of_top_rocker_initial 000E  
                              results@i 00A8                          _topRockerState 00D0  
                           _pop_can_tab 00C0             __size_of_top_rocker_release 001C  
                              printf@ap 009B             __size_of_top_rocker_restore 0012  
               __end_of_I2C_Master_Init 16F2                 __end_of_I2C_Master_Read 1A16  
                              standby@i 00A9                 __end_of_I2C_Master_Wait 1CEE  
               __end_of_I2C_Master_Stop 1DB8                             lcdInst@data 0082  
                   __end_ofi2_lcdNibble 1748                ?_bottom_rocker_motor_ccw 0001  
        __size_of_top_distribution_idle 0032                        ___lldiv@quotient 0088  
                     I2C_Master_Write@d 0081                         ___lwmod@divisor 0089  
         __end_of_top_distribution_idle 19E8          __size_of_top_distribution_move 0020  
                           _pop_results 1946           __end_of_top_distribution_move 1BE0  
                       ___lwmod@counter 008B              ??_bottom_distribution_idle 0080  
            ??_bottom_distribution_move 0082                      __end_of_tot_sorted 1CA0  
                           _tin_results 190C                            results@i_901 00AA  
                          results@i_899 00A9    __size_of_bottom_distribution_initial 000E  
              ??_bottom_rocker_motor_cw 0080                   __size_of_startSorting 00E2  
  __size_of_bottom_distribution_prepare 0020  



Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Feb 28 22:29:32 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           ; Version 1.41
    56                           ; Generated 25/01/2017 GMT
    57                           ; 
    58                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC18F4620 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     
    90                           	psect	mediumconst
    91  00FEE0                     __pmediumconst:
    92                           	opt stack 0
    93  00FEE0  00                 	db	0
    94  00FEE1                     _keys:
    95                           	opt stack 0
    96  00FEE1  31                 	db	49
    97  00FEE2  32                 	db	50
    98  00FEE3  33                 	db	51
    99  00FEE4  41                 	db	65
   100  00FEE5  34                 	db	52
   101  00FEE6  35                 	db	53
   102  00FEE7  36                 	db	54
   103  00FEE8  42                 	db	66
   104  00FEE9  37                 	db	55
   105  00FEEA  38                 	db	56
   106  00FEEB  39                 	db	57
   107  00FEEC  43                 	db	67
   108  00FEED  2A                 	db	42
   109  00FEEE  30                 	db	48
   110  00FEEF  23                 	db	35
   111  00FEF0  44                 	db	68
   112  00FEF1  00                 	db	0
   113  00FEF2                     __end_of_keys:
   114                           	opt stack 0
   115  00FEF2                     _dpowers:
   116                           	opt stack 0
   117  00FEF2  0001               	dw	1
   118  00FEF4  000A               	dw	10
   119  00FEF6  0064               	dw	100
   120  00FEF8  03E8               	dw	1000
   121  00FEFA  2710               	dw	10000
   122  00FEFC                     __end_of_dpowers:
   123                           	opt stack 0
   124  00FEFC                     _hexpowers:
   125                           	opt stack 0
   126  00FEFC  0001               	dw	1
   127  00FEFE  0010               	dw	16
   128  00FF00  0100               	dw	256
   129  00FF02  1000               	dw	4096
   130  00FF04                     __end_of_hexpowers:
   131                           	opt stack 0
   132  00FF04                     _real_time:
   133                           	opt stack 0
   134  00FF04  45                 	db	69
   135  00FF05  59                 	db	89
   136  00FF06  17                 	db	23
   137  00FF07  04                 	db	4
   138  00FF08  31                 	db	49
   139  00FF09  02                 	db	2
   140  00FF0A  17                 	db	23
   141  00FF0B                     __end_of_real_time:
   142                           	opt stack 0
   143  0000                     _PORTBbits	set	3969
   144  0000                     _INTCONbits	set	4082
   145  0000                     _PORTB	set	3969
   146  0000                     _ADCON1	set	4033
   147  0000                     _ADCON0	set	4034
   148  0000                     _LATC	set	3979
   149  0000                     _LATB	set	3978
   150  0000                     _TRISE	set	3990
   151  0000                     _TRISD	set	3989
   152  0000                     _TRISC	set	3988
   153  0000                     _TRISB	set	3987
   154  0000                     _TRISA	set	3986
   155  0000                     _LATD	set	3980
   156  0000                     _LATDbits	set	3980
   157  0000                     _SSPBUF	set	4041
   158  0000                     _SSPADD	set	4040
   159  0000                     _SSPCON2	set	4037
   160  0000                     _SSPCON1	set	4038
   161  0000                     _SSPSTAT	set	4039
   162  0000                     _INT1IF	set	32640
   163  0000                     _INT1IE	set	32643
   164  0000                     _ACKEN	set	32300
   165  0000                     _ACKDT	set	32301
   166  0000                     _RCEN	set	32299
   167  0000                     _PEN	set	32298
   168  0000                     _RSEN	set	32297
   169  0000                     _SEN	set	32296
   170  0000                     _TRISC4	set	31908
   171  0000                     _TRISC3	set	31907
   172  00FF0B                     STR_2:
   173  00FF0B  54                 	db	84	;'T'
   174  00FF0C  69                 	db	105	;'i'
   175  00FF0D  6D                 	db	109	;'m'
   176  00FF0E  65                 	db	101	;'e'
   177  00FF0F  3A                 	db	58	;':'
   178  00FF10  20                 	db	32
   179  00FF11  25                 	db	37
   180  00FF12  30                 	db	48	;'0'
   181  00FF13  31                 	db	49	;'1'
   182  00FF14  64                 	db	100	;'d'
   183  00FF15  20                 	db	32
   184  00FF16  6D                 	db	109	;'m'
   185  00FF17  69                 	db	105	;'i'
   186  00FF18  6E                 	db	110	;'n'
   187  00FF19  20                 	db	32
   188  00FF1A  25                 	db	37
   189  00FF1B  30                 	db	48	;'0'
   190  00FF1C  32                 	db	50	;'2'
   191  00FF1D  64                 	db	100	;'d'
   192  00FF1E  20                 	db	32
   193  00FF1F  73                 	db	115	;'s'
   194  00FF20  00                 	db	0
   195  00FF21                     STR_1:
   196  00FF21  54                 	db	84	;'T'
   197  00FF22  6F                 	db	111	;'o'
   198  00FF23  74                 	db	116	;'t'
   199  00FF24  61                 	db	97	;'a'
   200  00FF25  6C                 	db	108	;'l'
   201  00FF26  20                 	db	32
   202  00FF27  53                 	db	83	;'S'
   203  00FF28  6F                 	db	111	;'o'
   204  00FF29  72                 	db	114	;'r'
   205  00FF2A  74                 	db	116	;'t'
   206  00FF2B  65                 	db	101	;'e'
   207  00FF2C  64                 	db	100	;'d'
   208  00FF2D  3A                 	db	58	;':'
   209  00FF2E  20                 	db	32
   210  00FF2F  25                 	db	37
   211  00FF30  30                 	db	48	;'0'
   212  00FF31  32                 	db	50	;'2'
   213  00FF32  78                 	db	120	;'x'
   214  00FF33  00                 	db	0
   215  00FF34                     STR_17:
   216  00FF34  30                 	db	48	;'0'
   217  00FF35  31                 	db	49	;'1'
   218  00FF36  32                 	db	50	;'2'
   219  00FF37  33                 	db	51	;'3'
   220  00FF38  34                 	db	52	;'4'
   221  00FF39  35                 	db	53	;'5'
   222  00FF3A  36                 	db	54	;'6'
   223  00FF3B  37                 	db	55	;'7'
   224  00FF3C  38                 	db	56	;'8'
   225  00FF3D  39                 	db	57	;'9'
   226  00FF3E  61                 	db	97	;'a'
   227  00FF3F  62                 	db	98	;'b'
   228  00FF40  63                 	db	99	;'c'
   229  00FF41  64                 	db	100	;'d'
   230  00FF42  65                 	db	101	;'e'
   231  00FF43  66                 	db	102	;'f'
   232  00FF44  00                 	db	0
   233  00FF45                     STR_16:
   234  00FF45  50                 	db	80	;'P'
   235  00FF46  72                 	db	114	;'r'
   236  00FF47  65                 	db	101	;'e'
   237  00FF48  73                 	db	115	;'s'
   238  00FF49  73                 	db	115	;'s'
   239  00FF4A  20                 	db	32
   240  00FF4B  23                 	db	35
   241  00FF4C  20                 	db	32
   242  00FF4D  74                 	db	116	;'t'
   243  00FF4E  6F                 	db	111	;'o'
   244  00FF4F  20                 	db	32
   245  00FF50  53                 	db	83	;'S'
   246  00FF51  74                 	db	116	;'t'
   247  00FF52  61                 	db	97	;'a'
   248  00FF53  72                 	db	114	;'r'
   249  00FF54  74                 	db	116	;'t'
   250  00FF55  00                 	db	0
   251  00FF56                     STR_10:
   252  00FF56  41                 	db	65	;'A'
   253  00FF57  3A                 	db	58	;':'
   254  00FF58  54                 	db	84	;'T'
   255  00FF59  6F                 	db	111	;'o'
   256  00FF5A  74                 	db	116	;'t'
   257  00FF5B  61                 	db	97	;'a'
   258  00FF5C  6C                 	db	108	;'l'
   259  00FF5D  20                 	db	32
   260  00FF5E  20                 	db	32
   261  00FF5F  20                 	db	32
   262  00FF60  42                 	db	66	;'B'
   263  00FF61  3A                 	db	58	;':'
   264  00FF62  50                 	db	80	;'P'
   265  00FF63  6F                 	db	111	;'o'
   266  00FF64  70                 	db	112	;'p'
   267  00FF65  20                 	db	32
   268  00FF66  00                 	db	0
   269  00FF67                     STR_11:
   270  00FF67  43                 	db	67	;'C'
   271  00FF68  3A                 	db	58	;':'
   272  00FF69  54                 	db	84	;'T'
   273  00FF6A  69                 	db	105	;'i'
   274  00FF6B  6E                 	db	110	;'n'
   275  00FF6C  20                 	db	32
   276  00FF6D  20                 	db	32
   277  00FF6E  20                 	db	32
   278  00FF6F  20                 	db	32
   279  00FF70  20                 	db	32
   280  00FF71  44                 	db	68	;'D'
   281  00FF72  3A                 	db	58	;':'
   282  00FF73  54                 	db	84	;'T'
   283  00FF74  69                 	db	105	;'i'
   284  00FF75  6D                 	db	109	;'m'
   285  00FF76  65                 	db	101	;'e'
   286  00FF77  00                 	db	0
   287  00FF78                     STR_12:
   288  00FF78  50                 	db	80	;'P'
   289  00FF79  72                 	db	114	;'r'
   290  00FF7A  65                 	db	101	;'e'
   291  00FF7B  73                 	db	115	;'s'
   292  00FF7C  73                 	db	115	;'s'
   293  00FF7D  20                 	db	32
   294  00FF7E  30                 	db	48	;'0'
   295  00FF7F  20                 	db	32
   296  00FF80  74                 	db	116	;'t'
   297  00FF81  6F                 	db	111	;'o'
   298  00FF82  20                 	db	32
   299  00FF83  52                 	db	82	;'R'
   300  00FF84  65                 	db	101	;'e'
   301  00FF85  73                 	db	115	;'s'
   302  00FF86  65                 	db	101	;'e'
   303  00FF87  74                 	db	116	;'t'
   304  00FF88  00                 	db	0
   305  00FF89                     STR_3:
   306  00FF89  57                 	db	87	;'W'
   307  00FF8A  69                 	db	105	;'i'
   308  00FF8B  74                 	db	116	;'t'
   309  00FF8C  68                 	db	104	;'h'
   310  00FF8D  20                 	db	32
   311  00FF8E  4C                 	db	76	;'L'
   312  00FF8F  61                 	db	97	;'a'
   313  00FF90  62                 	db	98	;'b'
   314  00FF91  65                 	db	101	;'e'
   315  00FF92  6C                 	db	108	;'l'
   316  00FF93  3A                 	db	58	;':'
   317  00FF94  20                 	db	32
   318  00FF95  25                 	db	37
   319  00FF96  30                 	db	48	;'0'
   320  00FF97  32                 	db	50	;'2'
   321  00FF98  78                 	db	120	;'x'
   322  00FF99  00                 	db	0
   323  00FF9A                     STR_15:
   324  00FF9A  25                 	db	37
   325  00FF9B  30                 	db	48	;'0'
   326  00FF9C  32                 	db	50	;'2'
   327  00FF9D  78                 	db	120	;'x'
   328  00FF9E  3A                 	db	58	;':'
   329  00FF9F  25                 	db	37
   330  00FFA0  30                 	db	48	;'0'
   331  00FFA1  32                 	db	50	;'2'
   332  00FFA2  78                 	db	120	;'x'
   333  00FFA3  3A                 	db	58	;':'
   334  00FFA4  25                 	db	37
   335  00FFA5  30                 	db	48	;'0'
   336  00FFA6  32                 	db	50	;'2'
   337  00FFA7  78                 	db	120	;'x'
   338  00FFA8  00                 	db	0
   339  00FFA9                     STR_5:
   340  00FFA9  57                 	db	87	;'W'
   341  00FFAA  69                 	db	105	;'i'
   342  00FFAB  74                 	db	116	;'t'
   343  00FFAC  68                 	db	104	;'h'
   344  00FFAD  20                 	db	32
   345  00FFAE  54                 	db	84	;'T'
   346  00FFAF  61                 	db	97	;'a'
   347  00FFB0  62                 	db	98	;'b'
   348  00FFB1  3A                 	db	58	;':'
   349  00FFB2  20                 	db	32
   350  00FFB3  25                 	db	37
   351  00FFB4  30                 	db	48	;'0'
   352  00FFB5  32                 	db	50	;'2'
   353  00FFB6  78                 	db	120	;'x'
   354  00FFB7  00                 	db	0
   355  00FFB8                     STR_4:
   356  00FFB8  4E                 	db	78	;'N'
   357  00FFB9  6F                 	db	111	;'o'
   358  00FFBA  20                 	db	32
   359  00FFBB  4C                 	db	76	;'L'
   360  00FFBC  61                 	db	97	;'a'
   361  00FFBD  62                 	db	98	;'b'
   362  00FFBE  65                 	db	101	;'e'
   363  00FFBF  6C                 	db	108	;'l'
   364  00FFC0  3A                 	db	58	;':'
   365  00FFC1  20                 	db	32
   366  00FFC2  25                 	db	37
   367  00FFC3  30                 	db	48	;'0'
   368  00FFC4  32                 	db	50	;'2'
   369  00FFC5  78                 	db	120	;'x'
   370  00FFC6  00                 	db	0
   371  00FFC7                     STR_14:
   372  00FFC7  25                 	db	37
   373  00FFC8  30                 	db	48	;'0'
   374  00FFC9  32                 	db	50	;'2'
   375  00FFCA  78                 	db	120	;'x'
   376  00FFCB  2F                 	db	47
   377  00FFCC  25                 	db	37
   378  00FFCD  30                 	db	48	;'0'
   379  00FFCE  32                 	db	50	;'2'
   380  00FFCF  78                 	db	120	;'x'
   381  00FFD0  20                 	db	32
   382  00FFD1  20                 	db	32
   383  00FFD2  20                 	db	32
   384  00FFD3  00                 	db	0
   385  00FFD4                     STR_8:
   386  00FFD4  49                 	db	73	;'I'
   387  00FFD5  6E                 	db	110	;'n'
   388  00FFD6  69                 	db	105	;'i'
   389  00FFD7  74                 	db	116	;'t'
   390  00FFD8  69                 	db	105	;'i'
   391  00FFD9  61                 	db	97	;'a'
   392  00FFDA  6C                 	db	108	;'l'
   393  00FFDB  69                 	db	105	;'i'
   394  00FFDC  7A                 	db	122	;'z'
   395  00FFDD  69                 	db	105	;'i'
   396  00FFDE  6E                 	db	110	;'n'
   397  00FFDF  67                 	db	103	;'g'
   398  00FFE0  00                 	db	0
   399  00FFE1                     STR_6:
   400  00FFE1  4E                 	db	78	;'N'
   401  00FFE2  6F                 	db	111	;'o'
   402  00FFE3  20                 	db	32
   403  00FFE4  54                 	db	84	;'T'
   404  00FFE5  61                 	db	97	;'a'
   405  00FFE6  62                 	db	98	;'b'
   406  00FFE7  3A                 	db	58	;':'
   407  00FFE8  20                 	db	32
   408  00FFE9  25                 	db	37
   409  00FFEA  30                 	db	48	;'0'
   410  00FFEB  32                 	db	50	;'2'
   411  00FFEC  78                 	db	120	;'x'
   412  00FFED  00                 	db	0
   413  00FFEE                     STR_9:
   414  00FFEE  43                 	db	67	;'C'
   415  00FFEF  6F                 	db	111	;'o'
   416  00FFF0  6D                 	db	109	;'m'
   417  00FFF1  70                 	db	112	;'p'
   418  00FFF2  6C                 	db	108	;'l'
   419  00FFF3  65                 	db	101	;'e'
   420  00FFF4  74                 	db	116	;'t'
   421  00FFF5  65                 	db	101	;'e'
   422  00FFF6  00                 	db	0
   423  00FFF7                     STR_13:
   424  00FFF7  52                 	db	82	;'R'
   425  00FFF8  65                 	db	101	;'e'
   426  00FFF9  73                 	db	115	;'s'
   427  00FFFA  74                 	db	116	;'t'
   428  00FFFB  61                 	db	97	;'a'
   429  00FFFC  72                 	db	114	;'r'
   430  00FFFD  74                 	db	116	;'t'
   431  00FFFE  00                 	db	0
   432  0000                     
   433                           ; #config settings
   434  00FFFF  00                 	db	0	; dummy byte at the end
   435  0000                     
   436                           	psect	cinit
   437  0017B8                     __pcinit:
   438                           	opt stack 0
   439  0017B8                     start_initialization:
   440                           	opt stack 0
   441  0017B8                     __initialization:
   442                           	opt stack 0
   443                           
   444                           ; Clear objects allocated to BANK0 (2 bytes)
   445  0017B8  0100               	movlb	0
   446  0017BA  6BCA               	clrf	(__pbssBANK0+1)& (0+255),b
   447  0017BC  6BC9               	clrf	__pbssBANK0& (0+255),b
   448                           
   449                           ; Clear objects allocated to COMRAM (12 bytes)
   450  0017BE  EE00  F03F         	lfsr	0,__pbssCOMRAM
   451  0017C2  0E0C               	movlw	12
   452  0017C4                     clear_0:
   453  0017C4  6AEE               	clrf	postinc0,c
   454  0017C6  06E8               	decf	wreg,f,c
   455  0017C8  E1FD               	bnz	clear_0
   456  0017CA                     end_of_initialization:
   457                           	opt stack 0
   458  0017CA                     __end_of__initialization:
   459                           	opt stack 0
   460  0017CA  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   461  0017CC  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   462  0017CE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   463  0017D0  6EF8               	movwf	tblptru,c
   464  0017D2  0100               	movlb	0
   465  0017D4  EF6E  F00A         	goto	_main	;jump to C main() function
   466                           tblptru	equ	0xFF8
   467                           postinc0	equ	0xFEE
   468                           wreg	equ	0xFE8
   469                           
   470                           	psect	bssCOMRAM
   471  00003F                     __pbssCOMRAM:
   472                           	opt stack 0
   473  00003F                     _tot:
   474                           	opt stack 0
   475  00003F                     	ds	2
   476  000041                     _operation_time:
   477                           	opt stack 0
   478  000041                     	ds	2
   479  000043                     _tin_can_label:
   480                           	opt stack 0
   481  000043                     	ds	2
   482  000045                     _tin_can:
   483                           	opt stack 0
   484  000045                     	ds	2
   485  000047                     _pop_can_tab:
   486                           	opt stack 0
   487  000047                     	ds	2
   488  000049                     _pop_can:
   489                           	opt stack 0
   490  000049                     	ds	2
   491                           tblptru	equ	0xFF8
   492                           postinc0	equ	0xFEE
   493                           wreg	equ	0xFE8
   494                           
   495                           	psect	bssBANK0
   496  0000C9                     __pbssBANK0:
   497                           	opt stack 0
   498  0000C9                     _total_second:
   499                           	opt stack 0
   500  0000C9                     	ds	2
   501                           tblptru	equ	0xFF8
   502                           postinc0	equ	0xFEE
   503                           wreg	equ	0xFE8
   504                           
   505                           	psect	cstackBANK0
   506  000080                     __pcstackBANK0:
   507                           	opt stack 0
   508  000080                     ??_initialization:
   509  000080                     ??_isdigit:
   510  000080                     ??_I2C_Master_Wait:
   511  000080                     ?___awdiv:
   512                           	opt stack 0
   513  000080                     ?___lwdiv:
   514                           	opt stack 0
   515  000080                     ?___lldiv:
   516                           	opt stack 0
   517  000080                     lcdNibble@temp:
   518                           	opt stack 0
   519  000080                     ___awdiv@dividend:
   520                           	opt stack 0
   521  000080                     ___lwdiv@dividend:
   522                           	opt stack 0
   523  000080                     ___lldiv@dividend:
   524                           	opt stack 0
   525                           
   526                           ; 4 bytes @ 0x0
   527  000080                     	ds	1
   528  000081                     I2C_Master_Read@a:
   529                           	opt stack 0
   530  000081                     lcdNibble@data:
   531                           	opt stack 0
   532  000081                     _isdigit$682:
   533                           	opt stack 0
   534  000081                     I2C_Master_Write@d:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0x1
   538  000081                     	ds	1
   539  000082                     I2C_Master_Read@temp:
   540                           	opt stack 0
   541  000082                     lcdInst@data:
   542                           	opt stack 0
   543  000082                     putch@data:
   544                           	opt stack 0
   545  000082                     initialization@i:
   546                           	opt stack 0
   547  000082                     isdigit@c:
   548                           	opt stack 0
   549  000082                     ___awdiv@divisor:
   550                           	opt stack 0
   551  000082                     ___lwdiv@divisor:
   552                           	opt stack 0
   553                           
   554                           ; 2 bytes @ 0x2
   555  000082                     	ds	1
   556  000083                     ??_initLCD:
   557  000083                     set_time@i:
   558                           	opt stack 0
   559  000083                     initialization@i_280:
   560                           	opt stack 0
   561                           
   562                           ; 1 bytes @ 0x3
   563  000083                     	ds	1
   564  000084                     initialization@i_281:
   565                           	opt stack 0
   566  000084                     ___awdiv@counter:
   567                           	opt stack 0
   568  000084                     ___lwdiv@counter:
   569                           	opt stack 0
   570  000084                     ___lldiv@divisor:
   571                           	opt stack 0
   572                           
   573                           ; 4 bytes @ 0x4
   574  000084                     	ds	1
   575  000085                     ___awdiv@sign:
   576                           	opt stack 0
   577  000085                     ___lwdiv@quotient:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x5
   581  000085                     	ds	1
   582  000086                     ___awdiv@quotient:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x6
   586  000086                     	ds	1
   587  000087                     ?___lwmod:
   588                           	opt stack 0
   589  000087                     ___lwmod@dividend:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x7
   593  000087                     	ds	1
   594  000088                     ?___wmul:
   595                           	opt stack 0
   596  000088                     ___wmul@multiplier:
   597                           	opt stack 0
   598  000088                     ___lldiv@quotient:
   599                           	opt stack 0
   600                           
   601                           ; 4 bytes @ 0x8
   602  000088                     	ds	1
   603  000089                     ___lwmod@divisor:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x9
   607  000089                     	ds	1
   608  00008A                     ___wmul@multiplicand:
   609                           	opt stack 0
   610                           
   611                           ; 2 bytes @ 0xA
   612  00008A                     	ds	1
   613  00008B                     ___lwmod@counter:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0xB
   617  00008B                     	ds	1
   618  00008C                     ___lldiv@counter:
   619                           	opt stack 0
   620  00008C                     ___wmul@product:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0xC
   624  00008C                     	ds	1
   625  00008D                     I2C_Master_Init@c:
   626                           	opt stack 0
   627                           
   628                           ; 4 bytes @ 0xD
   629  00008D                     	ds	1
   630  00008E                     ?_printf:
   631                           	opt stack 0
   632  00008E                     printf@f:
   633                           	opt stack 0
   634                           
   635                           ; 2 bytes @ 0xE
   636  00008E                     	ds	3
   637  000091                     ??_I2C_Master_Init:
   638                           
   639                           ; 1 bytes @ 0x11
   640  000091                     	ds	5
   641  000096                     ??_printf:
   642                           
   643                           ; 1 bytes @ 0x16
   644  000096                     	ds	4
   645  00009A                     printf@idx:
   646                           	opt stack 0
   647                           
   648                           ; 1 bytes @ 0x1A
   649  00009A                     	ds	1
   650  00009B                     printf@ap:
   651                           	opt stack 0
   652                           
   653                           ; 2 bytes @ 0x1B
   654  00009B                     	ds	2
   655  00009D                     printf@prec:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0x1D
   659  00009D                     	ds	1
   660  00009E                     printf@val:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x1E
   664  00009E                     	ds	2
   665  0000A0                     printf@flag:
   666                           	opt stack 0
   667                           
   668                           ; 1 bytes @ 0x20
   669  0000A0                     	ds	1
   670  0000A1                     printf@width:
   671                           	opt stack 0
   672                           
   673                           ; 2 bytes @ 0x21
   674  0000A1                     	ds	2
   675  0000A3                     printf@c:
   676                           	opt stack 0
   677                           
   678                           ; 1 bytes @ 0x23
   679  0000A3                     	ds	1
   680  0000A4                     ??_results:
   681  0000A4                     ??_startSorting:
   682                           
   683                           ; 1 bytes @ 0x24
   684  0000A4                     	ds	2
   685  0000A6                     startSorting@i:
   686                           	opt stack 0
   687  0000A6                     results@keypress:
   688                           	opt stack 0
   689                           
   690                           ; 1 bytes @ 0x26
   691  0000A6                     	ds	1
   692  0000A7                     startSorting@i_277:
   693                           	opt stack 0
   694  0000A7                     results@keypress_temp:
   695                           	opt stack 0
   696                           
   697                           ; 1 bytes @ 0x27
   698  0000A7                     	ds	1
   699  0000A8                     ?_Operate:
   700                           	opt stack 0
   701  0000A8                     results@restart_flag:
   702                           	opt stack 0
   703                           
   704                           ; 2 bytes @ 0x28
   705  0000A8                     	ds	2
   706  0000AA                     ??_Operate:
   707  0000AA                     results@i:
   708                           	opt stack 0
   709                           
   710                           ; 1 bytes @ 0x2A
   711  0000AA                     	ds	1
   712  0000AB                     results@i_295:
   713                           	opt stack 0
   714                           
   715                           ; 1 bytes @ 0x2B
   716  0000AB                     	ds	1
   717  0000AC                     results@i_297:
   718                           	opt stack 0
   719                           
   720                           ; 1 bytes @ 0x2C
   721  0000AC                     	ds	1
   722  0000AD                     results@i_301:
   723                           	opt stack 0
   724  0000AD                     Operate@total_start:
   725                           	opt stack 0
   726                           
   727                           ; 4 bytes @ 0x2D
   728  0000AD                     	ds	4
   729  0000B1                     Operate@total_end:
   730                           	opt stack 0
   731                           
   732                           ; 4 bytes @ 0x31
   733  0000B1                     	ds	4
   734  0000B5                     Operate@keypress:
   735                           	opt stack 0
   736                           
   737                           ; 1 bytes @ 0x35
   738  0000B5                     	ds	1
   739  0000B6                     Operate@keypress_temp:
   740                           	opt stack 0
   741                           
   742                           ; 1 bytes @ 0x36
   743  0000B6                     	ds	1
   744  0000B7                     Operate@SB:
   745                           	opt stack 0
   746                           
   747                           ; 2 bytes @ 0x37
   748  0000B7                     	ds	2
   749  0000B9                     _Operate$1030:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0x39
   753  0000B9                     	ds	2
   754  0000BB                     Operate@time:
   755                           	opt stack 0
   756                           
   757                           ; 7 bytes @ 0x3B
   758  0000BB                     	ds	7
   759  0000C2                     Operate@i_420:
   760                           	opt stack 0
   761                           
   762                           ; 1 bytes @ 0x42
   763  0000C2                     	ds	1
   764  0000C3                     Operate@i:
   765                           	opt stack 0
   766                           
   767                           ; 1 bytes @ 0x43
   768  0000C3                     	ds	1
   769  0000C4                     Operate@i_432:
   770                           	opt stack 0
   771                           
   772                           ; 1 bytes @ 0x44
   773  0000C4                     	ds	1
   774  0000C5                     Operate@Start_time:
   775                           	opt stack 0
   776                           
   777                           ; 2 bytes @ 0x45
   778  0000C5                     	ds	2
   779  0000C7                     Operate@End_time:
   780                           	opt stack 0
   781                           
   782                           ; 2 bytes @ 0x47
   783  0000C7                     	ds	2
   784  0000C9                     tblptru	equ	0xFF8
   785                           postinc0	equ	0xFEE
   786                           wreg	equ	0xFE8
   787                           
   788                           ; 1 bytes @ 0x49
   789                           
   790                           	psect	cstackCOMRAM
   791  000001                     __pcstackCOMRAM:
   792                           	opt stack 0
   793  000001                     ??i2_isdigit:
   794  000001                     ?___awmod:
   795                           	opt stack 0
   796  000001                     ?i2___wmul:
   797                           	opt stack 0
   798  000001                     ?i2___awdiv:
   799                           	opt stack 0
   800  000001                     ?i2___lwdiv:
   801                           	opt stack 0
   802  000001                     i2lcdNibble@temp:
   803                           	opt stack 0
   804  000001                     ___awmod@dividend:
   805                           	opt stack 0
   806  000001                     i2___wmul@multiplier:
   807                           	opt stack 0
   808  000001                     i2___awdiv@dividend:
   809                           	opt stack 0
   810  000001                     i2___lwdiv@dividend:
   811                           	opt stack 0
   812                           
   813                           ; 2 bytes @ 0x0
   814  000001                     	ds	1
   815  000002                     i2lcdNibble@data:
   816                           	opt stack 0
   817  000002                     i2_isdigit$682:
   818                           	opt stack 0
   819                           
   820                           ; 1 bytes @ 0x1
   821  000002                     	ds	1
   822  000003                     i2lcdInst@data:
   823                           	opt stack 0
   824  000003                     i2putch@data:
   825                           	opt stack 0
   826  000003                     i2isdigit@c:
   827                           	opt stack 0
   828  000003                     ___awmod@divisor:
   829                           	opt stack 0
   830  000003                     i2___wmul@multiplicand:
   831                           	opt stack 0
   832  000003                     i2___awdiv@divisor:
   833                           	opt stack 0
   834  000003                     i2___lwdiv@divisor:
   835                           	opt stack 0
   836                           
   837                           ; 2 bytes @ 0x2
   838  000003                     	ds	1
   839  000004                     ??i2_initLCD:
   840                           
   841                           ; 1 bytes @ 0x3
   842  000004                     	ds	1
   843  000005                     ___awmod@counter:
   844                           	opt stack 0
   845  000005                     i2___awdiv@counter:
   846                           	opt stack 0
   847  000005                     i2___wmul@product:
   848                           	opt stack 0
   849  000005                     i2___lwdiv@quotient:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x4
   853  000005                     	ds	1
   854  000006                     ___awmod@sign:
   855                           	opt stack 0
   856  000006                     i2___awdiv@sign:
   857                           	opt stack 0
   858                           
   859                           ; 1 bytes @ 0x5
   860  000006                     	ds	1
   861  000007                     i2___lwdiv@counter:
   862                           	opt stack 0
   863  000007                     i2___awdiv@quotient:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0x6
   867  000007                     	ds	1
   868  000008                     ?i2___lwmod:
   869                           	opt stack 0
   870  000008                     i2___lwmod@dividend:
   871                           	opt stack 0
   872                           
   873                           ; 2 bytes @ 0x7
   874  000008                     	ds	2
   875  00000A                     i2___lwmod@divisor:
   876                           	opt stack 0
   877                           
   878                           ; 2 bytes @ 0x9
   879  00000A                     	ds	2
   880  00000C                     i2___lwmod@counter:
   881                           	opt stack 0
   882                           
   883                           ; 1 bytes @ 0xB
   884  00000C                     	ds	1
   885  00000D                     ?i2_printf:
   886                           	opt stack 0
   887  00000D                     i2printf@f:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0xC
   891  00000D                     	ds	6
   892  000013                     ??i2_printf:
   893                           
   894                           ; 1 bytes @ 0x12
   895  000013                     	ds	4
   896  000017                     i2printf@idx:
   897                           	opt stack 0
   898                           
   899                           ; 1 bytes @ 0x16
   900  000017                     	ds	1
   901  000018                     i2printf@ap:
   902                           	opt stack 0
   903                           
   904                           ; 2 bytes @ 0x17
   905  000018                     	ds	2
   906  00001A                     i2printf@prec:
   907                           	opt stack 0
   908                           
   909                           ; 1 bytes @ 0x19
   910  00001A                     	ds	1
   911  00001B                     i2printf@val:
   912                           	opt stack 0
   913                           
   914                           ; 2 bytes @ 0x1A
   915  00001B                     	ds	2
   916  00001D                     i2printf@flag:
   917                           	opt stack 0
   918                           
   919                           ; 1 bytes @ 0x1C
   920  00001D                     	ds	1
   921  00001E                     i2printf@width:
   922                           	opt stack 0
   923                           
   924                           ; 2 bytes @ 0x1D
   925  00001E                     	ds	2
   926  000020                     i2printf@c:
   927                           	opt stack 0
   928                           
   929                           ; 1 bytes @ 0x1F
   930  000020                     	ds	1
   931  000021                     ??_keypressed:
   932                           
   933                           ; 1 bytes @ 0x20
   934  000021                     	ds	16
   935  000031                     keypressed@keypress:
   936                           	opt stack 0
   937                           
   938                           ; 1 bytes @ 0x30
   939  000031                     	ds	1
   940  000032                     keypressed@i:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0x31
   944  000032                     	ds	1
   945  000033                     keypressed@i_198:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0x32
   949  000033                     	ds	1
   950  000034                     keypressed@i_199:
   951                           	opt stack 0
   952                           
   953                           ; 1 bytes @ 0x33
   954  000034                     	ds	1
   955  000035                     keypressed@i_201:
   956                           	opt stack 0
   957                           
   958                           ; 1 bytes @ 0x34
   959  000035                     	ds	1
   960  000036                     keypressed@i_202:
   961                           	opt stack 0
   962                           
   963                           ; 1 bytes @ 0x35
   964  000036                     	ds	1
   965  000037                     keypressed@i_203:
   966                           	opt stack 0
   967                           
   968                           ; 1 bytes @ 0x36
   969  000037                     	ds	1
   970  000038                     keypressed@i_205:
   971                           	opt stack 0
   972                           
   973                           ; 1 bytes @ 0x37
   974  000038                     	ds	1
   975  000039                     keypressed@i_206:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0x38
   979  000039                     	ds	1
   980  00003A                     keypressed@i_207:
   981                           	opt stack 0
   982                           
   983                           ; 1 bytes @ 0x39
   984  00003A                     	ds	1
   985  00003B                     keypressed@i_209:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x3A
   989  00003B                     	ds	1
   990  00003C                     keypressed@i_210:
   991                           	opt stack 0
   992                           
   993                           ; 1 bytes @ 0x3B
   994  00003C                     	ds	1
   995  00003D                     keypressed@i_211:
   996                           	opt stack 0
   997                           
   998                           ; 1 bytes @ 0x3C
   999  00003D                     	ds	1
  1000  00003E                     keypressed@keypress_temp:
  1001                           	opt stack 0
  1002                           
  1003                           ; 1 bytes @ 0x3D
  1004  00003E                     	ds	1
  1005                           tblptru	equ	0xFF8
  1006                           postinc0	equ	0xFEE
  1007                           wreg	equ	0xFE8
  1008                           
  1009 ;;
  1010 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1011 ;;
  1012 ;; *************** function _main *****************
  1013 ;; Defined at:
  1014 ;;		line 45 in file "main.c"
  1015 ;; Parameters:    Size  Location     Type
  1016 ;;		None
  1017 ;; Auto vars:     Size  Location     Type
  1018 ;;  time            7    0        unsigned char [7]
  1019 ;; Return value:  Size  Location     Type
  1020 ;;                  1    wreg      void 
  1021 ;; Registers used:
  1022 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1023 ;; Tracked objects:
  1024 ;;		On entry : 0/0
  1025 ;;		On exit  : 0/0
  1026 ;;		Unchanged: 0/0
  1027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1032 ;;Total ram usage:        0 bytes
  1033 ;; Hardware stack levels required when called:   10
  1034 ;; This function calls:
  1035 ;;		_I2C_Master_Init
  1036 ;;		_Operate
  1037 ;;		_initLCD
  1038 ;;		_results
  1039 ;;		_set_time
  1040 ;; This function is called by:
  1041 ;;		Startup code after reset
  1042 ;; This function uses a non-reentrant model
  1043 ;;
  1044                           
  1045                           	psect	text0
  1046  0014DC                     __ptext0:
  1047                           	opt stack 0
  1048  0014DC                     _main:
  1049                           	opt stack 21
  1050                           
  1051                           ;main.c: 46: TRISA = 0xFF;
  1052                           
  1053                           ;incstack = 0
  1054  0014DC  6892               	setf	3986,c	;volatile
  1055                           
  1056                           ;main.c: 47: TRISB = 0b11110010;
  1057  0014DE  0EF2               	movlw	242
  1058  0014E0  6E93               	movwf	3987,c	;volatile
  1059                           
  1060                           ;main.c: 48: TRISC = 0x00;
  1061  0014E2  0E00               	movlw	0
  1062  0014E4  6E94               	movwf	3988,c	;volatile
  1063                           
  1064                           ;main.c: 49: TRISD = 0x00;
  1065  0014E6  0E00               	movlw	0
  1066  0014E8  6E95               	movwf	3989,c	;volatile
  1067                           
  1068                           ;main.c: 50: TRISE = 0x00;
  1069  0014EA  0E00               	movlw	0
  1070  0014EC  6E96               	movwf	3990,c	;volatile
  1071                           
  1072                           ;main.c: 52: LATB = 0x00;
  1073  0014EE  0E00               	movlw	0
  1074  0014F0  6E8A               	movwf	3978,c	;volatile
  1075                           
  1076                           ;main.c: 53: LATC = 0x00;
  1077  0014F2  0E00               	movlw	0
  1078  0014F4  6E8B               	movwf	3979,c	;volatile
  1079                           
  1080                           ;main.c: 54: ADCON0 = 0x00;
  1081  0014F6  0E00               	movlw	0
  1082  0014F8  6EC2               	movwf	4034,c	;volatile
  1083                           
  1084                           ;main.c: 55: ADCON1 = 0xFF;
  1085  0014FA  68C1               	setf	4033,c	;volatile
  1086                           
  1087                           ;main.c: 57: initLCD();
  1088  0014FC  ECC0  F00A         	call	_initLCD	;wreg free
  1089                           
  1090                           ;main.c: 58: INT1IE = 1;
  1091  001500  86F0               	bsf	intcon3,3,c	;volatile
  1092                           
  1093                           ;main.c: 60: unsigned char time[7];
  1094                           ;main.c: 61: I2C_Master_Init(10000);
  1095  001502  0E10               	movlw	16
  1096  001504  0100               	movlb	0	; () banked
  1097  001506  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  1098  001508  0E27               	movlw	39
  1099  00150A  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1100  00150C  0E00               	movlw	0
  1101  00150E  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1102  001510  0E00               	movlw	0
  1103  001512  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1104  001514  ECE5  F009         	call	_I2C_Master_Init	;wreg free
  1105                           
  1106                           ;main.c: 62: set_time();
  1107  001518  EC15  F00A         	call	_set_time	;wreg free
  1108  00151C                     l3757:
  1109                           
  1110                           ;main.c: 65: operation_time = Operate();
  1111  00151C  EC09  F000         	call	_Operate	;wreg free
  1112  001520  C0A8  F041         	movff	?_Operate,_operation_time
  1113  001524  C0A9  F042         	movff	?_Operate+1,_operation_time+1
  1114                           
  1115                           ;main.c: 67: results();
  1116  001528  ECC3  F006         	call	_results	;wreg free
  1117  00152C  D7F7               	goto	l3757
  1118  00152E                     __end_of_main:
  1119                           	opt stack 0
  1120                           tblptru	equ	0xFF8
  1121                           intcon3	equ	0xFF0
  1122                           postinc0	equ	0xFEE
  1123                           wreg	equ	0xFE8
  1124                           
  1125 ;; *************** function _set_time *****************
  1126 ;; Defined at:
  1127 ;;		line 35 in file "main.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;		None
  1130 ;; Auto vars:     Size  Location     Type
  1131 ;;  i               1    3[BANK0 ] unsigned char 
  1132 ;; Return value:  Size  Location     Type
  1133 ;;                  1    wreg      void 
  1134 ;; Registers used:
  1135 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1136 ;; Tracked objects:
  1137 ;;		On entry : 0/0
  1138 ;;		On exit  : 0/0
  1139 ;;		Unchanged: 0/0
  1140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1142 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1144 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1145 ;;Total ram usage:        1 bytes
  1146 ;; Hardware stack levels used:    1
  1147 ;; Hardware stack levels required when called:    7
  1148 ;; This function calls:
  1149 ;;		_I2C_Master_Start
  1150 ;;		_I2C_Master_Stop
  1151 ;;		_I2C_Master_Write
  1152 ;; This function is called by:
  1153 ;;		_main
  1154 ;; This function uses a non-reentrant model
  1155 ;;
  1156                           
  1157                           	psect	text1
  1158  00142A                     __ptext1:
  1159                           	opt stack 0
  1160  00142A                     _set_time:
  1161                           	opt stack 23
  1162                           
  1163                           ;main.c: 36: I2C_Master_Start();
  1164                           
  1165                           ;incstack = 0
  1166  00142A  EC37  F00C         	call	_I2C_Master_Start	;wreg free
  1167                           
  1168                           ;main.c: 37: I2C_Master_Write(0b11010000);
  1169  00142E  0E00               	movlw	0
  1170  001430  0100               	movlb	0	; () banked
  1171  001432  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1172  001434  0ED0               	movlw	208
  1173  001436  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  1174  001438  EC2E  F00C         	call	_I2C_Master_Write	;wreg free
  1175                           
  1176                           ;main.c: 38: I2C_Master_Write(0x00);
  1177  00143C  0E00               	movlw	0
  1178  00143E  0100               	movlb	0	; () banked
  1179  001440  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1180  001442  0E00               	movlw	0
  1181  001444  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  1182  001446  EC2E  F00C         	call	_I2C_Master_Write	;wreg free
  1183                           
  1184                           ;main.c: 39: for(char i=0; i<7; i++){
  1185  00144A  0E00               	movlw	0
  1186  00144C  0100               	movlb	0	; () banked
  1187  00144E  6F83               	movwf	set_time@i& (0+255),b
  1188  001450                     l3557:
  1189                           
  1190                           ; BSR set to: 0
  1191  001450  0E06               	movlw	6
  1192  001452  0100               	movlb	0	; () banked
  1193  001454  6583               	cpfsgt	set_time@i& (0+255),b
  1194  001456  D001               	goto	l3561
  1195  001458  D013               	goto	l3567
  1196  00145A                     l3561:
  1197                           
  1198                           ; BSR set to: 0
  1199                           ;main.c: 40: I2C_Master_Write(real_time[i]);
  1200  00145A  0100               	movlb	0	; () banked
  1201  00145C  5183               	movf	set_time@i& (0+255),w,b
  1202  00145E  0D01               	mullw	1
  1203  001460  0E04               	movlw	low _real_time
  1204  001462  24F3               	addwf	prodl,w,c
  1205  001464  6EF6               	movwf	tblptrl,c
  1206  001466  0EFF               	movlw	high _real_time
  1207  001468  20F4               	addwfc	prodh,w,c
  1208  00146A  6EF7               	movwf	tblptrh,c
  1209  00146C                     	if	0	;There are less than 3 active tblptr bytes
  1210  00146C                     	endif
  1211  00146C  0008               	tblrd		*
  1212  00146E  50F5               	movf	tablat,w,c
  1213  001470  0100               	movlb	0	; () banked
  1214  001472  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  1215  001474  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  1216  001476  EC2E  F00C         	call	_I2C_Master_Write	;wreg free
  1217  00147A  0100               	movlb	0	; () banked
  1218  00147C  2B83               	incf	set_time@i& (0+255),f,b
  1219  00147E  D7E8               	goto	l3557
  1220  001480                     l3567:
  1221                           
  1222                           ; BSR set to: 0
  1223                           ;main.c: 41: }
  1224                           ;main.c: 42: I2C_Master_Stop();
  1225  001480  EC33  F00C         	call	_I2C_Master_Stop	;wreg free
  1226  001484  0012               	return		;funcret
  1227  001486                     __end_of_set_time:
  1228                           	opt stack 0
  1229                           tblptru	equ	0xFF8
  1230                           tblptrh	equ	0xFF7
  1231                           tblptrl	equ	0xFF6
  1232                           tablat	equ	0xFF5
  1233                           prodh	equ	0xFF4
  1234                           prodl	equ	0xFF3
  1235                           intcon3	equ	0xFF0
  1236                           postinc0	equ	0xFEE
  1237                           wreg	equ	0xFE8
  1238                           
  1239 ;; *************** function _results *****************
  1240 ;; Defined at:
  1241 ;;		line 53 in file "Sort.c"
  1242 ;; Parameters:    Size  Location     Type
  1243 ;;		None
  1244 ;; Auto vars:     Size  Location     Type
  1245 ;;  i               1   45[BANK0 ] unsigned char 
  1246 ;;  i               1   44[BANK0 ] unsigned char 
  1247 ;;  i               1   43[BANK0 ] unsigned char 
  1248 ;;  i               1   42[BANK0 ] unsigned char 
  1249 ;;  keypress_tem    1   39[BANK0 ] unsigned char 
  1250 ;;  keypress        1   38[BANK0 ] unsigned char 
  1251 ;;  restart_flag    2   40[BANK0 ] int 
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  2  114[None  ] int 
  1254 ;; Registers used:
  1255 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1262 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1263 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1264 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1265 ;;Total ram usage:       10 bytes
  1266 ;; Hardware stack levels used:    1
  1267 ;; Hardware stack levels required when called:    8
  1268 ;; This function calls:
  1269 ;;		_initLCD
  1270 ;;		_lcdInst
  1271 ;;		_printf
  1272 ;; This function is called by:
  1273 ;;		_main
  1274 ;; This function uses a non-reentrant model
  1275 ;;
  1276                           
  1277                           	psect	text2
  1278  000D86                     __ptext2:
  1279                           	opt stack 0
  1280  000D86                     _results:
  1281                           	opt stack 22
  1282                           
  1283                           ;Sort.c: 55: int restart_flag = 0;
  1284                           
  1285                           ;incstack = 0
  1286  000D86  0E00               	movlw	0
  1287  000D88  0100               	movlb	0	; () banked
  1288  000D8A  6FA9               	movwf	(results@restart_flag+1)& (0+255),b
  1289  000D8C  0E00               	movlw	0
  1290  000D8E  D0AB               	goto	L1
  1291  000D90                     l251:
  1292                           
  1293                           ; BSR set to: 0
  1294                           ;Sort.c: 58: (INTCONbits.GIE = 0);
  1295  000D90  9EF2               	bcf	intcon,7,c	;volatile
  1296                           
  1297                           ; BSR set to: 0
  1298                           ;Sort.c: 59: lcdInst(0b10000000);;
  1299  000D92  0E80               	movlw	128
  1300  000D94  EC1A  F00C         	call	_lcdInst
  1301                           
  1302                           ;Sort.c: 60: initLCD();
  1303  000D98  ECC0  F00A         	call	_initLCD	;wreg free
  1304                           
  1305                           ;Sort.c: 61: printf("A:Total   B:Pop ");
  1306  000D9C  0E56               	movlw	low STR_10
  1307  000D9E  0100               	movlb	0	; () banked
  1308  000DA0  6F8E               	movwf	printf@f& (0+255),b
  1309  000DA2  0EFF               	movlw	high STR_10
  1310  000DA4  0100               	movlb	0	; () banked
  1311  000DA6  6F8F               	movwf	(printf@f+1)& (0+255),b
  1312  000DA8  EC00  F002         	call	_printf	;wreg free
  1313                           
  1314                           ;Sort.c: 62: lcdInst(0b11000000);;
  1315  000DAC  0EC0               	movlw	192
  1316  000DAE  EC1A  F00C         	call	_lcdInst
  1317                           
  1318                           ;Sort.c: 63: printf("C:Tin     D:Time");
  1319  000DB2  0E67               	movlw	low STR_11
  1320  000DB4  0100               	movlb	0	; () banked
  1321  000DB6  6F8E               	movwf	printf@f& (0+255),b
  1322  000DB8  0EFF               	movlw	high STR_11
  1323  000DBA  0100               	movlb	0	; () banked
  1324  000DBC  6F8F               	movwf	(printf@f+1)& (0+255),b
  1325  000DBE  EC00  F002         	call	_printf	;wreg free
  1326                           
  1327                           ;Sort.c: 64: (INTCONbits.GIE = 1);
  1328  000DC2  8EF2               	bsf	intcon,7,c	;volatile
  1329                           
  1330                           ;Sort.c: 65: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)));};
  1331  000DC4  0E00               	movlw	0
  1332  000DC6  0100               	movlb	0	; () banked
  1333  000DC8  6FAA               	movwf	results@i& (0+255),b
  1334  000DCA                     l3683:
  1335                           
  1336                           ; BSR set to: 0
  1337  000DCA  0E09               	movlw	9
  1338  000DCC  0100               	movlb	0	; () banked
  1339  000DCE  65AA               	cpfsgt	results@i& (0+255),b
  1340  000DD0  D001               	goto	l3687
  1341  000DD2  D010               	goto	l3691
  1342  000DD4                     l3687:
  1343                           
  1344                           ; BSR set to: 0
  1345  000DD4  0E02               	movlw	2
  1346  000DD6  0100               	movlb	0	; () banked
  1347  000DD8  6FA5               	movwf	(??_results+1)& (0+255),b
  1348  000DDA  0E3F               	movlw	63
  1349  000DDC  0100               	movlb	0	; () banked
  1350  000DDE  6FA4               	movwf	??_results& (0+255),b
  1351  000DE0  0E2B               	movlw	43
  1352  000DE2                     u3777:
  1353  000DE2  2EE8               	decfsz	wreg,f,c
  1354  000DE4  D7FE               	bra	u3777
  1355  000DE6  2FA4               	decfsz	??_results& (0+255),f,b
  1356  000DE8  D7FC               	bra	u3777
  1357  000DEA  2FA5               	decfsz	(??_results+1)& (0+255),f,b
  1358  000DEC  D7FA               	bra	u3777
  1359  000DEE  0100               	movlb	0	; () banked
  1360  000DF0  2BAA               	incf	results@i& (0+255),f,b
  1361  000DF2  D7EB               	goto	l3683
  1362  000DF4                     l3691:
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;Sort.c: 66: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)));};
  1366  000DF4  0E00               	movlw	0
  1367  000DF6  0100               	movlb	0	; () banked
  1368  000DF8  6FAB               	movwf	results@i_295& (0+255),b
  1369  000DFA                     l3693:
  1370                           
  1371                           ; BSR set to: 0
  1372  000DFA  0E09               	movlw	9
  1373  000DFC  0100               	movlb	0	; () banked
  1374  000DFE  65AB               	cpfsgt	results@i_295& (0+255),b
  1375  000E00  D001               	goto	l3697
  1376  000E02  D010               	goto	l255
  1377  000E04                     l3697:
  1378                           
  1379                           ; BSR set to: 0
  1380  000E04  0E02               	movlw	2
  1381  000E06  0100               	movlb	0	; () banked
  1382  000E08  6FA5               	movwf	(??_results+1)& (0+255),b
  1383  000E0A  0E3F               	movlw	63
  1384  000E0C  0100               	movlb	0	; () banked
  1385  000E0E  6FA4               	movwf	??_results& (0+255),b
  1386  000E10  0E2B               	movlw	43
  1387  000E12                     u3787:
  1388  000E12  2EE8               	decfsz	wreg,f,c
  1389  000E14  D7FE               	bra	u3787
  1390  000E16  2FA4               	decfsz	??_results& (0+255),f,b
  1391  000E18  D7FC               	bra	u3787
  1392  000E1A  2FA5               	decfsz	(??_results+1)& (0+255),f,b
  1393  000E1C  D7FA               	bra	u3787
  1394  000E1E  0100               	movlb	0	; () banked
  1395  000E20  2BAB               	incf	results@i_295& (0+255),f,b
  1396  000E22  D7EB               	goto	l3693
  1397  000E24                     l255:
  1398                           
  1399                           ; BSR set to: 0
  1400                           ;Sort.c: 68: (INTCONbits.GIE = 0);
  1401  000E24  9EF2               	bcf	intcon,7,c	;volatile
  1402                           
  1403                           ; BSR set to: 0
  1404                           ;Sort.c: 69: lcdInst(0b10000000);;
  1405  000E26  0E80               	movlw	128
  1406  000E28  EC1A  F00C         	call	_lcdInst
  1407                           
  1408                           ;Sort.c: 70: initLCD();
  1409  000E2C  ECC0  F00A         	call	_initLCD	;wreg free
  1410                           
  1411                           ;Sort.c: 71: printf("Press 0 to Reset");
  1412  000E30  0E78               	movlw	low STR_12
  1413  000E32  0100               	movlb	0	; () banked
  1414  000E34  6F8E               	movwf	printf@f& (0+255),b
  1415  000E36  0EFF               	movlw	high STR_12
  1416  000E38  0100               	movlb	0	; () banked
  1417  000E3A  6F8F               	movwf	(printf@f+1)& (0+255),b
  1418  000E3C  EC00  F002         	call	_printf	;wreg free
  1419                           
  1420                           ;Sort.c: 72: (INTCONbits.GIE = 1);
  1421  000E40  8EF2               	bsf	intcon,7,c	;volatile
  1422                           
  1423                           ;Sort.c: 73: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)));};
  1424  000E42  0E00               	movlw	0
  1425  000E44  0100               	movlb	0	; () banked
  1426  000E46  6FAC               	movwf	results@i_297& (0+255),b
  1427  000E48                     l3709:
  1428                           
  1429                           ; BSR set to: 0
  1430  000E48  0E09               	movlw	9
  1431  000E4A  0100               	movlb	0	; () banked
  1432  000E4C  65AC               	cpfsgt	results@i_297& (0+255),b
  1433  000E4E  D001               	goto	l3713
  1434  000E50  D010               	goto	l3717
  1435  000E52                     l3713:
  1436                           
  1437                           ; BSR set to: 0
  1438  000E52  0E02               	movlw	2
  1439  000E54  0100               	movlb	0	; () banked
  1440  000E56  6FA5               	movwf	(??_results+1)& (0+255),b
  1441  000E58  0E3F               	movlw	63
  1442  000E5A  0100               	movlb	0	; () banked
  1443  000E5C  6FA4               	movwf	??_results& (0+255),b
  1444  000E5E  0E2B               	movlw	43
  1445  000E60                     u3797:
  1446  000E60  2EE8               	decfsz	wreg,f,c
  1447  000E62  D7FE               	bra	u3797
  1448  000E64  2FA4               	decfsz	??_results& (0+255),f,b
  1449  000E66  D7FC               	bra	u3797
  1450  000E68  2FA5               	decfsz	(??_results+1)& (0+255),f,b
  1451  000E6A  D7FA               	bra	u3797
  1452  000E6C  0100               	movlb	0	; () banked
  1453  000E6E  2BAC               	incf	results@i_297& (0+255),f,b
  1454  000E70  D7EB               	goto	l3709
  1455  000E72                     l3717:
  1456                           
  1457                           ; BSR set to: 0
  1458                           ;Sort.c: 75: unsigned char keypress = (PORTB & 0xF0) >> 4;
  1459  000E72  3881               	swapf	3969,w,c	;volatile
  1460  000E74  0B0F               	andlw	15
  1461  000E76  0B0F               	andlw	15
  1462  000E78  0100               	movlb	0	; () banked
  1463  000E7A  6FA6               	movwf	results@keypress& (0+255),b
  1464                           
  1465                           ; BSR set to: 0
  1466                           ;Sort.c: 76: unsigned char keypress_temp = keys[keypress];
  1467  000E7C  0100               	movlb	0	; () banked
  1468  000E7E  51A6               	movf	results@keypress& (0+255),w,b
  1469  000E80  0D01               	mullw	1
  1470  000E82  0EE1               	movlw	low _keys
  1471  000E84  24F3               	addwf	prodl,w,c
  1472  000E86  6EF6               	movwf	tblptrl,c
  1473  000E88  0EFE               	movlw	high _keys
  1474  000E8A  20F4               	addwfc	prodh,w,c
  1475  000E8C  6EF7               	movwf	tblptrh,c
  1476  000E8E                     	if	0	;There are less than 3 active tblptr bytes
  1477  000E8E                     	endif
  1478  000E8E  0008               	tblrd		*
  1479  000E90  CFF5 F0A7          	movff	tablat,results@keypress_temp
  1480                           
  1481                           ; BSR set to: 0
  1482                           ;Sort.c: 78: if(keypress_temp == '0'){
  1483  000E94  0E30               	movlw	48
  1484  000E96  0100               	movlb	0	; () banked
  1485  000E98  19A7               	xorwf	results@keypress_temp& (0+255),w,b
  1486  000E9A  A4D8               	btfss	status,2,c
  1487  000E9C  D025               	goto	l3737
  1488                           
  1489                           ; BSR set to: 0
  1490                           ;Sort.c: 79: printf("Restart");
  1491  000E9E  0EF7               	movlw	low STR_13
  1492  000EA0  0100               	movlb	0	; () banked
  1493  000EA2  6F8E               	movwf	printf@f& (0+255),b
  1494  000EA4  0EFF               	movlw	high STR_13
  1495  000EA6  0100               	movlb	0	; () banked
  1496  000EA8  6F8F               	movwf	(printf@f+1)& (0+255),b
  1497  000EAA  EC00  F002         	call	_printf	;wreg free
  1498                           
  1499                           ;Sort.c: 80: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)));};
  1500  000EAE  0E00               	movlw	0
  1501  000EB0  0100               	movlb	0	; () banked
  1502  000EB2  6FAD               	movwf	results@i_301& (0+255),b
  1503  000EB4                     l3727:
  1504                           
  1505                           ; BSR set to: 0
  1506  000EB4  0E09               	movlw	9
  1507  000EB6  0100               	movlb	0	; () banked
  1508  000EB8  65AD               	cpfsgt	results@i_301& (0+255),b
  1509  000EBA  D001               	goto	l3731
  1510  000EBC  D010               	goto	l3735
  1511  000EBE                     l3731:
  1512                           
  1513                           ; BSR set to: 0
  1514  000EBE  0E02               	movlw	2
  1515  000EC0  0100               	movlb	0	; () banked
  1516  000EC2  6FA5               	movwf	(??_results+1)& (0+255),b
  1517  000EC4  0E3F               	movlw	63
  1518  000EC6  0100               	movlb	0	; () banked
  1519  000EC8  6FA4               	movwf	??_results& (0+255),b
  1520  000ECA  0E2B               	movlw	43
  1521  000ECC                     u3807:
  1522  000ECC  2EE8               	decfsz	wreg,f,c
  1523  000ECE  D7FE               	bra	u3807
  1524  000ED0  2FA4               	decfsz	??_results& (0+255),f,b
  1525  000ED2  D7FC               	bra	u3807
  1526  000ED4  2FA5               	decfsz	(??_results+1)& (0+255),f,b
  1527  000ED6  D7FA               	bra	u3807
  1528  000ED8  0100               	movlb	0	; () banked
  1529  000EDA  2BAD               	incf	results@i_301& (0+255),f,b
  1530  000EDC  D7EB               	goto	l3727
  1531  000EDE                     l3735:
  1532                           
  1533                           ; BSR set to: 0
  1534                           ;Sort.c: 81: restart_flag = 1;
  1535  000EDE  0E00               	movlw	0
  1536  000EE0  0100               	movlb	0	; () banked
  1537  000EE2  6FA9               	movwf	(results@restart_flag+1)& (0+255),b
  1538  000EE4  0E01               	movlw	1
  1539  000EE6                     L1:
  1540  000EE6  6FA8               	movwf	results@restart_flag& (0+255),b
  1541  000EE8                     l3737:
  1542                           
  1543                           ; BSR set to: 0
  1544  000EE8  0100               	movlb	0	; () banked
  1545  000EEA  51A8               	movf	results@restart_flag& (0+255),w,b
  1546  000EEC  0100               	movlb	0	; () banked
  1547  000EEE  11A9               	iorwf	(results@restart_flag+1)& (0+255),w,b
  1548  000EF0  A4D8               	btfss	status,2,c
  1549  000EF2  0012               	return	
  1550  000EF4  D74D               	goto	l251
  1551  000EF6                     __end_of_results:
  1552                           	opt stack 0
  1553                           tblptru	equ	0xFF8
  1554                           tblptrh	equ	0xFF7
  1555                           tblptrl	equ	0xFF6
  1556                           tablat	equ	0xFF5
  1557                           prodh	equ	0xFF4
  1558                           prodl	equ	0xFF3
  1559                           intcon	equ	0xFF2
  1560                           intcon3	equ	0xFF0
  1561                           postinc0	equ	0xFEE
  1562                           wreg	equ	0xFE8
  1563                           status	equ	0xFD8
  1564                           
  1565 ;; *************** function _Operate *****************
  1566 ;; Defined at:
  1567 ;;		line 21 in file "Operate.c"
  1568 ;; Parameters:    Size  Location     Type
  1569 ;;		None
  1570 ;; Auto vars:     Size  Location     Type
  1571 ;;  i               1   66[BANK0 ] unsigned char 
  1572 ;;  i               1   67[BANK0 ] unsigned char 
  1573 ;;  i               1   68[BANK0 ] unsigned char 
  1574 ;;  keypress_tem    1   54[BANK0 ] unsigned char 
  1575 ;;  keypress        1   53[BANK0 ] unsigned char 
  1576 ;;  time            7   59[BANK0 ] unsigned char [7]
  1577 ;;  total_end       4   49[BANK0 ] unsigned long 
  1578 ;;  total_start     4   45[BANK0 ] unsigned long 
  1579 ;;  End_time        2   71[BANK0 ] unsigned char [2]
  1580 ;;  Start_time      2   69[BANK0 ] unsigned char [2]
  1581 ;;  SB              2   55[BANK0 ] int 
  1582 ;; Return value:  Size  Location     Type
  1583 ;;                  2   40[BANK0 ] int 
  1584 ;; Registers used:
  1585 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1586 ;; Tracked objects:
  1587 ;;		On entry : 0/0
  1588 ;;		On exit  : 0/0
  1589 ;;		Unchanged: 0/0
  1590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1591 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1592 ;;      Locals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1593 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1594 ;;      Totals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1595 ;;Total ram usage:       33 bytes
  1596 ;; Hardware stack levels used:    1
  1597 ;; Hardware stack levels required when called:    9
  1598 ;; This function calls:
  1599 ;;		_I2C_Master_Read
  1600 ;;		_I2C_Master_Start
  1601 ;;		_I2C_Master_Stop
  1602 ;;		_I2C_Master_Write
  1603 ;;		___awdiv
  1604 ;;		___wmul
  1605 ;;		_initLCD
  1606 ;;		_lcdInst
  1607 ;;		_printf
  1608 ;;		_startSorting
  1609 ;; This function is called by:
  1610 ;;		_main
  1611 ;; This function uses a non-reentrant model
  1612 ;;
  1613                           
  1614                           	psect	text3
  1615  000012                     __ptext3:
  1616                           	opt stack 0
  1617  000012                     _Operate:
  1618                           	opt stack 21
  1619                           
  1620                           ;Operate.c: 23: unsigned char Start_time[2];
  1621                           ;Operate.c: 24: unsigned char End_time[2];
  1622                           ;Operate.c: 25: unsigned long total_start, total_end;
  1623                           ;Operate.c: 27: initLCD();
  1624                           
  1625                           ; BSR set to: 0
  1626                           ;incstack = 0
  1627  000012  ECC0  F00A         	call	_initLCD	;wreg free
  1628                           
  1629                           ;Operate.c: 28: unsigned char time[7];
  1630                           ;Operate.c: 30: (INTCONbits.GIE = 0);
  1631  000016  9EF2               	bcf	intcon,7,c	;volatile
  1632                           
  1633                           ;Operate.c: 32: int SB = 1;
  1634  000018  0E00               	movlw	0
  1635  00001A  0100               	movlb	0	; () banked
  1636  00001C  6FB8               	movwf	(Operate@SB+1)& (0+255),b
  1637  00001E  0E01               	movlw	1
  1638  000020  D0A6               	goto	L2
  1639  000022                     l3575:
  1640                           
  1641                           ; BSR set to: 0
  1642                           ;Operate.c: 35: I2C_Master_Start();
  1643  000022  EC37  F00C         	call	_I2C_Master_Start	;wreg free
  1644                           
  1645                           ;Operate.c: 36: I2C_Master_Write(0b11010000);
  1646  000026  0E00               	movlw	0
  1647  000028  0100               	movlb	0	; () banked
  1648  00002A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1649  00002C  0ED0               	movlw	208
  1650  00002E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  1651  000030  EC2E  F00C         	call	_I2C_Master_Write	;wreg free
  1652                           
  1653                           ;Operate.c: 37: I2C_Master_Write(0x00);
  1654  000034  0E00               	movlw	0
  1655  000036  0100               	movlb	0	; () banked
  1656  000038  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1657  00003A  0E00               	movlw	0
  1658  00003C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  1659  00003E  EC2E  F00C         	call	_I2C_Master_Write	;wreg free
  1660                           
  1661                           ;Operate.c: 38: I2C_Master_Stop();
  1662  000042  EC33  F00C         	call	_I2C_Master_Stop	;wreg free
  1663                           
  1664                           ;Operate.c: 41: I2C_Master_Start();
  1665  000046  EC37  F00C         	call	_I2C_Master_Start	;wreg free
  1666                           
  1667                           ;Operate.c: 42: I2C_Master_Write(0b11010001);
  1668  00004A  0E00               	movlw	0
  1669  00004C  0100               	movlb	0	; () banked
  1670  00004E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1671  000050  0ED1               	movlw	209
  1672  000052  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  1673  000054  EC2E  F00C         	call	_I2C_Master_Write	;wreg free
  1674                           
  1675                           ;Operate.c: 43: for(unsigned char i=0;i<0x06;i++){
  1676  000058  0E00               	movlw	0
  1677  00005A  0100               	movlb	0	; () banked
  1678  00005C  6FC3               	movwf	Operate@i& (0+255),b
  1679  00005E                     l3579:
  1680                           
  1681                           ; BSR set to: 0
  1682  00005E  0E05               	movlw	5
  1683  000060  0100               	movlb	0	; () banked
  1684  000062  65C3               	cpfsgt	Operate@i& (0+255),b
  1685  000064  D001               	goto	l3583
  1686  000066  D010               	goto	l3589
  1687  000068                     l3583:
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;Operate.c: 44: time[i] = I2C_Master_Read(1);
  1691  000068  0100               	movlb	0	; () banked
  1692  00006A  51C3               	movf	Operate@i& (0+255),w,b
  1693  00006C  0D01               	mullw	1
  1694  00006E  0EBB               	movlw	low Operate@time
  1695  000070  24F3               	addwf	prodl,w,c
  1696  000072  6ED9               	movwf	fsr2l,c
  1697  000074  0E00               	movlw	high Operate@time
  1698  000076  20F4               	addwfc	prodh,w,c
  1699  000078  6EDA               	movwf	fsr2h,c
  1700  00007A  0E01               	movlw	1
  1701  00007C  EC9D  F00B         	call	_I2C_Master_Read
  1702  000080  6EDF               	movwf	indf2,c
  1703  000082  0100               	movlb	0	; () banked
  1704  000084  2BC3               	incf	Operate@i& (0+255),f,b
  1705  000086  D7EB               	goto	l3579
  1706  000088                     l3589:
  1707                           
  1708                           ; BSR set to: 0
  1709                           ;Operate.c: 45: }
  1710                           ;Operate.c: 46: time[6] = I2C_Master_Read(0);
  1711  000088  0E00               	movlw	0
  1712  00008A  EC9D  F00B         	call	_I2C_Master_Read
  1713  00008E  0100               	movlb	0	; () banked
  1714  000090  6FC1               	movwf	(Operate@time+6)& (0+255),b
  1715                           
  1716                           ;Operate.c: 47: I2C_Master_Stop();
  1717  000092  EC33  F00C         	call	_I2C_Master_Stop	;wreg free
  1718                           
  1719                           ;Operate.c: 49: lcdInst(0b10000000);;
  1720  000096  0E80               	movlw	128
  1721  000098  EC1A  F00C         	call	_lcdInst
  1722                           
  1723                           ;Operate.c: 50: printf("%02x/%02x   ",time[5],time[4]);
  1724  00009C  0EC7               	movlw	low STR_14
  1725  00009E  0100               	movlb	0	; () banked
  1726  0000A0  6F8E               	movwf	printf@f& (0+255),b
  1727  0000A2  0EFF               	movlw	high STR_14
  1728  0000A4  0100               	movlb	0	; () banked
  1729  0000A6  6F8F               	movwf	(printf@f+1)& (0+255),b
  1730  0000A8  C0C0  F090         	movff	Operate@time+5,?_printf+2
  1731  0000AC  0100               	movlb	0	; () banked
  1732  0000AE  6B91               	clrf	(?_printf+3)& (0+255),b
  1733  0000B0  C0BF  F092         	movff	Operate@time+4,?_printf+4
  1734  0000B4  0100               	movlb	0	; () banked
  1735  0000B6  6B93               	clrf	(?_printf+5)& (0+255),b
  1736  0000B8  EC00  F002         	call	_printf	;wreg free
  1737                           
  1738                           ;Operate.c: 51: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  1739  0000BC  0E9A               	movlw	low STR_15
  1740  0000BE  0100               	movlb	0	; () banked
  1741  0000C0  6F8E               	movwf	printf@f& (0+255),b
  1742  0000C2  0EFF               	movlw	high STR_15
  1743  0000C4  0100               	movlb	0	; () banked
  1744  0000C6  6F8F               	movwf	(printf@f+1)& (0+255),b
  1745  0000C8  C0BD  F090         	movff	Operate@time+2,?_printf+2
  1746  0000CC  0100               	movlb	0	; () banked
  1747  0000CE  6B91               	clrf	(?_printf+3)& (0+255),b
  1748  0000D0  C0BC  F092         	movff	Operate@time+1,?_printf+4
  1749  0000D4  0100               	movlb	0	; () banked
  1750  0000D6  6B93               	clrf	(?_printf+5)& (0+255),b
  1751  0000D8  C0BB  F094         	movff	Operate@time,?_printf+6
  1752  0000DC  0100               	movlb	0	; () banked
  1753  0000DE  6B95               	clrf	(?_printf+7)& (0+255),b
  1754  0000E0  EC00  F002         	call	_printf	;wreg free
  1755                           
  1756                           ;Operate.c: 53: lcdInst(0b11000000);;
  1757  0000E4  0EC0               	movlw	192
  1758  0000E6  EC1A  F00C         	call	_lcdInst
  1759                           
  1760                           ;Operate.c: 54: printf("Press # to Start");
  1761  0000EA  0E45               	movlw	low STR_16
  1762  0000EC  0100               	movlb	0	; () banked
  1763  0000EE  6F8E               	movwf	printf@f& (0+255),b
  1764  0000F0  0EFF               	movlw	high STR_16
  1765  0000F2  0100               	movlb	0	; () banked
  1766  0000F4  6F8F               	movwf	(printf@f+1)& (0+255),b
  1767  0000F6  EC00  F002         	call	_printf	;wreg free
  1768                           
  1769                           ;Operate.c: 55: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)));}
      +                          ;
  1770  0000FA  0E00               	movlw	0
  1771  0000FC  0100               	movlb	0	; () banked
  1772  0000FE  6FC2               	movwf	Operate@i_420& (0+255),b
  1773  000100                     l3599:
  1774                           
  1775                           ; BSR set to: 0
  1776  000100  0E09               	movlw	9
  1777  000102  0100               	movlb	0	; () banked
  1778  000104  65C2               	cpfsgt	Operate@i_420& (0+255),b
  1779  000106  D001               	goto	l3603
  1780  000108  D010               	goto	l3607
  1781  00010A                     l3603:
  1782                           
  1783                           ; BSR set to: 0
  1784  00010A  0E02               	movlw	2
  1785  00010C  0100               	movlb	0	; () banked
  1786  00010E  6FAB               	movwf	(??_Operate+1)& (0+255),b
  1787  000110  0E3F               	movlw	63
  1788  000112  0100               	movlb	0	; () banked
  1789  000114  6FAA               	movwf	??_Operate& (0+255),b
  1790  000116  0E2B               	movlw	43
  1791  000118                     u3817:
  1792  000118  2EE8               	decfsz	wreg,f,c
  1793  00011A  D7FE               	bra	u3817
  1794  00011C  2FAA               	decfsz	??_Operate& (0+255),f,b
  1795  00011E  D7FC               	bra	u3817
  1796  000120  2FAB               	decfsz	(??_Operate+1)& (0+255),f,b
  1797  000122  D7FA               	bra	u3817
  1798  000124  0100               	movlb	0	; () banked
  1799  000126  2BC2               	incf	Operate@i_420& (0+255),f,b
  1800  000128  D7EB               	goto	l3599
  1801  00012A                     l3607:
  1802                           
  1803                           ; BSR set to: 0
  1804                           ;Operate.c: 58: unsigned char keypress = (PORTB & 0xF0) >> 4;
  1805  00012A  3881               	swapf	3969,w,c	;volatile
  1806  00012C  0B0F               	andlw	15
  1807  00012E  0B0F               	andlw	15
  1808  000130  0100               	movlb	0	; () banked
  1809  000132  6FB5               	movwf	Operate@keypress& (0+255),b
  1810  000134                     l299:
  1811  000134  B281               	btfsc	3969,1,c	;volatile
  1812  000136  D7FE               	goto	l299
  1813                           
  1814                           ;Operate.c: 61: }
  1815                           ;Operate.c: 62: unsigned char keypress_temp = keys[keypress];
  1816  000138  0100               	movlb	0	; () banked
  1817  00013A  51B5               	movf	Operate@keypress& (0+255),w,b
  1818  00013C  0D01               	mullw	1
  1819  00013E  0EE1               	movlw	low _keys
  1820  000140  24F3               	addwf	prodl,w,c
  1821  000142  6EF6               	movwf	tblptrl,c
  1822  000144  0EFE               	movlw	high _keys
  1823  000146  20F4               	addwfc	prodh,w,c
  1824  000148  6EF7               	movwf	tblptrh,c
  1825  00014A                     	if	0	;There are less than 3 active tblptr bytes
  1826  00014A                     	endif
  1827  00014A  0008               	tblrd		*
  1828  00014C  CFF5 F0B6          	movff	tablat,Operate@keypress_temp
  1829                           
  1830                           ; BSR set to: 0
  1831                           ;Operate.c: 64: if(keypress_temp == '#'){
  1832  000150  0E23               	movlw	35
  1833  000152  0100               	movlb	0	; () banked
  1834  000154  19B6               	xorwf	Operate@keypress_temp& (0+255),w,b
  1835  000156  A4D8               	btfss	status,2,c
  1836  000158  D00B               	goto	l3617
  1837                           
  1838                           ; BSR set to: 0
  1839                           ;Operate.c: 66: Start_time[2] = time[2];
  1840  00015A  C0BD  F0C7         	movff	Operate@time+2,Operate@Start_time+2
  1841                           
  1842                           ;Operate.c: 67: Start_time[1] = time[1];
  1843  00015E  C0BC  F0C6         	movff	Operate@time+1,Operate@Start_time+1
  1844                           
  1845                           ;Operate.c: 68: Start_time[0] = time[0];
  1846  000162  C0BB  F0C5         	movff	Operate@time,Operate@Start_time
  1847                           
  1848                           ; BSR set to: 0
  1849                           ;Operate.c: 69: SB = 0;
  1850  000166  0E00               	movlw	0
  1851  000168  0100               	movlb	0	; () banked
  1852  00016A  6FB8               	movwf	(Operate@SB+1)& (0+255),b
  1853  00016C  0E00               	movlw	0
  1854  00016E                     L2:
  1855  00016E  6FB7               	movwf	Operate@SB& (0+255),b
  1856  000170                     l3617:
  1857                           
  1858                           ; BSR set to: 0
  1859  000170  0100               	movlb	0	; () banked
  1860  000172  05B7               	decf	Operate@SB& (0+255),w,b
  1861  000174  0100               	movlb	0	; () banked
  1862  000176  11B8               	iorwf	(Operate@SB+1)& (0+255),w,b
  1863  000178  B4D8               	btfsc	status,2,c
  1864  00017A  D753               	goto	l3575
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;Operate.c: 70: }
  1868                           ;Operate.c: 71: }
  1869                           ;Operate.c: 73: startSorting();
  1870                           
  1871                           ; BSR set to: 0
  1872  00017C  EC38  F008         	call	_startSorting	;wreg free
  1873                           
  1874                           ;Operate.c: 75: I2C_Master_Start();
  1875  000180  EC37  F00C         	call	_I2C_Master_Start	;wreg free
  1876                           
  1877                           ;Operate.c: 76: I2C_Master_Write(0b11010000);
  1878  000184  0E00               	movlw	0
  1879  000186  0100               	movlb	0	; () banked
  1880  000188  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1881  00018A  0ED0               	movlw	208
  1882  00018C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  1883  00018E  EC2E  F00C         	call	_I2C_Master_Write	;wreg free
  1884                           
  1885                           ;Operate.c: 77: I2C_Master_Write(0x00);
  1886  000192  0E00               	movlw	0
  1887  000194  0100               	movlb	0	; () banked
  1888  000196  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1889  000198  0E00               	movlw	0
  1890  00019A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  1891  00019C  EC2E  F00C         	call	_I2C_Master_Write	;wreg free
  1892                           
  1893                           ;Operate.c: 78: I2C_Master_Stop();
  1894  0001A0  EC33  F00C         	call	_I2C_Master_Stop	;wreg free
  1895                           
  1896                           ;Operate.c: 81: I2C_Master_Start();
  1897  0001A4  EC37  F00C         	call	_I2C_Master_Start	;wreg free
  1898                           
  1899                           ;Operate.c: 82: I2C_Master_Write(0b11010001);
  1900  0001A8  0E00               	movlw	0
  1901  0001AA  0100               	movlb	0	; () banked
  1902  0001AC  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1903  0001AE  0ED1               	movlw	209
  1904  0001B0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  1905  0001B2  EC2E  F00C         	call	_I2C_Master_Write	;wreg free
  1906                           
  1907                           ;Operate.c: 83: for(unsigned char i=0;i<0x06;i++){
  1908  0001B6  0E00               	movlw	0
  1909  0001B8  0100               	movlb	0	; () banked
  1910  0001BA  6FC4               	movwf	Operate@i_432& (0+255),b
  1911  0001BC                     l3635:
  1912                           
  1913                           ; BSR set to: 0
  1914  0001BC  0E05               	movlw	5
  1915  0001BE  0100               	movlb	0	; () banked
  1916  0001C0  65C4               	cpfsgt	Operate@i_432& (0+255),b
  1917  0001C2  D001               	goto	l3639
  1918  0001C4  D010               	goto	l3645
  1919  0001C6                     l3639:
  1920                           
  1921                           ; BSR set to: 0
  1922                           ;Operate.c: 84: time[i] = I2C_Master_Read(1);
  1923  0001C6  0100               	movlb	0	; () banked
  1924  0001C8  51C4               	movf	Operate@i_432& (0+255),w,b
  1925  0001CA  0D01               	mullw	1
  1926  0001CC  0EBB               	movlw	low Operate@time
  1927  0001CE  24F3               	addwf	prodl,w,c
  1928  0001D0  6ED9               	movwf	fsr2l,c
  1929  0001D2  0E00               	movlw	high Operate@time
  1930  0001D4  20F4               	addwfc	prodh,w,c
  1931  0001D6  6EDA               	movwf	fsr2h,c
  1932  0001D8  0E01               	movlw	1
  1933  0001DA  EC9D  F00B         	call	_I2C_Master_Read
  1934  0001DE  6EDF               	movwf	indf2,c
  1935  0001E0  0100               	movlb	0	; () banked
  1936  0001E2  2BC4               	incf	Operate@i_432& (0+255),f,b
  1937  0001E4  D7EB               	goto	l3635
  1938  0001E6                     l3645:
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;Operate.c: 85: }
  1942                           ;Operate.c: 86: time[6] = I2C_Master_Read(0);
  1943  0001E6  0E00               	movlw	0
  1944  0001E8  EC9D  F00B         	call	_I2C_Master_Read
  1945  0001EC  0100               	movlb	0	; () banked
  1946  0001EE  6FC1               	movwf	(Operate@time+6)& (0+255),b
  1947                           
  1948                           ;Operate.c: 87: I2C_Master_Stop();
  1949  0001F0  EC33  F00C         	call	_I2C_Master_Stop	;wreg free
  1950                           
  1951                           ;Operate.c: 89: End_time[2] = time[2];
  1952  0001F4  C0BD  F0C9         	movff	Operate@time+2,Operate@End_time+2
  1953                           
  1954                           ;Operate.c: 90: End_time[1] = time[1];
  1955  0001F8  C0BC  F0C8         	movff	Operate@time+1,Operate@End_time+1
  1956                           
  1957                           ;Operate.c: 91: End_time[0] = time[0];
  1958  0001FC  C0BB  F0C7         	movff	Operate@time,Operate@End_time
  1959                           
  1960                           ;Operate.c: 93: total_start = (Start_time[1]/16*10 + Start_time[1]%16)*60 + (Start_time[
      +                          0]/16*10 + Start_time[0]%16);
  1961  000200  C0C6  F0AA         	movff	Operate@Start_time+1,??_Operate
  1962  000204  0E0F               	movlw	15
  1963  000206  0100               	movlb	0	; () banked
  1964  000208  17AA               	andwf	??_Operate& (0+255),f,b
  1965  00020A  0E00               	movlw	0
  1966  00020C  0100               	movlb	0	; () banked
  1967  00020E  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1968  000210  0E10               	movlw	16
  1969  000212  6F82               	movwf	___awdiv@divisor& (0+255),b
  1970  000214  C0C6  F080         	movff	Operate@Start_time+1,___awdiv@dividend
  1971  000218  0100               	movlb	0	; () banked
  1972  00021A  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  1973  00021C  EC7B  F007         	call	___awdiv	;wreg free
  1974  000220  C080  F088         	movff	?___awdiv,___wmul@multiplier
  1975  000224  C081  F089         	movff	?___awdiv+1,___wmul@multiplier+1
  1976  000228  0E00               	movlw	0
  1977  00022A  0100               	movlb	0	; () banked
  1978  00022C  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1979  00022E  0E0A               	movlw	10
  1980  000230  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  1981  000232  EC4E  F00B         	call	___wmul	;wreg free
  1982  000236  0100               	movlb	0	; () banked
  1983  000238  51AA               	movf	??_Operate& (0+255),w,b
  1984  00023A  0100               	movlb	0	; () banked
  1985  00023C  2588               	addwf	?___wmul& (0+255),w,b
  1986  00023E  0100               	movlb	0	; () banked
  1987  000240  6FB9               	movwf	_Operate$1030& (0+255),b
  1988  000242  0100               	movlb	0	; () banked
  1989  000244  0E00               	movlw	0
  1990  000246  0100               	movlb	0	; () banked
  1991  000248  2189               	addwfc	(?___wmul+1)& (0+255),w,b
  1992  00024A  0100               	movlb	0	; () banked
  1993  00024C  6FBA               	movwf	(_Operate$1030+1)& (0+255),b
  1994                           
  1995                           ; BSR set to: 0
  1996                           ;Operate.c: 93: total_start = (Start_time[1]/16*10 + Start_time[1]%16)*60 + (Start_time[
      +                          0]/16*10 + Start_time[0]%16);
  1997  00024E  0E00               	movlw	0
  1998  000250  0100               	movlb	0	; () banked
  1999  000252  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  2000  000254  0E10               	movlw	16
  2001  000256  6F82               	movwf	___awdiv@divisor& (0+255),b
  2002  000258  C0C5  F080         	movff	Operate@Start_time,___awdiv@dividend
  2003  00025C  0100               	movlb	0	; () banked
  2004  00025E  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  2005  000260  EC7B  F007         	call	___awdiv	;wreg free
  2006  000264  C080  F088         	movff	?___awdiv,___wmul@multiplier
  2007  000268  C081  F089         	movff	?___awdiv+1,___wmul@multiplier+1
  2008  00026C  0E00               	movlw	0
  2009  00026E  0100               	movlb	0	; () banked
  2010  000270  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2011  000272  0E0A               	movlw	10
  2012  000274  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  2013  000276  EC4E  F00B         	call	___wmul	;wreg free
  2014  00027A  C088  F0AA         	movff	?___wmul,??_Operate
  2015  00027E  C089  F0AB         	movff	?___wmul+1,??_Operate+1
  2016  000282  C0C5  F0AC         	movff	Operate@Start_time,??_Operate+2
  2017  000286  0E0F               	movlw	15
  2018  000288  0100               	movlb	0	; () banked
  2019  00028A  17AC               	andwf	(??_Operate+2)& (0+255),f,b
  2020  00028C  0100               	movlb	0	; () banked
  2021  00028E  51AC               	movf	(??_Operate+2)& (0+255),w,b
  2022  000290  0100               	movlb	0	; () banked
  2023  000292  27AA               	addwf	??_Operate& (0+255),f,b
  2024  000294  0E00               	movlw	0
  2025  000296  23AB               	addwfc	(??_Operate+1)& (0+255),f,b
  2026  000298  C0B9  F088         	movff	_Operate$1030,___wmul@multiplier
  2027  00029C  C0BA  F089         	movff	_Operate$1030+1,___wmul@multiplier+1
  2028  0002A0  0E00               	movlw	0
  2029  0002A2  0100               	movlb	0	; () banked
  2030  0002A4  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2031  0002A6  0E3C               	movlw	60
  2032  0002A8  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  2033  0002AA  EC4E  F00B         	call	___wmul	;wreg free
  2034  0002AE  0100               	movlb	0	; () banked
  2035  0002B0  5188               	movf	?___wmul& (0+255),w,b
  2036  0002B2  0100               	movlb	0	; () banked
  2037  0002B4  27AA               	addwf	??_Operate& (0+255),f,b
  2038  0002B6  0100               	movlb	0	; () banked
  2039  0002B8  5189               	movf	(?___wmul+1)& (0+255),w,b
  2040  0002BA  0100               	movlb	0	; () banked
  2041  0002BC  23AB               	addwfc	(??_Operate+1)& (0+255),f,b
  2042  0002BE  C0AA  F0AD         	movff	??_Operate,Operate@total_start
  2043  0002C2  C0AB  F0AE         	movff	??_Operate+1,Operate@total_start+1
  2044  0002C6  0100               	movlb	0	; () banked
  2045  0002C8  0E00               	movlw	0
  2046  0002CA  BFAE               	btfsc	(Operate@total_start+1)& (0+255),7,b
  2047  0002CC  0EFF               	movlw	-1
  2048  0002CE  6FAF               	movwf	(Operate@total_start+2)& (0+255),b
  2049  0002D0  6FB0               	movwf	(Operate@total_start+3)& (0+255),b
  2050                           
  2051                           ; BSR set to: 0
  2052                           ;Operate.c: 94: total_end = (End_time[1]/16*10 + End_time[1]%16)*60 + (End_time[0]/16*10
      +                           + End_time[0]%16);
  2053  0002D2  C0C8  F0AA         	movff	Operate@End_time+1,??_Operate
  2054  0002D6  0E0F               	movlw	15
  2055  0002D8  0100               	movlb	0	; () banked
  2056  0002DA  17AA               	andwf	??_Operate& (0+255),f,b
  2057  0002DC  0E00               	movlw	0
  2058  0002DE  0100               	movlb	0	; () banked
  2059  0002E0  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  2060  0002E2  0E10               	movlw	16
  2061  0002E4  6F82               	movwf	___awdiv@divisor& (0+255),b
  2062  0002E6  C0C8  F080         	movff	Operate@End_time+1,___awdiv@dividend
  2063  0002EA  0100               	movlb	0	; () banked
  2064  0002EC  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  2065  0002EE  EC7B  F007         	call	___awdiv	;wreg free
  2066  0002F2  C080  F088         	movff	?___awdiv,___wmul@multiplier
  2067  0002F6  C081  F089         	movff	?___awdiv+1,___wmul@multiplier+1
  2068  0002FA  0E00               	movlw	0
  2069  0002FC  0100               	movlb	0	; () banked
  2070  0002FE  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2071  000300  0E0A               	movlw	10
  2072  000302  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  2073  000304  EC4E  F00B         	call	___wmul	;wreg free
  2074  000308  0100               	movlb	0	; () banked
  2075  00030A  51AA               	movf	??_Operate& (0+255),w,b
  2076  00030C  0100               	movlb	0	; () banked
  2077  00030E  2588               	addwf	?___wmul& (0+255),w,b
  2078  000310  0100               	movlb	0	; () banked
  2079  000312  6FB9               	movwf	_Operate$1030& (0+255),b
  2080  000314  0100               	movlb	0	; () banked
  2081  000316  0E00               	movlw	0
  2082  000318  0100               	movlb	0	; () banked
  2083  00031A  2189               	addwfc	(?___wmul+1)& (0+255),w,b
  2084  00031C  0100               	movlb	0	; () banked
  2085  00031E  6FBA               	movwf	(_Operate$1030+1)& (0+255),b
  2086                           
  2087                           ; BSR set to: 0
  2088                           ;Operate.c: 94: total_end = (End_time[1]/16*10 + End_time[1]%16)*60 + (End_time[0]/16*10
      +                           + End_time[0]%16);
  2089  000320  0E00               	movlw	0
  2090  000322  0100               	movlb	0	; () banked
  2091  000324  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  2092  000326  0E10               	movlw	16
  2093  000328  6F82               	movwf	___awdiv@divisor& (0+255),b
  2094  00032A  C0C7  F080         	movff	Operate@End_time,___awdiv@dividend
  2095  00032E  0100               	movlb	0	; () banked
  2096  000330  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  2097  000332  EC7B  F007         	call	___awdiv	;wreg free
  2098  000336  C080  F088         	movff	?___awdiv,___wmul@multiplier
  2099  00033A  C081  F089         	movff	?___awdiv+1,___wmul@multiplier+1
  2100  00033E  0E00               	movlw	0
  2101  000340  0100               	movlb	0	; () banked
  2102  000342  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2103  000344  0E0A               	movlw	10
  2104  000346  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  2105  000348  EC4E  F00B         	call	___wmul	;wreg free
  2106  00034C  C088  F0AA         	movff	?___wmul,??_Operate
  2107  000350  C089  F0AB         	movff	?___wmul+1,??_Operate+1
  2108  000354  C0C7  F0AC         	movff	Operate@End_time,??_Operate+2
  2109  000358  0E0F               	movlw	15
  2110  00035A  0100               	movlb	0	; () banked
  2111  00035C  17AC               	andwf	(??_Operate+2)& (0+255),f,b
  2112  00035E  0100               	movlb	0	; () banked
  2113  000360  51AC               	movf	(??_Operate+2)& (0+255),w,b
  2114  000362  0100               	movlb	0	; () banked
  2115  000364  27AA               	addwf	??_Operate& (0+255),f,b
  2116  000366  0E00               	movlw	0
  2117  000368  23AB               	addwfc	(??_Operate+1)& (0+255),f,b
  2118  00036A  C0B9  F088         	movff	_Operate$1030,___wmul@multiplier
  2119  00036E  C0BA  F089         	movff	_Operate$1030+1,___wmul@multiplier+1
  2120  000372  0E00               	movlw	0
  2121  000374  0100               	movlb	0	; () banked
  2122  000376  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2123  000378  0E3C               	movlw	60
  2124  00037A  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  2125  00037C  EC4E  F00B         	call	___wmul	;wreg free
  2126  000380  0100               	movlb	0	; () banked
  2127  000382  5188               	movf	?___wmul& (0+255),w,b
  2128  000384  0100               	movlb	0	; () banked
  2129  000386  27AA               	addwf	??_Operate& (0+255),f,b
  2130  000388  0100               	movlb	0	; () banked
  2131  00038A  5189               	movf	(?___wmul+1)& (0+255),w,b
  2132  00038C  0100               	movlb	0	; () banked
  2133  00038E  23AB               	addwfc	(??_Operate+1)& (0+255),f,b
  2134  000390  C0AA  F0B1         	movff	??_Operate,Operate@total_end
  2135  000394  C0AB  F0B2         	movff	??_Operate+1,Operate@total_end+1
  2136  000398  0100               	movlb	0	; () banked
  2137  00039A  0E00               	movlw	0
  2138  00039C  BFB2               	btfsc	(Operate@total_end+1)& (0+255),7,b
  2139  00039E  0EFF               	movlw	-1
  2140  0003A0  6FB3               	movwf	(Operate@total_end+2)& (0+255),b
  2141  0003A2  6FB4               	movwf	(Operate@total_end+3)& (0+255),b
  2142                           
  2143                           ; BSR set to: 0
  2144                           ;Operate.c: 95: total_second = total_end - total_start;
  2145  0003A4  C0AD  F0AA         	movff	Operate@total_start,??_Operate
  2146  0003A8  C0AE  F0AB         	movff	Operate@total_start+1,??_Operate+1
  2147  0003AC  0100               	movlb	0	; () banked
  2148  0003AE  1FAA               	comf	??_Operate& (0+255),f,b
  2149  0003B0  1FAB               	comf	(??_Operate+1)& (0+255),f,b
  2150  0003B2  4BAA               	infsnz	??_Operate& (0+255),f,b
  2151  0003B4  2BAB               	incf	(??_Operate+1)& (0+255),f,b
  2152  0003B6  0100               	movlb	0	; () banked
  2153  0003B8  51B1               	movf	Operate@total_end& (0+255),w,b
  2154  0003BA  0100               	movlb	0	; () banked
  2155  0003BC  25AA               	addwf	??_Operate& (0+255),w,b
  2156  0003BE  0100               	movlb	0	; () banked
  2157  0003C0  6FC9               	movwf	_total_second& (0+255),b
  2158  0003C2  0100               	movlb	0	; () banked
  2159  0003C4  51B2               	movf	(Operate@total_end+1)& (0+255),w,b
  2160  0003C6  0100               	movlb	0	; () banked
  2161  0003C8  21AB               	addwfc	(??_Operate+1)& (0+255),w,b
  2162  0003CA  0100               	movlb	0	; () banked
  2163  0003CC  6FCA               	movwf	(_total_second+1)& (0+255),b
  2164                           
  2165                           ; BSR set to: 0
  2166                           ;Operate.c: 97: if(total_second <= 0){
  2167  0003CE  0100               	movlb	0	; () banked
  2168  0003D0  BFCA               	btfsc	(_total_second+1)& (0+255),7,b
  2169  0003D2  D007               	goto	l3665
  2170  0003D4  0100               	movlb	0	; () banked
  2171  0003D6  51CA               	movf	(_total_second+1)& (0+255),w,b
  2172  0003D8  E10E               	bnz	l3667
  2173  0003DA  0100               	movlb	0	; () banked
  2174  0003DC  05C9               	decf	_total_second& (0+255),w,b
  2175  0003DE  B0D8               	btfsc	status,0,c
  2176  0003E0  D00A               	goto	l3667
  2177  0003E2                     l3665:
  2178                           
  2179                           ; BSR set to: 0
  2180                           ;Operate.c: 98: total_second = 3600 + total_second;
  2181  0003E2  0E10               	movlw	16
  2182  0003E4  0100               	movlb	0	; () banked
  2183  0003E6  25C9               	addwf	_total_second& (0+255),w,b
  2184  0003E8  0100               	movlb	0	; () banked
  2185  0003EA  6FC9               	movwf	_total_second& (0+255),b
  2186  0003EC  0E0E               	movlw	14
  2187  0003EE  0100               	movlb	0	; () banked
  2188  0003F0  21CA               	addwfc	(_total_second+1)& (0+255),w,b
  2189  0003F2  0100               	movlb	0	; () banked
  2190  0003F4  6FCA               	movwf	(_total_second+1)& (0+255),b
  2191  0003F6                     l3667:
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;Operate.c: 99: }
  2195                           ;Operate.c: 100: return total_second;
  2196  0003F6  C0C9  F0A8         	movff	_total_second,?_Operate
  2197  0003FA  C0CA  F0A9         	movff	_total_second+1,?_Operate+1
  2198  0003FE  0012               	return	
  2199  000400                     __end_of_Operate:
  2200                           	opt stack 0
  2201                           tblptru	equ	0xFF8
  2202                           tblptrh	equ	0xFF7
  2203                           tblptrl	equ	0xFF6
  2204                           tablat	equ	0xFF5
  2205                           prodh	equ	0xFF4
  2206                           prodl	equ	0xFF3
  2207                           intcon	equ	0xFF2
  2208                           intcon3	equ	0xFF0
  2209                           postinc0	equ	0xFEE
  2210                           wreg	equ	0xFE8
  2211                           indf2	equ	0xFDF
  2212                           fsr2h	equ	0xFDA
  2213                           fsr2l	equ	0xFD9
  2214                           status	equ	0xFD8
  2215                           
  2216 ;; *************** function _startSorting *****************
  2217 ;; Defined at:
  2218 ;;		line 25 in file "Sort.c"
  2219 ;; Parameters:    Size  Location     Type
  2220 ;;		None
  2221 ;; Auto vars:     Size  Location     Type
  2222 ;;  i               1   39[BANK0 ] unsigned char 
  2223 ;;  i               1   38[BANK0 ] unsigned char 
  2224 ;; Return value:  Size  Location     Type
  2225 ;;                  1    wreg      void 
  2226 ;; Registers used:
  2227 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2228 ;; Tracked objects:
  2229 ;;		On entry : 0/0
  2230 ;;		On exit  : 0/0
  2231 ;;		Unchanged: 0/0
  2232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2234 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2235 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2236 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2237 ;;Total ram usage:        4 bytes
  2238 ;; Hardware stack levels used:    1
  2239 ;; Hardware stack levels required when called:    8
  2240 ;; This function calls:
  2241 ;;		_initLCD
  2242 ;;		_initialization
  2243 ;;		_lcdInst
  2244 ;;		_printf
  2245 ;; This function is called by:
  2246 ;;		_Operate
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           	psect	text4
  2251  001070                     __ptext4:
  2252                           	opt stack 0
  2253  001070                     _startSorting:
  2254                           	opt stack 21
  2255                           
  2256                           ;Sort.c: 27: initLCD();
  2257                           
  2258                           ; BSR set to: 0
  2259                           ;incstack = 0
  2260  001070  ECC0  F00A         	call	_initLCD	;wreg free
  2261                           
  2262                           ;Sort.c: 28: lcdInst(0b10000000);;
  2263  001074  0E80               	movlw	128
  2264  001076  EC1A  F00C         	call	_lcdInst
  2265                           
  2266                           ;Sort.c: 33: printf("Initializing");
  2267  00107A  0ED4               	movlw	low STR_8
  2268  00107C  0100               	movlb	0	; () banked
  2269  00107E  6F8E               	movwf	printf@f& (0+255),b
  2270  001080  0EFF               	movlw	high STR_8
  2271  001082  0100               	movlb	0	; () banked
  2272  001084  6F8F               	movwf	(printf@f+1)& (0+255),b
  2273  001086  EC00  F002         	call	_printf	;wreg free
  2274                           
  2275                           ;Sort.c: 34: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)));};
  2276  00108A  0E00               	movlw	0
  2277  00108C  0100               	movlb	0	; () banked
  2278  00108E  6FA6               	movwf	startSorting@i& (0+255),b
  2279  001090                     l3457:
  2280                           
  2281                           ; BSR set to: 0
  2282  001090  0E09               	movlw	9
  2283  001092  0100               	movlb	0	; () banked
  2284  001094  65A6               	cpfsgt	startSorting@i& (0+255),b
  2285  001096  D001               	goto	l3461
  2286  001098  D010               	goto	l3465
  2287  00109A                     l3461:
  2288                           
  2289                           ; BSR set to: 0
  2290  00109A  0E02               	movlw	2
  2291  00109C  0100               	movlb	0	; () banked
  2292  00109E  6FA5               	movwf	(??_startSorting+1)& (0+255),b
  2293  0010A0  0E3F               	movlw	63
  2294  0010A2  0100               	movlb	0	; () banked
  2295  0010A4  6FA4               	movwf	??_startSorting& (0+255),b
  2296  0010A6  0E2B               	movlw	43
  2297  0010A8                     u3827:
  2298  0010A8  2EE8               	decfsz	wreg,f,c
  2299  0010AA  D7FE               	bra	u3827
  2300  0010AC  2FA4               	decfsz	??_startSorting& (0+255),f,b
  2301  0010AE  D7FC               	bra	u3827
  2302  0010B0  2FA5               	decfsz	(??_startSorting+1)& (0+255),f,b
  2303  0010B2  D7FA               	bra	u3827
  2304  0010B4  0100               	movlb	0	; () banked
  2305  0010B6  2BA6               	incf	startSorting@i& (0+255),f,b
  2306  0010B8  D7EB               	goto	l3457
  2307  0010BA                     l3465:
  2308                           
  2309                           ; BSR set to: 0
  2310                           ;Sort.c: 35: initialization();
  2311  0010BA  EC82  F008         	call	_initialization	;wreg free
  2312                           
  2313                           ;Sort.c: 37: lcdInst(0b11000000);;
  2314  0010BE  0EC0               	movlw	192
  2315  0010C0  EC1A  F00C         	call	_lcdInst
  2316                           
  2317                           ;Sort.c: 38: printf("Complete");
  2318  0010C4  0EEE               	movlw	low STR_9
  2319  0010C6  0100               	movlb	0	; () banked
  2320  0010C8  6F8E               	movwf	printf@f& (0+255),b
  2321  0010CA  0EFF               	movlw	high STR_9
  2322  0010CC  0100               	movlb	0	; () banked
  2323  0010CE  6F8F               	movwf	(printf@f+1)& (0+255),b
  2324  0010D0  EC00  F002         	call	_printf	;wreg free
  2325                           
  2326                           ;Sort.c: 39: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)));};
  2327  0010D4  0E00               	movlw	0
  2328  0010D6  0100               	movlb	0	; () banked
  2329  0010D8  6FA7               	movwf	startSorting@i_277& (0+255),b
  2330  0010DA                     l3471:
  2331                           
  2332                           ; BSR set to: 0
  2333  0010DA  0E09               	movlw	9
  2334  0010DC  0100               	movlb	0	; () banked
  2335  0010DE  65A7               	cpfsgt	startSorting@i_277& (0+255),b
  2336  0010E0  D001               	goto	l3475
  2337  0010E2  0012               	return	
  2338  0010E4                     l3475:
  2339                           
  2340                           ; BSR set to: 0
  2341  0010E4  0E02               	movlw	2
  2342  0010E6  0100               	movlb	0	; () banked
  2343  0010E8  6FA5               	movwf	(??_startSorting+1)& (0+255),b
  2344  0010EA  0E3F               	movlw	63
  2345  0010EC  0100               	movlb	0	; () banked
  2346  0010EE  6FA4               	movwf	??_startSorting& (0+255),b
  2347  0010F0  0E2B               	movlw	43
  2348  0010F2                     u3837:
  2349  0010F2  2EE8               	decfsz	wreg,f,c
  2350  0010F4  D7FE               	bra	u3837
  2351  0010F6  2FA4               	decfsz	??_startSorting& (0+255),f,b
  2352  0010F8  D7FC               	bra	u3837
  2353  0010FA  2FA5               	decfsz	(??_startSorting+1)& (0+255),f,b
  2354  0010FC  D7FA               	bra	u3837
  2355  0010FE  0100               	movlb	0	; () banked
  2356  001100  2BA7               	incf	startSorting@i_277& (0+255),f,b
  2357  001102  D7EB               	goto	l3471
  2358  001104                     __end_of_startSorting:
  2359                           	opt stack 0
  2360                           tblptru	equ	0xFF8
  2361                           tblptrh	equ	0xFF7
  2362                           tblptrl	equ	0xFF6
  2363                           tablat	equ	0xFF5
  2364                           prodh	equ	0xFF4
  2365                           prodl	equ	0xFF3
  2366                           intcon	equ	0xFF2
  2367                           intcon3	equ	0xFF0
  2368                           postinc0	equ	0xFEE
  2369                           wreg	equ	0xFE8
  2370                           indf2	equ	0xFDF
  2371                           fsr2h	equ	0xFDA
  2372                           fsr2l	equ	0xFD9
  2373                           status	equ	0xFD8
  2374                           
  2375 ;; *************** function _printf *****************
  2376 ;; Defined at:
  2377 ;;		line 464 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
  2378 ;; Parameters:    Size  Location     Type
  2379 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  2380 ;;		 -> STR_16(17), STR_15(15), STR_14(13), STR_13(8), 
  2381 ;;		 -> STR_12(17), STR_11(17), STR_10(17), STR_9(9), 
  2382 ;;		 -> STR_8(13), STR_7(2), STR_6(13), STR_5(15), 
  2383 ;;		 -> STR_4(15), STR_3(17), STR_2(22), STR_1(19), 
  2384 ;; Auto vars:     Size  Location     Type
  2385 ;;  idx             1   26[BANK0 ] unsigned char 
  2386 ;;  tmpval          4    0        struct .
  2387 ;;  cp              3    0        PTR const unsigned char 
  2388 ;;  width           2   33[BANK0 ] int 
  2389 ;;  val             2   30[BANK0 ] unsigned int 
  2390 ;;  ap              2   27[BANK0 ] PTR void [1]
  2391 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2392 ;;  len             2    0        unsigned int 
  2393 ;;  c               1   35[BANK0 ] char 
  2394 ;;  flag            1   32[BANK0 ] unsigned char 
  2395 ;;  prec            1   29[BANK0 ] char 
  2396 ;; Return value:  Size  Location     Type
  2397 ;;                  2   14[BANK0 ] int 
  2398 ;; Registers used:
  2399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2400 ;; Tracked objects:
  2401 ;;		On entry : 0/0
  2402 ;;		On exit  : 0/0
  2403 ;;		Unchanged: 0/0
  2404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2405 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2406 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2407 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2408 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2409 ;;Total ram usage:       22 bytes
  2410 ;; Hardware stack levels used:    1
  2411 ;; Hardware stack levels required when called:    7
  2412 ;; This function calls:
  2413 ;;		___lwdiv
  2414 ;;		___lwmod
  2415 ;;		___wmul
  2416 ;;		_isdigit
  2417 ;;		_putch
  2418 ;; This function is called by:
  2419 ;;		_startSorting
  2420 ;;		_results
  2421 ;;		_Operate
  2422 ;; This function uses a non-reentrant model
  2423 ;;
  2424                           
  2425                           	psect	text5
  2426  000400                     __ptext5:
  2427                           	opt stack 0
  2428  000400                     _printf:
  2429                           	opt stack 22
  2430                           
  2431                           ;doprnt.c: 466: va_list ap;
  2432                           ;doprnt.c: 499: signed char c;
  2433                           ;doprnt.c: 501: int width;
  2434                           ;doprnt.c: 506: signed char prec;
  2435                           ;doprnt.c: 508: unsigned char flag;
  2436                           ;doprnt.c: 523: union {
  2437                           ;doprnt.c: 524: unsigned long vd;
  2438                           ;doprnt.c: 525: double integ;
  2439                           ;doprnt.c: 526: } tmpval;
  2440                           ;doprnt.c: 528: unsigned int val;
  2441                           ;doprnt.c: 529: unsigned len;
  2442                           ;doprnt.c: 530: const char * cp;
  2443                           ;doprnt.c: 533: *ap = __va_start();
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;incstack = 0
  2447  000400  0E90               	movlw	low (?_printf+2)
  2448  000402  0100               	movlb	0	; () banked
  2449  000404  6F9B               	movwf	printf@ap& (0+255),b
  2450  000406  0E00               	movlw	high (?_printf+2)
  2451  000408  0100               	movlb	0	; () banked
  2452  00040A  6F9C               	movwf	(printf@ap+1)& (0+255),b
  2453                           
  2454                           ;doprnt.c: 536: while(c = *f++) {
  2455  00040C  D1C4               	goto	l3393
  2456  00040E                     l3267:
  2457                           
  2458                           ; BSR set to: 0
  2459                           ;doprnt.c: 538: if(c != '%')
  2460  00040E  0E25               	movlw	37
  2461  000410  0100               	movlb	0	; () banked
  2462  000412  19A3               	xorwf	printf@c& (0+255),w,b
  2463  000414  B4D8               	btfsc	status,2,c
  2464  000416  D005               	goto	l3271
  2465                           
  2466                           ; BSR set to: 0
  2467                           ;doprnt.c: 540: {
  2468                           ;doprnt.c: 541: (putch(c) );
  2469  000418  0100               	movlb	0	; () banked
  2470  00041A  51A3               	movf	printf@c& (0+255),w,b
  2471  00041C  EC12  F00C         	call	_putch
  2472                           
  2473                           ;doprnt.c: 542: continue;
  2474  000420  D1BA               	goto	l3393
  2475  000422                     l3271:
  2476                           
  2477                           ;doprnt.c: 543: }
  2478                           ;doprnt.c: 546: width = 0;
  2479  000422  0E00               	movlw	0
  2480  000424  0100               	movlb	0	; () banked
  2481  000426  6FA2               	movwf	(printf@width+1)& (0+255),b
  2482  000428  0E00               	movlw	0
  2483  00042A  6FA1               	movwf	printf@width& (0+255),b
  2484                           
  2485                           ;doprnt.c: 548: flag = 0;
  2486  00042C  0E00               	movlw	0
  2487  00042E  0100               	movlb	0	; () banked
  2488  000430  6FA0               	movwf	printf@flag& (0+255),b
  2489                           
  2490                           ; BSR set to: 0
  2491                           ;doprnt.c: 551: switch(*f) {
  2492                           
  2493                           ;doprnt.c: 550: for(;;) {
  2494  000432  D005               	goto	l3277
  2495  000434                     l3273:
  2496                           
  2497                           ;doprnt.c: 580: flag |= 0x04;
  2498  000434  0100               	movlb	0	; () banked
  2499  000436  85A0               	bsf	printf@flag& (0+255),2,b
  2500                           
  2501                           ;doprnt.c: 581: f++;
  2502  000438  0100               	movlb	0	; () banked
  2503  00043A  4B8E               	infsnz	printf@f& (0+255),f,b
  2504  00043C  2B8F               	incf	(printf@f+1)& (0+255),f,b
  2505  00043E                     l3277:
  2506  00043E  C08E  FFF6         	movff	printf@f,tblptrl
  2507  000442  C08F  FFF7         	movff	printf@f+1,tblptrh
  2508  000446                     	if	0	;tblptru may be non-zero
  2509  000446                     	endif
  2510  000446                     	if	0	;tblptru may be non-zero
  2511  000446                     	endif
  2512  000446  0008               	tblrd		*
  2513  000448  50F5               	movf	tablat,w,c
  2514                           
  2515                           ; Switch size 1, requested type "space"
  2516                           ; Number of cases is 1, Range of values is 48 to 48
  2517                           ; switch strategies available:
  2518                           ; Name         Instructions Cycles
  2519                           ; simple_byte            4     3 (average)
  2520                           ;	Chosen strategy is simple_byte
  2521  00044A  0A30               	xorlw	48	; case 48
  2522  00044C  B4D8               	btfsc	status,2,c
  2523  00044E  D7F2               	goto	l3273
  2524                           
  2525                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2526                           
  2527                           ;doprnt.c: 586: }
  2528                           
  2529                           ;doprnt.c: 585: break;
  2530  000450  C08E  FFF6         	movff	printf@f,tblptrl
  2531  000454  C08F  FFF7         	movff	printf@f+1,tblptrh
  2532  000458                     	if	0	;tblptru may be non-zero
  2533  000458                     	endif
  2534  000458                     	if	0	;tblptru may be non-zero
  2535  000458                     	endif
  2536  000458  0008               	tblrd		*
  2537  00045A  50F5               	movf	tablat,w,c
  2538  00045C  ECB4  F00B         	call	_isdigit
  2539  000460  A0D8               	btfss	status,0,c
  2540  000462  D044               	goto	l3295
  2541                           
  2542                           ;doprnt.c: 598: width = 0;
  2543  000464  0E00               	movlw	0
  2544  000466  0100               	movlb	0	; () banked
  2545  000468  6FA2               	movwf	(printf@width+1)& (0+255),b
  2546  00046A  0E00               	movlw	0
  2547  00046C  6FA1               	movwf	printf@width& (0+255),b
  2548  00046E                     l3283:
  2549                           
  2550                           ;doprnt.c: 600: width *= 10;
  2551  00046E  C0A1  F088         	movff	printf@width,___wmul@multiplier
  2552  000472  C0A2  F089         	movff	printf@width+1,___wmul@multiplier+1
  2553  000476  0E00               	movlw	0
  2554  000478  0100               	movlb	0	; () banked
  2555  00047A  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2556  00047C  0E0A               	movlw	10
  2557  00047E  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  2558  000480  EC4E  F00B         	call	___wmul	;wreg free
  2559  000484  C088  F0A1         	movff	?___wmul,printf@width
  2560  000488  C089  F0A2         	movff	?___wmul+1,printf@width+1
  2561                           
  2562                           ;doprnt.c: 601: width += *f++ - '0';
  2563  00048C  0ED0               	movlw	208
  2564  00048E  0100               	movlb	0	; () banked
  2565  000490  6F96               	movwf	??_printf& (0+255),b
  2566  000492  0EFF               	movlw	255
  2567  000494  0100               	movlb	0	; () banked
  2568  000496  6F97               	movwf	(??_printf+1)& (0+255),b
  2569  000498  C08E  FFF6         	movff	printf@f,tblptrl
  2570  00049C  C08F  FFF7         	movff	printf@f+1,tblptrh
  2571  0004A0                     	if	0	;tblptru may be non-zero
  2572  0004A0                     	endif
  2573  0004A0                     	if	0	;tblptru may be non-zero
  2574  0004A0                     	endif
  2575  0004A0  0008               	tblrd		*
  2576  0004A2  50F5               	movf	tablat,w,c
  2577  0004A4  0100               	movlb	0	; () banked
  2578  0004A6  6F98               	movwf	(??_printf+2)& (0+255),b
  2579  0004A8  6B99               	clrf	(??_printf+3)& (0+255),b
  2580  0004AA  0100               	movlb	0	; () banked
  2581  0004AC  5196               	movf	??_printf& (0+255),w,b
  2582  0004AE  0100               	movlb	0	; () banked
  2583  0004B0  2798               	addwf	(??_printf+2)& (0+255),f,b
  2584  0004B2  0100               	movlb	0	; () banked
  2585  0004B4  5197               	movf	(??_printf+1)& (0+255),w,b
  2586  0004B6  0100               	movlb	0	; () banked
  2587  0004B8  2399               	addwfc	(??_printf+3)& (0+255),f,b
  2588  0004BA  0100               	movlb	0	; () banked
  2589  0004BC  5198               	movf	(??_printf+2)& (0+255),w,b
  2590  0004BE  0100               	movlb	0	; () banked
  2591  0004C0  27A1               	addwf	printf@width& (0+255),f,b
  2592  0004C2  0100               	movlb	0	; () banked
  2593  0004C4  5199               	movf	(??_printf+3)& (0+255),w,b
  2594  0004C6  0100               	movlb	0	; () banked
  2595  0004C8  23A2               	addwfc	(printf@width+1)& (0+255),f,b
  2596                           
  2597                           ; BSR set to: 0
  2598  0004CA  0100               	movlb	0	; () banked
  2599  0004CC  4B8E               	infsnz	printf@f& (0+255),f,b
  2600  0004CE  2B8F               	incf	(printf@f+1)& (0+255),f,b
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2604  0004D0  C08E  FFF6         	movff	printf@f,tblptrl
  2605  0004D4  C08F  FFF7         	movff	printf@f+1,tblptrh
  2606  0004D8                     	if	0	;tblptru may be non-zero
  2607  0004D8                     	endif
  2608  0004D8                     	if	0	;tblptru may be non-zero
  2609  0004D8                     	endif
  2610  0004D8  0008               	tblrd		*
  2611  0004DA  50F5               	movf	tablat,w,c
  2612  0004DC  ECB4  F00B         	call	_isdigit
  2613  0004E0  A0D8               	btfss	status,0,c
  2614  0004E2  D004               	goto	l3295
  2615  0004E4  D7C4               	goto	l3283
  2616  0004E6                     l3291:
  2617                           
  2618                           ;doprnt.c: 721: flag |= 0x80;
  2619  0004E6  0100               	movlb	0	; () banked
  2620  0004E8  8FA0               	bsf	printf@flag& (0+255),7,b
  2621                           
  2622                           ;doprnt.c: 723: break;
  2623  0004EA  D019               	goto	l339
  2624  0004EC                     l3295:
  2625  0004EC  C08E  FFF6         	movff	printf@f,tblptrl
  2626  0004F0  C08F  FFF7         	movff	printf@f+1,tblptrh
  2627  0004F4  0100               	movlb	0	; () banked
  2628  0004F6  4B8E               	infsnz	printf@f& (0+255),f,b
  2629  0004F8  2B8F               	incf	(printf@f+1)& (0+255),f,b
  2630  0004FA                     	if	0	;tblptru may be non-zero
  2631  0004FA                     	endif
  2632  0004FA                     	if	0	;tblptru may be non-zero
  2633  0004FA                     	endif
  2634  0004FA  0008               	tblrd		*
  2635  0004FC  CFF5 F0A3          	movff	tablat,printf@c
  2636  000500  0100               	movlb	0	; () banked
  2637  000502  51A3               	movf	printf@c& (0+255),w,b
  2638                           
  2639                           ; Switch size 1, requested type "space"
  2640                           ; Number of cases is 4, Range of values is 0 to 120
  2641                           ; switch strategies available:
  2642                           ; Name         Instructions Cycles
  2643                           ; simple_byte           13     7 (average)
  2644                           ;	Chosen strategy is simple_byte
  2645  000504  0A00               	xorlw	0	; case 0
  2646  000506  B4D8               	btfsc	status,2,c
  2647  000508  0012               	return	
  2648  00050A  0A64               	xorlw	100	; case 100
  2649  00050C  B4D8               	btfsc	status,2,c
  2650  00050E  D007               	goto	l339
  2651  000510  0A0D               	xorlw	13	; case 105
  2652  000512  B4D8               	btfsc	status,2,c
  2653  000514  D004               	goto	l339
  2654  000516  0A11               	xorlw	17	; case 120
  2655  000518  B4D8               	btfsc	status,2,c
  2656  00051A  D7E5               	goto	l3291
  2657  00051C  D13C               	goto	l3393
  2658  00051E                     l339:
  2659                           
  2660                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2661  00051E  0100               	movlb	0	; () banked
  2662  000520  BFA0               	btfsc	printf@flag& (0+255),7,b
  2663  000522  D019               	goto	l3307
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;doprnt.c: 1253: {
  2667                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2668  000524  C09B  FFD9         	movff	printf@ap,fsr2l
  2669  000528  C09C  FFDA         	movff	printf@ap+1,fsr2h
  2670  00052C  CFDE F09E          	movff	postinc2,printf@val
  2671  000530  CFDD F09F          	movff	postdec2,printf@val+1
  2672                           
  2673                           ; BSR set to: 0
  2674  000534  0E02               	movlw	2
  2675  000536  0100               	movlb	0	; () banked
  2676  000538  279B               	addwf	printf@ap& (0+255),f,b
  2677  00053A  0E00               	movlw	0
  2678  00053C  239C               	addwfc	(printf@ap+1)& (0+255),f,b
  2679                           
  2680                           ; BSR set to: 0
  2681                           ;doprnt.c: 1261: if((int)val < 0) {
  2682  00053E  0100               	movlb	0	; () banked
  2683  000540  AF9F               	btfss	(printf@val+1)& (0+255),7,b
  2684  000542  D053               	goto	l3341
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;doprnt.c: 1262: flag |= 0x03;
  2688  000544  0E03               	movlw	3
  2689  000546  0100               	movlb	0	; () banked
  2690  000548  13A0               	iorwf	printf@flag& (0+255),f,b
  2691                           
  2692                           ; BSR set to: 0
  2693                           ;doprnt.c: 1263: val = -val;
  2694  00054A  0100               	movlb	0	; () banked
  2695  00054C  6D9E               	negf	printf@val& (0+255),b
  2696  00054E  1F9F               	comf	(printf@val+1)& (0+255),f,b
  2697  000550  B0D8               	btfsc	status,0,c
  2698  000552  2B9F               	incf	(printf@val+1)& (0+255),f,b
  2699                           
  2700                           ; BSR set to: 0
  2701                           ;doprnt.c: 1264: }
  2702                           ;doprnt.c: 1266: }
  2703  000554  D04A               	goto	l3341
  2704  000556                     l3307:
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;doprnt.c: 1268: else
  2708                           ;doprnt.c: 1273: {
  2709                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2710  000556  C09B  FFD9         	movff	printf@ap,fsr2l
  2711  00055A  C09C  FFDA         	movff	printf@ap+1,fsr2h
  2712  00055E  CFDE F09E          	movff	postinc2,printf@val
  2713  000562  CFDD F09F          	movff	postdec2,printf@val+1
  2714                           
  2715                           ; BSR set to: 0
  2716  000566  0E02               	movlw	2
  2717  000568  0100               	movlb	0	; () banked
  2718  00056A  279B               	addwf	printf@ap& (0+255),f,b
  2719  00056C  0E00               	movlw	0
  2720  00056E  239C               	addwfc	(printf@ap+1)& (0+255),f,b
  2721                           
  2722                           ; BSR set to: 0
  2723                           ;doprnt.c: 1287: }
  2724                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2725  000570  D03C               	goto	l3341
  2726  000572                     l3311:
  2727                           
  2728                           ; BSR set to: 0
  2729                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2730  000572  0E01               	movlw	1
  2731  000574  0100               	movlb	0	; () banked
  2732  000576  6FA3               	movwf	printf@c& (0+255),b
  2733  000578                     l3313:
  2734                           
  2735                           ; BSR set to: 0
  2736  000578  0E05               	movlw	5
  2737  00057A  0100               	movlb	0	; () banked
  2738  00057C  19A3               	xorwf	printf@c& (0+255),w,b
  2739  00057E  B4D8               	btfsc	status,2,c
  2740  000580  D03D               	goto	l3343
  2741                           
  2742                           ; BSR set to: 0
  2743                           ;doprnt.c: 1306: if(val < dpowers[c])
  2744                           
  2745                           ; BSR set to: 0
  2746                           
  2747                           ; BSR set to: 0
  2748  000582  0100               	movlb	0	; () banked
  2749  000584  51A3               	movf	printf@c& (0+255),w,b
  2750  000586  0D02               	mullw	2
  2751  000588  0EF2               	movlw	low _dpowers
  2752  00058A  24F3               	addwf	prodl,w,c
  2753  00058C  6EF6               	movwf	tblptrl,c
  2754  00058E  0EFE               	movlw	high _dpowers
  2755  000590  20F4               	addwfc	prodh,w,c
  2756  000592  6EF7               	movwf	tblptrh,c
  2757  000594                     	if	0	;There are less than 3 active tblptr bytes
  2758  000594                     	endif
  2759  000594  0009               	tblrd		*+
  2760  000596  50F5               	movf	tablat,w,c
  2761  000598  0100               	movlb	0	; () banked
  2762  00059A  5D9E               	subwf	printf@val& (0+255),w,b
  2763  00059C  0009               	tblrd		*+
  2764  00059E  50F5               	movf	tablat,w,c
  2765  0005A0  0100               	movlb	0	; () banked
  2766  0005A2  599F               	subwfb	(printf@val+1)& (0+255),w,b
  2767  0005A4  A0D8               	btfss	status,0,c
  2768  0005A6  D02A               	goto	l3343
  2769                           
  2770                           ; BSR set to: 0
  2771                           
  2772                           ; BSR set to: 0
  2773                           
  2774                           ; BSR set to: 0
  2775                           ;doprnt.c: 1307: break;
  2776  0005A8  0100               	movlb	0	; () banked
  2777  0005AA  2BA3               	incf	printf@c& (0+255),f,b
  2778  0005AC  D7E5               	goto	l3313
  2779  0005AE                     l3325:
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2783  0005AE  0E01               	movlw	1
  2784  0005B0  0100               	movlb	0	; () banked
  2785  0005B2  6FA3               	movwf	printf@c& (0+255),b
  2786  0005B4                     l3327:
  2787                           
  2788                           ; BSR set to: 0
  2789  0005B4  0E04               	movlw	4
  2790  0005B6  0100               	movlb	0	; () banked
  2791  0005B8  19A3               	xorwf	printf@c& (0+255),w,b
  2792  0005BA  B4D8               	btfsc	status,2,c
  2793  0005BC  D01F               	goto	l3343
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2797                           
  2798                           ; BSR set to: 0
  2799                           
  2800                           ; BSR set to: 0
  2801  0005BE  0100               	movlb	0	; () banked
  2802  0005C0  51A3               	movf	printf@c& (0+255),w,b
  2803  0005C2  0D02               	mullw	2
  2804  0005C4  0EFC               	movlw	low _hexpowers
  2805  0005C6  24F3               	addwf	prodl,w,c
  2806  0005C8  6EF6               	movwf	tblptrl,c
  2807  0005CA  0EFE               	movlw	high _hexpowers
  2808  0005CC  20F4               	addwfc	prodh,w,c
  2809  0005CE  6EF7               	movwf	tblptrh,c
  2810  0005D0                     	if	0	;There are less than 3 active tblptr bytes
  2811  0005D0                     	endif
  2812  0005D0  0009               	tblrd		*+
  2813  0005D2  50F5               	movf	tablat,w,c
  2814  0005D4  0100               	movlb	0	; () banked
  2815  0005D6  5D9E               	subwf	printf@val& (0+255),w,b
  2816  0005D8  0009               	tblrd		*+
  2817  0005DA  50F5               	movf	tablat,w,c
  2818  0005DC  0100               	movlb	0	; () banked
  2819  0005DE  599F               	subwfb	(printf@val+1)& (0+255),w,b
  2820  0005E0  A0D8               	btfss	status,0,c
  2821  0005E2  D00C               	goto	l3343
  2822                           
  2823                           ; BSR set to: 0
  2824                           
  2825                           ; BSR set to: 0
  2826                           
  2827                           ; BSR set to: 0
  2828                           ;doprnt.c: 1318: break;
  2829  0005E4  0100               	movlb	0	; () banked
  2830  0005E6  2BA3               	incf	printf@c& (0+255),f,b
  2831  0005E8  D7E5               	goto	l3327
  2832  0005EA                     l3341:
  2833                           
  2834                           ; BSR set to: 0
  2835  0005EA  0100               	movlb	0	; () banked
  2836  0005EC  51A0               	movf	printf@flag& (0+255),w,b
  2837  0005EE  0B80               	andlw	128
  2838                           
  2839                           ; Switch size 1, requested type "space"
  2840                           ; Number of cases is 2, Range of values is 0 to 128
  2841                           ; switch strategies available:
  2842                           ; Name         Instructions Cycles
  2843                           ; simple_byte            7     4 (average)
  2844                           ;	Chosen strategy is simple_byte
  2845  0005F0  0A00               	xorlw	0	; case 0
  2846  0005F2  B4D8               	btfsc	status,2,c
  2847  0005F4  D7BE               	goto	l3311
  2848  0005F6  0A80               	xorlw	128	; case 128
  2849  0005F8  B4D8               	btfsc	status,2,c
  2850  0005FA  D7D9               	goto	l3325
  2851  0005FC                     l3343:
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2855  0005FC  0100               	movlb	0	; () banked
  2856  0005FE  51A1               	movf	printf@width& (0+255),w,b
  2857  000600  0100               	movlb	0	; () banked
  2858  000602  11A2               	iorwf	(printf@width+1)& (0+255),w,b
  2859  000604  B4D8               	btfsc	status,2,c
  2860  000606  D00B               	goto	l3349
  2861                           
  2862                           ; BSR set to: 0
  2863  000608  C0A0  F096         	movff	printf@flag,??_printf
  2864  00060C  0E03               	movlw	3
  2865  00060E  0100               	movlb	0	; () banked
  2866  000610  1796               	andwf	??_printf& (0+255),f,b
  2867  000612  B4D8               	btfsc	status,2,c
  2868  000614  D004               	goto	l3349
  2869                           
  2870                           ; BSR set to: 0
  2871                           ;doprnt.c: 1346: width--;
  2872  000616  0100               	movlb	0	; () banked
  2873  000618  07A1               	decf	printf@width& (0+255),f,b
  2874  00061A  A0D8               	btfss	status,0,c
  2875  00061C  07A2               	decf	(printf@width+1)& (0+255),f,b
  2876  00061E                     l3349:
  2877                           
  2878                           ; BSR set to: 0
  2879                           ;doprnt.c: 1381: if(width > c)
  2880  00061E  0E80               	movlw	128
  2881  000620  0100               	movlb	0	; () banked
  2882  000622  BFA3               	btfsc	printf@c& (0+255),7,b
  2883  000624  0E7F               	movlw	127
  2884  000626  0100               	movlb	0	; () banked
  2885  000628  6F96               	movwf	??_printf& (0+255),b
  2886  00062A  0100               	movlb	0	; () banked
  2887  00062C  51A1               	movf	printf@width& (0+255),w,b
  2888  00062E  0100               	movlb	0	; () banked
  2889  000630  5DA3               	subwf	printf@c& (0+255),w,b
  2890  000632  0100               	movlb	0	; () banked
  2891  000634  51A2               	movf	(printf@width+1)& (0+255),w,b
  2892  000636  0A80               	xorlw	128
  2893  000638  0100               	movlb	0	; () banked
  2894  00063A  5996               	subwfb	??_printf& (0+255),w,b
  2895  00063C  B0D8               	btfsc	status,0,c
  2896  00063E  D00B               	goto	l3353
  2897                           
  2898                           ; BSR set to: 0
  2899                           ;doprnt.c: 1382: width -= c;
  2900  000640  0100               	movlb	0	; () banked
  2901  000642  51A3               	movf	printf@c& (0+255),w,b
  2902  000644  0100               	movlb	0	; () banked
  2903  000646  5FA1               	subwf	printf@width& (0+255),f,b
  2904  000648  0E00               	movlw	0
  2905  00064A  0100               	movlb	0	; () banked
  2906  00064C  BFA3               	btfsc	printf@c& (0+255),7,b
  2907  00064E  0EFF               	movlw	255
  2908  000650  0100               	movlb	0	; () banked
  2909  000652  5BA2               	subwfb	(printf@width+1)& (0+255),f,b
  2910  000654  D005               	goto	l3355
  2911  000656                     l3353:
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;doprnt.c: 1383: else
  2915                           ;doprnt.c: 1384: width = 0;
  2916  000656  0E00               	movlw	0
  2917  000658  0100               	movlb	0	; () banked
  2918  00065A  6FA2               	movwf	(printf@width+1)& (0+255),b
  2919  00065C  0E00               	movlw	0
  2920  00065E  6FA1               	movwf	printf@width& (0+255),b
  2921  000660                     l3355:
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;doprnt.c: 1387: if(flag & 0x04) {
  2925  000660  0100               	movlb	0	; () banked
  2926  000662  A5A0               	btfss	printf@flag& (0+255),2,b
  2927  000664  D018               	goto	l3367
  2928                           
  2929                           ; BSR set to: 0
  2930                           ;doprnt.c: 1392: if(flag & 0x03)
  2931  000666  C0A0  F096         	movff	printf@flag,??_printf
  2932  00066A  0E03               	movlw	3
  2933  00066C  0100               	movlb	0	; () banked
  2934  00066E  1796               	andwf	??_printf& (0+255),f,b
  2935  000670  B4D8               	btfsc	status,2,c
  2936  000672  D003               	goto	l3361
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;doprnt.c: 1393: (putch('-') );
  2940  000674  0E2D               	movlw	45
  2941  000676  EC12  F00C         	call	_putch
  2942  00067A                     l3361:
  2943                           
  2944                           ;doprnt.c: 1415: if(width)
  2945  00067A  0100               	movlb	0	; () banked
  2946  00067C  51A1               	movf	printf@width& (0+255),w,b
  2947  00067E  0100               	movlb	0	; () banked
  2948  000680  11A2               	iorwf	(printf@width+1)& (0+255),w,b
  2949  000682  B4D8               	btfsc	status,2,c
  2950  000684  D025               	goto	l3377
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;doprnt.c: 1417: (putch('0') );
  2954                           
  2955                           ; BSR set to: 0
  2956                           
  2957                           ;doprnt.c: 1416: do
  2958  000686  0E30               	movlw	48
  2959  000688  EC12  F00C         	call	_putch
  2960                           
  2961                           ;doprnt.c: 1418: while(--width);
  2962  00068C  0100               	movlb	0	; () banked
  2963  00068E  07A1               	decf	printf@width& (0+255),f,b
  2964  000690  A0D8               	btfss	status,0,c
  2965  000692  07A2               	decf	(printf@width+1)& (0+255),f,b
  2966  000694  D7F2               	goto	l3361
  2967  000696                     l3367:
  2968                           
  2969                           ; BSR set to: 0
  2970                           ;doprnt.c: 1422: {
  2971                           ;doprnt.c: 1424: if(width
  2972                           ;doprnt.c: 1428: )
  2973  000696  0100               	movlb	0	; () banked
  2974  000698  51A1               	movf	printf@width& (0+255),w,b
  2975  00069A  0100               	movlb	0	; () banked
  2976  00069C  11A2               	iorwf	(printf@width+1)& (0+255),w,b
  2977  00069E  B4D8               	btfsc	status,2,c
  2978  0006A0  D00D               	goto	l3373
  2979  0006A2                     l3369:
  2980                           
  2981                           ; BSR set to: 0
  2982                           ;doprnt.c: 1430: (putch(' ') );
  2983  0006A2  0E20               	movlw	32
  2984  0006A4  EC12  F00C         	call	_putch
  2985                           
  2986                           ;doprnt.c: 1431: while(--width);
  2987  0006A8  0100               	movlb	0	; () banked
  2988  0006AA  07A1               	decf	printf@width& (0+255),f,b
  2989  0006AC  A0D8               	btfss	status,0,c
  2990  0006AE  07A2               	decf	(printf@width+1)& (0+255),f,b
  2991  0006B0  0100               	movlb	0	; () banked
  2992  0006B2  51A1               	movf	printf@width& (0+255),w,b
  2993  0006B4  0100               	movlb	0	; () banked
  2994  0006B6  11A2               	iorwf	(printf@width+1)& (0+255),w,b
  2995  0006B8  A4D8               	btfss	status,2,c
  2996  0006BA  D7F3               	goto	l3369
  2997  0006BC                     l3373:
  2998                           
  2999                           ; BSR set to: 0
  3000                           ;doprnt.c: 1438: if(flag & 0x03)
  3001  0006BC  C0A0  F096         	movff	printf@flag,??_printf
  3002  0006C0  0E03               	movlw	3
  3003  0006C2  0100               	movlb	0	; () banked
  3004  0006C4  1796               	andwf	??_printf& (0+255),f,b
  3005  0006C6  B4D8               	btfsc	status,2,c
  3006  0006C8  D003               	goto	l3377
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;doprnt.c: 1439: (putch('-') );
  3010  0006CA  0E2D               	movlw	45
  3011  0006CC  EC12  F00C         	call	_putch
  3012  0006D0                     l3377:
  3013                           
  3014                           ;doprnt.c: 1469: }
  3015                           ;doprnt.c: 1472: prec = c;
  3016  0006D0  C0A3  F09D         	movff	printf@c,printf@prec
  3017                           
  3018                           ;doprnt.c: 1474: while(prec--) {
  3019  0006D4  D05A               	goto	l3391
  3020  0006D6                     l3379:
  3021                           
  3022                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3023  0006D6  0100               	movlb	0	; () banked
  3024  0006D8  519D               	movf	printf@prec& (0+255),w,b
  3025  0006DA  0D02               	mullw	2
  3026  0006DC  0EF2               	movlw	low _dpowers
  3027  0006DE  24F3               	addwf	prodl,w,c
  3028  0006E0  6EF6               	movwf	tblptrl,c
  3029  0006E2  0EFE               	movlw	high _dpowers
  3030  0006E4  20F4               	addwfc	prodh,w,c
  3031  0006E6  6EF7               	movwf	tblptrh,c
  3032  0006E8                     	if	0	;There are less than 3 active tblptr bytes
  3033  0006E8                     	endif
  3034  0006E8  0009               	tblrd		*+
  3035  0006EA  CFF5 F082          	movff	tablat,___lwdiv@divisor
  3036  0006EE  000A               	tblrd		*-
  3037  0006F0  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  3038  0006F4  C09E  F080         	movff	printf@val,___lwdiv@dividend
  3039  0006F8  C09F  F081         	movff	printf@val+1,___lwdiv@dividend+1
  3040  0006FC  EC0C  F009         	call	___lwdiv	;wreg free
  3041  000700  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  3042  000704  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  3043  000708  0E00               	movlw	0
  3044  00070A  0100               	movlb	0	; () banked
  3045  00070C  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  3046  00070E  0E0A               	movlw	10
  3047  000710  6F89               	movwf	___lwmod@divisor& (0+255),b
  3048  000712  ECB4  F009         	call	___lwmod	;wreg free
  3049  000716  0100               	movlb	0	; () banked
  3050  000718  5187               	movf	?___lwmod& (0+255),w,b
  3051  00071A  0F30               	addlw	48
  3052  00071C  0100               	movlb	0	; () banked
  3053  00071E  6FA3               	movwf	printf@c& (0+255),b
  3054                           
  3055                           ;doprnt.c: 1491: break;
  3056  000720  D030               	goto	l3389
  3057  000722                     l3381:
  3058                           
  3059                           ; BSR set to: 0
  3060                           ;doprnt.c: 1499: {
  3061                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3062  000722  C09E  F080         	movff	printf@val,___lwdiv@dividend
  3063  000726  C09F  F081         	movff	printf@val+1,___lwdiv@dividend+1
  3064  00072A  0100               	movlb	0	; () banked
  3065  00072C  519D               	movf	printf@prec& (0+255),w,b
  3066  00072E  0D02               	mullw	2
  3067  000730  0EFC               	movlw	low _hexpowers
  3068  000732  24F3               	addwf	prodl,w,c
  3069  000734  6EF6               	movwf	tblptrl,c
  3070  000736  0EFE               	movlw	high _hexpowers
  3071  000738  20F4               	addwfc	prodh,w,c
  3072  00073A  6EF7               	movwf	tblptrh,c
  3073  00073C                     	if	0	;There are less than 3 active tblptr bytes
  3074  00073C                     	endif
  3075  00073C  0009               	tblrd		*+
  3076  00073E  CFF5 F082          	movff	tablat,___lwdiv@divisor
  3077  000742  000A               	tblrd		*-
  3078  000744  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  3079  000748  EC0C  F009         	call	___lwdiv	;wreg free
  3080  00074C  0100               	movlb	0	; () banked
  3081  00074E  5180               	movf	?___lwdiv& (0+255),w,b
  3082  000750  0B0F               	andlw	15
  3083  000752  0100               	movlb	0	; () banked
  3084  000754  6F9A               	movwf	printf@idx& (0+255),b
  3085                           
  3086                           ; BSR set to: 0
  3087                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3088  000756  0100               	movlb	0	; () banked
  3089  000758  519A               	movf	printf@idx& (0+255),w,b
  3090  00075A  0D01               	mullw	1
  3091  00075C  0E34               	movlw	low STR_17
  3092  00075E  24F3               	addwf	prodl,w,c
  3093  000760  6EF6               	movwf	tblptrl,c
  3094  000762  0EFF               	movlw	high STR_17
  3095  000764  20F4               	addwfc	prodh,w,c
  3096  000766  6EF7               	movwf	tblptrh,c
  3097  000768                     	if	0	;There are less than 3 active tblptr bytes
  3098  000768                     	endif
  3099  000768  0008               	tblrd		*
  3100  00076A  CFF5 F0A3          	movff	tablat,printf@c
  3101                           
  3102                           ; BSR set to: 0
  3103                           ;doprnt.c: 1523: }
  3104                           
  3105                           ;doprnt.c: 1508: }
  3106                           ;doprnt.c: 1510: break;
  3107  00076E  D009               	goto	l3389
  3108  000770                     l3387:
  3109  000770  0100               	movlb	0	; () banked
  3110  000772  51A0               	movf	printf@flag& (0+255),w,b
  3111  000774  0B80               	andlw	128
  3112                           
  3113                           ; Switch size 1, requested type "space"
  3114                           ; Number of cases is 2, Range of values is 0 to 128
  3115                           ; switch strategies available:
  3116                           ; Name         Instructions Cycles
  3117                           ; simple_byte            7     4 (average)
  3118                           ;	Chosen strategy is simple_byte
  3119  000776  0A00               	xorlw	0	; case 0
  3120  000778  B4D8               	btfsc	status,2,c
  3121  00077A  D7AD               	goto	l3379
  3122  00077C  0A80               	xorlw	128	; case 128
  3123  00077E  B4D8               	btfsc	status,2,c
  3124  000780  D7D0               	goto	l3381
  3125  000782                     l3389:
  3126                           
  3127                           ; BSR set to: 0
  3128                           ;doprnt.c: 1524: (putch(c) );
  3129  000782  0100               	movlb	0	; () banked
  3130  000784  51A3               	movf	printf@c& (0+255),w,b
  3131  000786  EC12  F00C         	call	_putch
  3132  00078A                     l3391:
  3133  00078A  0100               	movlb	0	; () banked
  3134  00078C  079D               	decf	printf@prec& (0+255),f,b
  3135  00078E  0100               	movlb	0	; () banked
  3136  000790  299D               	incf	printf@prec& (0+255),w,b
  3137  000792  A4D8               	btfss	status,2,c
  3138  000794  D7ED               	goto	l3387
  3139  000796                     l3393:
  3140  000796  C08E  FFF6         	movff	printf@f,tblptrl
  3141  00079A  C08F  FFF7         	movff	printf@f+1,tblptrh
  3142  00079E  0100               	movlb	0	; () banked
  3143  0007A0  4B8E               	infsnz	printf@f& (0+255),f,b
  3144  0007A2  2B8F               	incf	(printf@f+1)& (0+255),f,b
  3145  0007A4                     	if	0	;tblptru may be non-zero
  3146  0007A4                     	endif
  3147  0007A4                     	if	0	;tblptru may be non-zero
  3148  0007A4                     	endif
  3149  0007A4  0008               	tblrd		*
  3150  0007A6  CFF5 F0A3          	movff	tablat,printf@c
  3151  0007AA  0100               	movlb	0	; () banked
  3152  0007AC  51A3               	movf	printf@c& (0+255),w,b
  3153  0007AE  B4D8               	btfsc	status,2,c
  3154  0007B0  0012               	return	
  3155  0007B2  D62D               	goto	l3267
  3156  0007B4                     __end_of_printf:
  3157                           	opt stack 0
  3158                           tblptru	equ	0xFF8
  3159                           tblptrh	equ	0xFF7
  3160                           tblptrl	equ	0xFF6
  3161                           tablat	equ	0xFF5
  3162                           prodh	equ	0xFF4
  3163                           prodl	equ	0xFF3
  3164                           intcon	equ	0xFF2
  3165                           intcon3	equ	0xFF0
  3166                           postinc0	equ	0xFEE
  3167                           wreg	equ	0xFE8
  3168                           indf2	equ	0xFDF
  3169                           postinc2	equ	0xFDE
  3170                           postdec2	equ	0xFDD
  3171                           fsr2h	equ	0xFDA
  3172                           fsr2l	equ	0xFD9
  3173                           status	equ	0xFD8
  3174                           
  3175 ;; *************** function _putch *****************
  3176 ;; Defined at:
  3177 ;;		line 30 in file "lcd.c"
  3178 ;; Parameters:    Size  Location     Type
  3179 ;;  data            1    wreg     unsigned char 
  3180 ;; Auto vars:     Size  Location     Type
  3181 ;;  data            1    2[BANK0 ] unsigned char 
  3182 ;; Return value:  Size  Location     Type
  3183 ;;                  1    wreg      void 
  3184 ;; Registers used:
  3185 ;;		wreg, status,2, status,0, cstack
  3186 ;; Tracked objects:
  3187 ;;		On entry : 0/0
  3188 ;;		On exit  : 0/0
  3189 ;;		Unchanged: 0/0
  3190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3192 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3194 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3195 ;;Total ram usage:        1 bytes
  3196 ;; Hardware stack levels used:    1
  3197 ;; Hardware stack levels required when called:    6
  3198 ;; This function calls:
  3199 ;;		_lcdNibble
  3200 ;; This function is called by:
  3201 ;;		_printf
  3202 ;; This function uses a non-reentrant model
  3203 ;;
  3204                           
  3205                           	psect	text6
  3206  001824                     __ptext6:
  3207                           	opt stack 0
  3208  001824                     _putch:
  3209                           	opt stack 22
  3210                           
  3211                           ;incstack = 0
  3212                           ;putch@data stored from wreg
  3213  001824  0100               	movlb	0	; () banked
  3214  001826  6F82               	movwf	putch@data& (0+255),b
  3215                           
  3216                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  3217  001828  848C               	bsf	3980,2,c	;volatile
  3218                           
  3219                           ;lcd.c: 32: lcdNibble(data);
  3220  00182A  0100               	movlb	0	; () banked
  3221  00182C  5182               	movf	putch@data& (0+255),w,b
  3222  00182E  EC80  F009         	call	_lcdNibble
  3223  001832  0012               	return		;funcret
  3224  001834                     __end_of_putch:
  3225                           	opt stack 0
  3226                           tblptru	equ	0xFF8
  3227                           tblptrh	equ	0xFF7
  3228                           tblptrl	equ	0xFF6
  3229                           tablat	equ	0xFF5
  3230                           prodh	equ	0xFF4
  3231                           prodl	equ	0xFF3
  3232                           intcon	equ	0xFF2
  3233                           intcon3	equ	0xFF0
  3234                           postinc0	equ	0xFEE
  3235                           wreg	equ	0xFE8
  3236                           indf2	equ	0xFDF
  3237                           postinc2	equ	0xFDE
  3238                           postdec2	equ	0xFDD
  3239                           fsr2h	equ	0xFDA
  3240                           fsr2l	equ	0xFD9
  3241                           status	equ	0xFD8
  3242                           
  3243 ;; *************** function _isdigit *****************
  3244 ;; Defined at:
  3245 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/isdigit.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;  c               1    wreg     unsigned char 
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;  c               1    2[BANK0 ] unsigned char 
  3250 ;; Return value:  Size  Location     Type
  3251 ;;		None               void
  3252 ;; Registers used:
  3253 ;;		wreg, status,2, status,0
  3254 ;; Tracked objects:
  3255 ;;		On entry : 0/0
  3256 ;;		On exit  : 0/0
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3262 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3263 ;;Total ram usage:        3 bytes
  3264 ;; Hardware stack levels used:    1
  3265 ;; Hardware stack levels required when called:    5
  3266 ;; This function calls:
  3267 ;;		Nothing
  3268 ;; This function is called by:
  3269 ;;		_printf
  3270 ;; This function uses a non-reentrant model
  3271 ;;
  3272                           
  3273                           	psect	text7
  3274  001768                     __ptext7:
  3275                           	opt stack 0
  3276  001768                     _isdigit:
  3277                           	opt stack 23
  3278                           
  3279                           ;incstack = 0
  3280                           ;isdigit@c stored from wreg
  3281  001768  0100               	movlb	0	; () banked
  3282  00176A  6F82               	movwf	isdigit@c& (0+255),b
  3283  00176C  0E00               	movlw	0
  3284  00176E  0100               	movlb	0	; () banked
  3285  001770  6F81               	movwf	_isdigit$682& (0+255),b
  3286                           
  3287                           ; BSR set to: 0
  3288  001772  0E3A               	movlw	58
  3289  001774  0100               	movlb	0	; () banked
  3290  001776  6182               	cpfslt	isdigit@c& (0+255),b
  3291  001778  D007               	goto	l3199
  3292                           
  3293                           ; BSR set to: 0
  3294  00177A  0E2F               	movlw	47
  3295  00177C  0100               	movlb	0	; () banked
  3296  00177E  6582               	cpfsgt	isdigit@c& (0+255),b
  3297  001780  D003               	goto	l3199
  3298                           
  3299                           ; BSR set to: 0
  3300  001782  0E01               	movlw	1
  3301  001784  0100               	movlb	0	; () banked
  3302  001786  6F81               	movwf	_isdigit$682& (0+255),b
  3303  001788                     l3199:
  3304                           
  3305                           ; BSR set to: 0
  3306  001788  C081  F080         	movff	_isdigit$682,??_isdigit
  3307  00178C  0100               	movlb	0	; () banked
  3308  00178E  3180               	rrcf	??_isdigit& (0+255),w,b
  3309  001790  0012               	return	
  3310  001792                     __end_of_isdigit:
  3311                           	opt stack 0
  3312                           tblptru	equ	0xFF8
  3313                           tblptrh	equ	0xFF7
  3314                           tblptrl	equ	0xFF6
  3315                           tablat	equ	0xFF5
  3316                           prodh	equ	0xFF4
  3317                           prodl	equ	0xFF3
  3318                           intcon	equ	0xFF2
  3319                           intcon3	equ	0xFF0
  3320                           postinc0	equ	0xFEE
  3321                           wreg	equ	0xFE8
  3322                           indf2	equ	0xFDF
  3323                           postinc2	equ	0xFDE
  3324                           postdec2	equ	0xFDD
  3325                           fsr2h	equ	0xFDA
  3326                           fsr2l	equ	0xFD9
  3327                           status	equ	0xFD8
  3328                           
  3329 ;; *************** function ___wmul *****************
  3330 ;; Defined at:
  3331 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/Umul16.c"
  3332 ;; Parameters:    Size  Location     Type
  3333 ;;  multiplier      2    8[BANK0 ] unsigned int 
  3334 ;;  multiplicand    2   10[BANK0 ] unsigned int 
  3335 ;; Auto vars:     Size  Location     Type
  3336 ;;  product         2   12[BANK0 ] unsigned int 
  3337 ;; Return value:  Size  Location     Type
  3338 ;;                  2    8[BANK0 ] unsigned int 
  3339 ;; Registers used:
  3340 ;;		wreg, status,2, status,0, prodl, prodh
  3341 ;; Tracked objects:
  3342 ;;		On entry : 0/0
  3343 ;;		On exit  : 0/0
  3344 ;;		Unchanged: 0/0
  3345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3346 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3347 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3349 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3350 ;;Total ram usage:        6 bytes
  3351 ;; Hardware stack levels used:    1
  3352 ;; Hardware stack levels required when called:    5
  3353 ;; This function calls:
  3354 ;;		Nothing
  3355 ;; This function is called by:
  3356 ;;		_Operate
  3357 ;;		_printf
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           	psect	text8
  3362  00169C                     __ptext8:
  3363                           	opt stack 0
  3364  00169C                     ___wmul:
  3365                           	opt stack 23
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;incstack = 0
  3369  00169C  0100               	movlb	0	; () banked
  3370  00169E  5188               	movf	___wmul@multiplier& (0+255),w,b
  3371  0016A0  0100               	movlb	0	; () banked
  3372  0016A2  038A               	mulwf	___wmul@multiplicand& (0+255),b
  3373  0016A4  CFF3 F08C          	movff	prodl,___wmul@product
  3374  0016A8  CFF4 F08D          	movff	prodh,___wmul@product+1
  3375  0016AC  0100               	movlb	0	; () banked
  3376  0016AE  5188               	movf	___wmul@multiplier& (0+255),w,b
  3377  0016B0  0100               	movlb	0	; () banked
  3378  0016B2  038B               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3379  0016B4  50F3               	movf	prodl,w,c
  3380  0016B6  0100               	movlb	0	; () banked
  3381  0016B8  278D               	addwf	(___wmul@product+1)& (0+255),f,b
  3382  0016BA  0100               	movlb	0	; () banked
  3383  0016BC  5189               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3384  0016BE  0100               	movlb	0	; () banked
  3385  0016C0  038A               	mulwf	___wmul@multiplicand& (0+255),b
  3386  0016C2  50F3               	movf	prodl,w,c
  3387  0016C4  0100               	movlb	0	; () banked
  3388  0016C6  278D               	addwf	(___wmul@product+1)& (0+255),f,b
  3389                           
  3390                           ; BSR set to: 0
  3391  0016C8  C08C  F088         	movff	___wmul@product,?___wmul
  3392  0016CC  C08D  F089         	movff	___wmul@product+1,?___wmul+1
  3393  0016D0  0012               	return	
  3394  0016D2                     __end_of___wmul:
  3395                           	opt stack 0
  3396                           tblptru	equ	0xFF8
  3397                           tblptrh	equ	0xFF7
  3398                           tblptrl	equ	0xFF6
  3399                           tablat	equ	0xFF5
  3400                           prodh	equ	0xFF4
  3401                           prodl	equ	0xFF3
  3402                           intcon	equ	0xFF2
  3403                           intcon3	equ	0xFF0
  3404                           postinc0	equ	0xFEE
  3405                           wreg	equ	0xFE8
  3406                           indf2	equ	0xFDF
  3407                           postinc2	equ	0xFDE
  3408                           postdec2	equ	0xFDD
  3409                           fsr2h	equ	0xFDA
  3410                           fsr2l	equ	0xFD9
  3411                           status	equ	0xFD8
  3412                           
  3413 ;; *************** function ___lwmod *****************
  3414 ;; Defined at:
  3415 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
  3416 ;; Parameters:    Size  Location     Type
  3417 ;;  dividend        2    7[BANK0 ] unsigned int 
  3418 ;;  divisor         2    9[BANK0 ] unsigned int 
  3419 ;; Auto vars:     Size  Location     Type
  3420 ;;  counter         1   11[BANK0 ] unsigned char 
  3421 ;; Return value:  Size  Location     Type
  3422 ;;                  2    7[BANK0 ] unsigned int 
  3423 ;; Registers used:
  3424 ;;		wreg, status,2, status,0
  3425 ;; Tracked objects:
  3426 ;;		On entry : 0/0
  3427 ;;		On exit  : 0/0
  3428 ;;		Unchanged: 0/0
  3429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3430 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3431 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3433 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3434 ;;Total ram usage:        5 bytes
  3435 ;; Hardware stack levels used:    1
  3436 ;; Hardware stack levels required when called:    5
  3437 ;; This function calls:
  3438 ;;		Nothing
  3439 ;; This function is called by:
  3440 ;;		_printf
  3441 ;; This function uses a non-reentrant model
  3442 ;;
  3443                           
  3444                           	psect	text9
  3445  001368                     __ptext9:
  3446                           	opt stack 0
  3447  001368                     ___lwmod:
  3448                           	opt stack 23
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;incstack = 0
  3452  001368  0100               	movlb	0	; () banked
  3453  00136A  5189               	movf	___lwmod@divisor& (0+255),w,b
  3454  00136C  0100               	movlb	0	; () banked
  3455  00136E  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  3456  001370  B4D8               	btfsc	status,2,c
  3457  001372  D026               	goto	l794
  3458                           
  3459                           ; BSR set to: 0
  3460  001374  0E01               	movlw	1
  3461  001376  0100               	movlb	0	; () banked
  3462  001378  6F8B               	movwf	___lwmod@counter& (0+255),b
  3463  00137A  D006               	goto	l3237
  3464  00137C                     l3235:
  3465                           
  3466                           ; BSR set to: 0
  3467  00137C  0100               	movlb	0	; () banked
  3468  00137E  90D8               	bcf	status,0,c
  3469  001380  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  3470  001382  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  3471  001384  0100               	movlb	0	; () banked
  3472  001386  2B8B               	incf	___lwmod@counter& (0+255),f,b
  3473  001388                     l3237:
  3474                           
  3475                           ; BSR set to: 0
  3476  001388  0100               	movlb	0	; () banked
  3477  00138A  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  3478  00138C  D7F7               	goto	l3235
  3479  00138E                     l3239:
  3480                           
  3481                           ; BSR set to: 0
  3482  00138E  0100               	movlb	0	; () banked
  3483  001390  5189               	movf	___lwmod@divisor& (0+255),w,b
  3484  001392  0100               	movlb	0	; () banked
  3485  001394  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  3486  001396  0100               	movlb	0	; () banked
  3487  001398  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3488  00139A  0100               	movlb	0	; () banked
  3489  00139C  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  3490  00139E  A0D8               	btfss	status,0,c
  3491  0013A0  D008               	goto	l3243
  3492                           
  3493                           ; BSR set to: 0
  3494  0013A2  0100               	movlb	0	; () banked
  3495  0013A4  5189               	movf	___lwmod@divisor& (0+255),w,b
  3496  0013A6  0100               	movlb	0	; () banked
  3497  0013A8  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  3498  0013AA  0100               	movlb	0	; () banked
  3499  0013AC  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3500  0013AE  0100               	movlb	0	; () banked
  3501  0013B0  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  3502  0013B2                     l3243:
  3503                           
  3504                           ; BSR set to: 0
  3505  0013B2  0100               	movlb	0	; () banked
  3506  0013B4  90D8               	bcf	status,0,c
  3507  0013B6  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  3508  0013B8  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  3509                           
  3510                           ; BSR set to: 0
  3511  0013BA  0100               	movlb	0	; () banked
  3512  0013BC  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  3513  0013BE  D7E7               	goto	l3239
  3514  0013C0                     l794:
  3515                           
  3516                           ; BSR set to: 0
  3517  0013C0  C087  F087         	movff	___lwmod@dividend,?___lwmod
  3518  0013C4  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  3519                           
  3520                           ; BSR set to: 0
  3521  0013C8  0012               	return		;funcret
  3522  0013CA                     __end_of___lwmod:
  3523                           	opt stack 0
  3524                           tblptru	equ	0xFF8
  3525                           tblptrh	equ	0xFF7
  3526                           tblptrl	equ	0xFF6
  3527                           tablat	equ	0xFF5
  3528                           prodh	equ	0xFF4
  3529                           prodl	equ	0xFF3
  3530                           intcon	equ	0xFF2
  3531                           intcon3	equ	0xFF0
  3532                           postinc0	equ	0xFEE
  3533                           wreg	equ	0xFE8
  3534                           indf2	equ	0xFDF
  3535                           postinc2	equ	0xFDE
  3536                           postdec2	equ	0xFDD
  3537                           fsr2h	equ	0xFDA
  3538                           fsr2l	equ	0xFD9
  3539                           status	equ	0xFD8
  3540                           
  3541 ;; *************** function ___lwdiv *****************
  3542 ;; Defined at:
  3543 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  3544 ;; Parameters:    Size  Location     Type
  3545 ;;  dividend        2    0[BANK0 ] unsigned int 
  3546 ;;  divisor         2    2[BANK0 ] unsigned int 
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;  quotient        2    5[BANK0 ] unsigned int 
  3549 ;;  counter         1    4[BANK0 ] unsigned char 
  3550 ;; Return value:  Size  Location     Type
  3551 ;;                  2    0[BANK0 ] unsigned int 
  3552 ;; Registers used:
  3553 ;;		wreg, status,2, status,0
  3554 ;; Tracked objects:
  3555 ;;		On entry : 0/0
  3556 ;;		On exit  : 0/0
  3557 ;;		Unchanged: 0/0
  3558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3559 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3560 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3562 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3563 ;;Total ram usage:        7 bytes
  3564 ;; Hardware stack levels used:    1
  3565 ;; Hardware stack levels required when called:    5
  3566 ;; This function calls:
  3567 ;;		Nothing
  3568 ;; This function is called by:
  3569 ;;		_printf
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           	psect	text10
  3574  001218                     __ptext10:
  3575                           	opt stack 0
  3576  001218                     ___lwdiv:
  3577                           	opt stack 23
  3578                           
  3579                           ; BSR set to: 0
  3580                           ;incstack = 0
  3581  001218  0E00               	movlw	0
  3582  00121A  0100               	movlb	0	; () banked
  3583  00121C  6F86               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3584  00121E  0E00               	movlw	0
  3585  001220  6F85               	movwf	___lwdiv@quotient& (0+255),b
  3586                           
  3587                           ; BSR set to: 0
  3588  001222  0100               	movlb	0	; () banked
  3589  001224  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3590  001226  0100               	movlb	0	; () banked
  3591  001228  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3592  00122A  B4D8               	btfsc	status,2,c
  3593  00122C  D02C               	goto	l784
  3594                           
  3595                           ; BSR set to: 0
  3596  00122E  0E01               	movlw	1
  3597  001230  0100               	movlb	0	; () banked
  3598  001232  6F84               	movwf	___lwdiv@counter& (0+255),b
  3599  001234  D006               	goto	l3217
  3600  001236                     l3215:
  3601                           
  3602                           ; BSR set to: 0
  3603  001236  0100               	movlb	0	; () banked
  3604  001238  90D8               	bcf	status,0,c
  3605  00123A  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  3606  00123C  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3607  00123E  0100               	movlb	0	; () banked
  3608  001240  2B84               	incf	___lwdiv@counter& (0+255),f,b
  3609  001242                     l3217:
  3610                           
  3611                           ; BSR set to: 0
  3612  001242  0100               	movlb	0	; () banked
  3613  001244  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3614  001246  D7F7               	goto	l3215
  3615  001248                     l3219:
  3616                           
  3617                           ; BSR set to: 0
  3618  001248  0100               	movlb	0	; () banked
  3619  00124A  90D8               	bcf	status,0,c
  3620  00124C  3785               	rlcf	___lwdiv@quotient& (0+255),f,b
  3621  00124E  3786               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3622                           
  3623                           ; BSR set to: 0
  3624  001250  0100               	movlb	0	; () banked
  3625  001252  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3626  001254  0100               	movlb	0	; () banked
  3627  001256  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  3628  001258  0100               	movlb	0	; () banked
  3629  00125A  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3630  00125C  0100               	movlb	0	; () banked
  3631  00125E  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3632  001260  A0D8               	btfss	status,0,c
  3633  001262  D00A               	goto	l3227
  3634                           
  3635                           ; BSR set to: 0
  3636  001264  0100               	movlb	0	; () banked
  3637  001266  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3638  001268  0100               	movlb	0	; () banked
  3639  00126A  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  3640  00126C  0100               	movlb	0	; () banked
  3641  00126E  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3642  001270  0100               	movlb	0	; () banked
  3643  001272  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3644                           
  3645                           ; BSR set to: 0
  3646  001274  0100               	movlb	0	; () banked
  3647  001276  8185               	bsf	___lwdiv@quotient& (0+255),0,b
  3648  001278                     l3227:
  3649                           
  3650                           ; BSR set to: 0
  3651  001278  0100               	movlb	0	; () banked
  3652  00127A  90D8               	bcf	status,0,c
  3653  00127C  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3654  00127E  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  3655                           
  3656                           ; BSR set to: 0
  3657  001280  0100               	movlb	0	; () banked
  3658  001282  2F84               	decfsz	___lwdiv@counter& (0+255),f,b
  3659  001284  D7E1               	goto	l3219
  3660  001286                     l784:
  3661                           
  3662                           ; BSR set to: 0
  3663  001286  C085  F080         	movff	___lwdiv@quotient,?___lwdiv
  3664  00128A  C086  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3665                           
  3666                           ; BSR set to: 0
  3667  00128E  0012               	return		;funcret
  3668  001290                     __end_of___lwdiv:
  3669                           	opt stack 0
  3670                           tblptru	equ	0xFF8
  3671                           tblptrh	equ	0xFF7
  3672                           tblptrl	equ	0xFF6
  3673                           tablat	equ	0xFF5
  3674                           prodh	equ	0xFF4
  3675                           prodl	equ	0xFF3
  3676                           intcon	equ	0xFF2
  3677                           intcon3	equ	0xFF0
  3678                           postinc0	equ	0xFEE
  3679                           wreg	equ	0xFE8
  3680                           indf2	equ	0xFDF
  3681                           postinc2	equ	0xFDE
  3682                           postdec2	equ	0xFDD
  3683                           fsr2h	equ	0xFDA
  3684                           fsr2l	equ	0xFD9
  3685                           status	equ	0xFD8
  3686                           
  3687 ;; *************** function _initialization *****************
  3688 ;; Defined at:
  3689 ;;		line 45 in file "Sort.c"
  3690 ;; Parameters:    Size  Location     Type
  3691 ;;		None
  3692 ;; Auto vars:     Size  Location     Type
  3693 ;;  i               1    4[BANK0 ] unsigned char 
  3694 ;;  i               1    3[BANK0 ] unsigned char 
  3695 ;;  i               1    2[BANK0 ] unsigned char 
  3696 ;; Return value:  Size  Location     Type
  3697 ;;                  1    wreg      void 
  3698 ;; Registers used:
  3699 ;;		wreg, status,2, status,0
  3700 ;; Tracked objects:
  3701 ;;		On entry : 0/0
  3702 ;;		On exit  : 0/0
  3703 ;;		Unchanged: 0/0
  3704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3706 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3707 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3708 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3709 ;;Total ram usage:        5 bytes
  3710 ;; Hardware stack levels used:    1
  3711 ;; Hardware stack levels required when called:    5
  3712 ;; This function calls:
  3713 ;;		Nothing
  3714 ;; This function is called by:
  3715 ;;		_startSorting
  3716 ;; This function uses a non-reentrant model
  3717 ;;
  3718                           
  3719                           	psect	text11
  3720  001104                     __ptext11:
  3721                           	opt stack 0
  3722  001104                     _initialization:
  3723                           	opt stack 23
  3724                           
  3725                           ;Sort.c: 47: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)));};
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;incstack = 0
  3729  001104  0E00               	movlw	0
  3730  001106  0100               	movlb	0	; () banked
  3731  001108  6F82               	movwf	initialization@i& (0+255),b
  3732  00110A                     l3397:
  3733                           
  3734                           ; BSR set to: 0
  3735  00110A  0E09               	movlw	9
  3736  00110C  0100               	movlb	0	; () banked
  3737  00110E  6582               	cpfsgt	initialization@i& (0+255),b
  3738  001110  D001               	goto	l3401
  3739  001112  D010               	goto	l3405
  3740  001114                     l3401:
  3741                           
  3742                           ; BSR set to: 0
  3743  001114  0E02               	movlw	2
  3744  001116  0100               	movlb	0	; () banked
  3745  001118  6F81               	movwf	(??_initialization+1)& (0+255),b
  3746  00111A  0E3F               	movlw	63
  3747  00111C  0100               	movlb	0	; () banked
  3748  00111E  6F80               	movwf	??_initialization& (0+255),b
  3749  001120  0E2B               	movlw	43
  3750  001122                     u3847:
  3751  001122  2EE8               	decfsz	wreg,f,c
  3752  001124  D7FE               	bra	u3847
  3753  001126  2F80               	decfsz	??_initialization& (0+255),f,b
  3754  001128  D7FC               	bra	u3847
  3755  00112A  2F81               	decfsz	(??_initialization+1)& (0+255),f,b
  3756  00112C  D7FA               	bra	u3847
  3757  00112E  0100               	movlb	0	; () banked
  3758  001130  2B82               	incf	initialization@i& (0+255),f,b
  3759  001132  D7EB               	goto	l3397
  3760  001134                     l3405:
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;Sort.c: 48: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)));};
  3764  001134  0E00               	movlw	0
  3765  001136  0100               	movlb	0	; () banked
  3766  001138  6F83               	movwf	initialization@i_280& (0+255),b
  3767  00113A                     l3407:
  3768                           
  3769                           ; BSR set to: 0
  3770  00113A  0E09               	movlw	9
  3771  00113C  0100               	movlb	0	; () banked
  3772  00113E  6583               	cpfsgt	initialization@i_280& (0+255),b
  3773  001140  D001               	goto	l3411
  3774  001142  D010               	goto	l3415
  3775  001144                     l3411:
  3776                           
  3777                           ; BSR set to: 0
  3778  001144  0E02               	movlw	2
  3779  001146  0100               	movlb	0	; () banked
  3780  001148  6F81               	movwf	(??_initialization+1)& (0+255),b
  3781  00114A  0E3F               	movlw	63
  3782  00114C  0100               	movlb	0	; () banked
  3783  00114E  6F80               	movwf	??_initialization& (0+255),b
  3784  001150  0E2B               	movlw	43
  3785  001152                     u3857:
  3786  001152  2EE8               	decfsz	wreg,f,c
  3787  001154  D7FE               	bra	u3857
  3788  001156  2F80               	decfsz	??_initialization& (0+255),f,b
  3789  001158  D7FC               	bra	u3857
  3790  00115A  2F81               	decfsz	(??_initialization+1)& (0+255),f,b
  3791  00115C  D7FA               	bra	u3857
  3792  00115E  0100               	movlb	0	; () banked
  3793  001160  2B83               	incf	initialization@i_280& (0+255),f,b
  3794  001162  D7EB               	goto	l3407
  3795  001164                     l3415:
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;Sort.c: 49: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)));};
  3799  001164  0E00               	movlw	0
  3800  001166  0100               	movlb	0	; () banked
  3801  001168  6F84               	movwf	initialization@i_281& (0+255),b
  3802  00116A                     l3417:
  3803                           
  3804                           ; BSR set to: 0
  3805  00116A  0E09               	movlw	9
  3806  00116C  0100               	movlb	0	; () banked
  3807  00116E  6584               	cpfsgt	initialization@i_281& (0+255),b
  3808  001170  D001               	goto	l3421
  3809  001172  0012               	return	
  3810  001174                     l3421:
  3811                           
  3812                           ; BSR set to: 0
  3813  001174  0E02               	movlw	2
  3814  001176  0100               	movlb	0	; () banked
  3815  001178  6F81               	movwf	(??_initialization+1)& (0+255),b
  3816  00117A  0E3F               	movlw	63
  3817  00117C  0100               	movlb	0	; () banked
  3818  00117E  6F80               	movwf	??_initialization& (0+255),b
  3819  001180  0E2B               	movlw	43
  3820  001182                     u3867:
  3821  001182  2EE8               	decfsz	wreg,f,c
  3822  001184  D7FE               	bra	u3867
  3823  001186  2F80               	decfsz	??_initialization& (0+255),f,b
  3824  001188  D7FC               	bra	u3867
  3825  00118A  2F81               	decfsz	(??_initialization+1)& (0+255),f,b
  3826  00118C  D7FA               	bra	u3867
  3827  00118E  0100               	movlb	0	; () banked
  3828  001190  2B84               	incf	initialization@i_281& (0+255),f,b
  3829  001192  D7EB               	goto	l3417
  3830  001194                     __end_of_initialization:
  3831                           	opt stack 0
  3832                           tblptru	equ	0xFF8
  3833                           tblptrh	equ	0xFF7
  3834                           tblptrl	equ	0xFF6
  3835                           tablat	equ	0xFF5
  3836                           prodh	equ	0xFF4
  3837                           prodl	equ	0xFF3
  3838                           intcon	equ	0xFF2
  3839                           intcon3	equ	0xFF0
  3840                           postinc0	equ	0xFEE
  3841                           wreg	equ	0xFE8
  3842                           indf2	equ	0xFDF
  3843                           postinc2	equ	0xFDE
  3844                           postdec2	equ	0xFDD
  3845                           fsr2h	equ	0xFDA
  3846                           fsr2l	equ	0xFD9
  3847                           status	equ	0xFD8
  3848                           
  3849 ;; *************** function _initLCD *****************
  3850 ;; Defined at:
  3851 ;;		line 14 in file "lcd.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;		None
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;		None
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  1    wreg      void 
  3858 ;; Registers used:
  3859 ;;		wreg, status,2, status,0, cstack
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3867 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3868 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3869 ;;Total ram usage:        1 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; Hardware stack levels required when called:    7
  3872 ;; This function calls:
  3873 ;;		_lcdInst
  3874 ;; This function is called by:
  3875 ;;		_main
  3876 ;;		_startSorting
  3877 ;;		_results
  3878 ;;		_Operate
  3879 ;; This function uses a non-reentrant model
  3880 ;;
  3881                           
  3882                           	psect	text12
  3883  001580                     __ptext12:
  3884                           	opt stack 0
  3885  001580                     _initLCD:
  3886                           	opt stack 22
  3887                           
  3888                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;incstack = 0
  3892  001580  0E31               	movlw	49
  3893  001582  0100               	movlb	0	; () banked
  3894  001584  6F83               	movwf	??_initLCD& (0+255),b
  3895  001586  0EB2               	movlw	178
  3896  001588                     u3877:
  3897  001588  2EE8               	decfsz	wreg,f,c
  3898  00158A  D7FE               	bra	u3877
  3899  00158C  2F83               	decfsz	??_initLCD& (0+255),f,b
  3900  00158E  D7FC               	bra	u3877
  3901  001590  F000               	nop	
  3902                           
  3903                           ;lcd.c: 16: lcdInst(0b00110011);
  3904  001592  0E33               	movlw	51
  3905  001594  EC1A  F00C         	call	_lcdInst
  3906                           
  3907                           ;lcd.c: 17: lcdInst(0b00110010);
  3908  001598  0E32               	movlw	50
  3909  00159A  EC1A  F00C         	call	_lcdInst
  3910                           
  3911                           ;lcd.c: 18: lcdInst(0b00101000);
  3912  00159E  0E28               	movlw	40
  3913  0015A0  EC1A  F00C         	call	_lcdInst
  3914                           
  3915                           ;lcd.c: 19: lcdInst(0b00001111);
  3916  0015A4  0E0F               	movlw	15
  3917  0015A6  EC1A  F00C         	call	_lcdInst
  3918                           
  3919                           ;lcd.c: 20: lcdInst(0b00000110);
  3920  0015AA  0E06               	movlw	6
  3921  0015AC  EC1A  F00C         	call	_lcdInst
  3922                           
  3923                           ;lcd.c: 21: lcdInst(0b00000001);
  3924  0015B0  0E01               	movlw	1
  3925  0015B2  EC1A  F00C         	call	_lcdInst
  3926                           
  3927                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  3928  0015B6  0E31               	movlw	49
  3929  0015B8  0100               	movlb	0	; () banked
  3930  0015BA  6F83               	movwf	??_initLCD& (0+255),b
  3931  0015BC  0EB2               	movlw	178
  3932  0015BE                     u3887:
  3933  0015BE  2EE8               	decfsz	wreg,f,c
  3934  0015C0  D7FE               	bra	u3887
  3935  0015C2  2F83               	decfsz	??_initLCD& (0+255),f,b
  3936  0015C4  D7FC               	bra	u3887
  3937  0015C6  F000               	nop	
  3938  0015C8  0012               	return		;funcret
  3939  0015CA                     __end_of_initLCD:
  3940                           	opt stack 0
  3941                           tblptru	equ	0xFF8
  3942                           tblptrh	equ	0xFF7
  3943                           tblptrl	equ	0xFF6
  3944                           tablat	equ	0xFF5
  3945                           prodh	equ	0xFF4
  3946                           prodl	equ	0xFF3
  3947                           intcon	equ	0xFF2
  3948                           intcon3	equ	0xFF0
  3949                           postinc0	equ	0xFEE
  3950                           wreg	equ	0xFE8
  3951                           indf2	equ	0xFDF
  3952                           postinc2	equ	0xFDE
  3953                           postdec2	equ	0xFDD
  3954                           fsr2h	equ	0xFDA
  3955                           fsr2l	equ	0xFD9
  3956                           status	equ	0xFD8
  3957                           
  3958 ;; *************** function _lcdInst *****************
  3959 ;; Defined at:
  3960 ;;		line 25 in file "lcd.c"
  3961 ;; Parameters:    Size  Location     Type
  3962 ;;  data            1    wreg     unsigned char 
  3963 ;; Auto vars:     Size  Location     Type
  3964 ;;  data            1    2[BANK0 ] unsigned char 
  3965 ;; Return value:  Size  Location     Type
  3966 ;;                  1    wreg      void 
  3967 ;; Registers used:
  3968 ;;		wreg, status,2, status,0, cstack
  3969 ;; Tracked objects:
  3970 ;;		On entry : 0/0
  3971 ;;		On exit  : 0/0
  3972 ;;		Unchanged: 0/0
  3973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3975 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3977 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;Total ram usage:        1 bytes
  3979 ;; Hardware stack levels used:    1
  3980 ;; Hardware stack levels required when called:    6
  3981 ;; This function calls:
  3982 ;;		_lcdNibble
  3983 ;; This function is called by:
  3984 ;;		_initLCD
  3985 ;;		_startSorting
  3986 ;;		_results
  3987 ;;		_Operate
  3988 ;; This function uses a non-reentrant model
  3989 ;;
  3990                           
  3991                           	psect	text13
  3992  001834                     __ptext13:
  3993                           	opt stack 0
  3994  001834                     _lcdInst:
  3995                           	opt stack 23
  3996                           
  3997                           ;incstack = 0
  3998                           ;lcdInst@data stored from wreg
  3999  001834  0100               	movlb	0	; () banked
  4000  001836  6F82               	movwf	lcdInst@data& (0+255),b
  4001                           
  4002                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  4003  001838  948C               	bcf	3980,2,c	;volatile
  4004                           
  4005                           ;lcd.c: 27: lcdNibble(data);
  4006  00183A  0100               	movlb	0	; () banked
  4007  00183C  5182               	movf	lcdInst@data& (0+255),w,b
  4008  00183E  EC80  F009         	call	_lcdNibble
  4009  001842  0012               	return		;funcret
  4010  001844                     __end_of_lcdInst:
  4011                           	opt stack 0
  4012                           tblptru	equ	0xFF8
  4013                           tblptrh	equ	0xFF7
  4014                           tblptrl	equ	0xFF6
  4015                           tablat	equ	0xFF5
  4016                           prodh	equ	0xFF4
  4017                           prodl	equ	0xFF3
  4018                           intcon	equ	0xFF2
  4019                           intcon3	equ	0xFF0
  4020                           postinc0	equ	0xFEE
  4021                           wreg	equ	0xFE8
  4022                           indf2	equ	0xFDF
  4023                           postinc2	equ	0xFDE
  4024                           postdec2	equ	0xFDD
  4025                           fsr2h	equ	0xFDA
  4026                           fsr2l	equ	0xFD9
  4027                           status	equ	0xFD8
  4028                           
  4029 ;; *************** function _lcdNibble *****************
  4030 ;; Defined at:
  4031 ;;		line 35 in file "lcd.c"
  4032 ;; Parameters:    Size  Location     Type
  4033 ;;  data            1    wreg     unsigned char 
  4034 ;; Auto vars:     Size  Location     Type
  4035 ;;  data            1    1[BANK0 ] unsigned char 
  4036 ;;  temp            1    0[BANK0 ] unsigned char 
  4037 ;; Return value:  Size  Location     Type
  4038 ;;                  1    wreg      void 
  4039 ;; Registers used:
  4040 ;;		wreg, status,2, status,0
  4041 ;; Tracked objects:
  4042 ;;		On entry : 0/0
  4043 ;;		On exit  : 0/0
  4044 ;;		Unchanged: 0/0
  4045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4047 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4049 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4050 ;;Total ram usage:        2 bytes
  4051 ;; Hardware stack levels used:    1
  4052 ;; Hardware stack levels required when called:    5
  4053 ;; This function calls:
  4054 ;;		Nothing
  4055 ;; This function is called by:
  4056 ;;		_lcdInst
  4057 ;;		_putch
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           	psect	text14
  4062  001300                     __ptext14:
  4063                           	opt stack 0
  4064  001300                     _lcdNibble:
  4065                           	opt stack 22
  4066                           
  4067                           ;incstack = 0
  4068                           ;lcdNibble@data stored from wreg
  4069  001300  0100               	movlb	0	; () banked
  4070  001302  6F81               	movwf	lcdNibble@data& (0+255),b
  4071                           
  4072                           ;lcd.c: 37: char temp = data & 0xF0;
  4073  001304  0100               	movlb	0	; () banked
  4074  001306  5181               	movf	lcdNibble@data& (0+255),w,b
  4075  001308  0BF0               	andlw	240
  4076  00130A  0100               	movlb	0	; () banked
  4077  00130C  6F80               	movwf	lcdNibble@temp& (0+255),b
  4078                           
  4079                           ;lcd.c: 38: LATD = LATD & 0x0F;
  4080  00130E  508C               	movf	3980,w,c	;volatile
  4081  001310  0B0F               	andlw	15
  4082  001312  6E8C               	movwf	3980,c	;volatile
  4083                           
  4084                           ;lcd.c: 39: LATD = temp | LATD;
  4085  001314  0100               	movlb	0	; () banked
  4086  001316  5180               	movf	lcdNibble@temp& (0+255),w,b
  4087  001318  108C               	iorwf	3980,w,c	;volatile
  4088  00131A  6E8C               	movwf	3980,c	;volatile
  4089                           
  4090                           ; BSR set to: 0
  4091                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  4092  00131C  968C               	bcf	3980,3,c	;volatile
  4093                           
  4094                           ; BSR set to: 0
  4095                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
  4096  00131E  0E14               	movlw	20
  4097  001320                     u3897:
  4098  001320  2EE8               	decfsz	wreg,f,c
  4099  001322  D7FE               	bra	u3897
  4100  001324  D000               	nop2	
  4101                           
  4102                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  4103  001326  868C               	bsf	3980,3,c	;volatile
  4104                           
  4105                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
  4106  001328  0E14               	movlw	20
  4107  00132A                     u3907:
  4108  00132A  2EE8               	decfsz	wreg,f,c
  4109  00132C  D7FE               	bra	u3907
  4110  00132E  D000               	nop2	
  4111                           
  4112                           ;lcd.c: 46: data = data << 4;
  4113  001330  0100               	movlb	0	; () banked
  4114  001332  3981               	swapf	lcdNibble@data& (0+255),w,b
  4115  001334  0BF0               	andlw	240
  4116  001336  0100               	movlb	0	; () banked
  4117  001338  6F81               	movwf	lcdNibble@data& (0+255),b
  4118                           
  4119                           ;lcd.c: 48: temp = data & 0xF0;
  4120  00133A  0100               	movlb	0	; () banked
  4121  00133C  5181               	movf	lcdNibble@data& (0+255),w,b
  4122  00133E  0BF0               	andlw	240
  4123  001340  0100               	movlb	0	; () banked
  4124  001342  6F80               	movwf	lcdNibble@temp& (0+255),b
  4125                           
  4126                           ;lcd.c: 49: LATD = LATD & 0x0F;
  4127  001344  508C               	movf	3980,w,c	;volatile
  4128  001346  0B0F               	andlw	15
  4129  001348  6E8C               	movwf	3980,c	;volatile
  4130                           
  4131                           ;lcd.c: 50: LATD = temp | LATD;
  4132  00134A  0100               	movlb	0	; () banked
  4133  00134C  5180               	movf	lcdNibble@temp& (0+255),w,b
  4134  00134E  108C               	iorwf	3980,w,c	;volatile
  4135  001350  6E8C               	movwf	3980,c	;volatile
  4136                           
  4137                           ; BSR set to: 0
  4138                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  4139  001352  968C               	bcf	3980,3,c	;volatile
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
  4143  001354  0E14               	movlw	20
  4144  001356                     u3917:
  4145  001356  2EE8               	decfsz	wreg,f,c
  4146  001358  D7FE               	bra	u3917
  4147  00135A  D000               	nop2	
  4148                           
  4149                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  4150  00135C  868C               	bsf	3980,3,c	;volatile
  4151                           
  4152                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
  4153  00135E  0E14               	movlw	20
  4154  001360                     u3927:
  4155  001360  2EE8               	decfsz	wreg,f,c
  4156  001362  D7FE               	bra	u3927
  4157  001364  D000               	nop2	
  4158  001366  0012               	return		;funcret
  4159  001368                     __end_of_lcdNibble:
  4160                           	opt stack 0
  4161                           tblptru	equ	0xFF8
  4162                           tblptrh	equ	0xFF7
  4163                           tblptrl	equ	0xFF6
  4164                           tablat	equ	0xFF5
  4165                           prodh	equ	0xFF4
  4166                           prodl	equ	0xFF3
  4167                           intcon	equ	0xFF2
  4168                           intcon3	equ	0xFF0
  4169                           postinc0	equ	0xFEE
  4170                           wreg	equ	0xFE8
  4171                           indf2	equ	0xFDF
  4172                           postinc2	equ	0xFDE
  4173                           postdec2	equ	0xFDD
  4174                           fsr2h	equ	0xFDA
  4175                           fsr2l	equ	0xFD9
  4176                           status	equ	0xFD8
  4177                           
  4178 ;; *************** function ___awdiv *****************
  4179 ;; Defined at:
  4180 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awdiv.c"
  4181 ;; Parameters:    Size  Location     Type
  4182 ;;  dividend        2    0[BANK0 ] int 
  4183 ;;  divisor         2    2[BANK0 ] int 
  4184 ;; Auto vars:     Size  Location     Type
  4185 ;;  quotient        2    6[BANK0 ] int 
  4186 ;;  sign            1    5[BANK0 ] unsigned char 
  4187 ;;  counter         1    4[BANK0 ] unsigned char 
  4188 ;; Return value:  Size  Location     Type
  4189 ;;                  2    0[BANK0 ] int 
  4190 ;; Registers used:
  4191 ;;		wreg, status,2, status,0
  4192 ;; Tracked objects:
  4193 ;;		On entry : 0/0
  4194 ;;		On exit  : 0/0
  4195 ;;		Unchanged: 0/0
  4196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4197 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4198 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4200 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4201 ;;Total ram usage:        8 bytes
  4202 ;; Hardware stack levels used:    1
  4203 ;; Hardware stack levels required when called:    5
  4204 ;; This function calls:
  4205 ;;		Nothing
  4206 ;; This function is called by:
  4207 ;;		_Operate
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           	psect	text15
  4212  000EF6                     __ptext15:
  4213                           	opt stack 0
  4214  000EF6                     ___awdiv:
  4215                           	opt stack 24
  4216                           
  4217                           ;incstack = 0
  4218  000EF6  0E00               	movlw	0
  4219  000EF8  0100               	movlb	0	; () banked
  4220  000EFA  6F85               	movwf	___awdiv@sign& (0+255),b
  4221                           
  4222                           ; BSR set to: 0
  4223  000EFC  0100               	movlb	0	; () banked
  4224  000EFE  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4225  000F00  D008               	goto	l3487
  4226                           
  4227                           ; BSR set to: 0
  4228  000F02  0100               	movlb	0	; () banked
  4229  000F04  6D82               	negf	___awdiv@divisor& (0+255),b
  4230  000F06  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4231  000F08  B0D8               	btfsc	status,0,c
  4232  000F0A  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4233                           
  4234                           ; BSR set to: 0
  4235  000F0C  0E01               	movlw	1
  4236  000F0E  0100               	movlb	0	; () banked
  4237  000F10  6F85               	movwf	___awdiv@sign& (0+255),b
  4238  000F12                     l3487:
  4239                           
  4240                           ; BSR set to: 0
  4241  000F12  0100               	movlb	0	; () banked
  4242  000F14  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4243  000F16  D008               	goto	l3493
  4244                           
  4245                           ; BSR set to: 0
  4246  000F18  0100               	movlb	0	; () banked
  4247  000F1A  6D80               	negf	___awdiv@dividend& (0+255),b
  4248  000F1C  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4249  000F1E  B0D8               	btfsc	status,0,c
  4250  000F20  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4251                           
  4252                           ; BSR set to: 0
  4253  000F22  0E01               	movlw	1
  4254  000F24  0100               	movlb	0	; () banked
  4255  000F26  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  4256  000F28                     l3493:
  4257                           
  4258                           ; BSR set to: 0
  4259  000F28  0E00               	movlw	0
  4260  000F2A  0100               	movlb	0	; () banked
  4261  000F2C  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  4262  000F2E  0E00               	movlw	0
  4263  000F30  6F86               	movwf	___awdiv@quotient& (0+255),b
  4264                           
  4265                           ; BSR set to: 0
  4266  000F32  0100               	movlb	0	; () banked
  4267  000F34  5182               	movf	___awdiv@divisor& (0+255),w,b
  4268  000F36  0100               	movlb	0	; () banked
  4269  000F38  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4270  000F3A  B4D8               	btfsc	status,2,c
  4271  000F3C  D02C               	goto	l3515
  4272                           
  4273                           ; BSR set to: 0
  4274  000F3E  0E01               	movlw	1
  4275  000F40  0100               	movlb	0	; () banked
  4276  000F42  6F84               	movwf	___awdiv@counter& (0+255),b
  4277  000F44  D006               	goto	l3501
  4278  000F46                     l3499:
  4279                           
  4280                           ; BSR set to: 0
  4281  000F46  0100               	movlb	0	; () banked
  4282  000F48  90D8               	bcf	status,0,c
  4283  000F4A  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  4284  000F4C  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4285  000F4E  0100               	movlb	0	; () banked
  4286  000F50  2B84               	incf	___awdiv@counter& (0+255),f,b
  4287  000F52                     l3501:
  4288                           
  4289                           ; BSR set to: 0
  4290  000F52  0100               	movlb	0	; () banked
  4291  000F54  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4292  000F56  D7F7               	goto	l3499
  4293  000F58                     l3503:
  4294                           
  4295                           ; BSR set to: 0
  4296  000F58  0100               	movlb	0	; () banked
  4297  000F5A  90D8               	bcf	status,0,c
  4298  000F5C  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  4299  000F5E  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4300                           
  4301                           ; BSR set to: 0
  4302  000F60  0100               	movlb	0	; () banked
  4303  000F62  5182               	movf	___awdiv@divisor& (0+255),w,b
  4304  000F64  0100               	movlb	0	; () banked
  4305  000F66  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  4306  000F68  0100               	movlb	0	; () banked
  4307  000F6A  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4308  000F6C  0100               	movlb	0	; () banked
  4309  000F6E  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4310  000F70  A0D8               	btfss	status,0,c
  4311  000F72  D00A               	goto	l3511
  4312                           
  4313                           ; BSR set to: 0
  4314  000F74  0100               	movlb	0	; () banked
  4315  000F76  5182               	movf	___awdiv@divisor& (0+255),w,b
  4316  000F78  0100               	movlb	0	; () banked
  4317  000F7A  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  4318  000F7C  0100               	movlb	0	; () banked
  4319  000F7E  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4320  000F80  0100               	movlb	0	; () banked
  4321  000F82  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4322                           
  4323                           ; BSR set to: 0
  4324  000F84  0100               	movlb	0	; () banked
  4325  000F86  8186               	bsf	___awdiv@quotient& (0+255),0,b
  4326  000F88                     l3511:
  4327                           
  4328                           ; BSR set to: 0
  4329  000F88  0100               	movlb	0	; () banked
  4330  000F8A  90D8               	bcf	status,0,c
  4331  000F8C  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4332  000F8E  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  4333                           
  4334                           ; BSR set to: 0
  4335  000F90  0100               	movlb	0	; () banked
  4336  000F92  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  4337  000F94  D7E1               	goto	l3503
  4338  000F96                     l3515:
  4339                           
  4340                           ; BSR set to: 0
  4341  000F96  0100               	movlb	0	; () banked
  4342  000F98  5185               	movf	___awdiv@sign& (0+255),w,b
  4343  000F9A  0100               	movlb	0	; () banked
  4344  000F9C  B4D8               	btfsc	status,2,c
  4345  000F9E  D005               	goto	l3519
  4346                           
  4347                           ; BSR set to: 0
  4348  000FA0  0100               	movlb	0	; () banked
  4349  000FA2  6D86               	negf	___awdiv@quotient& (0+255),b
  4350  000FA4  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4351  000FA6  B0D8               	btfsc	status,0,c
  4352  000FA8  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4353  000FAA                     l3519:
  4354                           
  4355                           ; BSR set to: 0
  4356  000FAA  C086  F080         	movff	___awdiv@quotient,?___awdiv
  4357  000FAE  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  4358  000FB2  0012               	return	
  4359  000FB4                     __end_of___awdiv:
  4360                           	opt stack 0
  4361                           tblptru	equ	0xFF8
  4362                           tblptrh	equ	0xFF7
  4363                           tblptrl	equ	0xFF6
  4364                           tablat	equ	0xFF5
  4365                           prodh	equ	0xFF4
  4366                           prodl	equ	0xFF3
  4367                           intcon	equ	0xFF2
  4368                           intcon3	equ	0xFF0
  4369                           postinc0	equ	0xFEE
  4370                           wreg	equ	0xFE8
  4371                           indf2	equ	0xFDF
  4372                           postinc2	equ	0xFDE
  4373                           postdec2	equ	0xFDD
  4374                           fsr2h	equ	0xFDA
  4375                           fsr2l	equ	0xFD9
  4376                           status	equ	0xFD8
  4377                           
  4378 ;; *************** function _I2C_Master_Write *****************
  4379 ;; Defined at:
  4380 ;;		line 47 in file "I2C.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;  d               2    1[BANK0 ] unsigned int 
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;		None
  4385 ;; Return value:  Size  Location     Type
  4386 ;;                  1    wreg      void 
  4387 ;; Registers used:
  4388 ;;		wreg, status,2, status,0, cstack
  4389 ;; Tracked objects:
  4390 ;;		On entry : 0/0
  4391 ;;		On exit  : 0/0
  4392 ;;		Unchanged: 0/0
  4393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4394 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4397 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4398 ;;Total ram usage:        2 bytes
  4399 ;; Hardware stack levels used:    1
  4400 ;; Hardware stack levels required when called:    6
  4401 ;; This function calls:
  4402 ;;		_I2C_Master_Wait
  4403 ;; This function is called by:
  4404 ;;		_set_time
  4405 ;;		_Operate
  4406 ;; This function uses a non-reentrant model
  4407 ;;
  4408                           
  4409                           	psect	text16
  4410  00185C                     __ptext16:
  4411                           	opt stack 0
  4412  00185C                     _I2C_Master_Write:
  4413                           	opt stack 23
  4414                           
  4415                           ;I2C.c: 49: I2C_Master_Wait();
  4416                           
  4417                           ; BSR set to: 0
  4418                           ;incstack = 0
  4419  00185C  EC08  F00C         	call	_I2C_Master_Wait	;wreg free
  4420                           
  4421                           ;I2C.c: 50: SSPBUF = d;
  4422  001860  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  4423  001864  0012               	return		;funcret
  4424  001866                     __end_of_I2C_Master_Write:
  4425                           	opt stack 0
  4426                           tblptru	equ	0xFF8
  4427                           tblptrh	equ	0xFF7
  4428                           tblptrl	equ	0xFF6
  4429                           tablat	equ	0xFF5
  4430                           prodh	equ	0xFF4
  4431                           prodl	equ	0xFF3
  4432                           intcon	equ	0xFF2
  4433                           intcon3	equ	0xFF0
  4434                           postinc0	equ	0xFEE
  4435                           wreg	equ	0xFE8
  4436                           indf2	equ	0xFDF
  4437                           postinc2	equ	0xFDE
  4438                           postdec2	equ	0xFDD
  4439                           fsr2h	equ	0xFDA
  4440                           fsr2l	equ	0xFD9
  4441                           status	equ	0xFD8
  4442                           
  4443 ;; *************** function _I2C_Master_Stop *****************
  4444 ;; Defined at:
  4445 ;;		line 41 in file "I2C.c"
  4446 ;; Parameters:    Size  Location     Type
  4447 ;;		None
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;		None
  4450 ;; Return value:  Size  Location     Type
  4451 ;;                  1    wreg      void 
  4452 ;; Registers used:
  4453 ;;		wreg, status,2, status,0, cstack
  4454 ;; Tracked objects:
  4455 ;;		On entry : 0/0
  4456 ;;		On exit  : 0/0
  4457 ;;		Unchanged: 0/0
  4458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4463 ;;Total ram usage:        0 bytes
  4464 ;; Hardware stack levels used:    1
  4465 ;; Hardware stack levels required when called:    6
  4466 ;; This function calls:
  4467 ;;		_I2C_Master_Wait
  4468 ;; This function is called by:
  4469 ;;		_set_time
  4470 ;;		_Operate
  4471 ;; This function uses a non-reentrant model
  4472 ;;
  4473                           
  4474                           	psect	text17
  4475  001866                     __ptext17:
  4476                           	opt stack 0
  4477  001866                     _I2C_Master_Stop:
  4478                           	opt stack 23
  4479                           
  4480                           ;I2C.c: 43: I2C_Master_Wait();
  4481                           
  4482                           ;incstack = 0
  4483  001866  EC08  F00C         	call	_I2C_Master_Wait	;wreg free
  4484                           
  4485                           ;I2C.c: 44: PEN = 1;
  4486  00186A  84C5               	bsf	4037,2,c	;volatile
  4487  00186C  0012               	return		;funcret
  4488  00186E                     __end_of_I2C_Master_Stop:
  4489                           	opt stack 0
  4490                           tblptru	equ	0xFF8
  4491                           tblptrh	equ	0xFF7
  4492                           tblptrl	equ	0xFF6
  4493                           tablat	equ	0xFF5
  4494                           prodh	equ	0xFF4
  4495                           prodl	equ	0xFF3
  4496                           intcon	equ	0xFF2
  4497                           intcon3	equ	0xFF0
  4498                           postinc0	equ	0xFEE
  4499                           wreg	equ	0xFE8
  4500                           indf2	equ	0xFDF
  4501                           postinc2	equ	0xFDE
  4502                           postdec2	equ	0xFDD
  4503                           fsr2h	equ	0xFDA
  4504                           fsr2l	equ	0xFD9
  4505                           status	equ	0xFD8
  4506                           
  4507 ;; *************** function _I2C_Master_Start *****************
  4508 ;; Defined at:
  4509 ;;		line 29 in file "I2C.c"
  4510 ;; Parameters:    Size  Location     Type
  4511 ;;		None
  4512 ;; Auto vars:     Size  Location     Type
  4513 ;;		None
  4514 ;; Return value:  Size  Location     Type
  4515 ;;                  1    wreg      void 
  4516 ;; Registers used:
  4517 ;;		wreg, status,2, status,0, cstack
  4518 ;; Tracked objects:
  4519 ;;		On entry : 0/0
  4520 ;;		On exit  : 0/0
  4521 ;;		Unchanged: 0/0
  4522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4527 ;;Total ram usage:        0 bytes
  4528 ;; Hardware stack levels used:    1
  4529 ;; Hardware stack levels required when called:    6
  4530 ;; This function calls:
  4531 ;;		_I2C_Master_Wait
  4532 ;; This function is called by:
  4533 ;;		_set_time
  4534 ;;		_Operate
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           	psect	text18
  4539  00186E                     __ptext18:
  4540                           	opt stack 0
  4541  00186E                     _I2C_Master_Start:
  4542                           	opt stack 23
  4543                           
  4544                           ;I2C.c: 31: I2C_Master_Wait();
  4545                           
  4546                           ;incstack = 0
  4547  00186E  EC08  F00C         	call	_I2C_Master_Wait	;wreg free
  4548                           
  4549                           ;I2C.c: 32: SEN = 1;
  4550  001872  80C5               	bsf	4037,0,c	;volatile
  4551  001874  0012               	return		;funcret
  4552  001876                     __end_of_I2C_Master_Start:
  4553                           	opt stack 0
  4554                           tblptru	equ	0xFF8
  4555                           tblptrh	equ	0xFF7
  4556                           tblptrl	equ	0xFF6
  4557                           tablat	equ	0xFF5
  4558                           prodh	equ	0xFF4
  4559                           prodl	equ	0xFF3
  4560                           intcon	equ	0xFF2
  4561                           intcon3	equ	0xFF0
  4562                           postinc0	equ	0xFEE
  4563                           wreg	equ	0xFE8
  4564                           indf2	equ	0xFDF
  4565                           postinc2	equ	0xFDE
  4566                           postdec2	equ	0xFDD
  4567                           fsr2h	equ	0xFDA
  4568                           fsr2l	equ	0xFD9
  4569                           status	equ	0xFD8
  4570                           
  4571 ;; *************** function _I2C_Master_Read *****************
  4572 ;; Defined at:
  4573 ;;		line 53 in file "I2C.c"
  4574 ;; Parameters:    Size  Location     Type
  4575 ;;  a               1    wreg     unsigned char 
  4576 ;; Auto vars:     Size  Location     Type
  4577 ;;  a               1    1[BANK0 ] unsigned char 
  4578 ;;  temp            1    2[BANK0 ] unsigned char 
  4579 ;; Return value:  Size  Location     Type
  4580 ;;                  1    wreg      unsigned char 
  4581 ;; Registers used:
  4582 ;;		wreg, status,2, status,0, cstack
  4583 ;; Tracked objects:
  4584 ;;		On entry : 0/0
  4585 ;;		On exit  : 0/0
  4586 ;;		Unchanged: 0/0
  4587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4589 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4591 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4592 ;;Total ram usage:        2 bytes
  4593 ;; Hardware stack levels used:    1
  4594 ;; Hardware stack levels required when called:    6
  4595 ;; This function calls:
  4596 ;;		_I2C_Master_Wait
  4597 ;; This function is called by:
  4598 ;;		_Operate
  4599 ;; This function uses a non-reentrant model
  4600 ;;
  4601                           
  4602                           	psect	text19
  4603  00173A                     __ptext19:
  4604                           	opt stack 0
  4605  00173A                     _I2C_Master_Read:
  4606                           	opt stack 23
  4607                           
  4608                           ;incstack = 0
  4609                           ;I2C_Master_Read@a stored from wreg
  4610  00173A  0100               	movlb	0	; () banked
  4611  00173C  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  4612                           
  4613                           ;I2C.c: 55: unsigned char temp;
  4614                           ;I2C.c: 56: I2C_Master_Wait();
  4615  00173E  EC08  F00C         	call	_I2C_Master_Wait	;wreg free
  4616                           
  4617                           ;I2C.c: 57: RCEN = 1;
  4618  001742  86C5               	bsf	4037,3,c	;volatile
  4619                           
  4620                           ;I2C.c: 58: I2C_Master_Wait();
  4621  001744  EC08  F00C         	call	_I2C_Master_Wait	;wreg free
  4622                           
  4623                           ;I2C.c: 59: temp = SSPBUF;
  4624  001748  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  4625                           
  4626                           ;I2C.c: 60: I2C_Master_Wait();
  4627  00174C  EC08  F00C         	call	_I2C_Master_Wait	;wreg free
  4628                           
  4629                           ;I2C.c: 61: ACKDT = (a)?0:1;
  4630  001750  0100               	movlb	0	; () banked
  4631  001752  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  4632  001754  0100               	movlb	0	; () banked
  4633  001756  A4D8               	btfss	status,2,c
  4634  001758  D002               	goto	u3390
  4635  00175A  8AC5               	bsf	4037,5,c	;volatile
  4636  00175C  D001               	goto	l3445
  4637  00175E                     u3390:
  4638  00175E  9AC5               	bcf	4037,5,c	;volatile
  4639  001760                     l3445:
  4640                           
  4641                           ;I2C.c: 62: ACKEN = 1;
  4642  001760  88C5               	bsf	4037,4,c	;volatile
  4643                           
  4644                           ;I2C.c: 63: return temp;
  4645  001762  0100               	movlb	0	; () banked
  4646  001764  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  4647  001766  0012               	return	
  4648  001768                     __end_of_I2C_Master_Read:
  4649                           	opt stack 0
  4650                           tblptru	equ	0xFF8
  4651                           tblptrh	equ	0xFF7
  4652                           tblptrl	equ	0xFF6
  4653                           tablat	equ	0xFF5
  4654                           prodh	equ	0xFF4
  4655                           prodl	equ	0xFF3
  4656                           intcon	equ	0xFF2
  4657                           intcon3	equ	0xFF0
  4658                           postinc0	equ	0xFEE
  4659                           wreg	equ	0xFE8
  4660                           indf2	equ	0xFDF
  4661                           postinc2	equ	0xFDE
  4662                           postdec2	equ	0xFDD
  4663                           fsr2h	equ	0xFDA
  4664                           fsr2l	equ	0xFD9
  4665                           status	equ	0xFD8
  4666                           
  4667 ;; *************** function _I2C_Master_Wait *****************
  4668 ;; Defined at:
  4669 ;;		line 24 in file "I2C.c"
  4670 ;; Parameters:    Size  Location     Type
  4671 ;;		None
  4672 ;; Auto vars:     Size  Location     Type
  4673 ;;		None
  4674 ;; Return value:  Size  Location     Type
  4675 ;;                  1    wreg      void 
  4676 ;; Registers used:
  4677 ;;		wreg, status,2, status,0
  4678 ;; Tracked objects:
  4679 ;;		On entry : 0/0
  4680 ;;		On exit  : 0/0
  4681 ;;		Unchanged: 0/0
  4682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4685 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4686 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4687 ;;Total ram usage:        1 bytes
  4688 ;; Hardware stack levels used:    1
  4689 ;; Hardware stack levels required when called:    5
  4690 ;; This function calls:
  4691 ;;		Nothing
  4692 ;; This function is called by:
  4693 ;;		_I2C_Master_Start
  4694 ;;		_I2C_Master_Stop
  4695 ;;		_I2C_Master_Write
  4696 ;;		_I2C_Master_Read
  4697 ;;		_I2C_Master_RepeatedStart
  4698 ;; This function uses a non-reentrant model
  4699 ;;
  4700                           
  4701                           	psect	text20
  4702  001810                     __ptext20:
  4703                           	opt stack 0
  4704  001810                     _I2C_Master_Wait:
  4705                           	opt stack 23
  4706  001810                     l34:
  4707  001810  B4C7               	btfsc	4039,2,c	;volatile
  4708  001812  D7FE               	goto	l34
  4709  001814  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  4710  001818  0E1F               	movlw	31
  4711  00181A  0100               	movlb	0	; () banked
  4712  00181C  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  4713  00181E  B4D8               	btfsc	status,2,c
  4714  001820  0012               	return	
  4715  001822  D7F6               	goto	l34
  4716  001824                     __end_of_I2C_Master_Wait:
  4717                           	opt stack 0
  4718                           tblptru	equ	0xFF8
  4719                           tblptrh	equ	0xFF7
  4720                           tblptrl	equ	0xFF6
  4721                           tablat	equ	0xFF5
  4722                           prodh	equ	0xFF4
  4723                           prodl	equ	0xFF3
  4724                           intcon	equ	0xFF2
  4725                           intcon3	equ	0xFF0
  4726                           postinc0	equ	0xFEE
  4727                           wreg	equ	0xFE8
  4728                           indf2	equ	0xFDF
  4729                           postinc2	equ	0xFDE
  4730                           postdec2	equ	0xFDD
  4731                           fsr2h	equ	0xFDA
  4732                           fsr2l	equ	0xFD9
  4733                           status	equ	0xFD8
  4734                           
  4735 ;; *************** function _I2C_Master_Init *****************
  4736 ;; Defined at:
  4737 ;;		line 13 in file "I2C.c"
  4738 ;; Parameters:    Size  Location     Type
  4739 ;;  c               4   13[BANK0 ] const unsigned long 
  4740 ;; Auto vars:     Size  Location     Type
  4741 ;;		None
  4742 ;; Return value:  Size  Location     Type
  4743 ;;                  1    wreg      void 
  4744 ;; Registers used:
  4745 ;;		wreg, status,2, status,0, cstack
  4746 ;; Tracked objects:
  4747 ;;		On entry : 0/0
  4748 ;;		On exit  : 0/0
  4749 ;;		Unchanged: 0/0
  4750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4751 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4753 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4754 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4755 ;;Total ram usage:        8 bytes
  4756 ;; Hardware stack levels used:    1
  4757 ;; Hardware stack levels required when called:    6
  4758 ;; This function calls:
  4759 ;;		___lldiv
  4760 ;; This function is called by:
  4761 ;;		_main
  4762 ;; This function uses a non-reentrant model
  4763 ;;
  4764                           
  4765                           	psect	text21
  4766  0013CA                     __ptext21:
  4767                           	opt stack 0
  4768  0013CA                     _I2C_Master_Init:
  4769                           	opt stack 24
  4770                           
  4771                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  4772                           
  4773                           ; BSR set to: 0
  4774                           ;incstack = 0
  4775  0013CA  0E00               	movlw	0
  4776  0013CC  6EC7               	movwf	4039,c	;volatile
  4777                           
  4778                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  4779  0013CE  0E28               	movlw	40
  4780  0013D0  6EC6               	movwf	4038,c	;volatile
  4781                           
  4782                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  4783  0013D2  0E00               	movlw	0
  4784  0013D4  6EC5               	movwf	4037,c	;volatile
  4785                           
  4786                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  4787  0013D6  0E80               	movlw	128
  4788  0013D8  0100               	movlb	0	; () banked
  4789  0013DA  6F80               	movwf	___lldiv@dividend& (0+255),b
  4790  0013DC  0E96               	movlw	150
  4791  0013DE  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  4792  0013E0  0E98               	movlw	152
  4793  0013E2  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  4794  0013E4  0E00               	movlw	0
  4795  0013E6  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  4796  0013E8  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4797  0013EC  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4798  0013F0  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4799  0013F4  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4800  0013F8  0E02               	movlw	2
  4801  0013FA                     u3545:
  4802  0013FA  90D8               	bcf	status,0,c
  4803  0013FC  0100               	movlb	0	; () banked
  4804  0013FE  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  4805  001400  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  4806  001402  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  4807  001404  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  4808  001406  2EE8               	decfsz	wreg,f,c
  4809  001408  D7F8               	goto	u3545
  4810  00140A  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  4811  00140E  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4812  001412  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4813  001416  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4814  00141A  ECDA  F007         	call	___lldiv	;wreg free
  4815  00141E  0100               	movlb	0	; () banked
  4816  001420  0580               	decf	?___lldiv& (0+255),w,b
  4817  001422  6EC8               	movwf	4040,c	;volatile
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;I2C.c: 20: TRISC3 = 1;
  4821  001424  8694               	bsf	3988,3,c	;volatile
  4822                           
  4823                           ; BSR set to: 0
  4824                           ;I2C.c: 21: TRISC4 = 1;
  4825  001426  8894               	bsf	3988,4,c	;volatile
  4826                           
  4827                           ; BSR set to: 0
  4828  001428  0012               	return		;funcret
  4829  00142A                     __end_of_I2C_Master_Init:
  4830                           	opt stack 0
  4831                           tblptru	equ	0xFF8
  4832                           tblptrh	equ	0xFF7
  4833                           tblptrl	equ	0xFF6
  4834                           tablat	equ	0xFF5
  4835                           prodh	equ	0xFF4
  4836                           prodl	equ	0xFF3
  4837                           intcon	equ	0xFF2
  4838                           intcon3	equ	0xFF0
  4839                           postinc0	equ	0xFEE
  4840                           wreg	equ	0xFE8
  4841                           indf2	equ	0xFDF
  4842                           postinc2	equ	0xFDE
  4843                           postdec2	equ	0xFDD
  4844                           fsr2h	equ	0xFDA
  4845                           fsr2l	equ	0xFD9
  4846                           status	equ	0xFD8
  4847                           
  4848 ;; *************** function ___lldiv *****************
  4849 ;; Defined at:
  4850 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lldiv.c"
  4851 ;; Parameters:    Size  Location     Type
  4852 ;;  dividend        4    0[BANK0 ] unsigned long 
  4853 ;;  divisor         4    4[BANK0 ] unsigned long 
  4854 ;; Auto vars:     Size  Location     Type
  4855 ;;  quotient        4    8[BANK0 ] unsigned long 
  4856 ;;  counter         1   12[BANK0 ] unsigned char 
  4857 ;; Return value:  Size  Location     Type
  4858 ;;                  4    0[BANK0 ] unsigned long 
  4859 ;; Registers used:
  4860 ;;		wreg, status,2, status,0
  4861 ;; Tracked objects:
  4862 ;;		On entry : 0/0
  4863 ;;		On exit  : 0/0
  4864 ;;		Unchanged: 0/0
  4865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4866 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4867 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4869 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4870 ;;Total ram usage:       13 bytes
  4871 ;; Hardware stack levels used:    1
  4872 ;; Hardware stack levels required when called:    5
  4873 ;; This function calls:
  4874 ;;		Nothing
  4875 ;; This function is called by:
  4876 ;;		_I2C_Master_Init
  4877 ;; This function uses a non-reentrant model
  4878 ;;
  4879                           
  4880                           	psect	text22
  4881  000FB4                     __ptext22:
  4882                           	opt stack 0
  4883  000FB4                     ___lldiv:
  4884                           	opt stack 24
  4885                           
  4886                           ; BSR set to: 0
  4887                           ;incstack = 0
  4888  000FB4  0E00               	movlw	0
  4889  000FB6  0100               	movlb	0	; () banked
  4890  000FB8  6F88               	movwf	___lldiv@quotient& (0+255),b
  4891  000FBA  0E00               	movlw	0
  4892  000FBC  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  4893  000FBE  0E00               	movlw	0
  4894  000FC0  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  4895  000FC2  0E00               	movlw	0
  4896  000FC4  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  4897                           
  4898                           ; BSR set to: 0
  4899  000FC6  0100               	movlb	0	; () banked
  4900  000FC8  5184               	movf	___lldiv@divisor& (0+255),w,b
  4901  000FCA  0100               	movlb	0	; () banked
  4902  000FCC  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  4903  000FCE  0100               	movlb	0	; () banked
  4904  000FD0  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  4905  000FD2  0100               	movlb	0	; () banked
  4906  000FD4  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  4907  000FD6  B4D8               	btfsc	status,2,c
  4908  000FD8  D042               	goto	l731
  4909                           
  4910                           ; BSR set to: 0
  4911  000FDA  0E01               	movlw	1
  4912  000FDC  0100               	movlb	0	; () banked
  4913  000FDE  6F8C               	movwf	___lldiv@counter& (0+255),b
  4914  000FE0  D008               	goto	l3531
  4915  000FE2                     l3529:
  4916                           
  4917                           ; BSR set to: 0
  4918  000FE2  0100               	movlb	0	; () banked
  4919  000FE4  90D8               	bcf	status,0,c
  4920  000FE6  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  4921  000FE8  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  4922  000FEA  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  4923  000FEC  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  4924  000FEE  0100               	movlb	0	; () banked
  4925  000FF0  2B8C               	incf	___lldiv@counter& (0+255),f,b
  4926  000FF2                     l3531:
  4927                           
  4928                           ; BSR set to: 0
  4929  000FF2  0100               	movlb	0	; () banked
  4930  000FF4  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  4931  000FF6  D7F5               	goto	l3529
  4932  000FF8                     l3533:
  4933                           
  4934                           ; BSR set to: 0
  4935  000FF8  0100               	movlb	0	; () banked
  4936  000FFA  90D8               	bcf	status,0,c
  4937  000FFC  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  4938  000FFE  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  4939  001000  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  4940  001002  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  4941                           
  4942                           ; BSR set to: 0
  4943  001004  0100               	movlb	0	; () banked
  4944  001006  5184               	movf	___lldiv@divisor& (0+255),w,b
  4945  001008  0100               	movlb	0	; () banked
  4946  00100A  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  4947  00100C  0100               	movlb	0	; () banked
  4948  00100E  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4949  001010  0100               	movlb	0	; () banked
  4950  001012  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  4951  001014  0100               	movlb	0	; () banked
  4952  001016  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4953  001018  0100               	movlb	0	; () banked
  4954  00101A  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  4955  00101C  0100               	movlb	0	; () banked
  4956  00101E  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4957  001020  0100               	movlb	0	; () banked
  4958  001022  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  4959  001024  A0D8               	btfss	status,0,c
  4960  001026  D012               	goto	l3541
  4961                           
  4962                           ; BSR set to: 0
  4963  001028  0100               	movlb	0	; () banked
  4964  00102A  5184               	movf	___lldiv@divisor& (0+255),w,b
  4965  00102C  0100               	movlb	0	; () banked
  4966  00102E  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  4967  001030  0100               	movlb	0	; () banked
  4968  001032  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4969  001034  0100               	movlb	0	; () banked
  4970  001036  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  4971  001038  0100               	movlb	0	; () banked
  4972  00103A  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4973  00103C  0100               	movlb	0	; () banked
  4974  00103E  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  4975  001040  0100               	movlb	0	; () banked
  4976  001042  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4977  001044  0100               	movlb	0	; () banked
  4978  001046  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  4979                           
  4980                           ; BSR set to: 0
  4981  001048  0100               	movlb	0	; () banked
  4982  00104A  8188               	bsf	___lldiv@quotient& (0+255),0,b
  4983  00104C                     l3541:
  4984                           
  4985                           ; BSR set to: 0
  4986  00104C  0100               	movlb	0	; () banked
  4987  00104E  90D8               	bcf	status,0,c
  4988  001050  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  4989  001052  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  4990  001054  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  4991  001056  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  4992                           
  4993                           ; BSR set to: 0
  4994  001058  0100               	movlb	0	; () banked
  4995  00105A  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  4996  00105C  D7CD               	goto	l3533
  4997  00105E                     l731:
  4998                           
  4999                           ; BSR set to: 0
  5000  00105E  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5001  001062  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5002  001066  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5003  00106A  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5004                           
  5005                           ; BSR set to: 0
  5006  00106E  0012               	return		;funcret
  5007  001070                     __end_of___lldiv:
  5008                           	opt stack 0
  5009                           tblptru	equ	0xFF8
  5010                           tblptrh	equ	0xFF7
  5011                           tblptrl	equ	0xFF6
  5012                           tablat	equ	0xFF5
  5013                           prodh	equ	0xFF4
  5014                           prodl	equ	0xFF3
  5015                           intcon	equ	0xFF2
  5016                           intcon3	equ	0xFF0
  5017                           postinc0	equ	0xFEE
  5018                           wreg	equ	0xFE8
  5019                           indf2	equ	0xFDF
  5020                           postinc2	equ	0xFDE
  5021                           postdec2	equ	0xFDD
  5022                           fsr2h	equ	0xFDA
  5023                           fsr2l	equ	0xFD9
  5024                           status	equ	0xFD8
  5025                           
  5026 ;; *************** function _keypressed *****************
  5027 ;; Defined at:
  5028 ;;		line 23 in file "Interrupt_ISR.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;		None
  5031 ;; Auto vars:     Size  Location     Type
  5032 ;;  i               1   60[COMRAM] unsigned char 
  5033 ;;  i               1   59[COMRAM] unsigned char 
  5034 ;;  i               1   58[COMRAM] unsigned char 
  5035 ;;  i               1   57[COMRAM] unsigned char 
  5036 ;;  i               1   56[COMRAM] unsigned char 
  5037 ;;  i               1   55[COMRAM] unsigned char 
  5038 ;;  i               1   54[COMRAM] unsigned char 
  5039 ;;  i               1   53[COMRAM] unsigned char 
  5040 ;;  i               1   52[COMRAM] unsigned char 
  5041 ;;  i               1   51[COMRAM] unsigned char 
  5042 ;;  i               1   50[COMRAM] unsigned char 
  5043 ;;  i               1   49[COMRAM] unsigned char 
  5044 ;;  keypress_tem    1   61[COMRAM] unsigned char 
  5045 ;;  keypress        1   48[COMRAM] unsigned char 
  5046 ;; Return value:  Size  Location     Type
  5047 ;;                  1    wreg      void 
  5048 ;; Registers used:
  5049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5050 ;; Tracked objects:
  5051 ;;		On entry : 0/0
  5052 ;;		On exit  : 0/0
  5053 ;;		Unchanged: 0/0
  5054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5056 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5057 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5058 ;;      Totals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5059 ;;Total ram usage:       30 bytes
  5060 ;; Hardware stack levels used:    1
  5061 ;; Hardware stack levels required when called:    4
  5062 ;; This function calls:
  5063 ;;		_op_time
  5064 ;;		_pop_results
  5065 ;;		_tin_results
  5066 ;;		_tot_sorted
  5067 ;;		i2_initLCD
  5068 ;;		i2_lcdInst
  5069 ;;		i2_printf
  5070 ;; This function is called by:
  5071 ;;		Interrupt level 2
  5072 ;; This function uses a non-reentrant model
  5073 ;;
  5074                           
  5075                           	psect	intcode
  5076  000008                     __pintcode:
  5077                           	opt stack 0
  5078  000008                     _keypressed:
  5079                           	opt stack 21
  5080                           
  5081                           ; BSR set to: 0
  5082                           ;incstack = 0
  5083  000008  824B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5084  00000A  ED60  F005         	call	int_func,f	;refresh shadow registers
  5085                           tblptru	equ	0xFF8
  5086                           tblptrh	equ	0xFF7
  5087                           tblptrl	equ	0xFF6
  5088                           tablat	equ	0xFF5
  5089                           prodh	equ	0xFF4
  5090                           prodl	equ	0xFF3
  5091                           intcon	equ	0xFF2
  5092                           intcon3	equ	0xFF0
  5093                           postinc0	equ	0xFEE
  5094                           wreg	equ	0xFE8
  5095                           indf2	equ	0xFDF
  5096                           postinc2	equ	0xFDE
  5097                           postdec2	equ	0xFDD
  5098                           fsr2h	equ	0xFDA
  5099                           fsr2l	equ	0xFD9
  5100                           status	equ	0xFD8
  5101                           
  5102                           	psect	intcode_body
  5103  000AC0                     __pintcode_body:
  5104                           	opt stack 21
  5105  000AC0                     int_func:
  5106                           	opt stack 21
  5107  000AC0  0006               	pop		; remove dummy address from shadow register refresh
  5108  000AC2  CFFA F023          	movff	pclath,??_keypressed+2
  5109  000AC6  CFFB F024          	movff	pclatu,??_keypressed+3
  5110  000ACA  CFE9 F025          	movff	fsr0l,??_keypressed+4
  5111  000ACE  CFEA F026          	movff	fsr0h,??_keypressed+5
  5112  000AD2  CFE1 F027          	movff	fsr1l,??_keypressed+6
  5113  000AD6  CFE2 F028          	movff	fsr1h,??_keypressed+7
  5114  000ADA  CFD9 F029          	movff	fsr2l,??_keypressed+8
  5115  000ADE  CFDA F02A          	movff	fsr2h,??_keypressed+9
  5116  000AE2  CFF3 F02B          	movff	prodl,??_keypressed+10
  5117  000AE6  CFF4 F02C          	movff	prodh,??_keypressed+11
  5118  000AEA  CFF6 F02D          	movff	tblptrl,??_keypressed+12
  5119  000AEE  CFF7 F02E          	movff	tblptrh,??_keypressed+13
  5120  000AF2  CFF8 F02F          	movff	tblptru,??_keypressed+14
  5121  000AF6  CFF5 F030          	movff	tablat,??_keypressed+15
  5122                           
  5123                           ;Interrupt_ISR.c: 26: if(INT1IF){
  5124  000AFA  A0F0               	btfss	intcon3,0,c	;volatile
  5125  000AFC  D126               	goto	i2l215
  5126                           
  5127                           ;Interrupt_ISR.c: 27: lcdInst(0b11000000);;
  5128  000AFE  0EC0               	movlw	192
  5129  000B00  EC28  F00C         	call	i2_lcdInst
  5130                           
  5131                           ;Interrupt_ISR.c: 28: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5132  000B04  3881               	swapf	3969,w,c	;volatile
  5133  000B06  0B0F               	andlw	15
  5134  000B08  0B0F               	andlw	15
  5135  000B0A  6E31               	movwf	keypressed@keypress,c
  5136                           
  5137                           ;Interrupt_ISR.c: 30: unsigned char keypress_temp = keys[keypress];
  5138  000B0C  5031               	movf	keypressed@keypress,w,c
  5139  000B0E  0D01               	mullw	1
  5140  000B10  0EE1               	movlw	low _keys
  5141  000B12  24F3               	addwf	prodl,w,c
  5142  000B14  6EF6               	movwf	tblptrl,c
  5143  000B16  0EFE               	movlw	high _keys
  5144  000B18  20F4               	addwfc	prodh,w,c
  5145  000B1A  6EF7               	movwf	tblptrh,c
  5146  000B1C                     	if	0	;There are less than 3 active tblptr bytes
  5147  000B1C                     	endif
  5148  000B1C  0008               	tblrd		*
  5149  000B1E  CFF5 F03E          	movff	tablat,keypressed@keypress_temp
  5150                           
  5151                           ;Interrupt_ISR.c: 31: if (keypress_temp == 0b01000001){
  5152  000B22  0E41               	movlw	65
  5153  000B24  183E               	xorwf	keypressed@keypress_temp,w,c
  5154  000B26  A4D8               	btfss	status,2,c
  5155  000B28  D03E               	goto	i2l3055
  5156                           
  5157                           ;Interrupt_ISR.c: 32: tot_sorted();
  5158  000B2A  ECFB  F00B         	call	_tot_sorted	;wreg free
  5159                           
  5160                           ;Interrupt_ISR.c: 35: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  5161  000B2E  0E00               	movlw	0
  5162  000B30  6E32               	movwf	keypressed@i,c
  5163  000B32                     i2l3027:
  5164  000B32  0E09               	movlw	9
  5165  000B34  6432               	cpfsgt	keypressed@i,c
  5166  000B36  D001               	goto	i2l3031
  5167  000B38  D00E               	goto	i2l3035
  5168  000B3A                     i2l3031:
  5169  000B3A  0E02               	movlw	2
  5170  000B3C  6E22               	movwf	(??_keypressed+1)& (0+255),c
  5171  000B3E  0E3F               	movlw	63
  5172  000B40  6E21               	movwf	??_keypressed& (0+255),c
  5173  000B42  0E2B               	movlw	43
  5174  000B44                     i2u393_47:
  5175  000B44  2EE8               	decfsz	wreg,f,c
  5176  000B46  D7FE               	bra	i2u393_47
  5177  000B48  2E21               	decfsz	??_keypressed& (0+255),f,c
  5178  000B4A  D7FC               	bra	i2u393_47
  5179  000B4C  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  5180  000B4E  D7FA               	bra	i2u393_47
  5181  000B50  F000               	nop	
  5182  000B52  2A32               	incf	keypressed@i,f,c
  5183  000B54  D7EE               	goto	i2l3027
  5184  000B56                     i2l3035:
  5185                           
  5186                           ;Interrupt_ISR.c: 36: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  5187  000B56  0E00               	movlw	0
  5188  000B58  6E33               	movwf	keypressed@i_198,c
  5189  000B5A                     i2l3037:
  5190  000B5A  0E09               	movlw	9
  5191  000B5C  6433               	cpfsgt	keypressed@i_198,c
  5192  000B5E  D001               	goto	i2l3041
  5193  000B60  D00E               	goto	i2l3045
  5194  000B62                     i2l3041:
  5195  000B62  0E02               	movlw	2
  5196  000B64  6E22               	movwf	(??_keypressed+1)& (0+255),c
  5197  000B66  0E3F               	movlw	63
  5198  000B68  6E21               	movwf	??_keypressed& (0+255),c
  5199  000B6A  0E2B               	movlw	43
  5200  000B6C                     i2u394_47:
  5201  000B6C  2EE8               	decfsz	wreg,f,c
  5202  000B6E  D7FE               	bra	i2u394_47
  5203  000B70  2E21               	decfsz	??_keypressed& (0+255),f,c
  5204  000B72  D7FC               	bra	i2u394_47
  5205  000B74  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  5206  000B76  D7FA               	bra	i2u394_47
  5207  000B78  F000               	nop	
  5208  000B7A  2A33               	incf	keypressed@i_198,f,c
  5209  000B7C  D7EE               	goto	i2l3037
  5210  000B7E                     i2l3045:
  5211                           
  5212                           ;Interrupt_ISR.c: 37: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  5213  000B7E  0E00               	movlw	0
  5214  000B80  6E34               	movwf	keypressed@i_199,c
  5215  000B82                     i2l3047:
  5216  000B82  0E09               	movlw	9
  5217  000B84  6434               	cpfsgt	keypressed@i_199,c
  5218  000B86  D001               	goto	i2l3051
  5219  000B88  D0DC               	goto	i2l3161
  5220  000B8A                     i2l3051:
  5221  000B8A  0E02               	movlw	2
  5222  000B8C  6E22               	movwf	(??_keypressed+1)& (0+255),c
  5223  000B8E  0E3F               	movlw	63
  5224  000B90  6E21               	movwf	??_keypressed& (0+255),c
  5225  000B92  0E2B               	movlw	43
  5226  000B94                     i2u395_47:
  5227  000B94  2EE8               	decfsz	wreg,f,c
  5228  000B96  D7FE               	bra	i2u395_47
  5229  000B98  2E21               	decfsz	??_keypressed& (0+255),f,c
  5230  000B9A  D7FC               	bra	i2u395_47
  5231  000B9C  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  5232  000B9E  D7FA               	bra	i2u395_47
  5233  000BA0  F000               	nop	
  5234  000BA2  2A34               	incf	keypressed@i_199,f,c
  5235  000BA4  D7EE               	goto	i2l3047
  5236  000BA6                     i2l3055:
  5237                           
  5238                           ;Interrupt_ISR.c: 39: else if(keypress_temp == 0b01000010){
  5239  000BA6  0E42               	movlw	66
  5240  000BA8  183E               	xorwf	keypressed@keypress_temp,w,c
  5241  000BAA  A4D8               	btfss	status,2,c
  5242  000BAC  D03E               	goto	i2l3089
  5243                           
  5244                           ;Interrupt_ISR.c: 40: pop_results();
  5245  000BAE  EC83  F00B         	call	_pop_results	;wreg free
  5246                           
  5247                           ;Interrupt_ISR.c: 45: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  5248  000BB2  0E00               	movlw	0
  5249  000BB4  6E35               	movwf	keypressed@i_201,c
  5250  000BB6                     i2l3061:
  5251  000BB6  0E09               	movlw	9
  5252  000BB8  6435               	cpfsgt	keypressed@i_201,c
  5253  000BBA  D001               	goto	i2l3065
  5254  000BBC  D00E               	goto	i2l3069
  5255  000BBE                     i2l3065:
  5256  000BBE  0E02               	movlw	2
  5257  000BC0  6E22               	movwf	(??_keypressed+1)& (0+255),c
  5258  000BC2  0E3F               	movlw	63
  5259  000BC4  6E21               	movwf	??_keypressed& (0+255),c
  5260  000BC6  0E2B               	movlw	43
  5261  000BC8                     i2u396_47:
  5262  000BC8  2EE8               	decfsz	wreg,f,c
  5263  000BCA  D7FE               	bra	i2u396_47
  5264  000BCC  2E21               	decfsz	??_keypressed& (0+255),f,c
  5265  000BCE  D7FC               	bra	i2u396_47
  5266  000BD0  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  5267  000BD2  D7FA               	bra	i2u396_47
  5268  000BD4  F000               	nop	
  5269  000BD6  2A35               	incf	keypressed@i_201,f,c
  5270  000BD8  D7EE               	goto	i2l3061
  5271  000BDA                     i2l3069:
  5272                           
  5273                           ;Interrupt_ISR.c: 46: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  5274  000BDA  0E00               	movlw	0
  5275  000BDC  6E36               	movwf	keypressed@i_202,c
  5276  000BDE                     i2l3071:
  5277  000BDE  0E09               	movlw	9
  5278  000BE0  6436               	cpfsgt	keypressed@i_202,c
  5279  000BE2  D001               	goto	i2l3075
  5280  000BE4  D00E               	goto	i2l3079
  5281  000BE6                     i2l3075:
  5282  000BE6  0E02               	movlw	2
  5283  000BE8  6E22               	movwf	(??_keypressed+1)& (0+255),c
  5284  000BEA  0E3F               	movlw	63
  5285  000BEC  6E21               	movwf	??_keypressed& (0+255),c
  5286  000BEE  0E2B               	movlw	43
  5287  000BF0                     i2u397_47:
  5288  000BF0  2EE8               	decfsz	wreg,f,c
  5289  000BF2  D7FE               	bra	i2u397_47
  5290  000BF4  2E21               	decfsz	??_keypressed& (0+255),f,c
  5291  000BF6  D7FC               	bra	i2u397_47
  5292  000BF8  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  5293  000BFA  D7FA               	bra	i2u397_47
  5294  000BFC  F000               	nop	
  5295  000BFE  2A36               	incf	keypressed@i_202,f,c
  5296  000C00  D7EE               	goto	i2l3071
  5297  000C02                     i2l3079:
  5298                           
  5299                           ;Interrupt_ISR.c: 47: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  5300  000C02  0E00               	movlw	0
  5301  000C04  6E37               	movwf	keypressed@i_203,c
  5302  000C06                     i2l3081:
  5303  000C06  0E09               	movlw	9
  5304  000C08  6437               	cpfsgt	keypressed@i_203,c
  5305  000C0A  D001               	goto	i2l3085
  5306  000C0C  D09A               	goto	i2l3161
  5307  000C0E                     i2l3085:
  5308  000C0E  0E02               	movlw	2
  5309  000C10  6E22               	movwf	(??_keypressed+1)& (0+255),c
  5310  000C12  0E3F               	movlw	63
  5311  000C14  6E21               	movwf	??_keypressed& (0+255),c
  5312  000C16  0E2B               	movlw	43
  5313  000C18                     i2u398_47:
  5314  000C18  2EE8               	decfsz	wreg,f,c
  5315  000C1A  D7FE               	bra	i2u398_47
  5316  000C1C  2E21               	decfsz	??_keypressed& (0+255),f,c
  5317  000C1E  D7FC               	bra	i2u398_47
  5318  000C20  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  5319  000C22  D7FA               	bra	i2u398_47
  5320  000C24  F000               	nop	
  5321  000C26  2A37               	incf	keypressed@i_203,f,c
  5322  000C28  D7EE               	goto	i2l3081
  5323  000C2A                     i2l3089:
  5324                           
  5325                           ;Interrupt_ISR.c: 49: else if(keypress_temp == 0b01000011){
  5326  000C2A  0E43               	movlw	67
  5327  000C2C  183E               	xorwf	keypressed@keypress_temp,w,c
  5328  000C2E  A4D8               	btfss	status,2,c
  5329  000C30  D03E               	goto	i2l3123
  5330                           
  5331                           ;Interrupt_ISR.c: 50: tin_results();
  5332  000C32  EC69  F00B         	call	_tin_results	;wreg free
  5333                           
  5334                           ;Interrupt_ISR.c: 55: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  5335  000C36  0E00               	movlw	0
  5336  000C38  6E38               	movwf	keypressed@i_205,c
  5337  000C3A                     i2l3095:
  5338  000C3A  0E09               	movlw	9
  5339  000C3C  6438               	cpfsgt	keypressed@i_205,c
  5340  000C3E  D001               	goto	i2l3099
  5341  000C40  D00E               	goto	i2l3103
  5342  000C42                     i2l3099:
  5343  000C42  0E02               	movlw	2
  5344  000C44  6E22               	movwf	(??_keypressed+1)& (0+255),c
  5345  000C46  0E3F               	movlw	63
  5346  000C48  6E21               	movwf	??_keypressed& (0+255),c
  5347  000C4A  0E2B               	movlw	43
  5348  000C4C                     i2u399_47:
  5349  000C4C  2EE8               	decfsz	wreg,f,c
  5350  000C4E  D7FE               	bra	i2u399_47
  5351  000C50  2E21               	decfsz	??_keypressed& (0+255),f,c
  5352  000C52  D7FC               	bra	i2u399_47
  5353  000C54  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  5354  000C56  D7FA               	bra	i2u399_47
  5355  000C58  F000               	nop	
  5356  000C5A  2A38               	incf	keypressed@i_205,f,c
  5357  000C5C  D7EE               	goto	i2l3095
  5358  000C5E                     i2l3103:
  5359                           
  5360                           ;Interrupt_ISR.c: 56: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  5361  000C5E  0E00               	movlw	0
  5362  000C60  6E39               	movwf	keypressed@i_206,c
  5363  000C62                     i2l3105:
  5364  000C62  0E09               	movlw	9
  5365  000C64  6439               	cpfsgt	keypressed@i_206,c
  5366  000C66  D001               	goto	i2l3109
  5367  000C68  D00E               	goto	i2l3113
  5368  000C6A                     i2l3109:
  5369  000C6A  0E02               	movlw	2
  5370  000C6C  6E22               	movwf	(??_keypressed+1)& (0+255),c
  5371  000C6E  0E3F               	movlw	63
  5372  000C70  6E21               	movwf	??_keypressed& (0+255),c
  5373  000C72  0E2B               	movlw	43
  5374  000C74                     i2u400_47:
  5375  000C74  2EE8               	decfsz	wreg,f,c
  5376  000C76  D7FE               	bra	i2u400_47
  5377  000C78  2E21               	decfsz	??_keypressed& (0+255),f,c
  5378  000C7A  D7FC               	bra	i2u400_47
  5379  000C7C  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  5380  000C7E  D7FA               	bra	i2u400_47
  5381  000C80  F000               	nop	
  5382  000C82  2A39               	incf	keypressed@i_206,f,c
  5383  000C84  D7EE               	goto	i2l3105
  5384  000C86                     i2l3113:
  5385                           
  5386                           ;Interrupt_ISR.c: 57: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  5387  000C86  0E00               	movlw	0
  5388  000C88  6E3A               	movwf	keypressed@i_207,c
  5389  000C8A                     i2l3115:
  5390  000C8A  0E09               	movlw	9
  5391  000C8C  643A               	cpfsgt	keypressed@i_207,c
  5392  000C8E  D001               	goto	i2l3119
  5393  000C90  D058               	goto	i2l3161
  5394  000C92                     i2l3119:
  5395  000C92  0E02               	movlw	2
  5396  000C94  6E22               	movwf	(??_keypressed+1)& (0+255),c
  5397  000C96  0E3F               	movlw	63
  5398  000C98  6E21               	movwf	??_keypressed& (0+255),c
  5399  000C9A  0E2B               	movlw	43
  5400  000C9C                     i2u401_47:
  5401  000C9C  2EE8               	decfsz	wreg,f,c
  5402  000C9E  D7FE               	bra	i2u401_47
  5403  000CA0  2E21               	decfsz	??_keypressed& (0+255),f,c
  5404  000CA2  D7FC               	bra	i2u401_47
  5405  000CA4  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  5406  000CA6  D7FA               	bra	i2u401_47
  5407  000CA8  F000               	nop	
  5408  000CAA  2A3A               	incf	keypressed@i_207,f,c
  5409  000CAC  D7EE               	goto	i2l3115
  5410  000CAE                     i2l3123:
  5411                           
  5412                           ;Interrupt_ISR.c: 59: else if(keypress_temp == 0b01000100){
  5413  000CAE  0E44               	movlw	68
  5414  000CB0  183E               	xorwf	keypressed@keypress_temp,w,c
  5415  000CB2  A4D8               	btfss	status,2,c
  5416  000CB4  D03E               	goto	i2l3157
  5417                           
  5418                           ;Interrupt_ISR.c: 60: op_time();
  5419  000CB6  ECE5  F00A         	call	_op_time	;wreg free
  5420                           
  5421                           ;Interrupt_ISR.c: 63: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  5422  000CBA  0E00               	movlw	0
  5423  000CBC  6E3B               	movwf	keypressed@i_209,c
  5424  000CBE                     i2l3129:
  5425  000CBE  0E09               	movlw	9
  5426  000CC0  643B               	cpfsgt	keypressed@i_209,c
  5427  000CC2  D001               	goto	i2l3133
  5428  000CC4  D00E               	goto	i2l3137
  5429  000CC6                     i2l3133:
  5430  000CC6  0E02               	movlw	2
  5431  000CC8  6E22               	movwf	(??_keypressed+1)& (0+255),c
  5432  000CCA  0E3F               	movlw	63
  5433  000CCC  6E21               	movwf	??_keypressed& (0+255),c
  5434  000CCE  0E2B               	movlw	43
  5435  000CD0                     i2u402_47:
  5436  000CD0  2EE8               	decfsz	wreg,f,c
  5437  000CD2  D7FE               	bra	i2u402_47
  5438  000CD4  2E21               	decfsz	??_keypressed& (0+255),f,c
  5439  000CD6  D7FC               	bra	i2u402_47
  5440  000CD8  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  5441  000CDA  D7FA               	bra	i2u402_47
  5442  000CDC  F000               	nop	
  5443  000CDE  2A3B               	incf	keypressed@i_209,f,c
  5444  000CE0  D7EE               	goto	i2l3129
  5445  000CE2                     i2l3137:
  5446                           
  5447                           ;Interrupt_ISR.c: 64: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  5448  000CE2  0E00               	movlw	0
  5449  000CE4  6E3C               	movwf	keypressed@i_210,c
  5450  000CE6                     i2l3139:
  5451  000CE6  0E09               	movlw	9
  5452  000CE8  643C               	cpfsgt	keypressed@i_210,c
  5453  000CEA  D001               	goto	i2l3143
  5454  000CEC  D00E               	goto	i2l3147
  5455  000CEE                     i2l3143:
  5456  000CEE  0E02               	movlw	2
  5457  000CF0  6E22               	movwf	(??_keypressed+1)& (0+255),c
  5458  000CF2  0E3F               	movlw	63
  5459  000CF4  6E21               	movwf	??_keypressed& (0+255),c
  5460  000CF6  0E2B               	movlw	43
  5461  000CF8                     i2u403_47:
  5462  000CF8  2EE8               	decfsz	wreg,f,c
  5463  000CFA  D7FE               	bra	i2u403_47
  5464  000CFC  2E21               	decfsz	??_keypressed& (0+255),f,c
  5465  000CFE  D7FC               	bra	i2u403_47
  5466  000D00  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  5467  000D02  D7FA               	bra	i2u403_47
  5468  000D04  F000               	nop	
  5469  000D06  2A3C               	incf	keypressed@i_210,f,c
  5470  000D08  D7EE               	goto	i2l3139
  5471  000D0A                     i2l3147:
  5472                           
  5473                           ;Interrupt_ISR.c: 65: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  5474  000D0A  0E00               	movlw	0
  5475  000D0C  6E3D               	movwf	keypressed@i_211,c
  5476  000D0E                     i2l3149:
  5477  000D0E  0E09               	movlw	9
  5478  000D10  643D               	cpfsgt	keypressed@i_211,c
  5479  000D12  D001               	goto	i2l3153
  5480  000D14  D016               	goto	i2l3161
  5481  000D16                     i2l3153:
  5482  000D16  0E02               	movlw	2
  5483  000D18  6E22               	movwf	(??_keypressed+1)& (0+255),c
  5484  000D1A  0E3F               	movlw	63
  5485  000D1C  6E21               	movwf	??_keypressed& (0+255),c
  5486  000D1E  0E2B               	movlw	43
  5487  000D20                     i2u404_47:
  5488  000D20  2EE8               	decfsz	wreg,f,c
  5489  000D22  D7FE               	bra	i2u404_47
  5490  000D24  2E21               	decfsz	??_keypressed& (0+255),f,c
  5491  000D26  D7FC               	bra	i2u404_47
  5492  000D28  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  5493  000D2A  D7FA               	bra	i2u404_47
  5494  000D2C  F000               	nop	
  5495  000D2E  2A3D               	incf	keypressed@i_211,f,c
  5496  000D30  D7EE               	goto	i2l3149
  5497  000D32                     i2l3157:
  5498                           
  5499                           ;Interrupt_ISR.c: 67: else{
  5500                           ;Interrupt_ISR.c: 68: initLCD();
  5501  000D32  EC0A  F00B         	call	i2_initLCD	;wreg free
  5502                           
  5503                           ;Interrupt_ISR.c: 69: printf(" ");
  5504  000D36  0ED2               	movlw	low (STR_14+11)
  5505  000D38  6E0D               	movwf	i2printf@f,c
  5506  000D3A  0EFF               	movlw	high (STR_14+11)
  5507  000D3C  6E0E               	movwf	i2printf@f+1,c
  5508  000D3E  ECDA  F003         	call	i2_printf	;wreg free
  5509  000D42                     i2l3161:
  5510                           
  5511                           ;Interrupt_ISR.c: 70: }
  5512                           ;Interrupt_ISR.c: 71: lcdInst(0b10000000);;
  5513  000D42  0E80               	movlw	128
  5514  000D44  EC28  F00C         	call	i2_lcdInst
  5515                           
  5516                           ;Interrupt_ISR.c: 72: INT1IF = 0;
  5517  000D48  90F0               	bcf	intcon3,0,c	;volatile
  5518  000D4A                     i2l215:
  5519  000D4A  C030  FFF5         	movff	??_keypressed+15,tablat
  5520  000D4E  C02F  FFF8         	movff	??_keypressed+14,tblptru
  5521  000D52  C02E  FFF7         	movff	??_keypressed+13,tblptrh
  5522  000D56  C02D  FFF6         	movff	??_keypressed+12,tblptrl
  5523  000D5A  C02C  FFF4         	movff	??_keypressed+11,prodh
  5524  000D5E  C02B  FFF3         	movff	??_keypressed+10,prodl
  5525  000D62  C02A  FFDA         	movff	??_keypressed+9,fsr2h
  5526  000D66  C029  FFD9         	movff	??_keypressed+8,fsr2l
  5527  000D6A  C028  FFE2         	movff	??_keypressed+7,fsr1h
  5528  000D6E  C027  FFE1         	movff	??_keypressed+6,fsr1l
  5529  000D72  C026  FFEA         	movff	??_keypressed+5,fsr0h
  5530  000D76  C025  FFE9         	movff	??_keypressed+4,fsr0l
  5531  000D7A  C024  FFFB         	movff	??_keypressed+3,pclatu
  5532  000D7E  C023  FFFA         	movff	??_keypressed+2,pclath
  5533  000D82  924B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5534  000D84  0011               	retfie		f
  5535  000D86                     __end_of_keypressed:
  5536                           	opt stack 0
  5537                           pclatu	equ	0xFFB
  5538                           pclath	equ	0xFFA
  5539                           tblptru	equ	0xFF8
  5540                           tblptrh	equ	0xFF7
  5541                           tblptrl	equ	0xFF6
  5542                           tablat	equ	0xFF5
  5543                           prodh	equ	0xFF4
  5544                           prodl	equ	0xFF3
  5545                           intcon	equ	0xFF2
  5546                           intcon3	equ	0xFF0
  5547                           postinc0	equ	0xFEE
  5548                           fsr0h	equ	0xFEA
  5549                           fsr0l	equ	0xFE9
  5550                           wreg	equ	0xFE8
  5551                           fsr1h	equ	0xFE2
  5552                           fsr1l	equ	0xFE1
  5553                           indf2	equ	0xFDF
  5554                           postinc2	equ	0xFDE
  5555                           postdec2	equ	0xFDD
  5556                           fsr2h	equ	0xFDA
  5557                           fsr2l	equ	0xFD9
  5558                           status	equ	0xFD8
  5559                           
  5560 ;; *************** function _tot_sorted *****************
  5561 ;; Defined at:
  5562 ;;		line 78 in file "main.c"
  5563 ;; Parameters:    Size  Location     Type
  5564 ;;		None
  5565 ;; Auto vars:     Size  Location     Type
  5566 ;;		None
  5567 ;; Return value:  Size  Location     Type
  5568 ;;                  1    wreg      void 
  5569 ;; Registers used:
  5570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5571 ;; Tracked objects:
  5572 ;;		On entry : 0/0
  5573 ;;		On exit  : 0/0
  5574 ;;		Unchanged: 0/0
  5575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5580 ;;Total ram usage:        0 bytes
  5581 ;; Hardware stack levels used:    1
  5582 ;; Hardware stack levels required when called:    3
  5583 ;; This function calls:
  5584 ;;		i2_initLCD
  5585 ;;		i2_printf
  5586 ;; This function is called by:
  5587 ;;		_keypressed
  5588 ;; This function uses a non-reentrant model
  5589 ;;
  5590                           
  5591                           	psect	text24
  5592  0017F6                     __ptext24:
  5593                           	opt stack 0
  5594  0017F6                     _tot_sorted:
  5595                           	opt stack 21
  5596                           
  5597                           ;main.c: 79: initLCD();
  5598                           
  5599                           ;incstack = 0
  5600  0017F6  EC0A  F00B         	call	i2_initLCD	;wreg free
  5601                           
  5602                           ;main.c: 80: printf("Total Sorted: %02x", tot);
  5603  0017FA  0E21               	movlw	low STR_1
  5604  0017FC  6E0D               	movwf	i2printf@f,c
  5605  0017FE  0EFF               	movlw	high STR_1
  5606  001800  6E0E               	movwf	i2printf@f+1,c
  5607  001802  C03F  F00F         	movff	_tot,?i2_printf+2
  5608  001806  C040  F010         	movff	_tot+1,?i2_printf+3
  5609  00180A  ECDA  F003         	call	i2_printf	;wreg free
  5610  00180E  0012               	return	
  5611  001810                     __end_of_tot_sorted:
  5612                           	opt stack 0
  5613                           pclatu	equ	0xFFB
  5614                           pclath	equ	0xFFA
  5615                           tblptru	equ	0xFF8
  5616                           tblptrh	equ	0xFF7
  5617                           tblptrl	equ	0xFF6
  5618                           tablat	equ	0xFF5
  5619                           prodh	equ	0xFF4
  5620                           prodl	equ	0xFF3
  5621                           intcon	equ	0xFF2
  5622                           intcon3	equ	0xFF0
  5623                           postinc0	equ	0xFEE
  5624                           fsr0h	equ	0xFEA
  5625                           fsr0l	equ	0xFE9
  5626                           wreg	equ	0xFE8
  5627                           fsr1h	equ	0xFE2
  5628                           fsr1l	equ	0xFE1
  5629                           indf2	equ	0xFDF
  5630                           postinc2	equ	0xFDE
  5631                           postdec2	equ	0xFDD
  5632                           fsr2h	equ	0xFDA
  5633                           fsr2l	equ	0xFD9
  5634                           status	equ	0xFD8
  5635                           
  5636 ;; *************** function _tin_results *****************
  5637 ;; Defined at:
  5638 ;;		line 90 in file "main.c"
  5639 ;; Parameters:    Size  Location     Type
  5640 ;;		None
  5641 ;; Auto vars:     Size  Location     Type
  5642 ;;		None
  5643 ;; Return value:  Size  Location     Type
  5644 ;;                  1    wreg      void 
  5645 ;; Registers used:
  5646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5647 ;; Tracked objects:
  5648 ;;		On entry : 0/0
  5649 ;;		On exit  : 0/0
  5650 ;;		Unchanged: 0/0
  5651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5656 ;;Total ram usage:        0 bytes
  5657 ;; Hardware stack levels used:    1
  5658 ;; Hardware stack levels required when called:    3
  5659 ;; This function calls:
  5660 ;;		i2_initLCD
  5661 ;;		i2_lcdInst
  5662 ;;		i2_printf
  5663 ;; This function is called by:
  5664 ;;		_keypressed
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           	psect	text25
  5669  0016D2                     __ptext25:
  5670                           	opt stack 0
  5671  0016D2                     _tin_results:
  5672                           	opt stack 21
  5673                           
  5674                           ;main.c: 91: initLCD();
  5675                           
  5676                           ;incstack = 0
  5677  0016D2  EC0A  F00B         	call	i2_initLCD	;wreg free
  5678                           
  5679                           ;main.c: 92: printf("With Label: %02x",tin_can);
  5680  0016D6  0E89               	movlw	low STR_3
  5681  0016D8  6E0D               	movwf	i2printf@f,c
  5682  0016DA  0EFF               	movlw	high STR_3
  5683  0016DC  6E0E               	movwf	i2printf@f+1,c
  5684  0016DE  C045  F00F         	movff	_tin_can,?i2_printf+2
  5685  0016E2  C046  F010         	movff	_tin_can+1,?i2_printf+3
  5686  0016E6  ECDA  F003         	call	i2_printf	;wreg free
  5687                           
  5688                           ;main.c: 93: lcdInst(0b11000000);;
  5689  0016EA  0EC0               	movlw	192
  5690  0016EC  EC28  F00C         	call	i2_lcdInst
  5691                           
  5692                           ;main.c: 94: printf("No Label: %02x",tin_can_label);
  5693  0016F0  0EB8               	movlw	low STR_4
  5694  0016F2  6E0D               	movwf	i2printf@f,c
  5695  0016F4  0EFF               	movlw	high STR_4
  5696  0016F6  6E0E               	movwf	i2printf@f+1,c
  5697  0016F8  C043  F00F         	movff	_tin_can_label,?i2_printf+2
  5698  0016FC  C044  F010         	movff	_tin_can_label+1,?i2_printf+3
  5699  001700  ECDA  F003         	call	i2_printf	;wreg free
  5700  001704  0012               	return	
  5701  001706                     __end_of_tin_results:
  5702                           	opt stack 0
  5703                           pclatu	equ	0xFFB
  5704                           pclath	equ	0xFFA
  5705                           tblptru	equ	0xFF8
  5706                           tblptrh	equ	0xFF7
  5707                           tblptrl	equ	0xFF6
  5708                           tablat	equ	0xFF5
  5709                           prodh	equ	0xFF4
  5710                           prodl	equ	0xFF3
  5711                           intcon	equ	0xFF2
  5712                           intcon3	equ	0xFF0
  5713                           postinc0	equ	0xFEE
  5714                           fsr0h	equ	0xFEA
  5715                           fsr0l	equ	0xFE9
  5716                           wreg	equ	0xFE8
  5717                           fsr1h	equ	0xFE2
  5718                           fsr1l	equ	0xFE1
  5719                           indf2	equ	0xFDF
  5720                           postinc2	equ	0xFDE
  5721                           postdec2	equ	0xFDD
  5722                           fsr2h	equ	0xFDA
  5723                           fsr2l	equ	0xFD9
  5724                           status	equ	0xFD8
  5725                           
  5726 ;; *************** function _pop_results *****************
  5727 ;; Defined at:
  5728 ;;		line 98 in file "main.c"
  5729 ;; Parameters:    Size  Location     Type
  5730 ;;		None
  5731 ;; Auto vars:     Size  Location     Type
  5732 ;;		None
  5733 ;; Return value:  Size  Location     Type
  5734 ;;                  1    wreg      void 
  5735 ;; Registers used:
  5736 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5737 ;; Tracked objects:
  5738 ;;		On entry : 0/0
  5739 ;;		On exit  : 0/0
  5740 ;;		Unchanged: 0/0
  5741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5746 ;;Total ram usage:        0 bytes
  5747 ;; Hardware stack levels used:    1
  5748 ;; Hardware stack levels required when called:    3
  5749 ;; This function calls:
  5750 ;;		i2_initLCD
  5751 ;;		i2_lcdInst
  5752 ;;		i2_printf
  5753 ;; This function is called by:
  5754 ;;		_keypressed
  5755 ;; This function uses a non-reentrant model
  5756 ;;
  5757                           
  5758                           	psect	text26
  5759  001706                     __ptext26:
  5760                           	opt stack 0
  5761  001706                     _pop_results:
  5762                           	opt stack 21
  5763                           
  5764                           ;main.c: 99: initLCD();
  5765                           
  5766                           ;incstack = 0
  5767  001706  EC0A  F00B         	call	i2_initLCD	;wreg free
  5768                           
  5769                           ;main.c: 100: printf("With Tab: %02x",pop_can_tab);
  5770  00170A  0EA9               	movlw	low STR_5
  5771  00170C  6E0D               	movwf	i2printf@f,c
  5772  00170E  0EFF               	movlw	high STR_5
  5773  001710  6E0E               	movwf	i2printf@f+1,c
  5774  001712  C047  F00F         	movff	_pop_can_tab,?i2_printf+2
  5775  001716  C048  F010         	movff	_pop_can_tab+1,?i2_printf+3
  5776  00171A  ECDA  F003         	call	i2_printf	;wreg free
  5777                           
  5778                           ;main.c: 101: lcdInst(0b11000000);;
  5779  00171E  0EC0               	movlw	192
  5780  001720  EC28  F00C         	call	i2_lcdInst
  5781                           
  5782                           ;main.c: 102: printf("No Tab: %02x",pop_can);
  5783  001724  0EE1               	movlw	low STR_6
  5784  001726  6E0D               	movwf	i2printf@f,c
  5785  001728  0EFF               	movlw	high STR_6
  5786  00172A  6E0E               	movwf	i2printf@f+1,c
  5787  00172C  C049  F00F         	movff	_pop_can,?i2_printf+2
  5788  001730  C04A  F010         	movff	_pop_can+1,?i2_printf+3
  5789  001734  ECDA  F003         	call	i2_printf	;wreg free
  5790  001738  0012               	return	
  5791  00173A                     __end_of_pop_results:
  5792                           	opt stack 0
  5793                           pclatu	equ	0xFFB
  5794                           pclath	equ	0xFFA
  5795                           tblptru	equ	0xFF8
  5796                           tblptrh	equ	0xFF7
  5797                           tblptrl	equ	0xFF6
  5798                           tablat	equ	0xFF5
  5799                           prodh	equ	0xFF4
  5800                           prodl	equ	0xFF3
  5801                           intcon	equ	0xFF2
  5802                           intcon3	equ	0xFF0
  5803                           postinc0	equ	0xFEE
  5804                           fsr0h	equ	0xFEA
  5805                           fsr0l	equ	0xFE9
  5806                           wreg	equ	0xFE8
  5807                           fsr1h	equ	0xFE2
  5808                           fsr1l	equ	0xFE1
  5809                           indf2	equ	0xFDF
  5810                           postinc2	equ	0xFDE
  5811                           postdec2	equ	0xFDD
  5812                           fsr2h	equ	0xFDA
  5813                           fsr2l	equ	0xFD9
  5814                           status	equ	0xFD8
  5815                           
  5816 ;; *************** function _op_time *****************
  5817 ;; Defined at:
  5818 ;;		line 84 in file "main.c"
  5819 ;; Parameters:    Size  Location     Type
  5820 ;;		None
  5821 ;; Auto vars:     Size  Location     Type
  5822 ;;		None
  5823 ;; Return value:  Size  Location     Type
  5824 ;;                  1    wreg      void 
  5825 ;; Registers used:
  5826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5827 ;; Tracked objects:
  5828 ;;		On entry : 0/0
  5829 ;;		On exit  : 0/0
  5830 ;;		Unchanged: 0/0
  5831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5836 ;;Total ram usage:        0 bytes
  5837 ;; Hardware stack levels used:    1
  5838 ;; Hardware stack levels required when called:    3
  5839 ;; This function calls:
  5840 ;;		___awmod
  5841 ;;		i2___awdiv
  5842 ;;		i2_initLCD
  5843 ;;		i2_printf
  5844 ;; This function is called by:
  5845 ;;		_keypressed
  5846 ;; This function uses a non-reentrant model
  5847 ;;
  5848                           
  5849                           	psect	text27
  5850  0015CA                     __ptext27:
  5851                           	opt stack 0
  5852  0015CA                     _op_time:
  5853                           	opt stack 21
  5854                           
  5855                           ;main.c: 85: initLCD();
  5856                           
  5857                           ;incstack = 0
  5858  0015CA  EC0A  F00B         	call	i2_initLCD	;wreg free
  5859                           
  5860                           ;main.c: 86: printf("Time: %01d min %02d s", operation_time/60, operation_time%60 );
  5861  0015CE  0E0B               	movlw	low STR_2
  5862  0015D0  6E0D               	movwf	i2printf@f,c
  5863  0015D2  0EFF               	movlw	high STR_2
  5864  0015D4  6E0E               	movwf	i2printf@f+1,c
  5865  0015D6  C041  F001         	movff	_operation_time,i2___awdiv@dividend
  5866  0015DA  C042  F002         	movff	_operation_time+1,i2___awdiv@dividend+1
  5867  0015DE  0E00               	movlw	0
  5868  0015E0  6E04               	movwf	i2___awdiv@divisor+1,c
  5869  0015E2  0E3C               	movlw	60
  5870  0015E4  6E03               	movwf	i2___awdiv@divisor,c
  5871  0015E6  ECCA  F008         	call	i2___awdiv	;wreg free
  5872  0015EA  C001  F00F         	movff	?i2___awdiv,?i2_printf+2
  5873  0015EE  C002  F010         	movff	?i2___awdiv+1,?i2_printf+3
  5874  0015F2  C041  F001         	movff	_operation_time,___awmod@dividend
  5875  0015F6  C042  F002         	movff	_operation_time+1,___awmod@dividend+1
  5876  0015FA  0E00               	movlw	0
  5877  0015FC  6E04               	movwf	___awmod@divisor+1,c
  5878  0015FE  0E3C               	movlw	60
  5879  001600  6E03               	movwf	___awmod@divisor,c
  5880  001602  EC48  F009         	call	___awmod	;wreg free
  5881  001606  C001  F011         	movff	?___awmod,?i2_printf+4
  5882  00160A  C002  F012         	movff	?___awmod+1,?i2_printf+5
  5883  00160E  ECDA  F003         	call	i2_printf	;wreg free
  5884  001612  0012               	return	
  5885  001614                     __end_of_op_time:
  5886                           	opt stack 0
  5887                           pclatu	equ	0xFFB
  5888                           pclath	equ	0xFFA
  5889                           tblptru	equ	0xFF8
  5890                           tblptrh	equ	0xFF7
  5891                           tblptrl	equ	0xFF6
  5892                           tablat	equ	0xFF5
  5893                           prodh	equ	0xFF4
  5894                           prodl	equ	0xFF3
  5895                           intcon	equ	0xFF2
  5896                           intcon3	equ	0xFF0
  5897                           postinc0	equ	0xFEE
  5898                           fsr0h	equ	0xFEA
  5899                           fsr0l	equ	0xFE9
  5900                           wreg	equ	0xFE8
  5901                           fsr1h	equ	0xFE2
  5902                           fsr1l	equ	0xFE1
  5903                           indf2	equ	0xFDF
  5904                           postinc2	equ	0xFDE
  5905                           postdec2	equ	0xFDD
  5906                           fsr2h	equ	0xFDA
  5907                           fsr2l	equ	0xFD9
  5908                           status	equ	0xFD8
  5909                           
  5910 ;; *************** function i2_printf *****************
  5911 ;; Defined at:
  5912 ;;		line 464 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
  5913 ;; Parameters:    Size  Location     Type
  5914 ;;  f               2   12[COMRAM] PTR const unsigned char 
  5915 ;;		 -> STR_16(17), STR_15(15), STR_14(13), STR_13(8), 
  5916 ;;		 -> STR_12(17), STR_11(17), STR_10(17), STR_9(9), 
  5917 ;;		 -> STR_8(13), STR_7(2), STR_6(13), STR_5(15), 
  5918 ;;		 -> STR_4(15), STR_3(17), STR_2(22), STR_1(19), 
  5919 ;; Auto vars:     Size  Location     Type
  5920 ;;  printf          4    0        struct .
  5921 ;;  printf          3    0        PTR const unsigned char 
  5922 ;;  printf          2   29[COMRAM] int 
  5923 ;;  printf          2   26[COMRAM] unsigned int 
  5924 ;;  printf          2   23[COMRAM] PTR void [1]
  5925 ;;		 -> ?i2_printf(2), ?_printf(2), 
  5926 ;;  printf          2    0        unsigned int 
  5927 ;;  printf          1   31[COMRAM] char 
  5928 ;;  printf          1   28[COMRAM] unsigned char 
  5929 ;;  printf          1   25[COMRAM] char 
  5930 ;;  printf          1   22[COMRAM] unsigned char 
  5931 ;; Return value:  Size  Location     Type
  5932 ;;                  2   12[COMRAM] int 
  5933 ;; Registers used:
  5934 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5935 ;; Tracked objects:
  5936 ;;		On entry : 0/0
  5937 ;;		On exit  : 0/0
  5938 ;;		Unchanged: 0/0
  5939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5940 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5941 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5942 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5943 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5944 ;;Total ram usage:       20 bytes
  5945 ;; Hardware stack levels used:    1
  5946 ;; Hardware stack levels required when called:    2
  5947 ;; This function calls:
  5948 ;;		i2___lwdiv
  5949 ;;		i2___lwmod
  5950 ;;		i2___wmul
  5951 ;;		i2_isdigit
  5952 ;;		i2_putch
  5953 ;; This function is called by:
  5954 ;;		_tot_sorted
  5955 ;;		_op_time
  5956 ;;		_tin_results
  5957 ;;		_pop_results
  5958 ;;		_keypressed
  5959 ;; This function uses a non-reentrant model
  5960 ;;
  5961                           
  5962                           	psect	text28
  5963  0007B4                     __ptext28:
  5964                           	opt stack 0
  5965  0007B4                     i2_printf:
  5966                           	opt stack 22
  5967                           
  5968                           ;doprnt.c: 466: va_list ap;
  5969                           ;doprnt.c: 499: signed char c;
  5970                           ;doprnt.c: 501: int width;
  5971                           ;doprnt.c: 506: signed char prec;
  5972                           ;doprnt.c: 508: unsigned char flag;
  5973                           ;doprnt.c: 523: union {
  5974                           ;doprnt.c: 524: unsigned long vd;
  5975                           ;doprnt.c: 525: double integ;
  5976                           ;doprnt.c: 526: } tmpval;
  5977                           ;doprnt.c: 528: unsigned int val;
  5978                           ;doprnt.c: 529: unsigned len;
  5979                           ;doprnt.c: 530: const char * cp;
  5980                           ;doprnt.c: 533: *ap = __va_start();
  5981                           
  5982                           ;incstack = 0
  5983  0007B4  0E0F               	movlw	low (?i2_printf+2)
  5984  0007B6  6E18               	movwf	i2printf@ap,c
  5985  0007B8  0E00               	movlw	high (?i2_printf+2)
  5986  0007BA  6E19               	movwf	i2printf@ap+1,c
  5987                           
  5988                           ;doprnt.c: 536: while(c = *f++) {
  5989  0007BC  D174               	goto	i2l2723
  5990  0007BE                     i2l2597:
  5991                           
  5992                           ;doprnt.c: 538: if(c != '%')
  5993  0007BE  0E25               	movlw	37
  5994  0007C0  1820               	xorwf	i2printf@c,w,c
  5995  0007C2  B4D8               	btfsc	status,2,c
  5996  0007C4  D004               	goto	i2l2601
  5997                           
  5998                           ;doprnt.c: 540: {
  5999                           ;doprnt.c: 541: (putch(c) );
  6000  0007C6  5020               	movf	i2printf@c,w,c
  6001  0007C8  EC22  F00C         	call	i2_putch
  6002                           
  6003                           ;doprnt.c: 542: continue;
  6004  0007CC  D16C               	goto	i2l2723
  6005  0007CE                     i2l2601:
  6006                           
  6007                           ;doprnt.c: 543: }
  6008                           ;doprnt.c: 546: width = 0;
  6009  0007CE  0E00               	movlw	0
  6010  0007D0  6E1F               	movwf	i2printf@width+1,c
  6011  0007D2  0E00               	movlw	0
  6012  0007D4  6E1E               	movwf	i2printf@width,c
  6013                           
  6014                           ;doprnt.c: 548: flag = 0;
  6015  0007D6  0E00               	movlw	0
  6016  0007D8  6E1D               	movwf	i2printf@flag,c
  6017                           
  6018                           ;doprnt.c: 551: switch(*f) {
  6019                           
  6020                           ;doprnt.c: 550: for(;;) {
  6021  0007DA  D003               	goto	i2l2607
  6022  0007DC                     i2l2603:
  6023                           
  6024                           ;doprnt.c: 580: flag |= 0x04;
  6025  0007DC  841D               	bsf	i2printf@flag,2,c
  6026                           
  6027                           ;doprnt.c: 581: f++;
  6028  0007DE  4A0D               	infsnz	i2printf@f,f,c
  6029  0007E0  2A0E               	incf	i2printf@f+1,f,c
  6030  0007E2                     i2l2607:
  6031  0007E2  C00D  FFF6         	movff	i2printf@f,tblptrl
  6032  0007E6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6033  0007EA                     	if	0	;tblptru may be non-zero
  6034  0007EA                     	endif
  6035  0007EA                     	if	0	;tblptru may be non-zero
  6036  0007EA                     	endif
  6037  0007EA  0008               	tblrd		*
  6038  0007EC  50F5               	movf	tablat,w,c
  6039                           
  6040                           ; Switch size 1, requested type "space"
  6041                           ; Number of cases is 1, Range of values is 48 to 48
  6042                           ; switch strategies available:
  6043                           ; Name         Instructions Cycles
  6044                           ; simple_byte            4     3 (average)
  6045                           ;	Chosen strategy is simple_byte
  6046  0007EE  0A30               	xorlw	48	; case 48
  6047  0007F0  B4D8               	btfsc	status,2,c
  6048  0007F2  D7F4               	goto	i2l2603
  6049                           
  6050                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6051                           
  6052                           ;doprnt.c: 586: }
  6053                           
  6054                           ;doprnt.c: 585: break;
  6055  0007F4  C00D  FFF6         	movff	i2printf@f,tblptrl
  6056  0007F8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6057  0007FC                     	if	0	;tblptru may be non-zero
  6058  0007FC                     	endif
  6059  0007FC                     	if	0	;tblptru may be non-zero
  6060  0007FC                     	endif
  6061  0007FC  0008               	tblrd		*
  6062  0007FE  50F5               	movf	tablat,w,c
  6063  000800  ECEC  F00B         	call	i2_isdigit
  6064  000804  A0D8               	btfss	status,0,c
  6065  000806  D035               	goto	i2l2625
  6066                           
  6067                           ;doprnt.c: 598: width = 0;
  6068  000808  0E00               	movlw	0
  6069  00080A  6E1F               	movwf	i2printf@width+1,c
  6070  00080C  0E00               	movlw	0
  6071  00080E  6E1E               	movwf	i2printf@width,c
  6072  000810                     i2l2613:
  6073                           
  6074                           ;doprnt.c: 600: width *= 10;
  6075  000810  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
  6076  000814  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  6077  000818  0E00               	movlw	0
  6078  00081A  6E04               	movwf	i2___wmul@multiplicand+1,c
  6079  00081C  0E0A               	movlw	10
  6080  00081E  6E03               	movwf	i2___wmul@multiplicand,c
  6081  000820  ECC9  F00B         	call	i2___wmul	;wreg free
  6082  000824  C001  F01E         	movff	?i2___wmul,i2printf@width
  6083  000828  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
  6084                           
  6085                           ;doprnt.c: 601: width += *f++ - '0';
  6086  00082C  0ED0               	movlw	208
  6087  00082E  6E13               	movwf	??i2_printf& (0+255),c
  6088  000830  0EFF               	movlw	255
  6089  000832  6E14               	movwf	(??i2_printf+1)& (0+255),c
  6090  000834  C00D  FFF6         	movff	i2printf@f,tblptrl
  6091  000838  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6092  00083C                     	if	0	;tblptru may be non-zero
  6093  00083C                     	endif
  6094  00083C                     	if	0	;tblptru may be non-zero
  6095  00083C                     	endif
  6096  00083C  0008               	tblrd		*
  6097  00083E  50F5               	movf	tablat,w,c
  6098  000840  6E15               	movwf	(??i2_printf+2)& (0+255),c
  6099  000842  6A16               	clrf	(??i2_printf+3)& (0+255),c
  6100  000844  5013               	movf	??i2_printf,w,c
  6101  000846  2615               	addwf	??i2_printf+2,f,c
  6102  000848  5014               	movf	??i2_printf+1,w,c
  6103  00084A  2216               	addwfc	??i2_printf+3,f,c
  6104  00084C  5015               	movf	??i2_printf+2,w,c
  6105  00084E  261E               	addwf	i2printf@width,f,c
  6106  000850  5016               	movf	??i2_printf+3,w,c
  6107  000852  221F               	addwfc	i2printf@width+1,f,c
  6108  000854  4A0D               	infsnz	i2printf@f,f,c
  6109  000856  2A0E               	incf	i2printf@f+1,f,c
  6110                           
  6111                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6112  000858  C00D  FFF6         	movff	i2printf@f,tblptrl
  6113  00085C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6114  000860                     	if	0	;tblptru may be non-zero
  6115  000860                     	endif
  6116  000860                     	if	0	;tblptru may be non-zero
  6117  000860                     	endif
  6118  000860  0008               	tblrd		*
  6119  000862  50F5               	movf	tablat,w,c
  6120  000864  ECEC  F00B         	call	i2_isdigit
  6121  000868  A0D8               	btfss	status,0,c
  6122  00086A  D003               	goto	i2l2625
  6123  00086C  D7D1               	goto	i2l2613
  6124  00086E                     i2l2621:
  6125                           
  6126                           ;doprnt.c: 721: flag |= 0x80;
  6127  00086E  8E1D               	bsf	i2printf@flag,7,c
  6128                           
  6129                           ;doprnt.c: 723: break;
  6130  000870  D017               	goto	i2l339
  6131  000872                     i2l2625:
  6132  000872  C00D  FFF6         	movff	i2printf@f,tblptrl
  6133  000876  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6134  00087A  4A0D               	infsnz	i2printf@f,f,c
  6135  00087C  2A0E               	incf	i2printf@f+1,f,c
  6136  00087E                     	if	0	;tblptru may be non-zero
  6137  00087E                     	endif
  6138  00087E                     	if	0	;tblptru may be non-zero
  6139  00087E                     	endif
  6140  00087E  0008               	tblrd		*
  6141  000880  CFF5 F020          	movff	tablat,i2printf@c
  6142  000884  5020               	movf	i2printf@c,w,c
  6143                           
  6144                           ; Switch size 1, requested type "space"
  6145                           ; Number of cases is 4, Range of values is 0 to 120
  6146                           ; switch strategies available:
  6147                           ; Name         Instructions Cycles
  6148                           ; simple_byte           13     7 (average)
  6149                           ;	Chosen strategy is simple_byte
  6150  000886  0A00               	xorlw	0	; case 0
  6151  000888  B4D8               	btfsc	status,2,c
  6152  00088A  0012               	return	
  6153  00088C  0A64               	xorlw	100	; case 100
  6154  00088E  B4D8               	btfsc	status,2,c
  6155  000890  D007               	goto	i2l339
  6156  000892  0A0D               	xorlw	13	; case 105
  6157  000894  B4D8               	btfsc	status,2,c
  6158  000896  D004               	goto	i2l339
  6159  000898  0A11               	xorlw	17	; case 120
  6160  00089A  B4D8               	btfsc	status,2,c
  6161  00089C  D7E8               	goto	i2l2621
  6162  00089E  D103               	goto	i2l2723
  6163  0008A0                     i2l339:
  6164                           
  6165                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6166  0008A0  BE1D               	btfsc	i2printf@flag,7,c
  6167  0008A2  D015               	goto	i2l2637
  6168                           
  6169                           ;doprnt.c: 1253: {
  6170                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6171  0008A4  C018  FFD9         	movff	i2printf@ap,fsr2l
  6172  0008A8  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  6173  0008AC  CFDE F01B          	movff	postinc2,i2printf@val
  6174  0008B0  CFDD F01C          	movff	postdec2,i2printf@val+1
  6175  0008B4  0E02               	movlw	2
  6176  0008B6  2618               	addwf	i2printf@ap,f,c
  6177  0008B8  0E00               	movlw	0
  6178  0008BA  2219               	addwfc	i2printf@ap+1,f,c
  6179                           
  6180                           ;doprnt.c: 1261: if((int)val < 0) {
  6181  0008BC  AE1C               	btfss	i2printf@val+1,7,c
  6182  0008BE  D044               	goto	i2l2671
  6183                           
  6184                           ;doprnt.c: 1262: flag |= 0x03;
  6185  0008C0  0E03               	movlw	3
  6186  0008C2  121D               	iorwf	i2printf@flag,f,c
  6187                           
  6188                           ;doprnt.c: 1263: val = -val;
  6189  0008C4  6C1B               	negf	i2printf@val,c
  6190  0008C6  1E1C               	comf	i2printf@val+1,f,c
  6191  0008C8  B0D8               	btfsc	status,0,c
  6192  0008CA  2A1C               	incf	i2printf@val+1,f,c
  6193                           
  6194                           ;doprnt.c: 1264: }
  6195                           ;doprnt.c: 1266: }
  6196  0008CC  D03D               	goto	i2l2671
  6197  0008CE                     i2l2637:
  6198                           
  6199                           ;doprnt.c: 1268: else
  6200                           ;doprnt.c: 1273: {
  6201                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6202  0008CE  C018  FFD9         	movff	i2printf@ap,fsr2l
  6203  0008D2  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  6204  0008D6  CFDE F01B          	movff	postinc2,i2printf@val
  6205  0008DA  CFDD F01C          	movff	postdec2,i2printf@val+1
  6206  0008DE  0E02               	movlw	2
  6207  0008E0  2618               	addwf	i2printf@ap,f,c
  6208  0008E2  0E00               	movlw	0
  6209  0008E4  2219               	addwfc	i2printf@ap+1,f,c
  6210                           
  6211                           ;doprnt.c: 1287: }
  6212                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6213  0008E6  D030               	goto	i2l2671
  6214  0008E8                     i2l2641:
  6215                           
  6216                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6217  0008E8  0E01               	movlw	1
  6218  0008EA  6E20               	movwf	i2printf@c,c
  6219  0008EC                     i2l2643:
  6220  0008EC  0E05               	movlw	5
  6221  0008EE  1820               	xorwf	i2printf@c,w,c
  6222  0008F0  B4D8               	btfsc	status,2,c
  6223  0008F2  D032               	goto	i2l2673
  6224                           
  6225                           ;doprnt.c: 1306: if(val < dpowers[c])
  6226  0008F4  5020               	movf	i2printf@c,w,c
  6227  0008F6  0D02               	mullw	2
  6228  0008F8  0EF2               	movlw	low _dpowers
  6229  0008FA  24F3               	addwf	prodl,w,c
  6230  0008FC  6EF6               	movwf	tblptrl,c
  6231  0008FE  0EFE               	movlw	high _dpowers
  6232  000900  20F4               	addwfc	prodh,w,c
  6233  000902  6EF7               	movwf	tblptrh,c
  6234  000904                     	if	0	;There are less than 3 active tblptr bytes
  6235  000904                     	endif
  6236  000904  0009               	tblrd		*+
  6237  000906  50F5               	movf	tablat,w,c
  6238  000908  5C1B               	subwf	i2printf@val,w,c
  6239  00090A  0009               	tblrd		*+
  6240  00090C  50F5               	movf	tablat,w,c
  6241  00090E  581C               	subwfb	i2printf@val+1,w,c
  6242  000910  A0D8               	btfss	status,0,c
  6243  000912  D022               	goto	i2l2673
  6244                           
  6245                           ;doprnt.c: 1307: break;
  6246  000914  2A20               	incf	i2printf@c,f,c
  6247  000916  D7EA               	goto	i2l2643
  6248  000918                     i2l2655:
  6249                           
  6250                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6251  000918  0E01               	movlw	1
  6252  00091A  6E20               	movwf	i2printf@c,c
  6253  00091C                     i2l2657:
  6254  00091C  0E04               	movlw	4
  6255  00091E  1820               	xorwf	i2printf@c,w,c
  6256  000920  B4D8               	btfsc	status,2,c
  6257  000922  D01A               	goto	i2l2673
  6258                           
  6259                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6260  000924  5020               	movf	i2printf@c,w,c
  6261  000926  0D02               	mullw	2
  6262  000928  0EFC               	movlw	low _hexpowers
  6263  00092A  24F3               	addwf	prodl,w,c
  6264  00092C  6EF6               	movwf	tblptrl,c
  6265  00092E  0EFE               	movlw	high _hexpowers
  6266  000930  20F4               	addwfc	prodh,w,c
  6267  000932  6EF7               	movwf	tblptrh,c
  6268  000934                     	if	0	;There are less than 3 active tblptr bytes
  6269  000934                     	endif
  6270  000934  0009               	tblrd		*+
  6271  000936  50F5               	movf	tablat,w,c
  6272  000938  5C1B               	subwf	i2printf@val,w,c
  6273  00093A  0009               	tblrd		*+
  6274  00093C  50F5               	movf	tablat,w,c
  6275  00093E  581C               	subwfb	i2printf@val+1,w,c
  6276  000940  A0D8               	btfss	status,0,c
  6277  000942  D00A               	goto	i2l2673
  6278                           
  6279                           ;doprnt.c: 1318: break;
  6280  000944  2A20               	incf	i2printf@c,f,c
  6281  000946  D7EA               	goto	i2l2657
  6282  000948                     i2l2671:
  6283  000948  501D               	movf	i2printf@flag,w,c
  6284  00094A  0B80               	andlw	128
  6285                           
  6286                           ; Switch size 1, requested type "space"
  6287                           ; Number of cases is 2, Range of values is 0 to 128
  6288                           ; switch strategies available:
  6289                           ; Name         Instructions Cycles
  6290                           ; simple_byte            7     4 (average)
  6291                           ;	Chosen strategy is simple_byte
  6292  00094C  0A00               	xorlw	0	; case 0
  6293  00094E  B4D8               	btfsc	status,2,c
  6294  000950  D7CB               	goto	i2l2641
  6295  000952  0A80               	xorlw	128	; case 128
  6296  000954  B4D8               	btfsc	status,2,c
  6297  000956  D7E0               	goto	i2l2655
  6298  000958                     i2l2673:
  6299                           
  6300                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6301  000958  501E               	movf	i2printf@width,w,c
  6302  00095A  101F               	iorwf	i2printf@width+1,w,c
  6303  00095C  B4D8               	btfsc	status,2,c
  6304  00095E  D009               	goto	i2l2679
  6305  000960  C01D  F013         	movff	i2printf@flag,??i2_printf
  6306  000964  0E03               	movlw	3
  6307  000966  1613               	andwf	??i2_printf,f,c
  6308  000968  B4D8               	btfsc	status,2,c
  6309  00096A  D003               	goto	i2l2679
  6310                           
  6311                           ;doprnt.c: 1346: width--;
  6312  00096C  061E               	decf	i2printf@width,f,c
  6313  00096E  A0D8               	btfss	status,0,c
  6314  000970  061F               	decf	i2printf@width+1,f,c
  6315  000972                     i2l2679:
  6316                           
  6317                           ;doprnt.c: 1381: if(width > c)
  6318  000972  0E80               	movlw	128
  6319  000974  BE20               	btfsc	i2printf@c,7,c
  6320  000976  0E7F               	movlw	127
  6321  000978  6E13               	movwf	??i2_printf& (0+255),c
  6322  00097A  501E               	movf	i2printf@width,w,c
  6323  00097C  5C20               	subwf	i2printf@c,w,c
  6324  00097E  501F               	movf	i2printf@width+1,w,c
  6325  000980  0A80               	xorlw	128
  6326  000982  5813               	subwfb	??i2_printf& (0+255),w,c
  6327  000984  B0D8               	btfsc	status,0,c
  6328  000986  D007               	goto	i2l2683
  6329                           
  6330                           ;doprnt.c: 1382: width -= c;
  6331  000988  5020               	movf	i2printf@c,w,c
  6332  00098A  5E1E               	subwf	i2printf@width,f,c
  6333  00098C  0E00               	movlw	0
  6334  00098E  BE20               	btfsc	i2printf@c,7,c
  6335  000990  0EFF               	movlw	255
  6336  000992  5A1F               	subwfb	i2printf@width+1,f,c
  6337  000994  D004               	goto	i2l2685
  6338  000996                     i2l2683:
  6339                           
  6340                           ;doprnt.c: 1383: else
  6341                           ;doprnt.c: 1384: width = 0;
  6342  000996  0E00               	movlw	0
  6343  000998  6E1F               	movwf	i2printf@width+1,c
  6344  00099A  0E00               	movlw	0
  6345  00099C  6E1E               	movwf	i2printf@width,c
  6346  00099E                     i2l2685:
  6347                           
  6348                           ;doprnt.c: 1387: if(flag & 0x04) {
  6349  00099E  A41D               	btfss	i2printf@flag,2,c
  6350  0009A0  D014               	goto	i2l2697
  6351                           
  6352                           ;doprnt.c: 1392: if(flag & 0x03)
  6353  0009A2  C01D  F013         	movff	i2printf@flag,??i2_printf
  6354  0009A6  0E03               	movlw	3
  6355  0009A8  1613               	andwf	??i2_printf,f,c
  6356  0009AA  B4D8               	btfsc	status,2,c
  6357  0009AC  D003               	goto	i2l2691
  6358                           
  6359                           ;doprnt.c: 1393: (putch('-') );
  6360  0009AE  0E2D               	movlw	45
  6361  0009B0  EC22  F00C         	call	i2_putch
  6362  0009B4                     i2l2691:
  6363                           
  6364                           ;doprnt.c: 1415: if(width)
  6365  0009B4  501E               	movf	i2printf@width,w,c
  6366  0009B6  101F               	iorwf	i2printf@width+1,w,c
  6367  0009B8  B4D8               	btfsc	status,2,c
  6368  0009BA  D01E               	goto	i2l2707
  6369                           
  6370                           ;doprnt.c: 1417: (putch('0') );
  6371                           
  6372                           ;doprnt.c: 1416: do
  6373  0009BC  0E30               	movlw	48
  6374  0009BE  EC22  F00C         	call	i2_putch
  6375                           
  6376                           ;doprnt.c: 1418: while(--width);
  6377  0009C2  061E               	decf	i2printf@width,f,c
  6378  0009C4  A0D8               	btfss	status,0,c
  6379  0009C6  061F               	decf	i2printf@width+1,f,c
  6380  0009C8  D7F5               	goto	i2l2691
  6381  0009CA                     i2l2697:
  6382                           
  6383                           ;doprnt.c: 1422: {
  6384                           ;doprnt.c: 1424: if(width
  6385                           ;doprnt.c: 1428: )
  6386  0009CA  501E               	movf	i2printf@width,w,c
  6387  0009CC  101F               	iorwf	i2printf@width+1,w,c
  6388  0009CE  B4D8               	btfsc	status,2,c
  6389  0009D0  D00A               	goto	i2l2703
  6390  0009D2                     i2l2699:
  6391                           
  6392                           ;doprnt.c: 1430: (putch(' ') );
  6393  0009D2  0E20               	movlw	32
  6394  0009D4  EC22  F00C         	call	i2_putch
  6395                           
  6396                           ;doprnt.c: 1431: while(--width);
  6397  0009D8  061E               	decf	i2printf@width,f,c
  6398  0009DA  A0D8               	btfss	status,0,c
  6399  0009DC  061F               	decf	i2printf@width+1,f,c
  6400  0009DE  501E               	movf	i2printf@width,w,c
  6401  0009E0  101F               	iorwf	i2printf@width+1,w,c
  6402  0009E2  A4D8               	btfss	status,2,c
  6403  0009E4  D7F6               	goto	i2l2699
  6404  0009E6                     i2l2703:
  6405                           
  6406                           ;doprnt.c: 1438: if(flag & 0x03)
  6407  0009E6  C01D  F013         	movff	i2printf@flag,??i2_printf
  6408  0009EA  0E03               	movlw	3
  6409  0009EC  1613               	andwf	??i2_printf,f,c
  6410  0009EE  B4D8               	btfsc	status,2,c
  6411  0009F0  D003               	goto	i2l2707
  6412                           
  6413                           ;doprnt.c: 1439: (putch('-') );
  6414  0009F2  0E2D               	movlw	45
  6415  0009F4  EC22  F00C         	call	i2_putch
  6416  0009F8                     i2l2707:
  6417                           
  6418                           ;doprnt.c: 1469: }
  6419                           ;doprnt.c: 1472: prec = c;
  6420  0009F8  C020  F01A         	movff	i2printf@c,i2printf@prec
  6421                           
  6422                           ;doprnt.c: 1474: while(prec--) {
  6423  0009FC  D050               	goto	i2l2721
  6424  0009FE                     i2l2709:
  6425                           
  6426                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6427  0009FE  501A               	movf	i2printf@prec,w,c
  6428  000A00  0D02               	mullw	2
  6429  000A02  0EF2               	movlw	low _dpowers
  6430  000A04  24F3               	addwf	prodl,w,c
  6431  000A06  6EF6               	movwf	tblptrl,c
  6432  000A08  0EFE               	movlw	high _dpowers
  6433  000A0A  20F4               	addwfc	prodh,w,c
  6434  000A0C  6EF7               	movwf	tblptrh,c
  6435  000A0E                     	if	0	;There are less than 3 active tblptr bytes
  6436  000A0E                     	endif
  6437  000A0E  0009               	tblrd		*+
  6438  000A10  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  6439  000A14  000A               	tblrd		*-
  6440  000A16  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  6441  000A1A  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  6442  000A1E  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  6443  000A22  EC97  F00A         	call	i2___lwdiv	;wreg free
  6444  000A26  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  6445  000A2A  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  6446  000A2E  0E00               	movlw	0
  6447  000A30  6E0B               	movwf	i2___lwmod@divisor+1,c
  6448  000A32  0E0A               	movlw	10
  6449  000A34  6E0A               	movwf	i2___lwmod@divisor,c
  6450  000A36  EC2D  F00B         	call	i2___lwmod	;wreg free
  6451  000A3A  5008               	movf	?i2___lwmod,w,c
  6452  000A3C  0F30               	addlw	48
  6453  000A3E  6E20               	movwf	i2printf@c,c
  6454                           
  6455                           ;doprnt.c: 1491: break;
  6456  000A40  D02B               	goto	i2l2719
  6457  000A42                     i2l2711:
  6458                           
  6459                           ;doprnt.c: 1499: {
  6460                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6461  000A42  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  6462  000A46  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  6463  000A4A  501A               	movf	i2printf@prec,w,c
  6464  000A4C  0D02               	mullw	2
  6465  000A4E  0EFC               	movlw	low _hexpowers
  6466  000A50  24F3               	addwf	prodl,w,c
  6467  000A52  6EF6               	movwf	tblptrl,c
  6468  000A54  0EFE               	movlw	high _hexpowers
  6469  000A56  20F4               	addwfc	prodh,w,c
  6470  000A58  6EF7               	movwf	tblptrh,c
  6471  000A5A                     	if	0	;There are less than 3 active tblptr bytes
  6472  000A5A                     	endif
  6473  000A5A  0009               	tblrd		*+
  6474  000A5C  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  6475  000A60  000A               	tblrd		*-
  6476  000A62  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  6477  000A66  EC97  F00A         	call	i2___lwdiv	;wreg free
  6478  000A6A  5001               	movf	?i2___lwdiv,w,c
  6479  000A6C  0B0F               	andlw	15
  6480  000A6E  6E17               	movwf	i2printf@idx,c
  6481                           
  6482                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6483  000A70  5017               	movf	i2printf@idx,w,c
  6484  000A72  0D01               	mullw	1
  6485  000A74  0E34               	movlw	low STR_17
  6486  000A76  24F3               	addwf	prodl,w,c
  6487  000A78  6EF6               	movwf	tblptrl,c
  6488  000A7A  0EFF               	movlw	high STR_17
  6489  000A7C  20F4               	addwfc	prodh,w,c
  6490  000A7E  6EF7               	movwf	tblptrh,c
  6491  000A80                     	if	0	;There are less than 3 active tblptr bytes
  6492  000A80                     	endif
  6493  000A80  0008               	tblrd		*
  6494  000A82  CFF5 F020          	movff	tablat,i2printf@c
  6495                           
  6496                           ;doprnt.c: 1523: }
  6497                           
  6498                           ;doprnt.c: 1508: }
  6499                           ;doprnt.c: 1510: break;
  6500  000A86  D008               	goto	i2l2719
  6501  000A88                     i2l2717:
  6502  000A88  501D               	movf	i2printf@flag,w,c
  6503  000A8A  0B80               	andlw	128
  6504                           
  6505                           ; Switch size 1, requested type "space"
  6506                           ; Number of cases is 2, Range of values is 0 to 128
  6507                           ; switch strategies available:
  6508                           ; Name         Instructions Cycles
  6509                           ; simple_byte            7     4 (average)
  6510                           ;	Chosen strategy is simple_byte
  6511  000A8C  0A00               	xorlw	0	; case 0
  6512  000A8E  B4D8               	btfsc	status,2,c
  6513  000A90  D7B6               	goto	i2l2709
  6514  000A92  0A80               	xorlw	128	; case 128
  6515  000A94  B4D8               	btfsc	status,2,c
  6516  000A96  D7D5               	goto	i2l2711
  6517  000A98                     i2l2719:
  6518                           
  6519                           ;doprnt.c: 1524: (putch(c) );
  6520  000A98  5020               	movf	i2printf@c,w,c
  6521  000A9A  EC22  F00C         	call	i2_putch
  6522  000A9E                     i2l2721:
  6523  000A9E  061A               	decf	i2printf@prec,f,c
  6524  000AA0  281A               	incf	i2printf@prec,w,c
  6525  000AA2  A4D8               	btfss	status,2,c
  6526  000AA4  D7F1               	goto	i2l2717
  6527  000AA6                     i2l2723:
  6528  000AA6  C00D  FFF6         	movff	i2printf@f,tblptrl
  6529  000AAA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6530  000AAE  4A0D               	infsnz	i2printf@f,f,c
  6531  000AB0  2A0E               	incf	i2printf@f+1,f,c
  6532  000AB2                     	if	0	;tblptru may be non-zero
  6533  000AB2                     	endif
  6534  000AB2                     	if	0	;tblptru may be non-zero
  6535  000AB2                     	endif
  6536  000AB2  0008               	tblrd		*
  6537  000AB4  CFF5 F020          	movff	tablat,i2printf@c
  6538  000AB8  5020               	movf	i2printf@c,w,c
  6539  000ABA  B4D8               	btfsc	status,2,c
  6540  000ABC  0012               	return	
  6541  000ABE  D67F               	goto	i2l2597
  6542  000AC0                     __end_ofi2_printf:
  6543                           	opt stack 0
  6544                           pclatu	equ	0xFFB
  6545                           pclath	equ	0xFFA
  6546                           tblptru	equ	0xFF8
  6547                           tblptrh	equ	0xFF7
  6548                           tblptrl	equ	0xFF6
  6549                           tablat	equ	0xFF5
  6550                           prodh	equ	0xFF4
  6551                           prodl	equ	0xFF3
  6552                           intcon	equ	0xFF2
  6553                           intcon3	equ	0xFF0
  6554                           postinc0	equ	0xFEE
  6555                           fsr0h	equ	0xFEA
  6556                           fsr0l	equ	0xFE9
  6557                           wreg	equ	0xFE8
  6558                           fsr1h	equ	0xFE2
  6559                           fsr1l	equ	0xFE1
  6560                           indf2	equ	0xFDF
  6561                           postinc2	equ	0xFDE
  6562                           postdec2	equ	0xFDD
  6563                           fsr2h	equ	0xFDA
  6564                           fsr2l	equ	0xFD9
  6565                           status	equ	0xFD8
  6566                           
  6567 ;; *************** function i2_putch *****************
  6568 ;; Defined at:
  6569 ;;		line 30 in file "lcd.c"
  6570 ;; Parameters:    Size  Location     Type
  6571 ;;  data            1    wreg     unsigned char 
  6572 ;; Auto vars:     Size  Location     Type
  6573 ;;  data            1    2[COMRAM] unsigned char 
  6574 ;; Return value:  Size  Location     Type
  6575 ;;                  1    wreg      void 
  6576 ;; Registers used:
  6577 ;;		wreg, status,2, status,0, cstack
  6578 ;; Tracked objects:
  6579 ;;		On entry : 0/0
  6580 ;;		On exit  : 0/0
  6581 ;;		Unchanged: 0/0
  6582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6584 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6586 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6587 ;;Total ram usage:        1 bytes
  6588 ;; Hardware stack levels used:    1
  6589 ;; Hardware stack levels required when called:    1
  6590 ;; This function calls:
  6591 ;;		i2_lcdNibble
  6592 ;; This function is called by:
  6593 ;;		i2_printf
  6594 ;; This function uses a non-reentrant model
  6595 ;;
  6596                           
  6597                           	psect	text29
  6598  001844                     __ptext29:
  6599                           	opt stack 0
  6600  001844                     i2_putch:
  6601                           	opt stack 22
  6602                           
  6603                           ;incstack = 0
  6604                           ;i2putch@data stored from wreg
  6605  001844  6E03               	movwf	i2putch@data,c
  6606                           
  6607                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  6608  001846  848C               	bsf	3980,2,c	;volatile
  6609                           
  6610                           ;lcd.c: 32: lcdNibble(data);
  6611  001848  5003               	movf	i2putch@data,w,c
  6612  00184A  EC43  F00A         	call	i2_lcdNibble
  6613  00184E  0012               	return		;funcret
  6614  001850                     __end_ofi2_putch:
  6615                           	opt stack 0
  6616                           pclatu	equ	0xFFB
  6617                           pclath	equ	0xFFA
  6618                           tblptru	equ	0xFF8
  6619                           tblptrh	equ	0xFF7
  6620                           tblptrl	equ	0xFF6
  6621                           tablat	equ	0xFF5
  6622                           prodh	equ	0xFF4
  6623                           prodl	equ	0xFF3
  6624                           intcon	equ	0xFF2
  6625                           intcon3	equ	0xFF0
  6626                           postinc0	equ	0xFEE
  6627                           fsr0h	equ	0xFEA
  6628                           fsr0l	equ	0xFE9
  6629                           wreg	equ	0xFE8
  6630                           fsr1h	equ	0xFE2
  6631                           fsr1l	equ	0xFE1
  6632                           indf2	equ	0xFDF
  6633                           postinc2	equ	0xFDE
  6634                           postdec2	equ	0xFDD
  6635                           fsr2h	equ	0xFDA
  6636                           fsr2l	equ	0xFD9
  6637                           status	equ	0xFD8
  6638                           
  6639 ;; *************** function i2_isdigit *****************
  6640 ;; Defined at:
  6641 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/isdigit.c"
  6642 ;; Parameters:    Size  Location     Type
  6643 ;;  c               1    wreg     unsigned char 
  6644 ;; Auto vars:     Size  Location     Type
  6645 ;;  c               1    2[COMRAM] unsigned char 
  6646 ;; Return value:  Size  Location     Type
  6647 ;;		None               void
  6648 ;; Registers used:
  6649 ;;		wreg, status,2, status,0
  6650 ;; Tracked objects:
  6651 ;;		On entry : 0/0
  6652 ;;		On exit  : 0/0
  6653 ;;		Unchanged: 0/0
  6654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6656 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6657 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6658 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6659 ;;Total ram usage:        3 bytes
  6660 ;; Hardware stack levels used:    1
  6661 ;; This function calls:
  6662 ;;		Nothing
  6663 ;; This function is called by:
  6664 ;;		i2_printf
  6665 ;; This function uses a non-reentrant model
  6666 ;;
  6667                           
  6668                           	psect	text30
  6669  0017D8                     __ptext30:
  6670                           	opt stack 0
  6671  0017D8                     i2_isdigit:
  6672                           	opt stack 23
  6673                           
  6674                           ;incstack = 0
  6675                           ;i2isdigit@c stored from wreg
  6676  0017D8  6E03               	movwf	i2isdigit@c,c
  6677  0017DA  0E00               	movlw	0
  6678  0017DC  6E02               	movwf	i2_isdigit$682,c
  6679  0017DE  0E3A               	movlw	58
  6680  0017E0  6003               	cpfslt	i2isdigit@c,c
  6681  0017E2  D005               	goto	i2l2383
  6682  0017E4  0E2F               	movlw	47
  6683  0017E6  6403               	cpfsgt	i2isdigit@c,c
  6684  0017E8  D002               	goto	i2l2383
  6685  0017EA  0E01               	movlw	1
  6686  0017EC  6E02               	movwf	i2_isdigit$682,c
  6687  0017EE                     i2l2383:
  6688  0017EE  C002  F001         	movff	i2_isdigit$682,??i2_isdigit
  6689  0017F2  3001               	rrcf	??i2_isdigit,w,c
  6690  0017F4  0012               	return	
  6691  0017F6                     __end_ofi2_isdigit:
  6692                           	opt stack 0
  6693                           pclatu	equ	0xFFB
  6694                           pclath	equ	0xFFA
  6695                           tblptru	equ	0xFF8
  6696                           tblptrh	equ	0xFF7
  6697                           tblptrl	equ	0xFF6
  6698                           tablat	equ	0xFF5
  6699                           prodh	equ	0xFF4
  6700                           prodl	equ	0xFF3
  6701                           intcon	equ	0xFF2
  6702                           intcon3	equ	0xFF0
  6703                           postinc0	equ	0xFEE
  6704                           fsr0h	equ	0xFEA
  6705                           fsr0l	equ	0xFE9
  6706                           wreg	equ	0xFE8
  6707                           fsr1h	equ	0xFE2
  6708                           fsr1l	equ	0xFE1
  6709                           indf2	equ	0xFDF
  6710                           postinc2	equ	0xFDE
  6711                           postdec2	equ	0xFDD
  6712                           fsr2h	equ	0xFDA
  6713                           fsr2l	equ	0xFD9
  6714                           status	equ	0xFD8
  6715                           
  6716 ;; *************** function i2___wmul *****************
  6717 ;; Defined at:
  6718 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/Umul16.c"
  6719 ;; Parameters:    Size  Location     Type
  6720 ;;  multiplier      2    0[COMRAM] unsigned int 
  6721 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6722 ;; Auto vars:     Size  Location     Type
  6723 ;;  __wmul          2    4[COMRAM] unsigned int 
  6724 ;; Return value:  Size  Location     Type
  6725 ;;                  2    0[COMRAM] unsigned int 
  6726 ;; Registers used:
  6727 ;;		wreg, status,2, status,0, prodl, prodh
  6728 ;; Tracked objects:
  6729 ;;		On entry : 0/0
  6730 ;;		On exit  : 0/0
  6731 ;;		Unchanged: 0/0
  6732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6733 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6734 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6736 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6737 ;;Total ram usage:        6 bytes
  6738 ;; Hardware stack levels used:    1
  6739 ;; This function calls:
  6740 ;;		Nothing
  6741 ;; This function is called by:
  6742 ;;		i2_printf
  6743 ;; This function uses a non-reentrant model
  6744 ;;
  6745                           
  6746                           	psect	text31
  6747  001792                     __ptext31:
  6748                           	opt stack 0
  6749  001792                     i2___wmul:
  6750                           	opt stack 23
  6751                           
  6752                           ;incstack = 0
  6753  001792  5001               	movf	i2___wmul@multiplier,w,c
  6754  001794  0203               	mulwf	i2___wmul@multiplicand,c
  6755  001796  CFF3 F005          	movff	prodl,i2___wmul@product
  6756  00179A  CFF4 F006          	movff	prodh,i2___wmul@product+1
  6757  00179E  5001               	movf	i2___wmul@multiplier,w,c
  6758  0017A0  0204               	mulwf	i2___wmul@multiplicand+1,c
  6759  0017A2  50F3               	movf	prodl,w,c
  6760  0017A4  2606               	addwf	i2___wmul@product+1,f,c
  6761  0017A6  5002               	movf	i2___wmul@multiplier+1,w,c
  6762  0017A8  0203               	mulwf	i2___wmul@multiplicand,c
  6763  0017AA  50F3               	movf	prodl,w,c
  6764  0017AC  2606               	addwf	i2___wmul@product+1,f,c
  6765  0017AE  C005  F001         	movff	i2___wmul@product,?i2___wmul
  6766  0017B2  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  6767  0017B6  0012               	return	
  6768  0017B8                     __end_ofi2___wmul:
  6769                           	opt stack 0
  6770                           pclatu	equ	0xFFB
  6771                           pclath	equ	0xFFA
  6772                           tblptru	equ	0xFF8
  6773                           tblptrh	equ	0xFF7
  6774                           tblptrl	equ	0xFF6
  6775                           tablat	equ	0xFF5
  6776                           prodh	equ	0xFF4
  6777                           prodl	equ	0xFF3
  6778                           intcon	equ	0xFF2
  6779                           intcon3	equ	0xFF0
  6780                           postinc0	equ	0xFEE
  6781                           fsr0h	equ	0xFEA
  6782                           fsr0l	equ	0xFE9
  6783                           wreg	equ	0xFE8
  6784                           fsr1h	equ	0xFE2
  6785                           fsr1l	equ	0xFE1
  6786                           indf2	equ	0xFDF
  6787                           postinc2	equ	0xFDE
  6788                           postdec2	equ	0xFDD
  6789                           fsr2h	equ	0xFDA
  6790                           fsr2l	equ	0xFD9
  6791                           status	equ	0xFD8
  6792                           
  6793 ;; *************** function i2___lwmod *****************
  6794 ;; Defined at:
  6795 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
  6796 ;; Parameters:    Size  Location     Type
  6797 ;;  dividend        2    7[COMRAM] unsigned int 
  6798 ;;  divisor         2    9[COMRAM] unsigned int 
  6799 ;; Auto vars:     Size  Location     Type
  6800 ;;  __lwmod         1   11[COMRAM] unsigned char 
  6801 ;; Return value:  Size  Location     Type
  6802 ;;                  2    7[COMRAM] unsigned int 
  6803 ;; Registers used:
  6804 ;;		wreg, status,2, status,0
  6805 ;; Tracked objects:
  6806 ;;		On entry : 0/0
  6807 ;;		On exit  : 0/0
  6808 ;;		Unchanged: 0/0
  6809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6810 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6811 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6813 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6814 ;;Total ram usage:        5 bytes
  6815 ;; Hardware stack levels used:    1
  6816 ;; This function calls:
  6817 ;;		Nothing
  6818 ;; This function is called by:
  6819 ;;		i2_printf
  6820 ;; This function uses a non-reentrant model
  6821 ;;
  6822                           
  6823                           	psect	text32
  6824  00165A                     __ptext32:
  6825                           	opt stack 0
  6826  00165A                     i2___lwmod:
  6827                           	opt stack 23
  6828                           
  6829                           ;incstack = 0
  6830  00165A  500A               	movf	i2___lwmod@divisor,w,c
  6831  00165C  100B               	iorwf	i2___lwmod@divisor+1,w,c
  6832  00165E  B4D8               	btfsc	status,2,c
  6833  001660  D018               	goto	i2l794
  6834  001662  0E01               	movlw	1
  6835  001664  6E0C               	movwf	i2___lwmod@counter,c
  6836  001666  D004               	goto	i2l2415
  6837  001668                     i2l2413:
  6838  001668  90D8               	bcf	status,0,c
  6839  00166A  360A               	rlcf	i2___lwmod@divisor,f,c
  6840  00166C  360B               	rlcf	i2___lwmod@divisor+1,f,c
  6841  00166E  2A0C               	incf	i2___lwmod@counter,f,c
  6842  001670                     i2l2415:
  6843  001670  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  6844  001672  D7FA               	goto	i2l2413
  6845  001674                     i2l2417:
  6846  001674  500A               	movf	i2___lwmod@divisor,w,c
  6847  001676  5C08               	subwf	i2___lwmod@dividend,w,c
  6848  001678  500B               	movf	i2___lwmod@divisor+1,w,c
  6849  00167A  5809               	subwfb	i2___lwmod@dividend+1,w,c
  6850  00167C  A0D8               	btfss	status,0,c
  6851  00167E  D004               	goto	i2l2421
  6852  001680  500A               	movf	i2___lwmod@divisor,w,c
  6853  001682  5E08               	subwf	i2___lwmod@dividend,f,c
  6854  001684  500B               	movf	i2___lwmod@divisor+1,w,c
  6855  001686  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  6856  001688                     i2l2421:
  6857  001688  90D8               	bcf	status,0,c
  6858  00168A  320B               	rrcf	i2___lwmod@divisor+1,f,c
  6859  00168C  320A               	rrcf	i2___lwmod@divisor,f,c
  6860  00168E  2E0C               	decfsz	i2___lwmod@counter,f,c
  6861  001690  D7F1               	goto	i2l2417
  6862  001692                     i2l794:
  6863  001692  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  6864  001696  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  6865  00169A  0012               	return		;funcret
  6866  00169C                     __end_ofi2___lwmod:
  6867                           	opt stack 0
  6868                           pclatu	equ	0xFFB
  6869                           pclath	equ	0xFFA
  6870                           tblptru	equ	0xFF8
  6871                           tblptrh	equ	0xFF7
  6872                           tblptrl	equ	0xFF6
  6873                           tablat	equ	0xFF5
  6874                           prodh	equ	0xFF4
  6875                           prodl	equ	0xFF3
  6876                           intcon	equ	0xFF2
  6877                           intcon3	equ	0xFF0
  6878                           postinc0	equ	0xFEE
  6879                           fsr0h	equ	0xFEA
  6880                           fsr0l	equ	0xFE9
  6881                           wreg	equ	0xFE8
  6882                           fsr1h	equ	0xFE2
  6883                           fsr1l	equ	0xFE1
  6884                           indf2	equ	0xFDF
  6885                           postinc2	equ	0xFDE
  6886                           postdec2	equ	0xFDD
  6887                           fsr2h	equ	0xFDA
  6888                           fsr2l	equ	0xFD9
  6889                           status	equ	0xFD8
  6890                           
  6891 ;; *************** function i2___lwdiv *****************
  6892 ;; Defined at:
  6893 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  6894 ;; Parameters:    Size  Location     Type
  6895 ;;  dividend        2    0[COMRAM] unsigned int 
  6896 ;;  divisor         2    2[COMRAM] unsigned int 
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  6899 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  6900 ;; Return value:  Size  Location     Type
  6901 ;;                  2    0[COMRAM] unsigned int 
  6902 ;; Registers used:
  6903 ;;		wreg, status,2, status,0
  6904 ;; Tracked objects:
  6905 ;;		On entry : 0/0
  6906 ;;		On exit  : 0/0
  6907 ;;		Unchanged: 0/0
  6908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6909 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6910 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6912 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6913 ;;Total ram usage:        7 bytes
  6914 ;; Hardware stack levels used:    1
  6915 ;; This function calls:
  6916 ;;		Nothing
  6917 ;; This function is called by:
  6918 ;;		i2_printf
  6919 ;; This function uses a non-reentrant model
  6920 ;;
  6921                           
  6922                           	psect	text33
  6923  00152E                     __ptext33:
  6924                           	opt stack 0
  6925  00152E                     i2___lwdiv:
  6926                           	opt stack 23
  6927                           
  6928                           ;incstack = 0
  6929  00152E  0E00               	movlw	0
  6930  001530  6E06               	movwf	i2___lwdiv@quotient+1,c
  6931  001532  0E00               	movlw	0
  6932  001534  6E05               	movwf	i2___lwdiv@quotient,c
  6933  001536  5003               	movf	i2___lwdiv@divisor,w,c
  6934  001538  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  6935  00153A  B4D8               	btfsc	status,2,c
  6936  00153C  D01C               	goto	i2l784
  6937  00153E  0E01               	movlw	1
  6938  001540  6E07               	movwf	i2___lwdiv@counter,c
  6939  001542  D004               	goto	i2l2395
  6940  001544                     i2l2393:
  6941  001544  90D8               	bcf	status,0,c
  6942  001546  3603               	rlcf	i2___lwdiv@divisor,f,c
  6943  001548  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  6944  00154A  2A07               	incf	i2___lwdiv@counter,f,c
  6945  00154C                     i2l2395:
  6946  00154C  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  6947  00154E  D7FA               	goto	i2l2393
  6948  001550                     i2l2397:
  6949  001550  90D8               	bcf	status,0,c
  6950  001552  3605               	rlcf	i2___lwdiv@quotient,f,c
  6951  001554  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  6952  001556  5003               	movf	i2___lwdiv@divisor,w,c
  6953  001558  5C01               	subwf	i2___lwdiv@dividend,w,c
  6954  00155A  5004               	movf	i2___lwdiv@divisor+1,w,c
  6955  00155C  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  6956  00155E  A0D8               	btfss	status,0,c
  6957  001560  D005               	goto	i2l2405
  6958  001562  5003               	movf	i2___lwdiv@divisor,w,c
  6959  001564  5E01               	subwf	i2___lwdiv@dividend,f,c
  6960  001566  5004               	movf	i2___lwdiv@divisor+1,w,c
  6961  001568  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  6962  00156A  8005               	bsf	i2___lwdiv@quotient,0,c
  6963  00156C                     i2l2405:
  6964  00156C  90D8               	bcf	status,0,c
  6965  00156E  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  6966  001570  3203               	rrcf	i2___lwdiv@divisor,f,c
  6967  001572  2E07               	decfsz	i2___lwdiv@counter,f,c
  6968  001574  D7ED               	goto	i2l2397
  6969  001576                     i2l784:
  6970  001576  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  6971  00157A  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  6972  00157E  0012               	return		;funcret
  6973  001580                     __end_ofi2___lwdiv:
  6974                           	opt stack 0
  6975                           pclatu	equ	0xFFB
  6976                           pclath	equ	0xFFA
  6977                           tblptru	equ	0xFF8
  6978                           tblptrh	equ	0xFF7
  6979                           tblptrl	equ	0xFF6
  6980                           tablat	equ	0xFF5
  6981                           prodh	equ	0xFF4
  6982                           prodl	equ	0xFF3
  6983                           intcon	equ	0xFF2
  6984                           intcon3	equ	0xFF0
  6985                           postinc0	equ	0xFEE
  6986                           fsr0h	equ	0xFEA
  6987                           fsr0l	equ	0xFE9
  6988                           wreg	equ	0xFE8
  6989                           fsr1h	equ	0xFE2
  6990                           fsr1l	equ	0xFE1
  6991                           indf2	equ	0xFDF
  6992                           postinc2	equ	0xFDE
  6993                           postdec2	equ	0xFDD
  6994                           fsr2h	equ	0xFDA
  6995                           fsr2l	equ	0xFD9
  6996                           status	equ	0xFD8
  6997                           
  6998 ;; *************** function i2_initLCD *****************
  6999 ;; Defined at:
  7000 ;;		line 14 in file "lcd.c"
  7001 ;; Parameters:    Size  Location     Type
  7002 ;;		None
  7003 ;; Auto vars:     Size  Location     Type
  7004 ;;		None
  7005 ;; Return value:  Size  Location     Type
  7006 ;;                  1    wreg      void 
  7007 ;; Registers used:
  7008 ;;		wreg, status,2, status,0, cstack
  7009 ;; Tracked objects:
  7010 ;;		On entry : 0/0
  7011 ;;		On exit  : 0/0
  7012 ;;		Unchanged: 0/0
  7013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7016 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7017 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7018 ;;Total ram usage:        1 bytes
  7019 ;; Hardware stack levels used:    1
  7020 ;; Hardware stack levels required when called:    2
  7021 ;; This function calls:
  7022 ;;		i2_lcdInst
  7023 ;; This function is called by:
  7024 ;;		_tot_sorted
  7025 ;;		_op_time
  7026 ;;		_tin_results
  7027 ;;		_pop_results
  7028 ;;		_keypressed
  7029 ;; This function uses a non-reentrant model
  7030 ;;
  7031                           
  7032                           	psect	text34
  7033  001614                     __ptext34:
  7034                           	opt stack 0
  7035  001614                     i2_initLCD:
  7036                           	opt stack 22
  7037                           
  7038                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  7039                           
  7040                           ;incstack = 0
  7041  001614  0E31               	movlw	49
  7042  001616  6E04               	movwf	??i2_initLCD& (0+255),c
  7043  001618  0EB2               	movlw	178
  7044  00161A                     i2u405_47:
  7045  00161A  2EE8               	decfsz	wreg,f,c
  7046  00161C  D7FE               	bra	i2u405_47
  7047  00161E  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  7048  001620  D7FC               	bra	i2u405_47
  7049  001622  D000               	nop2	
  7050                           
  7051                           ;lcd.c: 16: lcdInst(0b00110011);
  7052  001624  0E33               	movlw	51
  7053  001626  EC28  F00C         	call	i2_lcdInst
  7054                           
  7055                           ;lcd.c: 17: lcdInst(0b00110010);
  7056  00162A  0E32               	movlw	50
  7057  00162C  EC28  F00C         	call	i2_lcdInst
  7058                           
  7059                           ;lcd.c: 18: lcdInst(0b00101000);
  7060  001630  0E28               	movlw	40
  7061  001632  EC28  F00C         	call	i2_lcdInst
  7062                           
  7063                           ;lcd.c: 19: lcdInst(0b00001111);
  7064  001636  0E0F               	movlw	15
  7065  001638  EC28  F00C         	call	i2_lcdInst
  7066                           
  7067                           ;lcd.c: 20: lcdInst(0b00000110);
  7068  00163C  0E06               	movlw	6
  7069  00163E  EC28  F00C         	call	i2_lcdInst
  7070                           
  7071                           ;lcd.c: 21: lcdInst(0b00000001);
  7072  001642  0E01               	movlw	1
  7073  001644  EC28  F00C         	call	i2_lcdInst
  7074                           
  7075                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  7076  001648  0E31               	movlw	49
  7077  00164A  6E04               	movwf	??i2_initLCD& (0+255),c
  7078  00164C  0EB2               	movlw	178
  7079  00164E                     i2u406_47:
  7080  00164E  2EE8               	decfsz	wreg,f,c
  7081  001650  D7FE               	bra	i2u406_47
  7082  001652  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  7083  001654  D7FC               	bra	i2u406_47
  7084  001656  D000               	nop2	
  7085  001658  0012               	return		;funcret
  7086  00165A                     __end_ofi2_initLCD:
  7087                           	opt stack 0
  7088                           pclatu	equ	0xFFB
  7089                           pclath	equ	0xFFA
  7090                           tblptru	equ	0xFF8
  7091                           tblptrh	equ	0xFF7
  7092                           tblptrl	equ	0xFF6
  7093                           tablat	equ	0xFF5
  7094                           prodh	equ	0xFF4
  7095                           prodl	equ	0xFF3
  7096                           intcon	equ	0xFF2
  7097                           intcon3	equ	0xFF0
  7098                           postinc0	equ	0xFEE
  7099                           fsr0h	equ	0xFEA
  7100                           fsr0l	equ	0xFE9
  7101                           wreg	equ	0xFE8
  7102                           fsr1h	equ	0xFE2
  7103                           fsr1l	equ	0xFE1
  7104                           indf2	equ	0xFDF
  7105                           postinc2	equ	0xFDE
  7106                           postdec2	equ	0xFDD
  7107                           fsr2h	equ	0xFDA
  7108                           fsr2l	equ	0xFD9
  7109                           status	equ	0xFD8
  7110                           
  7111 ;; *************** function i2_lcdInst *****************
  7112 ;; Defined at:
  7113 ;;		line 25 in file "lcd.c"
  7114 ;; Parameters:    Size  Location     Type
  7115 ;;  data            1    wreg     unsigned char 
  7116 ;; Auto vars:     Size  Location     Type
  7117 ;;  data            1    2[COMRAM] unsigned char 
  7118 ;; Return value:  Size  Location     Type
  7119 ;;                  1    wreg      void 
  7120 ;; Registers used:
  7121 ;;		wreg, status,2, status,0, cstack
  7122 ;; Tracked objects:
  7123 ;;		On entry : 0/0
  7124 ;;		On exit  : 0/0
  7125 ;;		Unchanged: 0/0
  7126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7128 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7130 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7131 ;;Total ram usage:        1 bytes
  7132 ;; Hardware stack levels used:    1
  7133 ;; Hardware stack levels required when called:    1
  7134 ;; This function calls:
  7135 ;;		i2_lcdNibble
  7136 ;; This function is called by:
  7137 ;;		_tin_results
  7138 ;;		_pop_results
  7139 ;;		_keypressed
  7140 ;;		i2_initLCD
  7141 ;; This function uses a non-reentrant model
  7142 ;;
  7143                           
  7144                           	psect	text35
  7145  001850                     __ptext35:
  7146                           	opt stack 0
  7147  001850                     i2_lcdInst:
  7148                           	opt stack 23
  7149                           
  7150                           ;incstack = 0
  7151                           ;i2lcdInst@data stored from wreg
  7152  001850  6E03               	movwf	i2lcdInst@data,c
  7153                           
  7154                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  7155  001852  948C               	bcf	3980,2,c	;volatile
  7156                           
  7157                           ;lcd.c: 27: lcdNibble(data);
  7158  001854  5003               	movf	i2lcdInst@data,w,c
  7159  001856  EC43  F00A         	call	i2_lcdNibble
  7160  00185A  0012               	return		;funcret
  7161  00185C                     __end_ofi2_lcdInst:
  7162                           	opt stack 0
  7163                           pclatu	equ	0xFFB
  7164                           pclath	equ	0xFFA
  7165                           tblptru	equ	0xFF8
  7166                           tblptrh	equ	0xFF7
  7167                           tblptrl	equ	0xFF6
  7168                           tablat	equ	0xFF5
  7169                           prodh	equ	0xFF4
  7170                           prodl	equ	0xFF3
  7171                           intcon	equ	0xFF2
  7172                           intcon3	equ	0xFF0
  7173                           postinc0	equ	0xFEE
  7174                           fsr0h	equ	0xFEA
  7175                           fsr0l	equ	0xFE9
  7176                           wreg	equ	0xFE8
  7177                           fsr1h	equ	0xFE2
  7178                           fsr1l	equ	0xFE1
  7179                           indf2	equ	0xFDF
  7180                           postinc2	equ	0xFDE
  7181                           postdec2	equ	0xFDD
  7182                           fsr2h	equ	0xFDA
  7183                           fsr2l	equ	0xFD9
  7184                           status	equ	0xFD8
  7185                           
  7186 ;; *************** function i2_lcdNibble *****************
  7187 ;; Defined at:
  7188 ;;		line 35 in file "lcd.c"
  7189 ;; Parameters:    Size  Location     Type
  7190 ;;  data            1    wreg     unsigned char 
  7191 ;; Auto vars:     Size  Location     Type
  7192 ;;  data            1    1[COMRAM] unsigned char 
  7193 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  7194 ;; Return value:  Size  Location     Type
  7195 ;;                  1    wreg      void 
  7196 ;; Registers used:
  7197 ;;		wreg, status,2, status,0
  7198 ;; Tracked objects:
  7199 ;;		On entry : 0/0
  7200 ;;		On exit  : 0/0
  7201 ;;		Unchanged: 0/0
  7202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7204 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7206 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7207 ;;Total ram usage:        2 bytes
  7208 ;; Hardware stack levels used:    1
  7209 ;; This function calls:
  7210 ;;		Nothing
  7211 ;; This function is called by:
  7212 ;;		i2_lcdInst
  7213 ;;		i2_putch
  7214 ;; This function uses a non-reentrant model
  7215 ;;
  7216                           
  7217                           	psect	text36
  7218  001486                     __ptext36:
  7219                           	opt stack 0
  7220  001486                     i2_lcdNibble:
  7221                           	opt stack 22
  7222                           
  7223                           ;incstack = 0
  7224                           ;i2lcdNibble@data stored from wreg
  7225  001486  6E02               	movwf	i2lcdNibble@data,c
  7226                           
  7227                           ;lcd.c: 37: char temp = data & 0xF0;
  7228  001488  5002               	movf	i2lcdNibble@data,w,c
  7229  00148A  0BF0               	andlw	240
  7230  00148C  6E01               	movwf	i2lcdNibble@temp,c
  7231                           
  7232                           ;lcd.c: 38: LATD = LATD & 0x0F;
  7233  00148E  508C               	movf	3980,w,c	;volatile
  7234  001490  0B0F               	andlw	15
  7235  001492  6E8C               	movwf	3980,c	;volatile
  7236                           
  7237                           ;lcd.c: 39: LATD = temp | LATD;
  7238  001494  5001               	movf	i2lcdNibble@temp,w,c
  7239  001496  108C               	iorwf	3980,w,c	;volatile
  7240  001498  6E8C               	movwf	3980,c	;volatile
  7241                           
  7242                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  7243  00149A  968C               	bcf	3980,3,c	;volatile
  7244                           
  7245                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
  7246  00149C  0E14               	movlw	20
  7247  00149E                     i2u407_47:
  7248  00149E  2EE8               	decfsz	wreg,f,c
  7249  0014A0  D7FE               	bra	i2u407_47
  7250  0014A2  D000               	nop2	
  7251                           
  7252                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  7253  0014A4  868C               	bsf	3980,3,c	;volatile
  7254                           
  7255                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
  7256  0014A6  0E14               	movlw	20
  7257  0014A8                     i2u408_47:
  7258  0014A8  2EE8               	decfsz	wreg,f,c
  7259  0014AA  D7FE               	bra	i2u408_47
  7260  0014AC  D000               	nop2	
  7261                           
  7262                           ;lcd.c: 46: data = data << 4;
  7263  0014AE  3802               	swapf	i2lcdNibble@data,w,c
  7264  0014B0  0BF0               	andlw	240
  7265  0014B2  6E02               	movwf	i2lcdNibble@data,c
  7266                           
  7267                           ;lcd.c: 48: temp = data & 0xF0;
  7268  0014B4  5002               	movf	i2lcdNibble@data,w,c
  7269  0014B6  0BF0               	andlw	240
  7270  0014B8  6E01               	movwf	i2lcdNibble@temp,c
  7271                           
  7272                           ;lcd.c: 49: LATD = LATD & 0x0F;
  7273  0014BA  508C               	movf	3980,w,c	;volatile
  7274  0014BC  0B0F               	andlw	15
  7275  0014BE  6E8C               	movwf	3980,c	;volatile
  7276                           
  7277                           ;lcd.c: 50: LATD = temp | LATD;
  7278  0014C0  5001               	movf	i2lcdNibble@temp,w,c
  7279  0014C2  108C               	iorwf	3980,w,c	;volatile
  7280  0014C4  6E8C               	movwf	3980,c	;volatile
  7281                           
  7282                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  7283  0014C6  968C               	bcf	3980,3,c	;volatile
  7284                           
  7285                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
  7286  0014C8  0E14               	movlw	20
  7287  0014CA                     i2u409_47:
  7288  0014CA  2EE8               	decfsz	wreg,f,c
  7289  0014CC  D7FE               	bra	i2u409_47
  7290  0014CE  D000               	nop2	
  7291                           
  7292                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  7293  0014D0  868C               	bsf	3980,3,c	;volatile
  7294                           
  7295                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
  7296  0014D2  0E14               	movlw	20
  7297  0014D4                     i2u410_47:
  7298  0014D4  2EE8               	decfsz	wreg,f,c
  7299  0014D6  D7FE               	bra	i2u410_47
  7300  0014D8  D000               	nop2	
  7301  0014DA  0012               	return		;funcret
  7302  0014DC                     __end_ofi2_lcdNibble:
  7303                           	opt stack 0
  7304                           pclatu	equ	0xFFB
  7305                           pclath	equ	0xFFA
  7306                           tblptru	equ	0xFF8
  7307                           tblptrh	equ	0xFF7
  7308                           tblptrl	equ	0xFF6
  7309                           tablat	equ	0xFF5
  7310                           prodh	equ	0xFF4
  7311                           prodl	equ	0xFF3
  7312                           intcon	equ	0xFF2
  7313                           intcon3	equ	0xFF0
  7314                           postinc0	equ	0xFEE
  7315                           fsr0h	equ	0xFEA
  7316                           fsr0l	equ	0xFE9
  7317                           wreg	equ	0xFE8
  7318                           fsr1h	equ	0xFE2
  7319                           fsr1l	equ	0xFE1
  7320                           indf2	equ	0xFDF
  7321                           postinc2	equ	0xFDE
  7322                           postdec2	equ	0xFDD
  7323                           fsr2h	equ	0xFDA
  7324                           fsr2l	equ	0xFD9
  7325                           status	equ	0xFD8
  7326                           
  7327 ;; *************** function i2___awdiv *****************
  7328 ;; Defined at:
  7329 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awdiv.c"
  7330 ;; Parameters:    Size  Location     Type
  7331 ;;  dividend        2    0[COMRAM] int 
  7332 ;;  divisor         2    2[COMRAM] int 
  7333 ;; Auto vars:     Size  Location     Type
  7334 ;;  __awdiv         2    6[COMRAM] int 
  7335 ;;  __awdiv         1    5[COMRAM] unsigned char 
  7336 ;;  __awdiv         1    4[COMRAM] unsigned char 
  7337 ;; Return value:  Size  Location     Type
  7338 ;;                  2    0[COMRAM] int 
  7339 ;; Registers used:
  7340 ;;		wreg, status,2, status,0
  7341 ;; Tracked objects:
  7342 ;;		On entry : 0/0
  7343 ;;		On exit  : 0/0
  7344 ;;		Unchanged: 0/0
  7345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7346 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7347 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7349 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7350 ;;Total ram usage:        8 bytes
  7351 ;; Hardware stack levels used:    1
  7352 ;; This function calls:
  7353 ;;		Nothing
  7354 ;; This function is called by:
  7355 ;;		_op_time
  7356 ;; This function uses a non-reentrant model
  7357 ;;
  7358                           
  7359                           	psect	text37
  7360  001194                     __ptext37:
  7361                           	opt stack 0
  7362  001194                     i2___awdiv:
  7363                           	opt stack 23
  7364                           
  7365                           ;incstack = 0
  7366  001194  0E00               	movlw	0
  7367  001196  6E06               	movwf	i2___awdiv@sign,c
  7368  001198  AE04               	btfss	i2___awdiv@divisor+1,7,c
  7369  00119A  D006               	goto	i2l2733
  7370  00119C  6C03               	negf	i2___awdiv@divisor,c
  7371  00119E  1E04               	comf	i2___awdiv@divisor+1,f,c
  7372  0011A0  B0D8               	btfsc	status,0,c
  7373  0011A2  2A04               	incf	i2___awdiv@divisor+1,f,c
  7374  0011A4  0E01               	movlw	1
  7375  0011A6  6E06               	movwf	i2___awdiv@sign,c
  7376  0011A8                     i2l2733:
  7377  0011A8  AE02               	btfss	i2___awdiv@dividend+1,7,c
  7378  0011AA  D006               	goto	i2l2739
  7379  0011AC  6C01               	negf	i2___awdiv@dividend,c
  7380  0011AE  1E02               	comf	i2___awdiv@dividend+1,f,c
  7381  0011B0  B0D8               	btfsc	status,0,c
  7382  0011B2  2A02               	incf	i2___awdiv@dividend+1,f,c
  7383  0011B4  0E01               	movlw	1
  7384  0011B6  1A06               	xorwf	i2___awdiv@sign,f,c
  7385  0011B8                     i2l2739:
  7386  0011B8  0E00               	movlw	0
  7387  0011BA  6E08               	movwf	i2___awdiv@quotient+1,c
  7388  0011BC  0E00               	movlw	0
  7389  0011BE  6E07               	movwf	i2___awdiv@quotient,c
  7390  0011C0  5003               	movf	i2___awdiv@divisor,w,c
  7391  0011C2  1004               	iorwf	i2___awdiv@divisor+1,w,c
  7392  0011C4  B4D8               	btfsc	status,2,c
  7393  0011C6  D01C               	goto	i2l2761
  7394  0011C8  0E01               	movlw	1
  7395  0011CA  6E05               	movwf	i2___awdiv@counter,c
  7396  0011CC  D004               	goto	i2l2747
  7397  0011CE                     i2l2745:
  7398  0011CE  90D8               	bcf	status,0,c
  7399  0011D0  3603               	rlcf	i2___awdiv@divisor,f,c
  7400  0011D2  3604               	rlcf	i2___awdiv@divisor+1,f,c
  7401  0011D4  2A05               	incf	i2___awdiv@counter,f,c
  7402  0011D6                     i2l2747:
  7403  0011D6  AE04               	btfss	i2___awdiv@divisor+1,7,c
  7404  0011D8  D7FA               	goto	i2l2745
  7405  0011DA                     i2l2749:
  7406  0011DA  90D8               	bcf	status,0,c
  7407  0011DC  3607               	rlcf	i2___awdiv@quotient,f,c
  7408  0011DE  3608               	rlcf	i2___awdiv@quotient+1,f,c
  7409  0011E0  5003               	movf	i2___awdiv@divisor,w,c
  7410  0011E2  5C01               	subwf	i2___awdiv@dividend,w,c
  7411  0011E4  5004               	movf	i2___awdiv@divisor+1,w,c
  7412  0011E6  5802               	subwfb	i2___awdiv@dividend+1,w,c
  7413  0011E8  A0D8               	btfss	status,0,c
  7414  0011EA  D005               	goto	i2l2757
  7415  0011EC  5003               	movf	i2___awdiv@divisor,w,c
  7416  0011EE  5E01               	subwf	i2___awdiv@dividend,f,c
  7417  0011F0  5004               	movf	i2___awdiv@divisor+1,w,c
  7418  0011F2  5A02               	subwfb	i2___awdiv@dividend+1,f,c
  7419  0011F4  8007               	bsf	i2___awdiv@quotient,0,c
  7420  0011F6                     i2l2757:
  7421  0011F6  90D8               	bcf	status,0,c
  7422  0011F8  3204               	rrcf	i2___awdiv@divisor+1,f,c
  7423  0011FA  3203               	rrcf	i2___awdiv@divisor,f,c
  7424  0011FC  2E05               	decfsz	i2___awdiv@counter,f,c
  7425  0011FE  D7ED               	goto	i2l2749
  7426  001200                     i2l2761:
  7427  001200  5006               	movf	i2___awdiv@sign,w,c
  7428  001202  B4D8               	btfsc	status,2,c
  7429  001204  D004               	goto	i2l2765
  7430  001206  6C07               	negf	i2___awdiv@quotient,c
  7431  001208  1E08               	comf	i2___awdiv@quotient+1,f,c
  7432  00120A  B0D8               	btfsc	status,0,c
  7433  00120C  2A08               	incf	i2___awdiv@quotient+1,f,c
  7434  00120E                     i2l2765:
  7435  00120E  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
  7436  001212  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  7437  001216  0012               	return	
  7438  001218                     __end_ofi2___awdiv:
  7439                           	opt stack 0
  7440                           pclatu	equ	0xFFB
  7441                           pclath	equ	0xFFA
  7442                           tblptru	equ	0xFF8
  7443                           tblptrh	equ	0xFF7
  7444                           tblptrl	equ	0xFF6
  7445                           tablat	equ	0xFF5
  7446                           prodh	equ	0xFF4
  7447                           prodl	equ	0xFF3
  7448                           intcon	equ	0xFF2
  7449                           intcon3	equ	0xFF0
  7450                           postinc0	equ	0xFEE
  7451                           fsr0h	equ	0xFEA
  7452                           fsr0l	equ	0xFE9
  7453                           wreg	equ	0xFE8
  7454                           fsr1h	equ	0xFE2
  7455                           fsr1l	equ	0xFE1
  7456                           indf2	equ	0xFDF
  7457                           postinc2	equ	0xFDE
  7458                           postdec2	equ	0xFDD
  7459                           fsr2h	equ	0xFDA
  7460                           fsr2l	equ	0xFD9
  7461                           status	equ	0xFD8
  7462                           
  7463 ;; *************** function ___awmod *****************
  7464 ;; Defined at:
  7465 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awmod.c"
  7466 ;; Parameters:    Size  Location     Type
  7467 ;;  dividend        2    0[COMRAM] int 
  7468 ;;  divisor         2    2[COMRAM] int 
  7469 ;; Auto vars:     Size  Location     Type
  7470 ;;  sign            1    5[COMRAM] unsigned char 
  7471 ;;  counter         1    4[COMRAM] unsigned char 
  7472 ;; Return value:  Size  Location     Type
  7473 ;;                  2    0[COMRAM] int 
  7474 ;; Registers used:
  7475 ;;		wreg, status,2, status,0
  7476 ;; Tracked objects:
  7477 ;;		On entry : 0/0
  7478 ;;		On exit  : 0/0
  7479 ;;		Unchanged: 0/0
  7480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7481 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7482 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7484 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7485 ;;Total ram usage:        6 bytes
  7486 ;; Hardware stack levels used:    1
  7487 ;; This function calls:
  7488 ;;		Nothing
  7489 ;; This function is called by:
  7490 ;;		_op_time
  7491 ;; This function uses a non-reentrant model
  7492 ;;
  7493                           
  7494                           	psect	text38
  7495  001290                     __ptext38:
  7496                           	opt stack 0
  7497  001290                     ___awmod:
  7498                           	opt stack 23
  7499                           
  7500                           ;incstack = 0
  7501  001290  0E00               	movlw	0
  7502  001292  6E06               	movwf	___awmod@sign,c
  7503  001294  AE02               	btfss	___awmod@dividend+1,7,c
  7504  001296  D006               	goto	i2l2531
  7505  001298  6C01               	negf	___awmod@dividend,c
  7506  00129A  1E02               	comf	___awmod@dividend+1,f,c
  7507  00129C  B0D8               	btfsc	status,0,c
  7508  00129E  2A02               	incf	___awmod@dividend+1,f,c
  7509  0012A0  0E01               	movlw	1
  7510  0012A2  6E06               	movwf	___awmod@sign,c
  7511  0012A4                     i2l2531:
  7512  0012A4  AE04               	btfss	___awmod@divisor+1,7,c
  7513  0012A6  D004               	goto	i2l2535
  7514  0012A8  6C03               	negf	___awmod@divisor,c
  7515  0012AA  1E04               	comf	___awmod@divisor+1,f,c
  7516  0012AC  B0D8               	btfsc	status,0,c
  7517  0012AE  2A04               	incf	___awmod@divisor+1,f,c
  7518  0012B0                     i2l2535:
  7519  0012B0  5003               	movf	___awmod@divisor,w,c
  7520  0012B2  1004               	iorwf	___awmod@divisor+1,w,c
  7521  0012B4  B4D8               	btfsc	status,2,c
  7522  0012B6  D018               	goto	i2l2551
  7523  0012B8  0E01               	movlw	1
  7524  0012BA  6E05               	movwf	___awmod@counter,c
  7525  0012BC  D004               	goto	i2l2541
  7526  0012BE                     i2l2539:
  7527  0012BE  90D8               	bcf	status,0,c
  7528  0012C0  3603               	rlcf	___awmod@divisor,f,c
  7529  0012C2  3604               	rlcf	___awmod@divisor+1,f,c
  7530  0012C4  2A05               	incf	___awmod@counter,f,c
  7531  0012C6                     i2l2541:
  7532  0012C6  AE04               	btfss	___awmod@divisor+1,7,c
  7533  0012C8  D7FA               	goto	i2l2539
  7534  0012CA                     i2l2543:
  7535  0012CA  5003               	movf	___awmod@divisor,w,c
  7536  0012CC  5C01               	subwf	___awmod@dividend,w,c
  7537  0012CE  5004               	movf	___awmod@divisor+1,w,c
  7538  0012D0  5802               	subwfb	___awmod@dividend+1,w,c
  7539  0012D2  A0D8               	btfss	status,0,c
  7540  0012D4  D004               	goto	i2l2547
  7541  0012D6  5003               	movf	___awmod@divisor,w,c
  7542  0012D8  5E01               	subwf	___awmod@dividend,f,c
  7543  0012DA  5004               	movf	___awmod@divisor+1,w,c
  7544  0012DC  5A02               	subwfb	___awmod@dividend+1,f,c
  7545  0012DE                     i2l2547:
  7546  0012DE  90D8               	bcf	status,0,c
  7547  0012E0  3204               	rrcf	___awmod@divisor+1,f,c
  7548  0012E2  3203               	rrcf	___awmod@divisor,f,c
  7549  0012E4  2E05               	decfsz	___awmod@counter,f,c
  7550  0012E6  D7F1               	goto	i2l2543
  7551  0012E8                     i2l2551:
  7552  0012E8  5006               	movf	___awmod@sign,w,c
  7553  0012EA  B4D8               	btfsc	status,2,c
  7554  0012EC  D004               	goto	i2l2555
  7555  0012EE  6C01               	negf	___awmod@dividend,c
  7556  0012F0  1E02               	comf	___awmod@dividend+1,f,c
  7557  0012F2  B0D8               	btfsc	status,0,c
  7558  0012F4  2A02               	incf	___awmod@dividend+1,f,c
  7559  0012F6                     i2l2555:
  7560  0012F6  C001  F001         	movff	___awmod@dividend,?___awmod
  7561  0012FA  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  7562  0012FE  0012               	return	
  7563  001300                     __end_of___awmod:
  7564                           	opt stack 0
  7565                           pclatu	equ	0xFFB
  7566                           pclath	equ	0xFFA
  7567                           tblptru	equ	0xFF8
  7568                           tblptrh	equ	0xFF7
  7569                           tblptrl	equ	0xFF6
  7570                           tablat	equ	0xFF5
  7571                           prodh	equ	0xFF4
  7572                           prodl	equ	0xFF3
  7573                           intcon	equ	0xFF2
  7574                           intcon3	equ	0xFF0
  7575                           postinc0	equ	0xFEE
  7576                           fsr0h	equ	0xFEA
  7577                           fsr0l	equ	0xFE9
  7578                           wreg	equ	0xFE8
  7579                           fsr1h	equ	0xFE2
  7580                           fsr1l	equ	0xFE1
  7581                           indf2	equ	0xFDF
  7582                           postinc2	equ	0xFDE
  7583                           postdec2	equ	0xFDD
  7584                           fsr2h	equ	0xFDA
  7585                           fsr2l	equ	0xFD9
  7586                           status	equ	0xFD8
  7587                           pclatu	equ	0xFFB
  7588                           pclath	equ	0xFFA
  7589                           tblptru	equ	0xFF8
  7590                           tblptrh	equ	0xFF7
  7591                           tblptrl	equ	0xFF6
  7592                           tablat	equ	0xFF5
  7593                           prodh	equ	0xFF4
  7594                           prodl	equ	0xFF3
  7595                           intcon	equ	0xFF2
  7596                           intcon3	equ	0xFF0
  7597                           postinc0	equ	0xFEE
  7598                           fsr0h	equ	0xFEA
  7599                           fsr0l	equ	0xFE9
  7600                           wreg	equ	0xFE8
  7601                           fsr1h	equ	0xFE2
  7602                           fsr1l	equ	0xFE1
  7603                           indf2	equ	0xFDF
  7604                           postinc2	equ	0xFDE
  7605                           postdec2	equ	0xFDD
  7606                           fsr2h	equ	0xFDA
  7607                           fsr2l	equ	0xFD9
  7608                           status	equ	0xFD8
  7609                           
  7610                           	psect	rparam
  7611  0000                     pclatu	equ	0xFFB
  7612                           pclath	equ	0xFFA
  7613                           tblptru	equ	0xFF8
  7614                           tblptrh	equ	0xFF7
  7615                           tblptrl	equ	0xFF6
  7616                           tablat	equ	0xFF5
  7617                           prodh	equ	0xFF4
  7618                           prodl	equ	0xFF3
  7619                           intcon	equ	0xFF2
  7620                           intcon3	equ	0xFF0
  7621                           postinc0	equ	0xFEE
  7622                           fsr0h	equ	0xFEA
  7623                           fsr0l	equ	0xFE9
  7624                           wreg	equ	0xFE8
  7625                           fsr1h	equ	0xFE2
  7626                           fsr1l	equ	0xFE1
  7627                           indf2	equ	0xFDF
  7628                           postinc2	equ	0xFDE
  7629                           postdec2	equ	0xFDD
  7630                           fsr2h	equ	0xFDA
  7631                           fsr2l	equ	0xFD9
  7632                           status	equ	0xFD8
  7633                           
  7634                           	psect	temp
  7635  00004B                     btemp:
  7636                           	opt stack 0
  7637  00004B                     	ds	1
  7638  0000                     int$flags	set	btemp
  7639                           pclatu	equ	0xFFB
  7640                           pclath	equ	0xFFA
  7641                           tblptru	equ	0xFF8
  7642                           tblptrh	equ	0xFF7
  7643                           tblptrl	equ	0xFF6
  7644                           tablat	equ	0xFF5
  7645                           prodh	equ	0xFF4
  7646                           prodl	equ	0xFF3
  7647                           intcon	equ	0xFF2
  7648                           intcon3	equ	0xFF0
  7649                           postinc0	equ	0xFEE
  7650                           fsr0h	equ	0xFEA
  7651                           fsr0l	equ	0xFE9
  7652                           wreg	equ	0xFE8
  7653                           fsr1h	equ	0xFE2
  7654                           fsr1l	equ	0xFE1
  7655                           indf2	equ	0xFDF
  7656                           postinc2	equ	0xFDE
  7657                           postdec2	equ	0xFDD
  7658                           fsr2h	equ	0xFDA
  7659                           fsr2l	equ	0xFD9
  7660                           status	equ	0xFD8


Data Sizes:
    Strings     244
    Constant    42
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     62      74
    BANK0           128     73      75
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_16(CODE[17]), STR_15(CODE[15]), STR_14(CODE[13]), STR_13(CODE[8]), 
		 -> STR_12(CODE[17]), STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[9]), 
		 -> STR_8(CODE[13]), STR_7(CODE[2]), STR_6(CODE[13]), STR_5(CODE[15]), 
		 -> STR_4(CODE[15]), STR_3(CODE[17]), STR_2(CODE[22]), STR_1(CODE[19]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _keypressed in COMRAM

    _keypressed->i2_printf
    _tot_sorted->i2_printf
    _tin_results->i2_printf
    _pop_results->i2_printf
    _op_time->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _main->_Operate
    _set_time->_I2C_Master_Write
    _results->_printf
    _Operate->_startSorting
    _startSorting->_printf
    _printf->___wmul
    _putch->_lcdNibble
    ___wmul->___awdiv
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   23109
                    _I2C_Master_Init
                            _Operate
                            _initLCD
                            _results
                           _set_time
 ---------------------------------------------------------------------------------
 (1) _set_time                                             1     1      0     823
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _results                                             10    10      0    5750
                                             36 BANK0     10    10      0
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Operate                                             35    33      2   15838
                                             40 BANK0     33    31      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            ___awdiv
                             ___wmul
                            _initLCD
                            _lcdInst
                             _printf
                       _startSorting
 ---------------------------------------------------------------------------------
 (2) _startSorting                                         4     4      0    5713
                                             36 BANK0      4     4      0
                            _initLCD
                     _initialization
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    4983
                                             14 BANK0     22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1316
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _initialization                                       5     5      0     204
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1145
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     724
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      65
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     503
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     395
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _keypressed                                          30    30      0   12860
                                             32 COMRAM    30    30      0
                            _op_time
                        _pop_results
                        _tin_results
                         _tot_sorted
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _tot_sorted                                           0     0      0    2203
                          i2_initLCD
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _tin_results                                          0     0      0    2338
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _pop_results                                          0     0      0    2338
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _op_time                                              0     0      0    2979
                            ___awmod
                          i2___awdiv
                          i2_initLCD
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) i2_printf                                            29    23      6    2068
                                             12 COMRAM    20    14      6
                            ___awmod (ARG)
                          i2___awdiv (ARG)
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (7) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) i2___awdiv                                            8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) ___awmod                                              6     2      4     424
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Operate
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___awdiv
     ___wmul
       ___awdiv (ARG)
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
     _startSorting
       _initLCD
         _lcdInst
           _lcdNibble
       _initialization
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
           ___awdiv (ARG)
         _isdigit
         _putch
           _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _results
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _set_time
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _keypressed (ROOT)
   _op_time
     ___awmod
     i2___awdiv
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   _pop_results
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   _tin_results
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   _tot_sorted
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     ___awmod (ARG)
     i2___awdiv (ARG)
     i2___lwdiv (ARG)
     i2___lwmod (ARG)
       i2___lwdiv (ARG)
     i2___wmul (ARG)
     i2_isdigit (ARG)
     i2_putch (ARG)
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     49      4B       5       58.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3E      4A       1       58.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      95      34        0.0%
DATA                 0      0      95       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Feb 28 22:29:32 2017

                       l34 1810               ___awdiv@sign 0085        ___wmul@multiplicand 008A  
       i2___lwdiv@dividend 0001                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
              __CFG_OSC$HS 000000                        l251 0D90                        l255 0E24  
                      l339 051E                        l731 105E                        l299 0134  
                      l784 1286                        l794 13C0               __CFG_CPB$OFF 000000  
                      _PEN 007E2A               __CFG_CPD$OFF 000000                        _SEN 007E28  
                      _tot 003F               ___awmod@sign 0006                        prod 000FF3  
                      wreg 000FE8               __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000  
                     l3215 1236                       l3311 0572                       l3401 1114  
                     l3217 1242                       l3313 0578                       l3411 1144  
                     l3227 1278                       l3219 1248                       l3243 13B2  
                     l3235 137C                       l3307 0556                       l3501 0F52  
                     l3421 1174                       l3405 1134                       l3237 1388  
                     l3325 05AE                       l3341 05EA                       l3511 0F88  
                     l3503 0F58                       l3415 1164                       l3407 113A  
                     l3239 138E                       l3327 05B4                       l3343 05FC  
                     l3271 0422                       l3417 116A                       l3361 067A  
                     l3353 0656                       l3273 0434                       l3531 0FF2  
                     l3515 0F96                       l3355 0660                       l3291 04E6  
                     l3283 046E                       l3267 040E                       l3603 010A  
                     l3541 104C                       l3533 0FF8                       l3445 1760  
                     l3381 0722                       l3373 06BC                       l3349 061E  
                     l3277 043E                       l3461 109A                       l3519 0FAA  
                     l3199 1788                       l3391 078A                       l3367 0696  
                     l3295 04EC                       l3471 10DA                       l3607 012A  
                     l3529 0FE2                       l3369 06A2                       l3377 06D0  
                     l3393 0796                       l3465 10BA                       l3457 1090  
                     l3617 0170                       l3713 0E52                       l3561 145A  
                     l3379 06D6                       l3387 0770                       l3475 10E4  
                     l3635 01BC                       l3731 0EBE                       l3493 0F28  
                     l3397 110A                       l3389 0782                       l3645 01E6  
                     l3717 0E72                       l3709 0E48                       l3557 1450  
                     l3487 0F12                       l3639 01C6                       l3583 0068  
                     l3575 0022                       l3735 0EDE                       l3727 0EB4  
                     l3567 1480                       l3665 03E2                       l3737 0EE8  
                     l3499 0F46                       l3667 03F6                       l3579 005E  
                     l3691 0DF4                       l3683 0DCA                       l3589 0088  
                     l3693 0DFA                       l3757 151C                       l3599 0100  
                     l3687 0DD4                       l3697 0E04                       STR_1 FF21  
                     STR_2 FF0B                       STR_3 FF89                       STR_4 FFB8  
                     STR_5 FFA9                       STR_6 FFE1                       STR_7 FFD2  
                     STR_8 FFD4                       STR_9 FFEE               _startSorting 1070  
                     _LATB 000F8A                       _LATC 000F8B                       _LATD 000F8C  
                     u3390 175E                       u3545 13FA                       u3807 0ECC  
                     u3817 0118                       u3907 132A                       u3827 10A8  
                     _RCEN 007E2B                       u3917 1356                       u3837 10F2  
                     u3927 1360                       u3847 1122                       u3857 1152  
                     u3777 0DE2                       u3867 1182                       u3787 0E12  
                     u3877 1588                       u3797 0E60                       u3887 15BE  
                     u3897 1320                       _RSEN 007E29           ??_initialization 0080  
                     _main 14DC                       _keys FEE1                       fsr0h 000FEA  
                     fsr1h 000FE2         i2___lwdiv@quotient 0005                       fsr2h 000FDA  
                     fsr0l 000FE9                       indf2 000FDF                       fsr1l 000FE1  
                     fsr2l 000FD9                       btemp 004B                       prodh 000FF4  
                     prodl 000FF3                       start 000E              __CFG_IESO$OFF 000000  
          __end_ofi2_putch 1850              __CFG_MCLRE$ON 000000               ___param_bank 000000  
              i2_lcdNibble 1486               _total_second 00C9            __end_of_Operate 0400  
         ?_I2C_Master_Init 008D           ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001  
         ?_I2C_Master_Stop 0001                      ?_main 0001                      _ACKEN 007E2C  
                    _ACKDT 007E2D            __end_of___awdiv 0FB4                      STR_10 FF56  
                    STR_11 FF67                      STR_12 FF78                      STR_13 FFF7  
                    STR_14 FFC7                      STR_15 FF9A                      STR_16 FF45  
                    STR_17 FF34            __end_of___awmod 1300            __end_of___lldiv 1070  
          ___awdiv@divisor 0082            __end_of___lwdiv 1290            __end_of___lwmod 13CA  
                    i2l215 0D4A                      i2l339 08A0                      i2l784 1576  
                    i2l794 1692            ___awdiv@counter 0084                      _PORTB 000F81  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
                    _TRISD 000F95                      _TRISE 000F96              __CFG_PWRT$OFF 000000  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000            __end_of_lcdInst 1844             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000            __end_of_initLCD 15CA             __CFG_EBTRB$OFF 000000  
               i2isdigit@c 0003            __end_of_dpowers FEFC            __end_of_isdigit 1792  
                    _putch 1824            __end_of_op_time 1614                      pclath 000FFA  
                    tablat 000FF5            __end_of_results 0EF6           __end_ofi2___wmul 17B8  
                    status 000FD8         __size_ofi2___awdiv 0084             __CFG_PBADEN$ON 000000  
            i2printf@width 001E           __end_ofi2_printf 0AC0         __size_ofi2___lwdiv 0052  
       __size_ofi2___lwmod 0042          startSorting@i_277 00A7            __initialization 17B8  
       __size_ofi2_lcdInst 000C               __end_of_main 152E               __end_of_keys FEF2  
               i2printf@ap 0018         __size_ofi2_initLCD 0046         __size_ofi2_isdigit 001E  
                   ??_main 00C9              __activetblptr 000002          ?_I2C_Master_Start 0001  
        ?_I2C_Master_Write 0081         ??_I2C_Master_Start 0081                     _ADCON0 000FC2  
                   _ADCON1 000FC1         ??_I2C_Master_Write 0083           ___awdiv@dividend 0080  
          i2lcdNibble@data 0002                     ?_putch 0001            i2lcdNibble@temp 0001  
                   _INT1IE 007F83                     _INT1IF 007F80                     i2l3103 0C5E  
                   i2l3031 0B3A                     i2l3113 0C86                     i2l3105 0C62  
                   i2l3041 0B62                     i2l3115 0C8A                     i2l3123 0CAE  
                   i2l3051 0B8A                     i2l3035 0B56                     i2l3027 0B32  
                   i2l2405 156C                     i2l2421 1688                     i2l2413 1668  
                   i2l3133 0CC6                     i2l3109 0C6A                     i2l3061 0BB6  
                   i2l3045 0B7E                     i2l3037 0B5A                     i2l2415 1670  
                   i2l3143 0CEE                     i2l3119 0C92                     i2l3071 0BDE  
                   i2l3047 0B82                     i2l3055 0BA6                     i2l2417 1674  
                   i2l2601 07CE                     i2l3153 0D16                     i2l3137 0CE2  
                   i2l3129 0CBE                     i2l3081 0C06                     i2l3065 0BBE  
                   i2l3161 0D42                     i2l2531 12A4                     i2l2603 07DC  
                   i2l3147 0D0A                     i2l3139 0CE6                     i2l3075 0BE6  
                   i2l2541 12C6                     i2l2621 086E                     i2l2613 0810  
                   i2l3149 0D0E                     i2l3157 0D32                     i2l3085 0C0E  
                   i2l3069 0BDA                     i2l2543 12CA                     i2l2551 12E8  
                   i2l2535 12B0                     i2l2383 17EE                     i2l2711 0A42  
                   i2l2703 09E6                     i2l2607 07E2                     i2l3095 0C3A  
                   i2l3079 0C02                     i2l2393 1544                     i2l2721 0A9E  
                   i2l2641 08E8                     i2l2625 0872                     i2l3089 0C2A  
                   i2l2555 12F6                     i2l2547 12DE                     i2l2539 12BE  
                   i2l2395 154C                     i2l2707 09F8                     i2l2643 08EC  
                   i2l2723 0AA6                     i2l3099 0C42                     i2l2733 11A8  
                   i2l2397 1550                     i2l2709 09FE                     i2l2717 0A88  
                   i2l2637 08CE                     i2l2719 0A98                     i2l2655 0918  
                   i2l2671 0948                     i2l2745 11CE                     i2l2761 1200  
                   i2l2657 091C                     i2l2673 0958                     i2l2747 11D6  
                   i2l2739 11B8                     i2l2691 09B4                     i2l2683 0996  
                   i2l2765 120E                     i2l2757 11F6                     i2l2749 11DA  
                   i2l2685 099E                     i2l2597 07BE                     i2l2679 0972  
                   i2l2697 09CA                     i2l2699 09D2                  ??i2_putch 0003  
                   _SSPADD 000FC8                     _TRISC3 007CA3                     _TRISC4 007CA4  
                   _SSPBUF 000FC9             __CFG_XINST$OFF 000000                  ??_Operate 00AA  
                   ___wmul 169C                  ??___awdiv 0084             __CFG_STVREN$ON 000000  
                ??___awmod 0005                  ??___lldiv 0088                  ??___lwdiv 0084  
                ??___lwmod 008B                     clear_0 17C4           ___awdiv@quotient 0086  
          ___awmod@divisor 0003            ___awmod@counter 0005                  ??_lcdInst 0082  
                   _printf 0400             i2___awdiv@sign 0006          Operate@Start_time 00C5  
                ??_initLCD 0083               ?_pop_results 0001                  ??_isdigit 0080  
        __end_ofi2___awdiv 1218           __end_of_set_time 1486          __end_ofi2___lwdiv 1580  
             __mediumconst FEE0          __end_ofi2___lwmod 169C                  ??_op_time 0021  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
             ?_tin_results 0001                  ??_results 00A4          __end_ofi2_lcdInst 185C  
        __end_ofi2_initLCD 165A          __end_ofi2_isdigit 17F6                 __accesstop 0080  
  __end_of__initialization 17CA              ___rparam_used 000001            Operate@End_time 00C7  
       i2___lwmod@dividend 0008             __pcstackCOMRAM 0001              __end_of_putch 1834  
              i2printf@idx 0017                i2printf@val 001B                  ?i2___wmul 0001  
       __size_of_lcdNibble 0068       Operate@keypress_temp 00B6                i2putch@data 0003  
              keypressed@i 0032                  ?i2_printf 000D                    ??_putch 0082  
               __pbssBANK0 00C9                Operate@time 00BB               ?i2_lcdNibble 0001  
                  ?___wmul 0088    keypressed@keypress_temp 003E                    ?_printf 008E  
          Operate@keypress 00B5                 ??i2___wmul 0005                 ??i2_printf 0013  
                  _SSPCON1 000FC6                    _SSPCON2 000FC5                    _SSPSTAT 000FC7  
                  i2_putch 1844          __end_of_lcdNibble 1368                    __Hparam 0000  
                  __Lparam 0000        initialization@i_280 0083        initialization@i_281 0084  
                  _Operate 0012                  ?_set_time 0001                    ___awdiv 0EF6  
                  ___awmod 1290                    ___lldiv 0FB4            __size_of___wmul 0036  
                  ___lwdiv 1218                    ___lwmod 1368                    __pcinit 17B8  
                  __ramtop 1000                    _lcdInst 1834                    __ptext0 14DC  
                  __ptext1 142A                    __ptext2 0D86                    __ptext3 0012  
                  __ptext4 1070                    __ptext5 0400                    __ptext6 1824  
                  __ptext7 1768                    __ptext8 169C                    __ptext9 1368  
          __size_of_printf 03B4                    _initLCD 1580          __end_of_hexpowers FF04  
            i2_isdigit$682 0002                    _dpowers FEF2                    _isdigit 1768  
         ___awmod@dividend 0001                    _op_time 15CA                 _keypressed 0008  
 __size_of_I2C_Master_Init 0060   __size_of_I2C_Master_Read 002E                    _pop_can 0049  
 __size_of_I2C_Master_Wait 0014                    _tin_can 0045          __end_of_real_time FF0B  
 __size_of_I2C_Master_Stop 0008                    _results 0D86       __size_of_pop_results 0034  
           __pintcode_body 0AC0       end_of_initialization 17CA       __size_of_tin_results 0034  
            startSorting@i 00A6              __Lmediumconst FEE0                    int_func 0AC0  
      i2___wmul@multiplier 0001             _operation_time 0041  __size_of_I2C_Master_Start 0008  
__size_of_I2C_Master_Write 000A            ___lldiv@divisor 0084            ___lldiv@counter 008C  
               ??_set_time 0083                    printf@c 00A3                    printf@f 008E  
         I2C_Master_Init@c 008D           I2C_Master_Read@a 0081                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE    __size_of_initialization 0090  
                _PORTBbits 000F81                  i2___awdiv 1194          i2___lwdiv@divisor 0003  
                i2___lwdiv 152E                  i2___lwmod 165A          i2___lwdiv@counter 0007  
     results@keypress_temp 00A7                  i2_lcdInst 1850                printf@width 00A1  
                i2_initLCD 1614         i2___awdiv@dividend 0001                 _tot_sorted 17F6  
                i2_isdigit 17D8             __end_of___wmul 16D2       __size_ofi2_lcdNibble 0056  
            i2lcdInst@data 0003           i2___wmul@product 0005             __end_of_printf 07B4  
             i2printf@flag 001D               i2printf@prec 001A        start_initialization 17B8  
              ?_keypressed 0001         i2___awdiv@quotient 0007          __size_ofi2___wmul 0026  
                i2printf@c 0020                  i2printf@f 000D                 ?i2___awdiv 0001  
            ?_startSorting 0001                 ?i2___lwdiv 0001                 ?i2___lwmod 0008  
        __size_ofi2_printf 030C                  Operate@SB 00B7          ??_I2C_Master_Init 0091  
        ??_I2C_Master_Read 0081          ??_I2C_Master_Wait 0080                 ?i2_lcdInst 0001  
        ??_I2C_Master_Stop 0081                 ?i2_initLCD 0001                 ?i2_isdigit 0001  
                 ??___wmul 008C           __CFG_LPT1OSC$OFF 000000                   ??_printf 0096  
              __pbssCOMRAM 003F              __pcstackBANK0 0080          i2___lwmod@divisor 000A  
        i2___lwmod@counter 000C             ??_startSorting 00A4                   ?i2_putch 0001  
              ?_tot_sorted 0001           _I2C_Master_Start 186E               Operate@i_420 00C2  
             Operate@i_432 00C4           _I2C_Master_Write 185C           ___lwdiv@dividend 0080  
                 ?_Operate 00A8          __CFG_CCP2MX$PORTC 000000        __size_of_keypressed 0D7E  
                __pintcode 0008              __pmediumconst FEE0                  _lcdNibble 1300  
                 ?___awdiv 0080                   ?___awmod 0001             _initialization 1104  
                 ?___lldiv 0080                   ?___lwdiv 0080                   ?___lwmod 0087  
        __size_of_set_time 005C                   ?_lcdInst 0001                   ?_initLCD 0001  
                 ?_isdigit 0001                   ?_op_time 0001                   ?_results 0001  
                _hexpowers FEFC           ___lwdiv@quotient 0085                ??i2___awdiv 0005  
              ??i2___lwdiv 0005                ??i2___lwmod 000C             __size_of_putch 0010  
                _real_time FF04            keypressed@i_201 0035            keypressed@i_210 003C  
          keypressed@i_202 0036            keypressed@i_211 003D            keypressed@i_203 0037  
          keypressed@i_205 0038            keypressed@i_206 0039            keypressed@i_207 003A  
          keypressed@i_209 003B            keypressed@i_198 0033            keypressed@i_199 0034  
              ??i2_lcdInst 0003             ___wmul@product 008C                   _LATDbits 000F8C  
              ??i2_initLCD 0004                ??i2_isdigit 0001                   i2u400_47 0C74  
                 i2u401_47 0C9C                   i2u410_47 14D4                   i2u402_47 0CD0  
                 i2u403_47 0CF8                   i2u404_47 0D20                   i2u405_47 161A  
                 i2u406_47 164E                   i2u407_47 149E                   i2u408_47 14A8  
                 i2u409_47 14CA     __end_of_initialization 1194                   i2u393_47 0B44  
                 i2u394_47 0B6C                   i2u395_47 0B94                   i2u396_47 0BC8  
                 i2u397_47 0BF0                   i2u398_47 0C18                   i2u399_47 0C4C  
         __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001               _Operate$1030 00B9  
         Operate@total_end 00B1          ___wmul@multiplier 0088                   i2___wmul 1792  
            lcdNibble@data 0081              ??_pop_results 0021                 printf@flag 00A0  
            lcdNibble@temp 0080                 printf@prec 009D        __size_of_tot_sorted 001A  
        i2___awdiv@divisor 0003          i2___awdiv@counter 0005              ??_tin_results 0021  
                 i2_printf 07B4        I2C_Master_Read@temp 0082            initialization@i 0082  
            _tin_can_label 0043           __size_ofi2_putch 000C                   Operate@i 00C3  
       keypressed@keypress 0031                   __Hrparam 0000            ?_initialization 0001  
                 __Lrparam 0000         __CFG_BOREN$SBORDIS 000000           __size_of_Operate 03EE  
     __end_of_startSorting 1104           __size_of___awdiv 00BE           __size_of___awmod 0070  
    i2___wmul@multiplicand 0003           __size_of___lldiv 00BC           __size_of___lwdiv 0078  
         __size_of___lwmod 0062                _isdigit$682 0081           __size_of_lcdInst 0010  
          _I2C_Master_Init 13CA            _I2C_Master_Read 173A           __size_of_initLCD 004A  
          _I2C_Master_Wait 1810            _I2C_Master_Stop 1866               ??_keypressed 0021  
         __size_of_isdigit 002A            ___lwdiv@divisor 0082            ___lwdiv@counter 0084  
         __size_of_op_time 004A                   __ptext10 1218                   __ptext11 1104  
                 __ptext20 1810                   __ptext12 1580                   __ptext21 13CA  
                 __ptext13 1834                   __ptext30 17D8                   __ptext22 0FB4  
                 __ptext14 1300                   __ptext31 1792                   __ptext15 0EF6  
                 __ptext32 165A                   __ptext24 17F6                   __ptext16 185C  
                 __ptext33 152E                   __ptext25 16D2                   __ptext17 1866  
                 __ptext34 1614                   __ptext26 1706                   __ptext18 186E  
                 __ptext35 1850                   __ptext27 15CA                   __ptext19 173A  
                 __ptext36 1486                   __ptext28 07B4                   __ptext37 1194  
                 __ptext29 1844                   __ptext38 1290           __size_of_results 0170  
      __end_of_pop_results 173A        __end_of_tin_results 1706              __size_of_main 0052  
                set_time@i 0083                   _set_time 142A              ??i2_lcdNibble 0001  
              ??_lcdNibble 0080         __end_of_keypressed 0D86                   int$flags 004B  
                printf@idx 009A                  printf@val 009E                  putch@data 0082  
 __end_of_I2C_Master_Start 1876   __end_of_I2C_Master_Write 1866                 _INTCONbits 000FF2  
                 isdigit@c 0082                   intlevel2 0000           ___lwmod@dividend 0087  
         ___lldiv@dividend 0080            results@keypress 00A6               ??_tot_sorted 0021  
      results@restart_flag 00A8                   results@i 00AA                _pop_can_tab 0047  
                 printf@ap 009B    __end_of_I2C_Master_Init 142A    __end_of_I2C_Master_Read 1768  
  __end_of_I2C_Master_Wait 1824    __end_of_I2C_Master_Stop 186E                lcdInst@data 0082  
      __end_ofi2_lcdNibble 14DC           ___lldiv@quotient 0088          I2C_Master_Write@d 0081  
          ___lwmod@divisor 0089                _pop_results 1706            ___lwmod@counter 008B  
       __end_of_tot_sorted 1810                _tin_results 16D2               results@i_301 00AD  
             results@i_295 00AB               results@i_297 00AC      __size_of_startSorting 0094  
       Operate@total_start 00AD  

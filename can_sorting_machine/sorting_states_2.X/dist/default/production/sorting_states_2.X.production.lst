

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Apr 11 19:22:35 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1
    76                           	psect	text64,global,reloc=2,class=CODE,delta=1
    77                           	psect	text65,global,reloc=2,class=CODE,delta=1
    78                           	psect	text66,global,reloc=2,class=CODE,delta=1
    79                           	psect	text67,global,reloc=2,class=CODE,delta=1
    80                           	psect	text68,global,reloc=2,class=CODE,delta=1
    81                           	psect	text69,global,reloc=2,class=CODE,delta=1
    82                           	psect	text70,global,reloc=2,class=CODE,delta=1
    83                           	psect	text71,global,reloc=2,class=CODE,delta=1
    84                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=1
    85                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    86                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    88                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    89  0000                     
    90                           ; Version 1.41
    91                           ; Generated 25/01/2017 GMT
    92                           ; 
    93                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    94                           ; All rights reserved.
    95                           ; 
    96                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    97                           ; 
    98                           ; Redistribution and use in source and binary forms, with or without modification, are
    99                           ; permitted provided that the following conditions are met:
   100                           ; 
   101                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   102                           ;        conditions and the following disclaimer.
   103                           ; 
   104                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   105                           ;        of conditions and the following disclaimer in the documentation and/or other
   106                           ;        materials provided with the distribution.
   107                           ; 
   108                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   109                           ;        software without specific prior written permission.
   110                           ; 
   111                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   112                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   113                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   114                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   115                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   116                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   117                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   118                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   119                           ; 
   120                           ; 
   121                           ; Code-generator required, PIC18F4620 Definitions
   122                           ; 
   123                           ; SFR Addresses
   124  0000                     
   125                           	psect	mediumconst
   126  00FEEA                     __pmediumconst:
   127                           	opt stack 0
   128  00FEEA  00                 	db	0
   129  00FEEB                     _keys:
   130                           	opt stack 0
   131  00FEEB  31                 	db	49
   132  00FEEC  32                 	db	50
   133  00FEED  33                 	db	51
   134  00FEEE  41                 	db	65
   135  00FEEF  34                 	db	52
   136  00FEF0  35                 	db	53
   137  00FEF1  36                 	db	54
   138  00FEF2  42                 	db	66
   139  00FEF3  37                 	db	55
   140  00FEF4  38                 	db	56
   141  00FEF5  39                 	db	57
   142  00FEF6  43                 	db	67
   143  00FEF7  2A                 	db	42
   144  00FEF8  30                 	db	48
   145  00FEF9  23                 	db	35
   146  00FEFA  44                 	db	68
   147  00FEFB  00                 	db	0
   148  00FEFC                     __end_of_keys:
   149                           	opt stack 0
   150  00FEFC                     _dpowers:
   151                           	opt stack 0
   152  00FEFC  0001               	dw	1
   153  00FEFE  000A               	dw	10
   154  00FF00  0064               	dw	100
   155  00FF02  03E8               	dw	1000
   156  00FF04  2710               	dw	10000
   157  00FF06                     __end_of_dpowers:
   158                           	opt stack 0
   159  00FF06                     _hexpowers:
   160                           	opt stack 0
   161  00FF06  0001               	dw	1
   162  00FF08  0010               	dw	16
   163  00FF0A  0100               	dw	256
   164  00FF0C  1000               	dw	4096
   165  00FF0E                     __end_of_hexpowers:
   166                           	opt stack 0
   167  00FF0E                     _real_time:
   168                           	opt stack 0
   169  00FF0E  45                 	db	69
   170  00FF0F  59                 	db	89
   171  00FF10  17                 	db	23
   172  00FF11  04                 	db	4
   173  00FF12  31                 	db	49
   174  00FF13  02                 	db	2
   175  00FF14  17                 	db	23
   176  00FF15                     __end_of_real_time:
   177                           	opt stack 0
   178  0000                     _LATBbits	set	3978
   179  0000                     _LATCbits	set	3979
   180  0000                     _LATAbits	set	3977
   181  0000                     _PORTBbits	set	3969
   182  0000                     _ADCON1	set	4033
   183  0000                     _ADCON0	set	4034
   184  0000                     _LATE	set	3981
   185  0000                     _LATC	set	3979
   186  0000                     _LATB	set	3978
   187  0000                     _LATA	set	3977
   188  0000                     _TRISE	set	3990
   189  0000                     _TRISD	set	3989
   190  0000                     _TRISC	set	3988
   191  0000                     _TRISB	set	3987
   192  0000                     _TRISA	set	3986
   193  0000                     _LATD	set	3980
   194  0000                     _LATDbits	set	3980
   195  0000                     _PORTB	set	3969
   196  0000                     _SSPBUF	set	4041
   197  0000                     _SSPADD	set	4040
   198  0000                     _SSPCON2	set	4037
   199  0000                     _SSPCON1	set	4038
   200  0000                     _SSPSTAT	set	4039
   201  0000                     _PORTCbits	set	3970
   202  0000                     _INTCONbits	set	4082
   203  0000                     _PORTEbits	set	3972
   204  0000                     _INT1IE	set	32643
   205  0000                     _nRBPU	set	32655
   206  0000                     _INT1IF	set	32640
   207  0000                     _ACKEN	set	32300
   208  0000                     _ACKDT	set	32301
   209  0000                     _RCEN	set	32299
   210  0000                     _PEN	set	32298
   211  0000                     _RSEN	set	32297
   212  0000                     _SEN	set	32296
   213  0000                     _TRISC4	set	31908
   214  0000                     _TRISC3	set	31907
   215  00FF15                     STR_11:
   216  00FF15  54                 	db	84	;'T'
   217  00FF16  69                 	db	105	;'i'
   218  00FF17  6D                 	db	109	;'m'
   219  00FF18  65                 	db	101	;'e'
   220  00FF19  3A                 	db	58	;':'
   221  00FF1A  20                 	db	32
   222  00FF1B  25                 	db	37
   223  00FF1C  30                 	db	48	;'0'
   224  00FF1D  31                 	db	49	;'1'
   225  00FF1E  64                 	db	100	;'d'
   226  00FF1F  20                 	db	32
   227  00FF20  6D                 	db	109	;'m'
   228  00FF21  69                 	db	105	;'i'
   229  00FF22  6E                 	db	110	;'n'
   230  00FF23  20                 	db	32
   231  00FF24  25                 	db	37
   232  00FF25  30                 	db	48	;'0'
   233  00FF26  32                 	db	50	;'2'
   234  00FF27  64                 	db	100	;'d'
   235  00FF28  20                 	db	32
   236  00FF29  73                 	db	115	;'s'
   237  00FF2A  00                 	db	0
   238  00FF2B                     STR_10:
   239  00FF2B  54                 	db	84	;'T'
   240  00FF2C  6F                 	db	111	;'o'
   241  00FF2D  74                 	db	116	;'t'
   242  00FF2E  61                 	db	97	;'a'
   243  00FF2F  6C                 	db	108	;'l'
   244  00FF30  20                 	db	32
   245  00FF31  53                 	db	83	;'S'
   246  00FF32  6F                 	db	111	;'o'
   247  00FF33  72                 	db	114	;'r'
   248  00FF34  74                 	db	116	;'t'
   249  00FF35  65                 	db	101	;'e'
   250  00FF36  64                 	db	100	;'d'
   251  00FF37  3A                 	db	58	;':'
   252  00FF38  20                 	db	32
   253  00FF39  25                 	db	37
   254  00FF3A  30                 	db	48	;'0'
   255  00FF3B  32                 	db	50	;'2'
   256  00FF3C  64                 	db	100	;'d'
   257  00FF3D  00                 	db	0
   258  00FF3E                     STR_16:
   259  00FF3E  30                 	db	48	;'0'
   260  00FF3F  31                 	db	49	;'1'
   261  00FF40  32                 	db	50	;'2'
   262  00FF41  33                 	db	51	;'3'
   263  00FF42  34                 	db	52	;'4'
   264  00FF43  35                 	db	53	;'5'
   265  00FF44  36                 	db	54	;'6'
   266  00FF45  37                 	db	55	;'7'
   267  00FF46  38                 	db	56	;'8'
   268  00FF47  39                 	db	57	;'9'
   269  00FF48  61                 	db	97	;'a'
   270  00FF49  62                 	db	98	;'b'
   271  00FF4A  63                 	db	99	;'c'
   272  00FF4B  64                 	db	100	;'d'
   273  00FF4C  65                 	db	101	;'e'
   274  00FF4D  66                 	db	102	;'f'
   275  00FF4E  00                 	db	0
   276  00FF4F                     STR_7:
   277  00FF4F  41                 	db	65	;'A'
   278  00FF50  3A                 	db	58	;':'
   279  00FF51  54                 	db	84	;'T'
   280  00FF52  6F                 	db	111	;'o'
   281  00FF53  74                 	db	116	;'t'
   282  00FF54  61                 	db	97	;'a'
   283  00FF55  6C                 	db	108	;'l'
   284  00FF56  20                 	db	32
   285  00FF57  20                 	db	32
   286  00FF58  20                 	db	32
   287  00FF59  42                 	db	66	;'B'
   288  00FF5A  3A                 	db	58	;':'
   289  00FF5B  50                 	db	80	;'P'
   290  00FF5C  6F                 	db	111	;'o'
   291  00FF5D  70                 	db	112	;'p'
   292  00FF5E  20                 	db	32
   293  00FF5F  00                 	db	0
   294  00FF60                     STR_12:
   295  00FF60  57                 	db	87	;'W'
   296  00FF61  69                 	db	105	;'i'
   297  00FF62  74                 	db	116	;'t'
   298  00FF63  68                 	db	104	;'h'
   299  00FF64  20                 	db	32
   300  00FF65  4C                 	db	76	;'L'
   301  00FF66  61                 	db	97	;'a'
   302  00FF67  62                 	db	98	;'b'
   303  00FF68  65                 	db	101	;'e'
   304  00FF69  6C                 	db	108	;'l'
   305  00FF6A  3A                 	db	58	;':'
   306  00FF6B  20                 	db	32
   307  00FF6C  25                 	db	37
   308  00FF6D  30                 	db	48	;'0'
   309  00FF6E  32                 	db	50	;'2'
   310  00FF6F  64                 	db	100	;'d'
   311  00FF70  00                 	db	0
   312  00FF71                     STR_8:
   313  00FF71  43                 	db	67	;'C'
   314  00FF72  3A                 	db	58	;':'
   315  00FF73  54                 	db	84	;'T'
   316  00FF74  69                 	db	105	;'i'
   317  00FF75  6E                 	db	110	;'n'
   318  00FF76  20                 	db	32
   319  00FF77  20                 	db	32
   320  00FF78  20                 	db	32
   321  00FF79  20                 	db	32
   322  00FF7A  20                 	db	32
   323  00FF7B  44                 	db	68	;'D'
   324  00FF7C  3A                 	db	58	;':'
   325  00FF7D  54                 	db	84	;'T'
   326  00FF7E  69                 	db	105	;'i'
   327  00FF7F  6D                 	db	109	;'m'
   328  00FF80  65                 	db	101	;'e'
   329  00FF81  00                 	db	0
   330  00FF82                     STR_9:
   331  00FF82  50                 	db	80	;'P'
   332  00FF83  72                 	db	114	;'r'
   333  00FF84  65                 	db	101	;'e'
   334  00FF85  73                 	db	115	;'s'
   335  00FF86  73                 	db	115	;'s'
   336  00FF87  20                 	db	32
   337  00FF88  30                 	db	48	;'0'
   338  00FF89  20                 	db	32
   339  00FF8A  74                 	db	116	;'t'
   340  00FF8B  6F                 	db	111	;'o'
   341  00FF8C  20                 	db	32
   342  00FF8D  52                 	db	82	;'R'
   343  00FF8E  65                 	db	101	;'e'
   344  00FF8F  73                 	db	115	;'s'
   345  00FF90  65                 	db	101	;'e'
   346  00FF91  74                 	db	116	;'t'
   347  00FF92  00                 	db	0
   348  00FF93                     STR_4:
   349  00FF93  50                 	db	80	;'P'
   350  00FF94  72                 	db	114	;'r'
   351  00FF95  65                 	db	101	;'e'
   352  00FF96  73                 	db	115	;'s'
   353  00FF97  73                 	db	115	;'s'
   354  00FF98  20                 	db	32
   355  00FF99  23                 	db	35
   356  00FF9A  20                 	db	32
   357  00FF9B  74                 	db	116	;'t'
   358  00FF9C  6F                 	db	111	;'o'
   359  00FF9D  20                 	db	32
   360  00FF9E  53                 	db	83	;'S'
   361  00FF9F  74                 	db	116	;'t'
   362  00FFA0  61                 	db	97	;'a'
   363  00FFA1  72                 	db	114	;'r'
   364  00FFA2  74                 	db	116	;'t'
   365  00FFA3  00                 	db	0
   366  00FFA4                     STR_14:
   367  00FFA4  57                 	db	87	;'W'
   368  00FFA5  69                 	db	105	;'i'
   369  00FFA6  74                 	db	116	;'t'
   370  00FFA7  68                 	db	104	;'h'
   371  00FFA8  20                 	db	32
   372  00FFA9  54                 	db	84	;'T'
   373  00FFAA  61                 	db	97	;'a'
   374  00FFAB  62                 	db	98	;'b'
   375  00FFAC  3A                 	db	58	;':'
   376  00FFAD  20                 	db	32
   377  00FFAE  25                 	db	37
   378  00FFAF  30                 	db	48	;'0'
   379  00FFB0  32                 	db	50	;'2'
   380  00FFB1  64                 	db	100	;'d'
   381  00FFB2  00                 	db	0
   382  00FFB3                     STR_13:
   383  00FFB3  4E                 	db	78	;'N'
   384  00FFB4  6F                 	db	111	;'o'
   385  00FFB5  20                 	db	32
   386  00FFB6  4C                 	db	76	;'L'
   387  00FFB7  61                 	db	97	;'a'
   388  00FFB8  62                 	db	98	;'b'
   389  00FFB9  65                 	db	101	;'e'
   390  00FFBA  6C                 	db	108	;'l'
   391  00FFBB  3A                 	db	58	;':'
   392  00FFBC  20                 	db	32
   393  00FFBD  25                 	db	37
   394  00FFBE  30                 	db	48	;'0'
   395  00FFBF  32                 	db	50	;'2'
   396  00FFC0  64                 	db	100	;'d'
   397  00FFC1  00                 	db	0
   398  00FFC2                     STR_3:
   399  00FFC2  25                 	db	37
   400  00FFC3  30                 	db	48	;'0'
   401  00FFC4  32                 	db	50	;'2'
   402  00FFC5  78                 	db	120	;'x'
   403  00FFC6  3A                 	db	58	;':'
   404  00FFC7  25                 	db	37
   405  00FFC8  30                 	db	48	;'0'
   406  00FFC9  32                 	db	50	;'2'
   407  00FFCA  78                 	db	120	;'x'
   408  00FFCB  3A                 	db	58	;':'
   409  00FFCC  25                 	db	37
   410  00FFCD  30                 	db	48	;'0'
   411  00FFCE  32                 	db	50	;'2'
   412  00FFCF  78                 	db	120	;'x'
   413  00FFD0  00                 	db	0
   414  00FFD1                     STR_2:
   415  00FFD1  25                 	db	37
   416  00FFD2  30                 	db	48	;'0'
   417  00FFD3  32                 	db	50	;'2'
   418  00FFD4  78                 	db	120	;'x'
   419  00FFD5  2F                 	db	47
   420  00FFD6  25                 	db	37
   421  00FFD7  30                 	db	48	;'0'
   422  00FFD8  32                 	db	50	;'2'
   423  00FFD9  78                 	db	120	;'x'
   424  00FFDA  20                 	db	32
   425  00FFDB  20                 	db	32
   426  00FFDC  20                 	db	32
   427  00FFDD  00                 	db	0
   428  00FFDE                     STR_15:
   429  00FFDE  4E                 	db	78	;'N'
   430  00FFDF  6F                 	db	111	;'o'
   431  00FFE0  20                 	db	32
   432  00FFE1  54                 	db	84	;'T'
   433  00FFE2  61                 	db	97	;'a'
   434  00FFE3  62                 	db	98	;'b'
   435  00FFE4  3A                 	db	58	;':'
   436  00FFE5  20                 	db	32
   437  00FFE6  25                 	db	37
   438  00FFE7  30                 	db	48	;'0'
   439  00FFE8  32                 	db	50	;'2'
   440  00FFE9  64                 	db	100	;'d'
   441  00FFEA  00                 	db	0
   442  00FFEB                     STR_6:
   443  00FFEB  54                 	db	84	;'T'
   444  00FFEC  69                 	db	105	;'i'
   445  00FFED  6D                 	db	109	;'m'
   446  00FFEE  65                 	db	101	;'e'
   447  00FFEF  20                 	db	32
   448  00FFF0  69                 	db	105	;'i'
   449  00FFF1  73                 	db	115	;'s'
   450  00FFF2  20                 	db	32
   451  00FFF3  75                 	db	117	;'u'
   452  00FFF4  70                 	db	112	;'p'
   453  00FFF5  00                 	db	0
   454  00FFF6                     STR_5:
   455  00FFF6  43                 	db	67	;'C'
   456  00FFF7  6F                 	db	111	;'o'
   457  00FFF8  6D                 	db	109	;'m'
   458  00FFF9  70                 	db	112	;'p'
   459  00FFFA  6C                 	db	108	;'l'
   460  00FFFB  65                 	db	101	;'e'
   461  00FFFC  74                 	db	116	;'t'
   462  00FFFD  65                 	db	101	;'e'
   463  00FFFE  00                 	db	0
   464  0000                     
   465                           ; #config settings
   466  00FFFF  00                 	db	0	; dummy byte at the end
   467  0000                     
   468                           	psect	cinit
   469  001FCC                     __pcinit:
   470                           	opt stack 0
   471  001FCC                     start_initialization:
   472                           	opt stack 0
   473  001FCC                     __initialization:
   474                           	opt stack 0
   475                           
   476                           ; Clear objects allocated to BANK0 (43 bytes)
   477  001FCC  EE00  F080         	lfsr	0,__pbssBANK0
   478  001FD0  0E2B               	movlw	43
   479  001FD2                     clear_0:
   480  001FD2  6AEE               	clrf	postinc0,c
   481  001FD4  06E8               	decf	wreg,f,c
   482  001FD6  E1FD               	bnz	clear_0
   483                           
   484                           ; Clear objects allocated to COMRAM (16 bytes)
   485  001FD8  EE00  F03F         	lfsr	0,__pbssCOMRAM
   486  001FDC  0E10               	movlw	16
   487  001FDE                     clear_1:
   488  001FDE  6AEE               	clrf	postinc0,c
   489  001FE0  06E8               	decf	wreg,f,c
   490  001FE2  E1FD               	bnz	clear_1
   491  001FE4                     end_of_initialization:
   492                           	opt stack 0
   493  001FE4                     __end_of__initialization:
   494                           	opt stack 0
   495  001FE4  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   496  001FE6  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   497  001FE8  0100               	movlb	0
   498  001FEA  EF1C  F00A         	goto	_main	;jump to C main() function
   499                           postinc0	equ	0xFEE
   500                           wreg	equ	0xFE8
   501                           
   502                           	psect	bssCOMRAM
   503  00003F                     __pbssCOMRAM:
   504                           	opt stack 0
   505  00003F                     _t_m:
   506                           	opt stack 0
   507  00003F                     	ds	2
   508  000041                     _start_top_distribution:
   509                           	opt stack 0
   510  000041                     	ds	2
   511  000043                     _top_move:
   512                           	opt stack 0
   513  000043                     	ds	2
   514  000045                     _tabed:
   515                           	opt stack 0
   516  000045                     	ds	2
   517  000047                     _tot:
   518                           	opt stack 0
   519  000047                     	ds	2
   520  000049                     _operation_time:
   521                           	opt stack 0
   522  000049                     	ds	2
   523  00004B                     _b_m:
   524                           	opt stack 0
   525  00004B                     	ds	2
   526  00004D                     _bottom_move:
   527                           	opt stack 0
   528  00004D                     	ds	2
   529                           postinc0	equ	0xFEE
   530                           wreg	equ	0xFE8
   531                           
   532                           	psect	bssBANK0
   533  000080                     __pbssBANK0:
   534                           	opt stack 0
   535  000080                     _time:
   536                           	opt stack 0
   537  000080                     	ds	7
   538  000087                     _total_end:
   539                           	opt stack 0
   540  000087                     	ds	4
   541  00008B                     _total_start:
   542                           	opt stack 0
   543  00008B                     	ds	4
   544  00008F                     _Start_time:
   545                           	opt stack 0
   546  00008F                     	ds	2
   547  000091                     _check:
   548                           	opt stack 0
   549  000091                     	ds	2
   550  000093                     _fsm1:
   551                           	opt stack 0
   552  000093                     	ds	2
   553  000095                     _pop_can_tab:
   554                           	opt stack 0
   555  000095                     	ds	2
   556  000097                     _pop_can:
   557                           	opt stack 0
   558  000097                     	ds	2
   559  000099                     _tin_can:
   560                           	opt stack 0
   561  000099                     	ds	2
   562  00009B                     _tin_can_label:
   563                           	opt stack 0
   564  00009B                     	ds	2
   565  00009D                     _labeled:
   566                           	opt stack 0
   567  00009D                     	ds	2
   568  00009F                     _fsm2:
   569                           	opt stack 0
   570  00009F                     	ds	2
   571  0000A1                     _bottomRockerState:
   572                           	opt stack 0
   573  0000A1                     	ds	2
   574  0000A3                     _bottomDistributionState:
   575                           	opt stack 0
   576  0000A3                     	ds	2
   577  0000A5                     _topDistributionState:
   578                           	opt stack 0
   579  0000A5                     	ds	2
   580  0000A7                     _topRockerState:
   581                           	opt stack 0
   582  0000A7                     	ds	2
   583  0000A9                     _start_bottom_distribution:
   584                           	opt stack 0
   585  0000A9                     	ds	2
   586                           postinc0	equ	0xFEE
   587                           wreg	equ	0xFE8
   588                           
   589                           	psect	cstackBANK0
   590  0000AB                     __pcstackBANK0:
   591                           	opt stack 0
   592  0000AB                     ??_bottom_distribution_motor_cw:
   593  0000AB                     ??_bottom_distribution_motor_ccw:
   594  0000AB                     ??_bottom_distribution_motor_ccw2:
   595  0000AB                     ??_bottom_distribution_motor_cw2:
   596  0000AB                     ??_bottom_servo_rightTilt:
   597  0000AB                     ??_bottom_servo_leftTilt:
   598  0000AB                     ??_top_distribution_motor_cw:
   599  0000AB                     ??_top_distribution_motor_ccw:
   600  0000AB                     ??_top_distribution_motor_ccw2:
   601  0000AB                     ??_top_distribution_motor_cw2:
   602  0000AB                     ??_top_servo_rightTilt:
   603  0000AB                     ??_top_servo_leftTilt:
   604  0000AB                     ??_isdigit:
   605  0000AB                     ??_I2C_Master_Wait:
   606  0000AB                     ??_pop_out:
   607  0000AB                     ??_go_back:
   608  0000AB                     ?___awdiv:
   609                           	opt stack 0
   610  0000AB                     ?___lwdiv:
   611                           	opt stack 0
   612  0000AB                     ?___lldiv:
   613                           	opt stack 0
   614  0000AB                     _bottom_rocker_detect$352:
   615                           	opt stack 0
   616  0000AB                     lcdNibble@temp:
   617                           	opt stack 0
   618  0000AB                     ___awdiv@dividend:
   619                           	opt stack 0
   620  0000AB                     ___lwdiv@dividend:
   621                           	opt stack 0
   622  0000AB                     ___lldiv@dividend:
   623                           	opt stack 0
   624                           
   625                           ; 4 bytes @ 0x0
   626  0000AB                     	ds	1
   627  0000AC                     I2C_Master_Read@a:
   628                           	opt stack 0
   629  0000AC                     lcdNibble@data:
   630                           	opt stack 0
   631  0000AC                     _bottom_servo_rightTilt$1247:
   632                           	opt stack 0
   633  0000AC                     _isdigit$1503:
   634                           	opt stack 0
   635  0000AC                     I2C_Master_Write@d:
   636                           	opt stack 0
   637  0000AC                     bottom_servo_leftTilt@i:
   638                           	opt stack 0
   639  0000AC                     top_servo_rightTilt@i:
   640                           	opt stack 0
   641  0000AC                     top_servo_leftTilt@i:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x1
   645  0000AC                     	ds	1
   646  0000AD                     ??_bottom_distribution_move:
   647  0000AD                     ??_top_distribution_move:
   648  0000AD                     ??_solenoids_back:
   649  0000AD                     I2C_Master_Read@temp:
   650                           	opt stack 0
   651  0000AD                     lcdInst@data:
   652                           	opt stack 0
   653  0000AD                     putch@data:
   654                           	opt stack 0
   655  0000AD                     isdigit@c:
   656                           	opt stack 0
   657  0000AD                     bottom_servo_rightTilt@i:
   658                           	opt stack 0
   659  0000AD                     ___awdiv@divisor:
   660                           	opt stack 0
   661  0000AD                     ___lwdiv@divisor:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x2
   665  0000AD                     	ds	1
   666  0000AE                     ??_initLCD:
   667  0000AE                     ??_top_rocker_release:
   668  0000AE                     set_time@i:
   669                           	opt stack 0
   670                           
   671                           ; 1 bytes @ 0x3
   672  0000AE                     	ds	1
   673  0000AF                     ??_bottom_rocker_idle:
   674  0000AF                     ??_bottom_rocker_release:
   675  0000AF                     ___awdiv@counter:
   676                           	opt stack 0
   677  0000AF                     ___lwdiv@counter:
   678                           	opt stack 0
   679  0000AF                     ___lldiv@divisor:
   680                           	opt stack 0
   681                           
   682                           ; 4 bytes @ 0x4
   683  0000AF                     	ds	1
   684  0000B0                     _bottom_rocker_idle$349:
   685                           	opt stack 0
   686  0000B0                     ___awdiv@sign:
   687                           	opt stack 0
   688  0000B0                     ___lwdiv@quotient:
   689                           	opt stack 0
   690                           
   691                           ; 2 bytes @ 0x5
   692  0000B0                     	ds	1
   693  0000B1                     _bottom_rocker_idle$350:
   694                           	opt stack 0
   695  0000B1                     ___awdiv@quotient:
   696                           	opt stack 0
   697                           
   698                           ; 2 bytes @ 0x6
   699  0000B1                     	ds	1
   700  0000B2                     ?___lwmod:
   701                           	opt stack 0
   702  0000B2                     bottom_rocker_idle@o:
   703                           	opt stack 0
   704  0000B2                     ___lwmod@dividend:
   705                           	opt stack 0
   706                           
   707                           ; 2 bytes @ 0x7
   708  0000B2                     	ds	1
   709  0000B3                     ?___wmul:
   710                           	opt stack 0
   711  0000B3                     ___wmul@multiplier:
   712                           	opt stack 0
   713  0000B3                     ___lldiv@quotient:
   714                           	opt stack 0
   715                           
   716                           ; 4 bytes @ 0x8
   717  0000B3                     	ds	1
   718  0000B4                     ___lwmod@divisor:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x9
   722  0000B4                     	ds	1
   723  0000B5                     ___wmul@multiplicand:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0xA
   727  0000B5                     	ds	1
   728  0000B6                     ___lwmod@counter:
   729                           	opt stack 0
   730                           
   731                           ; 1 bytes @ 0xB
   732  0000B6                     	ds	1
   733  0000B7                     ___lldiv@counter:
   734                           	opt stack 0
   735  0000B7                     ___wmul@product:
   736                           	opt stack 0
   737                           
   738                           ; 2 bytes @ 0xC
   739  0000B7                     	ds	1
   740  0000B8                     I2C_Master_Init@c:
   741                           	opt stack 0
   742                           
   743                           ; 4 bytes @ 0xD
   744  0000B8                     	ds	1
   745  0000B9                     ?_printf:
   746                           	opt stack 0
   747  0000B9                     ?_done_sorting:
   748                           	opt stack 0
   749  0000B9                     printf@f:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0xE
   753  0000B9                     	ds	2
   754  0000BB                     ??_done_sorting:
   755                           
   756                           ; 1 bytes @ 0x10
   757  0000BB                     	ds	1
   758  0000BC                     ??_I2C_Master_Init:
   759                           
   760                           ; 1 bytes @ 0x11
   761  0000BC                     	ds	2
   762  0000BE                     _done_sorting$1848:
   763                           	opt stack 0
   764                           
   765                           ; 2 bytes @ 0x13
   766  0000BE                     	ds	2
   767  0000C0                     done_sorting@total_second:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x15
   771  0000C0                     	ds	1
   772  0000C1                     ??_printf:
   773                           
   774                           ; 1 bytes @ 0x16
   775  0000C1                     	ds	1
   776  0000C2                     done_sorting@i:
   777                           	opt stack 0
   778                           
   779                           ; 1 bytes @ 0x17
   780  0000C2                     	ds	1
   781  0000C3                     done_sorting@End_time:
   782                           	opt stack 0
   783                           
   784                           ; 2 bytes @ 0x18
   785  0000C3                     	ds	2
   786  0000C5                     printf@idx:
   787                           	opt stack 0
   788                           
   789                           ; 1 bytes @ 0x1A
   790  0000C5                     	ds	1
   791  0000C6                     printf@ap:
   792                           	opt stack 0
   793                           
   794                           ; 2 bytes @ 0x1B
   795  0000C6                     	ds	2
   796  0000C8                     printf@prec:
   797                           	opt stack 0
   798                           
   799                           ; 1 bytes @ 0x1D
   800  0000C8                     	ds	1
   801  0000C9                     printf@val:
   802                           	opt stack 0
   803                           
   804                           ; 2 bytes @ 0x1E
   805  0000C9                     	ds	2
   806  0000CB                     printf@flag:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x20
   810  0000CB                     	ds	1
   811  0000CC                     printf@width:
   812                           	opt stack 0
   813                           
   814                           ; 2 bytes @ 0x21
   815  0000CC                     	ds	2
   816  0000CE                     printf@c:
   817                           	opt stack 0
   818                           
   819                           ; 1 bytes @ 0x23
   820  0000CE                     	ds	1
   821  0000CF                     ??_standby:
   822  0000CF                     ??_startSorting:
   823  0000CF                     ??_results:
   824                           
   825                           ; 1 bytes @ 0x24
   826  0000CF                     	ds	2
   827  0000D1                     standby@keypress:
   828                           	opt stack 0
   829  0000D1                     startSorting@i:
   830                           	opt stack 0
   831  0000D1                     results@keypress:
   832                           	opt stack 0
   833                           
   834                           ; 1 bytes @ 0x26
   835  0000D1                     	ds	1
   836  0000D2                     standby@keypress_temp:
   837                           	opt stack 0
   838  0000D2                     startSorting@i_835:
   839                           	opt stack 0
   840  0000D2                     results@keypress_temp:
   841                           	opt stack 0
   842                           
   843                           ; 1 bytes @ 0x27
   844  0000D2                     	ds	1
   845  0000D3                     standby@i_818:
   846                           	opt stack 0
   847  0000D3                     results@i:
   848                           	opt stack 0
   849                           
   850                           ; 1 bytes @ 0x28
   851  0000D3                     	ds	1
   852  0000D4                     standby@i:
   853                           	opt stack 0
   854  0000D4                     results@i_847:
   855                           	opt stack 0
   856                           
   857                           ; 1 bytes @ 0x29
   858  0000D4                     	ds	1
   859  0000D5                     results@i_849:
   860                           	opt stack 0
   861                           
   862                           ; 1 bytes @ 0x2A
   863  0000D5                     	ds	1
   864  0000D6                     postinc0	equ	0xFEE
   865                           wreg	equ	0xFE8
   866                           
   867                           ; 1 bytes @ 0x2B
   868                           
   869                           	psect	cstackCOMRAM
   870  000001                     __pcstackCOMRAM:
   871                           	opt stack 0
   872  000001                     ??i2_isdigit:
   873  000001                     ?___awmod:
   874                           	opt stack 0
   875  000001                     ?i2___wmul:
   876                           	opt stack 0
   877  000001                     ?i2___awdiv:
   878                           	opt stack 0
   879  000001                     ?i2___lwdiv:
   880                           	opt stack 0
   881  000001                     i2lcdNibble@temp:
   882                           	opt stack 0
   883  000001                     ___awmod@dividend:
   884                           	opt stack 0
   885  000001                     i2___wmul@multiplier:
   886                           	opt stack 0
   887  000001                     i2___awdiv@dividend:
   888                           	opt stack 0
   889  000001                     i2___lwdiv@dividend:
   890                           	opt stack 0
   891                           
   892                           ; 2 bytes @ 0x0
   893  000001                     	ds	1
   894  000002                     i2lcdNibble@data:
   895                           	opt stack 0
   896  000002                     i2_isdigit$1503:
   897                           	opt stack 0
   898                           
   899                           ; 1 bytes @ 0x1
   900  000002                     	ds	1
   901  000003                     i2lcdInst@data:
   902                           	opt stack 0
   903  000003                     i2putch@data:
   904                           	opt stack 0
   905  000003                     i2isdigit@c:
   906                           	opt stack 0
   907  000003                     ___awmod@divisor:
   908                           	opt stack 0
   909  000003                     i2___wmul@multiplicand:
   910                           	opt stack 0
   911  000003                     i2___awdiv@divisor:
   912                           	opt stack 0
   913  000003                     i2___lwdiv@divisor:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0x2
   917  000003                     	ds	1
   918  000004                     ??i2_initLCD:
   919                           
   920                           ; 1 bytes @ 0x3
   921  000004                     	ds	1
   922  000005                     ___awmod@counter:
   923                           	opt stack 0
   924  000005                     i2___awdiv@counter:
   925                           	opt stack 0
   926  000005                     i2___wmul@product:
   927                           	opt stack 0
   928  000005                     i2___lwdiv@quotient:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x4
   932  000005                     	ds	1
   933  000006                     ___awmod@sign:
   934                           	opt stack 0
   935  000006                     i2___awdiv@sign:
   936                           	opt stack 0
   937                           
   938                           ; 1 bytes @ 0x5
   939  000006                     	ds	1
   940  000007                     i2___lwdiv@counter:
   941                           	opt stack 0
   942  000007                     i2___awdiv@quotient:
   943                           	opt stack 0
   944                           
   945                           ; 2 bytes @ 0x6
   946  000007                     	ds	1
   947  000008                     ?i2___lwmod:
   948                           	opt stack 0
   949  000008                     i2___lwmod@dividend:
   950                           	opt stack 0
   951                           
   952                           ; 2 bytes @ 0x7
   953  000008                     	ds	2
   954  00000A                     i2___lwmod@divisor:
   955                           	opt stack 0
   956                           
   957                           ; 2 bytes @ 0x9
   958  00000A                     	ds	2
   959  00000C                     i2___lwmod@counter:
   960                           	opt stack 0
   961                           
   962                           ; 1 bytes @ 0xB
   963  00000C                     	ds	1
   964  00000D                     ?i2_printf:
   965                           	opt stack 0
   966  00000D                     i2printf@f:
   967                           	opt stack 0
   968                           
   969                           ; 2 bytes @ 0xC
   970  00000D                     	ds	6
   971  000013                     ??i2_printf:
   972                           
   973                           ; 1 bytes @ 0x12
   974  000013                     	ds	4
   975  000017                     i2printf@idx:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0x16
   979  000017                     	ds	1
   980  000018                     i2printf@ap:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x17
   984  000018                     	ds	2
   985  00001A                     i2printf@prec:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x19
   989  00001A                     	ds	1
   990  00001B                     i2printf@val:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0x1A
   994  00001B                     	ds	2
   995  00001D                     i2printf@flag:
   996                           	opt stack 0
   997                           
   998                           ; 1 bytes @ 0x1C
   999  00001D                     	ds	1
  1000  00001E                     i2printf@width:
  1001                           	opt stack 0
  1002                           
  1003                           ; 2 bytes @ 0x1D
  1004  00001E                     	ds	2
  1005  000020                     i2printf@c:
  1006                           	opt stack 0
  1007                           
  1008                           ; 1 bytes @ 0x1F
  1009  000020                     	ds	1
  1010  000021                     ??_keypressed:
  1011                           
  1012                           ; 1 bytes @ 0x20
  1013  000021                     	ds	16
  1014  000031                     keypressed@keypress:
  1015                           	opt stack 0
  1016                           
  1017                           ; 1 bytes @ 0x30
  1018  000031                     	ds	1
  1019  000032                     keypressed@i:
  1020                           	opt stack 0
  1021                           
  1022                           ; 1 bytes @ 0x31
  1023  000032                     	ds	1
  1024  000033                     keypressed@i_436:
  1025                           	opt stack 0
  1026                           
  1027                           ; 1 bytes @ 0x32
  1028  000033                     	ds	1
  1029  000034                     keypressed@i_437:
  1030                           	opt stack 0
  1031                           
  1032                           ; 1 bytes @ 0x33
  1033  000034                     	ds	1
  1034  000035                     keypressed@i_438:
  1035                           	opt stack 0
  1036                           
  1037                           ; 1 bytes @ 0x34
  1038  000035                     	ds	1
  1039  000036                     keypressed@i_439:
  1040                           	opt stack 0
  1041                           
  1042                           ; 1 bytes @ 0x35
  1043  000036                     	ds	1
  1044  000037                     keypressed@i_440:
  1045                           	opt stack 0
  1046                           
  1047                           ; 1 bytes @ 0x36
  1048  000037                     	ds	1
  1049  000038                     keypressed@i_441:
  1050                           	opt stack 0
  1051                           
  1052                           ; 1 bytes @ 0x37
  1053  000038                     	ds	1
  1054  000039                     keypressed@i_442:
  1055                           	opt stack 0
  1056                           
  1057                           ; 1 bytes @ 0x38
  1058  000039                     	ds	1
  1059  00003A                     keypressed@i_443:
  1060                           	opt stack 0
  1061                           
  1062                           ; 1 bytes @ 0x39
  1063  00003A                     	ds	1
  1064  00003B                     keypressed@i_444:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x3A
  1068  00003B                     	ds	1
  1069  00003C                     keypressed@i_445:
  1070                           	opt stack 0
  1071                           
  1072                           ; 1 bytes @ 0x3B
  1073  00003C                     	ds	1
  1074  00003D                     keypressed@i_446:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x3C
  1078  00003D                     	ds	1
  1079  00003E                     keypressed@keypress_temp:
  1080                           	opt stack 0
  1081                           
  1082                           ; 1 bytes @ 0x3D
  1083  00003E                     	ds	1
  1084                           postinc0	equ	0xFEE
  1085                           wreg	equ	0xFE8
  1086                           
  1087 ;;
  1088 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1089 ;;
  1090 ;; *************** function _main *****************
  1091 ;; Defined at:
  1092 ;;		line 85 in file "main.c"
  1093 ;; Parameters:    Size  Location     Type
  1094 ;;		None
  1095 ;; Auto vars:     Size  Location     Type
  1096 ;;		None
  1097 ;; Return value:  Size  Location     Type
  1098 ;;                  1    wreg      void 
  1099 ;; Registers used:
  1100 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1101 ;; Tracked objects:
  1102 ;;		On entry : 0/0
  1103 ;;		On exit  : 0/0
  1104 ;;		Unchanged: 0/0
  1105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1110 ;;Total ram usage:        0 bytes
  1111 ;; Hardware stack levels required when called:   10
  1112 ;; This function calls:
  1113 ;;		_I2C_Master_Init
  1114 ;;		_done_sorting
  1115 ;;		_initLCD
  1116 ;;		_results
  1117 ;;		_set_time
  1118 ;;		_standby
  1119 ;;		_startSorting
  1120 ;; This function is called by:
  1121 ;;		Startup code after reset
  1122 ;; This function uses a non-reentrant model
  1123 ;;
  1124                           
  1125                           	psect	text0
  1126  001438                     __ptext0:
  1127                           	opt stack 0
  1128  001438                     _main:
  1129                           	opt stack 21
  1130                           
  1131                           ;main.c: 87: TRISA = 0x11110000;
  1132                           
  1133                           ;incstack = 0
  1134  001438  0E00               	movlw	0
  1135  00143A  6E92               	movwf	3986,c	;volatile
  1136                           
  1137                           ;main.c: 89: TRISB = 0xF3;
  1138  00143C  0EF3               	movlw	243
  1139  00143E  6E93               	movwf	3987,c	;volatile
  1140                           
  1141                           ;main.c: 92: TRISC = 0x1F;
  1142  001440  0E1F               	movlw	31
  1143  001442  6E94               	movwf	3988,c	;volatile
  1144                           
  1145                           ;main.c: 93: TRISD = 0x00;
  1146  001444  0E00               	movlw	0
  1147  001446  6E95               	movwf	3989,c	;volatile
  1148                           
  1149                           ;main.c: 94: TRISE = 0x07;
  1150  001448  0E07               	movlw	7
  1151  00144A  6E96               	movwf	3990,c	;volatile
  1152                           
  1153                           ;main.c: 97: LATA = 0xF0;
  1154  00144C  0EF0               	movlw	240
  1155  00144E  6E89               	movwf	3977,c	;volatile
  1156                           
  1157                           ;main.c: 98: LATB = 0x00;
  1158  001450  0E00               	movlw	0
  1159  001452  6E8A               	movwf	3978,c	;volatile
  1160                           
  1161                           ;main.c: 99: LATC = 0x00;
  1162  001454  0E00               	movlw	0
  1163  001456  6E8B               	movwf	3979,c	;volatile
  1164                           
  1165                           ;main.c: 100: LATD = 0x00;
  1166  001458  0E00               	movlw	0
  1167  00145A  6E8C               	movwf	3980,c	;volatile
  1168                           
  1169                           ;main.c: 101: LATE = 0x00;
  1170  00145C  0E00               	movlw	0
  1171  00145E  6E8D               	movwf	3981,c	;volatile
  1172                           
  1173                           ;main.c: 103: ADCON0 = 0x00;
  1174  001460  0E00               	movlw	0
  1175  001462  6EC2               	movwf	4034,c	;volatile
  1176                           
  1177                           ;main.c: 104: ADCON1 = 0xFF;
  1178  001464  68C1               	setf	4033,c	;volatile
  1179                           
  1180                           ;main.c: 107: nRBPU = 0;
  1181  001466  9EF1               	bcf	intcon2,7,c	;volatile
  1182                           
  1183                           ;main.c: 109: initLCD();
  1184  001468  ECA5  F00D         	call	_initLCD	;wreg free
  1185                           
  1186                           ;main.c: 110: __nop();
  1187  00146C  F000               	nop	
  1188                           
  1189                           ;main.c: 111: __nop();
  1190  00146E  F000               	nop	
  1191                           
  1192                           ;main.c: 112: INT1IE = 1;
  1193  001470  86F0               	bsf	intcon3,3,c	;volatile
  1194                           
  1195                           ;main.c: 115: I2C_Master_Init(10000);
  1196  001472  0E10               	movlw	16
  1197  001474  0100               	movlb	0	; () banked
  1198  001476  6FB8               	movwf	I2C_Master_Init@c& (0+255),b
  1199  001478  0E27               	movlw	39
  1200  00147A  6FB9               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1201  00147C  0E00               	movlw	0
  1202  00147E  6FBA               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1203  001480  0E00               	movlw	0
  1204  001482  6FBB               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1205  001484  ECE3  F00B         	call	_I2C_Master_Init	;wreg free
  1206                           
  1207                           ;main.c: 116: set_time();
  1208  001488  EC81  F00B         	call	_set_time	;wreg free
  1209  00148C                     l5542:
  1210                           
  1211                           ;main.c: 122: standby();
  1212  00148C  ECD6  F007         	call	_standby	;wreg free
  1213                           
  1214                           ;main.c: 125: startSorting();
  1215  001490  EC49  F006         	call	_startSorting	;wreg free
  1216                           
  1217                           ;main.c: 128: operation_time = done_sorting();
  1218  001494  ECFF  F004         	call	_done_sorting	;wreg free
  1219  001498  C0B9  F049         	movff	?_done_sorting,_operation_time
  1220  00149C  C0BA  F04A         	movff	?_done_sorting+1,_operation_time+1
  1221                           
  1222                           ;main.c: 130: __nop();
  1223  0014A0  F000               	nop	
  1224                           
  1225                           ;main.c: 131: __nop();
  1226  0014A2  F000               	nop	
  1227                           
  1228                           ;main.c: 133: LATA = 0xF0;
  1229  0014A4  0EF0               	movlw	240
  1230  0014A6  6E89               	movwf	3977,c	;volatile
  1231                           
  1232                           ;main.c: 134: LATB = 0x00;
  1233  0014A8  0E00               	movlw	0
  1234  0014AA  6E8A               	movwf	3978,c	;volatile
  1235                           
  1236                           ;main.c: 135: LATC = 0x00;
  1237  0014AC  0E00               	movlw	0
  1238  0014AE  6E8B               	movwf	3979,c	;volatile
  1239                           
  1240                           ;main.c: 136: LATD = 0x00;
  1241  0014B0  0E00               	movlw	0
  1242  0014B2  6E8C               	movwf	3980,c	;volatile
  1243                           
  1244                           ;main.c: 137: LATE = 0x00;
  1245  0014B4  0E00               	movlw	0
  1246  0014B6  6E8D               	movwf	3981,c	;volatile
  1247                           
  1248                           ;main.c: 138: results();
  1249  0014B8  EC1B  F007         	call	_results	;wreg free
  1250  0014BC  D7E7               	goto	l5542
  1251                           
  1252                           ;main.c: 139: }
  1253                           ;main.c: 140: __nop();
  1254  0014BE  F000               	nop	
  1255                           
  1256                           ;main.c: 141: __nop();
  1257  0014C0  F000               	nop	
  1258  0014C2                     __end_of_main:
  1259                           	opt stack 0
  1260                           intcon2	equ	0xFF1
  1261                           intcon3	equ	0xFF0
  1262                           postinc0	equ	0xFEE
  1263                           wreg	equ	0xFE8
  1264                           
  1265 ;; *************** function _startSorting *****************
  1266 ;; Defined at:
  1267 ;;		line 82 in file "operation.c"
  1268 ;; Parameters:    Size  Location     Type
  1269 ;;		None
  1270 ;; Auto vars:     Size  Location     Type
  1271 ;;  i               1   39[BANK0 ] unsigned char 
  1272 ;;  i               1   38[BANK0 ] unsigned char 
  1273 ;; Return value:  Size  Location     Type
  1274 ;;                  1    wreg      void 
  1275 ;; Registers used:
  1276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1277 ;; Tracked objects:
  1278 ;;		On entry : 0/0
  1279 ;;		On exit  : 0/0
  1280 ;;		Unchanged: 0/0
  1281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1283 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1284 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1285 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1286 ;;Total ram usage:        4 bytes
  1287 ;; Hardware stack levels used:    1
  1288 ;; Hardware stack levels required when called:    9
  1289 ;; This function calls:
  1290 ;;		Absolute function
  1291 ;;		_bottom_distribution_idle
  1292 ;;		_bottom_distribution_move
  1293 ;;		_bottom_distribution_prepare
  1294 ;;		_bottom_rocker_detect
  1295 ;;		_bottom_rocker_idle
  1296 ;;		_bottom_rocker_release
  1297 ;;		_bottom_rocker_restore
  1298 ;;		_done_sorting
  1299 ;;		_initLCD
  1300 ;;		_initialization
  1301 ;;		_lcdInst
  1302 ;;		_printf
  1303 ;;		_solenoids_back
  1304 ;;		_solenoids_out
  1305 ;;		_top_distribution_idle
  1306 ;;		_top_distribution_move
  1307 ;;		_top_distribution_prepare
  1308 ;;		_top_rocker_idle
  1309 ;;		_top_rocker_release
  1310 ;;		_top_rocker_restore
  1311 ;; This function is called by:
  1312 ;;		_main
  1313 ;; This function uses a non-reentrant model
  1314 ;;
  1315                           
  1316                           	psect	text1
  1317  000C92                     __ptext1:
  1318                           	opt stack 0
  1319  000C92                     _startSorting:
  1320                           	opt stack 21
  1321                           
  1322                           ;operation.c: 85: initialization();
  1323                           
  1324                           ;incstack = 0
  1325  000C92  EC48  F00E         	call	_initialization	;wreg free
  1326  000C96                     l5386:
  1327                           
  1328                           ;operation.c: 91: (*topRockerState)();
  1329  000C96  D801               	call	u4448
  1330  000C98  D00A               	goto	l5388
  1331  000C9A                     u4448:
  1332  000C9A  0005               	push	
  1333  000C9C  6EFA               	movwf	pclath,c
  1334  000C9E  0100               	movlb	0	; () banked
  1335  000CA0  51A7               	movf	_topRockerState& (0+255),w,b
  1336  000CA2  6EFD               	movwf	tosl,c
  1337  000CA4  51A8               	movf	(_topRockerState+1)& (0+255),w,b
  1338  000CA6  6EFE               	movwf	tosh,c
  1339  000CA8  6AFF               	clrf	tosu,c
  1340  000CAA  50FA               	movf	pclath,w,c
  1341  000CAC  0012               	return		;indir
  1342  000CAE                     l5388:
  1343                           
  1344                           ;operation.c: 92: (*topDistributionState)();
  1345  000CAE  D801               	call	u4458
  1346  000CB0  D00A               	goto	l5390
  1347  000CB2                     u4458:
  1348  000CB2  0005               	push	
  1349  000CB4  6EFA               	movwf	pclath,c
  1350  000CB6  0100               	movlb	0	; () banked
  1351  000CB8  51A5               	movf	_topDistributionState& (0+255),w,b
  1352  000CBA  6EFD               	movwf	tosl,c
  1353  000CBC  51A6               	movf	(_topDistributionState+1)& (0+255),w,b
  1354  000CBE  6EFE               	movwf	tosh,c
  1355  000CC0  6AFF               	clrf	tosu,c
  1356  000CC2  50FA               	movf	pclath,w,c
  1357  000CC4  0012               	return		;indir
  1358  000CC6                     l5390:
  1359                           
  1360                           ;operation.c: 93: (*bottomRockerState)();
  1361  000CC6  D801               	call	u4468
  1362  000CC8  D00A               	goto	l5392
  1363  000CCA                     u4468:
  1364  000CCA  0005               	push	
  1365  000CCC  6EFA               	movwf	pclath,c
  1366  000CCE  0100               	movlb	0	; () banked
  1367  000CD0  51A1               	movf	_bottomRockerState& (0+255),w,b
  1368  000CD2  6EFD               	movwf	tosl,c
  1369  000CD4  51A2               	movf	(_bottomRockerState+1)& (0+255),w,b
  1370  000CD6  6EFE               	movwf	tosh,c
  1371  000CD8  6AFF               	clrf	tosu,c
  1372  000CDA  50FA               	movf	pclath,w,c
  1373  000CDC  0012               	return		;indir
  1374  000CDE                     l5392:
  1375                           
  1376                           ;operation.c: 94: (*bottomDistributionState)();
  1377  000CDE  D801               	call	u4478
  1378  000CE0  D00A               	goto	l5394
  1379  000CE2                     u4478:
  1380  000CE2  0005               	push	
  1381  000CE4  6EFA               	movwf	pclath,c
  1382  000CE6  0100               	movlb	0	; () banked
  1383  000CE8  51A3               	movf	_bottomDistributionState& (0+255),w,b
  1384  000CEA  6EFD               	movwf	tosl,c
  1385  000CEC  51A4               	movf	(_bottomDistributionState+1)& (0+255),w,b
  1386  000CEE  6EFE               	movwf	tosh,c
  1387  000CF0  6AFF               	clrf	tosu,c
  1388  000CF2  50FA               	movf	pclath,w,c
  1389  000CF4  0012               	return		;indir
  1390  000CF6                     l5394:
  1391                           
  1392                           ;operation.c: 96: check = done_sorting();
  1393  000CF6  ECFF  F004         	call	_done_sorting	;wreg free
  1394  000CFA  C0B9  F091         	movff	?_done_sorting,_check
  1395  000CFE  C0BA  F092         	movff	?_done_sorting+1,_check+1
  1396                           
  1397                           ;operation.c: 99: _delay((unsigned long)((850)*(10000000/4000.0)));
  1398  000D02  0E0B               	movlw	11
  1399  000D04  0100               	movlb	0	; () banked
  1400  000D06  6FD0               	movwf	(??_startSorting+1)& (0+255),b
  1401  000D08  0EC8               	movlw	200
  1402  000D0A  0100               	movlb	0	; () banked
  1403  000D0C  6FCF               	movwf	??_startSorting& (0+255),b
  1404  000D0E  0EB4               	movlw	180
  1405  000D10                     u4627:
  1406  000D10  2EE8               	decfsz	wreg,f,c
  1407  000D12  D7FE               	bra	u4627
  1408  000D14  2FCF               	decfsz	??_startSorting& (0+255),f,b
  1409  000D16  D7FC               	bra	u4627
  1410  000D18  2FD0               	decfsz	(??_startSorting+1)& (0+255),f,b
  1411  000D1A  D7FA               	bra	u4627
  1412  000D1C  F000               	nop	
  1413                           
  1414                           ;operation.c: 100: LATAbits.LATA0 = 0;
  1415  000D1E  9089               	bcf	3977,0,c	;volatile
  1416                           
  1417                           ;operation.c: 101: _delay((unsigned long)((50)*(10000000/4000.0)));
  1418  000D20  0EA3               	movlw	163
  1419  000D22  0100               	movlb	0	; () banked
  1420  000D24  6FCF               	movwf	??_startSorting& (0+255),b
  1421  000D26  0E55               	movlw	85
  1422  000D28                     u4637:
  1423  000D28  2EE8               	decfsz	wreg,f,c
  1424  000D2A  D7FE               	bra	u4637
  1425  000D2C  2FCF               	decfsz	??_startSorting& (0+255),f,b
  1426  000D2E  D7FC               	bra	u4637
  1427                           
  1428                           ;operation.c: 102: LATAbits.LATA0 = 1;
  1429  000D30  8089               	bsf	3977,0,c	;volatile
  1430                           
  1431                           ;operation.c: 103: _delay((unsigned long)((850)*(10000000/4000.0)));
  1432  000D32  0E0B               	movlw	11
  1433  000D34  0100               	movlb	0	; () banked
  1434  000D36  6FD0               	movwf	(??_startSorting+1)& (0+255),b
  1435  000D38  0EC8               	movlw	200
  1436  000D3A  0100               	movlb	0	; () banked
  1437  000D3C  6FCF               	movwf	??_startSorting& (0+255),b
  1438  000D3E  0EB4               	movlw	180
  1439  000D40                     u4647:
  1440  000D40  2EE8               	decfsz	wreg,f,c
  1441  000D42  D7FE               	bra	u4647
  1442  000D44  2FCF               	decfsz	??_startSorting& (0+255),f,b
  1443  000D46  D7FC               	bra	u4647
  1444  000D48  2FD0               	decfsz	(??_startSorting+1)& (0+255),f,b
  1445  000D4A  D7FA               	bra	u4647
  1446  000D4C  F000               	nop	
  1447                           
  1448                           ;operation.c: 104: LATAbits.LATA0 = 0;
  1449  000D4E  9089               	bcf	3977,0,c	;volatile
  1450                           
  1451                           ;operation.c: 105: LATAbits.LATA1 = 1;
  1452  000D50  8289               	bsf	3977,1,c	;volatile
  1453                           
  1454                           ;operation.c: 106: _delay((unsigned long)((900)*(10000000/4000.0)));
  1455  000D52  0E0C               	movlw	12
  1456  000D54  0100               	movlb	0	; () banked
  1457  000D56  6FD0               	movwf	(??_startSorting+1)& (0+255),b
  1458  000D58  0E6B               	movlw	107
  1459  000D5A  0100               	movlb	0	; () banked
  1460  000D5C  6FCF               	movwf	??_startSorting& (0+255),b
  1461  000D5E  0E09               	movlw	9
  1462  000D60                     u4657:
  1463  000D60  2EE8               	decfsz	wreg,f,c
  1464  000D62  D7FE               	bra	u4657
  1465  000D64  2FCF               	decfsz	??_startSorting& (0+255),f,b
  1466  000D66  D7FC               	bra	u4657
  1467  000D68  2FD0               	decfsz	(??_startSorting+1)& (0+255),f,b
  1468  000D6A  D7FA               	bra	u4657
  1469  000D6C  D000               	nop2	
  1470                           
  1471                           ;operation.c: 107: LATAbits.LATA1 = 0;
  1472  000D6E  9289               	bcf	3977,1,c	;volatile
  1473                           
  1474                           ;operation.c: 108: LATAbits.LATA0 = 1;
  1475  000D70  8089               	bsf	3977,0,c	;volatile
  1476                           
  1477                           ;operation.c: 111: if((fsm2>=20)&&(fsm1>=20)){
  1478  000D72  0100               	movlb	0	; () banked
  1479  000D74  51A0               	movf	(_fsm2+1)& (0+255),w,b
  1480  000D76  E105               	bnz	u4480
  1481  000D78  0E14               	movlw	20
  1482  000D7A  0100               	movlb	0	; () banked
  1483  000D7C  5D9F               	subwf	_fsm2& (0+255),w,b
  1484  000D7E  A0D8               	btfss	status,0,c
  1485  000D80  D02D               	goto	l5436
  1486  000D82                     u4480:
  1487                           
  1488                           ; BSR set to: 0
  1489  000D82  0100               	movlb	0	; () banked
  1490  000D84  5194               	movf	(_fsm1+1)& (0+255),w,b
  1491  000D86  E105               	bnz	u4490
  1492  000D88  0E14               	movlw	20
  1493  000D8A  0100               	movlb	0	; () banked
  1494  000D8C  5D93               	subwf	_fsm1& (0+255),w,b
  1495  000D8E  A0D8               	btfss	status,0,c
  1496  000D90  D025               	goto	l5436
  1497  000D92                     u4490:
  1498                           
  1499                           ; BSR set to: 0
  1500                           ;operation.c: 114: lcdInst(0b10000000);;
  1501  000D92  0E80               	movlw	128
  1502  000D94  EC67  F010         	call	_lcdInst
  1503                           
  1504                           ;operation.c: 115: initLCD();
  1505  000D98  ECA5  F00D         	call	_initLCD	;wreg free
  1506                           
  1507                           ;operation.c: 116: printf("Complete");
  1508  000D9C  0EF6               	movlw	low STR_5
  1509  000D9E  0100               	movlb	0	; () banked
  1510  000DA0  6FB9               	movwf	printf@f& (0+255),b
  1511  000DA2  0EFF               	movlw	high STR_5
  1512  000DA4  0100               	movlb	0	; () banked
  1513  000DA6  6FBA               	movwf	(printf@f+1)& (0+255),b
  1514  000DA8  EC09  F000         	call	_printf	;wreg free
  1515                           
  1516                           ;operation.c: 117: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  1517  000DAC  0E00               	movlw	0
  1518  000DAE  0100               	movlb	0	; () banked
  1519  000DB0  6FD1               	movwf	startSorting@i& (0+255),b
  1520  000DB2                     l5426:
  1521                           
  1522                           ; BSR set to: 0
  1523  000DB2  0E09               	movlw	9
  1524  000DB4  0100               	movlb	0	; () banked
  1525  000DB6  65D1               	cpfsgt	startSorting@i& (0+255),b
  1526  000DB8  D001               	goto	l5430
  1527  000DBA  0012               	return	
  1528  000DBC                     l5430:
  1529                           
  1530                           ; BSR set to: 0
  1531  000DBC  0E02               	movlw	2
  1532  000DBE  0100               	movlb	0	; () banked
  1533  000DC0  6FD0               	movwf	(??_startSorting+1)& (0+255),b
  1534  000DC2  0E3F               	movlw	63
  1535  000DC4  0100               	movlb	0	; () banked
  1536  000DC6  6FCF               	movwf	??_startSorting& (0+255),b
  1537  000DC8  0E2B               	movlw	43
  1538  000DCA                     u4667:
  1539  000DCA  2EE8               	decfsz	wreg,f,c
  1540  000DCC  D7FE               	bra	u4667
  1541  000DCE  2FCF               	decfsz	??_startSorting& (0+255),f,b
  1542  000DD0  D7FC               	bra	u4667
  1543  000DD2  2FD0               	decfsz	(??_startSorting+1)& (0+255),f,b
  1544  000DD4  D7FA               	bra	u4667
  1545  000DD6  0100               	movlb	0	; () banked
  1546  000DD8  2BD1               	incf	startSorting@i& (0+255),f,b
  1547  000DDA  D7EB               	goto	l5426
  1548  000DDC                     l5436:
  1549                           
  1550                           ; BSR set to: 0
  1551  000DDC  0100               	movlb	0	; () banked
  1552  000DDE  5192               	movf	(_check+1)& (0+255),w,b
  1553  000DE0  E105               	bnz	u4520
  1554  000DE2  0EAD               	movlw	173
  1555  000DE4  0100               	movlb	0	; () banked
  1556  000DE6  5D91               	subwf	_check& (0+255),w,b
  1557  000DE8  A0D8               	btfss	status,0,c
  1558  000DEA  D755               	goto	l5386
  1559  000DEC                     u4520:
  1560                           
  1561                           ; BSR set to: 0
  1562                           ;operation.c: 122: lcdInst(0b10000000);;
  1563  000DEC  0E80               	movlw	128
  1564  000DEE  EC67  F010         	call	_lcdInst
  1565                           
  1566                           ;operation.c: 123: initLCD();
  1567  000DF2  ECA5  F00D         	call	_initLCD	;wreg free
  1568                           
  1569                           ;operation.c: 124: printf("Time is up");
  1570  000DF6  0EEB               	movlw	low STR_6
  1571  000DF8  0100               	movlb	0	; () banked
  1572  000DFA  6FB9               	movwf	printf@f& (0+255),b
  1573  000DFC  0EFF               	movlw	high STR_6
  1574  000DFE  0100               	movlb	0	; () banked
  1575  000E00  6FBA               	movwf	(printf@f+1)& (0+255),b
  1576  000E02  EC09  F000         	call	_printf	;wreg free
  1577                           
  1578                           ;operation.c: 125: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  1579  000E06  0E00               	movlw	0
  1580  000E08  0100               	movlb	0	; () banked
  1581  000E0A  6FD2               	movwf	startSorting@i_835& (0+255),b
  1582  000E0C                     l5444:
  1583                           
  1584                           ; BSR set to: 0
  1585  000E0C  0E09               	movlw	9
  1586  000E0E  0100               	movlb	0	; () banked
  1587  000E10  65D2               	cpfsgt	startSorting@i_835& (0+255),b
  1588  000E12  D001               	goto	l5448
  1589  000E14  0012               	return	
  1590  000E16                     l5448:
  1591                           
  1592                           ; BSR set to: 0
  1593  000E16  0E02               	movlw	2
  1594  000E18  0100               	movlb	0	; () banked
  1595  000E1A  6FD0               	movwf	(??_startSorting+1)& (0+255),b
  1596  000E1C  0E3F               	movlw	63
  1597  000E1E  0100               	movlb	0	; () banked
  1598  000E20  6FCF               	movwf	??_startSorting& (0+255),b
  1599  000E22  0E2B               	movlw	43
  1600  000E24                     u4677:
  1601  000E24  2EE8               	decfsz	wreg,f,c
  1602  000E26  D7FE               	bra	u4677
  1603  000E28  2FCF               	decfsz	??_startSorting& (0+255),f,b
  1604  000E2A  D7FC               	bra	u4677
  1605  000E2C  2FD0               	decfsz	(??_startSorting+1)& (0+255),f,b
  1606  000E2E  D7FA               	bra	u4677
  1607  000E30  0100               	movlb	0	; () banked
  1608  000E32  2BD2               	incf	startSorting@i_835& (0+255),f,b
  1609  000E34  D7EB               	goto	l5444
  1610  000E36                     __end_of_startSorting:
  1611                           	opt stack 0
  1612                           tosu	equ	0xFFF
  1613                           tosh	equ	0xFFE
  1614                           tosl	equ	0xFFD
  1615                           pclath	equ	0xFFA
  1616                           intcon2	equ	0xFF1
  1617                           intcon3	equ	0xFF0
  1618                           postinc0	equ	0xFEE
  1619                           wreg	equ	0xFE8
  1620                           status	equ	0xFD8
  1621                           
  1622 ;; *************** function _top_rocker_release *****************
  1623 ;; Defined at:
  1624 ;;		line 103 in file "top_rocker_fsm.c"
  1625 ;; Parameters:    Size  Location     Type
  1626 ;;		None
  1627 ;; Auto vars:     Size  Location     Type
  1628 ;;		None
  1629 ;; Return value:  Size  Location     Type
  1630 ;;                  1    wreg      void 
  1631 ;; Registers used:
  1632 ;;		wreg, status,2, status,0, cstack
  1633 ;; Tracked objects:
  1634 ;;		On entry : 0/0
  1635 ;;		On exit  : 0/0
  1636 ;;		Unchanged: 0/0
  1637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1640 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1641 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1642 ;;Total ram usage:        2 bytes
  1643 ;; Hardware stack levels used:    1
  1644 ;; Hardware stack levels required when called:    6
  1645 ;; This function calls:
  1646 ;;		_top_servo_rightTilt
  1647 ;; This function is called by:
  1648 ;;		_solenoids_back
  1649 ;;		_startSorting
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           	psect	text2
  1654  001D30                     __ptext2:
  1655                           	opt stack 0
  1656  001D30                     _top_rocker_release:
  1657                           	opt stack 23
  1658                           
  1659                           ;top_rocker_fsm.c: 106: top_servo_rightTilt();
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;incstack = 0
  1663  001D30  EC5B  F00D         	call	_top_servo_rightTilt	;wreg free
  1664                           
  1665                           ;top_rocker_fsm.c: 107: top_servo_rightTilt();
  1666  001D34  EC5B  F00D         	call	_top_servo_rightTilt	;wreg free
  1667                           
  1668                           ;top_rocker_fsm.c: 108: _delay((unsigned long)((300)*(10000000/4000.0)));
  1669  001D38  0E04               	movlw	4
  1670  001D3A  0100               	movlb	0	; () banked
  1671  001D3C  6FAF               	movwf	(??_top_rocker_release+1)& (0+255),b
  1672  001D3E  0ECF               	movlw	207
  1673  001D40  0100               	movlb	0	; () banked
  1674  001D42  6FAE               	movwf	??_top_rocker_release& (0+255),b
  1675  001D44  0E01               	movlw	1
  1676  001D46                     u4687:
  1677  001D46  2EE8               	decfsz	wreg,f,c
  1678  001D48  D7FE               	bra	u4687
  1679  001D4A  2FAE               	decfsz	??_top_rocker_release& (0+255),f,b
  1680  001D4C  D7FC               	bra	u4687
  1681  001D4E  2FAF               	decfsz	(??_top_rocker_release+1)& (0+255),f,b
  1682  001D50  D7FA               	bra	u4687
  1683  001D52  D000               	nop2	
  1684                           
  1685                           ;top_rocker_fsm.c: 111: topRockerState = top_rocker_restore;
  1686  001D54  0E9A               	movlw	low _top_rocker_restore
  1687  001D56  0100               	movlb	0	; () banked
  1688  001D58  6FA7               	movwf	_topRockerState& (0+255),b
  1689  001D5A  0E20               	movlw	high _top_rocker_restore
  1690  001D5C  0100               	movlb	0	; () banked
  1691  001D5E  6FA8               	movwf	(_topRockerState+1)& (0+255),b
  1692  001D60  0012               	return	
  1693  001D62                     __end_of_top_rocker_release:
  1694                           	opt stack 0
  1695                           tosu	equ	0xFFF
  1696                           tosh	equ	0xFFE
  1697                           tosl	equ	0xFFD
  1698                           pclath	equ	0xFFA
  1699                           intcon2	equ	0xFF1
  1700                           intcon3	equ	0xFF0
  1701                           postinc0	equ	0xFEE
  1702                           wreg	equ	0xFE8
  1703                           status	equ	0xFD8
  1704                           
  1705 ;; *************** function _solenoids_back *****************
  1706 ;; Defined at:
  1707 ;;		line 70 in file "top_rocker_fsm.c"
  1708 ;; Parameters:    Size  Location     Type
  1709 ;;		None
  1710 ;; Auto vars:     Size  Location     Type
  1711 ;;		None
  1712 ;; Return value:  Size  Location     Type
  1713 ;;                  1    wreg      void 
  1714 ;; Registers used:
  1715 ;;		wreg, status,2, status,0, cstack
  1716 ;; Tracked objects:
  1717 ;;		On entry : 0/0
  1718 ;;		On exit  : 0/0
  1719 ;;		Unchanged: 0/0
  1720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1723 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1724 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1725 ;;Total ram usage:        1 bytes
  1726 ;; Hardware stack levels used:    1
  1727 ;; Hardware stack levels required when called:    6
  1728 ;; This function calls:
  1729 ;;		_go_back
  1730 ;; This function is called by:
  1731 ;;		_solenoids_out
  1732 ;;		_startSorting
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           	psect	text3
  1737  00197E                     __ptext3:
  1738                           	opt stack 0
  1739  00197E                     _solenoids_back:
  1740                           	opt stack 23
  1741                           
  1742                           ;top_rocker_fsm.c: 72: tabed = PORTCbits.RC1;
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;incstack = 0
  1746  00197E  A282               	btfss	3970,1,c	;volatile
  1747  001980  D004               	goto	u4300
  1748  001982  0100               	movlb	0	; () banked
  1749  001984  6BAD               	clrf	??_solenoids_back& (0+255),b
  1750  001986  2BAD               	incf	??_solenoids_back& (0+255),f,b
  1751  001988  D002               	goto	u4308
  1752  00198A                     u4300:
  1753  00198A  0100               	movlb	0	; () banked
  1754  00198C  6BAD               	clrf	??_solenoids_back& (0+255),b
  1755  00198E                     u4308:
  1756  00198E  0100               	movlb	0	; () banked
  1757  001990  51AD               	movf	??_solenoids_back& (0+255),w,b
  1758  001992  6E45               	movwf	_tabed,c
  1759  001994  6A46               	clrf	_tabed+1,c
  1760                           
  1761                           ; BSR set to: 0
  1762                           ;top_rocker_fsm.c: 74: if(tabed){
  1763  001996  5045               	movf	_tabed,w,c
  1764  001998  1046               	iorwf	_tabed+1,w,c
  1765  00199A  B4D8               	btfsc	status,2,c
  1766  00199C  D008               	goto	l5268
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;top_rocker_fsm.c: 75: top_move = 1;
  1770  00199E  0E00               	movlw	0
  1771  0019A0  6E44               	movwf	_top_move+1,c
  1772  0019A2  0E01               	movlw	1
  1773  0019A4  6E43               	movwf	_top_move,c
  1774                           
  1775                           ; BSR set to: 0
  1776                           ;top_rocker_fsm.c: 77: pop_can_tab++;
  1777  0019A6  0100               	movlb	0	; () banked
  1778  0019A8  4B95               	infsnz	_pop_can_tab& (0+255),f,b
  1779  0019AA  2B96               	incf	(_pop_can_tab+1)& (0+255),f,b
  1780                           
  1781                           ;top_rocker_fsm.c: 79: }else{
  1782  0019AC  D007               	goto	l5272
  1783  0019AE                     l5268:
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;top_rocker_fsm.c: 88: pop_can++;
  1787  0019AE  0100               	movlb	0	; () banked
  1788  0019B0  4B97               	infsnz	_pop_can& (0+255),f,b
  1789  0019B2  2B98               	incf	(_pop_can+1)& (0+255),f,b
  1790                           
  1791                           ; BSR set to: 0
  1792                           ;top_rocker_fsm.c: 89: top_move = 0;
  1793  0019B4  0E00               	movlw	0
  1794  0019B6  6E44               	movwf	_top_move+1,c
  1795  0019B8  0E00               	movlw	0
  1796  0019BA  6E43               	movwf	_top_move,c
  1797  0019BC                     l5272:
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;top_rocker_fsm.c: 90: }
  1801                           ;top_rocker_fsm.c: 93: go_back();
  1802  0019BC  EC07  F010         	call	_go_back	;wreg free
  1803                           
  1804                           ;top_rocker_fsm.c: 96: topRockerState = top_rocker_release;
  1805  0019C0  0E30               	movlw	low _top_rocker_release
  1806  0019C2  0100               	movlb	0	; () banked
  1807  0019C4  6FA7               	movwf	_topRockerState& (0+255),b
  1808  0019C6  0E1D               	movlw	high _top_rocker_release
  1809  0019C8  0100               	movlb	0	; () banked
  1810  0019CA  6FA8               	movwf	(_topRockerState+1)& (0+255),b
  1811  0019CC  0012               	return	
  1812  0019CE                     __end_of_solenoids_back:
  1813                           	opt stack 0
  1814                           tosu	equ	0xFFF
  1815                           tosh	equ	0xFFE
  1816                           tosl	equ	0xFFD
  1817                           pclath	equ	0xFFA
  1818                           intcon2	equ	0xFF1
  1819                           intcon3	equ	0xFF0
  1820                           postinc0	equ	0xFEE
  1821                           wreg	equ	0xFE8
  1822                           status	equ	0xFD8
  1823                           
  1824 ;; *************** function _solenoids_out *****************
  1825 ;; Defined at:
  1826 ;;		line 58 in file "top_rocker_fsm.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;		None
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;		None
  1831 ;; Return value:  Size  Location     Type
  1832 ;;                  1    wreg      void 
  1833 ;; Registers used:
  1834 ;;		wreg, status,2, status,0, cstack
  1835 ;; Tracked objects:
  1836 ;;		On entry : 0/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1844 ;;Total ram usage:        0 bytes
  1845 ;; Hardware stack levels used:    1
  1846 ;; Hardware stack levels required when called:    6
  1847 ;; This function calls:
  1848 ;;		_pop_out
  1849 ;; This function is called by:
  1850 ;;		_top_rocker_idle
  1851 ;;		_startSorting
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           	psect	text4
  1856  00206C                     __ptext4:
  1857                           	opt stack 0
  1858  00206C                     _solenoids_out:
  1859                           	opt stack 23
  1860                           
  1861                           ;top_rocker_fsm.c: 60: pop_out();
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;incstack = 0
  1865  00206C  ECF7  F00F         	call	_pop_out	;wreg free
  1866                           
  1867                           ;top_rocker_fsm.c: 62: topRockerState = solenoids_back;
  1868  002070  0E7E               	movlw	low _solenoids_back
  1869  002072  0100               	movlb	0	; () banked
  1870  002074  6FA7               	movwf	_topRockerState& (0+255),b
  1871  002076  0E19               	movlw	high _solenoids_back
  1872  002078  0100               	movlb	0	; () banked
  1873  00207A  6FA8               	movwf	(_topRockerState+1)& (0+255),b
  1874                           
  1875                           ; BSR set to: 0
  1876                           ;top_rocker_fsm.c: 65: start_top_distribution = 1;
  1877  00207C  0E00               	movlw	0
  1878  00207E  6E42               	movwf	_start_top_distribution+1,c
  1879  002080  0E01               	movlw	1
  1880  002082  6E41               	movwf	_start_top_distribution,c
  1881  002084  0012               	return	
  1882  002086                     __end_of_solenoids_out:
  1883                           	opt stack 0
  1884                           tosu	equ	0xFFF
  1885                           tosh	equ	0xFFE
  1886                           tosl	equ	0xFFD
  1887                           pclath	equ	0xFFA
  1888                           intcon2	equ	0xFF1
  1889                           intcon3	equ	0xFF0
  1890                           postinc0	equ	0xFEE
  1891                           wreg	equ	0xFE8
  1892                           status	equ	0xFD8
  1893                           
  1894 ;; *************** function _top_rocker_idle *****************
  1895 ;; Defined at:
  1896 ;;		line 43 in file "top_rocker_fsm.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;		None
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;		None
  1901 ;; Return value:  Size  Location     Type
  1902 ;;                  1    wreg      void 
  1903 ;; Registers used:
  1904 ;;		wreg, status,2, status,0, cstack
  1905 ;; Tracked objects:
  1906 ;;		On entry : 0/0
  1907 ;;		On exit  : 0/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1914 ;;Total ram usage:        0 bytes
  1915 ;; Hardware stack levels used:    1
  1916 ;; Hardware stack levels required when called:    8
  1917 ;; This function calls:
  1918 ;;		_initLCD
  1919 ;; This function is called by:
  1920 ;;		_top_rocker_initial
  1921 ;;		_top_rocker_restore
  1922 ;;		_startSorting
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925                           
  1926                           	psect	text5
  1927  001CFC                     __ptext5:
  1928                           	opt stack 0
  1929  001CFC                     _top_rocker_idle:
  1930                           	opt stack 21
  1931                           
  1932                           ;top_rocker_fsm.c: 46: initLCD();
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;incstack = 0
  1936  001CFC  ECA5  F00D         	call	_initLCD	;wreg free
  1937                           
  1938                           ;top_rocker_fsm.c: 47: if(PORTCbits.RC0 == 1){
  1939  001D00  A082               	btfss	3970,0,c	;volatile
  1940  001D02  D00A               	goto	l5246
  1941                           
  1942                           ;top_rocker_fsm.c: 48: topRockerState = top_rocker_idle;
  1943  001D04  0EFC               	movlw	low _top_rocker_idle
  1944  001D06  0100               	movlb	0	; () banked
  1945  001D08  6FA7               	movwf	_topRockerState& (0+255),b
  1946  001D0A  0E1C               	movlw	high _top_rocker_idle
  1947  001D0C  0100               	movlb	0	; () banked
  1948  001D0E  6FA8               	movwf	(_topRockerState+1)& (0+255),b
  1949                           
  1950                           ; BSR set to: 0
  1951                           ;top_rocker_fsm.c: 49: fsm1 ++;
  1952  001D10  0100               	movlb	0	; () banked
  1953  001D12  4B93               	infsnz	_fsm1& (0+255),f,b
  1954  001D14  2B94               	incf	(_fsm1+1)& (0+255),f,b
  1955                           
  1956                           ;top_rocker_fsm.c: 51: }else{
  1957  001D16  0012               	return	
  1958  001D18                     l5246:
  1959                           
  1960                           ;top_rocker_fsm.c: 52: topRockerState = solenoids_out;
  1961  001D18  0E6C               	movlw	low _solenoids_out
  1962  001D1A  0100               	movlb	0	; () banked
  1963  001D1C  6FA7               	movwf	_topRockerState& (0+255),b
  1964  001D1E  0E20               	movlw	high _solenoids_out
  1965  001D20  0100               	movlb	0	; () banked
  1966  001D22  6FA8               	movwf	(_topRockerState+1)& (0+255),b
  1967                           
  1968                           ; BSR set to: 0
  1969                           ;top_rocker_fsm.c: 53: fsm1 = 0;
  1970  001D24  0E00               	movlw	0
  1971  001D26  0100               	movlb	0	; () banked
  1972  001D28  6F94               	movwf	(_fsm1+1)& (0+255),b
  1973  001D2A  0E00               	movlw	0
  1974  001D2C  6F93               	movwf	_fsm1& (0+255),b
  1975                           
  1976                           ; BSR set to: 0
  1977  001D2E  0012               	return	
  1978  001D30                     __end_of_top_rocker_idle:
  1979                           	opt stack 0
  1980                           tosu	equ	0xFFF
  1981                           tosh	equ	0xFFE
  1982                           tosl	equ	0xFFD
  1983                           pclath	equ	0xFFA
  1984                           intcon2	equ	0xFF1
  1985                           intcon3	equ	0xFF0
  1986                           postinc0	equ	0xFEE
  1987                           wreg	equ	0xFE8
  1988                           status	equ	0xFD8
  1989                           
  1990 ;; *************** function _top_rocker_restore *****************
  1991 ;; Defined at:
  1992 ;;		line 116 in file "top_rocker_fsm.c"
  1993 ;; Parameters:    Size  Location     Type
  1994 ;;		None
  1995 ;; Auto vars:     Size  Location     Type
  1996 ;;		None
  1997 ;; Return value:  Size  Location     Type
  1998 ;;                  1    wreg      void 
  1999 ;; Registers used:
  2000 ;;		wreg, status,2, status,0, cstack
  2001 ;; Tracked objects:
  2002 ;;		On entry : 0/0
  2003 ;;		On exit  : 0/0
  2004 ;;		Unchanged: 0/0
  2005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2009 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2010 ;;Total ram usage:        0 bytes
  2011 ;; Hardware stack levels used:    1
  2012 ;; Hardware stack levels required when called:    6
  2013 ;; This function calls:
  2014 ;;		_top_servo_leftTilt
  2015 ;; This function is called by:
  2016 ;;		_top_rocker_release
  2017 ;;		_startSorting
  2018 ;; This function uses a non-reentrant model
  2019 ;;
  2020                           
  2021                           	psect	text6
  2022  00209A                     __ptext6:
  2023                           	opt stack 0
  2024  00209A                     _top_rocker_restore:
  2025                           	opt stack 23
  2026                           
  2027                           ;top_rocker_fsm.c: 119: top_servo_leftTilt();
  2028                           
  2029                           ; BSR set to: 0
  2030                           ;incstack = 0
  2031  00209A  EC36  F00D         	call	_top_servo_leftTilt	;wreg free
  2032                           
  2033                           ;top_rocker_fsm.c: 124: topRockerState = top_rocker_idle;
  2034  00209E  0EFC               	movlw	low _top_rocker_idle
  2035  0020A0  0100               	movlb	0	; () banked
  2036  0020A2  6FA7               	movwf	_topRockerState& (0+255),b
  2037  0020A4  0E1C               	movlw	high _top_rocker_idle
  2038  0020A6  0100               	movlb	0	; () banked
  2039  0020A8  6FA8               	movwf	(_topRockerState+1)& (0+255),b
  2040  0020AA  0012               	return	
  2041  0020AC                     __end_of_top_rocker_restore:
  2042                           	opt stack 0
  2043                           tosu	equ	0xFFF
  2044                           tosh	equ	0xFFE
  2045                           tosl	equ	0xFFD
  2046                           pclath	equ	0xFFA
  2047                           intcon2	equ	0xFF1
  2048                           intcon3	equ	0xFF0
  2049                           postinc0	equ	0xFEE
  2050                           wreg	equ	0xFE8
  2051                           status	equ	0xFD8
  2052                           
  2053 ;; *************** function _top_servo_leftTilt *****************
  2054 ;; Defined at:
  2055 ;;		line 84 in file "servo.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;		None
  2058 ;; Auto vars:     Size  Location     Type
  2059 ;;  i               2    1[BANK0 ] unsigned int 
  2060 ;; Return value:  Size  Location     Type
  2061 ;;                  1    wreg      void 
  2062 ;; Registers used:
  2063 ;;		wreg, status,2, status,0
  2064 ;; Tracked objects:
  2065 ;;		On entry : 0/0
  2066 ;;		On exit  : 0/0
  2067 ;;		Unchanged: 0/0
  2068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2070 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2071 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2072 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2073 ;;Total ram usage:        3 bytes
  2074 ;; Hardware stack levels used:    1
  2075 ;; Hardware stack levels required when called:    5
  2076 ;; This function calls:
  2077 ;;		Nothing
  2078 ;; This function is called by:
  2079 ;;		_top_rocker_restore
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083                           	psect	text7
  2084  001A6C                     __ptext7:
  2085                           	opt stack 0
  2086  001A6C                     _top_servo_leftTilt:
  2087                           	opt stack 23
  2088                           
  2089                           ;servo.c: 86: unsigned int i;
  2090                           ;servo.c: 87: for(i=0;i<12;i++)
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;incstack = 0
  2094  001A6C  0E00               	movlw	0
  2095  001A6E  0100               	movlb	0	; () banked
  2096  001A70  6FAD               	movwf	(top_servo_leftTilt@i+1)& (0+255),b
  2097  001A72  0E00               	movlw	0
  2098  001A74  6FAC               	movwf	top_servo_leftTilt@i& (0+255),b
  2099  001A76                     l4738:
  2100                           
  2101                           ; BSR set to: 0
  2102  001A76  0100               	movlb	0	; () banked
  2103  001A78  51AD               	movf	(top_servo_leftTilt@i+1)& (0+255),w,b
  2104  001A7A  E11C               	bnz	l734
  2105  001A7C  0E0C               	movlw	12
  2106  001A7E  0100               	movlb	0	; () banked
  2107  001A80  5DAC               	subwf	top_servo_leftTilt@i& (0+255),w,b
  2108  001A82  B0D8               	btfsc	status,0,c
  2109  001A84  0012               	return	
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;servo.c: 88: {
  2113                           ;servo.c: 89: LATBbits.LATB2 = 1;
  2114                           
  2115                           ; BSR set to: 0
  2116  001A86  848A               	bsf	3978,2,c	;volatile
  2117                           
  2118                           ; BSR set to: 0
  2119                           ;servo.c: 90: _delay((unsigned long)((800)*(10000000/4000000.0)));
  2120  001A88  0E03               	movlw	3
  2121  001A8A  0100               	movlb	0	; () banked
  2122  001A8C  6FAB               	movwf	??_top_servo_leftTilt& (0+255),b
  2123  001A8E  0E97               	movlw	151
  2124  001A90                     u4697:
  2125  001A90  2EE8               	decfsz	wreg,f,c
  2126  001A92  D7FE               	bra	u4697
  2127  001A94  2FAB               	decfsz	??_top_servo_leftTilt& (0+255),f,b
  2128  001A96  D7FC               	bra	u4697
  2129  001A98  D000               	nop2	
  2130                           
  2131                           ;servo.c: 91: LATBbits.LATB2 = 0;
  2132  001A9A  948A               	bcf	3978,2,c	;volatile
  2133                           
  2134                           ;servo.c: 92: _delay((unsigned long)((19200)*(10000000/4000000.0)));
  2135  001A9C  0E3F               	movlw	63
  2136  001A9E  0100               	movlb	0	; () banked
  2137  001AA0  6FAB               	movwf	??_top_servo_leftTilt& (0+255),b
  2138  001AA2  0E55               	movlw	85
  2139  001AA4                     u4707:
  2140  001AA4  2EE8               	decfsz	wreg,f,c
  2141  001AA6  D7FE               	bra	u4707
  2142  001AA8  2FAB               	decfsz	??_top_servo_leftTilt& (0+255),f,b
  2143  001AAA  D7FC               	bra	u4707
  2144  001AAC  0100               	movlb	0	; () banked
  2145  001AAE  4BAC               	infsnz	top_servo_leftTilt@i& (0+255),f,b
  2146  001AB0  2BAD               	incf	(top_servo_leftTilt@i+1)& (0+255),f,b
  2147  001AB2  D7E1               	goto	l4738
  2148  001AB4                     l734:
  2149                           
  2150                           ; BSR set to: 0
  2151  001AB4  0012               	return		;funcret
  2152  001AB6                     __end_of_top_servo_leftTilt:
  2153                           	opt stack 0
  2154                           tosu	equ	0xFFF
  2155                           tosh	equ	0xFFE
  2156                           tosl	equ	0xFFD
  2157                           pclath	equ	0xFFA
  2158                           intcon2	equ	0xFF1
  2159                           intcon3	equ	0xFF0
  2160                           postinc0	equ	0xFEE
  2161                           wreg	equ	0xFE8
  2162                           status	equ	0xFD8
  2163                           
  2164 ;; *************** function _top_servo_rightTilt *****************
  2165 ;; Defined at:
  2166 ;;		line 70 in file "servo.c"
  2167 ;; Parameters:    Size  Location     Type
  2168 ;;		None
  2169 ;; Auto vars:     Size  Location     Type
  2170 ;;  i               2    1[BANK0 ] unsigned int 
  2171 ;; Return value:  Size  Location     Type
  2172 ;;                  1    wreg      void 
  2173 ;; Registers used:
  2174 ;;		wreg, status,2, status,0
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2181 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2182 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2183 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2184 ;;Total ram usage:        3 bytes
  2185 ;; Hardware stack levels used:    1
  2186 ;; Hardware stack levels required when called:    5
  2187 ;; This function calls:
  2188 ;;		Nothing
  2189 ;; This function is called by:
  2190 ;;		_top_rocker_release
  2191 ;; This function uses a non-reentrant model
  2192 ;;
  2193                           
  2194                           	psect	text8
  2195  001AB6                     __ptext8:
  2196                           	opt stack 0
  2197  001AB6                     _top_servo_rightTilt:
  2198                           	opt stack 23
  2199                           
  2200                           ;servo.c: 72: unsigned int i;
  2201                           ;servo.c: 73: for(i=0;i<6;i++)
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;incstack = 0
  2205  001AB6  0E00               	movlw	0
  2206  001AB8  0100               	movlb	0	; () banked
  2207  001ABA  6FAD               	movwf	(top_servo_rightTilt@i+1)& (0+255),b
  2208  001ABC  0E00               	movlw	0
  2209  001ABE  6FAC               	movwf	top_servo_rightTilt@i& (0+255),b
  2210  001AC0                     l4726:
  2211                           
  2212                           ; BSR set to: 0
  2213  001AC0  0100               	movlb	0	; () banked
  2214  001AC2  51AD               	movf	(top_servo_rightTilt@i+1)& (0+255),w,b
  2215  001AC4  E11C               	bnz	l729
  2216  001AC6  0E06               	movlw	6
  2217  001AC8  0100               	movlb	0	; () banked
  2218  001ACA  5DAC               	subwf	top_servo_rightTilt@i& (0+255),w,b
  2219  001ACC  B0D8               	btfsc	status,0,c
  2220  001ACE  0012               	return	
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;servo.c: 74: {
  2224                           ;servo.c: 75: LATBbits.LATB2 = 1;
  2225                           
  2226                           ; BSR set to: 0
  2227  001AD0  848A               	bsf	3978,2,c	;volatile
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;servo.c: 76: _delay((unsigned long)((2200)*(10000000/4000000.0)));
  2231  001AD2  0E08               	movlw	8
  2232  001AD4  0100               	movlb	0	; () banked
  2233  001AD6  6FAB               	movwf	??_top_servo_rightTilt& (0+255),b
  2234  001AD8  0E23               	movlw	35
  2235  001ADA                     u4717:
  2236  001ADA  2EE8               	decfsz	wreg,f,c
  2237  001ADC  D7FE               	bra	u4717
  2238  001ADE  2FAB               	decfsz	??_top_servo_rightTilt& (0+255),f,b
  2239  001AE0  D7FC               	bra	u4717
  2240                           
  2241                           ;servo.c: 78: LATBbits.LATB2 = 0;
  2242  001AE2  948A               	bcf	3978,2,c	;volatile
  2243                           
  2244                           ;servo.c: 79: _delay((unsigned long)((17800)*(10000000/4000000.0)));
  2245  001AE4  0E3A               	movlw	58
  2246  001AE6  0100               	movlb	0	; () banked
  2247  001AE8  6FAB               	movwf	??_top_servo_rightTilt& (0+255),b
  2248  001AEA  0EC9               	movlw	201
  2249  001AEC                     u4727:
  2250  001AEC  2EE8               	decfsz	wreg,f,c
  2251  001AEE  D7FE               	bra	u4727
  2252  001AF0  2FAB               	decfsz	??_top_servo_rightTilt& (0+255),f,b
  2253  001AF2  D7FC               	bra	u4727
  2254  001AF4  D000               	nop2	
  2255  001AF6  0100               	movlb	0	; () banked
  2256  001AF8  4BAC               	infsnz	top_servo_rightTilt@i& (0+255),f,b
  2257  001AFA  2BAD               	incf	(top_servo_rightTilt@i+1)& (0+255),f,b
  2258  001AFC  D7E1               	goto	l4726
  2259  001AFE                     l729:
  2260                           
  2261                           ; BSR set to: 0
  2262  001AFE  0012               	return		;funcret
  2263  001B00                     __end_of_top_servo_rightTilt:
  2264                           	opt stack 0
  2265                           tosu	equ	0xFFF
  2266                           tosh	equ	0xFFE
  2267                           tosl	equ	0xFFD
  2268                           pclath	equ	0xFFA
  2269                           intcon2	equ	0xFF1
  2270                           intcon3	equ	0xFF0
  2271                           postinc0	equ	0xFEE
  2272                           wreg	equ	0xFE8
  2273                           status	equ	0xFD8
  2274                           
  2275 ;; *************** function _top_distribution_move *****************
  2276 ;; Defined at:
  2277 ;;		line 68 in file "top_distribution_fsm.c"
  2278 ;; Parameters:    Size  Location     Type
  2279 ;;		None
  2280 ;; Auto vars:     Size  Location     Type
  2281 ;;		None
  2282 ;; Return value:  Size  Location     Type
  2283 ;;                  1    wreg      void 
  2284 ;; Registers used:
  2285 ;;		wreg, status,2, status,0, cstack
  2286 ;; Tracked objects:
  2287 ;;		On entry : 0/0
  2288 ;;		On exit  : 0/0
  2289 ;;		Unchanged: 0/0
  2290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2293 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2294 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2295 ;;Total ram usage:        1 bytes
  2296 ;; Hardware stack levels used:    1
  2297 ;; Hardware stack levels required when called:    6
  2298 ;; This function calls:
  2299 ;;		_top_distribution_motor_ccw
  2300 ;;		_top_distribution_motor_ccw2
  2301 ;;		_top_distribution_motor_cw
  2302 ;;		_top_distribution_motor_cw2
  2303 ;; This function is called by:
  2304 ;;		_top_distribution_prepare
  2305 ;;		_startSorting
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308                           
  2309                           	psect	text9
  2310  0018D8                     __ptext9:
  2311                           	opt stack 0
  2312  0018D8                     _top_distribution_move:
  2313                           	opt stack 23
  2314                           
  2315                           ;top_distribution_fsm.c: 72: if(t_m == 1){
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;incstack = 0
  2319  0018D8  043F               	decf	_t_m,w,c
  2320  0018DA  1040               	iorwf	_t_m+1,w,c
  2321  0018DC  A4D8               	btfss	status,2,c
  2322  0018DE  D010               	goto	l5228
  2323                           
  2324                           ;top_distribution_fsm.c: 73: top_distribution_motor_ccw();
  2325  0018E0  EC75  F00F         	call	_top_distribution_motor_ccw	;wreg free
  2326                           
  2327                           ;top_distribution_fsm.c: 80: top_distribution_motor_ccw2();
  2328  0018E4  EC62  F00F         	call	_top_distribution_motor_ccw2	;wreg free
  2329                           
  2330                           ;top_distribution_fsm.c: 81: _delay((unsigned long)((30)*(10000000/4000.0)));
  2331  0018E8  0E62               	movlw	98
  2332  0018EA  0100               	movlb	0	; () banked
  2333  0018EC  6FAD               	movwf	??_top_distribution_move& (0+255),b
  2334  0018EE  0E65               	movlw	101
  2335  0018F0                     u4737:
  2336  0018F0  2EE8               	decfsz	wreg,f,c
  2337  0018F2  D7FE               	bra	u4737
  2338  0018F4  2FAD               	decfsz	??_top_distribution_move& (0+255),f,b
  2339  0018F6  D7FC               	bra	u4737
  2340  0018F8  D000               	nop2	
  2341                           
  2342                           ;top_distribution_fsm.c: 82: top_distribution_motor_cw2();
  2343  0018FA  EC3C  F00F         	call	_top_distribution_motor_cw2	;wreg free
  2344                           
  2345                           ;top_distribution_fsm.c: 84: }else{
  2346  0018FE  D00F               	goto	l5234
  2347  001900                     l5228:
  2348                           
  2349                           ;top_distribution_fsm.c: 85: top_distribution_motor_cw();
  2350  001900  EC4F  F00F         	call	_top_distribution_motor_cw	;wreg free
  2351                           
  2352                           ;top_distribution_fsm.c: 92: top_distribution_motor_cw2();
  2353  001904  EC3C  F00F         	call	_top_distribution_motor_cw2	;wreg free
  2354                           
  2355                           ;top_distribution_fsm.c: 93: _delay((unsigned long)((30)*(10000000/4000.0)));
  2356  001908  0E62               	movlw	98
  2357  00190A  0100               	movlb	0	; () banked
  2358  00190C  6FAD               	movwf	??_top_distribution_move& (0+255),b
  2359  00190E  0E65               	movlw	101
  2360  001910                     u4747:
  2361  001910  2EE8               	decfsz	wreg,f,c
  2362  001912  D7FE               	bra	u4747
  2363  001914  2FAD               	decfsz	??_top_distribution_move& (0+255),f,b
  2364  001916  D7FC               	bra	u4747
  2365  001918  D000               	nop2	
  2366                           
  2367                           ;top_distribution_fsm.c: 94: top_distribution_motor_ccw2();
  2368  00191A  EC62  F00F         	call	_top_distribution_motor_ccw2	;wreg free
  2369  00191E                     l5234:
  2370                           
  2371                           ;top_distribution_fsm.c: 97: }
  2372                           ;top_distribution_fsm.c: 100: topDistributionState = top_distribution_idle;
  2373  00191E  0E22               	movlw	low _top_distribution_idle
  2374  001920  0100               	movlb	0	; () banked
  2375  001922  6FA5               	movwf	_topDistributionState& (0+255),b
  2376  001924  0E1E               	movlw	high _top_distribution_idle
  2377  001926  0100               	movlb	0	; () banked
  2378  001928  6FA6               	movwf	(_topDistributionState+1)& (0+255),b
  2379  00192A  0012               	return	
  2380  00192C                     __end_of_top_distribution_move:
  2381                           	opt stack 0
  2382                           tosu	equ	0xFFF
  2383                           tosh	equ	0xFFE
  2384                           tosl	equ	0xFFD
  2385                           pclath	equ	0xFFA
  2386                           intcon2	equ	0xFF1
  2387                           intcon3	equ	0xFF0
  2388                           postinc0	equ	0xFEE
  2389                           wreg	equ	0xFE8
  2390                           status	equ	0xFD8
  2391                           
  2392 ;; *************** function _top_distribution_idle *****************
  2393 ;; Defined at:
  2394 ;;		line 36 in file "top_distribution_fsm.c"
  2395 ;; Parameters:    Size  Location     Type
  2396 ;;		None
  2397 ;; Auto vars:     Size  Location     Type
  2398 ;;		None
  2399 ;; Return value:  Size  Location     Type
  2400 ;;                  1    wreg      void 
  2401 ;; Registers used:
  2402 ;;		wreg, status,2, status,0
  2403 ;; Tracked objects:
  2404 ;;		On entry : 0/0
  2405 ;;		On exit  : 0/0
  2406 ;;		Unchanged: 0/0
  2407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2412 ;;Total ram usage:        0 bytes
  2413 ;; Hardware stack levels used:    1
  2414 ;; Hardware stack levels required when called:    5
  2415 ;; This function calls:
  2416 ;;		Nothing
  2417 ;; This function is called by:
  2418 ;;		_top_distribution_initial
  2419 ;;		_top_distribution_move
  2420 ;;		_startSorting
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           	psect	text10
  2425  001E22                     __ptext10:
  2426                           	opt stack 0
  2427  001E22                     _top_distribution_idle:
  2428                           	opt stack 24
  2429                           
  2430                           ;top_distribution_fsm.c: 39: if(start_top_distribution==1){
  2431                           
  2432                           ; BSR set to: 0
  2433                           ;incstack = 0
  2434  001E22  0441               	decf	_start_top_distribution,w,c
  2435  001E24  1042               	iorwf	_start_top_distribution+1,w,c
  2436  001E26  A4D8               	btfss	status,2,c
  2437  001E28  D00B               	goto	l5202
  2438                           
  2439                           ;top_distribution_fsm.c: 40: topDistributionState = top_distribution_prepare;
  2440  001E2A  0E94               	movlw	low _top_distribution_prepare
  2441  001E2C  0100               	movlb	0	; () banked
  2442  001E2E  6FA5               	movwf	_topDistributionState& (0+255),b
  2443  001E30  0E1D               	movlw	high _top_distribution_prepare
  2444  001E32  0100               	movlb	0	; () banked
  2445  001E34  6FA6               	movwf	(_topDistributionState+1)& (0+255),b
  2446                           
  2447                           ; BSR set to: 0
  2448                           ;top_distribution_fsm.c: 41: start_top_distribution = 0;
  2449  001E36  0E00               	movlw	0
  2450  001E38  6E42               	movwf	_start_top_distribution+1,c
  2451  001E3A  0E00               	movlw	0
  2452  001E3C  6E41               	movwf	_start_top_distribution,c
  2453                           
  2454                           ;top_distribution_fsm.c: 42: }else{
  2455  001E3E  0012               	return	
  2456  001E40                     l5202:
  2457                           
  2458                           ;top_distribution_fsm.c: 43: topDistributionState = top_distribution_idle;
  2459  001E40  0E22               	movlw	low _top_distribution_idle
  2460  001E42  0100               	movlb	0	; () banked
  2461  001E44  6FA5               	movwf	_topDistributionState& (0+255),b
  2462  001E46  0E1E               	movlw	high _top_distribution_idle
  2463  001E48  0100               	movlb	0	; () banked
  2464  001E4A  6FA6               	movwf	(_topDistributionState+1)& (0+255),b
  2465                           
  2466                           ; BSR set to: 0
  2467  001E4C  0012               	return	
  2468  001E4E                     __end_of_top_distribution_idle:
  2469                           	opt stack 0
  2470                           tosu	equ	0xFFF
  2471                           tosh	equ	0xFFE
  2472                           tosl	equ	0xFFD
  2473                           pclath	equ	0xFFA
  2474                           intcon2	equ	0xFF1
  2475                           intcon3	equ	0xFF0
  2476                           postinc0	equ	0xFEE
  2477                           wreg	equ	0xFE8
  2478                           status	equ	0xFD8
  2479                           
  2480 ;; *************** function _top_distribution_prepare *****************
  2481 ;; Defined at:
  2482 ;;		line 49 in file "top_distribution_fsm.c"
  2483 ;; Parameters:    Size  Location     Type
  2484 ;;		None
  2485 ;; Auto vars:     Size  Location     Type
  2486 ;;		None
  2487 ;; Return value:  Size  Location     Type
  2488 ;;                  1    wreg      void 
  2489 ;; Registers used:
  2490 ;;		wreg, status,2, status,0, cstack
  2491 ;; Tracked objects:
  2492 ;;		On entry : 0/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2500 ;;Total ram usage:        0 bytes
  2501 ;; Hardware stack levels used:    1
  2502 ;; Hardware stack levels required when called:    6
  2503 ;; This function calls:
  2504 ;;		_top_distribution_motor_ccw
  2505 ;;		_top_distribution_motor_cw
  2506 ;; This function is called by:
  2507 ;;		_top_distribution_idle
  2508 ;;		_startSorting
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           	psect	text11
  2513  001D94                     __ptext11:
  2514                           	opt stack 0
  2515  001D94                     _top_distribution_prepare:
  2516                           	opt stack 23
  2517                           
  2518                           ;top_distribution_fsm.c: 52: if(top_move == 1){
  2519                           
  2520                           ; BSR set to: 0
  2521                           ;incstack = 0
  2522  001D94  0443               	decf	_top_move,w,c
  2523  001D96  1044               	iorwf	_top_move+1,w,c
  2524  001D98  A4D8               	btfss	status,2,c
  2525  001D9A  D007               	goto	l5212
  2526                           
  2527                           ;top_distribution_fsm.c: 53: t_m = 1;
  2528  001D9C  0E00               	movlw	0
  2529  001D9E  6E40               	movwf	_t_m+1,c
  2530  001DA0  0E01               	movlw	1
  2531  001DA2  6E3F               	movwf	_t_m,c
  2532                           
  2533                           ;top_distribution_fsm.c: 54: top_distribution_motor_cw();
  2534  001DA4  EC4F  F00F         	call	_top_distribution_motor_cw	;wreg free
  2535                           
  2536                           ;top_distribution_fsm.c: 56: }else{
  2537  001DA8  D006               	goto	l5216
  2538  001DAA                     l5212:
  2539                           
  2540                           ;top_distribution_fsm.c: 57: t_m = 0;
  2541  001DAA  0E00               	movlw	0
  2542  001DAC  6E40               	movwf	_t_m+1,c
  2543  001DAE  0E00               	movlw	0
  2544  001DB0  6E3F               	movwf	_t_m,c
  2545                           
  2546                           ;top_distribution_fsm.c: 58: top_distribution_motor_ccw();
  2547  001DB2  EC75  F00F         	call	_top_distribution_motor_ccw	;wreg free
  2548  001DB6                     l5216:
  2549                           
  2550                           ;top_distribution_fsm.c: 60: }
  2551                           ;top_distribution_fsm.c: 63: topDistributionState = top_distribution_move;
  2552  001DB6  0ED8               	movlw	low _top_distribution_move
  2553  001DB8  0100               	movlb	0	; () banked
  2554  001DBA  6FA5               	movwf	_topDistributionState& (0+255),b
  2555  001DBC  0E18               	movlw	high _top_distribution_move
  2556  001DBE  0100               	movlb	0	; () banked
  2557  001DC0  6FA6               	movwf	(_topDistributionState+1)& (0+255),b
  2558  001DC2  0012               	return	
  2559  001DC4                     __end_of_top_distribution_prepare:
  2560                           	opt stack 0
  2561                           tosu	equ	0xFFF
  2562                           tosh	equ	0xFFE
  2563                           tosl	equ	0xFFD
  2564                           pclath	equ	0xFFA
  2565                           intcon2	equ	0xFF1
  2566                           intcon3	equ	0xFF0
  2567                           postinc0	equ	0xFEE
  2568                           wreg	equ	0xFE8
  2569                           status	equ	0xFD8
  2570                           
  2571 ;; *************** function _top_distribution_motor_cw2 *****************
  2572 ;; Defined at:
  2573 ;;		line 72 in file "motors.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;		None
  2576 ;; Auto vars:     Size  Location     Type
  2577 ;;		None
  2578 ;; Return value:  Size  Location     Type
  2579 ;;                  1    wreg      void 
  2580 ;; Registers used:
  2581 ;;		wreg
  2582 ;; Tracked objects:
  2583 ;;		On entry : 0/0
  2584 ;;		On exit  : 0/0
  2585 ;;		Unchanged: 0/0
  2586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2589 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2590 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2591 ;;Total ram usage:        2 bytes
  2592 ;; Hardware stack levels used:    1
  2593 ;; Hardware stack levels required when called:    5
  2594 ;; This function calls:
  2595 ;;		Nothing
  2596 ;; This function is called by:
  2597 ;;		_top_distribution_move
  2598 ;; This function uses a non-reentrant model
  2599 ;;
  2600                           
  2601                           	psect	text12
  2602  001E78                     __ptext12:
  2603                           	opt stack 0
  2604  001E78                     _top_distribution_motor_cw2:
  2605                           	opt stack 23
  2606                           
  2607                           ;motors.c: 75: LATCbits.LATC7 = 0;
  2608                           
  2609                           ; BSR set to: 0
  2610                           ;incstack = 0
  2611  001E78  9E8B               	bcf	3979,7,c	;volatile
  2612                           
  2613                           ;motors.c: 76: LATCbits.LATC6 = 1;
  2614  001E7A  8C8B               	bsf	3979,6,c	;volatile
  2615                           
  2616                           ;motors.c: 77: _delay((unsigned long)((200)*(10000000/4000.0)));
  2617  001E7C  0E03               	movlw	3
  2618  001E7E  0100               	movlb	0	; () banked
  2619  001E80  6FAC               	movwf	(??_top_distribution_motor_cw2+1)& (0+255),b
  2620  001E82  0E8A               	movlw	138
  2621  001E84  0100               	movlb	0	; () banked
  2622  001E86  6FAB               	movwf	??_top_distribution_motor_cw2& (0+255),b
  2623  001E88  0E55               	movlw	85
  2624  001E8A                     u4757:
  2625  001E8A  2EE8               	decfsz	wreg,f,c
  2626  001E8C  D7FE               	bra	u4757
  2627  001E8E  2FAB               	decfsz	??_top_distribution_motor_cw2& (0+255),f,b
  2628  001E90  D7FC               	bra	u4757
  2629  001E92  2FAC               	decfsz	(??_top_distribution_motor_cw2+1)& (0+255),f,b
  2630  001E94  D7FA               	bra	u4757
  2631  001E96  D000               	nop2	
  2632                           
  2633                           ;motors.c: 80: LATCbits.LATC7 = 0;
  2634  001E98  9E8B               	bcf	3979,7,c	;volatile
  2635                           
  2636                           ;motors.c: 81: LATCbits.LATC6 = 0;
  2637  001E9A  9C8B               	bcf	3979,6,c	;volatile
  2638  001E9C  0012               	return	
  2639  001E9E                     __end_of_top_distribution_motor_cw2:
  2640                           	opt stack 0
  2641                           tosu	equ	0xFFF
  2642                           tosh	equ	0xFFE
  2643                           tosl	equ	0xFFD
  2644                           pclath	equ	0xFFA
  2645                           intcon2	equ	0xFF1
  2646                           intcon3	equ	0xFF0
  2647                           postinc0	equ	0xFEE
  2648                           wreg	equ	0xFE8
  2649                           status	equ	0xFD8
  2650                           
  2651 ;; *************** function _top_distribution_motor_cw *****************
  2652 ;; Defined at:
  2653 ;;		line 58 in file "motors.c"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;		None
  2656 ;; Auto vars:     Size  Location     Type
  2657 ;;		None
  2658 ;; Return value:  Size  Location     Type
  2659 ;;                  1    wreg      void 
  2660 ;; Registers used:
  2661 ;;		wreg
  2662 ;; Tracked objects:
  2663 ;;		On entry : 0/0
  2664 ;;		On exit  : 0/0
  2665 ;;		Unchanged: 0/0
  2666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2669 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;Total ram usage:        2 bytes
  2672 ;; Hardware stack levels used:    1
  2673 ;; Hardware stack levels required when called:    5
  2674 ;; This function calls:
  2675 ;;		Nothing
  2676 ;; This function is called by:
  2677 ;;		_top_distribution_prepare
  2678 ;;		_top_distribution_move
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           	psect	text13
  2683  001E9E                     __ptext13:
  2684                           	opt stack 0
  2685  001E9E                     _top_distribution_motor_cw:
  2686                           	opt stack 23
  2687                           
  2688                           ;motors.c: 61: LATCbits.LATC7 = 0;
  2689                           
  2690                           ;incstack = 0
  2691  001E9E  9E8B               	bcf	3979,7,c	;volatile
  2692                           
  2693                           ;motors.c: 62: LATCbits.LATC6 = 1;
  2694  001EA0  8C8B               	bsf	3979,6,c	;volatile
  2695                           
  2696                           ;motors.c: 63: _delay((unsigned long)((300)*(10000000/4000.0)));
  2697  001EA2  0E04               	movlw	4
  2698  001EA4  0100               	movlb	0	; () banked
  2699  001EA6  6FAC               	movwf	(??_top_distribution_motor_cw+1)& (0+255),b
  2700  001EA8  0ECF               	movlw	207
  2701  001EAA  0100               	movlb	0	; () banked
  2702  001EAC  6FAB               	movwf	??_top_distribution_motor_cw& (0+255),b
  2703  001EAE  0E01               	movlw	1
  2704  001EB0                     u4767:
  2705  001EB0  2EE8               	decfsz	wreg,f,c
  2706  001EB2  D7FE               	bra	u4767
  2707  001EB4  2FAB               	decfsz	??_top_distribution_motor_cw& (0+255),f,b
  2708  001EB6  D7FC               	bra	u4767
  2709  001EB8  2FAC               	decfsz	(??_top_distribution_motor_cw+1)& (0+255),f,b
  2710  001EBA  D7FA               	bra	u4767
  2711  001EBC  D000               	nop2	
  2712                           
  2713                           ;motors.c: 66: LATCbits.LATC7 = 0;
  2714  001EBE  9E8B               	bcf	3979,7,c	;volatile
  2715                           
  2716                           ;motors.c: 67: LATCbits.LATC6 = 0;
  2717  001EC0  9C8B               	bcf	3979,6,c	;volatile
  2718  001EC2  0012               	return	
  2719  001EC4                     __end_of_top_distribution_motor_cw:
  2720                           	opt stack 0
  2721                           tosu	equ	0xFFF
  2722                           tosh	equ	0xFFE
  2723                           tosl	equ	0xFFD
  2724                           pclath	equ	0xFFA
  2725                           intcon2	equ	0xFF1
  2726                           intcon3	equ	0xFF0
  2727                           postinc0	equ	0xFEE
  2728                           wreg	equ	0xFE8
  2729                           status	equ	0xFD8
  2730                           
  2731 ;; *************** function _top_distribution_motor_ccw2 *****************
  2732 ;; Defined at:
  2733 ;;		line 44 in file "motors.c"
  2734 ;; Parameters:    Size  Location     Type
  2735 ;;		None
  2736 ;; Auto vars:     Size  Location     Type
  2737 ;;		None
  2738 ;; Return value:  Size  Location     Type
  2739 ;;                  1    wreg      void 
  2740 ;; Registers used:
  2741 ;;		wreg
  2742 ;; Tracked objects:
  2743 ;;		On entry : 0/0
  2744 ;;		On exit  : 0/0
  2745 ;;		Unchanged: 0/0
  2746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2749 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2750 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2751 ;;Total ram usage:        2 bytes
  2752 ;; Hardware stack levels used:    1
  2753 ;; Hardware stack levels required when called:    5
  2754 ;; This function calls:
  2755 ;;		Nothing
  2756 ;; This function is called by:
  2757 ;;		_top_distribution_move
  2758 ;; This function uses a non-reentrant model
  2759 ;;
  2760                           
  2761                           	psect	text14
  2762  001EC4                     __ptext14:
  2763                           	opt stack 0
  2764  001EC4                     _top_distribution_motor_ccw2:
  2765                           	opt stack 23
  2766                           
  2767                           ;motors.c: 47: LATCbits.LATC7 = 1;
  2768                           
  2769                           ;incstack = 0
  2770  001EC4  8E8B               	bsf	3979,7,c	;volatile
  2771                           
  2772                           ;motors.c: 48: LATCbits.LATC6 = 0;
  2773  001EC6  9C8B               	bcf	3979,6,c	;volatile
  2774                           
  2775                           ;motors.c: 49: _delay((unsigned long)((200)*(10000000/4000.0)));
  2776  001EC8  0E03               	movlw	3
  2777  001ECA  0100               	movlb	0	; () banked
  2778  001ECC  6FAC               	movwf	(??_top_distribution_motor_ccw2+1)& (0+255),b
  2779  001ECE  0E8A               	movlw	138
  2780  001ED0  0100               	movlb	0	; () banked
  2781  001ED2  6FAB               	movwf	??_top_distribution_motor_ccw2& (0+255),b
  2782  001ED4  0E55               	movlw	85
  2783  001ED6                     u4777:
  2784  001ED6  2EE8               	decfsz	wreg,f,c
  2785  001ED8  D7FE               	bra	u4777
  2786  001EDA  2FAB               	decfsz	??_top_distribution_motor_ccw2& (0+255),f,b
  2787  001EDC  D7FC               	bra	u4777
  2788  001EDE  2FAC               	decfsz	(??_top_distribution_motor_ccw2+1)& (0+255),f,b
  2789  001EE0  D7FA               	bra	u4777
  2790  001EE2  D000               	nop2	
  2791                           
  2792                           ;motors.c: 52: LATCbits.LATC7 = 0;
  2793  001EE4  9E8B               	bcf	3979,7,c	;volatile
  2794                           
  2795                           ;motors.c: 53: LATCbits.LATC6 = 0;
  2796  001EE6  9C8B               	bcf	3979,6,c	;volatile
  2797  001EE8  0012               	return	
  2798  001EEA                     __end_of_top_distribution_motor_ccw2:
  2799                           	opt stack 0
  2800                           tosu	equ	0xFFF
  2801                           tosh	equ	0xFFE
  2802                           tosl	equ	0xFFD
  2803                           pclath	equ	0xFFA
  2804                           intcon2	equ	0xFF1
  2805                           intcon3	equ	0xFF0
  2806                           postinc0	equ	0xFEE
  2807                           wreg	equ	0xFE8
  2808                           status	equ	0xFD8
  2809                           
  2810 ;; *************** function _top_distribution_motor_ccw *****************
  2811 ;; Defined at:
  2812 ;;		line 30 in file "motors.c"
  2813 ;; Parameters:    Size  Location     Type
  2814 ;;		None
  2815 ;; Auto vars:     Size  Location     Type
  2816 ;;		None
  2817 ;; Return value:  Size  Location     Type
  2818 ;;                  1    wreg      void 
  2819 ;; Registers used:
  2820 ;;		wreg
  2821 ;; Tracked objects:
  2822 ;;		On entry : 0/0
  2823 ;;		On exit  : 0/0
  2824 ;;		Unchanged: 0/0
  2825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2828 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2829 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2830 ;;Total ram usage:        2 bytes
  2831 ;; Hardware stack levels used:    1
  2832 ;; Hardware stack levels required when called:    5
  2833 ;; This function calls:
  2834 ;;		Nothing
  2835 ;; This function is called by:
  2836 ;;		_top_distribution_prepare
  2837 ;;		_top_distribution_move
  2838 ;; This function uses a non-reentrant model
  2839 ;;
  2840                           
  2841                           	psect	text15
  2842  001EEA                     __ptext15:
  2843                           	opt stack 0
  2844  001EEA                     _top_distribution_motor_ccw:
  2845                           	opt stack 23
  2846                           
  2847                           ;motors.c: 33: LATCbits.LATC7 = 1;
  2848                           
  2849                           ;incstack = 0
  2850  001EEA  8E8B               	bsf	3979,7,c	;volatile
  2851                           
  2852                           ;motors.c: 34: LATCbits.LATC6 = 0;
  2853  001EEC  9C8B               	bcf	3979,6,c	;volatile
  2854                           
  2855                           ;motors.c: 35: _delay((unsigned long)((300)*(10000000/4000.0)));
  2856  001EEE  0E04               	movlw	4
  2857  001EF0  0100               	movlb	0	; () banked
  2858  001EF2  6FAC               	movwf	(??_top_distribution_motor_ccw+1)& (0+255),b
  2859  001EF4  0ECF               	movlw	207
  2860  001EF6  0100               	movlb	0	; () banked
  2861  001EF8  6FAB               	movwf	??_top_distribution_motor_ccw& (0+255),b
  2862  001EFA  0E01               	movlw	1
  2863  001EFC                     u4787:
  2864  001EFC  2EE8               	decfsz	wreg,f,c
  2865  001EFE  D7FE               	bra	u4787
  2866  001F00  2FAB               	decfsz	??_top_distribution_motor_ccw& (0+255),f,b
  2867  001F02  D7FC               	bra	u4787
  2868  001F04  2FAC               	decfsz	(??_top_distribution_motor_ccw+1)& (0+255),f,b
  2869  001F06  D7FA               	bra	u4787
  2870  001F08  D000               	nop2	
  2871                           
  2872                           ;motors.c: 38: LATCbits.LATC7 = 0;
  2873  001F0A  9E8B               	bcf	3979,7,c	;volatile
  2874                           
  2875                           ;motors.c: 39: LATCbits.LATC6 = 0;
  2876  001F0C  9C8B               	bcf	3979,6,c	;volatile
  2877  001F0E  0012               	return	
  2878  001F10                     __end_of_top_distribution_motor_ccw:
  2879                           	opt stack 0
  2880                           tosu	equ	0xFFF
  2881                           tosh	equ	0xFFE
  2882                           tosl	equ	0xFFD
  2883                           pclath	equ	0xFFA
  2884                           intcon2	equ	0xFF1
  2885                           intcon3	equ	0xFF0
  2886                           postinc0	equ	0xFEE
  2887                           wreg	equ	0xFE8
  2888                           status	equ	0xFD8
  2889                           
  2890 ;; *************** function _pop_out *****************
  2891 ;; Defined at:
  2892 ;;		line 29 in file "solenoids.c"
  2893 ;; Parameters:    Size  Location     Type
  2894 ;;		None
  2895 ;; Auto vars:     Size  Location     Type
  2896 ;;		None
  2897 ;; Return value:  Size  Location     Type
  2898 ;;                  1    wreg      void 
  2899 ;; Registers used:
  2900 ;;		wreg
  2901 ;; Tracked objects:
  2902 ;;		On entry : 0/0
  2903 ;;		On exit  : 0/0
  2904 ;;		Unchanged: 0/0
  2905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2908 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2909 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2910 ;;Total ram usage:        2 bytes
  2911 ;; Hardware stack levels used:    1
  2912 ;; Hardware stack levels required when called:    5
  2913 ;; This function calls:
  2914 ;;		Nothing
  2915 ;; This function is called by:
  2916 ;;		_solenoids_out
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           	psect	text16
  2921  001FEE                     __ptext16:
  2922                           	opt stack 0
  2923  001FEE                     _pop_out:
  2924                           	opt stack 23
  2925                           
  2926                           ;solenoids.c: 31: LATDbits.LATD0 = 0;
  2927                           
  2928                           ;incstack = 0
  2929  001FEE  908C               	bcf	3980,0,c	;volatile
  2930                           
  2931                           ;solenoids.c: 32: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2932  001FF0  0E0D               	movlw	13
  2933  001FF2  0100               	movlb	0	; () banked
  2934  001FF4  6FAC               	movwf	(??_pop_out+1)& (0+255),b
  2935  001FF6  0EAF               	movlw	175
  2936  001FF8  0100               	movlb	0	; () banked
  2937  001FFA  6FAB               	movwf	??_pop_out& (0+255),b
  2938  001FFC  0EB6               	movlw	182
  2939  001FFE                     u4797:
  2940  001FFE  2EE8               	decfsz	wreg,f,c
  2941  002000  D7FE               	bra	u4797
  2942  002002  2FAB               	decfsz	??_pop_out& (0+255),f,b
  2943  002004  D7FC               	bra	u4797
  2944  002006  2FAC               	decfsz	(??_pop_out+1)& (0+255),f,b
  2945  002008  D7FA               	bra	u4797
  2946  00200A  F000               	nop	
  2947  00200C  0012               	return	
  2948  00200E                     __end_of_pop_out:
  2949                           	opt stack 0
  2950                           tosu	equ	0xFFF
  2951                           tosh	equ	0xFFE
  2952                           tosl	equ	0xFFD
  2953                           pclath	equ	0xFFA
  2954                           intcon2	equ	0xFF1
  2955                           intcon3	equ	0xFF0
  2956                           postinc0	equ	0xFEE
  2957                           wreg	equ	0xFE8
  2958                           status	equ	0xFD8
  2959                           
  2960 ;; *************** function _go_back *****************
  2961 ;; Defined at:
  2962 ;;		line 36 in file "solenoids.c"
  2963 ;; Parameters:    Size  Location     Type
  2964 ;;		None
  2965 ;; Auto vars:     Size  Location     Type
  2966 ;;		None
  2967 ;; Return value:  Size  Location     Type
  2968 ;;                  1    wreg      void 
  2969 ;; Registers used:
  2970 ;;		wreg
  2971 ;; Tracked objects:
  2972 ;;		On entry : 0/0
  2973 ;;		On exit  : 0/0
  2974 ;;		Unchanged: 0/0
  2975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2978 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2979 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2980 ;;Total ram usage:        2 bytes
  2981 ;; Hardware stack levels used:    1
  2982 ;; Hardware stack levels required when called:    5
  2983 ;; This function calls:
  2984 ;;		Nothing
  2985 ;; This function is called by:
  2986 ;;		_solenoids_back
  2987 ;; This function uses a non-reentrant model
  2988 ;;
  2989                           
  2990                           	psect	text17
  2991  00200E                     __ptext17:
  2992                           	opt stack 0
  2993  00200E                     _go_back:
  2994                           	opt stack 23
  2995                           
  2996                           ;solenoids.c: 38: LATDbits.LATD0 = 1;
  2997                           
  2998                           ;incstack = 0
  2999  00200E  808C               	bsf	3980,0,c	;volatile
  3000                           
  3001                           ;solenoids.c: 39: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3002  002010  0E0D               	movlw	13
  3003  002012  0100               	movlb	0	; () banked
  3004  002014  6FAC               	movwf	(??_go_back+1)& (0+255),b
  3005  002016  0EAF               	movlw	175
  3006  002018  0100               	movlb	0	; () banked
  3007  00201A  6FAB               	movwf	??_go_back& (0+255),b
  3008  00201C  0EB6               	movlw	182
  3009  00201E                     u4807:
  3010  00201E  2EE8               	decfsz	wreg,f,c
  3011  002020  D7FE               	bra	u4807
  3012  002022  2FAB               	decfsz	??_go_back& (0+255),f,b
  3013  002024  D7FC               	bra	u4807
  3014  002026  2FAC               	decfsz	(??_go_back+1)& (0+255),f,b
  3015  002028  D7FA               	bra	u4807
  3016  00202A  F000               	nop	
  3017  00202C  0012               	return	
  3018  00202E                     __end_of_go_back:
  3019                           	opt stack 0
  3020                           tosu	equ	0xFFF
  3021                           tosh	equ	0xFFE
  3022                           tosl	equ	0xFFD
  3023                           pclath	equ	0xFFA
  3024                           intcon2	equ	0xFF1
  3025                           intcon3	equ	0xFF0
  3026                           postinc0	equ	0xFEE
  3027                           wreg	equ	0xFE8
  3028                           status	equ	0xFD8
  3029                           
  3030 ;; *************** function _initialization *****************
  3031 ;; Defined at:
  3032 ;;		line 136 in file "operation.c"
  3033 ;; Parameters:    Size  Location     Type
  3034 ;;		None
  3035 ;; Auto vars:     Size  Location     Type
  3036 ;;		None
  3037 ;; Return value:  Size  Location     Type
  3038 ;;                  1    wreg      void 
  3039 ;; Registers used:
  3040 ;;		wreg, status,2, status,0, cstack
  3041 ;; Tracked objects:
  3042 ;;		On entry : 0/0
  3043 ;;		On exit  : 0/0
  3044 ;;		Unchanged: 0/0
  3045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3050 ;;Total ram usage:        0 bytes
  3051 ;; Hardware stack levels used:    1
  3052 ;; Hardware stack levels required when called:    6
  3053 ;; This function calls:
  3054 ;;		_bottom_distribution_initial
  3055 ;;		_bottom_rocker_initial
  3056 ;;		_top_distribution_initial
  3057 ;;		_top_rocker_initial
  3058 ;; This function is called by:
  3059 ;;		_startSorting
  3060 ;; This function uses a non-reentrant model
  3061 ;;
  3062                           
  3063                           	psect	text18
  3064  001C90                     __ptext18:
  3065                           	opt stack 0
  3066  001C90                     _initialization:
  3067                           	opt stack 23
  3068                           
  3069                           ;operation.c: 138: fsm1 = 0;
  3070                           
  3071                           ;incstack = 0
  3072  001C90  0E00               	movlw	0
  3073  001C92  0100               	movlb	0	; () banked
  3074  001C94  6F94               	movwf	(_fsm1+1)& (0+255),b
  3075  001C96  0E00               	movlw	0
  3076  001C98  6F93               	movwf	_fsm1& (0+255),b
  3077                           
  3078                           ;operation.c: 139: fsm2 = 0;
  3079  001C9A  0E00               	movlw	0
  3080  001C9C  0100               	movlb	0	; () banked
  3081  001C9E  6FA0               	movwf	(_fsm2+1)& (0+255),b
  3082  001CA0  0E00               	movlw	0
  3083  001CA2  6F9F               	movwf	_fsm2& (0+255),b
  3084                           
  3085                           ; BSR set to: 0
  3086                           ;operation.c: 142: LATAbits.LATA0 = 1;
  3087  001CA4  8089               	bsf	3977,0,c	;volatile
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;operation.c: 143: LATAbits.LATA2 = 1;
  3091  001CA6  8489               	bsf	3977,2,c	;volatile
  3092                           
  3093                           ; BSR set to: 0
  3094                           ;operation.c: 144: LATDbits.LATD0 = 1;
  3095  001CA8  808C               	bsf	3980,0,c	;volatile
  3096                           
  3097                           ;operation.c: 146: check = 0;
  3098  001CAA  0E00               	movlw	0
  3099  001CAC  0100               	movlb	0	; () banked
  3100  001CAE  6F92               	movwf	(_check+1)& (0+255),b
  3101  001CB0  0E00               	movlw	0
  3102  001CB2  6F91               	movwf	_check& (0+255),b
  3103                           
  3104                           ; BSR set to: 0
  3105                           ;operation.c: 149: top_rocker_initial();
  3106  001CB4  EC6F  F010         	call	_top_rocker_initial	;wreg free
  3107                           
  3108                           ;operation.c: 150: bottom_rocker_initial();
  3109  001CB8  EC7D  F010         	call	_bottom_rocker_initial	;wreg free
  3110                           
  3111                           ;operation.c: 151: top_distribution_initial();
  3112  001CBC  EC76  F010         	call	_top_distribution_initial	;wreg free
  3113                           
  3114                           ;operation.c: 152: bottom_distribution_initial();
  3115  001CC0  EC84  F010         	call	_bottom_distribution_initial	;wreg free
  3116  001CC4  0012               	return		;funcret
  3117  001CC6                     __end_of_initialization:
  3118                           	opt stack 0
  3119                           tosu	equ	0xFFF
  3120                           tosh	equ	0xFFE
  3121                           tosl	equ	0xFFD
  3122                           pclath	equ	0xFFA
  3123                           intcon2	equ	0xFF1
  3124                           intcon3	equ	0xFF0
  3125                           postinc0	equ	0xFEE
  3126                           wreg	equ	0xFE8
  3127                           status	equ	0xFD8
  3128                           
  3129 ;; *************** function _top_rocker_initial *****************
  3130 ;; Defined at:
  3131 ;;		line 34 in file "top_rocker_fsm.c"
  3132 ;; Parameters:    Size  Location     Type
  3133 ;;		None
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;		None
  3136 ;; Return value:  Size  Location     Type
  3137 ;;                  1    wreg      void 
  3138 ;; Registers used:
  3139 ;;		wreg, status,2, status,0
  3140 ;; Tracked objects:
  3141 ;;		On entry : 0/0
  3142 ;;		On exit  : 0/0
  3143 ;;		Unchanged: 0/0
  3144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3149 ;;Total ram usage:        0 bytes
  3150 ;; Hardware stack levels used:    1
  3151 ;; Hardware stack levels required when called:    5
  3152 ;; This function calls:
  3153 ;;		Nothing
  3154 ;; This function is called by:
  3155 ;;		_initialization
  3156 ;; This function uses a non-reentrant model
  3157 ;;
  3158                           
  3159                           	psect	text19
  3160  0020DE                     __ptext19:
  3161                           	opt stack 0
  3162  0020DE                     _top_rocker_initial:
  3163                           	opt stack 23
  3164                           
  3165                           ;top_rocker_fsm.c: 37: topRockerState = top_rocker_idle;
  3166                           
  3167                           ;incstack = 0
  3168  0020DE  0EFC               	movlw	low _top_rocker_idle
  3169  0020E0  0100               	movlb	0	; () banked
  3170  0020E2  6FA7               	movwf	_topRockerState& (0+255),b
  3171  0020E4  0E1C               	movlw	high _top_rocker_idle
  3172  0020E6  0100               	movlb	0	; () banked
  3173  0020E8  6FA8               	movwf	(_topRockerState+1)& (0+255),b
  3174  0020EA  0012               	return	
  3175  0020EC                     __end_of_top_rocker_initial:
  3176                           	opt stack 0
  3177                           tosu	equ	0xFFF
  3178                           tosh	equ	0xFFE
  3179                           tosl	equ	0xFFD
  3180                           pclath	equ	0xFFA
  3181                           intcon2	equ	0xFF1
  3182                           intcon3	equ	0xFF0
  3183                           postinc0	equ	0xFEE
  3184                           wreg	equ	0xFE8
  3185                           status	equ	0xFD8
  3186                           
  3187 ;; *************** function _top_distribution_initial *****************
  3188 ;; Defined at:
  3189 ;;		line 30 in file "top_distribution_fsm.c"
  3190 ;; Parameters:    Size  Location     Type
  3191 ;;		None
  3192 ;; Auto vars:     Size  Location     Type
  3193 ;;		None
  3194 ;; Return value:  Size  Location     Type
  3195 ;;                  1    wreg      void 
  3196 ;; Registers used:
  3197 ;;		wreg, status,2, status,0
  3198 ;; Tracked objects:
  3199 ;;		On entry : 0/0
  3200 ;;		On exit  : 0/0
  3201 ;;		Unchanged: 0/0
  3202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3207 ;;Total ram usage:        0 bytes
  3208 ;; Hardware stack levels used:    1
  3209 ;; Hardware stack levels required when called:    5
  3210 ;; This function calls:
  3211 ;;		Nothing
  3212 ;; This function is called by:
  3213 ;;		_initialization
  3214 ;; This function uses a non-reentrant model
  3215 ;;
  3216                           
  3217                           	psect	text20
  3218  0020EC                     __ptext20:
  3219                           	opt stack 0
  3220  0020EC                     _top_distribution_initial:
  3221                           	opt stack 23
  3222                           
  3223                           ;top_distribution_fsm.c: 32: topDistributionState = top_distribution_idle;
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;incstack = 0
  3227  0020EC  0E22               	movlw	low _top_distribution_idle
  3228  0020EE  0100               	movlb	0	; () banked
  3229  0020F0  6FA5               	movwf	_topDistributionState& (0+255),b
  3230  0020F2  0E1E               	movlw	high _top_distribution_idle
  3231  0020F4  0100               	movlb	0	; () banked
  3232  0020F6  6FA6               	movwf	(_topDistributionState+1)& (0+255),b
  3233  0020F8  0012               	return	
  3234  0020FA                     __end_of_top_distribution_initial:
  3235                           	opt stack 0
  3236                           tosu	equ	0xFFF
  3237                           tosh	equ	0xFFE
  3238                           tosl	equ	0xFFD
  3239                           pclath	equ	0xFFA
  3240                           intcon2	equ	0xFF1
  3241                           intcon3	equ	0xFF0
  3242                           postinc0	equ	0xFEE
  3243                           wreg	equ	0xFE8
  3244                           status	equ	0xFD8
  3245                           
  3246 ;; *************** function _bottom_rocker_initial *****************
  3247 ;; Defined at:
  3248 ;;		line 33 in file "bottom_rocker_fsm.c"
  3249 ;; Parameters:    Size  Location     Type
  3250 ;;		None
  3251 ;; Auto vars:     Size  Location     Type
  3252 ;;		None
  3253 ;; Return value:  Size  Location     Type
  3254 ;;                  1    wreg      void 
  3255 ;; Registers used:
  3256 ;;		wreg, status,2, status,0
  3257 ;; Tracked objects:
  3258 ;;		On entry : 0/0
  3259 ;;		On exit  : 0/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;Total ram usage:        0 bytes
  3267 ;; Hardware stack levels used:    1
  3268 ;; Hardware stack levels required when called:    5
  3269 ;; This function calls:
  3270 ;;		Nothing
  3271 ;; This function is called by:
  3272 ;;		_initialization
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           	psect	text21
  3277  0020FA                     __ptext21:
  3278                           	opt stack 0
  3279  0020FA                     _bottom_rocker_initial:
  3280                           	opt stack 23
  3281                           
  3282                           ;bottom_rocker_fsm.c: 39: bottomRockerState = bottom_rocker_idle;
  3283                           
  3284                           ; BSR set to: 0
  3285                           ;incstack = 0
  3286  0020FA  0E08               	movlw	low _bottom_rocker_idle
  3287  0020FC  0100               	movlb	0	; () banked
  3288  0020FE  6FA1               	movwf	_bottomRockerState& (0+255),b
  3289  002100  0E11               	movlw	high _bottom_rocker_idle
  3290  002102  0100               	movlb	0	; () banked
  3291  002104  6FA2               	movwf	(_bottomRockerState+1)& (0+255),b
  3292  002106  0012               	return	
  3293  002108                     __end_of_bottom_rocker_initial:
  3294                           	opt stack 0
  3295                           tosu	equ	0xFFF
  3296                           tosh	equ	0xFFE
  3297                           tosl	equ	0xFFD
  3298                           pclath	equ	0xFFA
  3299                           intcon2	equ	0xFF1
  3300                           intcon3	equ	0xFF0
  3301                           postinc0	equ	0xFEE
  3302                           wreg	equ	0xFE8
  3303                           status	equ	0xFD8
  3304                           
  3305 ;; *************** function _bottom_distribution_initial *****************
  3306 ;; Defined at:
  3307 ;;		line 29 in file "bottom_distribution_fsm.c"
  3308 ;; Parameters:    Size  Location     Type
  3309 ;;		None
  3310 ;; Auto vars:     Size  Location     Type
  3311 ;;		None
  3312 ;; Return value:  Size  Location     Type
  3313 ;;                  1    wreg      void 
  3314 ;; Registers used:
  3315 ;;		wreg, status,2, status,0
  3316 ;; Tracked objects:
  3317 ;;		On entry : 0/0
  3318 ;;		On exit  : 0/0
  3319 ;;		Unchanged: 0/0
  3320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3325 ;;Total ram usage:        0 bytes
  3326 ;; Hardware stack levels used:    1
  3327 ;; Hardware stack levels required when called:    5
  3328 ;; This function calls:
  3329 ;;		Nothing
  3330 ;; This function is called by:
  3331 ;;		_initialization
  3332 ;; This function uses a non-reentrant model
  3333 ;;
  3334                           
  3335                           	psect	text22
  3336  002108                     __ptext22:
  3337                           	opt stack 0
  3338  002108                     _bottom_distribution_initial:
  3339                           	opt stack 23
  3340                           
  3341                           ;bottom_distribution_fsm.c: 34: bottomDistributionState = bottom_distribution_idle;
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;incstack = 0
  3345  002108  0E62               	movlw	low _bottom_distribution_idle
  3346  00210A  0100               	movlb	0	; () banked
  3347  00210C  6FA3               	movwf	_bottomDistributionState& (0+255),b
  3348  00210E  0E1D               	movlw	high _bottom_distribution_idle
  3349  002110  0100               	movlb	0	; () banked
  3350  002112  6FA4               	movwf	(_bottomDistributionState+1)& (0+255),b
  3351  002114  0012               	return	
  3352  002116                     __end_of_bottom_distribution_initial:
  3353                           	opt stack 0
  3354                           tosu	equ	0xFFF
  3355                           tosh	equ	0xFFE
  3356                           tosl	equ	0xFFD
  3357                           pclath	equ	0xFFA
  3358                           intcon2	equ	0xFF1
  3359                           intcon3	equ	0xFF0
  3360                           postinc0	equ	0xFEE
  3361                           wreg	equ	0xFE8
  3362                           status	equ	0xFD8
  3363                           
  3364 ;; *************** function _done_sorting *****************
  3365 ;; Defined at:
  3366 ;;		line 156 in file "operation.c"
  3367 ;; Parameters:    Size  Location     Type
  3368 ;;		None
  3369 ;; Auto vars:     Size  Location     Type
  3370 ;;  i               1   23[BANK0 ] unsigned char 
  3371 ;;  End_time        2   24[BANK0 ] unsigned char [2]
  3372 ;;  total_second    2   21[BANK0 ] int 
  3373 ;; Return value:  Size  Location     Type
  3374 ;;                  2   14[BANK0 ] int 
  3375 ;; Registers used:
  3376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3377 ;; Tracked objects:
  3378 ;;		On entry : 0/0
  3379 ;;		On exit  : 0/0
  3380 ;;		Unchanged: 0/0
  3381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3382 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3383 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3384 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3385 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3386 ;;Total ram usage:       12 bytes
  3387 ;; Hardware stack levels used:    1
  3388 ;; Hardware stack levels required when called:    7
  3389 ;; This function calls:
  3390 ;;		_I2C_Master_Read
  3391 ;;		_I2C_Master_Start
  3392 ;;		_I2C_Master_Stop
  3393 ;;		_I2C_Master_Write
  3394 ;;		___awdiv
  3395 ;;		___wmul
  3396 ;; This function is called by:
  3397 ;;		_main
  3398 ;;		_startSorting
  3399 ;; This function uses a non-reentrant model
  3400 ;;
  3401                           
  3402                           	psect	text23
  3403  0009FE                     __ptext23:
  3404                           	opt stack 0
  3405  0009FE                     _done_sorting:
  3406                           	opt stack 22
  3407                           
  3408                           ;operation.c: 158: fsm1 = 0;
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;incstack = 0
  3412  0009FE  0E00               	movlw	0
  3413  000A00  0100               	movlb	0	; () banked
  3414  000A02  6F94               	movwf	(_fsm1+1)& (0+255),b
  3415  000A04  0E00               	movlw	0
  3416  000A06  6F93               	movwf	_fsm1& (0+255),b
  3417                           
  3418                           ;operation.c: 159: fsm2 = 0;
  3419  000A08  0E00               	movlw	0
  3420  000A0A  0100               	movlb	0	; () banked
  3421  000A0C  6FA0               	movwf	(_fsm2+1)& (0+255),b
  3422  000A0E  0E00               	movlw	0
  3423  000A10  6F9F               	movwf	_fsm2& (0+255),b
  3424                           
  3425                           ; BSR set to: 0
  3426                           ;operation.c: 161: signed int total_second;
  3427                           ;operation.c: 162: unsigned char End_time[2];
  3428                           ;operation.c: 165: I2C_Master_Start();
  3429  000A12  ECA0  F010         	call	_I2C_Master_Start	;wreg free
  3430                           
  3431                           ;operation.c: 166: I2C_Master_Write(0b11010000);
  3432  000A16  0E00               	movlw	0
  3433  000A18  0100               	movlb	0	; () banked
  3434  000A1A  6FAD               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3435  000A1C  0ED0               	movlw	208
  3436  000A1E  6FAC               	movwf	I2C_Master_Write@d& (0+255),b
  3437  000A20  EC97  F010         	call	_I2C_Master_Write	;wreg free
  3438                           
  3439                           ;operation.c: 167: I2C_Master_Write(0x00);
  3440  000A24  0E00               	movlw	0
  3441  000A26  0100               	movlb	0	; () banked
  3442  000A28  6FAD               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3443  000A2A  0E00               	movlw	0
  3444  000A2C  6FAC               	movwf	I2C_Master_Write@d& (0+255),b
  3445  000A2E  EC97  F010         	call	_I2C_Master_Write	;wreg free
  3446                           
  3447                           ;operation.c: 168: I2C_Master_Stop();
  3448  000A32  EC9C  F010         	call	_I2C_Master_Stop	;wreg free
  3449                           
  3450                           ;operation.c: 171: I2C_Master_Start();
  3451  000A36  ECA0  F010         	call	_I2C_Master_Start	;wreg free
  3452                           
  3453                           ;operation.c: 172: I2C_Master_Write(0b11010001);
  3454  000A3A  0E00               	movlw	0
  3455  000A3C  0100               	movlb	0	; () banked
  3456  000A3E  6FAD               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3457  000A40  0ED1               	movlw	209
  3458  000A42  6FAC               	movwf	I2C_Master_Write@d& (0+255),b
  3459  000A44  EC97  F010         	call	_I2C_Master_Write	;wreg free
  3460                           
  3461                           ;operation.c: 173: for(unsigned char i=0;i<0x06;i++){
  3462  000A48  0E00               	movlw	0
  3463  000A4A  0100               	movlb	0	; () banked
  3464  000A4C  6FC2               	movwf	done_sorting@i& (0+255),b
  3465  000A4E                     l5144:
  3466                           
  3467                           ; BSR set to: 0
  3468  000A4E  0E05               	movlw	5
  3469  000A50  0100               	movlb	0	; () banked
  3470  000A52  65C2               	cpfsgt	done_sorting@i& (0+255),b
  3471  000A54  D001               	goto	l5148
  3472  000A56  D010               	goto	l5154
  3473  000A58                     l5148:
  3474                           
  3475                           ; BSR set to: 0
  3476                           ;operation.c: 174: time[i] = I2C_Master_Read(1);
  3477  000A58  0100               	movlb	0	; () banked
  3478  000A5A  51C2               	movf	done_sorting@i& (0+255),w,b
  3479  000A5C  0D01               	mullw	1
  3480  000A5E  0E80               	movlw	low _time
  3481  000A60  24F3               	addwf	prodl,w,c
  3482  000A62  6ED9               	movwf	fsr2l,c
  3483  000A64  0E00               	movlw	high _time
  3484  000A66  20F4               	addwfc	prodh,w,c
  3485  000A68  6EDA               	movwf	fsr2h,c
  3486  000A6A  0E01               	movlw	1
  3487  000A6C  ECFA  F00E         	call	_I2C_Master_Read
  3488  000A70  6EDF               	movwf	indf2,c
  3489  000A72  0100               	movlb	0	; () banked
  3490  000A74  2BC2               	incf	done_sorting@i& (0+255),f,b
  3491  000A76  D7EB               	goto	l5144
  3492  000A78                     l5154:
  3493                           
  3494                           ; BSR set to: 0
  3495                           ;operation.c: 175: }
  3496                           ;operation.c: 176: time[6] = I2C_Master_Read(0);
  3497  000A78  0E00               	movlw	0
  3498  000A7A  ECFA  F00E         	call	_I2C_Master_Read
  3499  000A7E  0100               	movlb	0	; () banked
  3500  000A80  6F86               	movwf	(_time+6)& (0+255),b
  3501                           
  3502                           ;operation.c: 177: I2C_Master_Stop();
  3503  000A82  EC9C  F010         	call	_I2C_Master_Stop	;wreg free
  3504                           
  3505                           ;operation.c: 179: End_time[2] = time[2];
  3506  000A86  C082  F0C5         	movff	_time+2,done_sorting@End_time+2
  3507                           
  3508                           ;operation.c: 180: End_time[1] = time[1];
  3509  000A8A  C081  F0C4         	movff	_time+1,done_sorting@End_time+1
  3510                           
  3511                           ;operation.c: 181: End_time[0] = time[0];
  3512  000A8E  C080  F0C3         	movff	_time,done_sorting@End_time
  3513                           
  3514                           ;operation.c: 183: total_start = (Start_time[1]/16*10 + Start_time[1]%16)*60 + (Start_ti
      +                          me[0]/16*10 + Start_time[0]%16);
  3515  000A92  C090  F0BB         	movff	_Start_time+1,??_done_sorting
  3516  000A96  0E0F               	movlw	15
  3517  000A98  0100               	movlb	0	; () banked
  3518  000A9A  17BB               	andwf	??_done_sorting& (0+255),f,b
  3519  000A9C  0E00               	movlw	0
  3520  000A9E  0100               	movlb	0	; () banked
  3521  000AA0  6FAE               	movwf	(___awdiv@divisor+1)& (0+255),b
  3522  000AA2  0E10               	movlw	16
  3523  000AA4  6FAD               	movwf	___awdiv@divisor& (0+255),b
  3524  000AA6  C090  F0AB         	movff	_Start_time+1,___awdiv@dividend
  3525  000AAA  0100               	movlb	0	; () banked
  3526  000AAC  6BAC               	clrf	(___awdiv@dividend+1)& (0+255),b
  3527  000AAE  EC5F  F009         	call	___awdiv	;wreg free
  3528  000AB2  C0AB  F0B3         	movff	?___awdiv,___wmul@multiplier
  3529  000AB6  C0AC  F0B4         	movff	?___awdiv+1,___wmul@multiplier+1
  3530  000ABA  0E00               	movlw	0
  3531  000ABC  0100               	movlb	0	; () banked
  3532  000ABE  6FB6               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3533  000AC0  0E0A               	movlw	10
  3534  000AC2  6FB5               	movwf	___wmul@multiplicand& (0+255),b
  3535  000AC4  EC63  F00E         	call	___wmul	;wreg free
  3536  000AC8  0100               	movlb	0	; () banked
  3537  000ACA  51BB               	movf	??_done_sorting& (0+255),w,b
  3538  000ACC  0100               	movlb	0	; () banked
  3539  000ACE  25B3               	addwf	?___wmul& (0+255),w,b
  3540  000AD0  0100               	movlb	0	; () banked
  3541  000AD2  6FBE               	movwf	_done_sorting$1848& (0+255),b
  3542  000AD4  0100               	movlb	0	; () banked
  3543  000AD6  0E00               	movlw	0
  3544  000AD8  0100               	movlb	0	; () banked
  3545  000ADA  21B4               	addwfc	(?___wmul+1)& (0+255),w,b
  3546  000ADC  0100               	movlb	0	; () banked
  3547  000ADE  6FBF               	movwf	(_done_sorting$1848+1)& (0+255),b
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;operation.c: 183: total_start = (Start_time[1]/16*10 + Start_time[1]%16)*60 + (Start_ti
      +                          me[0]/16*10 + Start_time[0]%16);
  3551  000AE0  0E00               	movlw	0
  3552  000AE2  0100               	movlb	0	; () banked
  3553  000AE4  6FAE               	movwf	(___awdiv@divisor+1)& (0+255),b
  3554  000AE6  0E10               	movlw	16
  3555  000AE8  6FAD               	movwf	___awdiv@divisor& (0+255),b
  3556  000AEA  C08F  F0AB         	movff	_Start_time,___awdiv@dividend
  3557  000AEE  0100               	movlb	0	; () banked
  3558  000AF0  6BAC               	clrf	(___awdiv@dividend+1)& (0+255),b
  3559  000AF2  EC5F  F009         	call	___awdiv	;wreg free
  3560  000AF6  C0AB  F0B3         	movff	?___awdiv,___wmul@multiplier
  3561  000AFA  C0AC  F0B4         	movff	?___awdiv+1,___wmul@multiplier+1
  3562  000AFE  0E00               	movlw	0
  3563  000B00  0100               	movlb	0	; () banked
  3564  000B02  6FB6               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3565  000B04  0E0A               	movlw	10
  3566  000B06  6FB5               	movwf	___wmul@multiplicand& (0+255),b
  3567  000B08  EC63  F00E         	call	___wmul	;wreg free
  3568  000B0C  C0B3  F0BB         	movff	?___wmul,??_done_sorting
  3569  000B10  C0B4  F0BC         	movff	?___wmul+1,??_done_sorting+1
  3570  000B14  C08F  F0BD         	movff	_Start_time,??_done_sorting+2
  3571  000B18  0E0F               	movlw	15
  3572  000B1A  0100               	movlb	0	; () banked
  3573  000B1C  17BD               	andwf	(??_done_sorting+2)& (0+255),f,b
  3574  000B1E  0100               	movlb	0	; () banked
  3575  000B20  51BD               	movf	(??_done_sorting+2)& (0+255),w,b
  3576  000B22  0100               	movlb	0	; () banked
  3577  000B24  27BB               	addwf	??_done_sorting& (0+255),f,b
  3578  000B26  0E00               	movlw	0
  3579  000B28  23BC               	addwfc	(??_done_sorting+1)& (0+255),f,b
  3580  000B2A  C0BE  F0B3         	movff	_done_sorting$1848,___wmul@multiplier
  3581  000B2E  C0BF  F0B4         	movff	_done_sorting$1848+1,___wmul@multiplier+1
  3582  000B32  0E00               	movlw	0
  3583  000B34  0100               	movlb	0	; () banked
  3584  000B36  6FB6               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3585  000B38  0E3C               	movlw	60
  3586  000B3A  6FB5               	movwf	___wmul@multiplicand& (0+255),b
  3587  000B3C  EC63  F00E         	call	___wmul	;wreg free
  3588  000B40  0100               	movlb	0	; () banked
  3589  000B42  51B3               	movf	?___wmul& (0+255),w,b
  3590  000B44  0100               	movlb	0	; () banked
  3591  000B46  27BB               	addwf	??_done_sorting& (0+255),f,b
  3592  000B48  0100               	movlb	0	; () banked
  3593  000B4A  51B4               	movf	(?___wmul+1)& (0+255),w,b
  3594  000B4C  0100               	movlb	0	; () banked
  3595  000B4E  23BC               	addwfc	(??_done_sorting+1)& (0+255),f,b
  3596  000B50  C0BB  F08B         	movff	??_done_sorting,_total_start
  3597  000B54  C0BC  F08C         	movff	??_done_sorting+1,_total_start+1
  3598  000B58  0100               	movlb	0	; () banked
  3599  000B5A  0E00               	movlw	0
  3600  000B5C  BF8C               	btfsc	(_total_start+1)& (0+255),7,b
  3601  000B5E  0EFF               	movlw	-1
  3602  000B60  6F8D               	movwf	(_total_start+2)& (0+255),b
  3603  000B62  6F8E               	movwf	(_total_start+3)& (0+255),b
  3604                           
  3605                           ; BSR set to: 0
  3606                           ;operation.c: 184: total_end = (End_time[1]/16*10 + End_time[1]%16)*60 + (End_time[0]/16
      +                          *10 + End_time[0]%16);
  3607  000B64  C0C4  F0BB         	movff	done_sorting@End_time+1,??_done_sorting
  3608  000B68  0E0F               	movlw	15
  3609  000B6A  0100               	movlb	0	; () banked
  3610  000B6C  17BB               	andwf	??_done_sorting& (0+255),f,b
  3611  000B6E  0E00               	movlw	0
  3612  000B70  0100               	movlb	0	; () banked
  3613  000B72  6FAE               	movwf	(___awdiv@divisor+1)& (0+255),b
  3614  000B74  0E10               	movlw	16
  3615  000B76  6FAD               	movwf	___awdiv@divisor& (0+255),b
  3616  000B78  C0C4  F0AB         	movff	done_sorting@End_time+1,___awdiv@dividend
  3617  000B7C  0100               	movlb	0	; () banked
  3618  000B7E  6BAC               	clrf	(___awdiv@dividend+1)& (0+255),b
  3619  000B80  EC5F  F009         	call	___awdiv	;wreg free
  3620  000B84  C0AB  F0B3         	movff	?___awdiv,___wmul@multiplier
  3621  000B88  C0AC  F0B4         	movff	?___awdiv+1,___wmul@multiplier+1
  3622  000B8C  0E00               	movlw	0
  3623  000B8E  0100               	movlb	0	; () banked
  3624  000B90  6FB6               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3625  000B92  0E0A               	movlw	10
  3626  000B94  6FB5               	movwf	___wmul@multiplicand& (0+255),b
  3627  000B96  EC63  F00E         	call	___wmul	;wreg free
  3628  000B9A  0100               	movlb	0	; () banked
  3629  000B9C  51BB               	movf	??_done_sorting& (0+255),w,b
  3630  000B9E  0100               	movlb	0	; () banked
  3631  000BA0  25B3               	addwf	?___wmul& (0+255),w,b
  3632  000BA2  0100               	movlb	0	; () banked
  3633  000BA4  6FBE               	movwf	_done_sorting$1848& (0+255),b
  3634  000BA6  0100               	movlb	0	; () banked
  3635  000BA8  0E00               	movlw	0
  3636  000BAA  0100               	movlb	0	; () banked
  3637  000BAC  21B4               	addwfc	(?___wmul+1)& (0+255),w,b
  3638  000BAE  0100               	movlb	0	; () banked
  3639  000BB0  6FBF               	movwf	(_done_sorting$1848+1)& (0+255),b
  3640                           
  3641                           ; BSR set to: 0
  3642                           ;operation.c: 184: total_end = (End_time[1]/16*10 + End_time[1]%16)*60 + (End_time[0]/16
      +                          *10 + End_time[0]%16);
  3643  000BB2  0E00               	movlw	0
  3644  000BB4  0100               	movlb	0	; () banked
  3645  000BB6  6FAE               	movwf	(___awdiv@divisor+1)& (0+255),b
  3646  000BB8  0E10               	movlw	16
  3647  000BBA  6FAD               	movwf	___awdiv@divisor& (0+255),b
  3648  000BBC  C0C3  F0AB         	movff	done_sorting@End_time,___awdiv@dividend
  3649  000BC0  0100               	movlb	0	; () banked
  3650  000BC2  6BAC               	clrf	(___awdiv@dividend+1)& (0+255),b
  3651  000BC4  EC5F  F009         	call	___awdiv	;wreg free
  3652  000BC8  C0AB  F0B3         	movff	?___awdiv,___wmul@multiplier
  3653  000BCC  C0AC  F0B4         	movff	?___awdiv+1,___wmul@multiplier+1
  3654  000BD0  0E00               	movlw	0
  3655  000BD2  0100               	movlb	0	; () banked
  3656  000BD4  6FB6               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3657  000BD6  0E0A               	movlw	10
  3658  000BD8  6FB5               	movwf	___wmul@multiplicand& (0+255),b
  3659  000BDA  EC63  F00E         	call	___wmul	;wreg free
  3660  000BDE  C0B3  F0BB         	movff	?___wmul,??_done_sorting
  3661  000BE2  C0B4  F0BC         	movff	?___wmul+1,??_done_sorting+1
  3662  000BE6  C0C3  F0BD         	movff	done_sorting@End_time,??_done_sorting+2
  3663  000BEA  0E0F               	movlw	15
  3664  000BEC  0100               	movlb	0	; () banked
  3665  000BEE  17BD               	andwf	(??_done_sorting+2)& (0+255),f,b
  3666  000BF0  0100               	movlb	0	; () banked
  3667  000BF2  51BD               	movf	(??_done_sorting+2)& (0+255),w,b
  3668  000BF4  0100               	movlb	0	; () banked
  3669  000BF6  27BB               	addwf	??_done_sorting& (0+255),f,b
  3670  000BF8  0E00               	movlw	0
  3671  000BFA  23BC               	addwfc	(??_done_sorting+1)& (0+255),f,b
  3672  000BFC  C0BE  F0B3         	movff	_done_sorting$1848,___wmul@multiplier
  3673  000C00  C0BF  F0B4         	movff	_done_sorting$1848+1,___wmul@multiplier+1
  3674  000C04  0E00               	movlw	0
  3675  000C06  0100               	movlb	0	; () banked
  3676  000C08  6FB6               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3677  000C0A  0E3C               	movlw	60
  3678  000C0C  6FB5               	movwf	___wmul@multiplicand& (0+255),b
  3679  000C0E  EC63  F00E         	call	___wmul	;wreg free
  3680  000C12  0100               	movlb	0	; () banked
  3681  000C14  51B3               	movf	?___wmul& (0+255),w,b
  3682  000C16  0100               	movlb	0	; () banked
  3683  000C18  27BB               	addwf	??_done_sorting& (0+255),f,b
  3684  000C1A  0100               	movlb	0	; () banked
  3685  000C1C  51B4               	movf	(?___wmul+1)& (0+255),w,b
  3686  000C1E  0100               	movlb	0	; () banked
  3687  000C20  23BC               	addwfc	(??_done_sorting+1)& (0+255),f,b
  3688  000C22  C0BB  F087         	movff	??_done_sorting,_total_end
  3689  000C26  C0BC  F088         	movff	??_done_sorting+1,_total_end+1
  3690  000C2A  0100               	movlb	0	; () banked
  3691  000C2C  0E00               	movlw	0
  3692  000C2E  BF88               	btfsc	(_total_end+1)& (0+255),7,b
  3693  000C30  0EFF               	movlw	-1
  3694  000C32  6F89               	movwf	(_total_end+2)& (0+255),b
  3695  000C34  6F8A               	movwf	(_total_end+3)& (0+255),b
  3696                           
  3697                           ; BSR set to: 0
  3698                           ;operation.c: 185: total_second = total_end - total_start;
  3699  000C36  C08B  F0BB         	movff	_total_start,??_done_sorting
  3700  000C3A  C08C  F0BC         	movff	_total_start+1,??_done_sorting+1
  3701  000C3E  0100               	movlb	0	; () banked
  3702  000C40  1FBB               	comf	??_done_sorting& (0+255),f,b
  3703  000C42  1FBC               	comf	(??_done_sorting+1)& (0+255),f,b
  3704  000C44  4BBB               	infsnz	??_done_sorting& (0+255),f,b
  3705  000C46  2BBC               	incf	(??_done_sorting+1)& (0+255),f,b
  3706  000C48  0100               	movlb	0	; () banked
  3707  000C4A  5187               	movf	_total_end& (0+255),w,b
  3708  000C4C  0100               	movlb	0	; () banked
  3709  000C4E  25BB               	addwf	??_done_sorting& (0+255),w,b
  3710  000C50  0100               	movlb	0	; () banked
  3711  000C52  6FC0               	movwf	done_sorting@total_second& (0+255),b
  3712  000C54  0100               	movlb	0	; () banked
  3713  000C56  5188               	movf	(_total_end+1)& (0+255),w,b
  3714  000C58  0100               	movlb	0	; () banked
  3715  000C5A  21BC               	addwfc	(??_done_sorting+1)& (0+255),w,b
  3716  000C5C  0100               	movlb	0	; () banked
  3717  000C5E  6FC1               	movwf	(done_sorting@total_second+1)& (0+255),b
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;operation.c: 187: if(total_second <= 0){
  3721  000C60  0100               	movlb	0	; () banked
  3722  000C62  BFC1               	btfsc	(done_sorting@total_second+1)& (0+255),7,b
  3723  000C64  D007               	goto	l5174
  3724  000C66  0100               	movlb	0	; () banked
  3725  000C68  51C1               	movf	(done_sorting@total_second+1)& (0+255),w,b
  3726  000C6A  E10E               	bnz	l5176
  3727  000C6C  0100               	movlb	0	; () banked
  3728  000C6E  05C0               	decf	done_sorting@total_second& (0+255),w,b
  3729  000C70  B0D8               	btfsc	status,0,c
  3730  000C72  D00A               	goto	l5176
  3731  000C74                     l5174:
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;operation.c: 188: total_second = 3600 + total_second;
  3735  000C74  0E10               	movlw	16
  3736  000C76  0100               	movlb	0	; () banked
  3737  000C78  25C0               	addwf	done_sorting@total_second& (0+255),w,b
  3738  000C7A  0100               	movlb	0	; () banked
  3739  000C7C  6FC0               	movwf	done_sorting@total_second& (0+255),b
  3740  000C7E  0E0E               	movlw	14
  3741  000C80  0100               	movlb	0	; () banked
  3742  000C82  21C1               	addwfc	(done_sorting@total_second+1)& (0+255),w,b
  3743  000C84  0100               	movlb	0	; () banked
  3744  000C86  6FC1               	movwf	(done_sorting@total_second+1)& (0+255),b
  3745  000C88                     l5176:
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;operation.c: 189: }
  3749                           ;operation.c: 190: return total_second;
  3750  000C88  C0C0  F0B9         	movff	done_sorting@total_second,?_done_sorting
  3751  000C8C  C0C1  F0BA         	movff	done_sorting@total_second+1,?_done_sorting+1
  3752  000C90  0012               	return	
  3753  000C92                     __end_of_done_sorting:
  3754                           	opt stack 0
  3755                           tosu	equ	0xFFF
  3756                           tosh	equ	0xFFE
  3757                           tosl	equ	0xFFD
  3758                           pclath	equ	0xFFA
  3759                           prodh	equ	0xFF4
  3760                           prodl	equ	0xFF3
  3761                           intcon2	equ	0xFF1
  3762                           intcon3	equ	0xFF0
  3763                           postinc0	equ	0xFEE
  3764                           wreg	equ	0xFE8
  3765                           indf2	equ	0xFDF
  3766                           fsr2h	equ	0xFDA
  3767                           fsr2l	equ	0xFD9
  3768                           status	equ	0xFD8
  3769                           
  3770 ;; *************** function ___awdiv *****************
  3771 ;; Defined at:
  3772 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awdiv.c"
  3773 ;; Parameters:    Size  Location     Type
  3774 ;;  dividend        2    0[BANK0 ] int 
  3775 ;;  divisor         2    2[BANK0 ] int 
  3776 ;; Auto vars:     Size  Location     Type
  3777 ;;  quotient        2    6[BANK0 ] int 
  3778 ;;  sign            1    5[BANK0 ] unsigned char 
  3779 ;;  counter         1    4[BANK0 ] unsigned char 
  3780 ;; Return value:  Size  Location     Type
  3781 ;;                  2    0[BANK0 ] int 
  3782 ;; Registers used:
  3783 ;;		wreg, status,2, status,0
  3784 ;; Tracked objects:
  3785 ;;		On entry : 0/0
  3786 ;;		On exit  : 0/0
  3787 ;;		Unchanged: 0/0
  3788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3789 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3790 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3792 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3793 ;;Total ram usage:        8 bytes
  3794 ;; Hardware stack levels used:    1
  3795 ;; Hardware stack levels required when called:    5
  3796 ;; This function calls:
  3797 ;;		Nothing
  3798 ;; This function is called by:
  3799 ;;		_done_sorting
  3800 ;; This function uses a non-reentrant model
  3801 ;;
  3802                           
  3803                           	psect	text24
  3804  0012BE                     __ptext24:
  3805                           	opt stack 0
  3806  0012BE                     ___awdiv:
  3807                           	opt stack 23
  3808                           
  3809                           ; BSR set to: 0
  3810                           ;incstack = 0
  3811  0012BE  0E00               	movlw	0
  3812  0012C0  0100               	movlb	0	; () banked
  3813  0012C2  6FB0               	movwf	___awdiv@sign& (0+255),b
  3814                           
  3815                           ; BSR set to: 0
  3816  0012C4  0100               	movlb	0	; () banked
  3817  0012C6  AFAE               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  3818  0012C8  D008               	goto	l4774
  3819                           
  3820                           ; BSR set to: 0
  3821  0012CA  0100               	movlb	0	; () banked
  3822  0012CC  6DAD               	negf	___awdiv@divisor& (0+255),b
  3823  0012CE  1FAE               	comf	(___awdiv@divisor+1)& (0+255),f,b
  3824  0012D0  B0D8               	btfsc	status,0,c
  3825  0012D2  2BAE               	incf	(___awdiv@divisor+1)& (0+255),f,b
  3826                           
  3827                           ; BSR set to: 0
  3828  0012D4  0E01               	movlw	1
  3829  0012D6  0100               	movlb	0	; () banked
  3830  0012D8  6FB0               	movwf	___awdiv@sign& (0+255),b
  3831  0012DA                     l4774:
  3832                           
  3833                           ; BSR set to: 0
  3834  0012DA  0100               	movlb	0	; () banked
  3835  0012DC  AFAC               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  3836  0012DE  D008               	goto	l4780
  3837                           
  3838                           ; BSR set to: 0
  3839  0012E0  0100               	movlb	0	; () banked
  3840  0012E2  6DAB               	negf	___awdiv@dividend& (0+255),b
  3841  0012E4  1FAC               	comf	(___awdiv@dividend+1)& (0+255),f,b
  3842  0012E6  B0D8               	btfsc	status,0,c
  3843  0012E8  2BAC               	incf	(___awdiv@dividend+1)& (0+255),f,b
  3844                           
  3845                           ; BSR set to: 0
  3846  0012EA  0E01               	movlw	1
  3847  0012EC  0100               	movlb	0	; () banked
  3848  0012EE  1BB0               	xorwf	___awdiv@sign& (0+255),f,b
  3849  0012F0                     l4780:
  3850                           
  3851                           ; BSR set to: 0
  3852  0012F0  0E00               	movlw	0
  3853  0012F2  0100               	movlb	0	; () banked
  3854  0012F4  6FB2               	movwf	(___awdiv@quotient+1)& (0+255),b
  3855  0012F6  0E00               	movlw	0
  3856  0012F8  6FB1               	movwf	___awdiv@quotient& (0+255),b
  3857                           
  3858                           ; BSR set to: 0
  3859  0012FA  0100               	movlb	0	; () banked
  3860  0012FC  51AD               	movf	___awdiv@divisor& (0+255),w,b
  3861  0012FE  0100               	movlb	0	; () banked
  3862  001300  11AE               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  3863  001302  B4D8               	btfsc	status,2,c
  3864  001304  D02C               	goto	l4802
  3865                           
  3866                           ; BSR set to: 0
  3867  001306  0E01               	movlw	1
  3868  001308  0100               	movlb	0	; () banked
  3869  00130A  6FAF               	movwf	___awdiv@counter& (0+255),b
  3870  00130C  D006               	goto	l4788
  3871  00130E                     l4786:
  3872                           
  3873                           ; BSR set to: 0
  3874  00130E  0100               	movlb	0	; () banked
  3875  001310  90D8               	bcf	status,0,c
  3876  001312  37AD               	rlcf	___awdiv@divisor& (0+255),f,b
  3877  001314  37AE               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  3878  001316  0100               	movlb	0	; () banked
  3879  001318  2BAF               	incf	___awdiv@counter& (0+255),f,b
  3880  00131A                     l4788:
  3881                           
  3882                           ; BSR set to: 0
  3883  00131A  0100               	movlb	0	; () banked
  3884  00131C  AFAE               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  3885  00131E  D7F7               	goto	l4786
  3886  001320                     l4790:
  3887                           
  3888                           ; BSR set to: 0
  3889  001320  0100               	movlb	0	; () banked
  3890  001322  90D8               	bcf	status,0,c
  3891  001324  37B1               	rlcf	___awdiv@quotient& (0+255),f,b
  3892  001326  37B2               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  3893                           
  3894                           ; BSR set to: 0
  3895  001328  0100               	movlb	0	; () banked
  3896  00132A  51AD               	movf	___awdiv@divisor& (0+255),w,b
  3897  00132C  0100               	movlb	0	; () banked
  3898  00132E  5DAB               	subwf	___awdiv@dividend& (0+255),w,b
  3899  001330  0100               	movlb	0	; () banked
  3900  001332  51AE               	movf	(___awdiv@divisor+1)& (0+255),w,b
  3901  001334  0100               	movlb	0	; () banked
  3902  001336  59AC               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  3903  001338  A0D8               	btfss	status,0,c
  3904  00133A  D00A               	goto	l4798
  3905                           
  3906                           ; BSR set to: 0
  3907  00133C  0100               	movlb	0	; () banked
  3908  00133E  51AD               	movf	___awdiv@divisor& (0+255),w,b
  3909  001340  0100               	movlb	0	; () banked
  3910  001342  5FAB               	subwf	___awdiv@dividend& (0+255),f,b
  3911  001344  0100               	movlb	0	; () banked
  3912  001346  51AE               	movf	(___awdiv@divisor+1)& (0+255),w,b
  3913  001348  0100               	movlb	0	; () banked
  3914  00134A  5BAC               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  3915                           
  3916                           ; BSR set to: 0
  3917  00134C  0100               	movlb	0	; () banked
  3918  00134E  81B1               	bsf	___awdiv@quotient& (0+255),0,b
  3919  001350                     l4798:
  3920                           
  3921                           ; BSR set to: 0
  3922  001350  0100               	movlb	0	; () banked
  3923  001352  90D8               	bcf	status,0,c
  3924  001354  33AE               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  3925  001356  33AD               	rrcf	___awdiv@divisor& (0+255),f,b
  3926                           
  3927                           ; BSR set to: 0
  3928  001358  0100               	movlb	0	; () banked
  3929  00135A  2FAF               	decfsz	___awdiv@counter& (0+255),f,b
  3930  00135C  D7E1               	goto	l4790
  3931  00135E                     l4802:
  3932                           
  3933                           ; BSR set to: 0
  3934  00135E  0100               	movlb	0	; () banked
  3935  001360  51B0               	movf	___awdiv@sign& (0+255),w,b
  3936  001362  0100               	movlb	0	; () banked
  3937  001364  B4D8               	btfsc	status,2,c
  3938  001366  D005               	goto	l4806
  3939                           
  3940                           ; BSR set to: 0
  3941  001368  0100               	movlb	0	; () banked
  3942  00136A  6DB1               	negf	___awdiv@quotient& (0+255),b
  3943  00136C  1FB2               	comf	(___awdiv@quotient+1)& (0+255),f,b
  3944  00136E  B0D8               	btfsc	status,0,c
  3945  001370  2BB2               	incf	(___awdiv@quotient+1)& (0+255),f,b
  3946  001372                     l4806:
  3947                           
  3948                           ; BSR set to: 0
  3949  001372  C0B1  F0AB         	movff	___awdiv@quotient,?___awdiv
  3950  001376  C0B2  F0AC         	movff	___awdiv@quotient+1,?___awdiv+1
  3951  00137A  0012               	return	
  3952  00137C                     __end_of___awdiv:
  3953                           	opt stack 0
  3954                           tosu	equ	0xFFF
  3955                           tosh	equ	0xFFE
  3956                           tosl	equ	0xFFD
  3957                           pclath	equ	0xFFA
  3958                           prodh	equ	0xFF4
  3959                           prodl	equ	0xFF3
  3960                           intcon2	equ	0xFF1
  3961                           intcon3	equ	0xFF0
  3962                           postinc0	equ	0xFEE
  3963                           wreg	equ	0xFE8
  3964                           indf2	equ	0xFDF
  3965                           fsr2h	equ	0xFDA
  3966                           fsr2l	equ	0xFD9
  3967                           status	equ	0xFD8
  3968                           
  3969 ;; *************** function _bottom_rocker_release *****************
  3970 ;; Defined at:
  3971 ;;		line 101 in file "bottom_rocker_fsm.c"
  3972 ;; Parameters:    Size  Location     Type
  3973 ;;		None
  3974 ;; Auto vars:     Size  Location     Type
  3975 ;;		None
  3976 ;; Return value:  Size  Location     Type
  3977 ;;                  1    wreg      void 
  3978 ;; Registers used:
  3979 ;;		wreg, status,2, status,0, cstack
  3980 ;; Tracked objects:
  3981 ;;		On entry : 0/0
  3982 ;;		On exit  : 0/0
  3983 ;;		Unchanged: 0/0
  3984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3987 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3988 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3989 ;;Total ram usage:        2 bytes
  3990 ;; Hardware stack levels used:    1
  3991 ;; Hardware stack levels required when called:    6
  3992 ;; This function calls:
  3993 ;;		_bottom_servo_rightTilt
  3994 ;; This function is called by:
  3995 ;;		_bottom_rocker_detect
  3996 ;;		_startSorting
  3997 ;; This function uses a non-reentrant model
  3998 ;;
  3999                           
  4000                           	psect	text25
  4001  001A1E                     __ptext25:
  4002                           	opt stack 0
  4003  001A1E                     _bottom_rocker_release:
  4004                           	opt stack 23
  4005                           
  4006                           ;bottom_rocker_fsm.c: 104: bottom_servo_rightTilt();
  4007                           
  4008                           ; BSR set to: 0
  4009                           ;incstack = 0
  4010  001A1E  EC17  F00B         	call	_bottom_servo_rightTilt	;wreg free
  4011                           
  4012                           ;bottom_rocker_fsm.c: 105: _delay((unsigned long)((300)*(10000000/4000.0)));
  4013  001A22  0E04               	movlw	4
  4014  001A24  0100               	movlb	0	; () banked
  4015  001A26  6FB0               	movwf	(??_bottom_rocker_release+1)& (0+255),b
  4016  001A28  0ECF               	movlw	207
  4017  001A2A  0100               	movlb	0	; () banked
  4018  001A2C  6FAF               	movwf	??_bottom_rocker_release& (0+255),b
  4019  001A2E  0E01               	movlw	1
  4020  001A30                     u4817:
  4021  001A30  2EE8               	decfsz	wreg,f,c
  4022  001A32  D7FE               	bra	u4817
  4023  001A34  2FAF               	decfsz	??_bottom_rocker_release& (0+255),f,b
  4024  001A36  D7FC               	bra	u4817
  4025  001A38  2FB0               	decfsz	(??_bottom_rocker_release+1)& (0+255),f,b
  4026  001A3A  D7FA               	bra	u4817
  4027  001A3C  D000               	nop2	
  4028                           
  4029                           ;bottom_rocker_fsm.c: 106: bottom_servo_rightTilt();
  4030  001A3E  EC17  F00B         	call	_bottom_servo_rightTilt	;wreg free
  4031                           
  4032                           ;bottom_rocker_fsm.c: 108: bottomRockerState = bottom_rocker_restore;
  4033  001A42  0EAC               	movlw	low _bottom_rocker_restore
  4034  001A44  0100               	movlb	0	; () banked
  4035  001A46  6FA1               	movwf	_bottomRockerState& (0+255),b
  4036  001A48  0E20               	movlw	high _bottom_rocker_restore
  4037  001A4A  0100               	movlb	0	; () banked
  4038  001A4C  6FA2               	movwf	(_bottomRockerState+1)& (0+255),b
  4039                           
  4040                           ; BSR set to: 0
  4041                           ;bottom_rocker_fsm.c: 110: _delay((unsigned long)((500)*(10000000/4000.0)));
  4042  001A4E  0E07               	movlw	7
  4043  001A50  0100               	movlb	0	; () banked
  4044  001A52  6FB0               	movwf	(??_bottom_rocker_release+1)& (0+255),b
  4045  001A54  0E58               	movlw	88
  4046  001A56  0100               	movlb	0	; () banked
  4047  001A58  6FAF               	movwf	??_bottom_rocker_release& (0+255),b
  4048  001A5A  0E59               	movlw	89
  4049  001A5C                     u4827:
  4050  001A5C  2EE8               	decfsz	wreg,f,c
  4051  001A5E  D7FE               	bra	u4827
  4052  001A60  2FAF               	decfsz	??_bottom_rocker_release& (0+255),f,b
  4053  001A62  D7FC               	bra	u4827
  4054  001A64  2FB0               	decfsz	(??_bottom_rocker_release+1)& (0+255),f,b
  4055  001A66  D7FA               	bra	u4827
  4056  001A68  D000               	nop2	
  4057  001A6A  0012               	return	
  4058  001A6C                     __end_of_bottom_rocker_release:
  4059                           	opt stack 0
  4060                           tosu	equ	0xFFF
  4061                           tosh	equ	0xFFE
  4062                           tosl	equ	0xFFD
  4063                           pclath	equ	0xFFA
  4064                           prodh	equ	0xFF4
  4065                           prodl	equ	0xFF3
  4066                           intcon2	equ	0xFF1
  4067                           intcon3	equ	0xFF0
  4068                           postinc0	equ	0xFEE
  4069                           wreg	equ	0xFE8
  4070                           indf2	equ	0xFDF
  4071                           fsr2h	equ	0xFDA
  4072                           fsr2l	equ	0xFD9
  4073                           status	equ	0xFD8
  4074                           
  4075 ;; *************** function _bottom_rocker_detect *****************
  4076 ;; Defined at:
  4077 ;;		line 86 in file "bottom_rocker_fsm.c"
  4078 ;; Parameters:    Size  Location     Type
  4079 ;;		None
  4080 ;; Auto vars:     Size  Location     Type
  4081 ;;		None
  4082 ;; Return value:  Size  Location     Type
  4083 ;;                  1    wreg      void 
  4084 ;; Registers used:
  4085 ;;		wreg, status,2, status,0
  4086 ;; Tracked objects:
  4087 ;;		On entry : 0/0
  4088 ;;		On exit  : 0/0
  4089 ;;		Unchanged: 0/0
  4090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4092 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4094 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4095 ;;Total ram usage:        1 bytes
  4096 ;; Hardware stack levels used:    1
  4097 ;; Hardware stack levels required when called:    5
  4098 ;; This function calls:
  4099 ;;		Nothing
  4100 ;; This function is called by:
  4101 ;;		_bottom_rocker_idle
  4102 ;;		_startSorting
  4103 ;; This function uses a non-reentrant model
  4104 ;;
  4105                           
  4106                           	psect	text26
  4107  001826                     __ptext26:
  4108                           	opt stack 0
  4109  001826                     _bottom_rocker_detect:
  4110                           	opt stack 24
  4111                           
  4112                           ;bottom_rocker_fsm.c: 88: labeled = labeled || PORTCbits.RC2;
  4113                           
  4114                           ;incstack = 0
  4115  001826  0E01               	movlw	1
  4116  001828  0100               	movlb	0	; () banked
  4117  00182A  6FAB               	movwf	_bottom_rocker_detect$352& (0+255),b
  4118                           
  4119                           ; BSR set to: 0
  4120  00182C  0100               	movlb	0	; () banked
  4121  00182E  519D               	movf	_labeled& (0+255),w,b
  4122  001830  0100               	movlb	0	; () banked
  4123  001832  119E               	iorwf	(_labeled+1)& (0+255),w,b
  4124  001834  B4D8               	btfsc	status,2,c
  4125                           
  4126                           ; BSR set to: 0
  4127  001836  B482               	btfsc	3970,2,c	;volatile
  4128  001838  D003               	goto	l4964
  4129                           
  4130                           ; BSR set to: 0
  4131  00183A  0E00               	movlw	0
  4132  00183C  0100               	movlb	0	; () banked
  4133  00183E  6FAB               	movwf	_bottom_rocker_detect$352& (0+255),b
  4134  001840                     l4964:
  4135                           
  4136                           ; BSR set to: 0
  4137  001840  C0AB  F09D         	movff	_bottom_rocker_detect$352,_labeled
  4138  001844  0100               	movlb	0	; () banked
  4139  001846  6B9E               	clrf	(_labeled+1)& (0+255),b
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;bottom_rocker_fsm.c: 89: (INTCONbits.GIE = 0);
  4143  001848  9EF2               	bcf	intcon,7,c	;volatile
  4144                           
  4145                           ; BSR set to: 0
  4146                           ;bottom_rocker_fsm.c: 90: if(labeled){
  4147  00184A  0100               	movlb	0	; () banked
  4148  00184C  519D               	movf	_labeled& (0+255),w,b
  4149  00184E  0100               	movlb	0	; () banked
  4150  001850  119E               	iorwf	(_labeled+1)& (0+255),w,b
  4151  001852  B4D8               	btfsc	status,2,c
  4152  001854  D008               	goto	l4974
  4153                           
  4154                           ; BSR set to: 0
  4155                           ;bottom_rocker_fsm.c: 91: bottom_move = 1;
  4156  001856  0E00               	movlw	0
  4157  001858  6E4E               	movwf	_bottom_move+1,c
  4158  00185A  0E01               	movlw	1
  4159  00185C  6E4D               	movwf	_bottom_move,c
  4160                           
  4161                           ; BSR set to: 0
  4162                           ;bottom_rocker_fsm.c: 92: tin_can_label++;
  4163  00185E  0100               	movlb	0	; () banked
  4164  001860  4B9B               	infsnz	_tin_can_label& (0+255),f,b
  4165  001862  2B9C               	incf	(_tin_can_label+1)& (0+255),f,b
  4166                           
  4167                           ;bottom_rocker_fsm.c: 93: }else{
  4168  001864  D007               	goto	l4978
  4169  001866                     l4974:
  4170                           
  4171                           ; BSR set to: 0
  4172                           ;bottom_rocker_fsm.c: 94: bottom_move = 0;
  4173  001866  0E00               	movlw	0
  4174  001868  6E4E               	movwf	_bottom_move+1,c
  4175  00186A  0E00               	movlw	0
  4176  00186C  6E4D               	movwf	_bottom_move,c
  4177                           
  4178                           ; BSR set to: 0
  4179                           ;bottom_rocker_fsm.c: 95: tin_can++;
  4180  00186E  0100               	movlb	0	; () banked
  4181  001870  4B99               	infsnz	_tin_can& (0+255),f,b
  4182  001872  2B9A               	incf	(_tin_can+1)& (0+255),f,b
  4183  001874                     l4978:
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;bottom_rocker_fsm.c: 96: }
  4187                           ;bottom_rocker_fsm.c: 97: bottomRockerState = bottom_rocker_release;
  4188  001874  0E1E               	movlw	low _bottom_rocker_release
  4189  001876  0100               	movlb	0	; () banked
  4190  001878  6FA1               	movwf	_bottomRockerState& (0+255),b
  4191  00187A  0E1A               	movlw	high _bottom_rocker_release
  4192  00187C  0100               	movlb	0	; () banked
  4193  00187E  6FA2               	movwf	(_bottomRockerState+1)& (0+255),b
  4194  001880  0012               	return	
  4195  001882                     __end_of_bottom_rocker_detect:
  4196                           	opt stack 0
  4197                           tosu	equ	0xFFF
  4198                           tosh	equ	0xFFE
  4199                           tosl	equ	0xFFD
  4200                           pclath	equ	0xFFA
  4201                           prodh	equ	0xFF4
  4202                           prodl	equ	0xFF3
  4203                           intcon	equ	0xFF2
  4204                           intcon2	equ	0xFF1
  4205                           intcon3	equ	0xFF0
  4206                           postinc0	equ	0xFEE
  4207                           wreg	equ	0xFE8
  4208                           indf2	equ	0xFDF
  4209                           fsr2h	equ	0xFDA
  4210                           fsr2l	equ	0xFD9
  4211                           status	equ	0xFD8
  4212                           
  4213 ;; *************** function _bottom_rocker_idle *****************
  4214 ;; Defined at:
  4215 ;;		line 44 in file "bottom_rocker_fsm.c"
  4216 ;; Parameters:    Size  Location     Type
  4217 ;;		None
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;  o               2    7[BANK0 ] int 
  4220 ;; Return value:  Size  Location     Type
  4221 ;;                  1    wreg      void 
  4222 ;; Registers used:
  4223 ;;		wreg, status,2, status,0, cstack
  4224 ;; Tracked objects:
  4225 ;;		On entry : 0/0
  4226 ;;		On exit  : 0/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4230 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4231 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4232 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4233 ;;Total ram usage:        5 bytes
  4234 ;; Hardware stack levels used:    1
  4235 ;; Hardware stack levels required when called:    6
  4236 ;; This function calls:
  4237 ;;		_bottom_servo_rightTilt
  4238 ;; This function is called by:
  4239 ;;		_bottom_rocker_initial
  4240 ;;		_bottom_rocker_restore
  4241 ;;		_startSorting
  4242 ;; This function uses a non-reentrant model
  4243 ;;
  4244                           
  4245                           	psect	text27
  4246  001108                     __ptext27:
  4247                           	opt stack 0
  4248  001108                     _bottom_rocker_idle:
  4249                           	opt stack 23
  4250                           
  4251                           ;bottom_rocker_fsm.c: 50: if( PORTEbits.RE1 == 1){
  4252                           
  4253                           ; BSR set to: 0
  4254                           ;incstack = 0
  4255  001108  A284               	btfss	3972,1,c	;volatile
  4256  00110A  D004               	goto	l4902
  4257                           
  4258                           ;bottom_rocker_fsm.c: 51: fsm2++;
  4259  00110C  0100               	movlb	0	; () banked
  4260  00110E  4B9F               	infsnz	_fsm2& (0+255),f,b
  4261  001110  2BA0               	incf	(_fsm2+1)& (0+255),f,b
  4262                           
  4263                           ;bottom_rocker_fsm.c: 53: }else{
  4264  001112  0012               	return	
  4265  001114                     l4902:
  4266                           
  4267                           ;bottom_rocker_fsm.c: 56: fsm2 = 0;
  4268  001114  0E00               	movlw	0
  4269  001116  0100               	movlb	0	; () banked
  4270  001118  6FA0               	movwf	(_fsm2+1)& (0+255),b
  4271  00111A  0E00               	movlw	0
  4272  00111C  6F9F               	movwf	_fsm2& (0+255),b
  4273                           
  4274                           ;bottom_rocker_fsm.c: 59: labeled = 0;
  4275  00111E  0E00               	movlw	0
  4276  001120  0100               	movlb	0	; () banked
  4277  001122  6F9E               	movwf	(_labeled+1)& (0+255),b
  4278  001124  0E00               	movlw	0
  4279  001126  6F9D               	movwf	_labeled& (0+255),b
  4280                           
  4281                           ; BSR set to: 0
  4282                           ;bottom_rocker_fsm.c: 60: (INTCONbits.GIE = 1);
  4283  001128  8EF2               	bsf	intcon,7,c	;volatile
  4284                           
  4285                           ;bottom_rocker_fsm.c: 62: int o;
  4286                           ;bottom_rocker_fsm.c: 63: for(o = 0; o<20; o++){
  4287  00112A  0E00               	movlw	0
  4288  00112C  0100               	movlb	0	; () banked
  4289  00112E  6FB3               	movwf	(bottom_rocker_idle@o+1)& (0+255),b
  4290  001130  0E00               	movlw	0
  4291  001132  6FB2               	movwf	bottom_rocker_idle@o& (0+255),b
  4292  001134                     l4906:
  4293                           
  4294                           ; BSR set to: 0
  4295  001134  0100               	movlb	0	; () banked
  4296  001136  BFB3               	btfsc	(bottom_rocker_idle@o+1)& (0+255),7,b
  4297  001138  D008               	goto	l4910
  4298  00113A  0100               	movlb	0	; () banked
  4299  00113C  51B3               	movf	(bottom_rocker_idle@o+1)& (0+255),w,b
  4300  00113E  E123               	bnz	l4926
  4301  001140  0E14               	movlw	20
  4302  001142  0100               	movlb	0	; () banked
  4303  001144  5DB2               	subwf	bottom_rocker_idle@o& (0+255),w,b
  4304  001146  B0D8               	btfsc	status,0,c
  4305  001148  D01E               	goto	l4926
  4306  00114A                     l4910:
  4307                           
  4308                           ; BSR set to: 0
  4309                           ;bottom_rocker_fsm.c: 64: _delay((unsigned long)((5)*(10000000/4000.0)));
  4310  00114A  0E11               	movlw	17
  4311  00114C  0100               	movlb	0	; () banked
  4312  00114E  6FAF               	movwf	??_bottom_rocker_idle& (0+255),b
  4313  001150  0E3A               	movlw	58
  4314  001152                     u4837:
  4315  001152  2EE8               	decfsz	wreg,f,c
  4316  001154  D7FE               	bra	u4837
  4317  001156  2FAF               	decfsz	??_bottom_rocker_idle& (0+255),f,b
  4318  001158  D7FC               	bra	u4837
  4319  00115A  F000               	nop	
  4320                           
  4321                           ;bottom_rocker_fsm.c: 66: labeled = labeled || PORTCbits.RC2;
  4322  00115C  0E01               	movlw	1
  4323  00115E  0100               	movlb	0	; () banked
  4324  001160  6FB0               	movwf	_bottom_rocker_idle$349& (0+255),b
  4325                           
  4326                           ; BSR set to: 0
  4327  001162  0100               	movlb	0	; () banked
  4328  001164  519D               	movf	_labeled& (0+255),w,b
  4329  001166  0100               	movlb	0	; () banked
  4330  001168  119E               	iorwf	(_labeled+1)& (0+255),w,b
  4331  00116A  B4D8               	btfsc	status,2,c
  4332                           
  4333                           ; BSR set to: 0
  4334  00116C  B482               	btfsc	3970,2,c	;volatile
  4335  00116E  D003               	goto	l4920
  4336                           
  4337                           ; BSR set to: 0
  4338  001170  0E00               	movlw	0
  4339  001172  0100               	movlb	0	; () banked
  4340  001174  6FB0               	movwf	_bottom_rocker_idle$349& (0+255),b
  4341  001176                     l4920:
  4342                           
  4343                           ; BSR set to: 0
  4344  001176  C0B0  F09D         	movff	_bottom_rocker_idle$349,_labeled
  4345  00117A  0100               	movlb	0	; () banked
  4346  00117C  6B9E               	clrf	(_labeled+1)& (0+255),b
  4347                           
  4348                           ; BSR set to: 0
  4349  00117E  0100               	movlb	0	; () banked
  4350  001180  4BB2               	infsnz	bottom_rocker_idle@o& (0+255),f,b
  4351  001182  2BB3               	incf	(bottom_rocker_idle@o+1)& (0+255),f,b
  4352  001184  D7D7               	goto	l4906
  4353  001186                     l4926:
  4354                           
  4355                           ; BSR set to: 0
  4356                           ;bottom_rocker_fsm.c: 69: }
  4357                           ;bottom_rocker_fsm.c: 71: start_bottom_distribution = 1;
  4358  001186  0E00               	movlw	0
  4359  001188  0100               	movlb	0	; () banked
  4360  00118A  6FAA               	movwf	(_start_bottom_distribution+1)& (0+255),b
  4361  00118C  0E01               	movlw	1
  4362  00118E  6FA9               	movwf	_start_bottom_distribution& (0+255),b
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;bottom_rocker_fsm.c: 74: bottom_servo_rightTilt();
  4366  001190  EC17  F00B         	call	_bottom_servo_rightTilt	;wreg free
  4367                           
  4368                           ;bottom_rocker_fsm.c: 75: for(o = 0; o<20; o++){
  4369  001194  0E00               	movlw	0
  4370  001196  0100               	movlb	0	; () banked
  4371  001198  6FB3               	movwf	(bottom_rocker_idle@o+1)& (0+255),b
  4372  00119A  0E00               	movlw	0
  4373  00119C  6FB2               	movwf	bottom_rocker_idle@o& (0+255),b
  4374  00119E                     l4932:
  4375                           
  4376                           ; BSR set to: 0
  4377  00119E  0100               	movlb	0	; () banked
  4378  0011A0  BFB3               	btfsc	(bottom_rocker_idle@o+1)& (0+255),7,b
  4379  0011A2  D008               	goto	l4936
  4380  0011A4  0100               	movlb	0	; () banked
  4381  0011A6  51B3               	movf	(bottom_rocker_idle@o+1)& (0+255),w,b
  4382  0011A8  E123               	bnz	l4952
  4383  0011AA  0E14               	movlw	20
  4384  0011AC  0100               	movlb	0	; () banked
  4385  0011AE  5DB2               	subwf	bottom_rocker_idle@o& (0+255),w,b
  4386  0011B0  B0D8               	btfsc	status,0,c
  4387  0011B2  D01E               	goto	l4952
  4388  0011B4                     l4936:
  4389                           
  4390                           ; BSR set to: 0
  4391                           ;bottom_rocker_fsm.c: 76: _delay((unsigned long)((5)*(10000000/4000.0)));
  4392  0011B4  0E11               	movlw	17
  4393  0011B6  0100               	movlb	0	; () banked
  4394  0011B8  6FAF               	movwf	??_bottom_rocker_idle& (0+255),b
  4395  0011BA  0E3A               	movlw	58
  4396  0011BC                     u4847:
  4397  0011BC  2EE8               	decfsz	wreg,f,c
  4398  0011BE  D7FE               	bra	u4847
  4399  0011C0  2FAF               	decfsz	??_bottom_rocker_idle& (0+255),f,b
  4400  0011C2  D7FC               	bra	u4847
  4401  0011C4  F000               	nop	
  4402                           
  4403                           ;bottom_rocker_fsm.c: 77: labeled = labeled || PORTCbits.RC2;
  4404  0011C6  0E01               	movlw	1
  4405  0011C8  0100               	movlb	0	; () banked
  4406  0011CA  6FB1               	movwf	_bottom_rocker_idle$350& (0+255),b
  4407                           
  4408                           ; BSR set to: 0
  4409  0011CC  0100               	movlb	0	; () banked
  4410  0011CE  519D               	movf	_labeled& (0+255),w,b
  4411  0011D0  0100               	movlb	0	; () banked
  4412  0011D2  119E               	iorwf	(_labeled+1)& (0+255),w,b
  4413  0011D4  B4D8               	btfsc	status,2,c
  4414                           
  4415                           ; BSR set to: 0
  4416  0011D6  B482               	btfsc	3970,2,c	;volatile
  4417  0011D8  D003               	goto	l4946
  4418                           
  4419                           ; BSR set to: 0
  4420  0011DA  0E00               	movlw	0
  4421  0011DC  0100               	movlb	0	; () banked
  4422  0011DE  6FB1               	movwf	_bottom_rocker_idle$350& (0+255),b
  4423  0011E0                     l4946:
  4424                           
  4425                           ; BSR set to: 0
  4426  0011E0  C0B1  F09D         	movff	_bottom_rocker_idle$350,_labeled
  4427  0011E4  0100               	movlb	0	; () banked
  4428  0011E6  6B9E               	clrf	(_labeled+1)& (0+255),b
  4429                           
  4430                           ; BSR set to: 0
  4431  0011E8  0100               	movlb	0	; () banked
  4432  0011EA  4BB2               	infsnz	bottom_rocker_idle@o& (0+255),f,b
  4433  0011EC  2BB3               	incf	(bottom_rocker_idle@o+1)& (0+255),f,b
  4434  0011EE  D7D7               	goto	l4932
  4435  0011F0                     l4952:
  4436                           
  4437                           ; BSR set to: 0
  4438                           ;bottom_rocker_fsm.c: 79: }
  4439                           ;bottom_rocker_fsm.c: 81: bottomRockerState = bottom_rocker_detect;
  4440  0011F0  0E26               	movlw	low _bottom_rocker_detect
  4441  0011F2  0100               	movlb	0	; () banked
  4442  0011F4  6FA1               	movwf	_bottomRockerState& (0+255),b
  4443  0011F6  0E18               	movlw	high _bottom_rocker_detect
  4444  0011F8  0100               	movlb	0	; () banked
  4445  0011FA  6FA2               	movwf	(_bottomRockerState+1)& (0+255),b
  4446                           
  4447                           ; BSR set to: 0
  4448  0011FC  0012               	return	
  4449  0011FE                     __end_of_bottom_rocker_idle:
  4450                           	opt stack 0
  4451                           tosu	equ	0xFFF
  4452                           tosh	equ	0xFFE
  4453                           tosl	equ	0xFFD
  4454                           pclath	equ	0xFFA
  4455                           prodh	equ	0xFF4
  4456                           prodl	equ	0xFF3
  4457                           intcon	equ	0xFF2
  4458                           intcon2	equ	0xFF1
  4459                           intcon3	equ	0xFF0
  4460                           postinc0	equ	0xFEE
  4461                           wreg	equ	0xFE8
  4462                           indf2	equ	0xFDF
  4463                           fsr2h	equ	0xFDA
  4464                           fsr2l	equ	0xFD9
  4465                           status	equ	0xFD8
  4466                           
  4467 ;; *************** function _bottom_rocker_restore *****************
  4468 ;; Defined at:
  4469 ;;		line 115 in file "bottom_rocker_fsm.c"
  4470 ;; Parameters:    Size  Location     Type
  4471 ;;		None
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;		None
  4474 ;; Return value:  Size  Location     Type
  4475 ;;                  1    wreg      void 
  4476 ;; Registers used:
  4477 ;;		wreg, status,2, status,0, cstack
  4478 ;; Tracked objects:
  4479 ;;		On entry : 0/0
  4480 ;;		On exit  : 0/0
  4481 ;;		Unchanged: 0/0
  4482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4487 ;;Total ram usage:        0 bytes
  4488 ;; Hardware stack levels used:    1
  4489 ;; Hardware stack levels required when called:    6
  4490 ;; This function calls:
  4491 ;;		_bottom_servo_leftTilt
  4492 ;; This function is called by:
  4493 ;;		_bottom_rocker_release
  4494 ;;		_startSorting
  4495 ;; This function uses a non-reentrant model
  4496 ;;
  4497                           
  4498                           	psect	text28
  4499  0020AC                     __ptext28:
  4500                           	opt stack 0
  4501  0020AC                     _bottom_rocker_restore:
  4502                           	opt stack 23
  4503                           
  4504                           ;bottom_rocker_fsm.c: 118: bottom_servo_leftTilt();
  4505                           
  4506                           ; BSR set to: 0
  4507                           ;incstack = 0
  4508  0020AC  EC80  F00D         	call	_bottom_servo_leftTilt	;wreg free
  4509                           
  4510                           ;bottom_rocker_fsm.c: 120: bottomRockerState = bottom_rocker_idle;
  4511  0020B0  0E08               	movlw	low _bottom_rocker_idle
  4512  0020B2  0100               	movlb	0	; () banked
  4513  0020B4  6FA1               	movwf	_bottomRockerState& (0+255),b
  4514  0020B6  0E11               	movlw	high _bottom_rocker_idle
  4515  0020B8  0100               	movlb	0	; () banked
  4516  0020BA  6FA2               	movwf	(_bottomRockerState+1)& (0+255),b
  4517  0020BC  0012               	return	
  4518  0020BE                     __end_of_bottom_rocker_restore:
  4519                           	opt stack 0
  4520                           tosu	equ	0xFFF
  4521                           tosh	equ	0xFFE
  4522                           tosl	equ	0xFFD
  4523                           pclath	equ	0xFFA
  4524                           prodh	equ	0xFF4
  4525                           prodl	equ	0xFF3
  4526                           intcon	equ	0xFF2
  4527                           intcon2	equ	0xFF1
  4528                           intcon3	equ	0xFF0
  4529                           postinc0	equ	0xFEE
  4530                           wreg	equ	0xFE8
  4531                           indf2	equ	0xFDF
  4532                           fsr2h	equ	0xFDA
  4533                           fsr2l	equ	0xFD9
  4534                           status	equ	0xFD8
  4535                           
  4536 ;; *************** function _bottom_servo_leftTilt *****************
  4537 ;; Defined at:
  4538 ;;		line 43 in file "servo.c"
  4539 ;; Parameters:    Size  Location     Type
  4540 ;;		None
  4541 ;; Auto vars:     Size  Location     Type
  4542 ;;  i               2    1[BANK0 ] unsigned int 
  4543 ;; Return value:  Size  Location     Type
  4544 ;;                  1    wreg      void 
  4545 ;; Registers used:
  4546 ;;		wreg, status,2, status,0
  4547 ;; Tracked objects:
  4548 ;;		On entry : 0/0
  4549 ;;		On exit  : 0/0
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4554 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4555 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4556 ;;Total ram usage:        3 bytes
  4557 ;; Hardware stack levels used:    1
  4558 ;; Hardware stack levels required when called:    5
  4559 ;; This function calls:
  4560 ;;		Nothing
  4561 ;; This function is called by:
  4562 ;;		_bottom_rocker_restore
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           	psect	text29
  4567  001B00                     __ptext29:
  4568                           	opt stack 0
  4569  001B00                     _bottom_servo_leftTilt:
  4570                           	opt stack 23
  4571                           
  4572                           ;servo.c: 45: unsigned int i;
  4573                           ;servo.c: 46: for(i=0;i<15;i++)
  4574                           
  4575                           ; BSR set to: 0
  4576                           ;incstack = 0
  4577  001B00  0E00               	movlw	0
  4578  001B02  0100               	movlb	0	; () banked
  4579  001B04  6FAD               	movwf	(bottom_servo_leftTilt@i+1)& (0+255),b
  4580  001B06  0E00               	movlw	0
  4581  001B08  6FAC               	movwf	bottom_servo_leftTilt@i& (0+255),b
  4582  001B0A                     l4610:
  4583                           
  4584                           ; BSR set to: 0
  4585  001B0A  0100               	movlb	0	; () banked
  4586  001B0C  51AD               	movf	(bottom_servo_leftTilt@i+1)& (0+255),w,b
  4587  001B0E  E11C               	bnz	l724
  4588  001B10  0E0F               	movlw	15
  4589  001B12  0100               	movlb	0	; () banked
  4590  001B14  5DAC               	subwf	bottom_servo_leftTilt@i& (0+255),w,b
  4591  001B16  B0D8               	btfsc	status,0,c
  4592  001B18  0012               	return	
  4593                           
  4594                           ; BSR set to: 0
  4595                           ;servo.c: 47: {
  4596                           ;servo.c: 48: LATBbits.LATB3 = 1;
  4597                           
  4598                           ; BSR set to: 0
  4599  001B1A  868A               	bsf	3978,3,c	;volatile
  4600                           
  4601                           ; BSR set to: 0
  4602                           ;servo.c: 49: _delay((unsigned long)((800)*(10000000/4000000.0)));
  4603  001B1C  0E03               	movlw	3
  4604  001B1E  0100               	movlb	0	; () banked
  4605  001B20  6FAB               	movwf	??_bottom_servo_leftTilt& (0+255),b
  4606  001B22  0E97               	movlw	151
  4607  001B24                     u4857:
  4608  001B24  2EE8               	decfsz	wreg,f,c
  4609  001B26  D7FE               	bra	u4857
  4610  001B28  2FAB               	decfsz	??_bottom_servo_leftTilt& (0+255),f,b
  4611  001B2A  D7FC               	bra	u4857
  4612  001B2C  D000               	nop2	
  4613                           
  4614                           ;servo.c: 50: LATBbits.LATB3 = 0;
  4615  001B2E  968A               	bcf	3978,3,c	;volatile
  4616                           
  4617                           ;servo.c: 51: _delay((unsigned long)((19200)*(10000000/4000000.0)));
  4618  001B30  0E3F               	movlw	63
  4619  001B32  0100               	movlb	0	; () banked
  4620  001B34  6FAB               	movwf	??_bottom_servo_leftTilt& (0+255),b
  4621  001B36  0E55               	movlw	85
  4622  001B38                     u4867:
  4623  001B38  2EE8               	decfsz	wreg,f,c
  4624  001B3A  D7FE               	bra	u4867
  4625  001B3C  2FAB               	decfsz	??_bottom_servo_leftTilt& (0+255),f,b
  4626  001B3E  D7FC               	bra	u4867
  4627  001B40  0100               	movlb	0	; () banked
  4628  001B42  4BAC               	infsnz	bottom_servo_leftTilt@i& (0+255),f,b
  4629  001B44  2BAD               	incf	(bottom_servo_leftTilt@i+1)& (0+255),f,b
  4630  001B46  D7E1               	goto	l4610
  4631  001B48                     l724:
  4632                           
  4633                           ; BSR set to: 0
  4634  001B48  0012               	return		;funcret
  4635  001B4A                     __end_of_bottom_servo_leftTilt:
  4636                           	opt stack 0
  4637                           tosu	equ	0xFFF
  4638                           tosh	equ	0xFFE
  4639                           tosl	equ	0xFFD
  4640                           pclath	equ	0xFFA
  4641                           prodh	equ	0xFF4
  4642                           prodl	equ	0xFF3
  4643                           intcon	equ	0xFF2
  4644                           intcon2	equ	0xFF1
  4645                           intcon3	equ	0xFF0
  4646                           postinc0	equ	0xFEE
  4647                           wreg	equ	0xFE8
  4648                           indf2	equ	0xFDF
  4649                           fsr2h	equ	0xFDA
  4650                           fsr2l	equ	0xFD9
  4651                           status	equ	0xFD8
  4652                           
  4653 ;; *************** function _bottom_servo_rightTilt *****************
  4654 ;; Defined at:
  4655 ;;		line 25 in file "servo.c"
  4656 ;; Parameters:    Size  Location     Type
  4657 ;;		None
  4658 ;; Auto vars:     Size  Location     Type
  4659 ;;  i               2    2[BANK0 ] unsigned int 
  4660 ;; Return value:  Size  Location     Type
  4661 ;;                  1    wreg      void 
  4662 ;; Registers used:
  4663 ;;		wreg, status,2, status,0
  4664 ;; Tracked objects:
  4665 ;;		On entry : 0/0
  4666 ;;		On exit  : 0/0
  4667 ;;		Unchanged: 0/0
  4668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4670 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4671 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4672 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4673 ;;Total ram usage:        4 bytes
  4674 ;; Hardware stack levels used:    1
  4675 ;; Hardware stack levels required when called:    5
  4676 ;; This function calls:
  4677 ;;		Nothing
  4678 ;; This function is called by:
  4679 ;;		_bottom_rocker_idle
  4680 ;;		_bottom_rocker_release
  4681 ;; This function uses a non-reentrant model
  4682 ;;
  4683                           
  4684                           	psect	text30
  4685  00162E                     __ptext30:
  4686                           	opt stack 0
  4687  00162E                     _bottom_servo_rightTilt:
  4688                           	opt stack 23
  4689                           
  4690                           ;servo.c: 27: unsigned int i;
  4691                           ;servo.c: 28: for(i=0;i<4;i++)
  4692                           
  4693                           ; BSR set to: 0
  4694                           ;incstack = 0
  4695  00162E  0E00               	movlw	0
  4696  001630  0100               	movlb	0	; () banked
  4697  001632  6FAE               	movwf	(bottom_servo_rightTilt@i+1)& (0+255),b
  4698  001634  0E00               	movlw	0
  4699  001636  6FAD               	movwf	bottom_servo_rightTilt@i& (0+255),b
  4700  001638                     l4586:
  4701                           
  4702                           ; BSR set to: 0
  4703  001638  0100               	movlb	0	; () banked
  4704  00163A  51AE               	movf	(bottom_servo_rightTilt@i+1)& (0+255),w,b
  4705  00163C  E12D               	bnz	l719
  4706  00163E  0E04               	movlw	4
  4707  001640  0100               	movlb	0	; () banked
  4708  001642  5DAD               	subwf	bottom_servo_rightTilt@i& (0+255),w,b
  4709  001644  B0D8               	btfsc	status,0,c
  4710  001646  0012               	return	
  4711                           
  4712                           ; BSR set to: 0
  4713                           ;servo.c: 29: {
  4714                           ;servo.c: 30: LATBbits.LATB3 = 1;
  4715                           
  4716                           ; BSR set to: 0
  4717  001648  868A               	bsf	3978,3,c	;volatile
  4718                           
  4719                           ; BSR set to: 0
  4720                           ;servo.c: 31: _delay((unsigned long)((2200)*(10000000/4000000.0)));
  4721  00164A  0E08               	movlw	8
  4722  00164C  0100               	movlb	0	; () banked
  4723  00164E  6FAB               	movwf	??_bottom_servo_rightTilt& (0+255),b
  4724  001650  0E23               	movlw	35
  4725  001652                     u4877:
  4726  001652  2EE8               	decfsz	wreg,f,c
  4727  001654  D7FE               	bra	u4877
  4728  001656  2FAB               	decfsz	??_bottom_servo_rightTilt& (0+255),f,b
  4729  001658  D7FC               	bra	u4877
  4730                           
  4731                           ;servo.c: 32: LATBbits.LATB3 = 0;
  4732  00165A  968A               	bcf	3978,3,c	;volatile
  4733                           
  4734                           ;servo.c: 33: _delay((unsigned long)((17800)*(10000000/4000000.0)));
  4735  00165C  0E3A               	movlw	58
  4736  00165E  0100               	movlb	0	; () banked
  4737  001660  6FAB               	movwf	??_bottom_servo_rightTilt& (0+255),b
  4738  001662  0EC9               	movlw	201
  4739  001664                     u4887:
  4740  001664  2EE8               	decfsz	wreg,f,c
  4741  001666  D7FE               	bra	u4887
  4742  001668  2FAB               	decfsz	??_bottom_servo_rightTilt& (0+255),f,b
  4743  00166A  D7FC               	bra	u4887
  4744  00166C  D000               	nop2	
  4745                           
  4746                           ;servo.c: 36: labeled = labeled || PORTCbits.RC2;
  4747  00166E  0E01               	movlw	1
  4748  001670  0100               	movlb	0	; () banked
  4749  001672  6FAC               	movwf	_bottom_servo_rightTilt$1247& (0+255),b
  4750                           
  4751                           ; BSR set to: 0
  4752  001674  0100               	movlb	0	; () banked
  4753  001676  519D               	movf	_labeled& (0+255),w,b
  4754  001678  0100               	movlb	0	; () banked
  4755  00167A  119E               	iorwf	(_labeled+1)& (0+255),w,b
  4756  00167C  B4D8               	btfsc	status,2,c
  4757                           
  4758                           ; BSR set to: 0
  4759  00167E  B482               	btfsc	3970,2,c	;volatile
  4760  001680  D003               	goto	l4602
  4761                           
  4762                           ; BSR set to: 0
  4763  001682  0E00               	movlw	0
  4764  001684  0100               	movlb	0	; () banked
  4765  001686  6FAC               	movwf	_bottom_servo_rightTilt$1247& (0+255),b
  4766  001688                     l4602:
  4767                           
  4768                           ; BSR set to: 0
  4769  001688  C0AC  F09D         	movff	_bottom_servo_rightTilt$1247,_labeled
  4770  00168C  0100               	movlb	0	; () banked
  4771  00168E  6B9E               	clrf	(_labeled+1)& (0+255),b
  4772                           
  4773                           ; BSR set to: 0
  4774  001690  0100               	movlb	0	; () banked
  4775  001692  4BAD               	infsnz	bottom_servo_rightTilt@i& (0+255),f,b
  4776  001694  2BAE               	incf	(bottom_servo_rightTilt@i+1)& (0+255),f,b
  4777  001696  D7D0               	goto	l4586
  4778  001698                     l719:
  4779                           
  4780                           ; BSR set to: 0
  4781  001698  0012               	return		;funcret
  4782  00169A                     __end_of_bottom_servo_rightTilt:
  4783                           	opt stack 0
  4784                           tosu	equ	0xFFF
  4785                           tosh	equ	0xFFE
  4786                           tosl	equ	0xFFD
  4787                           pclath	equ	0xFFA
  4788                           prodh	equ	0xFF4
  4789                           prodl	equ	0xFF3
  4790                           intcon	equ	0xFF2
  4791                           intcon2	equ	0xFF1
  4792                           intcon3	equ	0xFF0
  4793                           postinc0	equ	0xFEE
  4794                           wreg	equ	0xFE8
  4795                           indf2	equ	0xFDF
  4796                           fsr2h	equ	0xFDA
  4797                           fsr2l	equ	0xFD9
  4798                           status	equ	0xFD8
  4799                           
  4800 ;; *************** function _bottom_distribution_move *****************
  4801 ;; Defined at:
  4802 ;;		line 70 in file "bottom_distribution_fsm.c"
  4803 ;; Parameters:    Size  Location     Type
  4804 ;;		None
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;		None
  4807 ;; Return value:  Size  Location     Type
  4808 ;;                  1    wreg      void 
  4809 ;; Registers used:
  4810 ;;		wreg, status,2, status,0, cstack
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/0
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4818 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4819 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4820 ;;Total ram usage:        2 bytes
  4821 ;; Hardware stack levels used:    1
  4822 ;; Hardware stack levels required when called:    6
  4823 ;; This function calls:
  4824 ;;		_bottom_distribution_motor_ccw
  4825 ;;		_bottom_distribution_motor_ccw2
  4826 ;;		_bottom_distribution_motor_cw
  4827 ;;		_bottom_distribution_motor_cw2
  4828 ;; This function is called by:
  4829 ;;		_bottom_distribution_prepare
  4830 ;;		_startSorting
  4831 ;; This function uses a non-reentrant model
  4832 ;;
  4833                           
  4834                           	psect	text31
  4835  0011FE                     __ptext31:
  4836                           	opt stack 0
  4837  0011FE                     _bottom_distribution_move:
  4838                           	opt stack 23
  4839                           
  4840                           ;bottom_distribution_fsm.c: 75: if(b_m == 1){
  4841                           
  4842                           ; BSR set to: 0
  4843                           ;incstack = 0
  4844  0011FE  044B               	decf	_b_m,w,c
  4845  001200  104C               	iorwf	_b_m+1,w,c
  4846  001202  A4D8               	btfss	status,2,c
  4847  001204  D02B               	goto	l4884
  4848                           
  4849                           ;bottom_distribution_fsm.c: 77: bottom_distribution_motor_ccw();
  4850  001206  ECD4  F00F         	call	_bottom_distribution_motor_ccw	;wreg free
  4851                           
  4852                           ;bottom_distribution_fsm.c: 78: bottom_distribution_motor_ccw2();
  4853  00120A  ECAE  F00F         	call	_bottom_distribution_motor_ccw2	;wreg free
  4854                           
  4855                           ;bottom_distribution_fsm.c: 79: _delay((unsigned long)((30)*(10000000/4000.0)));
  4856  00120E  0E62               	movlw	98
  4857  001210  0100               	movlb	0	; () banked
  4858  001212  6FAD               	movwf	??_bottom_distribution_move& (0+255),b
  4859  001214  0E65               	movlw	101
  4860  001216                     u4897:
  4861  001216  2EE8               	decfsz	wreg,f,c
  4862  001218  D7FE               	bra	u4897
  4863  00121A  2FAD               	decfsz	??_bottom_distribution_move& (0+255),f,b
  4864  00121C  D7FC               	bra	u4897
  4865  00121E  D000               	nop2	
  4866                           
  4867                           ;bottom_distribution_fsm.c: 80: bottom_distribution_motor_cw2();
  4868  001220  EC88  F00F         	call	_bottom_distribution_motor_cw2	;wreg free
  4869                           
  4870                           ;bottom_distribution_fsm.c: 81: _delay((unsigned long)((200)*(10000000/4000.0)));
  4871  001224  0E03               	movlw	3
  4872  001226  0100               	movlb	0	; () banked
  4873  001228  6FAE               	movwf	(??_bottom_distribution_move+1)& (0+255),b
  4874  00122A  0E8A               	movlw	138
  4875  00122C  0100               	movlb	0	; () banked
  4876  00122E  6FAD               	movwf	??_bottom_distribution_move& (0+255),b
  4877  001230  0E55               	movlw	85
  4878  001232                     u4907:
  4879  001232  2EE8               	decfsz	wreg,f,c
  4880  001234  D7FE               	bra	u4907
  4881  001236  2FAD               	decfsz	??_bottom_distribution_move& (0+255),f,b
  4882  001238  D7FC               	bra	u4907
  4883  00123A  2FAE               	decfsz	(??_bottom_distribution_move+1)& (0+255),f,b
  4884  00123C  D7FA               	bra	u4907
  4885  00123E  D000               	nop2	
  4886                           
  4887                           ;bottom_distribution_fsm.c: 82: bottom_distribution_motor_ccw2();
  4888  001240  ECAE  F00F         	call	_bottom_distribution_motor_ccw2	;wreg free
  4889                           
  4890                           ;bottom_distribution_fsm.c: 83: _delay((unsigned long)((30)*(10000000/4000.0)));
  4891  001244  0E62               	movlw	98
  4892  001246  0100               	movlb	0	; () banked
  4893  001248  6FAD               	movwf	??_bottom_distribution_move& (0+255),b
  4894  00124A  0E65               	movlw	101
  4895  00124C                     u4917:
  4896  00124C  2EE8               	decfsz	wreg,f,c
  4897  00124E  D7FE               	bra	u4917
  4898  001250  2FAD               	decfsz	??_bottom_distribution_move& (0+255),f,b
  4899  001252  D7FC               	bra	u4917
  4900  001254  D000               	nop2	
  4901                           
  4902                           ;bottom_distribution_fsm.c: 84: bottom_distribution_motor_cw2();
  4903  001256  EC88  F00F         	call	_bottom_distribution_motor_cw2	;wreg free
  4904                           
  4905                           ;bottom_distribution_fsm.c: 85: }else{
  4906  00125A  D02A               	goto	l4894
  4907  00125C                     l4884:
  4908                           
  4909                           ;bottom_distribution_fsm.c: 87: bottom_distribution_motor_cw();
  4910  00125C  EC9B  F00F         	call	_bottom_distribution_motor_cw	;wreg free
  4911                           
  4912                           ;bottom_distribution_fsm.c: 88: bottom_distribution_motor_cw2();
  4913  001260  EC88  F00F         	call	_bottom_distribution_motor_cw2	;wreg free
  4914                           
  4915                           ;bottom_distribution_fsm.c: 89: _delay((unsigned long)((30)*(10000000/4000.0)));
  4916  001264  0E62               	movlw	98
  4917  001266  0100               	movlb	0	; () banked
  4918  001268  6FAD               	movwf	??_bottom_distribution_move& (0+255),b
  4919  00126A  0E65               	movlw	101
  4920  00126C                     u4927:
  4921  00126C  2EE8               	decfsz	wreg,f,c
  4922  00126E  D7FE               	bra	u4927
  4923  001270  2FAD               	decfsz	??_bottom_distribution_move& (0+255),f,b
  4924  001272  D7FC               	bra	u4927
  4925  001274  D000               	nop2	
  4926                           
  4927                           ;bottom_distribution_fsm.c: 90: bottom_distribution_motor_ccw2();
  4928  001276  ECAE  F00F         	call	_bottom_distribution_motor_ccw2	;wreg free
  4929                           
  4930                           ;bottom_distribution_fsm.c: 91: _delay((unsigned long)((200)*(10000000/4000.0)));
  4931  00127A  0E03               	movlw	3
  4932  00127C  0100               	movlb	0	; () banked
  4933  00127E  6FAE               	movwf	(??_bottom_distribution_move+1)& (0+255),b
  4934  001280  0E8A               	movlw	138
  4935  001282  0100               	movlb	0	; () banked
  4936  001284  6FAD               	movwf	??_bottom_distribution_move& (0+255),b
  4937  001286  0E55               	movlw	85
  4938  001288                     u4937:
  4939  001288  2EE8               	decfsz	wreg,f,c
  4940  00128A  D7FE               	bra	u4937
  4941  00128C  2FAD               	decfsz	??_bottom_distribution_move& (0+255),f,b
  4942  00128E  D7FC               	bra	u4937
  4943  001290  2FAE               	decfsz	(??_bottom_distribution_move+1)& (0+255),f,b
  4944  001292  D7FA               	bra	u4937
  4945  001294  D000               	nop2	
  4946                           
  4947                           ;bottom_distribution_fsm.c: 92: bottom_distribution_motor_cw2();
  4948  001296  EC88  F00F         	call	_bottom_distribution_motor_cw2	;wreg free
  4949                           
  4950                           ;bottom_distribution_fsm.c: 93: _delay((unsigned long)((30)*(10000000/4000.0)));
  4951  00129A  0E62               	movlw	98
  4952  00129C  0100               	movlb	0	; () banked
  4953  00129E  6FAD               	movwf	??_bottom_distribution_move& (0+255),b
  4954  0012A0  0E65               	movlw	101
  4955  0012A2                     u4947:
  4956  0012A2  2EE8               	decfsz	wreg,f,c
  4957  0012A4  D7FE               	bra	u4947
  4958  0012A6  2FAD               	decfsz	??_bottom_distribution_move& (0+255),f,b
  4959  0012A8  D7FC               	bra	u4947
  4960  0012AA  D000               	nop2	
  4961                           
  4962                           ;bottom_distribution_fsm.c: 94: bottom_distribution_motor_ccw2();
  4963  0012AC  ECAE  F00F         	call	_bottom_distribution_motor_ccw2	;wreg free
  4964  0012B0                     l4894:
  4965                           
  4966                           ;bottom_distribution_fsm.c: 95: }
  4967                           ;bottom_distribution_fsm.c: 98: bottomDistributionState = bottom_distribution_idle;
  4968  0012B0  0E62               	movlw	low _bottom_distribution_idle
  4969  0012B2  0100               	movlb	0	; () banked
  4970  0012B4  6FA3               	movwf	_bottomDistributionState& (0+255),b
  4971  0012B6  0E1D               	movlw	high _bottom_distribution_idle
  4972  0012B8  0100               	movlb	0	; () banked
  4973  0012BA  6FA4               	movwf	(_bottomDistributionState+1)& (0+255),b
  4974  0012BC  0012               	return	
  4975  0012BE                     __end_of_bottom_distribution_move:
  4976                           	opt stack 0
  4977                           tosu	equ	0xFFF
  4978                           tosh	equ	0xFFE
  4979                           tosl	equ	0xFFD
  4980                           pclath	equ	0xFFA
  4981                           prodh	equ	0xFF4
  4982                           prodl	equ	0xFF3
  4983                           intcon	equ	0xFF2
  4984                           intcon2	equ	0xFF1
  4985                           intcon3	equ	0xFF0
  4986                           postinc0	equ	0xFEE
  4987                           wreg	equ	0xFE8
  4988                           indf2	equ	0xFDF
  4989                           fsr2h	equ	0xFDA
  4990                           fsr2l	equ	0xFD9
  4991                           status	equ	0xFD8
  4992                           
  4993 ;; *************** function _bottom_distribution_idle *****************
  4994 ;; Defined at:
  4995 ;;		line 38 in file "bottom_distribution_fsm.c"
  4996 ;; Parameters:    Size  Location     Type
  4997 ;;		None
  4998 ;; Auto vars:     Size  Location     Type
  4999 ;;		None
  5000 ;; Return value:  Size  Location     Type
  5001 ;;                  1    wreg      void 
  5002 ;; Registers used:
  5003 ;;		wreg, status,2, status,0
  5004 ;; Tracked objects:
  5005 ;;		On entry : 0/0
  5006 ;;		On exit  : 0/0
  5007 ;;		Unchanged: 0/0
  5008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5013 ;;Total ram usage:        0 bytes
  5014 ;; Hardware stack levels used:    1
  5015 ;; Hardware stack levels required when called:    5
  5016 ;; This function calls:
  5017 ;;		Nothing
  5018 ;; This function is called by:
  5019 ;;		_bottom_distribution_initial
  5020 ;;		_bottom_distribution_move
  5021 ;;		_startSorting
  5022 ;; This function uses a non-reentrant model
  5023 ;;
  5024                           
  5025                           	psect	text32
  5026  001D62                     __ptext32:
  5027                           	opt stack 0
  5028  001D62                     _bottom_distribution_idle:
  5029                           	opt stack 24
  5030                           
  5031                           ;bottom_distribution_fsm.c: 40: if(start_bottom_distribution == 1){
  5032                           
  5033                           ; BSR set to: 0
  5034                           ;incstack = 0
  5035  001D62  0100               	movlb	0	; () banked
  5036  001D64  05A9               	decf	_start_bottom_distribution& (0+255),w,b
  5037  001D66  0100               	movlb	0	; () banked
  5038  001D68  11AA               	iorwf	(_start_bottom_distribution+1)& (0+255),w,b
  5039  001D6A  A4D8               	btfss	status,2,c
  5040  001D6C  D00C               	goto	l4854
  5041                           
  5042                           ; BSR set to: 0
  5043                           ;bottom_distribution_fsm.c: 41: bottomDistributionState = bottom_distribution_prepare;
  5044  001D6E  0EC4               	movlw	low _bottom_distribution_prepare
  5045  001D70  0100               	movlb	0	; () banked
  5046  001D72  6FA3               	movwf	_bottomDistributionState& (0+255),b
  5047  001D74  0E1D               	movlw	high _bottom_distribution_prepare
  5048  001D76  0100               	movlb	0	; () banked
  5049  001D78  6FA4               	movwf	(_bottomDistributionState+1)& (0+255),b
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;bottom_distribution_fsm.c: 42: start_bottom_distribution = 0;
  5053  001D7A  0E00               	movlw	0
  5054  001D7C  0100               	movlb	0	; () banked
  5055  001D7E  6FAA               	movwf	(_start_bottom_distribution+1)& (0+255),b
  5056  001D80  0E00               	movlw	0
  5057  001D82  6FA9               	movwf	_start_bottom_distribution& (0+255),b
  5058                           
  5059                           ;bottom_distribution_fsm.c: 43: }else{
  5060  001D84  0012               	return	
  5061  001D86                     l4854:
  5062                           
  5063                           ; BSR set to: 0
  5064                           ;bottom_distribution_fsm.c: 44: bottomDistributionState = bottom_distribution_idle;
  5065  001D86  0E62               	movlw	low _bottom_distribution_idle
  5066  001D88  0100               	movlb	0	; () banked
  5067  001D8A  6FA3               	movwf	_bottomDistributionState& (0+255),b
  5068  001D8C  0E1D               	movlw	high _bottom_distribution_idle
  5069  001D8E  0100               	movlb	0	; () banked
  5070  001D90  6FA4               	movwf	(_bottomDistributionState+1)& (0+255),b
  5071                           
  5072                           ; BSR set to: 0
  5073  001D92  0012               	return	
  5074  001D94                     __end_of_bottom_distribution_idle:
  5075                           	opt stack 0
  5076                           tosu	equ	0xFFF
  5077                           tosh	equ	0xFFE
  5078                           tosl	equ	0xFFD
  5079                           pclath	equ	0xFFA
  5080                           prodh	equ	0xFF4
  5081                           prodl	equ	0xFF3
  5082                           intcon	equ	0xFF2
  5083                           intcon2	equ	0xFF1
  5084                           intcon3	equ	0xFF0
  5085                           postinc0	equ	0xFEE
  5086                           wreg	equ	0xFE8
  5087                           indf2	equ	0xFDF
  5088                           fsr2h	equ	0xFDA
  5089                           fsr2l	equ	0xFD9
  5090                           status	equ	0xFD8
  5091                           
  5092 ;; *************** function _bottom_distribution_prepare *****************
  5093 ;; Defined at:
  5094 ;;		line 49 in file "bottom_distribution_fsm.c"
  5095 ;; Parameters:    Size  Location     Type
  5096 ;;		None
  5097 ;; Auto vars:     Size  Location     Type
  5098 ;;		None
  5099 ;; Return value:  Size  Location     Type
  5100 ;;                  1    wreg      void 
  5101 ;; Registers used:
  5102 ;;		wreg, status,2, status,0, cstack
  5103 ;; Tracked objects:
  5104 ;;		On entry : 0/0
  5105 ;;		On exit  : 0/0
  5106 ;;		Unchanged: 0/0
  5107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5112 ;;Total ram usage:        0 bytes
  5113 ;; Hardware stack levels used:    1
  5114 ;; Hardware stack levels required when called:    6
  5115 ;; This function calls:
  5116 ;;		_bottom_distribution_motor_ccw
  5117 ;;		_bottom_distribution_motor_cw
  5118 ;; This function is called by:
  5119 ;;		_bottom_distribution_idle
  5120 ;;		_startSorting
  5121 ;; This function uses a non-reentrant model
  5122 ;;
  5123                           
  5124                           	psect	text33
  5125  001DC4                     __ptext33:
  5126                           	opt stack 0
  5127  001DC4                     _bottom_distribution_prepare:
  5128                           	opt stack 23
  5129                           
  5130                           ;bottom_distribution_fsm.c: 52: if(bottom_move == 1){
  5131                           
  5132                           ; BSR set to: 0
  5133                           ;incstack = 0
  5134  001DC4  044D               	decf	_bottom_move,w,c
  5135  001DC6  104E               	iorwf	_bottom_move+1,w,c
  5136  001DC8  A4D8               	btfss	status,2,c
  5137  001DCA  D007               	goto	l4864
  5138                           
  5139                           ;bottom_distribution_fsm.c: 55: b_m = 1;
  5140  001DCC  0E00               	movlw	0
  5141  001DCE  6E4C               	movwf	_b_m+1,c
  5142  001DD0  0E01               	movlw	1
  5143  001DD2  6E4B               	movwf	_b_m,c
  5144                           
  5145                           ;bottom_distribution_fsm.c: 56: bottom_distribution_motor_cw();
  5146  001DD4  EC9B  F00F         	call	_bottom_distribution_motor_cw	;wreg free
  5147                           
  5148                           ;bottom_distribution_fsm.c: 57: }else{
  5149  001DD8  D006               	goto	l4868
  5150  001DDA                     l4864:
  5151                           
  5152                           ;bottom_distribution_fsm.c: 58: b_m = 0;
  5153  001DDA  0E00               	movlw	0
  5154  001DDC  6E4C               	movwf	_b_m+1,c
  5155  001DDE  0E00               	movlw	0
  5156  001DE0  6E4B               	movwf	_b_m,c
  5157                           
  5158                           ;bottom_distribution_fsm.c: 60: bottom_distribution_motor_ccw();
  5159  001DE2  ECD4  F00F         	call	_bottom_distribution_motor_ccw	;wreg free
  5160  001DE6                     l4868:
  5161                           
  5162                           ;bottom_distribution_fsm.c: 61: }
  5163                           ;bottom_distribution_fsm.c: 63: bottomDistributionState = bottom_distribution_move;
  5164  001DE6  0EFE               	movlw	low _bottom_distribution_move
  5165  001DE8  0100               	movlb	0	; () banked
  5166  001DEA  6FA3               	movwf	_bottomDistributionState& (0+255),b
  5167  001DEC  0E11               	movlw	high _bottom_distribution_move
  5168  001DEE  0100               	movlb	0	; () banked
  5169  001DF0  6FA4               	movwf	(_bottomDistributionState+1)& (0+255),b
  5170  001DF2  0012               	return	
  5171  001DF4                     __end_of_bottom_distribution_prepare:
  5172                           	opt stack 0
  5173                           tosu	equ	0xFFF
  5174                           tosh	equ	0xFFE
  5175                           tosl	equ	0xFFD
  5176                           pclath	equ	0xFFA
  5177                           prodh	equ	0xFF4
  5178                           prodl	equ	0xFF3
  5179                           intcon	equ	0xFF2
  5180                           intcon2	equ	0xFF1
  5181                           intcon3	equ	0xFF0
  5182                           postinc0	equ	0xFEE
  5183                           wreg	equ	0xFE8
  5184                           indf2	equ	0xFDF
  5185                           fsr2h	equ	0xFDA
  5186                           fsr2l	equ	0xFD9
  5187                           status	equ	0xFD8
  5188                           
  5189 ;; *************** function _bottom_distribution_motor_cw2 *****************
  5190 ;; Defined at:
  5191 ;;		line 102 in file "motors.c"
  5192 ;; Parameters:    Size  Location     Type
  5193 ;;		None
  5194 ;; Auto vars:     Size  Location     Type
  5195 ;;		None
  5196 ;; Return value:  Size  Location     Type
  5197 ;;                  2   22[None  ] int 
  5198 ;; Registers used:
  5199 ;;		wreg
  5200 ;; Tracked objects:
  5201 ;;		On entry : 0/0
  5202 ;;		On exit  : 0/0
  5203 ;;		Unchanged: 0/0
  5204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5207 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5208 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5209 ;;Total ram usage:        2 bytes
  5210 ;; Hardware stack levels used:    1
  5211 ;; Hardware stack levels required when called:    5
  5212 ;; This function calls:
  5213 ;;		Nothing
  5214 ;; This function is called by:
  5215 ;;		_bottom_distribution_move
  5216 ;; This function uses a non-reentrant model
  5217 ;;
  5218                           
  5219                           	psect	text34
  5220  001F10                     __ptext34:
  5221                           	opt stack 0
  5222  001F10                     _bottom_distribution_motor_cw2:
  5223                           	opt stack 23
  5224                           
  5225                           ;motors.c: 105: LATDbits.LATD1 = 0;
  5226                           
  5227                           ; BSR set to: 0
  5228                           ;incstack = 0
  5229  001F10  928C               	bcf	3980,1,c	;volatile
  5230                           
  5231                           ;motors.c: 106: LATAbits.LATA3 = 1;
  5232  001F12  8689               	bsf	3977,3,c	;volatile
  5233                           
  5234                           ;motors.c: 107: _delay((unsigned long)((200)*(10000000/4000.0)));
  5235  001F14  0E03               	movlw	3
  5236  001F16  0100               	movlb	0	; () banked
  5237  001F18  6FAC               	movwf	(??_bottom_distribution_motor_cw2+1)& (0+255),b
  5238  001F1A  0E8A               	movlw	138
  5239  001F1C  0100               	movlb	0	; () banked
  5240  001F1E  6FAB               	movwf	??_bottom_distribution_motor_cw2& (0+255),b
  5241  001F20  0E55               	movlw	85
  5242  001F22                     u4957:
  5243  001F22  2EE8               	decfsz	wreg,f,c
  5244  001F24  D7FE               	bra	u4957
  5245  001F26  2FAB               	decfsz	??_bottom_distribution_motor_cw2& (0+255),f,b
  5246  001F28  D7FC               	bra	u4957
  5247  001F2A  2FAC               	decfsz	(??_bottom_distribution_motor_cw2+1)& (0+255),f,b
  5248  001F2C  D7FA               	bra	u4957
  5249  001F2E  D000               	nop2	
  5250                           
  5251                           ;motors.c: 110: LATDbits.LATD1 = 0;
  5252  001F30  928C               	bcf	3980,1,c	;volatile
  5253                           
  5254                           ;motors.c: 111: LATAbits.LATA3 = 0;
  5255  001F32  9689               	bcf	3977,3,c	;volatile
  5256  001F34  0012               	return	
  5257  001F36                     __end_of_bottom_distribution_motor_cw2:
  5258                           	opt stack 0
  5259                           tosu	equ	0xFFF
  5260                           tosh	equ	0xFFE
  5261                           tosl	equ	0xFFD
  5262                           pclath	equ	0xFFA
  5263                           prodh	equ	0xFF4
  5264                           prodl	equ	0xFF3
  5265                           intcon	equ	0xFF2
  5266                           intcon2	equ	0xFF1
  5267                           intcon3	equ	0xFF0
  5268                           postinc0	equ	0xFEE
  5269                           wreg	equ	0xFE8
  5270                           indf2	equ	0xFDF
  5271                           fsr2h	equ	0xFDA
  5272                           fsr2l	equ	0xFD9
  5273                           status	equ	0xFD8
  5274                           
  5275 ;; *************** function _bottom_distribution_motor_cw *****************
  5276 ;; Defined at:
  5277 ;;		line 88 in file "motors.c"
  5278 ;; Parameters:    Size  Location     Type
  5279 ;;		None
  5280 ;; Auto vars:     Size  Location     Type
  5281 ;;		None
  5282 ;; Return value:  Size  Location     Type
  5283 ;;                  1    wreg      void 
  5284 ;; Registers used:
  5285 ;;		wreg
  5286 ;; Tracked objects:
  5287 ;;		On entry : 0/0
  5288 ;;		On exit  : 0/0
  5289 ;;		Unchanged: 0/0
  5290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5293 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5294 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5295 ;;Total ram usage:        2 bytes
  5296 ;; Hardware stack levels used:    1
  5297 ;; Hardware stack levels required when called:    5
  5298 ;; This function calls:
  5299 ;;		Nothing
  5300 ;; This function is called by:
  5301 ;;		_bottom_distribution_prepare
  5302 ;;		_bottom_distribution_move
  5303 ;; This function uses a non-reentrant model
  5304 ;;
  5305                           
  5306                           	psect	text35
  5307  001F36                     __ptext35:
  5308                           	opt stack 0
  5309  001F36                     _bottom_distribution_motor_cw:
  5310                           	opt stack 23
  5311                           
  5312                           ;motors.c: 91: LATDbits.LATD1 = 0;
  5313                           
  5314                           ;incstack = 0
  5315  001F36  928C               	bcf	3980,1,c	;volatile
  5316                           
  5317                           ;motors.c: 92: LATAbits.LATA3 = 1;
  5318  001F38  8689               	bsf	3977,3,c	;volatile
  5319                           
  5320                           ;motors.c: 93: _delay((unsigned long)((300)*(10000000/4000.0)));
  5321  001F3A  0E04               	movlw	4
  5322  001F3C  0100               	movlb	0	; () banked
  5323  001F3E  6FAC               	movwf	(??_bottom_distribution_motor_cw+1)& (0+255),b
  5324  001F40  0ECF               	movlw	207
  5325  001F42  0100               	movlb	0	; () banked
  5326  001F44  6FAB               	movwf	??_bottom_distribution_motor_cw& (0+255),b
  5327  001F46  0E01               	movlw	1
  5328  001F48                     u4967:
  5329  001F48  2EE8               	decfsz	wreg,f,c
  5330  001F4A  D7FE               	bra	u4967
  5331  001F4C  2FAB               	decfsz	??_bottom_distribution_motor_cw& (0+255),f,b
  5332  001F4E  D7FC               	bra	u4967
  5333  001F50  2FAC               	decfsz	(??_bottom_distribution_motor_cw+1)& (0+255),f,b
  5334  001F52  D7FA               	bra	u4967
  5335  001F54  D000               	nop2	
  5336                           
  5337                           ;motors.c: 96: LATDbits.LATD1 = 0;
  5338  001F56  928C               	bcf	3980,1,c	;volatile
  5339                           
  5340                           ;motors.c: 97: LATAbits.LATA3 = 0;
  5341  001F58  9689               	bcf	3977,3,c	;volatile
  5342  001F5A  0012               	return	
  5343  001F5C                     __end_of_bottom_distribution_motor_cw:
  5344                           	opt stack 0
  5345                           tosu	equ	0xFFF
  5346                           tosh	equ	0xFFE
  5347                           tosl	equ	0xFFD
  5348                           pclath	equ	0xFFA
  5349                           prodh	equ	0xFF4
  5350                           prodl	equ	0xFF3
  5351                           intcon	equ	0xFF2
  5352                           intcon2	equ	0xFF1
  5353                           intcon3	equ	0xFF0
  5354                           postinc0	equ	0xFEE
  5355                           wreg	equ	0xFE8
  5356                           indf2	equ	0xFDF
  5357                           fsr2h	equ	0xFDA
  5358                           fsr2l	equ	0xFD9
  5359                           status	equ	0xFD8
  5360                           
  5361 ;; *************** function _bottom_distribution_motor_ccw2 *****************
  5362 ;; Defined at:
  5363 ;;		line 130 in file "motors.c"
  5364 ;; Parameters:    Size  Location     Type
  5365 ;;		None
  5366 ;; Auto vars:     Size  Location     Type
  5367 ;;		None
  5368 ;; Return value:  Size  Location     Type
  5369 ;;                  2   18[None  ] int 
  5370 ;; Registers used:
  5371 ;;		wreg
  5372 ;; Tracked objects:
  5373 ;;		On entry : 0/0
  5374 ;;		On exit  : 0/0
  5375 ;;		Unchanged: 0/0
  5376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5379 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5380 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5381 ;;Total ram usage:        2 bytes
  5382 ;; Hardware stack levels used:    1
  5383 ;; Hardware stack levels required when called:    5
  5384 ;; This function calls:
  5385 ;;		Nothing
  5386 ;; This function is called by:
  5387 ;;		_bottom_distribution_move
  5388 ;; This function uses a non-reentrant model
  5389 ;;
  5390                           
  5391                           	psect	text36
  5392  001F5C                     __ptext36:
  5393                           	opt stack 0
  5394  001F5C                     _bottom_distribution_motor_ccw2:
  5395                           	opt stack 23
  5396                           
  5397                           ;motors.c: 133: LATDbits.LATD1 = 1;
  5398                           
  5399                           ;incstack = 0
  5400  001F5C  828C               	bsf	3980,1,c	;volatile
  5401                           
  5402                           ;motors.c: 134: LATAbits.LATA3 = 0;
  5403  001F5E  9689               	bcf	3977,3,c	;volatile
  5404                           
  5405                           ;motors.c: 135: _delay((unsigned long)((210)*(10000000/4000.0)));
  5406  001F60  0E03               	movlw	3
  5407  001F62  0100               	movlb	0	; () banked
  5408  001F64  6FAC               	movwf	(??_bottom_distribution_motor_ccw2+1)& (0+255),b
  5409  001F66  0EAA               	movlw	170
  5410  001F68  0100               	movlb	0	; () banked
  5411  001F6A  6FAB               	movwf	??_bottom_distribution_motor_ccw2& (0+255),b
  5412  001F6C  0ECD               	movlw	205
  5413  001F6E                     u4977:
  5414  001F6E  2EE8               	decfsz	wreg,f,c
  5415  001F70  D7FE               	bra	u4977
  5416  001F72  2FAB               	decfsz	??_bottom_distribution_motor_ccw2& (0+255),f,b
  5417  001F74  D7FC               	bra	u4977
  5418  001F76  2FAC               	decfsz	(??_bottom_distribution_motor_ccw2+1)& (0+255),f,b
  5419  001F78  D7FA               	bra	u4977
  5420  001F7A  D000               	nop2	
  5421                           
  5422                           ;motors.c: 138: LATDbits.LATD1 = 0;
  5423  001F7C  928C               	bcf	3980,1,c	;volatile
  5424                           
  5425                           ;motors.c: 139: LATAbits.LATA3 = 0;
  5426  001F7E  9689               	bcf	3977,3,c	;volatile
  5427  001F80  0012               	return	
  5428  001F82                     __end_of_bottom_distribution_motor_ccw2:
  5429                           	opt stack 0
  5430                           tosu	equ	0xFFF
  5431                           tosh	equ	0xFFE
  5432                           tosl	equ	0xFFD
  5433                           pclath	equ	0xFFA
  5434                           prodh	equ	0xFF4
  5435                           prodl	equ	0xFF3
  5436                           intcon	equ	0xFF2
  5437                           intcon2	equ	0xFF1
  5438                           intcon3	equ	0xFF0
  5439                           postinc0	equ	0xFEE
  5440                           wreg	equ	0xFE8
  5441                           indf2	equ	0xFDF
  5442                           fsr2h	equ	0xFDA
  5443                           fsr2l	equ	0xFD9
  5444                           status	equ	0xFD8
  5445                           
  5446 ;; *************** function _bottom_distribution_motor_ccw *****************
  5447 ;; Defined at:
  5448 ;;		line 116 in file "motors.c"
  5449 ;; Parameters:    Size  Location     Type
  5450 ;;		None
  5451 ;; Auto vars:     Size  Location     Type
  5452 ;;		None
  5453 ;; Return value:  Size  Location     Type
  5454 ;;                  1    wreg      void 
  5455 ;; Registers used:
  5456 ;;		wreg
  5457 ;; Tracked objects:
  5458 ;;		On entry : 0/0
  5459 ;;		On exit  : 0/0
  5460 ;;		Unchanged: 0/0
  5461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5464 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5465 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5466 ;;Total ram usage:        2 bytes
  5467 ;; Hardware stack levels used:    1
  5468 ;; Hardware stack levels required when called:    5
  5469 ;; This function calls:
  5470 ;;		Nothing
  5471 ;; This function is called by:
  5472 ;;		_bottom_distribution_prepare
  5473 ;;		_bottom_distribution_move
  5474 ;; This function uses a non-reentrant model
  5475 ;;
  5476                           
  5477                           	psect	text37
  5478  001FA8                     __ptext37:
  5479                           	opt stack 0
  5480  001FA8                     _bottom_distribution_motor_ccw:
  5481                           	opt stack 23
  5482                           
  5483                           ;motors.c: 119: LATDbits.LATD1 = 1;
  5484                           
  5485                           ;incstack = 0
  5486  001FA8  828C               	bsf	3980,1,c	;volatile
  5487                           
  5488                           ;motors.c: 120: LATAbits.LATA3 = 0;
  5489  001FAA  9689               	bcf	3977,3,c	;volatile
  5490                           
  5491                           ;motors.c: 121: _delay((unsigned long)((320)*(10000000/4000.0)));
  5492  001FAC  0E05               	movlw	5
  5493  001FAE  0100               	movlb	0	; () banked
  5494  001FB0  6FAC               	movwf	(??_bottom_distribution_motor_ccw+1)& (0+255),b
  5495  001FB2  0E0F               	movlw	15
  5496  001FB4  0100               	movlb	0	; () banked
  5497  001FB6  6FAB               	movwf	??_bottom_distribution_motor_ccw& (0+255),b
  5498  001FB8  0EF1               	movlw	241
  5499  001FBA                     u4987:
  5500  001FBA  2EE8               	decfsz	wreg,f,c
  5501  001FBC  D7FE               	bra	u4987
  5502  001FBE  2FAB               	decfsz	??_bottom_distribution_motor_ccw& (0+255),f,b
  5503  001FC0  D7FC               	bra	u4987
  5504  001FC2  2FAC               	decfsz	(??_bottom_distribution_motor_ccw+1)& (0+255),f,b
  5505  001FC4  D7FA               	bra	u4987
  5506                           
  5507                           ;motors.c: 124: LATDbits.LATD1 = 0;
  5508  001FC6  928C               	bcf	3980,1,c	;volatile
  5509                           
  5510                           ;motors.c: 125: LATAbits.LATA3 = 0;
  5511  001FC8  9689               	bcf	3977,3,c	;volatile
  5512  001FCA  0012               	return	
  5513  001FCC                     __end_of_bottom_distribution_motor_ccw:
  5514                           	opt stack 0
  5515                           tosu	equ	0xFFF
  5516                           tosh	equ	0xFFE
  5517                           tosl	equ	0xFFD
  5518                           pclath	equ	0xFFA
  5519                           prodh	equ	0xFF4
  5520                           prodl	equ	0xFF3
  5521                           intcon	equ	0xFF2
  5522                           intcon2	equ	0xFF1
  5523                           intcon3	equ	0xFF0
  5524                           postinc0	equ	0xFEE
  5525                           wreg	equ	0xFE8
  5526                           indf2	equ	0xFDF
  5527                           fsr2h	equ	0xFDA
  5528                           fsr2l	equ	0xFD9
  5529                           status	equ	0xFD8
  5530                           
  5531 ;; *************** function _standby *****************
  5532 ;; Defined at:
  5533 ;;		line 31 in file "operation.c"
  5534 ;; Parameters:    Size  Location     Type
  5535 ;;		None
  5536 ;; Auto vars:     Size  Location     Type
  5537 ;;  i               1   40[BANK0 ] unsigned char 
  5538 ;;  i               1   41[BANK0 ] unsigned char 
  5539 ;;  keypress_tem    1   39[BANK0 ] unsigned char 
  5540 ;;  keypress        1   38[BANK0 ] unsigned char 
  5541 ;; Return value:  Size  Location     Type
  5542 ;;                  1    wreg      void 
  5543 ;; Registers used:
  5544 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5545 ;; Tracked objects:
  5546 ;;		On entry : 0/0
  5547 ;;		On exit  : 0/0
  5548 ;;		Unchanged: 0/0
  5549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5551 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5552 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5553 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5554 ;;Total ram usage:        6 bytes
  5555 ;; Hardware stack levels used:    1
  5556 ;; Hardware stack levels required when called:    8
  5557 ;; This function calls:
  5558 ;;		_I2C_Master_Read
  5559 ;;		_I2C_Master_Start
  5560 ;;		_I2C_Master_Stop
  5561 ;;		_I2C_Master_Write
  5562 ;;		_initLCD
  5563 ;;		_lcdInst
  5564 ;;		_printf
  5565 ;; This function is called by:
  5566 ;;		_main
  5567 ;; This function uses a non-reentrant model
  5568 ;;
  5569                           
  5570                           	psect	text38
  5571  000FAC                     __ptext38:
  5572                           	opt stack 0
  5573  000FAC                     _standby:
  5574                           	opt stack 22
  5575                           
  5576                           ;operation.c: 33: (INTCONbits.GIE = 0);
  5577                           
  5578                           ;incstack = 0
  5579  000FAC  9EF2               	bcf	intcon,7,c	;volatile
  5580                           
  5581                           ;operation.c: 34: lcdInst(0b10000000);;
  5582  000FAE  0E80               	movlw	128
  5583  000FB0  EC67  F010         	call	_lcdInst
  5584                           
  5585                           ;operation.c: 35: initLCD();
  5586  000FB4  ECA5  F00D         	call	_initLCD	;wreg free
  5587                           
  5588                           ;operation.c: 36: __nop();
  5589  000FB8  F000               	nop	
  5590                           
  5591                           ;operation.c: 37: __nop();
  5592  000FBA  F000               	nop	
  5593  000FBC                     l465:
  5594                           
  5595                           ;operation.c: 41: I2C_Master_Start();
  5596  000FBC  ECA0  F010         	call	_I2C_Master_Start	;wreg free
  5597                           
  5598                           ;operation.c: 42: I2C_Master_Write(0b11010000);
  5599  000FC0  0E00               	movlw	0
  5600  000FC2  0100               	movlb	0	; () banked
  5601  000FC4  6FAD               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5602  000FC6  0ED0               	movlw	208
  5603  000FC8  6FAC               	movwf	I2C_Master_Write@d& (0+255),b
  5604  000FCA  EC97  F010         	call	_I2C_Master_Write	;wreg free
  5605                           
  5606                           ;operation.c: 43: I2C_Master_Write(0x00);
  5607  000FCE  0E00               	movlw	0
  5608  000FD0  0100               	movlb	0	; () banked
  5609  000FD2  6FAD               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5610  000FD4  0E00               	movlw	0
  5611  000FD6  6FAC               	movwf	I2C_Master_Write@d& (0+255),b
  5612  000FD8  EC97  F010         	call	_I2C_Master_Write	;wreg free
  5613                           
  5614                           ;operation.c: 44: I2C_Master_Stop();
  5615  000FDC  EC9C  F010         	call	_I2C_Master_Stop	;wreg free
  5616                           
  5617                           ;operation.c: 47: I2C_Master_Start();
  5618  000FE0  ECA0  F010         	call	_I2C_Master_Start	;wreg free
  5619                           
  5620                           ;operation.c: 48: I2C_Master_Write(0b11010001);
  5621  000FE4  0E00               	movlw	0
  5622  000FE6  0100               	movlb	0	; () banked
  5623  000FE8  6FAD               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5624  000FEA  0ED1               	movlw	209
  5625  000FEC  6FAC               	movwf	I2C_Master_Write@d& (0+255),b
  5626  000FEE  EC97  F010         	call	_I2C_Master_Write	;wreg free
  5627                           
  5628                           ;operation.c: 49: for(unsigned char i=0;i<0x06;i++){
  5629  000FF2  0E00               	movlw	0
  5630  000FF4  0100               	movlb	0	; () banked
  5631  000FF6  6FD4               	movwf	standby@i& (0+255),b
  5632  000FF8                     l5348:
  5633                           
  5634                           ; BSR set to: 0
  5635  000FF8  0E05               	movlw	5
  5636  000FFA  0100               	movlb	0	; () banked
  5637  000FFC  65D4               	cpfsgt	standby@i& (0+255),b
  5638  000FFE  D001               	goto	l5352
  5639  001000  D010               	goto	l5358
  5640  001002                     l5352:
  5641                           
  5642                           ; BSR set to: 0
  5643                           ;operation.c: 50: time[i] = I2C_Master_Read(1);
  5644  001002  0100               	movlb	0	; () banked
  5645  001004  51D4               	movf	standby@i& (0+255),w,b
  5646  001006  0D01               	mullw	1
  5647  001008  0E80               	movlw	low _time
  5648  00100A  24F3               	addwf	prodl,w,c
  5649  00100C  6ED9               	movwf	fsr2l,c
  5650  00100E  0E00               	movlw	high _time
  5651  001010  20F4               	addwfc	prodh,w,c
  5652  001012  6EDA               	movwf	fsr2h,c
  5653  001014  0E01               	movlw	1
  5654  001016  ECFA  F00E         	call	_I2C_Master_Read
  5655  00101A  6EDF               	movwf	indf2,c
  5656  00101C  0100               	movlb	0	; () banked
  5657  00101E  2BD4               	incf	standby@i& (0+255),f,b
  5658  001020  D7EB               	goto	l5348
  5659  001022                     l5358:
  5660                           
  5661                           ; BSR set to: 0
  5662                           ;operation.c: 51: }
  5663                           ;operation.c: 52: time[6] = I2C_Master_Read(0);
  5664  001022  0E00               	movlw	0
  5665  001024  ECFA  F00E         	call	_I2C_Master_Read
  5666  001028  0100               	movlb	0	; () banked
  5667  00102A  6F86               	movwf	(_time+6)& (0+255),b
  5668                           
  5669                           ;operation.c: 53: I2C_Master_Stop();
  5670  00102C  EC9C  F010         	call	_I2C_Master_Stop	;wreg free
  5671                           
  5672                           ;operation.c: 55: lcdInst(0b10000000);;
  5673  001030  0E80               	movlw	128
  5674  001032  EC67  F010         	call	_lcdInst
  5675                           
  5676                           ;operation.c: 56: printf("%02x/%02x   ",time[5],time[4]);
  5677  001036  0ED1               	movlw	low STR_2
  5678  001038  0100               	movlb	0	; () banked
  5679  00103A  6FB9               	movwf	printf@f& (0+255),b
  5680  00103C  0EFF               	movlw	high STR_2
  5681  00103E  0100               	movlb	0	; () banked
  5682  001040  6FBA               	movwf	(printf@f+1)& (0+255),b
  5683  001042  C085  F0BB         	movff	_time+5,?_printf+2
  5684  001046  0100               	movlb	0	; () banked
  5685  001048  6BBC               	clrf	(?_printf+3)& (0+255),b
  5686  00104A  C084  F0BD         	movff	_time+4,?_printf+4
  5687  00104E  0100               	movlb	0	; () banked
  5688  001050  6BBE               	clrf	(?_printf+5)& (0+255),b
  5689  001052  EC09  F000         	call	_printf	;wreg free
  5690                           
  5691                           ;operation.c: 57: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  5692  001056  0EC2               	movlw	low STR_3
  5693  001058  0100               	movlb	0	; () banked
  5694  00105A  6FB9               	movwf	printf@f& (0+255),b
  5695  00105C  0EFF               	movlw	high STR_3
  5696  00105E  0100               	movlb	0	; () banked
  5697  001060  6FBA               	movwf	(printf@f+1)& (0+255),b
  5698  001062  C082  F0BB         	movff	_time+2,?_printf+2
  5699  001066  0100               	movlb	0	; () banked
  5700  001068  6BBC               	clrf	(?_printf+3)& (0+255),b
  5701  00106A  C081  F0BD         	movff	_time+1,?_printf+4
  5702  00106E  0100               	movlb	0	; () banked
  5703  001070  6BBE               	clrf	(?_printf+5)& (0+255),b
  5704  001072  C080  F0BF         	movff	_time,?_printf+6
  5705  001076  0100               	movlb	0	; () banked
  5706  001078  6BC0               	clrf	(?_printf+7)& (0+255),b
  5707  00107A  EC09  F000         	call	_printf	;wreg free
  5708                           
  5709                           ;operation.c: 59: lcdInst(0b11000000);;
  5710  00107E  0EC0               	movlw	192
  5711  001080  EC67  F010         	call	_lcdInst
  5712                           
  5713                           ;operation.c: 60: printf("Press # to Start");
  5714  001084  0E93               	movlw	low STR_4
  5715  001086  0100               	movlb	0	; () banked
  5716  001088  6FB9               	movwf	printf@f& (0+255),b
  5717  00108A  0EFF               	movlw	high STR_4
  5718  00108C  0100               	movlb	0	; () banked
  5719  00108E  6FBA               	movwf	(printf@f+1)& (0+255),b
  5720  001090  EC09  F000         	call	_printf	;wreg free
  5721                           
  5722                           ;operation.c: 63: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5723  001094  3881               	swapf	3969,w,c	;volatile
  5724  001096  0B0F               	andlw	15
  5725  001098  0B0F               	andlw	15
  5726  00109A  0100               	movlb	0	; () banked
  5727  00109C  6FD1               	movwf	standby@keypress& (0+255),b
  5728  00109E                     l468:
  5729  00109E  B281               	btfsc	3969,1,c	;volatile
  5730  0010A0  D7FE               	goto	l468
  5731                           
  5732                           ;operation.c: 66: }
  5733                           ;operation.c: 67: unsigned char keypress_temp = keys[keypress];
  5734  0010A2  0100               	movlb	0	; () banked
  5735  0010A4  51D1               	movf	standby@keypress& (0+255),w,b
  5736  0010A6  0D01               	mullw	1
  5737  0010A8  0EEB               	movlw	low _keys
  5738  0010AA  24F3               	addwf	prodl,w,c
  5739  0010AC  6EF6               	movwf	tblptrl,c
  5740  0010AE  0EFE               	movlw	high _keys
  5741  0010B0  20F4               	addwfc	prodh,w,c
  5742  0010B2  6EF7               	movwf	tblptrh,c
  5743  0010B4                     	if	1	;There are 3 active tblptr bytes
  5744  0010B4  6AF8               	clrf	tblptru,c
  5745  0010B6  0E00               	movlw	low (__mediumconst shr (0+16))
  5746  0010B8  22F8               	addwfc	tblptru,f,c
  5747  0010BA                     	endif
  5748  0010BA  0008               	tblrd		*
  5749  0010BC  CFF5 F0D2          	movff	tablat,standby@keypress_temp
  5750                           
  5751                           ; BSR set to: 0
  5752                           ;operation.c: 69: if(keypress_temp == '#'){
  5753  0010C0  0E23               	movlw	35
  5754  0010C2  0100               	movlb	0	; () banked
  5755  0010C4  19D2               	xorwf	standby@keypress_temp& (0+255),w,b
  5756  0010C6  A4D8               	btfss	status,2,c
  5757  0010C8  D007               	goto	l5374
  5758                           
  5759                           ; BSR set to: 0
  5760                           ;operation.c: 70: Start_time[2] = time[2];
  5761  0010CA  C082  F091         	movff	_time+2,_Start_time+2
  5762                           
  5763                           ;operation.c: 71: Start_time[1] = time[1];
  5764  0010CE  C081  F090         	movff	_time+1,_Start_time+1
  5765                           
  5766                           ;operation.c: 72: Start_time[0] = time[0];
  5767  0010D2  C080  F08F         	movff	_time,_Start_time
  5768                           
  5769                           ;operation.c: 73: break;
  5770  0010D6  0012               	return	
  5771  0010D8                     l5374:
  5772                           
  5773                           ; BSR set to: 0
  5774                           ;operation.c: 74: }
  5775                           ;operation.c: 75: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)))
      +                          ;};
  5776  0010D8  0E00               	movlw	0
  5777  0010DA  0100               	movlb	0	; () banked
  5778  0010DC  6FD3               	movwf	standby@i_818& (0+255),b
  5779  0010DE                     l5376:
  5780                           
  5781                           ; BSR set to: 0
  5782  0010DE  0E09               	movlw	9
  5783  0010E0  0100               	movlb	0	; () banked
  5784  0010E2  65D3               	cpfsgt	standby@i_818& (0+255),b
  5785  0010E4  D001               	goto	l5380
  5786  0010E6  D76A               	goto	l465
  5787  0010E8                     l5380:
  5788                           
  5789                           ; BSR set to: 0
  5790  0010E8  0E02               	movlw	2
  5791  0010EA  0100               	movlb	0	; () banked
  5792  0010EC  6FD0               	movwf	(??_standby+1)& (0+255),b
  5793  0010EE  0E3F               	movlw	63
  5794  0010F0  0100               	movlb	0	; () banked
  5795  0010F2  6FCF               	movwf	??_standby& (0+255),b
  5796  0010F4  0E2B               	movlw	43
  5797  0010F6                     u4997:
  5798  0010F6  2EE8               	decfsz	wreg,f,c
  5799  0010F8  D7FE               	bra	u4997
  5800  0010FA  2FCF               	decfsz	??_standby& (0+255),f,b
  5801  0010FC  D7FC               	bra	u4997
  5802  0010FE  2FD0               	decfsz	(??_standby+1)& (0+255),f,b
  5803  001100  D7FA               	bra	u4997
  5804  001102  0100               	movlb	0	; () banked
  5805  001104  2BD3               	incf	standby@i_818& (0+255),f,b
  5806  001106  D7EB               	goto	l5376
  5807  001108                     __end_of_standby:
  5808                           	opt stack 0
  5809                           tosu	equ	0xFFF
  5810                           tosh	equ	0xFFE
  5811                           tosl	equ	0xFFD
  5812                           pclath	equ	0xFFA
  5813                           tblptru	equ	0xFF8
  5814                           tblptrh	equ	0xFF7
  5815                           tblptrl	equ	0xFF6
  5816                           tablat	equ	0xFF5
  5817                           prodh	equ	0xFF4
  5818                           prodl	equ	0xFF3
  5819                           intcon	equ	0xFF2
  5820                           intcon2	equ	0xFF1
  5821                           intcon3	equ	0xFF0
  5822                           postinc0	equ	0xFEE
  5823                           wreg	equ	0xFE8
  5824                           indf2	equ	0xFDF
  5825                           fsr2h	equ	0xFDA
  5826                           fsr2l	equ	0xFD9
  5827                           status	equ	0xFD8
  5828                           
  5829 ;; *************** function _I2C_Master_Read *****************
  5830 ;; Defined at:
  5831 ;;		line 67 in file "I2C.c"
  5832 ;; Parameters:    Size  Location     Type
  5833 ;;  a               1    wreg     unsigned char 
  5834 ;; Auto vars:     Size  Location     Type
  5835 ;;  a               1    1[BANK0 ] unsigned char 
  5836 ;;  temp            1    2[BANK0 ] unsigned char 
  5837 ;; Return value:  Size  Location     Type
  5838 ;;                  1    wreg      unsigned char 
  5839 ;; Registers used:
  5840 ;;		wreg, status,2, status,0, cstack
  5841 ;; Tracked objects:
  5842 ;;		On entry : 0/0
  5843 ;;		On exit  : 0/0
  5844 ;;		Unchanged: 0/0
  5845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5847 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5849 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5850 ;;Total ram usage:        2 bytes
  5851 ;; Hardware stack levels used:    1
  5852 ;; Hardware stack levels required when called:    6
  5853 ;; This function calls:
  5854 ;;		_I2C_Master_Wait
  5855 ;; This function is called by:
  5856 ;;		_standby
  5857 ;;		_done_sorting
  5858 ;; This function uses a non-reentrant model
  5859 ;;
  5860                           
  5861                           	psect	text39
  5862  001DF4                     __ptext39:
  5863                           	opt stack 0
  5864  001DF4                     _I2C_Master_Read:
  5865                           	opt stack 22
  5866                           
  5867                           ; BSR set to: 0
  5868                           ;incstack = 0
  5869                           ;I2C_Master_Read@a stored from wreg
  5870  001DF4  0100               	movlb	0	; () banked
  5871  001DF6  6FAC               	movwf	I2C_Master_Read@a& (0+255),b
  5872                           
  5873                           ;I2C.c: 69: unsigned char temp;
  5874                           ;I2C.c: 70: I2C_Master_Wait();
  5875  001DF8  EC43  F010         	call	_I2C_Master_Wait	;wreg free
  5876                           
  5877                           ;I2C.c: 71: RCEN = 1;
  5878  001DFC  86C5               	bsf	4037,3,c	;volatile
  5879                           
  5880                           ;I2C.c: 72: I2C_Master_Wait();
  5881  001DFE  EC43  F010         	call	_I2C_Master_Wait	;wreg free
  5882                           
  5883                           ;I2C.c: 73: temp = SSPBUF;
  5884  001E02  CFC9 F0AD          	movff	4041,I2C_Master_Read@temp	;volatile
  5885                           
  5886                           ;I2C.c: 74: I2C_Master_Wait();
  5887  001E06  EC43  F010         	call	_I2C_Master_Wait	;wreg free
  5888                           
  5889                           ;I2C.c: 75: ACKDT = (a)?0:1;
  5890  001E0A  0100               	movlb	0	; () banked
  5891  001E0C  51AC               	movf	I2C_Master_Read@a& (0+255),w,b
  5892  001E0E  0100               	movlb	0	; () banked
  5893  001E10  A4D8               	btfss	status,2,c
  5894  001E12  D002               	goto	u3650
  5895  001E14  8AC5               	bsf	4037,5,c	;volatile
  5896  001E16  D001               	goto	l4640
  5897  001E18                     u3650:
  5898  001E18  9AC5               	bcf	4037,5,c	;volatile
  5899  001E1A                     l4640:
  5900                           
  5901                           ;I2C.c: 76: ACKEN = 1;
  5902  001E1A  88C5               	bsf	4037,4,c	;volatile
  5903                           
  5904                           ;I2C.c: 77: return temp;
  5905  001E1C  0100               	movlb	0	; () banked
  5906  001E1E  51AD               	movf	I2C_Master_Read@temp& (0+255),w,b
  5907  001E20  0012               	return	
  5908  001E22                     __end_of_I2C_Master_Read:
  5909                           	opt stack 0
  5910                           tosu	equ	0xFFF
  5911                           tosh	equ	0xFFE
  5912                           tosl	equ	0xFFD
  5913                           pclath	equ	0xFFA
  5914                           tblptru	equ	0xFF8
  5915                           tblptrh	equ	0xFF7
  5916                           tblptrl	equ	0xFF6
  5917                           tablat	equ	0xFF5
  5918                           prodh	equ	0xFF4
  5919                           prodl	equ	0xFF3
  5920                           intcon	equ	0xFF2
  5921                           intcon2	equ	0xFF1
  5922                           intcon3	equ	0xFF0
  5923                           postinc0	equ	0xFEE
  5924                           wreg	equ	0xFE8
  5925                           indf2	equ	0xFDF
  5926                           fsr2h	equ	0xFDA
  5927                           fsr2l	equ	0xFD9
  5928                           status	equ	0xFD8
  5929                           
  5930 ;; *************** function _set_time *****************
  5931 ;; Defined at:
  5932 ;;		line 75 in file "main.c"
  5933 ;; Parameters:    Size  Location     Type
  5934 ;;		None
  5935 ;; Auto vars:     Size  Location     Type
  5936 ;;  i               1    3[BANK0 ] unsigned char 
  5937 ;; Return value:  Size  Location     Type
  5938 ;;                  1    wreg      void 
  5939 ;; Registers used:
  5940 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5941 ;; Tracked objects:
  5942 ;;		On entry : 0/0
  5943 ;;		On exit  : 0/0
  5944 ;;		Unchanged: 0/0
  5945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5947 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5949 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5950 ;;Total ram usage:        1 bytes
  5951 ;; Hardware stack levels used:    1
  5952 ;; Hardware stack levels required when called:    7
  5953 ;; This function calls:
  5954 ;;		_I2C_Master_Start
  5955 ;;		_I2C_Master_Stop
  5956 ;;		_I2C_Master_Write
  5957 ;; This function is called by:
  5958 ;;		_main
  5959 ;; This function uses a non-reentrant model
  5960 ;;
  5961                           
  5962                           	psect	text40
  5963  001702                     __ptext40:
  5964                           	opt stack 0
  5965  001702                     _set_time:
  5966                           	opt stack 23
  5967                           
  5968                           ;main.c: 76: I2C_Master_Start();
  5969                           
  5970                           ; BSR set to: 0
  5971                           ;incstack = 0
  5972  001702  ECA0  F010         	call	_I2C_Master_Start	;wreg free
  5973                           
  5974                           ;main.c: 77: I2C_Master_Write(0b11010000);
  5975  001706  0E00               	movlw	0
  5976  001708  0100               	movlb	0	; () banked
  5977  00170A  6FAD               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5978  00170C  0ED0               	movlw	208
  5979  00170E  6FAC               	movwf	I2C_Master_Write@d& (0+255),b
  5980  001710  EC97  F010         	call	_I2C_Master_Write	;wreg free
  5981                           
  5982                           ;main.c: 78: I2C_Master_Write(0x00);
  5983  001714  0E00               	movlw	0
  5984  001716  0100               	movlb	0	; () banked
  5985  001718  6FAD               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5986  00171A  0E00               	movlw	0
  5987  00171C  6FAC               	movwf	I2C_Master_Write@d& (0+255),b
  5988  00171E  EC97  F010         	call	_I2C_Master_Write	;wreg free
  5989                           
  5990                           ;main.c: 79: for(char i=0; i<7; i++){
  5991  001722  0E00               	movlw	0
  5992  001724  0100               	movlb	0	; () banked
  5993  001726  6FAE               	movwf	set_time@i& (0+255),b
  5994  001728                     l5326:
  5995                           
  5996                           ; BSR set to: 0
  5997  001728  0E06               	movlw	6
  5998  00172A  0100               	movlb	0	; () banked
  5999  00172C  65AE               	cpfsgt	set_time@i& (0+255),b
  6000  00172E  D001               	goto	l5330
  6001  001730  D016               	goto	l5336
  6002  001732                     l5330:
  6003                           
  6004                           ; BSR set to: 0
  6005                           ;main.c: 80: I2C_Master_Write(real_time[i]);
  6006  001732  0100               	movlb	0	; () banked
  6007  001734  51AE               	movf	set_time@i& (0+255),w,b
  6008  001736  0D01               	mullw	1
  6009  001738  0E0E               	movlw	low _real_time
  6010  00173A  24F3               	addwf	prodl,w,c
  6011  00173C  6EF6               	movwf	tblptrl,c
  6012  00173E  0EFF               	movlw	high _real_time
  6013  001740  20F4               	addwfc	prodh,w,c
  6014  001742  6EF7               	movwf	tblptrh,c
  6015  001744                     	if	1	;There are 3 active tblptr bytes
  6016  001744  6AF8               	clrf	tblptru,c
  6017  001746  0E00               	movlw	low (__mediumconst shr (0+16))
  6018  001748  22F8               	addwfc	tblptru,f,c
  6019  00174A                     	endif
  6020  00174A  0008               	tblrd		*
  6021  00174C  50F5               	movf	tablat,w,c
  6022  00174E  0100               	movlb	0	; () banked
  6023  001750  6FAC               	movwf	I2C_Master_Write@d& (0+255),b
  6024  001752  6BAD               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6025  001754  EC97  F010         	call	_I2C_Master_Write	;wreg free
  6026  001758  0100               	movlb	0	; () banked
  6027  00175A  2BAE               	incf	set_time@i& (0+255),f,b
  6028  00175C  D7E5               	goto	l5326
  6029  00175E                     l5336:
  6030                           
  6031                           ; BSR set to: 0
  6032                           ;main.c: 81: }
  6033                           ;main.c: 82: I2C_Master_Stop();
  6034  00175E  EC9C  F010         	call	_I2C_Master_Stop	;wreg free
  6035  001762  0012               	return		;funcret
  6036  001764                     __end_of_set_time:
  6037                           	opt stack 0
  6038                           tosu	equ	0xFFF
  6039                           tosh	equ	0xFFE
  6040                           tosl	equ	0xFFD
  6041                           pclath	equ	0xFFA
  6042                           tblptru	equ	0xFF8
  6043                           tblptrh	equ	0xFF7
  6044                           tblptrl	equ	0xFF6
  6045                           tablat	equ	0xFF5
  6046                           prodh	equ	0xFF4
  6047                           prodl	equ	0xFF3
  6048                           intcon	equ	0xFF2
  6049                           intcon2	equ	0xFF1
  6050                           intcon3	equ	0xFF0
  6051                           postinc0	equ	0xFEE
  6052                           wreg	equ	0xFE8
  6053                           indf2	equ	0xFDF
  6054                           fsr2h	equ	0xFDA
  6055                           fsr2l	equ	0xFD9
  6056                           status	equ	0xFD8
  6057                           
  6058 ;; *************** function _I2C_Master_Write *****************
  6059 ;; Defined at:
  6060 ;;		line 61 in file "I2C.c"
  6061 ;; Parameters:    Size  Location     Type
  6062 ;;  d               2    1[BANK0 ] unsigned int 
  6063 ;; Auto vars:     Size  Location     Type
  6064 ;;		None
  6065 ;; Return value:  Size  Location     Type
  6066 ;;                  1    wreg      void 
  6067 ;; Registers used:
  6068 ;;		wreg, status,2, status,0, cstack
  6069 ;; Tracked objects:
  6070 ;;		On entry : 0/0
  6071 ;;		On exit  : 0/0
  6072 ;;		Unchanged: 0/0
  6073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6074 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6077 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6078 ;;Total ram usage:        2 bytes
  6079 ;; Hardware stack levels used:    1
  6080 ;; Hardware stack levels required when called:    6
  6081 ;; This function calls:
  6082 ;;		_I2C_Master_Wait
  6083 ;; This function is called by:
  6084 ;;		_set_time
  6085 ;;		_standby
  6086 ;;		_done_sorting
  6087 ;; This function uses a non-reentrant model
  6088 ;;
  6089                           
  6090                           	psect	text41
  6091  00212E                     __ptext41:
  6092                           	opt stack 0
  6093  00212E                     _I2C_Master_Write:
  6094                           	opt stack 22
  6095                           
  6096                           ;I2C.c: 63: I2C_Master_Wait();
  6097                           
  6098                           ;incstack = 0
  6099  00212E  EC43  F010         	call	_I2C_Master_Wait	;wreg free
  6100                           
  6101                           ;I2C.c: 64: SSPBUF = d;
  6102  002132  C0AC  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  6103  002136  0012               	return		;funcret
  6104  002138                     __end_of_I2C_Master_Write:
  6105                           	opt stack 0
  6106                           tosu	equ	0xFFF
  6107                           tosh	equ	0xFFE
  6108                           tosl	equ	0xFFD
  6109                           pclath	equ	0xFFA
  6110                           tblptru	equ	0xFF8
  6111                           tblptrh	equ	0xFF7
  6112                           tblptrl	equ	0xFF6
  6113                           tablat	equ	0xFF5
  6114                           prodh	equ	0xFF4
  6115                           prodl	equ	0xFF3
  6116                           intcon	equ	0xFF2
  6117                           intcon2	equ	0xFF1
  6118                           intcon3	equ	0xFF0
  6119                           postinc0	equ	0xFEE
  6120                           wreg	equ	0xFE8
  6121                           indf2	equ	0xFDF
  6122                           fsr2h	equ	0xFDA
  6123                           fsr2l	equ	0xFD9
  6124                           status	equ	0xFD8
  6125                           
  6126 ;; *************** function _I2C_Master_Stop *****************
  6127 ;; Defined at:
  6128 ;;		line 55 in file "I2C.c"
  6129 ;; Parameters:    Size  Location     Type
  6130 ;;		None
  6131 ;; Auto vars:     Size  Location     Type
  6132 ;;		None
  6133 ;; Return value:  Size  Location     Type
  6134 ;;                  1    wreg      void 
  6135 ;; Registers used:
  6136 ;;		wreg, status,2, status,0, cstack
  6137 ;; Tracked objects:
  6138 ;;		On entry : 0/0
  6139 ;;		On exit  : 0/0
  6140 ;;		Unchanged: 0/0
  6141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6146 ;;Total ram usage:        0 bytes
  6147 ;; Hardware stack levels used:    1
  6148 ;; Hardware stack levels required when called:    6
  6149 ;; This function calls:
  6150 ;;		_I2C_Master_Wait
  6151 ;; This function is called by:
  6152 ;;		_set_time
  6153 ;;		_standby
  6154 ;;		_done_sorting
  6155 ;; This function uses a non-reentrant model
  6156 ;;
  6157                           
  6158                           	psect	text42
  6159  002138                     __ptext42:
  6160                           	opt stack 0
  6161  002138                     _I2C_Master_Stop:
  6162                           	opt stack 22
  6163                           
  6164                           ;I2C.c: 57: I2C_Master_Wait();
  6165                           
  6166                           ;incstack = 0
  6167  002138  EC43  F010         	call	_I2C_Master_Wait	;wreg free
  6168                           
  6169                           ;I2C.c: 58: PEN = 1;
  6170  00213C  84C5               	bsf	4037,2,c	;volatile
  6171  00213E  0012               	return		;funcret
  6172  002140                     __end_of_I2C_Master_Stop:
  6173                           	opt stack 0
  6174                           tosu	equ	0xFFF
  6175                           tosh	equ	0xFFE
  6176                           tosl	equ	0xFFD
  6177                           pclath	equ	0xFFA
  6178                           tblptru	equ	0xFF8
  6179                           tblptrh	equ	0xFF7
  6180                           tblptrl	equ	0xFF6
  6181                           tablat	equ	0xFF5
  6182                           prodh	equ	0xFF4
  6183                           prodl	equ	0xFF3
  6184                           intcon	equ	0xFF2
  6185                           intcon2	equ	0xFF1
  6186                           intcon3	equ	0xFF0
  6187                           postinc0	equ	0xFEE
  6188                           wreg	equ	0xFE8
  6189                           indf2	equ	0xFDF
  6190                           fsr2h	equ	0xFDA
  6191                           fsr2l	equ	0xFD9
  6192                           status	equ	0xFD8
  6193                           
  6194 ;; *************** function _I2C_Master_Start *****************
  6195 ;; Defined at:
  6196 ;;		line 43 in file "I2C.c"
  6197 ;; Parameters:    Size  Location     Type
  6198 ;;		None
  6199 ;; Auto vars:     Size  Location     Type
  6200 ;;		None
  6201 ;; Return value:  Size  Location     Type
  6202 ;;                  1    wreg      void 
  6203 ;; Registers used:
  6204 ;;		wreg, status,2, status,0, cstack
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6214 ;;Total ram usage:        0 bytes
  6215 ;; Hardware stack levels used:    1
  6216 ;; Hardware stack levels required when called:    6
  6217 ;; This function calls:
  6218 ;;		_I2C_Master_Wait
  6219 ;; This function is called by:
  6220 ;;		_set_time
  6221 ;;		_standby
  6222 ;;		_done_sorting
  6223 ;; This function uses a non-reentrant model
  6224 ;;
  6225                           
  6226                           	psect	text43
  6227  002140                     __ptext43:
  6228                           	opt stack 0
  6229  002140                     _I2C_Master_Start:
  6230                           	opt stack 22
  6231                           
  6232                           ;I2C.c: 45: I2C_Master_Wait();
  6233                           
  6234                           ;incstack = 0
  6235  002140  EC43  F010         	call	_I2C_Master_Wait	;wreg free
  6236                           
  6237                           ;I2C.c: 46: SEN = 1;
  6238  002144  80C5               	bsf	4037,0,c	;volatile
  6239  002146  0012               	return		;funcret
  6240  002148                     __end_of_I2C_Master_Start:
  6241                           	opt stack 0
  6242                           tosu	equ	0xFFF
  6243                           tosh	equ	0xFFE
  6244                           tosl	equ	0xFFD
  6245                           pclath	equ	0xFFA
  6246                           tblptru	equ	0xFF8
  6247                           tblptrh	equ	0xFF7
  6248                           tblptrl	equ	0xFF6
  6249                           tablat	equ	0xFF5
  6250                           prodh	equ	0xFF4
  6251                           prodl	equ	0xFF3
  6252                           intcon	equ	0xFF2
  6253                           intcon2	equ	0xFF1
  6254                           intcon3	equ	0xFF0
  6255                           postinc0	equ	0xFEE
  6256                           wreg	equ	0xFE8
  6257                           indf2	equ	0xFDF
  6258                           fsr2h	equ	0xFDA
  6259                           fsr2l	equ	0xFD9
  6260                           status	equ	0xFD8
  6261                           
  6262 ;; *************** function _I2C_Master_Wait *****************
  6263 ;; Defined at:
  6264 ;;		line 38 in file "I2C.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;		None
  6267 ;; Auto vars:     Size  Location     Type
  6268 ;;		None
  6269 ;; Return value:  Size  Location     Type
  6270 ;;                  1    wreg      void 
  6271 ;; Registers used:
  6272 ;;		wreg, status,2, status,0
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6280 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6281 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6282 ;;Total ram usage:        1 bytes
  6283 ;; Hardware stack levels used:    1
  6284 ;; Hardware stack levels required when called:    5
  6285 ;; This function calls:
  6286 ;;		Nothing
  6287 ;; This function is called by:
  6288 ;;		_I2C_Master_Start
  6289 ;;		_I2C_Master_Stop
  6290 ;;		_I2C_Master_Write
  6291 ;;		_I2C_Master_Read
  6292 ;;		_I2C_Master_RepeatedStart
  6293 ;; This function uses a non-reentrant model
  6294 ;;
  6295                           
  6296                           	psect	text44
  6297  002086                     __ptext44:
  6298                           	opt stack 0
  6299  002086                     _I2C_Master_Wait:
  6300                           	opt stack 22
  6301  002086                     l157:
  6302  002086  B4C7               	btfsc	4039,2,c	;volatile
  6303  002088  D7FE               	goto	l157
  6304  00208A  CFC5 F0AB          	movff	4037,??_I2C_Master_Wait	;volatile
  6305  00208E  0E1F               	movlw	31
  6306  002090  0100               	movlb	0	; () banked
  6307  002092  17AB               	andwf	??_I2C_Master_Wait& (0+255),f,b
  6308  002094  B4D8               	btfsc	status,2,c
  6309  002096  0012               	return	
  6310  002098  D7F6               	goto	l157
  6311  00209A                     __end_of_I2C_Master_Wait:
  6312                           	opt stack 0
  6313                           tosu	equ	0xFFF
  6314                           tosh	equ	0xFFE
  6315                           tosl	equ	0xFFD
  6316                           pclath	equ	0xFFA
  6317                           tblptru	equ	0xFF8
  6318                           tblptrh	equ	0xFF7
  6319                           tblptrl	equ	0xFF6
  6320                           tablat	equ	0xFF5
  6321                           prodh	equ	0xFF4
  6322                           prodl	equ	0xFF3
  6323                           intcon	equ	0xFF2
  6324                           intcon2	equ	0xFF1
  6325                           intcon3	equ	0xFF0
  6326                           postinc0	equ	0xFEE
  6327                           wreg	equ	0xFE8
  6328                           indf2	equ	0xFDF
  6329                           fsr2h	equ	0xFDA
  6330                           fsr2l	equ	0xFD9
  6331                           status	equ	0xFD8
  6332                           
  6333 ;; *************** function _results *****************
  6334 ;; Defined at:
  6335 ;;		line 194 in file "operation.c"
  6336 ;; Parameters:    Size  Location     Type
  6337 ;;		None
  6338 ;; Auto vars:     Size  Location     Type
  6339 ;;  i               1   42[BANK0 ] unsigned char 
  6340 ;;  i               1   41[BANK0 ] unsigned char 
  6341 ;;  i               1   40[BANK0 ] unsigned char 
  6342 ;;  keypress_tem    1   39[BANK0 ] unsigned char 
  6343 ;;  keypress        1   38[BANK0 ] unsigned char 
  6344 ;; Return value:  Size  Location     Type
  6345 ;;                  1    wreg      void 
  6346 ;; Registers used:
  6347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6348 ;; Tracked objects:
  6349 ;;		On entry : 0/0
  6350 ;;		On exit  : 0/0
  6351 ;;		Unchanged: 0/0
  6352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6354 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6355 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6356 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6357 ;;Total ram usage:        7 bytes
  6358 ;; Hardware stack levels used:    1
  6359 ;; Hardware stack levels required when called:    8
  6360 ;; This function calls:
  6361 ;;		_initLCD
  6362 ;;		_lcdInst
  6363 ;;		_printf
  6364 ;; This function is called by:
  6365 ;;		_main
  6366 ;; This function uses a non-reentrant model
  6367 ;;
  6368                           
  6369                           	psect	text45
  6370  000E36                     __ptext45:
  6371                           	opt stack 0
  6372  000E36                     _results:
  6373                           	opt stack 22
  6374                           
  6375                           ;operation.c: 196: tot = pop_can + pop_can_tab + tin_can + tin_can_label;
  6376                           
  6377                           ; BSR set to: 0
  6378                           ;incstack = 0
  6379  000E36  0100               	movlb	0	; () banked
  6380  000E38  5195               	movf	_pop_can_tab& (0+255),w,b
  6381  000E3A  0100               	movlb	0	; () banked
  6382  000E3C  2597               	addwf	_pop_can& (0+255),w,b
  6383  000E3E  0100               	movlb	0	; () banked
  6384  000E40  6FCF               	movwf	??_results& (0+255),b
  6385  000E42  0100               	movlb	0	; () banked
  6386  000E44  5196               	movf	(_pop_can_tab+1)& (0+255),w,b
  6387  000E46  0100               	movlb	0	; () banked
  6388  000E48  2198               	addwfc	(_pop_can+1)& (0+255),w,b
  6389  000E4A  0100               	movlb	0	; () banked
  6390  000E4C  6FD0               	movwf	(??_results+1)& (0+255),b
  6391  000E4E  0100               	movlb	0	; () banked
  6392  000E50  5199               	movf	_tin_can& (0+255),w,b
  6393  000E52  0100               	movlb	0	; () banked
  6394  000E54  27CF               	addwf	??_results& (0+255),f,b
  6395  000E56  0100               	movlb	0	; () banked
  6396  000E58  519A               	movf	(_tin_can+1)& (0+255),w,b
  6397  000E5A  0100               	movlb	0	; () banked
  6398  000E5C  23D0               	addwfc	(??_results+1)& (0+255),f,b
  6399  000E5E  0100               	movlb	0	; () banked
  6400  000E60  519B               	movf	_tin_can_label& (0+255),w,b
  6401  000E62  0100               	movlb	0	; () banked
  6402  000E64  25CF               	addwf	??_results& (0+255),w,b
  6403  000E66  6E47               	movwf	_tot,c
  6404  000E68  0100               	movlb	0	; () banked
  6405  000E6A  519C               	movf	(_tin_can_label+1)& (0+255),w,b
  6406  000E6C  0100               	movlb	0	; () banked
  6407  000E6E  21D0               	addwfc	(??_results+1)& (0+255),w,b
  6408  000E70  6E48               	movwf	_tot+1,c
  6409  000E72                     l5456:
  6410                           
  6411                           ; BSR set to: 0
  6412                           ;operation.c: 199: lcdInst(0b10000000);;
  6413  000E72  0E80               	movlw	128
  6414  000E74  EC67  F010         	call	_lcdInst
  6415                           
  6416                           ;operation.c: 200: initLCD();
  6417  000E78  ECA5  F00D         	call	_initLCD	;wreg free
  6418                           
  6419                           ;operation.c: 201: __nop();
  6420  000E7C  F000               	nop	
  6421                           
  6422                           ;operation.c: 202: __nop();
  6423  000E7E  F000               	nop	
  6424                           
  6425                           ;operation.c: 204: printf("A:Total   B:Pop ");
  6426  000E80  0E4F               	movlw	low STR_7
  6427  000E82  0100               	movlb	0	; () banked
  6428  000E84  6FB9               	movwf	printf@f& (0+255),b
  6429  000E86  0EFF               	movlw	high STR_7
  6430  000E88  0100               	movlb	0	; () banked
  6431  000E8A  6FBA               	movwf	(printf@f+1)& (0+255),b
  6432  000E8C  EC09  F000         	call	_printf	;wreg free
  6433                           
  6434                           ;operation.c: 205: lcdInst(0b11000000);;
  6435  000E90  0EC0               	movlw	192
  6436  000E92  EC67  F010         	call	_lcdInst
  6437                           
  6438                           ;operation.c: 206: printf("C:Tin     D:Time");
  6439  000E96  0E71               	movlw	low STR_8
  6440  000E98  0100               	movlb	0	; () banked
  6441  000E9A  6FB9               	movwf	printf@f& (0+255),b
  6442  000E9C  0EFF               	movlw	high STR_8
  6443  000E9E  0100               	movlb	0	; () banked
  6444  000EA0  6FBA               	movwf	(printf@f+1)& (0+255),b
  6445  000EA2  EC09  F000         	call	_printf	;wreg free
  6446                           
  6447                           ;operation.c: 207: (INTCONbits.GIE = 1);
  6448  000EA6  8EF2               	bsf	intcon,7,c	;volatile
  6449                           
  6450                           ;operation.c: 208: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  6451  000EA8  0E00               	movlw	0
  6452  000EAA  0100               	movlb	0	; () banked
  6453  000EAC  6FD3               	movwf	results@i& (0+255),b
  6454  000EAE                     l5474:
  6455                           
  6456                           ; BSR set to: 0
  6457  000EAE  0E09               	movlw	9
  6458  000EB0  0100               	movlb	0	; () banked
  6459  000EB2  65D3               	cpfsgt	results@i& (0+255),b
  6460  000EB4  D001               	goto	l5478
  6461  000EB6  D010               	goto	l5482
  6462  000EB8                     l5478:
  6463                           
  6464                           ; BSR set to: 0
  6465  000EB8  0E02               	movlw	2
  6466  000EBA  0100               	movlb	0	; () banked
  6467  000EBC  6FD0               	movwf	(??_results+1)& (0+255),b
  6468  000EBE  0E3F               	movlw	63
  6469  000EC0  0100               	movlb	0	; () banked
  6470  000EC2  6FCF               	movwf	??_results& (0+255),b
  6471  000EC4  0E2B               	movlw	43
  6472  000EC6                     u5007:
  6473  000EC6  2EE8               	decfsz	wreg,f,c
  6474  000EC8  D7FE               	bra	u5007
  6475  000ECA  2FCF               	decfsz	??_results& (0+255),f,b
  6476  000ECC  D7FC               	bra	u5007
  6477  000ECE  2FD0               	decfsz	(??_results+1)& (0+255),f,b
  6478  000ED0  D7FA               	bra	u5007
  6479  000ED2  0100               	movlb	0	; () banked
  6480  000ED4  2BD3               	incf	results@i& (0+255),f,b
  6481  000ED6  D7EB               	goto	l5474
  6482  000ED8                     l5482:
  6483                           
  6484                           ; BSR set to: 0
  6485                           ;operation.c: 209: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  6486  000ED8  0E00               	movlw	0
  6487  000EDA  0100               	movlb	0	; () banked
  6488  000EDC  6FD4               	movwf	results@i_847& (0+255),b
  6489  000EDE                     l5484:
  6490                           
  6491                           ; BSR set to: 0
  6492  000EDE  0E09               	movlw	9
  6493  000EE0  0100               	movlb	0	; () banked
  6494  000EE2  65D4               	cpfsgt	results@i_847& (0+255),b
  6495  000EE4  D001               	goto	l5488
  6496  000EE6  D010               	goto	l506
  6497  000EE8                     l5488:
  6498                           
  6499                           ; BSR set to: 0
  6500  000EE8  0E02               	movlw	2
  6501  000EEA  0100               	movlb	0	; () banked
  6502  000EEC  6FD0               	movwf	(??_results+1)& (0+255),b
  6503  000EEE  0E3F               	movlw	63
  6504  000EF0  0100               	movlb	0	; () banked
  6505  000EF2  6FCF               	movwf	??_results& (0+255),b
  6506  000EF4  0E2B               	movlw	43
  6507  000EF6                     u5017:
  6508  000EF6  2EE8               	decfsz	wreg,f,c
  6509  000EF8  D7FE               	bra	u5017
  6510  000EFA  2FCF               	decfsz	??_results& (0+255),f,b
  6511  000EFC  D7FC               	bra	u5017
  6512  000EFE  2FD0               	decfsz	(??_results+1)& (0+255),f,b
  6513  000F00  D7FA               	bra	u5017
  6514  000F02  0100               	movlb	0	; () banked
  6515  000F04  2BD4               	incf	results@i_847& (0+255),f,b
  6516  000F06  D7EB               	goto	l5484
  6517  000F08                     l506:
  6518                           
  6519                           ; BSR set to: 0
  6520                           ;operation.c: 210: (INTCONbits.GIE = 0);
  6521  000F08  9EF2               	bcf	intcon,7,c	;volatile
  6522                           
  6523                           ; BSR set to: 0
  6524                           ;operation.c: 211: initLCD();
  6525  000F0A  ECA5  F00D         	call	_initLCD	;wreg free
  6526                           
  6527                           ;operation.c: 212: __nop();
  6528  000F0E  F000               	nop	
  6529                           
  6530                           ;operation.c: 213: __nop();
  6531  000F10  F000               	nop	
  6532                           
  6533                           ;operation.c: 214: printf("Press 0 to Reset");
  6534  000F12  0E82               	movlw	low STR_9
  6535  000F14  0100               	movlb	0	; () banked
  6536  000F16  6FB9               	movwf	printf@f& (0+255),b
  6537  000F18  0EFF               	movlw	high STR_9
  6538  000F1A  0100               	movlb	0	; () banked
  6539  000F1C  6FBA               	movwf	(printf@f+1)& (0+255),b
  6540  000F1E  EC09  F000         	call	_printf	;wreg free
  6541                           
  6542                           ;operation.c: 215: (INTCONbits.GIE = 1);
  6543  000F22  8EF2               	bsf	intcon,7,c	;volatile
  6544                           
  6545                           ;operation.c: 216: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  6546  000F24  0E00               	movlw	0
  6547  000F26  0100               	movlb	0	; () banked
  6548  000F28  6FD5               	movwf	results@i_849& (0+255),b
  6549  000F2A                     l5504:
  6550                           
  6551                           ; BSR set to: 0
  6552  000F2A  0E09               	movlw	9
  6553  000F2C  0100               	movlb	0	; () banked
  6554  000F2E  65D5               	cpfsgt	results@i_849& (0+255),b
  6555  000F30  D001               	goto	l5508
  6556  000F32  D010               	goto	l508
  6557  000F34                     l5508:
  6558                           
  6559                           ; BSR set to: 0
  6560  000F34  0E02               	movlw	2
  6561  000F36  0100               	movlb	0	; () banked
  6562  000F38  6FD0               	movwf	(??_results+1)& (0+255),b
  6563  000F3A  0E3F               	movlw	63
  6564  000F3C  0100               	movlb	0	; () banked
  6565  000F3E  6FCF               	movwf	??_results& (0+255),b
  6566  000F40  0E2B               	movlw	43
  6567  000F42                     u5027:
  6568  000F42  2EE8               	decfsz	wreg,f,c
  6569  000F44  D7FE               	bra	u5027
  6570  000F46  2FCF               	decfsz	??_results& (0+255),f,b
  6571  000F48  D7FC               	bra	u5027
  6572  000F4A  2FD0               	decfsz	(??_results+1)& (0+255),f,b
  6573  000F4C  D7FA               	bra	u5027
  6574  000F4E  0100               	movlb	0	; () banked
  6575  000F50  2BD5               	incf	results@i_849& (0+255),f,b
  6576  000F52  D7EB               	goto	l5504
  6577  000F54                     l508:
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;operation.c: 217: (INTCONbits.GIE = 0);
  6581  000F54  9EF2               	bcf	intcon,7,c	;volatile
  6582                           
  6583                           ; BSR set to: 0
  6584                           ;operation.c: 220: unsigned char keypress = (PORTB & 0xF0) >> 4;
  6585  000F56  3881               	swapf	3969,w,c	;volatile
  6586  000F58  0B0F               	andlw	15
  6587  000F5A  0B0F               	andlw	15
  6588  000F5C  0100               	movlb	0	; () banked
  6589  000F5E  6FD1               	movwf	results@keypress& (0+255),b
  6590                           
  6591                           ; BSR set to: 0
  6592                           ;operation.c: 221: unsigned char keypress_temp = keys[keypress];
  6593  000F60  0100               	movlb	0	; () banked
  6594  000F62  51D1               	movf	results@keypress& (0+255),w,b
  6595  000F64  0D01               	mullw	1
  6596  000F66  0EEB               	movlw	low _keys
  6597  000F68  24F3               	addwf	prodl,w,c
  6598  000F6A  6EF6               	movwf	tblptrl,c
  6599  000F6C  0EFE               	movlw	high _keys
  6600  000F6E  20F4               	addwfc	prodh,w,c
  6601  000F70  6EF7               	movwf	tblptrh,c
  6602  000F72                     	if	1	;There are 3 active tblptr bytes
  6603  000F72  6AF8               	clrf	tblptru,c
  6604  000F74  0E00               	movlw	low (__mediumconst shr (0+16))
  6605  000F76  22F8               	addwfc	tblptru,f,c
  6606  000F78                     	endif
  6607  000F78  0008               	tblrd		*
  6608  000F7A  CFF5 F0D2          	movff	tablat,results@keypress_temp
  6609                           
  6610                           ; BSR set to: 0
  6611                           ;operation.c: 223: if(keypress_temp == '0'){
  6612  000F7E  0E30               	movlw	48
  6613  000F80  0100               	movlb	0	; () banked
  6614  000F82  19D2               	xorwf	results@keypress_temp& (0+255),w,b
  6615  000F84  A4D8               	btfss	status,2,c
  6616  000F86  D775               	goto	l5456
  6617                           
  6618                           ; BSR set to: 0
  6619                           ;operation.c: 224: pop_can = pop_can_tab = tin_can = tin_can_label = 0;
  6620  000F88  0E00               	movlw	0
  6621  000F8A  0100               	movlb	0	; () banked
  6622  000F8C  6F9C               	movwf	(_tin_can_label+1)& (0+255),b
  6623  000F8E  0E00               	movlw	0
  6624  000F90  6F9B               	movwf	_tin_can_label& (0+255),b
  6625  000F92  C09B  F099         	movff	_tin_can_label,_tin_can
  6626  000F96  C09C  F09A         	movff	_tin_can_label+1,_tin_can+1
  6627  000F9A  C099  F095         	movff	_tin_can,_pop_can_tab
  6628  000F9E  C09A  F096         	movff	_tin_can+1,_pop_can_tab+1
  6629  000FA2  C095  F097         	movff	_pop_can_tab,_pop_can
  6630  000FA6  C096  F098         	movff	_pop_can_tab+1,_pop_can+1
  6631                           
  6632                           ;operation.c: 225: break;
  6633  000FAA  0012               	return	
  6634  000FAC                     __end_of_results:
  6635                           	opt stack 0
  6636                           tosu	equ	0xFFF
  6637                           tosh	equ	0xFFE
  6638                           tosl	equ	0xFFD
  6639                           pclath	equ	0xFFA
  6640                           tblptru	equ	0xFF8
  6641                           tblptrh	equ	0xFF7
  6642                           tblptrl	equ	0xFF6
  6643                           tablat	equ	0xFF5
  6644                           prodh	equ	0xFF4
  6645                           prodl	equ	0xFF3
  6646                           intcon	equ	0xFF2
  6647                           intcon2	equ	0xFF1
  6648                           intcon3	equ	0xFF0
  6649                           postinc0	equ	0xFEE
  6650                           wreg	equ	0xFE8
  6651                           indf2	equ	0xFDF
  6652                           fsr2h	equ	0xFDA
  6653                           fsr2l	equ	0xFD9
  6654                           status	equ	0xFD8
  6655                           
  6656 ;; *************** function _printf *****************
  6657 ;; Defined at:
  6658 ;;		line 464 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
  6659 ;; Parameters:    Size  Location     Type
  6660 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  6661 ;;		 -> STR_15(13), STR_14(15), STR_13(15), STR_12(17), 
  6662 ;;		 -> STR_11(22), STR_10(19), STR_9(17), STR_8(17), 
  6663 ;;		 -> STR_7(17), STR_6(11), STR_5(9), STR_4(17), 
  6664 ;;		 -> STR_3(15), STR_2(13), STR_1(2), 
  6665 ;; Auto vars:     Size  Location     Type
  6666 ;;  idx             1   26[BANK0 ] unsigned char 
  6667 ;;  tmpval          4    0        struct .
  6668 ;;  cp              3    0        PTR const unsigned char 
  6669 ;;  width           2   33[BANK0 ] int 
  6670 ;;  val             2   30[BANK0 ] unsigned int 
  6671 ;;  ap              2   27[BANK0 ] PTR void [1]
  6672 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6673 ;;  len             2    0        unsigned int 
  6674 ;;  c               1   35[BANK0 ] char 
  6675 ;;  flag            1   32[BANK0 ] unsigned char 
  6676 ;;  prec            1   29[BANK0 ] char 
  6677 ;; Return value:  Size  Location     Type
  6678 ;;                  2   14[BANK0 ] int 
  6679 ;; Registers used:
  6680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6681 ;; Tracked objects:
  6682 ;;		On entry : 0/0
  6683 ;;		On exit  : 0/0
  6684 ;;		Unchanged: 0/0
  6685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6686 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6687 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6688 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6689 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6690 ;;Total ram usage:       22 bytes
  6691 ;; Hardware stack levels used:    1
  6692 ;; Hardware stack levels required when called:    7
  6693 ;; This function calls:
  6694 ;;		___lwdiv
  6695 ;;		___lwmod
  6696 ;;		___wmul
  6697 ;;		_isdigit
  6698 ;;		_putch
  6699 ;; This function is called by:
  6700 ;;		_standby
  6701 ;;		_startSorting
  6702 ;;		_results
  6703 ;; This function uses a non-reentrant model
  6704 ;;
  6705                           
  6706                           	psect	text46
  6707  000012                     __ptext46:
  6708                           	opt stack 0
  6709  000012                     _printf:
  6710                           	opt stack 22
  6711                           
  6712                           ;doprnt.c: 466: va_list ap;
  6713                           ;doprnt.c: 499: signed char c;
  6714                           ;doprnt.c: 501: int width;
  6715                           ;doprnt.c: 506: signed char prec;
  6716                           ;doprnt.c: 508: unsigned char flag;
  6717                           ;doprnt.c: 523: union {
  6718                           ;doprnt.c: 524: unsigned long vd;
  6719                           ;doprnt.c: 525: double integ;
  6720                           ;doprnt.c: 526: } tmpval;
  6721                           ;doprnt.c: 528: unsigned int val;
  6722                           ;doprnt.c: 529: unsigned len;
  6723                           ;doprnt.c: 530: const char * cp;
  6724                           ;doprnt.c: 533: *ap = __va_start();
  6725                           
  6726                           ; BSR set to: 0
  6727                           ;incstack = 0
  6728  000012  0EBB               	movlw	low (?_printf+2)
  6729  000014  0100               	movlb	0	; () banked
  6730  000016  6FC6               	movwf	printf@ap& (0+255),b
  6731  000018  0E00               	movlw	high (?_printf+2)
  6732  00001A  0100               	movlb	0	; () banked
  6733  00001C  6FC7               	movwf	(printf@ap+1)& (0+255),b
  6734                           
  6735                           ;doprnt.c: 536: while(c = *f++) {
  6736  00001E  D1D8               	goto	l5128
  6737  000020                     l5002:
  6738                           
  6739                           ; BSR set to: 0
  6740                           ;doprnt.c: 538: if(c != '%')
  6741  000020  0E25               	movlw	37
  6742  000022  0100               	movlb	0	; () banked
  6743  000024  19CE               	xorwf	printf@c& (0+255),w,b
  6744  000026  B4D8               	btfsc	status,2,c
  6745  000028  D005               	goto	l5006
  6746                           
  6747                           ; BSR set to: 0
  6748                           ;doprnt.c: 540: {
  6749                           ;doprnt.c: 541: (putch(c) );
  6750  00002A  0100               	movlb	0	; () banked
  6751  00002C  51CE               	movf	printf@c& (0+255),w,b
  6752  00002E  EC5F  F010         	call	_putch
  6753                           
  6754                           ;doprnt.c: 542: continue;
  6755  000032  D1CE               	goto	l5128
  6756  000034                     l5006:
  6757                           
  6758                           ;doprnt.c: 543: }
  6759                           ;doprnt.c: 546: width = 0;
  6760  000034  0E00               	movlw	0
  6761  000036  0100               	movlb	0	; () banked
  6762  000038  6FCD               	movwf	(printf@width+1)& (0+255),b
  6763  00003A  0E00               	movlw	0
  6764  00003C  6FCC               	movwf	printf@width& (0+255),b
  6765                           
  6766                           ;doprnt.c: 548: flag = 0;
  6767  00003E  0E00               	movlw	0
  6768  000040  0100               	movlb	0	; () banked
  6769  000042  6FCB               	movwf	printf@flag& (0+255),b
  6770                           
  6771                           ; BSR set to: 0
  6772                           ;doprnt.c: 551: switch(*f) {
  6773                           
  6774                           ;doprnt.c: 550: for(;;) {
  6775  000044  D005               	goto	l5012
  6776  000046                     l5008:
  6777                           
  6778                           ;doprnt.c: 580: flag |= 0x04;
  6779  000046  0100               	movlb	0	; () banked
  6780  000048  85CB               	bsf	printf@flag& (0+255),2,b
  6781                           
  6782                           ;doprnt.c: 581: f++;
  6783  00004A  0100               	movlb	0	; () banked
  6784  00004C  4BB9               	infsnz	printf@f& (0+255),f,b
  6785  00004E  2BBA               	incf	(printf@f+1)& (0+255),f,b
  6786  000050                     l5012:
  6787  000050  C0B9  FFF6         	movff	printf@f,tblptrl
  6788  000054  C0BA  FFF7         	movff	printf@f+1,tblptrh
  6789  000058                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6790  000058  6AF8               	clrf	tblptru,c
  6791  00005A                     	endif
  6792  00005A                     	if	0	;tblptru may be non-zero
  6793  00005A                     	endif
  6794  00005A  0008               	tblrd		*
  6795  00005C  50F5               	movf	tablat,w,c
  6796                           
  6797                           ; Switch size 1, requested type "space"
  6798                           ; Number of cases is 1, Range of values is 48 to 48
  6799                           ; switch strategies available:
  6800                           ; Name         Instructions Cycles
  6801                           ; simple_byte            4     3 (average)
  6802                           ;	Chosen strategy is simple_byte
  6803  00005E  0A30               	xorlw	48	; case 48
  6804  000060  B4D8               	btfsc	status,2,c
  6805  000062  D7F1               	goto	l5008
  6806                           
  6807                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6808                           
  6809                           ;doprnt.c: 586: }
  6810                           
  6811                           ;doprnt.c: 585: break;
  6812  000064  C0B9  FFF6         	movff	printf@f,tblptrl
  6813  000068  C0BA  FFF7         	movff	printf@f+1,tblptrh
  6814  00006C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6815  00006C  6AF8               	clrf	tblptru,c
  6816  00006E                     	endif
  6817  00006E                     	if	0	;tblptru may be non-zero
  6818  00006E                     	endif
  6819  00006E  0008               	tblrd		*
  6820  000070  50F5               	movf	tablat,w,c
  6821  000072  EC27  F00F         	call	_isdigit
  6822  000076  A0D8               	btfss	status,0,c
  6823  000078  D046               	goto	l5030
  6824                           
  6825                           ;doprnt.c: 598: width = 0;
  6826  00007A  0E00               	movlw	0
  6827  00007C  0100               	movlb	0	; () banked
  6828  00007E  6FCD               	movwf	(printf@width+1)& (0+255),b
  6829  000080  0E00               	movlw	0
  6830  000082  6FCC               	movwf	printf@width& (0+255),b
  6831  000084                     l5018:
  6832                           
  6833                           ;doprnt.c: 600: width *= 10;
  6834  000084  C0CC  F0B3         	movff	printf@width,___wmul@multiplier
  6835  000088  C0CD  F0B4         	movff	printf@width+1,___wmul@multiplier+1
  6836  00008C  0E00               	movlw	0
  6837  00008E  0100               	movlb	0	; () banked
  6838  000090  6FB6               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6839  000092  0E0A               	movlw	10
  6840  000094  6FB5               	movwf	___wmul@multiplicand& (0+255),b
  6841  000096  EC63  F00E         	call	___wmul	;wreg free
  6842  00009A  C0B3  F0CC         	movff	?___wmul,printf@width
  6843  00009E  C0B4  F0CD         	movff	?___wmul+1,printf@width+1
  6844                           
  6845                           ;doprnt.c: 601: width += *f++ - '0';
  6846  0000A2  0ED0               	movlw	208
  6847  0000A4  0100               	movlb	0	; () banked
  6848  0000A6  6FC1               	movwf	??_printf& (0+255),b
  6849  0000A8  0EFF               	movlw	255
  6850  0000AA  0100               	movlb	0	; () banked
  6851  0000AC  6FC2               	movwf	(??_printf+1)& (0+255),b
  6852  0000AE  C0B9  FFF6         	movff	printf@f,tblptrl
  6853  0000B2  C0BA  FFF7         	movff	printf@f+1,tblptrh
  6854  0000B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6855  0000B6  6AF8               	clrf	tblptru,c
  6856  0000B8                     	endif
  6857  0000B8                     	if	0	;tblptru may be non-zero
  6858  0000B8                     	endif
  6859  0000B8  0008               	tblrd		*
  6860  0000BA  50F5               	movf	tablat,w,c
  6861  0000BC  0100               	movlb	0	; () banked
  6862  0000BE  6FC3               	movwf	(??_printf+2)& (0+255),b
  6863  0000C0  6BC4               	clrf	(??_printf+3)& (0+255),b
  6864  0000C2  0100               	movlb	0	; () banked
  6865  0000C4  51C1               	movf	??_printf& (0+255),w,b
  6866  0000C6  0100               	movlb	0	; () banked
  6867  0000C8  27C3               	addwf	(??_printf+2)& (0+255),f,b
  6868  0000CA  0100               	movlb	0	; () banked
  6869  0000CC  51C2               	movf	(??_printf+1)& (0+255),w,b
  6870  0000CE  0100               	movlb	0	; () banked
  6871  0000D0  23C4               	addwfc	(??_printf+3)& (0+255),f,b
  6872  0000D2  0100               	movlb	0	; () banked
  6873  0000D4  51C3               	movf	(??_printf+2)& (0+255),w,b
  6874  0000D6  0100               	movlb	0	; () banked
  6875  0000D8  27CC               	addwf	printf@width& (0+255),f,b
  6876  0000DA  0100               	movlb	0	; () banked
  6877  0000DC  51C4               	movf	(??_printf+3)& (0+255),w,b
  6878  0000DE  0100               	movlb	0	; () banked
  6879  0000E0  23CD               	addwfc	(printf@width+1)& (0+255),f,b
  6880                           
  6881                           ; BSR set to: 0
  6882  0000E2  0100               	movlb	0	; () banked
  6883  0000E4  4BB9               	infsnz	printf@f& (0+255),f,b
  6884  0000E6  2BBA               	incf	(printf@f+1)& (0+255),f,b
  6885                           
  6886                           ; BSR set to: 0
  6887                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6888  0000E8  C0B9  FFF6         	movff	printf@f,tblptrl
  6889  0000EC  C0BA  FFF7         	movff	printf@f+1,tblptrh
  6890  0000F0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6891  0000F0  6AF8               	clrf	tblptru,c
  6892  0000F2                     	endif
  6893  0000F2                     	if	0	;tblptru may be non-zero
  6894  0000F2                     	endif
  6895  0000F2  0008               	tblrd		*
  6896  0000F4  50F5               	movf	tablat,w,c
  6897  0000F6  EC27  F00F         	call	_isdigit
  6898  0000FA  A0D8               	btfss	status,0,c
  6899  0000FC  D004               	goto	l5030
  6900  0000FE  D7C2               	goto	l5018
  6901  000100                     l5026:
  6902                           
  6903                           ;doprnt.c: 721: flag |= 0x80;
  6904  000100  0100               	movlb	0	; () banked
  6905  000102  8FCB               	bsf	printf@flag& (0+255),7,b
  6906                           
  6907                           ;doprnt.c: 723: break;
  6908  000104  D01A               	goto	l766
  6909  000106                     l5030:
  6910  000106  C0B9  FFF6         	movff	printf@f,tblptrl
  6911  00010A  C0BA  FFF7         	movff	printf@f+1,tblptrh
  6912  00010E  0100               	movlb	0	; () banked
  6913  000110  4BB9               	infsnz	printf@f& (0+255),f,b
  6914  000112  2BBA               	incf	(printf@f+1)& (0+255),f,b
  6915  000114                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6916  000114  6AF8               	clrf	tblptru,c
  6917  000116                     	endif
  6918  000116                     	if	0	;tblptru may be non-zero
  6919  000116                     	endif
  6920  000116  0008               	tblrd		*
  6921  000118  CFF5 F0CE          	movff	tablat,printf@c
  6922  00011C  0100               	movlb	0	; () banked
  6923  00011E  51CE               	movf	printf@c& (0+255),w,b
  6924                           
  6925                           ; Switch size 1, requested type "space"
  6926                           ; Number of cases is 4, Range of values is 0 to 120
  6927                           ; switch strategies available:
  6928                           ; Name         Instructions Cycles
  6929                           ; simple_byte           13     7 (average)
  6930                           ;	Chosen strategy is simple_byte
  6931  000120  0A00               	xorlw	0	; case 0
  6932  000122  B4D8               	btfsc	status,2,c
  6933  000124  0012               	return	
  6934  000126  0A64               	xorlw	100	; case 100
  6935  000128  B4D8               	btfsc	status,2,c
  6936  00012A  D007               	goto	l766
  6937  00012C  0A0D               	xorlw	13	; case 105
  6938  00012E  B4D8               	btfsc	status,2,c
  6939  000130  D004               	goto	l766
  6940  000132  0A11               	xorlw	17	; case 120
  6941  000134  B4D8               	btfsc	status,2,c
  6942  000136  D7E4               	goto	l5026
  6943  000138  D14B               	goto	l5128
  6944  00013A                     l766:
  6945                           
  6946                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6947  00013A  0100               	movlb	0	; () banked
  6948  00013C  BFCB               	btfsc	printf@flag& (0+255),7,b
  6949  00013E  D019               	goto	l5042
  6950                           
  6951                           ; BSR set to: 0
  6952                           ;doprnt.c: 1253: {
  6953                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6954  000140  C0C6  FFD9         	movff	printf@ap,fsr2l
  6955  000144  C0C7  FFDA         	movff	printf@ap+1,fsr2h
  6956  000148  CFDE F0C9          	movff	postinc2,printf@val
  6957  00014C  CFDD F0CA          	movff	postdec2,printf@val+1
  6958                           
  6959                           ; BSR set to: 0
  6960  000150  0E02               	movlw	2
  6961  000152  0100               	movlb	0	; () banked
  6962  000154  27C6               	addwf	printf@ap& (0+255),f,b
  6963  000156  0E00               	movlw	0
  6964  000158  23C7               	addwfc	(printf@ap+1)& (0+255),f,b
  6965                           
  6966                           ; BSR set to: 0
  6967                           ;doprnt.c: 1261: if((int)val < 0) {
  6968  00015A  0100               	movlb	0	; () banked
  6969  00015C  AFCA               	btfss	(printf@val+1)& (0+255),7,b
  6970  00015E  D059               	goto	l5076
  6971                           
  6972                           ; BSR set to: 0
  6973                           ;doprnt.c: 1262: flag |= 0x03;
  6974  000160  0E03               	movlw	3
  6975  000162  0100               	movlb	0	; () banked
  6976  000164  13CB               	iorwf	printf@flag& (0+255),f,b
  6977                           
  6978                           ; BSR set to: 0
  6979                           ;doprnt.c: 1263: val = -val;
  6980  000166  0100               	movlb	0	; () banked
  6981  000168  6DC9               	negf	printf@val& (0+255),b
  6982  00016A  1FCA               	comf	(printf@val+1)& (0+255),f,b
  6983  00016C  B0D8               	btfsc	status,0,c
  6984  00016E  2BCA               	incf	(printf@val+1)& (0+255),f,b
  6985                           
  6986                           ; BSR set to: 0
  6987                           ;doprnt.c: 1264: }
  6988                           ;doprnt.c: 1266: }
  6989  000170  D050               	goto	l5076
  6990  000172                     l5042:
  6991                           
  6992                           ; BSR set to: 0
  6993                           ;doprnt.c: 1268: else
  6994                           ;doprnt.c: 1273: {
  6995                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6996  000172  C0C6  FFD9         	movff	printf@ap,fsr2l
  6997  000176  C0C7  FFDA         	movff	printf@ap+1,fsr2h
  6998  00017A  CFDE F0C9          	movff	postinc2,printf@val
  6999  00017E  CFDD F0CA          	movff	postdec2,printf@val+1
  7000                           
  7001                           ; BSR set to: 0
  7002  000182  0E02               	movlw	2
  7003  000184  0100               	movlb	0	; () banked
  7004  000186  27C6               	addwf	printf@ap& (0+255),f,b
  7005  000188  0E00               	movlw	0
  7006  00018A  23C7               	addwfc	(printf@ap+1)& (0+255),f,b
  7007                           
  7008                           ; BSR set to: 0
  7009                           ;doprnt.c: 1287: }
  7010                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7011  00018C  D042               	goto	l5076
  7012  00018E                     l5046:
  7013                           
  7014                           ; BSR set to: 0
  7015                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7016  00018E  0E01               	movlw	1
  7017  000190  0100               	movlb	0	; () banked
  7018  000192  6FCE               	movwf	printf@c& (0+255),b
  7019  000194                     l5048:
  7020                           
  7021                           ; BSR set to: 0
  7022  000194  0E05               	movlw	5
  7023  000196  0100               	movlb	0	; () banked
  7024  000198  19CE               	xorwf	printf@c& (0+255),w,b
  7025  00019A  B4D8               	btfsc	status,2,c
  7026  00019C  D043               	goto	l5078
  7027                           
  7028                           ; BSR set to: 0
  7029                           ;doprnt.c: 1306: if(val < dpowers[c])
  7030                           
  7031                           ; BSR set to: 0
  7032                           
  7033                           ; BSR set to: 0
  7034  00019E  0100               	movlb	0	; () banked
  7035  0001A0  51CE               	movf	printf@c& (0+255),w,b
  7036  0001A2  0D02               	mullw	2
  7037  0001A4  0EFC               	movlw	low _dpowers
  7038  0001A6  24F3               	addwf	prodl,w,c
  7039  0001A8  6EF6               	movwf	tblptrl,c
  7040  0001AA  0EFE               	movlw	high _dpowers
  7041  0001AC  20F4               	addwfc	prodh,w,c
  7042  0001AE  6EF7               	movwf	tblptrh,c
  7043  0001B0                     	if	1	;There are 3 active tblptr bytes
  7044  0001B0  6AF8               	clrf	tblptru,c
  7045  0001B2  0E00               	movlw	low (__mediumconst shr (0+16))
  7046  0001B4  22F8               	addwfc	tblptru,f,c
  7047  0001B6                     	endif
  7048  0001B6  0009               	tblrd		*+
  7049  0001B8  50F5               	movf	tablat,w,c
  7050  0001BA  0100               	movlb	0	; () banked
  7051  0001BC  5DC9               	subwf	printf@val& (0+255),w,b
  7052  0001BE  0009               	tblrd		*+
  7053  0001C0  50F5               	movf	tablat,w,c
  7054  0001C2  0100               	movlb	0	; () banked
  7055  0001C4  59CA               	subwfb	(printf@val+1)& (0+255),w,b
  7056  0001C6  A0D8               	btfss	status,0,c
  7057  0001C8  D02D               	goto	l5078
  7058                           
  7059                           ; BSR set to: 0
  7060                           
  7061                           ; BSR set to: 0
  7062                           
  7063                           ; BSR set to: 0
  7064                           ;doprnt.c: 1307: break;
  7065  0001CA  0100               	movlb	0	; () banked
  7066  0001CC  2BCE               	incf	printf@c& (0+255),f,b
  7067  0001CE  D7E2               	goto	l5048
  7068  0001D0                     l5060:
  7069                           
  7070                           ; BSR set to: 0
  7071                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7072  0001D0  0E01               	movlw	1
  7073  0001D2  0100               	movlb	0	; () banked
  7074  0001D4  6FCE               	movwf	printf@c& (0+255),b
  7075  0001D6                     l5062:
  7076                           
  7077                           ; BSR set to: 0
  7078  0001D6  0E04               	movlw	4
  7079  0001D8  0100               	movlb	0	; () banked
  7080  0001DA  19CE               	xorwf	printf@c& (0+255),w,b
  7081  0001DC  B4D8               	btfsc	status,2,c
  7082  0001DE  D022               	goto	l5078
  7083                           
  7084                           ; BSR set to: 0
  7085                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7086                           
  7087                           ; BSR set to: 0
  7088                           
  7089                           ; BSR set to: 0
  7090  0001E0  0100               	movlb	0	; () banked
  7091  0001E2  51CE               	movf	printf@c& (0+255),w,b
  7092  0001E4  0D02               	mullw	2
  7093  0001E6  0E06               	movlw	low _hexpowers
  7094  0001E8  24F3               	addwf	prodl,w,c
  7095  0001EA  6EF6               	movwf	tblptrl,c
  7096  0001EC  0EFF               	movlw	high _hexpowers
  7097  0001EE  20F4               	addwfc	prodh,w,c
  7098  0001F0  6EF7               	movwf	tblptrh,c
  7099  0001F2                     	if	1	;There are 3 active tblptr bytes
  7100  0001F2  6AF8               	clrf	tblptru,c
  7101  0001F4  0E00               	movlw	low (__mediumconst shr (0+16))
  7102  0001F6  22F8               	addwfc	tblptru,f,c
  7103  0001F8                     	endif
  7104  0001F8  0009               	tblrd		*+
  7105  0001FA  50F5               	movf	tablat,w,c
  7106  0001FC  0100               	movlb	0	; () banked
  7107  0001FE  5DC9               	subwf	printf@val& (0+255),w,b
  7108  000200  0009               	tblrd		*+
  7109  000202  50F5               	movf	tablat,w,c
  7110  000204  0100               	movlb	0	; () banked
  7111  000206  59CA               	subwfb	(printf@val+1)& (0+255),w,b
  7112  000208  A0D8               	btfss	status,0,c
  7113  00020A  D00C               	goto	l5078
  7114                           
  7115                           ; BSR set to: 0
  7116                           
  7117                           ; BSR set to: 0
  7118                           
  7119                           ; BSR set to: 0
  7120                           ;doprnt.c: 1318: break;
  7121  00020C  0100               	movlb	0	; () banked
  7122  00020E  2BCE               	incf	printf@c& (0+255),f,b
  7123  000210  D7E2               	goto	l5062
  7124  000212                     l5076:
  7125                           
  7126                           ; BSR set to: 0
  7127  000212  0100               	movlb	0	; () banked
  7128  000214  51CB               	movf	printf@flag& (0+255),w,b
  7129  000216  0B80               	andlw	128
  7130                           
  7131                           ; Switch size 1, requested type "space"
  7132                           ; Number of cases is 2, Range of values is 0 to 128
  7133                           ; switch strategies available:
  7134                           ; Name         Instructions Cycles
  7135                           ; simple_byte            7     4 (average)
  7136                           ;	Chosen strategy is simple_byte
  7137  000218  0A00               	xorlw	0	; case 0
  7138  00021A  B4D8               	btfsc	status,2,c
  7139  00021C  D7B8               	goto	l5046
  7140  00021E  0A80               	xorlw	128	; case 128
  7141  000220  B4D8               	btfsc	status,2,c
  7142  000222  D7D6               	goto	l5060
  7143  000224                     l5078:
  7144                           
  7145                           ; BSR set to: 0
  7146                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7147  000224  0100               	movlb	0	; () banked
  7148  000226  51CC               	movf	printf@width& (0+255),w,b
  7149  000228  0100               	movlb	0	; () banked
  7150  00022A  11CD               	iorwf	(printf@width+1)& (0+255),w,b
  7151  00022C  B4D8               	btfsc	status,2,c
  7152  00022E  D00B               	goto	l5084
  7153                           
  7154                           ; BSR set to: 0
  7155  000230  C0CB  F0C1         	movff	printf@flag,??_printf
  7156  000234  0E03               	movlw	3
  7157  000236  0100               	movlb	0	; () banked
  7158  000238  17C1               	andwf	??_printf& (0+255),f,b
  7159  00023A  B4D8               	btfsc	status,2,c
  7160  00023C  D004               	goto	l5084
  7161                           
  7162                           ; BSR set to: 0
  7163                           ;doprnt.c: 1346: width--;
  7164  00023E  0100               	movlb	0	; () banked
  7165  000240  07CC               	decf	printf@width& (0+255),f,b
  7166  000242  A0D8               	btfss	status,0,c
  7167  000244  07CD               	decf	(printf@width+1)& (0+255),f,b
  7168  000246                     l5084:
  7169                           
  7170                           ; BSR set to: 0
  7171                           ;doprnt.c: 1381: if(width > c)
  7172  000246  0E80               	movlw	128
  7173  000248  0100               	movlb	0	; () banked
  7174  00024A  BFCE               	btfsc	printf@c& (0+255),7,b
  7175  00024C  0E7F               	movlw	127
  7176  00024E  0100               	movlb	0	; () banked
  7177  000250  6FC1               	movwf	??_printf& (0+255),b
  7178  000252  0100               	movlb	0	; () banked
  7179  000254  51CC               	movf	printf@width& (0+255),w,b
  7180  000256  0100               	movlb	0	; () banked
  7181  000258  5DCE               	subwf	printf@c& (0+255),w,b
  7182  00025A  0100               	movlb	0	; () banked
  7183  00025C  51CD               	movf	(printf@width+1)& (0+255),w,b
  7184  00025E  0A80               	xorlw	128
  7185  000260  0100               	movlb	0	; () banked
  7186  000262  59C1               	subwfb	??_printf& (0+255),w,b
  7187  000264  B0D8               	btfsc	status,0,c
  7188  000266  D00B               	goto	l5088
  7189                           
  7190                           ; BSR set to: 0
  7191                           ;doprnt.c: 1382: width -= c;
  7192  000268  0100               	movlb	0	; () banked
  7193  00026A  51CE               	movf	printf@c& (0+255),w,b
  7194  00026C  0100               	movlb	0	; () banked
  7195  00026E  5FCC               	subwf	printf@width& (0+255),f,b
  7196  000270  0E00               	movlw	0
  7197  000272  0100               	movlb	0	; () banked
  7198  000274  BFCE               	btfsc	printf@c& (0+255),7,b
  7199  000276  0EFF               	movlw	255
  7200  000278  0100               	movlb	0	; () banked
  7201  00027A  5BCD               	subwfb	(printf@width+1)& (0+255),f,b
  7202  00027C  D005               	goto	l5090
  7203  00027E                     l5088:
  7204                           
  7205                           ; BSR set to: 0
  7206                           ;doprnt.c: 1383: else
  7207                           ;doprnt.c: 1384: width = 0;
  7208  00027E  0E00               	movlw	0
  7209  000280  0100               	movlb	0	; () banked
  7210  000282  6FCD               	movwf	(printf@width+1)& (0+255),b
  7211  000284  0E00               	movlw	0
  7212  000286  6FCC               	movwf	printf@width& (0+255),b
  7213  000288                     l5090:
  7214                           
  7215                           ; BSR set to: 0
  7216                           ;doprnt.c: 1387: if(flag & 0x04) {
  7217  000288  0100               	movlb	0	; () banked
  7218  00028A  A5CB               	btfss	printf@flag& (0+255),2,b
  7219  00028C  D018               	goto	l5102
  7220                           
  7221                           ; BSR set to: 0
  7222                           ;doprnt.c: 1392: if(flag & 0x03)
  7223  00028E  C0CB  F0C1         	movff	printf@flag,??_printf
  7224  000292  0E03               	movlw	3
  7225  000294  0100               	movlb	0	; () banked
  7226  000296  17C1               	andwf	??_printf& (0+255),f,b
  7227  000298  B4D8               	btfsc	status,2,c
  7228  00029A  D003               	goto	l5096
  7229                           
  7230                           ; BSR set to: 0
  7231                           ;doprnt.c: 1393: (putch('-') );
  7232  00029C  0E2D               	movlw	45
  7233  00029E  EC5F  F010         	call	_putch
  7234  0002A2                     l5096:
  7235                           
  7236                           ;doprnt.c: 1415: if(width)
  7237  0002A2  0100               	movlb	0	; () banked
  7238  0002A4  51CC               	movf	printf@width& (0+255),w,b
  7239  0002A6  0100               	movlb	0	; () banked
  7240  0002A8  11CD               	iorwf	(printf@width+1)& (0+255),w,b
  7241  0002AA  B4D8               	btfsc	status,2,c
  7242  0002AC  D025               	goto	l5112
  7243                           
  7244                           ; BSR set to: 0
  7245                           ;doprnt.c: 1417: (putch('0') );
  7246                           
  7247                           ; BSR set to: 0
  7248                           
  7249                           ;doprnt.c: 1416: do
  7250  0002AE  0E30               	movlw	48
  7251  0002B0  EC5F  F010         	call	_putch
  7252                           
  7253                           ;doprnt.c: 1418: while(--width);
  7254  0002B4  0100               	movlb	0	; () banked
  7255  0002B6  07CC               	decf	printf@width& (0+255),f,b
  7256  0002B8  A0D8               	btfss	status,0,c
  7257  0002BA  07CD               	decf	(printf@width+1)& (0+255),f,b
  7258  0002BC  D7F2               	goto	l5096
  7259  0002BE                     l5102:
  7260                           
  7261                           ; BSR set to: 0
  7262                           ;doprnt.c: 1422: {
  7263                           ;doprnt.c: 1424: if(width
  7264                           ;doprnt.c: 1428: )
  7265  0002BE  0100               	movlb	0	; () banked
  7266  0002C0  51CC               	movf	printf@width& (0+255),w,b
  7267  0002C2  0100               	movlb	0	; () banked
  7268  0002C4  11CD               	iorwf	(printf@width+1)& (0+255),w,b
  7269  0002C6  B4D8               	btfsc	status,2,c
  7270  0002C8  D00D               	goto	l5108
  7271  0002CA                     l5104:
  7272                           
  7273                           ; BSR set to: 0
  7274                           ;doprnt.c: 1430: (putch(' ') );
  7275  0002CA  0E20               	movlw	32
  7276  0002CC  EC5F  F010         	call	_putch
  7277                           
  7278                           ;doprnt.c: 1431: while(--width);
  7279  0002D0  0100               	movlb	0	; () banked
  7280  0002D2  07CC               	decf	printf@width& (0+255),f,b
  7281  0002D4  A0D8               	btfss	status,0,c
  7282  0002D6  07CD               	decf	(printf@width+1)& (0+255),f,b
  7283  0002D8  0100               	movlb	0	; () banked
  7284  0002DA  51CC               	movf	printf@width& (0+255),w,b
  7285  0002DC  0100               	movlb	0	; () banked
  7286  0002DE  11CD               	iorwf	(printf@width+1)& (0+255),w,b
  7287  0002E0  A4D8               	btfss	status,2,c
  7288  0002E2  D7F3               	goto	l5104
  7289  0002E4                     l5108:
  7290                           
  7291                           ; BSR set to: 0
  7292                           ;doprnt.c: 1438: if(flag & 0x03)
  7293  0002E4  C0CB  F0C1         	movff	printf@flag,??_printf
  7294  0002E8  0E03               	movlw	3
  7295  0002EA  0100               	movlb	0	; () banked
  7296  0002EC  17C1               	andwf	??_printf& (0+255),f,b
  7297  0002EE  B4D8               	btfsc	status,2,c
  7298  0002F0  D003               	goto	l5112
  7299                           
  7300                           ; BSR set to: 0
  7301                           ;doprnt.c: 1439: (putch('-') );
  7302  0002F2  0E2D               	movlw	45
  7303  0002F4  EC5F  F010         	call	_putch
  7304  0002F8                     l5112:
  7305                           
  7306                           ;doprnt.c: 1469: }
  7307                           ;doprnt.c: 1472: prec = c;
  7308  0002F8  C0CE  F0C8         	movff	printf@c,printf@prec
  7309                           
  7310                           ;doprnt.c: 1474: while(prec--) {
  7311  0002FC  D063               	goto	l5126
  7312  0002FE                     l5114:
  7313                           
  7314                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7315  0002FE  0100               	movlb	0	; () banked
  7316  000300  51C8               	movf	printf@prec& (0+255),w,b
  7317  000302  0D02               	mullw	2
  7318  000304  0EFC               	movlw	low _dpowers
  7319  000306  24F3               	addwf	prodl,w,c
  7320  000308  6EF6               	movwf	tblptrl,c
  7321  00030A  0EFE               	movlw	high _dpowers
  7322  00030C  20F4               	addwfc	prodh,w,c
  7323  00030E  6EF7               	movwf	tblptrh,c
  7324  000310                     	if	1	;There are 3 active tblptr bytes
  7325  000310  6AF8               	clrf	tblptru,c
  7326  000312  0E00               	movlw	low (__mediumconst shr (0+16))
  7327  000314  22F8               	addwfc	tblptru,f,c
  7328  000316                     	endif
  7329  000316  0009               	tblrd		*+
  7330  000318  CFF5 F0AD          	movff	tablat,___lwdiv@divisor
  7331  00031C  000A               	tblrd		*-
  7332  00031E  CFF5 F0AE          	movff	tablat,___lwdiv@divisor+1
  7333  000322  C0C9  F0AB         	movff	printf@val,___lwdiv@dividend
  7334  000326  C0CA  F0AC         	movff	printf@val+1,___lwdiv@dividend+1
  7335  00032A  ECA3  F00A         	call	___lwdiv	;wreg free
  7336  00032E  C0AB  F0B2         	movff	?___lwdiv,___lwmod@dividend
  7337  000332  C0AC  F0B3         	movff	?___lwdiv+1,___lwmod@dividend+1
  7338  000336  0E00               	movlw	0
  7339  000338  0100               	movlb	0	; () banked
  7340  00033A  6FB5               	movwf	(___lwmod@divisor+1)& (0+255),b
  7341  00033C  0E0A               	movlw	10
  7342  00033E  6FB4               	movwf	___lwmod@divisor& (0+255),b
  7343  000340  ECB2  F00B         	call	___lwmod	;wreg free
  7344  000344  0100               	movlb	0	; () banked
  7345  000346  51B2               	movf	?___lwmod& (0+255),w,b
  7346  000348  0F30               	addlw	48
  7347  00034A  0100               	movlb	0	; () banked
  7348  00034C  6FCE               	movwf	printf@c& (0+255),b
  7349                           
  7350                           ;doprnt.c: 1491: break;
  7351  00034E  D036               	goto	l5124
  7352  000350                     l5116:
  7353                           
  7354                           ; BSR set to: 0
  7355                           ;doprnt.c: 1499: {
  7356                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7357  000350  C0C9  F0AB         	movff	printf@val,___lwdiv@dividend
  7358  000354  C0CA  F0AC         	movff	printf@val+1,___lwdiv@dividend+1
  7359  000358  0100               	movlb	0	; () banked
  7360  00035A  51C8               	movf	printf@prec& (0+255),w,b
  7361  00035C  0D02               	mullw	2
  7362  00035E  0E06               	movlw	low _hexpowers
  7363  000360  24F3               	addwf	prodl,w,c
  7364  000362  6EF6               	movwf	tblptrl,c
  7365  000364  0EFF               	movlw	high _hexpowers
  7366  000366  20F4               	addwfc	prodh,w,c
  7367  000368  6EF7               	movwf	tblptrh,c
  7368  00036A                     	if	1	;There are 3 active tblptr bytes
  7369  00036A  6AF8               	clrf	tblptru,c
  7370  00036C  0E00               	movlw	low (__mediumconst shr (0+16))
  7371  00036E  22F8               	addwfc	tblptru,f,c
  7372  000370                     	endif
  7373  000370  0009               	tblrd		*+
  7374  000372  CFF5 F0AD          	movff	tablat,___lwdiv@divisor
  7375  000376  000A               	tblrd		*-
  7376  000378  CFF5 F0AE          	movff	tablat,___lwdiv@divisor+1
  7377  00037C  ECA3  F00A         	call	___lwdiv	;wreg free
  7378  000380  0100               	movlb	0	; () banked
  7379  000382  51AB               	movf	?___lwdiv& (0+255),w,b
  7380  000384  0B0F               	andlw	15
  7381  000386  0100               	movlb	0	; () banked
  7382  000388  6FC5               	movwf	printf@idx& (0+255),b
  7383                           
  7384                           ; BSR set to: 0
  7385                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7386  00038A  0100               	movlb	0	; () banked
  7387  00038C  51C5               	movf	printf@idx& (0+255),w,b
  7388  00038E  0D01               	mullw	1
  7389  000390  0E3E               	movlw	low STR_16
  7390  000392  24F3               	addwf	prodl,w,c
  7391  000394  6EF6               	movwf	tblptrl,c
  7392  000396  0EFF               	movlw	high STR_16
  7393  000398  20F4               	addwfc	prodh,w,c
  7394  00039A  6EF7               	movwf	tblptrh,c
  7395  00039C                     	if	1	;There are 3 active tblptr bytes
  7396  00039C  6AF8               	clrf	tblptru,c
  7397  00039E  0E00               	movlw	low (__mediumconst shr (0+16))
  7398  0003A0  22F8               	addwfc	tblptru,f,c
  7399  0003A2                     	endif
  7400  0003A2  0008               	tblrd		*
  7401  0003A4  CFF5 F0CE          	movff	tablat,printf@c
  7402                           
  7403                           ; BSR set to: 0
  7404                           ;doprnt.c: 1523: }
  7405                           
  7406                           ;doprnt.c: 1508: }
  7407                           ;doprnt.c: 1510: break;
  7408  0003A8  D009               	goto	l5124
  7409  0003AA                     l5122:
  7410  0003AA  0100               	movlb	0	; () banked
  7411  0003AC  51CB               	movf	printf@flag& (0+255),w,b
  7412  0003AE  0B80               	andlw	128
  7413                           
  7414                           ; Switch size 1, requested type "space"
  7415                           ; Number of cases is 2, Range of values is 0 to 128
  7416                           ; switch strategies available:
  7417                           ; Name         Instructions Cycles
  7418                           ; simple_byte            7     4 (average)
  7419                           ;	Chosen strategy is simple_byte
  7420  0003B0  0A00               	xorlw	0	; case 0
  7421  0003B2  B4D8               	btfsc	status,2,c
  7422  0003B4  D7A4               	goto	l5114
  7423  0003B6  0A80               	xorlw	128	; case 128
  7424  0003B8  B4D8               	btfsc	status,2,c
  7425  0003BA  D7CA               	goto	l5116
  7426  0003BC                     l5124:
  7427                           
  7428                           ; BSR set to: 0
  7429                           ;doprnt.c: 1524: (putch(c) );
  7430  0003BC  0100               	movlb	0	; () banked
  7431  0003BE  51CE               	movf	printf@c& (0+255),w,b
  7432  0003C0  EC5F  F010         	call	_putch
  7433  0003C4                     l5126:
  7434  0003C4  0100               	movlb	0	; () banked
  7435  0003C6  07C8               	decf	printf@prec& (0+255),f,b
  7436  0003C8  0100               	movlb	0	; () banked
  7437  0003CA  29C8               	incf	printf@prec& (0+255),w,b
  7438  0003CC  A4D8               	btfss	status,2,c
  7439  0003CE  D7ED               	goto	l5122
  7440  0003D0                     l5128:
  7441  0003D0  C0B9  FFF6         	movff	printf@f,tblptrl
  7442  0003D4  C0BA  FFF7         	movff	printf@f+1,tblptrh
  7443  0003D8  0100               	movlb	0	; () banked
  7444  0003DA  4BB9               	infsnz	printf@f& (0+255),f,b
  7445  0003DC  2BBA               	incf	(printf@f+1)& (0+255),f,b
  7446  0003DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7447  0003DE  6AF8               	clrf	tblptru,c
  7448  0003E0                     	endif
  7449  0003E0                     	if	0	;tblptru may be non-zero
  7450  0003E0                     	endif
  7451  0003E0  0008               	tblrd		*
  7452  0003E2  CFF5 F0CE          	movff	tablat,printf@c
  7453  0003E6  0100               	movlb	0	; () banked
  7454  0003E8  51CE               	movf	printf@c& (0+255),w,b
  7455  0003EA  B4D8               	btfsc	status,2,c
  7456  0003EC  0012               	return	
  7457  0003EE  D618               	goto	l5002
  7458  0003F0                     __end_of_printf:
  7459                           	opt stack 0
  7460                           tosu	equ	0xFFF
  7461                           tosh	equ	0xFFE
  7462                           tosl	equ	0xFFD
  7463                           pclath	equ	0xFFA
  7464                           tblptru	equ	0xFF8
  7465                           tblptrh	equ	0xFF7
  7466                           tblptrl	equ	0xFF6
  7467                           tablat	equ	0xFF5
  7468                           prodh	equ	0xFF4
  7469                           prodl	equ	0xFF3
  7470                           intcon	equ	0xFF2
  7471                           intcon2	equ	0xFF1
  7472                           intcon3	equ	0xFF0
  7473                           postinc0	equ	0xFEE
  7474                           wreg	equ	0xFE8
  7475                           indf2	equ	0xFDF
  7476                           postinc2	equ	0xFDE
  7477                           postdec2	equ	0xFDD
  7478                           fsr2h	equ	0xFDA
  7479                           fsr2l	equ	0xFD9
  7480                           status	equ	0xFD8
  7481                           
  7482 ;; *************** function _putch *****************
  7483 ;; Defined at:
  7484 ;;		line 42 in file "lcd.c"
  7485 ;; Parameters:    Size  Location     Type
  7486 ;;  data            1    wreg     unsigned char 
  7487 ;; Auto vars:     Size  Location     Type
  7488 ;;  data            1    2[BANK0 ] unsigned char 
  7489 ;; Return value:  Size  Location     Type
  7490 ;;                  1    wreg      void 
  7491 ;; Registers used:
  7492 ;;		wreg, status,2, status,0, cstack
  7493 ;; Tracked objects:
  7494 ;;		On entry : 0/0
  7495 ;;		On exit  : 0/0
  7496 ;;		Unchanged: 0/0
  7497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7499 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7501 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7502 ;;Total ram usage:        1 bytes
  7503 ;; Hardware stack levels used:    1
  7504 ;; Hardware stack levels required when called:    6
  7505 ;; This function calls:
  7506 ;;		_lcdNibble
  7507 ;; This function is called by:
  7508 ;;		_printf
  7509 ;; This function uses a non-reentrant model
  7510 ;;
  7511                           
  7512                           	psect	text47
  7513  0020BE                     __ptext47:
  7514                           	opt stack 0
  7515  0020BE                     _putch:
  7516                           	opt stack 22
  7517                           
  7518                           ;incstack = 0
  7519                           ;putch@data stored from wreg
  7520  0020BE  0100               	movlb	0	; () banked
  7521  0020C0  6FAD               	movwf	putch@data& (0+255),b
  7522                           
  7523                           ;lcd.c: 43: LATDbits.LATD2 = 1;
  7524  0020C2  848C               	bsf	3980,2,c	;volatile
  7525                           
  7526                           ;lcd.c: 44: lcdNibble(data);
  7527  0020C4  0100               	movlb	0	; () banked
  7528  0020C6  51AD               	movf	putch@data& (0+255),w,b
  7529  0020C8  EC4D  F00B         	call	_lcdNibble
  7530  0020CC  0012               	return		;funcret
  7531  0020CE                     __end_of_putch:
  7532                           	opt stack 0
  7533                           tosu	equ	0xFFF
  7534                           tosh	equ	0xFFE
  7535                           tosl	equ	0xFFD
  7536                           pclath	equ	0xFFA
  7537                           tblptru	equ	0xFF8
  7538                           tblptrh	equ	0xFF7
  7539                           tblptrl	equ	0xFF6
  7540                           tablat	equ	0xFF5
  7541                           prodh	equ	0xFF4
  7542                           prodl	equ	0xFF3
  7543                           intcon	equ	0xFF2
  7544                           intcon2	equ	0xFF1
  7545                           intcon3	equ	0xFF0
  7546                           postinc0	equ	0xFEE
  7547                           wreg	equ	0xFE8
  7548                           indf2	equ	0xFDF
  7549                           postinc2	equ	0xFDE
  7550                           postdec2	equ	0xFDD
  7551                           fsr2h	equ	0xFDA
  7552                           fsr2l	equ	0xFD9
  7553                           status	equ	0xFD8
  7554                           
  7555 ;; *************** function _isdigit *****************
  7556 ;; Defined at:
  7557 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/isdigit.c"
  7558 ;; Parameters:    Size  Location     Type
  7559 ;;  c               1    wreg     unsigned char 
  7560 ;; Auto vars:     Size  Location     Type
  7561 ;;  c               1    2[BANK0 ] unsigned char 
  7562 ;; Return value:  Size  Location     Type
  7563 ;;		None               void
  7564 ;; Registers used:
  7565 ;;		wreg, status,2, status,0
  7566 ;; Tracked objects:
  7567 ;;		On entry : 0/0
  7568 ;;		On exit  : 0/0
  7569 ;;		Unchanged: 0/0
  7570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7572 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7573 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7574 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7575 ;;Total ram usage:        3 bytes
  7576 ;; Hardware stack levels used:    1
  7577 ;; Hardware stack levels required when called:    5
  7578 ;; This function calls:
  7579 ;;		Nothing
  7580 ;; This function is called by:
  7581 ;;		_printf
  7582 ;; This function uses a non-reentrant model
  7583 ;;
  7584                           
  7585                           	psect	text48
  7586  001E4E                     __ptext48:
  7587                           	opt stack 0
  7588  001E4E                     _isdigit:
  7589                           	opt stack 23
  7590                           
  7591                           ;incstack = 0
  7592                           ;isdigit@c stored from wreg
  7593  001E4E  0100               	movlb	0	; () banked
  7594  001E50  6FAD               	movwf	isdigit@c& (0+255),b
  7595  001E52  0E00               	movlw	0
  7596  001E54  0100               	movlb	0	; () banked
  7597  001E56  6FAC               	movwf	_isdigit$1503& (0+255),b
  7598                           
  7599                           ; BSR set to: 0
  7600  001E58  0E3A               	movlw	58
  7601  001E5A  0100               	movlb	0	; () banked
  7602  001E5C  61AD               	cpfslt	isdigit@c& (0+255),b
  7603  001E5E  D007               	goto	l4756
  7604                           
  7605                           ; BSR set to: 0
  7606  001E60  0E2F               	movlw	47
  7607  001E62  0100               	movlb	0	; () banked
  7608  001E64  65AD               	cpfsgt	isdigit@c& (0+255),b
  7609  001E66  D003               	goto	l4756
  7610                           
  7611                           ; BSR set to: 0
  7612  001E68  0E01               	movlw	1
  7613  001E6A  0100               	movlb	0	; () banked
  7614  001E6C  6FAC               	movwf	_isdigit$1503& (0+255),b
  7615  001E6E                     l4756:
  7616                           
  7617                           ; BSR set to: 0
  7618  001E6E  C0AC  F0AB         	movff	_isdigit$1503,??_isdigit
  7619  001E72  0100               	movlb	0	; () banked
  7620  001E74  31AB               	rrcf	??_isdigit& (0+255),w,b
  7621  001E76  0012               	return	
  7622  001E78                     __end_of_isdigit:
  7623                           	opt stack 0
  7624                           tosu	equ	0xFFF
  7625                           tosh	equ	0xFFE
  7626                           tosl	equ	0xFFD
  7627                           pclath	equ	0xFFA
  7628                           tblptru	equ	0xFF8
  7629                           tblptrh	equ	0xFF7
  7630                           tblptrl	equ	0xFF6
  7631                           tablat	equ	0xFF5
  7632                           prodh	equ	0xFF4
  7633                           prodl	equ	0xFF3
  7634                           intcon	equ	0xFF2
  7635                           intcon2	equ	0xFF1
  7636                           intcon3	equ	0xFF0
  7637                           postinc0	equ	0xFEE
  7638                           wreg	equ	0xFE8
  7639                           indf2	equ	0xFDF
  7640                           postinc2	equ	0xFDE
  7641                           postdec2	equ	0xFDD
  7642                           fsr2h	equ	0xFDA
  7643                           fsr2l	equ	0xFD9
  7644                           status	equ	0xFD8
  7645                           
  7646 ;; *************** function ___wmul *****************
  7647 ;; Defined at:
  7648 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/Umul16.c"
  7649 ;; Parameters:    Size  Location     Type
  7650 ;;  multiplier      2    8[BANK0 ] unsigned int 
  7651 ;;  multiplicand    2   10[BANK0 ] unsigned int 
  7652 ;; Auto vars:     Size  Location     Type
  7653 ;;  product         2   12[BANK0 ] unsigned int 
  7654 ;; Return value:  Size  Location     Type
  7655 ;;                  2    8[BANK0 ] unsigned int 
  7656 ;; Registers used:
  7657 ;;		wreg, status,2, status,0, prodl, prodh
  7658 ;; Tracked objects:
  7659 ;;		On entry : 0/0
  7660 ;;		On exit  : 0/0
  7661 ;;		Unchanged: 0/0
  7662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7663 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7664 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7666 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7667 ;;Total ram usage:        6 bytes
  7668 ;; Hardware stack levels used:    1
  7669 ;; Hardware stack levels required when called:    5
  7670 ;; This function calls:
  7671 ;;		Nothing
  7672 ;; This function is called by:
  7673 ;;		_done_sorting
  7674 ;;		_printf
  7675 ;; This function uses a non-reentrant model
  7676 ;;
  7677                           
  7678                           	psect	text49
  7679  001CC6                     __ptext49:
  7680                           	opt stack 0
  7681  001CC6                     ___wmul:
  7682                           	opt stack 23
  7683                           
  7684                           ; BSR set to: 0
  7685                           ;incstack = 0
  7686  001CC6  0100               	movlb	0	; () banked
  7687  001CC8  51B3               	movf	___wmul@multiplier& (0+255),w,b
  7688  001CCA  0100               	movlb	0	; () banked
  7689  001CCC  03B5               	mulwf	___wmul@multiplicand& (0+255),b
  7690  001CCE  CFF3 F0B7          	movff	prodl,___wmul@product
  7691  001CD2  CFF4 F0B8          	movff	prodh,___wmul@product+1
  7692  001CD6  0100               	movlb	0	; () banked
  7693  001CD8  51B3               	movf	___wmul@multiplier& (0+255),w,b
  7694  001CDA  0100               	movlb	0	; () banked
  7695  001CDC  03B6               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7696  001CDE  50F3               	movf	prodl,w,c
  7697  001CE0  0100               	movlb	0	; () banked
  7698  001CE2  27B8               	addwf	(___wmul@product+1)& (0+255),f,b
  7699  001CE4  0100               	movlb	0	; () banked
  7700  001CE6  51B4               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7701  001CE8  0100               	movlb	0	; () banked
  7702  001CEA  03B5               	mulwf	___wmul@multiplicand& (0+255),b
  7703  001CEC  50F3               	movf	prodl,w,c
  7704  001CEE  0100               	movlb	0	; () banked
  7705  001CF0  27B8               	addwf	(___wmul@product+1)& (0+255),f,b
  7706                           
  7707                           ; BSR set to: 0
  7708  001CF2  C0B7  F0B3         	movff	___wmul@product,?___wmul
  7709  001CF6  C0B8  F0B4         	movff	___wmul@product+1,?___wmul+1
  7710  001CFA  0012               	return	
  7711  001CFC                     __end_of___wmul:
  7712                           	opt stack 0
  7713                           tosu	equ	0xFFF
  7714                           tosh	equ	0xFFE
  7715                           tosl	equ	0xFFD
  7716                           pclath	equ	0xFFA
  7717                           tblptru	equ	0xFF8
  7718                           tblptrh	equ	0xFF7
  7719                           tblptrl	equ	0xFF6
  7720                           tablat	equ	0xFF5
  7721                           prodh	equ	0xFF4
  7722                           prodl	equ	0xFF3
  7723                           intcon	equ	0xFF2
  7724                           intcon2	equ	0xFF1
  7725                           intcon3	equ	0xFF0
  7726                           postinc0	equ	0xFEE
  7727                           wreg	equ	0xFE8
  7728                           indf2	equ	0xFDF
  7729                           postinc2	equ	0xFDE
  7730                           postdec2	equ	0xFDD
  7731                           fsr2h	equ	0xFDA
  7732                           fsr2l	equ	0xFD9
  7733                           status	equ	0xFD8
  7734                           
  7735 ;; *************** function ___lwmod *****************
  7736 ;; Defined at:
  7737 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
  7738 ;; Parameters:    Size  Location     Type
  7739 ;;  dividend        2    7[BANK0 ] unsigned int 
  7740 ;;  divisor         2    9[BANK0 ] unsigned int 
  7741 ;; Auto vars:     Size  Location     Type
  7742 ;;  counter         1   11[BANK0 ] unsigned char 
  7743 ;; Return value:  Size  Location     Type
  7744 ;;                  2    7[BANK0 ] unsigned int 
  7745 ;; Registers used:
  7746 ;;		wreg, status,2, status,0
  7747 ;; Tracked objects:
  7748 ;;		On entry : 0/0
  7749 ;;		On exit  : 0/0
  7750 ;;		Unchanged: 0/0
  7751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7752 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7753 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7755 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7756 ;;Total ram usage:        5 bytes
  7757 ;; Hardware stack levels used:    1
  7758 ;; Hardware stack levels required when called:    5
  7759 ;; This function calls:
  7760 ;;		Nothing
  7761 ;; This function is called by:
  7762 ;;		_printf
  7763 ;; This function uses a non-reentrant model
  7764 ;;
  7765                           
  7766                           	psect	text50
  7767  001764                     __ptext50:
  7768                           	opt stack 0
  7769  001764                     ___lwmod:
  7770                           	opt stack 23
  7771                           
  7772                           ; BSR set to: 0
  7773                           ;incstack = 0
  7774  001764  0100               	movlb	0	; () banked
  7775  001766  51B4               	movf	___lwmod@divisor& (0+255),w,b
  7776  001768  0100               	movlb	0	; () banked
  7777  00176A  11B5               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  7778  00176C  B4D8               	btfsc	status,2,c
  7779  00176E  D026               	goto	l1221
  7780                           
  7781                           ; BSR set to: 0
  7782  001770  0E01               	movlw	1
  7783  001772  0100               	movlb	0	; () banked
  7784  001774  6FB6               	movwf	___lwmod@counter& (0+255),b
  7785  001776  D006               	goto	l4838
  7786  001778                     l4836:
  7787                           
  7788                           ; BSR set to: 0
  7789  001778  0100               	movlb	0	; () banked
  7790  00177A  90D8               	bcf	status,0,c
  7791  00177C  37B4               	rlcf	___lwmod@divisor& (0+255),f,b
  7792  00177E  37B5               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  7793  001780  0100               	movlb	0	; () banked
  7794  001782  2BB6               	incf	___lwmod@counter& (0+255),f,b
  7795  001784                     l4838:
  7796                           
  7797                           ; BSR set to: 0
  7798  001784  0100               	movlb	0	; () banked
  7799  001786  AFB5               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  7800  001788  D7F7               	goto	l4836
  7801  00178A                     l4840:
  7802                           
  7803                           ; BSR set to: 0
  7804  00178A  0100               	movlb	0	; () banked
  7805  00178C  51B4               	movf	___lwmod@divisor& (0+255),w,b
  7806  00178E  0100               	movlb	0	; () banked
  7807  001790  5DB2               	subwf	___lwmod@dividend& (0+255),w,b
  7808  001792  0100               	movlb	0	; () banked
  7809  001794  51B5               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7810  001796  0100               	movlb	0	; () banked
  7811  001798  59B3               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  7812  00179A  A0D8               	btfss	status,0,c
  7813  00179C  D008               	goto	l4844
  7814                           
  7815                           ; BSR set to: 0
  7816  00179E  0100               	movlb	0	; () banked
  7817  0017A0  51B4               	movf	___lwmod@divisor& (0+255),w,b
  7818  0017A2  0100               	movlb	0	; () banked
  7819  0017A4  5FB2               	subwf	___lwmod@dividend& (0+255),f,b
  7820  0017A6  0100               	movlb	0	; () banked
  7821  0017A8  51B5               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7822  0017AA  0100               	movlb	0	; () banked
  7823  0017AC  5BB3               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  7824  0017AE                     l4844:
  7825                           
  7826                           ; BSR set to: 0
  7827  0017AE  0100               	movlb	0	; () banked
  7828  0017B0  90D8               	bcf	status,0,c
  7829  0017B2  33B5               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  7830  0017B4  33B4               	rrcf	___lwmod@divisor& (0+255),f,b
  7831                           
  7832                           ; BSR set to: 0
  7833  0017B6  0100               	movlb	0	; () banked
  7834  0017B8  2FB6               	decfsz	___lwmod@counter& (0+255),f,b
  7835  0017BA  D7E7               	goto	l4840
  7836  0017BC                     l1221:
  7837                           
  7838                           ; BSR set to: 0
  7839  0017BC  C0B2  F0B2         	movff	___lwmod@dividend,?___lwmod
  7840  0017C0  C0B3  F0B3         	movff	___lwmod@dividend+1,?___lwmod+1
  7841                           
  7842                           ; BSR set to: 0
  7843  0017C4  0012               	return		;funcret
  7844  0017C6                     __end_of___lwmod:
  7845                           	opt stack 0
  7846                           tosu	equ	0xFFF
  7847                           tosh	equ	0xFFE
  7848                           tosl	equ	0xFFD
  7849                           pclath	equ	0xFFA
  7850                           tblptru	equ	0xFF8
  7851                           tblptrh	equ	0xFF7
  7852                           tblptrl	equ	0xFF6
  7853                           tablat	equ	0xFF5
  7854                           prodh	equ	0xFF4
  7855                           prodl	equ	0xFF3
  7856                           intcon	equ	0xFF2
  7857                           intcon2	equ	0xFF1
  7858                           intcon3	equ	0xFF0
  7859                           postinc0	equ	0xFEE
  7860                           wreg	equ	0xFE8
  7861                           indf2	equ	0xFDF
  7862                           postinc2	equ	0xFDE
  7863                           postdec2	equ	0xFDD
  7864                           fsr2h	equ	0xFDA
  7865                           fsr2l	equ	0xFD9
  7866                           status	equ	0xFD8
  7867                           
  7868 ;; *************** function ___lwdiv *****************
  7869 ;; Defined at:
  7870 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  7871 ;; Parameters:    Size  Location     Type
  7872 ;;  dividend        2    0[BANK0 ] unsigned int 
  7873 ;;  divisor         2    2[BANK0 ] unsigned int 
  7874 ;; Auto vars:     Size  Location     Type
  7875 ;;  quotient        2    5[BANK0 ] unsigned int 
  7876 ;;  counter         1    4[BANK0 ] unsigned char 
  7877 ;; Return value:  Size  Location     Type
  7878 ;;                  2    0[BANK0 ] unsigned int 
  7879 ;; Registers used:
  7880 ;;		wreg, status,2, status,0
  7881 ;; Tracked objects:
  7882 ;;		On entry : 0/0
  7883 ;;		On exit  : 0/0
  7884 ;;		Unchanged: 0/0
  7885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7886 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7887 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7889 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7890 ;;Total ram usage:        7 bytes
  7891 ;; Hardware stack levels used:    1
  7892 ;; Hardware stack levels required when called:    5
  7893 ;; This function calls:
  7894 ;;		Nothing
  7895 ;; This function is called by:
  7896 ;;		_printf
  7897 ;; This function uses a non-reentrant model
  7898 ;;
  7899                           
  7900                           	psect	text51
  7901  001546                     __ptext51:
  7902                           	opt stack 0
  7903  001546                     ___lwdiv:
  7904                           	opt stack 23
  7905                           
  7906                           ; BSR set to: 0
  7907                           ;incstack = 0
  7908  001546  0E00               	movlw	0
  7909  001548  0100               	movlb	0	; () banked
  7910  00154A  6FB1               	movwf	(___lwdiv@quotient+1)& (0+255),b
  7911  00154C  0E00               	movlw	0
  7912  00154E  6FB0               	movwf	___lwdiv@quotient& (0+255),b
  7913                           
  7914                           ; BSR set to: 0
  7915  001550  0100               	movlb	0	; () banked
  7916  001552  51AD               	movf	___lwdiv@divisor& (0+255),w,b
  7917  001554  0100               	movlb	0	; () banked
  7918  001556  11AE               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  7919  001558  B4D8               	btfsc	status,2,c
  7920  00155A  D02C               	goto	l1211
  7921                           
  7922                           ; BSR set to: 0
  7923  00155C  0E01               	movlw	1
  7924  00155E  0100               	movlb	0	; () banked
  7925  001560  6FAF               	movwf	___lwdiv@counter& (0+255),b
  7926  001562  D006               	goto	l4818
  7927  001564                     l4816:
  7928                           
  7929                           ; BSR set to: 0
  7930  001564  0100               	movlb	0	; () banked
  7931  001566  90D8               	bcf	status,0,c
  7932  001568  37AD               	rlcf	___lwdiv@divisor& (0+255),f,b
  7933  00156A  37AE               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  7934  00156C  0100               	movlb	0	; () banked
  7935  00156E  2BAF               	incf	___lwdiv@counter& (0+255),f,b
  7936  001570                     l4818:
  7937                           
  7938                           ; BSR set to: 0
  7939  001570  0100               	movlb	0	; () banked
  7940  001572  AFAE               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  7941  001574  D7F7               	goto	l4816
  7942  001576                     l4820:
  7943                           
  7944                           ; BSR set to: 0
  7945  001576  0100               	movlb	0	; () banked
  7946  001578  90D8               	bcf	status,0,c
  7947  00157A  37B0               	rlcf	___lwdiv@quotient& (0+255),f,b
  7948  00157C  37B1               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  7949                           
  7950                           ; BSR set to: 0
  7951  00157E  0100               	movlb	0	; () banked
  7952  001580  51AD               	movf	___lwdiv@divisor& (0+255),w,b
  7953  001582  0100               	movlb	0	; () banked
  7954  001584  5DAB               	subwf	___lwdiv@dividend& (0+255),w,b
  7955  001586  0100               	movlb	0	; () banked
  7956  001588  51AE               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7957  00158A  0100               	movlb	0	; () banked
  7958  00158C  59AC               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  7959  00158E  A0D8               	btfss	status,0,c
  7960  001590  D00A               	goto	l4828
  7961                           
  7962                           ; BSR set to: 0
  7963  001592  0100               	movlb	0	; () banked
  7964  001594  51AD               	movf	___lwdiv@divisor& (0+255),w,b
  7965  001596  0100               	movlb	0	; () banked
  7966  001598  5FAB               	subwf	___lwdiv@dividend& (0+255),f,b
  7967  00159A  0100               	movlb	0	; () banked
  7968  00159C  51AE               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7969  00159E  0100               	movlb	0	; () banked
  7970  0015A0  5BAC               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  7971                           
  7972                           ; BSR set to: 0
  7973  0015A2  0100               	movlb	0	; () banked
  7974  0015A4  81B0               	bsf	___lwdiv@quotient& (0+255),0,b
  7975  0015A6                     l4828:
  7976                           
  7977                           ; BSR set to: 0
  7978  0015A6  0100               	movlb	0	; () banked
  7979  0015A8  90D8               	bcf	status,0,c
  7980  0015AA  33AE               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  7981  0015AC  33AD               	rrcf	___lwdiv@divisor& (0+255),f,b
  7982                           
  7983                           ; BSR set to: 0
  7984  0015AE  0100               	movlb	0	; () banked
  7985  0015B0  2FAF               	decfsz	___lwdiv@counter& (0+255),f,b
  7986  0015B2  D7E1               	goto	l4820
  7987  0015B4                     l1211:
  7988                           
  7989                           ; BSR set to: 0
  7990  0015B4  C0B0  F0AB         	movff	___lwdiv@quotient,?___lwdiv
  7991  0015B8  C0B1  F0AC         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7992                           
  7993                           ; BSR set to: 0
  7994  0015BC  0012               	return		;funcret
  7995  0015BE                     __end_of___lwdiv:
  7996                           	opt stack 0
  7997                           tosu	equ	0xFFF
  7998                           tosh	equ	0xFFE
  7999                           tosl	equ	0xFFD
  8000                           pclath	equ	0xFFA
  8001                           tblptru	equ	0xFF8
  8002                           tblptrh	equ	0xFF7
  8003                           tblptrl	equ	0xFF6
  8004                           tablat	equ	0xFF5
  8005                           prodh	equ	0xFF4
  8006                           prodl	equ	0xFF3
  8007                           intcon	equ	0xFF2
  8008                           intcon2	equ	0xFF1
  8009                           intcon3	equ	0xFF0
  8010                           postinc0	equ	0xFEE
  8011                           wreg	equ	0xFE8
  8012                           indf2	equ	0xFDF
  8013                           postinc2	equ	0xFDE
  8014                           postdec2	equ	0xFDD
  8015                           fsr2h	equ	0xFDA
  8016                           fsr2l	equ	0xFD9
  8017                           status	equ	0xFD8
  8018                           
  8019 ;; *************** function _initLCD *****************
  8020 ;; Defined at:
  8021 ;;		line 26 in file "lcd.c"
  8022 ;; Parameters:    Size  Location     Type
  8023 ;;		None
  8024 ;; Auto vars:     Size  Location     Type
  8025 ;;		None
  8026 ;; Return value:  Size  Location     Type
  8027 ;;                  1    wreg      void 
  8028 ;; Registers used:
  8029 ;;		wreg, status,2, status,0, cstack
  8030 ;; Tracked objects:
  8031 ;;		On entry : 0/0
  8032 ;;		On exit  : 0/0
  8033 ;;		Unchanged: 0/0
  8034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8037 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8038 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8039 ;;Total ram usage:        1 bytes
  8040 ;; Hardware stack levels used:    1
  8041 ;; Hardware stack levels required when called:    7
  8042 ;; This function calls:
  8043 ;;		_lcdInst
  8044 ;; This function is called by:
  8045 ;;		_main
  8046 ;;		_standby
  8047 ;;		_startSorting
  8048 ;;		_results
  8049 ;;		_top_rocker_idle
  8050 ;; This function uses a non-reentrant model
  8051 ;;
  8052                           
  8053                           	psect	text52
  8054  001B4A                     __ptext52:
  8055                           	opt stack 0
  8056  001B4A                     _initLCD:
  8057                           	opt stack 21
  8058                           
  8059                           ;lcd.c: 27: _delay((unsigned long)((15)*(10000000/4000.0)));
  8060                           
  8061                           ; BSR set to: 0
  8062                           ;incstack = 0
  8063  001B4A  0E31               	movlw	49
  8064  001B4C  0100               	movlb	0	; () banked
  8065  001B4E  6FAE               	movwf	??_initLCD& (0+255),b
  8066  001B50  0EB2               	movlw	178
  8067  001B52                     u5037:
  8068  001B52  2EE8               	decfsz	wreg,f,c
  8069  001B54  D7FE               	bra	u5037
  8070  001B56  2FAE               	decfsz	??_initLCD& (0+255),f,b
  8071  001B58  D7FC               	bra	u5037
  8072  001B5A  F000               	nop	
  8073                           
  8074                           ;lcd.c: 28: lcdInst(0b00110011);
  8075  001B5C  0E33               	movlw	51
  8076  001B5E  EC67  F010         	call	_lcdInst
  8077                           
  8078                           ;lcd.c: 29: lcdInst(0b00110010);
  8079  001B62  0E32               	movlw	50
  8080  001B64  EC67  F010         	call	_lcdInst
  8081                           
  8082                           ;lcd.c: 30: lcdInst(0b00101000);
  8083  001B68  0E28               	movlw	40
  8084  001B6A  EC67  F010         	call	_lcdInst
  8085                           
  8086                           ;lcd.c: 31: lcdInst(0b00001111);
  8087  001B6E  0E0F               	movlw	15
  8088  001B70  EC67  F010         	call	_lcdInst
  8089                           
  8090                           ;lcd.c: 32: lcdInst(0b00000110);
  8091  001B74  0E06               	movlw	6
  8092  001B76  EC67  F010         	call	_lcdInst
  8093                           
  8094                           ;lcd.c: 33: lcdInst(0b00000001);
  8095  001B7A  0E01               	movlw	1
  8096  001B7C  EC67  F010         	call	_lcdInst
  8097                           
  8098                           ;lcd.c: 34: _delay((unsigned long)((15)*(10000000/4000.0)));
  8099  001B80  0E31               	movlw	49
  8100  001B82  0100               	movlb	0	; () banked
  8101  001B84  6FAE               	movwf	??_initLCD& (0+255),b
  8102  001B86  0EB2               	movlw	178
  8103  001B88                     u5047:
  8104  001B88  2EE8               	decfsz	wreg,f,c
  8105  001B8A  D7FE               	bra	u5047
  8106  001B8C  2FAE               	decfsz	??_initLCD& (0+255),f,b
  8107  001B8E  D7FC               	bra	u5047
  8108  001B90  F000               	nop	
  8109  001B92  0012               	return		;funcret
  8110  001B94                     __end_of_initLCD:
  8111                           	opt stack 0
  8112                           tosu	equ	0xFFF
  8113                           tosh	equ	0xFFE
  8114                           tosl	equ	0xFFD
  8115                           pclath	equ	0xFFA
  8116                           tblptru	equ	0xFF8
  8117                           tblptrh	equ	0xFF7
  8118                           tblptrl	equ	0xFF6
  8119                           tablat	equ	0xFF5
  8120                           prodh	equ	0xFF4
  8121                           prodl	equ	0xFF3
  8122                           intcon	equ	0xFF2
  8123                           intcon2	equ	0xFF1
  8124                           intcon3	equ	0xFF0
  8125                           postinc0	equ	0xFEE
  8126                           wreg	equ	0xFE8
  8127                           indf2	equ	0xFDF
  8128                           postinc2	equ	0xFDE
  8129                           postdec2	equ	0xFDD
  8130                           fsr2h	equ	0xFDA
  8131                           fsr2l	equ	0xFD9
  8132                           status	equ	0xFD8
  8133                           
  8134 ;; *************** function _lcdInst *****************
  8135 ;; Defined at:
  8136 ;;		line 37 in file "lcd.c"
  8137 ;; Parameters:    Size  Location     Type
  8138 ;;  data            1    wreg     unsigned char 
  8139 ;; Auto vars:     Size  Location     Type
  8140 ;;  data            1    2[BANK0 ] unsigned char 
  8141 ;; Return value:  Size  Location     Type
  8142 ;;                  1    wreg      void 
  8143 ;; Registers used:
  8144 ;;		wreg, status,2, status,0, cstack
  8145 ;; Tracked objects:
  8146 ;;		On entry : 0/0
  8147 ;;		On exit  : 0/0
  8148 ;;		Unchanged: 0/0
  8149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8151 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8153 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8154 ;;Total ram usage:        1 bytes
  8155 ;; Hardware stack levels used:    1
  8156 ;; Hardware stack levels required when called:    6
  8157 ;; This function calls:
  8158 ;;		_lcdNibble
  8159 ;; This function is called by:
  8160 ;;		_initLCD
  8161 ;;		_standby
  8162 ;;		_startSorting
  8163 ;;		_results
  8164 ;; This function uses a non-reentrant model
  8165 ;;
  8166                           
  8167                           	psect	text53
  8168  0020CE                     __ptext53:
  8169                           	opt stack 0
  8170  0020CE                     _lcdInst:
  8171                           	opt stack 21
  8172                           
  8173                           ;incstack = 0
  8174                           ;lcdInst@data stored from wreg
  8175  0020CE  0100               	movlb	0	; () banked
  8176  0020D0  6FAD               	movwf	lcdInst@data& (0+255),b
  8177                           
  8178                           ;lcd.c: 38: LATDbits.LATD2 = 0;
  8179  0020D2  948C               	bcf	3980,2,c	;volatile
  8180                           
  8181                           ;lcd.c: 39: lcdNibble(data);
  8182  0020D4  0100               	movlb	0	; () banked
  8183  0020D6  51AD               	movf	lcdInst@data& (0+255),w,b
  8184  0020D8  EC4D  F00B         	call	_lcdNibble
  8185  0020DC  0012               	return		;funcret
  8186  0020DE                     __end_of_lcdInst:
  8187                           	opt stack 0
  8188                           tosu	equ	0xFFF
  8189                           tosh	equ	0xFFE
  8190                           tosl	equ	0xFFD
  8191                           pclath	equ	0xFFA
  8192                           tblptru	equ	0xFF8
  8193                           tblptrh	equ	0xFF7
  8194                           tblptrl	equ	0xFF6
  8195                           tablat	equ	0xFF5
  8196                           prodh	equ	0xFF4
  8197                           prodl	equ	0xFF3
  8198                           intcon	equ	0xFF2
  8199                           intcon2	equ	0xFF1
  8200                           intcon3	equ	0xFF0
  8201                           postinc0	equ	0xFEE
  8202                           wreg	equ	0xFE8
  8203                           indf2	equ	0xFDF
  8204                           postinc2	equ	0xFDE
  8205                           postdec2	equ	0xFDD
  8206                           fsr2h	equ	0xFDA
  8207                           fsr2l	equ	0xFD9
  8208                           status	equ	0xFD8
  8209                           
  8210 ;; *************** function _lcdNibble *****************
  8211 ;; Defined at:
  8212 ;;		line 47 in file "lcd.c"
  8213 ;; Parameters:    Size  Location     Type
  8214 ;;  data            1    wreg     unsigned char 
  8215 ;; Auto vars:     Size  Location     Type
  8216 ;;  data            1    1[BANK0 ] unsigned char 
  8217 ;;  temp            1    0[BANK0 ] unsigned char 
  8218 ;; Return value:  Size  Location     Type
  8219 ;;                  1    wreg      void 
  8220 ;; Registers used:
  8221 ;;		wreg, status,2, status,0
  8222 ;; Tracked objects:
  8223 ;;		On entry : 0/0
  8224 ;;		On exit  : 0/0
  8225 ;;		Unchanged: 0/0
  8226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8228 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8230 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8231 ;;Total ram usage:        2 bytes
  8232 ;; Hardware stack levels used:    1
  8233 ;; Hardware stack levels required when called:    5
  8234 ;; This function calls:
  8235 ;;		Nothing
  8236 ;; This function is called by:
  8237 ;;		_lcdInst
  8238 ;;		_putch
  8239 ;; This function uses a non-reentrant model
  8240 ;;
  8241                           
  8242                           	psect	text54
  8243  00169A                     __ptext54:
  8244                           	opt stack 0
  8245  00169A                     _lcdNibble:
  8246                           	opt stack 21
  8247                           
  8248                           ;incstack = 0
  8249                           ;lcdNibble@data stored from wreg
  8250  00169A  0100               	movlb	0	; () banked
  8251  00169C  6FAC               	movwf	lcdNibble@data& (0+255),b
  8252                           
  8253                           ;lcd.c: 49: char temp = data & 0xF0;
  8254  00169E  0100               	movlb	0	; () banked
  8255  0016A0  51AC               	movf	lcdNibble@data& (0+255),w,b
  8256  0016A2  0BF0               	andlw	240
  8257  0016A4  0100               	movlb	0	; () banked
  8258  0016A6  6FAB               	movwf	lcdNibble@temp& (0+255),b
  8259                           
  8260                           ;lcd.c: 50: LATD = LATD & 0x0F;
  8261  0016A8  508C               	movf	3980,w,c	;volatile
  8262  0016AA  0B0F               	andlw	15
  8263  0016AC  6E8C               	movwf	3980,c	;volatile
  8264                           
  8265                           ;lcd.c: 51: LATD = temp | LATD;
  8266  0016AE  0100               	movlb	0	; () banked
  8267  0016B0  51AB               	movf	lcdNibble@temp& (0+255),w,b
  8268  0016B2  108C               	iorwf	3980,w,c	;volatile
  8269  0016B4  6E8C               	movwf	3980,c	;volatile
  8270                           
  8271                           ; BSR set to: 0
  8272                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  8273  0016B6  968C               	bcf	3980,3,c	;volatile
  8274                           
  8275                           ; BSR set to: 0
  8276                           ;lcd.c: 54: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8277  0016B8  0E14               	movlw	20
  8278  0016BA                     u5057:
  8279  0016BA  2EE8               	decfsz	wreg,f,c
  8280  0016BC  D7FE               	bra	u5057
  8281  0016BE  D000               	nop2	
  8282                           
  8283                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  8284  0016C0  868C               	bsf	3980,3,c	;volatile
  8285                           
  8286                           ;lcd.c: 56: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8287  0016C2  0E14               	movlw	20
  8288  0016C4                     u5067:
  8289  0016C4  2EE8               	decfsz	wreg,f,c
  8290  0016C6  D7FE               	bra	u5067
  8291  0016C8  D000               	nop2	
  8292                           
  8293                           ;lcd.c: 58: data = data << 4;
  8294  0016CA  0100               	movlb	0	; () banked
  8295  0016CC  39AC               	swapf	lcdNibble@data& (0+255),w,b
  8296  0016CE  0BF0               	andlw	240
  8297  0016D0  0100               	movlb	0	; () banked
  8298  0016D2  6FAC               	movwf	lcdNibble@data& (0+255),b
  8299                           
  8300                           ;lcd.c: 60: temp = data & 0xF0;
  8301  0016D4  0100               	movlb	0	; () banked
  8302  0016D6  51AC               	movf	lcdNibble@data& (0+255),w,b
  8303  0016D8  0BF0               	andlw	240
  8304  0016DA  0100               	movlb	0	; () banked
  8305  0016DC  6FAB               	movwf	lcdNibble@temp& (0+255),b
  8306                           
  8307                           ;lcd.c: 61: LATD = LATD & 0x0F;
  8308  0016DE  508C               	movf	3980,w,c	;volatile
  8309  0016E0  0B0F               	andlw	15
  8310  0016E2  6E8C               	movwf	3980,c	;volatile
  8311                           
  8312                           ;lcd.c: 62: LATD = temp | LATD;
  8313  0016E4  0100               	movlb	0	; () banked
  8314  0016E6  51AB               	movf	lcdNibble@temp& (0+255),w,b
  8315  0016E8  108C               	iorwf	3980,w,c	;volatile
  8316  0016EA  6E8C               	movwf	3980,c	;volatile
  8317                           
  8318                           ; BSR set to: 0
  8319                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  8320  0016EC  968C               	bcf	3980,3,c	;volatile
  8321                           
  8322                           ; BSR set to: 0
  8323                           ;lcd.c: 65: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8324  0016EE  0E14               	movlw	20
  8325  0016F0                     u5077:
  8326  0016F0  2EE8               	decfsz	wreg,f,c
  8327  0016F2  D7FE               	bra	u5077
  8328  0016F4  D000               	nop2	
  8329                           
  8330                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  8331  0016F6  868C               	bsf	3980,3,c	;volatile
  8332                           
  8333                           ;lcd.c: 67: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8334  0016F8  0E14               	movlw	20
  8335  0016FA                     u5087:
  8336  0016FA  2EE8               	decfsz	wreg,f,c
  8337  0016FC  D7FE               	bra	u5087
  8338  0016FE  D000               	nop2	
  8339  001700  0012               	return		;funcret
  8340  001702                     __end_of_lcdNibble:
  8341                           	opt stack 0
  8342                           tosu	equ	0xFFF
  8343                           tosh	equ	0xFFE
  8344                           tosl	equ	0xFFD
  8345                           pclath	equ	0xFFA
  8346                           tblptru	equ	0xFF8
  8347                           tblptrh	equ	0xFF7
  8348                           tblptrl	equ	0xFF6
  8349                           tablat	equ	0xFF5
  8350                           prodh	equ	0xFF4
  8351                           prodl	equ	0xFF3
  8352                           intcon	equ	0xFF2
  8353                           intcon2	equ	0xFF1
  8354                           intcon3	equ	0xFF0
  8355                           postinc0	equ	0xFEE
  8356                           wreg	equ	0xFE8
  8357                           indf2	equ	0xFDF
  8358                           postinc2	equ	0xFDE
  8359                           postdec2	equ	0xFDD
  8360                           fsr2h	equ	0xFDA
  8361                           fsr2l	equ	0xFD9
  8362                           status	equ	0xFD8
  8363                           
  8364 ;; *************** function _I2C_Master_Init *****************
  8365 ;; Defined at:
  8366 ;;		line 27 in file "I2C.c"
  8367 ;; Parameters:    Size  Location     Type
  8368 ;;  c               4   13[BANK0 ] const unsigned long 
  8369 ;; Auto vars:     Size  Location     Type
  8370 ;;		None
  8371 ;; Return value:  Size  Location     Type
  8372 ;;                  1    wreg      void 
  8373 ;; Registers used:
  8374 ;;		wreg, status,2, status,0, cstack
  8375 ;; Tracked objects:
  8376 ;;		On entry : 0/0
  8377 ;;		On exit  : 0/0
  8378 ;;		Unchanged: 0/0
  8379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8380 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8382 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8383 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8384 ;;Total ram usage:        8 bytes
  8385 ;; Hardware stack levels used:    1
  8386 ;; Hardware stack levels required when called:    6
  8387 ;; This function calls:
  8388 ;;		___lldiv
  8389 ;; This function is called by:
  8390 ;;		_main
  8391 ;; This function uses a non-reentrant model
  8392 ;;
  8393                           
  8394                           	psect	text55
  8395  0017C6                     __ptext55:
  8396                           	opt stack 0
  8397  0017C6                     _I2C_Master_Init:
  8398                           	opt stack 24
  8399                           
  8400                           ;I2C.c: 30: SSPSTAT = 0b00000000;
  8401                           
  8402                           ;incstack = 0
  8403  0017C6  0E00               	movlw	0
  8404  0017C8  6EC7               	movwf	4039,c	;volatile
  8405                           
  8406                           ;I2C.c: 31: SSPCON1 = 0b00101000;
  8407  0017CA  0E28               	movlw	40
  8408  0017CC  6EC6               	movwf	4038,c	;volatile
  8409                           
  8410                           ;I2C.c: 32: SSPCON2 = 0b00000000;
  8411  0017CE  0E00               	movlw	0
  8412  0017D0  6EC5               	movwf	4037,c	;volatile
  8413                           
  8414                           ;I2C.c: 33: SSPADD = (10000000/(4*c))-1;
  8415  0017D2  0E80               	movlw	128
  8416  0017D4  0100               	movlb	0	; () banked
  8417  0017D6  6FAB               	movwf	___lldiv@dividend& (0+255),b
  8418  0017D8  0E96               	movlw	150
  8419  0017DA  6FAC               	movwf	(___lldiv@dividend+1)& (0+255),b
  8420  0017DC  0E98               	movlw	152
  8421  0017DE  6FAD               	movwf	(___lldiv@dividend+2)& (0+255),b
  8422  0017E0  0E00               	movlw	0
  8423  0017E2  6FAE               	movwf	(___lldiv@dividend+3)& (0+255),b
  8424  0017E4  C0B8  F0BC         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  8425  0017E8  C0B9  F0BD         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  8426  0017EC  C0BA  F0BE         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  8427  0017F0  C0BB  F0BF         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  8428  0017F4  0E02               	movlw	2
  8429  0017F6                     u4355:
  8430  0017F6  90D8               	bcf	status,0,c
  8431  0017F8  0100               	movlb	0	; () banked
  8432  0017FA  37BC               	rlcf	??_I2C_Master_Init& (0+255),f,b
  8433  0017FC  37BD               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  8434  0017FE  37BE               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  8435  001800  37BF               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  8436  001802  2EE8               	decfsz	wreg,f,c
  8437  001804  D7F8               	goto	u4355
  8438  001806  C0BC  F0AF         	movff	??_I2C_Master_Init,___lldiv@divisor
  8439  00180A  C0BD  F0B0         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  8440  00180E  C0BE  F0B1         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  8441  001812  C0BF  F0B2         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  8442  001816  ECBE  F009         	call	___lldiv	;wreg free
  8443  00181A  0100               	movlb	0	; () banked
  8444  00181C  05AB               	decf	?___lldiv& (0+255),w,b
  8445  00181E  6EC8               	movwf	4040,c	;volatile
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;I2C.c: 34: TRISC3 = 1;
  8449  001820  8694               	bsf	3988,3,c	;volatile
  8450                           
  8451                           ; BSR set to: 0
  8452                           ;I2C.c: 35: TRISC4 = 1;
  8453  001822  8894               	bsf	3988,4,c	;volatile
  8454                           
  8455                           ; BSR set to: 0
  8456  001824  0012               	return		;funcret
  8457  001826                     __end_of_I2C_Master_Init:
  8458                           	opt stack 0
  8459                           tosu	equ	0xFFF
  8460                           tosh	equ	0xFFE
  8461                           tosl	equ	0xFFD
  8462                           pclath	equ	0xFFA
  8463                           tblptru	equ	0xFF8
  8464                           tblptrh	equ	0xFF7
  8465                           tblptrl	equ	0xFF6
  8466                           tablat	equ	0xFF5
  8467                           prodh	equ	0xFF4
  8468                           prodl	equ	0xFF3
  8469                           intcon	equ	0xFF2
  8470                           intcon2	equ	0xFF1
  8471                           intcon3	equ	0xFF0
  8472                           postinc0	equ	0xFEE
  8473                           wreg	equ	0xFE8
  8474                           indf2	equ	0xFDF
  8475                           postinc2	equ	0xFDE
  8476                           postdec2	equ	0xFDD
  8477                           fsr2h	equ	0xFDA
  8478                           fsr2l	equ	0xFD9
  8479                           status	equ	0xFD8
  8480                           
  8481 ;; *************** function ___lldiv *****************
  8482 ;; Defined at:
  8483 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lldiv.c"
  8484 ;; Parameters:    Size  Location     Type
  8485 ;;  dividend        4    0[BANK0 ] unsigned long 
  8486 ;;  divisor         4    4[BANK0 ] unsigned long 
  8487 ;; Auto vars:     Size  Location     Type
  8488 ;;  quotient        4    8[BANK0 ] unsigned long 
  8489 ;;  counter         1   12[BANK0 ] unsigned char 
  8490 ;; Return value:  Size  Location     Type
  8491 ;;                  4    0[BANK0 ] unsigned long 
  8492 ;; Registers used:
  8493 ;;		wreg, status,2, status,0
  8494 ;; Tracked objects:
  8495 ;;		On entry : 0/0
  8496 ;;		On exit  : 0/0
  8497 ;;		Unchanged: 0/0
  8498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8499 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8500 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8502 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8503 ;;Total ram usage:       13 bytes
  8504 ;; Hardware stack levels used:    1
  8505 ;; Hardware stack levels required when called:    5
  8506 ;; This function calls:
  8507 ;;		Nothing
  8508 ;; This function is called by:
  8509 ;;		_I2C_Master_Init
  8510 ;; This function uses a non-reentrant model
  8511 ;;
  8512                           
  8513                           	psect	text56
  8514  00137C                     __ptext56:
  8515                           	opt stack 0
  8516  00137C                     ___lldiv:
  8517                           	opt stack 24
  8518                           
  8519                           ; BSR set to: 0
  8520                           ;incstack = 0
  8521  00137C  0E00               	movlw	0
  8522  00137E  0100               	movlb	0	; () banked
  8523  001380  6FB3               	movwf	___lldiv@quotient& (0+255),b
  8524  001382  0E00               	movlw	0
  8525  001384  6FB4               	movwf	(___lldiv@quotient+1)& (0+255),b
  8526  001386  0E00               	movlw	0
  8527  001388  6FB5               	movwf	(___lldiv@quotient+2)& (0+255),b
  8528  00138A  0E00               	movlw	0
  8529  00138C  6FB6               	movwf	(___lldiv@quotient+3)& (0+255),b
  8530                           
  8531                           ; BSR set to: 0
  8532  00138E  0100               	movlb	0	; () banked
  8533  001390  51AF               	movf	___lldiv@divisor& (0+255),w,b
  8534  001392  0100               	movlb	0	; () banked
  8535  001394  11B0               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  8536  001396  0100               	movlb	0	; () banked
  8537  001398  11B1               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  8538  00139A  0100               	movlb	0	; () banked
  8539  00139C  11B2               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  8540  00139E  B4D8               	btfsc	status,2,c
  8541  0013A0  D042               	goto	l1158
  8542                           
  8543                           ; BSR set to: 0
  8544  0013A2  0E01               	movlw	1
  8545  0013A4  0100               	movlb	0	; () banked
  8546  0013A6  6FB7               	movwf	___lldiv@counter& (0+255),b
  8547  0013A8  D008               	goto	l5300
  8548  0013AA                     l5298:
  8549                           
  8550                           ; BSR set to: 0
  8551  0013AA  0100               	movlb	0	; () banked
  8552  0013AC  90D8               	bcf	status,0,c
  8553  0013AE  37AF               	rlcf	___lldiv@divisor& (0+255),f,b
  8554  0013B0  37B0               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  8555  0013B2  37B1               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  8556  0013B4  37B2               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  8557  0013B6  0100               	movlb	0	; () banked
  8558  0013B8  2BB7               	incf	___lldiv@counter& (0+255),f,b
  8559  0013BA                     l5300:
  8560                           
  8561                           ; BSR set to: 0
  8562  0013BA  0100               	movlb	0	; () banked
  8563  0013BC  AFB2               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  8564  0013BE  D7F5               	goto	l5298
  8565  0013C0                     l5302:
  8566                           
  8567                           ; BSR set to: 0
  8568  0013C0  0100               	movlb	0	; () banked
  8569  0013C2  90D8               	bcf	status,0,c
  8570  0013C4  37B3               	rlcf	___lldiv@quotient& (0+255),f,b
  8571  0013C6  37B4               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8572  0013C8  37B5               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8573  0013CA  37B6               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8574                           
  8575                           ; BSR set to: 0
  8576  0013CC  0100               	movlb	0	; () banked
  8577  0013CE  51AF               	movf	___lldiv@divisor& (0+255),w,b
  8578  0013D0  0100               	movlb	0	; () banked
  8579  0013D2  5DAB               	subwf	___lldiv@dividend& (0+255),w,b
  8580  0013D4  0100               	movlb	0	; () banked
  8581  0013D6  51B0               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8582  0013D8  0100               	movlb	0	; () banked
  8583  0013DA  59AC               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8584  0013DC  0100               	movlb	0	; () banked
  8585  0013DE  51B1               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8586  0013E0  0100               	movlb	0	; () banked
  8587  0013E2  59AD               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8588  0013E4  0100               	movlb	0	; () banked
  8589  0013E6  51B2               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8590  0013E8  0100               	movlb	0	; () banked
  8591  0013EA  59AE               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8592  0013EC  A0D8               	btfss	status,0,c
  8593  0013EE  D012               	goto	l5310
  8594                           
  8595                           ; BSR set to: 0
  8596  0013F0  0100               	movlb	0	; () banked
  8597  0013F2  51AF               	movf	___lldiv@divisor& (0+255),w,b
  8598  0013F4  0100               	movlb	0	; () banked
  8599  0013F6  5FAB               	subwf	___lldiv@dividend& (0+255),f,b
  8600  0013F8  0100               	movlb	0	; () banked
  8601  0013FA  51B0               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8602  0013FC  0100               	movlb	0	; () banked
  8603  0013FE  5BAC               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8604  001400  0100               	movlb	0	; () banked
  8605  001402  51B1               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8606  001404  0100               	movlb	0	; () banked
  8607  001406  5BAD               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8608  001408  0100               	movlb	0	; () banked
  8609  00140A  51B2               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8610  00140C  0100               	movlb	0	; () banked
  8611  00140E  5BAE               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8612                           
  8613                           ; BSR set to: 0
  8614  001410  0100               	movlb	0	; () banked
  8615  001412  81B3               	bsf	___lldiv@quotient& (0+255),0,b
  8616  001414                     l5310:
  8617                           
  8618                           ; BSR set to: 0
  8619  001414  0100               	movlb	0	; () banked
  8620  001416  90D8               	bcf	status,0,c
  8621  001418  33B2               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8622  00141A  33B1               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8623  00141C  33B0               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8624  00141E  33AF               	rrcf	___lldiv@divisor& (0+255),f,b
  8625                           
  8626                           ; BSR set to: 0
  8627  001420  0100               	movlb	0	; () banked
  8628  001422  2FB7               	decfsz	___lldiv@counter& (0+255),f,b
  8629  001424  D7CD               	goto	l5302
  8630  001426                     l1158:
  8631                           
  8632                           ; BSR set to: 0
  8633  001426  C0B3  F0AB         	movff	___lldiv@quotient,?___lldiv
  8634  00142A  C0B4  F0AC         	movff	___lldiv@quotient+1,?___lldiv+1
  8635  00142E  C0B5  F0AD         	movff	___lldiv@quotient+2,?___lldiv+2
  8636  001432  C0B6  F0AE         	movff	___lldiv@quotient+3,?___lldiv+3
  8637                           
  8638                           ; BSR set to: 0
  8639  001436  0012               	return		;funcret
  8640  001438                     __end_of___lldiv:
  8641                           	opt stack 0
  8642                           tosu	equ	0xFFF
  8643                           tosh	equ	0xFFE
  8644                           tosl	equ	0xFFD
  8645                           pclath	equ	0xFFA
  8646                           tblptru	equ	0xFF8
  8647                           tblptrh	equ	0xFF7
  8648                           tblptrl	equ	0xFF6
  8649                           tablat	equ	0xFF5
  8650                           prodh	equ	0xFF4
  8651                           prodl	equ	0xFF3
  8652                           intcon	equ	0xFF2
  8653                           intcon2	equ	0xFF1
  8654                           intcon3	equ	0xFF0
  8655                           postinc0	equ	0xFEE
  8656                           wreg	equ	0xFE8
  8657                           indf2	equ	0xFDF
  8658                           postinc2	equ	0xFDE
  8659                           postdec2	equ	0xFDD
  8660                           fsr2h	equ	0xFDA
  8661                           fsr2l	equ	0xFD9
  8662                           status	equ	0xFD8
  8663                           
  8664 ;; *************** function _keypressed *****************
  8665 ;; Defined at:
  8666 ;;		line 27 in file "Interrupt_ISR.c"
  8667 ;; Parameters:    Size  Location     Type
  8668 ;;		None
  8669 ;; Auto vars:     Size  Location     Type
  8670 ;;  i               1   60[COMRAM] unsigned char 
  8671 ;;  i               1   59[COMRAM] unsigned char 
  8672 ;;  i               1   58[COMRAM] unsigned char 
  8673 ;;  i               1   57[COMRAM] unsigned char 
  8674 ;;  i               1   56[COMRAM] unsigned char 
  8675 ;;  i               1   55[COMRAM] unsigned char 
  8676 ;;  i               1   54[COMRAM] unsigned char 
  8677 ;;  i               1   53[COMRAM] unsigned char 
  8678 ;;  i               1   52[COMRAM] unsigned char 
  8679 ;;  i               1   51[COMRAM] unsigned char 
  8680 ;;  i               1   50[COMRAM] unsigned char 
  8681 ;;  i               1   49[COMRAM] unsigned char 
  8682 ;;  keypress_tem    1   61[COMRAM] unsigned char 
  8683 ;;  keypress        1   48[COMRAM] unsigned char 
  8684 ;; Return value:  Size  Location     Type
  8685 ;;                  1    wreg      void 
  8686 ;; Registers used:
  8687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8688 ;; Tracked objects:
  8689 ;;		On entry : 0/0
  8690 ;;		On exit  : 0/0
  8691 ;;		Unchanged: 0/0
  8692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8694 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8695 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8696 ;;      Totals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8697 ;;Total ram usage:       30 bytes
  8698 ;; Hardware stack levels used:    1
  8699 ;; Hardware stack levels required when called:    4
  8700 ;; This function calls:
  8701 ;;		_op_time
  8702 ;;		_pop_results
  8703 ;;		_tin_results
  8704 ;;		_tot_sorted
  8705 ;;		i2_initLCD
  8706 ;;		i2_lcdInst
  8707 ;;		i2_printf
  8708 ;; This function is called by:
  8709 ;;		Interrupt level 2
  8710 ;; This function uses a non-reentrant model
  8711 ;;
  8712                           
  8713                           	psect	intcode
  8714  000008                     __pintcode:
  8715                           	opt stack 0
  8716  000008                     _keypressed:
  8717                           	opt stack 21
  8718                           
  8719                           ; BSR set to: 0
  8720                           ;incstack = 0
  8721  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8722  00000A  ED93  F003         	call	int_func,f	;refresh shadow registers
  8723                           tosu	equ	0xFFF
  8724                           tosh	equ	0xFFE
  8725                           tosl	equ	0xFFD
  8726                           pclath	equ	0xFFA
  8727                           tblptru	equ	0xFF8
  8728                           tblptrh	equ	0xFF7
  8729                           tblptrl	equ	0xFF6
  8730                           tablat	equ	0xFF5
  8731                           prodh	equ	0xFF4
  8732                           prodl	equ	0xFF3
  8733                           intcon	equ	0xFF2
  8734                           intcon2	equ	0xFF1
  8735                           intcon3	equ	0xFF0
  8736                           postinc0	equ	0xFEE
  8737                           wreg	equ	0xFE8
  8738                           indf2	equ	0xFDF
  8739                           postinc2	equ	0xFDE
  8740                           postdec2	equ	0xFDD
  8741                           fsr2h	equ	0xFDA
  8742                           fsr2l	equ	0xFD9
  8743                           status	equ	0xFD8
  8744                           
  8745                           	psect	intcode_body
  8746  000726                     __pintcode_body:
  8747                           	opt stack 21
  8748  000726                     int_func:
  8749                           	opt stack 21
  8750  000726  0006               	pop		; remove dummy address from shadow register refresh
  8751  000728  CFFA F023          	movff	pclath,??_keypressed+2
  8752  00072C  CFFB F024          	movff	pclatu,??_keypressed+3
  8753  000730  CFE9 F025          	movff	fsr0l,??_keypressed+4
  8754  000734  CFEA F026          	movff	fsr0h,??_keypressed+5
  8755  000738  CFE1 F027          	movff	fsr1l,??_keypressed+6
  8756  00073C  CFE2 F028          	movff	fsr1h,??_keypressed+7
  8757  000740  CFD9 F029          	movff	fsr2l,??_keypressed+8
  8758  000744  CFDA F02A          	movff	fsr2h,??_keypressed+9
  8759  000748  CFF3 F02B          	movff	prodl,??_keypressed+10
  8760  00074C  CFF4 F02C          	movff	prodh,??_keypressed+11
  8761  000750  CFF6 F02D          	movff	tblptrl,??_keypressed+12
  8762  000754  CFF7 F02E          	movff	tblptrh,??_keypressed+13
  8763  000758  CFF8 F02F          	movff	tblptru,??_keypressed+14
  8764  00075C  CFF5 F030          	movff	tablat,??_keypressed+15
  8765                           
  8766                           ;Interrupt_ISR.c: 35: if(INT1IF){
  8767  000760  A0F0               	btfss	intcon3,0,c	;volatile
  8768  000762  D12F               	goto	i2l243
  8769                           
  8770                           ;Interrupt_ISR.c: 36: lcdInst(0b11000000);;
  8771  000764  0EC0               	movlw	192
  8772  000766  EC91  F010         	call	i2_lcdInst
  8773                           
  8774                           ;Interrupt_ISR.c: 37: unsigned char keypress = (PORTB & 0xF0) >> 4;
  8775  00076A  3881               	swapf	3969,w,c	;volatile
  8776  00076C  0B0F               	andlw	15
  8777  00076E  0B0F               	andlw	15
  8778  000770  6E31               	movwf	keypressed@keypress,c
  8779                           
  8780                           ;Interrupt_ISR.c: 39: unsigned char keypress_temp = keys[keypress];
  8781  000772  5031               	movf	keypressed@keypress,w,c
  8782  000774  0D01               	mullw	1
  8783  000776  0EEB               	movlw	low _keys
  8784  000778  24F3               	addwf	prodl,w,c
  8785  00077A  6EF6               	movwf	tblptrl,c
  8786  00077C  0EFE               	movlw	high _keys
  8787  00077E  20F4               	addwfc	prodh,w,c
  8788  000780  6EF7               	movwf	tblptrh,c
  8789  000782                     	if	1	;There are 3 active tblptr bytes
  8790  000782  6AF8               	clrf	tblptru,c
  8791  000784  0E00               	movlw	low (__mediumconst shr (0+16))
  8792  000786  22F8               	addwfc	tblptru,f,c
  8793  000788                     	endif
  8794  000788  0008               	tblrd		*
  8795  00078A  CFF5 F03E          	movff	tablat,keypressed@keypress_temp
  8796                           
  8797                           ;Interrupt_ISR.c: 40: if (keypress_temp == 0b01000001){
  8798  00078E  0E41               	movlw	65
  8799  000790  183E               	xorwf	keypressed@keypress_temp,w,c
  8800  000792  A4D8               	btfss	status,2,c
  8801  000794  D03E               	goto	i2l4356
  8802                           
  8803                           ;Interrupt_ISR.c: 41: tot_sorted();
  8804  000796  EC17  F010         	call	_tot_sorted	;wreg free
  8805                           
  8806                           ;Interrupt_ISR.c: 43: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  8807  00079A  0E00               	movlw	0
  8808  00079C  6E32               	movwf	keypressed@i,c
  8809  00079E                     i2l4328:
  8810  00079E  0E09               	movlw	9
  8811  0007A0  6432               	cpfsgt	keypressed@i,c
  8812  0007A2  D001               	goto	i2l4332
  8813  0007A4  D00E               	goto	i2l4336
  8814  0007A6                     i2l4332:
  8815  0007A6  0E02               	movlw	2
  8816  0007A8  6E22               	movwf	(??_keypressed+1)& (0+255),c
  8817  0007AA  0E3F               	movlw	63
  8818  0007AC  6E21               	movwf	??_keypressed& (0+255),c
  8819  0007AE  0E2B               	movlw	43
  8820  0007B0                     i2u509_47:
  8821  0007B0  2EE8               	decfsz	wreg,f,c
  8822  0007B2  D7FE               	bra	i2u509_47
  8823  0007B4  2E21               	decfsz	??_keypressed& (0+255),f,c
  8824  0007B6  D7FC               	bra	i2u509_47
  8825  0007B8  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  8826  0007BA  D7FA               	bra	i2u509_47
  8827  0007BC  F000               	nop	
  8828  0007BE  2A32               	incf	keypressed@i,f,c
  8829  0007C0  D7EE               	goto	i2l4328
  8830  0007C2                     i2l4336:
  8831                           
  8832                           ;Interrupt_ISR.c: 44: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  8833  0007C2  0E00               	movlw	0
  8834  0007C4  6E33               	movwf	keypressed@i_436,c
  8835  0007C6                     i2l4338:
  8836  0007C6  0E09               	movlw	9
  8837  0007C8  6433               	cpfsgt	keypressed@i_436,c
  8838  0007CA  D001               	goto	i2l4342
  8839  0007CC  D00E               	goto	i2l4346
  8840  0007CE                     i2l4342:
  8841  0007CE  0E02               	movlw	2
  8842  0007D0  6E22               	movwf	(??_keypressed+1)& (0+255),c
  8843  0007D2  0E3F               	movlw	63
  8844  0007D4  6E21               	movwf	??_keypressed& (0+255),c
  8845  0007D6  0E2B               	movlw	43
  8846  0007D8                     i2u510_47:
  8847  0007D8  2EE8               	decfsz	wreg,f,c
  8848  0007DA  D7FE               	bra	i2u510_47
  8849  0007DC  2E21               	decfsz	??_keypressed& (0+255),f,c
  8850  0007DE  D7FC               	bra	i2u510_47
  8851  0007E0  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  8852  0007E2  D7FA               	bra	i2u510_47
  8853  0007E4  F000               	nop	
  8854  0007E6  2A33               	incf	keypressed@i_436,f,c
  8855  0007E8  D7EE               	goto	i2l4338
  8856  0007EA                     i2l4346:
  8857                           
  8858                           ;Interrupt_ISR.c: 45: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  8859  0007EA  0E00               	movlw	0
  8860  0007EC  6E34               	movwf	keypressed@i_437,c
  8861  0007EE                     i2l4348:
  8862  0007EE  0E09               	movlw	9
  8863  0007F0  6434               	cpfsgt	keypressed@i_437,c
  8864  0007F2  D001               	goto	i2l4352
  8865  0007F4  D0E2               	goto	i2l4466
  8866  0007F6                     i2l4352:
  8867  0007F6  0E02               	movlw	2
  8868  0007F8  6E22               	movwf	(??_keypressed+1)& (0+255),c
  8869  0007FA  0E3F               	movlw	63
  8870  0007FC  6E21               	movwf	??_keypressed& (0+255),c
  8871  0007FE  0E2B               	movlw	43
  8872  000800                     i2u511_47:
  8873  000800  2EE8               	decfsz	wreg,f,c
  8874  000802  D7FE               	bra	i2u511_47
  8875  000804  2E21               	decfsz	??_keypressed& (0+255),f,c
  8876  000806  D7FC               	bra	i2u511_47
  8877  000808  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  8878  00080A  D7FA               	bra	i2u511_47
  8879  00080C  F000               	nop	
  8880  00080E  2A34               	incf	keypressed@i_437,f,c
  8881  000810  D7EE               	goto	i2l4348
  8882  000812                     i2l4356:
  8883                           
  8884                           ;Interrupt_ISR.c: 47: else if(keypress_temp == 0b01000010){
  8885  000812  0E42               	movlw	66
  8886  000814  183E               	xorwf	keypressed@keypress_temp,w,c
  8887  000816  A4D8               	btfss	status,2,c
  8888  000818  D03E               	goto	i2l4390
  8889                           
  8890                           ;Interrupt_ISR.c: 48: pop_results();
  8891  00081A  EC2B  F00E         	call	_pop_results	;wreg free
  8892                           
  8893                           ;Interrupt_ISR.c: 50: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  8894  00081E  0E00               	movlw	0
  8895  000820  6E35               	movwf	keypressed@i_438,c
  8896  000822                     i2l4362:
  8897  000822  0E09               	movlw	9
  8898  000824  6435               	cpfsgt	keypressed@i_438,c
  8899  000826  D001               	goto	i2l4366
  8900  000828  D00E               	goto	i2l4370
  8901  00082A                     i2l4366:
  8902  00082A  0E02               	movlw	2
  8903  00082C  6E22               	movwf	(??_keypressed+1)& (0+255),c
  8904  00082E  0E3F               	movlw	63
  8905  000830  6E21               	movwf	??_keypressed& (0+255),c
  8906  000832  0E2B               	movlw	43
  8907  000834                     i2u512_47:
  8908  000834  2EE8               	decfsz	wreg,f,c
  8909  000836  D7FE               	bra	i2u512_47
  8910  000838  2E21               	decfsz	??_keypressed& (0+255),f,c
  8911  00083A  D7FC               	bra	i2u512_47
  8912  00083C  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  8913  00083E  D7FA               	bra	i2u512_47
  8914  000840  F000               	nop	
  8915  000842  2A35               	incf	keypressed@i_438,f,c
  8916  000844  D7EE               	goto	i2l4362
  8917  000846                     i2l4370:
  8918                           
  8919                           ;Interrupt_ISR.c: 51: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  8920  000846  0E00               	movlw	0
  8921  000848  6E36               	movwf	keypressed@i_439,c
  8922  00084A                     i2l4372:
  8923  00084A  0E09               	movlw	9
  8924  00084C  6436               	cpfsgt	keypressed@i_439,c
  8925  00084E  D001               	goto	i2l4376
  8926  000850  D00E               	goto	i2l4380
  8927  000852                     i2l4376:
  8928  000852  0E02               	movlw	2
  8929  000854  6E22               	movwf	(??_keypressed+1)& (0+255),c
  8930  000856  0E3F               	movlw	63
  8931  000858  6E21               	movwf	??_keypressed& (0+255),c
  8932  00085A  0E2B               	movlw	43
  8933  00085C                     i2u513_47:
  8934  00085C  2EE8               	decfsz	wreg,f,c
  8935  00085E  D7FE               	bra	i2u513_47
  8936  000860  2E21               	decfsz	??_keypressed& (0+255),f,c
  8937  000862  D7FC               	bra	i2u513_47
  8938  000864  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  8939  000866  D7FA               	bra	i2u513_47
  8940  000868  F000               	nop	
  8941  00086A  2A36               	incf	keypressed@i_439,f,c
  8942  00086C  D7EE               	goto	i2l4372
  8943  00086E                     i2l4380:
  8944                           
  8945                           ;Interrupt_ISR.c: 52: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  8946  00086E  0E00               	movlw	0
  8947  000870  6E37               	movwf	keypressed@i_440,c
  8948  000872                     i2l4382:
  8949  000872  0E09               	movlw	9
  8950  000874  6437               	cpfsgt	keypressed@i_440,c
  8951  000876  D001               	goto	i2l4386
  8952  000878  D0A0               	goto	i2l4466
  8953  00087A                     i2l4386:
  8954  00087A  0E02               	movlw	2
  8955  00087C  6E22               	movwf	(??_keypressed+1)& (0+255),c
  8956  00087E  0E3F               	movlw	63
  8957  000880  6E21               	movwf	??_keypressed& (0+255),c
  8958  000882  0E2B               	movlw	43
  8959  000884                     i2u514_47:
  8960  000884  2EE8               	decfsz	wreg,f,c
  8961  000886  D7FE               	bra	i2u514_47
  8962  000888  2E21               	decfsz	??_keypressed& (0+255),f,c
  8963  00088A  D7FC               	bra	i2u514_47
  8964  00088C  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  8965  00088E  D7FA               	bra	i2u514_47
  8966  000890  F000               	nop	
  8967  000892  2A37               	incf	keypressed@i_440,f,c
  8968  000894  D7EE               	goto	i2l4382
  8969  000896                     i2l4390:
  8970                           
  8971                           ;Interrupt_ISR.c: 54: else if(keypress_temp == 0b01000011){
  8972  000896  0E43               	movlw	67
  8973  000898  183E               	xorwf	keypressed@keypress_temp,w,c
  8974  00089A  A4D8               	btfss	status,2,c
  8975  00089C  D03E               	goto	i2l4424
  8976                           
  8977                           ;Interrupt_ISR.c: 55: tin_results();
  8978  00089E  EC0E  F00E         	call	_tin_results	;wreg free
  8979                           
  8980                           ;Interrupt_ISR.c: 57: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  8981  0008A2  0E00               	movlw	0
  8982  0008A4  6E38               	movwf	keypressed@i_441,c
  8983  0008A6                     i2l4396:
  8984  0008A6  0E09               	movlw	9
  8985  0008A8  6438               	cpfsgt	keypressed@i_441,c
  8986  0008AA  D001               	goto	i2l4400
  8987  0008AC  D00E               	goto	i2l4404
  8988  0008AE                     i2l4400:
  8989  0008AE  0E02               	movlw	2
  8990  0008B0  6E22               	movwf	(??_keypressed+1)& (0+255),c
  8991  0008B2  0E3F               	movlw	63
  8992  0008B4  6E21               	movwf	??_keypressed& (0+255),c
  8993  0008B6  0E2B               	movlw	43
  8994  0008B8                     i2u515_47:
  8995  0008B8  2EE8               	decfsz	wreg,f,c
  8996  0008BA  D7FE               	bra	i2u515_47
  8997  0008BC  2E21               	decfsz	??_keypressed& (0+255),f,c
  8998  0008BE  D7FC               	bra	i2u515_47
  8999  0008C0  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  9000  0008C2  D7FA               	bra	i2u515_47
  9001  0008C4  F000               	nop	
  9002  0008C6  2A38               	incf	keypressed@i_441,f,c
  9003  0008C8  D7EE               	goto	i2l4396
  9004  0008CA                     i2l4404:
  9005                           
  9006                           ;Interrupt_ISR.c: 58: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  9007  0008CA  0E00               	movlw	0
  9008  0008CC  6E39               	movwf	keypressed@i_442,c
  9009  0008CE                     i2l4406:
  9010  0008CE  0E09               	movlw	9
  9011  0008D0  6439               	cpfsgt	keypressed@i_442,c
  9012  0008D2  D001               	goto	i2l4410
  9013  0008D4  D00E               	goto	i2l4414
  9014  0008D6                     i2l4410:
  9015  0008D6  0E02               	movlw	2
  9016  0008D8  6E22               	movwf	(??_keypressed+1)& (0+255),c
  9017  0008DA  0E3F               	movlw	63
  9018  0008DC  6E21               	movwf	??_keypressed& (0+255),c
  9019  0008DE  0E2B               	movlw	43
  9020  0008E0                     i2u516_47:
  9021  0008E0  2EE8               	decfsz	wreg,f,c
  9022  0008E2  D7FE               	bra	i2u516_47
  9023  0008E4  2E21               	decfsz	??_keypressed& (0+255),f,c
  9024  0008E6  D7FC               	bra	i2u516_47
  9025  0008E8  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  9026  0008EA  D7FA               	bra	i2u516_47
  9027  0008EC  F000               	nop	
  9028  0008EE  2A39               	incf	keypressed@i_442,f,c
  9029  0008F0  D7EE               	goto	i2l4406
  9030  0008F2                     i2l4414:
  9031                           
  9032                           ;Interrupt_ISR.c: 59: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  9033  0008F2  0E00               	movlw	0
  9034  0008F4  6E3A               	movwf	keypressed@i_443,c
  9035  0008F6                     i2l4416:
  9036  0008F6  0E09               	movlw	9
  9037  0008F8  643A               	cpfsgt	keypressed@i_443,c
  9038  0008FA  D001               	goto	i2l4420
  9039  0008FC  D05E               	goto	i2l4466
  9040  0008FE                     i2l4420:
  9041  0008FE  0E02               	movlw	2
  9042  000900  6E22               	movwf	(??_keypressed+1)& (0+255),c
  9043  000902  0E3F               	movlw	63
  9044  000904  6E21               	movwf	??_keypressed& (0+255),c
  9045  000906  0E2B               	movlw	43
  9046  000908                     i2u517_47:
  9047  000908  2EE8               	decfsz	wreg,f,c
  9048  00090A  D7FE               	bra	i2u517_47
  9049  00090C  2E21               	decfsz	??_keypressed& (0+255),f,c
  9050  00090E  D7FC               	bra	i2u517_47
  9051  000910  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  9052  000912  D7FA               	bra	i2u517_47
  9053  000914  F000               	nop	
  9054  000916  2A3A               	incf	keypressed@i_443,f,c
  9055  000918  D7EE               	goto	i2l4416
  9056  00091A                     i2l4424:
  9057                           
  9058                           ;Interrupt_ISR.c: 61: else if(keypress_temp == 0b01000100){
  9059  00091A  0E44               	movlw	68
  9060  00091C  183E               	xorwf	keypressed@keypress_temp,w,c
  9061  00091E  A4D8               	btfss	status,2,c
  9062  000920  D03E               	goto	i2l4458
  9063                           
  9064                           ;Interrupt_ISR.c: 62: op_time();
  9065  000922  ECE7  F00C         	call	_op_time	;wreg free
  9066                           
  9067                           ;Interrupt_ISR.c: 64: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  9068  000926  0E00               	movlw	0
  9069  000928  6E3B               	movwf	keypressed@i_444,c
  9070  00092A                     i2l4430:
  9071  00092A  0E09               	movlw	9
  9072  00092C  643B               	cpfsgt	keypressed@i_444,c
  9073  00092E  D001               	goto	i2l4434
  9074  000930  D00E               	goto	i2l4438
  9075  000932                     i2l4434:
  9076  000932  0E02               	movlw	2
  9077  000934  6E22               	movwf	(??_keypressed+1)& (0+255),c
  9078  000936  0E3F               	movlw	63
  9079  000938  6E21               	movwf	??_keypressed& (0+255),c
  9080  00093A  0E2B               	movlw	43
  9081  00093C                     i2u518_47:
  9082  00093C  2EE8               	decfsz	wreg,f,c
  9083  00093E  D7FE               	bra	i2u518_47
  9084  000940  2E21               	decfsz	??_keypressed& (0+255),f,c
  9085  000942  D7FC               	bra	i2u518_47
  9086  000944  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  9087  000946  D7FA               	bra	i2u518_47
  9088  000948  F000               	nop	
  9089  00094A  2A3B               	incf	keypressed@i_444,f,c
  9090  00094C  D7EE               	goto	i2l4430
  9091  00094E                     i2l4438:
  9092                           
  9093                           ;Interrupt_ISR.c: 65: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  9094  00094E  0E00               	movlw	0
  9095  000950  6E3C               	movwf	keypressed@i_445,c
  9096  000952                     i2l4440:
  9097  000952  0E09               	movlw	9
  9098  000954  643C               	cpfsgt	keypressed@i_445,c
  9099  000956  D001               	goto	i2l4444
  9100  000958  D00E               	goto	i2l4448
  9101  00095A                     i2l4444:
  9102  00095A  0E02               	movlw	2
  9103  00095C  6E22               	movwf	(??_keypressed+1)& (0+255),c
  9104  00095E  0E3F               	movlw	63
  9105  000960  6E21               	movwf	??_keypressed& (0+255),c
  9106  000962  0E2B               	movlw	43
  9107  000964                     i2u519_47:
  9108  000964  2EE8               	decfsz	wreg,f,c
  9109  000966  D7FE               	bra	i2u519_47
  9110  000968  2E21               	decfsz	??_keypressed& (0+255),f,c
  9111  00096A  D7FC               	bra	i2u519_47
  9112  00096C  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  9113  00096E  D7FA               	bra	i2u519_47
  9114  000970  F000               	nop	
  9115  000972  2A3C               	incf	keypressed@i_445,f,c
  9116  000974  D7EE               	goto	i2l4440
  9117  000976                     i2l4448:
  9118                           
  9119                           ;Interrupt_ISR.c: 66: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  9120  000976  0E00               	movlw	0
  9121  000978  6E3D               	movwf	keypressed@i_446,c
  9122  00097A                     i2l4450:
  9123  00097A  0E09               	movlw	9
  9124  00097C  643D               	cpfsgt	keypressed@i_446,c
  9125  00097E  D001               	goto	i2l4454
  9126  000980  D01C               	goto	i2l4466
  9127  000982                     i2l4454:
  9128  000982  0E02               	movlw	2
  9129  000984  6E22               	movwf	(??_keypressed+1)& (0+255),c
  9130  000986  0E3F               	movlw	63
  9131  000988  6E21               	movwf	??_keypressed& (0+255),c
  9132  00098A  0E2B               	movlw	43
  9133  00098C                     i2u520_47:
  9134  00098C  2EE8               	decfsz	wreg,f,c
  9135  00098E  D7FE               	bra	i2u520_47
  9136  000990  2E21               	decfsz	??_keypressed& (0+255),f,c
  9137  000992  D7FC               	bra	i2u520_47
  9138  000994  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  9139  000996  D7FA               	bra	i2u520_47
  9140  000998  F000               	nop	
  9141  00099A  2A3D               	incf	keypressed@i_446,f,c
  9142  00099C  D7EE               	goto	i2l4450
  9143  00099E                     i2l4458:
  9144                           
  9145                           ;Interrupt_ISR.c: 68: else if(keypress_temp == '*'){
  9146  00099E  0E2A               	movlw	42
  9147  0009A0  183E               	xorwf	keypressed@keypress_temp,w,c
  9148  0009A2  A4D8               	btfss	status,2,c
  9149  0009A4  D002               	goto	i2l4462
  9150  0009A6  00FF               	reset		;# 
  9151                           
  9152                           ;Interrupt_ISR.c: 70: }
  9153  0009A8  D008               	goto	i2l4466
  9154  0009AA                     i2l4462:
  9155                           
  9156                           ;Interrupt_ISR.c: 71: else{
  9157                           ;Interrupt_ISR.c: 72: initLCD();
  9158  0009AA  ECCA  F00D         	call	i2_initLCD	;wreg free
  9159                           
  9160                           ;Interrupt_ISR.c: 73: printf(" ");
  9161  0009AE  0EDC               	movlw	low (STR_2+11)
  9162  0009B0  6E0D               	movwf	i2printf@f,c
  9163  0009B2  0EFF               	movlw	high (STR_2+11)
  9164  0009B4  6E0E               	movwf	i2printf@f+1,c
  9165  0009B6  ECF8  F001         	call	i2_printf	;wreg free
  9166  0009BA                     i2l4466:
  9167                           
  9168                           ;Interrupt_ISR.c: 74: }
  9169                           ;Interrupt_ISR.c: 75: lcdInst(0b10000000);;
  9170  0009BA  0E80               	movlw	128
  9171  0009BC  EC91  F010         	call	i2_lcdInst
  9172                           
  9173                           ;Interrupt_ISR.c: 78: INT1IF = 0;
  9174  0009C0  90F0               	bcf	intcon3,0,c	;volatile
  9175  0009C2                     i2l243:
  9176  0009C2  C030  FFF5         	movff	??_keypressed+15,tablat
  9177  0009C6  C02F  FFF8         	movff	??_keypressed+14,tblptru
  9178  0009CA  C02E  FFF7         	movff	??_keypressed+13,tblptrh
  9179  0009CE  C02D  FFF6         	movff	??_keypressed+12,tblptrl
  9180  0009D2  C02C  FFF4         	movff	??_keypressed+11,prodh
  9181  0009D6  C02B  FFF3         	movff	??_keypressed+10,prodl
  9182  0009DA  C02A  FFDA         	movff	??_keypressed+9,fsr2h
  9183  0009DE  C029  FFD9         	movff	??_keypressed+8,fsr2l
  9184  0009E2  C028  FFE2         	movff	??_keypressed+7,fsr1h
  9185  0009E6  C027  FFE1         	movff	??_keypressed+6,fsr1l
  9186  0009EA  C026  FFEA         	movff	??_keypressed+5,fsr0h
  9187  0009EE  C025  FFE9         	movff	??_keypressed+4,fsr0l
  9188  0009F2  C024  FFFB         	movff	??_keypressed+3,pclatu
  9189  0009F6  C023  FFFA         	movff	??_keypressed+2,pclath
  9190  0009FA  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9191  0009FC  0011               	retfie		f
  9192  0009FE                     __end_of_keypressed:
  9193                           	opt stack 0
  9194                           tosu	equ	0xFFF
  9195                           tosh	equ	0xFFE
  9196                           tosl	equ	0xFFD
  9197                           pclatu	equ	0xFFB
  9198                           pclath	equ	0xFFA
  9199                           tblptru	equ	0xFF8
  9200                           tblptrh	equ	0xFF7
  9201                           tblptrl	equ	0xFF6
  9202                           tablat	equ	0xFF5
  9203                           prodh	equ	0xFF4
  9204                           prodl	equ	0xFF3
  9205                           intcon	equ	0xFF2
  9206                           intcon2	equ	0xFF1
  9207                           intcon3	equ	0xFF0
  9208                           postinc0	equ	0xFEE
  9209                           fsr0h	equ	0xFEA
  9210                           fsr0l	equ	0xFE9
  9211                           wreg	equ	0xFE8
  9212                           fsr1h	equ	0xFE2
  9213                           fsr1l	equ	0xFE1
  9214                           indf2	equ	0xFDF
  9215                           postinc2	equ	0xFDE
  9216                           postdec2	equ	0xFDD
  9217                           fsr2h	equ	0xFDA
  9218                           fsr2l	equ	0xFD9
  9219                           status	equ	0xFD8
  9220                           
  9221 ;; *************** function _tot_sorted *****************
  9222 ;; Defined at:
  9223 ;;		line 233 in file "operation.c"
  9224 ;; Parameters:    Size  Location     Type
  9225 ;;		None
  9226 ;; Auto vars:     Size  Location     Type
  9227 ;;		None
  9228 ;; Return value:  Size  Location     Type
  9229 ;;                  1    wreg      void 
  9230 ;; Registers used:
  9231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9232 ;; Tracked objects:
  9233 ;;		On entry : 0/0
  9234 ;;		On exit  : 0/0
  9235 ;;		Unchanged: 0/0
  9236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9241 ;;Total ram usage:        0 bytes
  9242 ;; Hardware stack levels used:    1
  9243 ;; Hardware stack levels required when called:    3
  9244 ;; This function calls:
  9245 ;;		i2_initLCD
  9246 ;;		i2_lcdInst
  9247 ;;		i2_printf
  9248 ;; This function is called by:
  9249 ;;		_keypressed
  9250 ;; This function uses a non-reentrant model
  9251 ;;
  9252                           
  9253                           	psect	text58
  9254  00202E                     __ptext58:
  9255                           	opt stack 0
  9256  00202E                     _tot_sorted:
  9257                           	opt stack 21
  9258                           
  9259                           ;operation.c: 234: lcdInst(0b10000000);;
  9260                           
  9261                           ;incstack = 0
  9262  00202E  0E80               	movlw	128
  9263  002030  EC91  F010         	call	i2_lcdInst
  9264                           
  9265                           ;operation.c: 235: initLCD();
  9266  002034  ECCA  F00D         	call	i2_initLCD	;wreg free
  9267                           
  9268                           ;operation.c: 236: printf("Total Sorted: %02d", tot);
  9269  002038  0E2B               	movlw	low STR_10
  9270  00203A  6E0D               	movwf	i2printf@f,c
  9271  00203C  0EFF               	movlw	high STR_10
  9272  00203E  6E0E               	movwf	i2printf@f+1,c
  9273  002040  C047  F00F         	movff	_tot,?i2_printf+2
  9274  002044  C048  F010         	movff	_tot+1,?i2_printf+3
  9275  002048  ECF8  F001         	call	i2_printf	;wreg free
  9276  00204C  0012               	return	
  9277  00204E                     __end_of_tot_sorted:
  9278                           	opt stack 0
  9279                           tosu	equ	0xFFF
  9280                           tosh	equ	0xFFE
  9281                           tosl	equ	0xFFD
  9282                           pclatu	equ	0xFFB
  9283                           pclath	equ	0xFFA
  9284                           tblptru	equ	0xFF8
  9285                           tblptrh	equ	0xFF7
  9286                           tblptrl	equ	0xFF6
  9287                           tablat	equ	0xFF5
  9288                           prodh	equ	0xFF4
  9289                           prodl	equ	0xFF3
  9290                           intcon	equ	0xFF2
  9291                           intcon2	equ	0xFF1
  9292                           intcon3	equ	0xFF0
  9293                           postinc0	equ	0xFEE
  9294                           fsr0h	equ	0xFEA
  9295                           fsr0l	equ	0xFE9
  9296                           wreg	equ	0xFE8
  9297                           fsr1h	equ	0xFE2
  9298                           fsr1l	equ	0xFE1
  9299                           indf2	equ	0xFDF
  9300                           postinc2	equ	0xFDE
  9301                           postdec2	equ	0xFDD
  9302                           fsr2h	equ	0xFDA
  9303                           fsr2l	equ	0xFD9
  9304                           status	equ	0xFD8
  9305                           
  9306 ;; *************** function _tin_results *****************
  9307 ;; Defined at:
  9308 ;;		line 247 in file "operation.c"
  9309 ;; Parameters:    Size  Location     Type
  9310 ;;		None
  9311 ;; Auto vars:     Size  Location     Type
  9312 ;;		None
  9313 ;; Return value:  Size  Location     Type
  9314 ;;                  1    wreg      void 
  9315 ;; Registers used:
  9316 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9317 ;; Tracked objects:
  9318 ;;		On entry : 0/0
  9319 ;;		On exit  : 0/0
  9320 ;;		Unchanged: 0/0
  9321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9326 ;;Total ram usage:        0 bytes
  9327 ;; Hardware stack levels used:    1
  9328 ;; Hardware stack levels required when called:    3
  9329 ;; This function calls:
  9330 ;;		i2_initLCD
  9331 ;;		i2_lcdInst
  9332 ;;		i2_printf
  9333 ;; This function is called by:
  9334 ;;		_keypressed
  9335 ;; This function uses a non-reentrant model
  9336 ;;
  9337                           
  9338                           	psect	text59
  9339  001C1C                     __ptext59:
  9340                           	opt stack 0
  9341  001C1C                     _tin_results:
  9342                           	opt stack 21
  9343                           
  9344                           ;operation.c: 248: lcdInst(0b10000000);;
  9345                           
  9346                           ;incstack = 0
  9347  001C1C  0E80               	movlw	128
  9348  001C1E  EC91  F010         	call	i2_lcdInst
  9349                           
  9350                           ;operation.c: 249: initLCD();
  9351  001C22  ECCA  F00D         	call	i2_initLCD	;wreg free
  9352                           
  9353                           ;operation.c: 250: printf("With Label: %02d",tin_can);
  9354  001C26  0E60               	movlw	low STR_12
  9355  001C28  6E0D               	movwf	i2printf@f,c
  9356  001C2A  0EFF               	movlw	high STR_12
  9357  001C2C  6E0E               	movwf	i2printf@f+1,c
  9358  001C2E  C099  F00F         	movff	_tin_can,?i2_printf+2
  9359  001C32  C09A  F010         	movff	_tin_can+1,?i2_printf+3
  9360  001C36  ECF8  F001         	call	i2_printf	;wreg free
  9361                           
  9362                           ;operation.c: 251: lcdInst(0b11000000);;
  9363  001C3A  0EC0               	movlw	192
  9364  001C3C  EC91  F010         	call	i2_lcdInst
  9365                           
  9366                           ;operation.c: 252: printf("No Label: %02d",tin_can_label);
  9367  001C40  0EB3               	movlw	low STR_13
  9368  001C42  6E0D               	movwf	i2printf@f,c
  9369  001C44  0EFF               	movlw	high STR_13
  9370  001C46  6E0E               	movwf	i2printf@f+1,c
  9371  001C48  C09B  F00F         	movff	_tin_can_label,?i2_printf+2
  9372  001C4C  C09C  F010         	movff	_tin_can_label+1,?i2_printf+3
  9373  001C50  ECF8  F001         	call	i2_printf	;wreg free
  9374  001C54  0012               	return	
  9375  001C56                     __end_of_tin_results:
  9376                           	opt stack 0
  9377                           tosu	equ	0xFFF
  9378                           tosh	equ	0xFFE
  9379                           tosl	equ	0xFFD
  9380                           pclatu	equ	0xFFB
  9381                           pclath	equ	0xFFA
  9382                           tblptru	equ	0xFF8
  9383                           tblptrh	equ	0xFF7
  9384                           tblptrl	equ	0xFF6
  9385                           tablat	equ	0xFF5
  9386                           prodh	equ	0xFF4
  9387                           prodl	equ	0xFF3
  9388                           intcon	equ	0xFF2
  9389                           intcon2	equ	0xFF1
  9390                           intcon3	equ	0xFF0
  9391                           postinc0	equ	0xFEE
  9392                           fsr0h	equ	0xFEA
  9393                           fsr0l	equ	0xFE9
  9394                           wreg	equ	0xFE8
  9395                           fsr1h	equ	0xFE2
  9396                           fsr1l	equ	0xFE1
  9397                           indf2	equ	0xFDF
  9398                           postinc2	equ	0xFDE
  9399                           postdec2	equ	0xFDD
  9400                           fsr2h	equ	0xFDA
  9401                           fsr2l	equ	0xFD9
  9402                           status	equ	0xFD8
  9403                           
  9404 ;; *************** function _pop_results *****************
  9405 ;; Defined at:
  9406 ;;		line 256 in file "operation.c"
  9407 ;; Parameters:    Size  Location     Type
  9408 ;;		None
  9409 ;; Auto vars:     Size  Location     Type
  9410 ;;		None
  9411 ;; Return value:  Size  Location     Type
  9412 ;;                  1    wreg      void 
  9413 ;; Registers used:
  9414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9415 ;; Tracked objects:
  9416 ;;		On entry : 0/0
  9417 ;;		On exit  : 0/0
  9418 ;;		Unchanged: 0/0
  9419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9424 ;;Total ram usage:        0 bytes
  9425 ;; Hardware stack levels used:    1
  9426 ;; Hardware stack levels required when called:    3
  9427 ;; This function calls:
  9428 ;;		i2_initLCD
  9429 ;;		i2_lcdInst
  9430 ;;		i2_printf
  9431 ;; This function is called by:
  9432 ;;		_keypressed
  9433 ;; This function uses a non-reentrant model
  9434 ;;
  9435                           
  9436                           	psect	text60
  9437  001C56                     __ptext60:
  9438                           	opt stack 0
  9439  001C56                     _pop_results:
  9440                           	opt stack 21
  9441                           
  9442                           ;operation.c: 257: lcdInst(0b10000000);;
  9443                           
  9444                           ;incstack = 0
  9445  001C56  0E80               	movlw	128
  9446  001C58  EC91  F010         	call	i2_lcdInst
  9447                           
  9448                           ;operation.c: 258: initLCD();
  9449  001C5C  ECCA  F00D         	call	i2_initLCD	;wreg free
  9450                           
  9451                           ;operation.c: 259: printf("With Tab: %02d",pop_can_tab);
  9452  001C60  0EA4               	movlw	low STR_14
  9453  001C62  6E0D               	movwf	i2printf@f,c
  9454  001C64  0EFF               	movlw	high STR_14
  9455  001C66  6E0E               	movwf	i2printf@f+1,c
  9456  001C68  C095  F00F         	movff	_pop_can_tab,?i2_printf+2
  9457  001C6C  C096  F010         	movff	_pop_can_tab+1,?i2_printf+3
  9458  001C70  ECF8  F001         	call	i2_printf	;wreg free
  9459                           
  9460                           ;operation.c: 260: lcdInst(0b11000000);;
  9461  001C74  0EC0               	movlw	192
  9462  001C76  EC91  F010         	call	i2_lcdInst
  9463                           
  9464                           ;operation.c: 261: printf("No Tab: %02d",pop_can);
  9465  001C7A  0EDE               	movlw	low STR_15
  9466  001C7C  6E0D               	movwf	i2printf@f,c
  9467  001C7E  0EFF               	movlw	high STR_15
  9468  001C80  6E0E               	movwf	i2printf@f+1,c
  9469  001C82  C097  F00F         	movff	_pop_can,?i2_printf+2
  9470  001C86  C098  F010         	movff	_pop_can+1,?i2_printf+3
  9471  001C8A  ECF8  F001         	call	i2_printf	;wreg free
  9472  001C8E  0012               	return	
  9473  001C90                     __end_of_pop_results:
  9474                           	opt stack 0
  9475                           tosu	equ	0xFFF
  9476                           tosh	equ	0xFFE
  9477                           tosl	equ	0xFFD
  9478                           pclatu	equ	0xFFB
  9479                           pclath	equ	0xFFA
  9480                           tblptru	equ	0xFF8
  9481                           tblptrh	equ	0xFF7
  9482                           tblptrl	equ	0xFF6
  9483                           tablat	equ	0xFF5
  9484                           prodh	equ	0xFF4
  9485                           prodl	equ	0xFF3
  9486                           intcon	equ	0xFF2
  9487                           intcon2	equ	0xFF1
  9488                           intcon3	equ	0xFF0
  9489                           postinc0	equ	0xFEE
  9490                           fsr0h	equ	0xFEA
  9491                           fsr0l	equ	0xFE9
  9492                           wreg	equ	0xFE8
  9493                           fsr1h	equ	0xFE2
  9494                           fsr1l	equ	0xFE1
  9495                           indf2	equ	0xFDF
  9496                           postinc2	equ	0xFDE
  9497                           postdec2	equ	0xFDD
  9498                           fsr2h	equ	0xFDA
  9499                           fsr2l	equ	0xFD9
  9500                           status	equ	0xFD8
  9501                           
  9502 ;; *************** function _op_time *****************
  9503 ;; Defined at:
  9504 ;;		line 240 in file "operation.c"
  9505 ;; Parameters:    Size  Location     Type
  9506 ;;		None
  9507 ;; Auto vars:     Size  Location     Type
  9508 ;;		None
  9509 ;; Return value:  Size  Location     Type
  9510 ;;                  1    wreg      void 
  9511 ;; Registers used:
  9512 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9513 ;; Tracked objects:
  9514 ;;		On entry : 0/0
  9515 ;;		On exit  : 0/0
  9516 ;;		Unchanged: 0/0
  9517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9522 ;;Total ram usage:        0 bytes
  9523 ;; Hardware stack levels used:    1
  9524 ;; Hardware stack levels required when called:    3
  9525 ;; This function calls:
  9526 ;;		___awmod
  9527 ;;		i2___awdiv
  9528 ;;		i2_initLCD
  9529 ;;		i2_lcdInst
  9530 ;;		i2_printf
  9531 ;; This function is called by:
  9532 ;;		_keypressed
  9533 ;; This function uses a non-reentrant model
  9534 ;;
  9535                           
  9536                           	psect	text61
  9537  0019CE                     __ptext61:
  9538                           	opt stack 0
  9539  0019CE                     _op_time:
  9540                           	opt stack 21
  9541                           
  9542                           ;operation.c: 241: lcdInst(0b10000000);;
  9543                           
  9544                           ;incstack = 0
  9545  0019CE  0E80               	movlw	128
  9546  0019D0  EC91  F010         	call	i2_lcdInst
  9547                           
  9548                           ;operation.c: 242: initLCD();
  9549  0019D4  ECCA  F00D         	call	i2_initLCD	;wreg free
  9550                           
  9551                           ;operation.c: 243: printf("Time: %01d min %02d s", operation_time/60, operation_time%60 
      +                          );
  9552  0019D8  0E15               	movlw	low STR_11
  9553  0019DA  6E0D               	movwf	i2printf@f,c
  9554  0019DC  0EFF               	movlw	high STR_11
  9555  0019DE  6E0E               	movwf	i2printf@f+1,c
  9556  0019E0  C049  F001         	movff	_operation_time,i2___awdiv@dividend
  9557  0019E4  C04A  F002         	movff	_operation_time+1,i2___awdiv@dividend+1
  9558  0019E8  0E00               	movlw	0
  9559  0019EA  6E04               	movwf	i2___awdiv@divisor+1,c
  9560  0019EC  0E3C               	movlw	60
  9561  0019EE  6E03               	movwf	i2___awdiv@divisor,c
  9562  0019F0  EC61  F00A         	call	i2___awdiv	;wreg free
  9563  0019F4  C001  F00F         	movff	?i2___awdiv,?i2_printf+2
  9564  0019F8  C002  F010         	movff	?i2___awdiv+1,?i2_printf+3
  9565  0019FC  C049  F001         	movff	_operation_time,___awmod@dividend
  9566  001A00  C04A  F002         	movff	_operation_time+1,___awmod@dividend+1
  9567  001A04  0E00               	movlw	0
  9568  001A06  6E04               	movwf	___awmod@divisor+1,c
  9569  001A08  0E3C               	movlw	60
  9570  001A0A  6E03               	movwf	___awmod@divisor,c
  9571  001A0C  ECDF  F00A         	call	___awmod	;wreg free
  9572  001A10  C001  F011         	movff	?___awmod,?i2_printf+4
  9573  001A14  C002  F012         	movff	?___awmod+1,?i2_printf+5
  9574  001A18  ECF8  F001         	call	i2_printf	;wreg free
  9575  001A1C  0012               	return	
  9576  001A1E                     __end_of_op_time:
  9577                           	opt stack 0
  9578                           tosu	equ	0xFFF
  9579                           tosh	equ	0xFFE
  9580                           tosl	equ	0xFFD
  9581                           pclatu	equ	0xFFB
  9582                           pclath	equ	0xFFA
  9583                           tblptru	equ	0xFF8
  9584                           tblptrh	equ	0xFF7
  9585                           tblptrl	equ	0xFF6
  9586                           tablat	equ	0xFF5
  9587                           prodh	equ	0xFF4
  9588                           prodl	equ	0xFF3
  9589                           intcon	equ	0xFF2
  9590                           intcon2	equ	0xFF1
  9591                           intcon3	equ	0xFF0
  9592                           postinc0	equ	0xFEE
  9593                           fsr0h	equ	0xFEA
  9594                           fsr0l	equ	0xFE9
  9595                           wreg	equ	0xFE8
  9596                           fsr1h	equ	0xFE2
  9597                           fsr1l	equ	0xFE1
  9598                           indf2	equ	0xFDF
  9599                           postinc2	equ	0xFDE
  9600                           postdec2	equ	0xFDD
  9601                           fsr2h	equ	0xFDA
  9602                           fsr2l	equ	0xFD9
  9603                           status	equ	0xFD8
  9604                           
  9605 ;; *************** function i2_printf *****************
  9606 ;; Defined at:
  9607 ;;		line 464 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
  9608 ;; Parameters:    Size  Location     Type
  9609 ;;  f               2   12[COMRAM] PTR const unsigned char 
  9610 ;;		 -> STR_15(13), STR_14(15), STR_13(15), STR_12(17), 
  9611 ;;		 -> STR_11(22), STR_10(19), STR_9(17), STR_8(17), 
  9612 ;;		 -> STR_7(17), STR_6(11), STR_5(9), STR_4(17), 
  9613 ;;		 -> STR_3(15), STR_2(13), STR_1(2), 
  9614 ;; Auto vars:     Size  Location     Type
  9615 ;;  printf          4    0        struct .
  9616 ;;  printf          3    0        PTR const unsigned char 
  9617 ;;  printf          2   29[COMRAM] int 
  9618 ;;  printf          2   26[COMRAM] unsigned int 
  9619 ;;  printf          2   23[COMRAM] PTR void [1]
  9620 ;;		 -> ?i2_printf(2), ?_printf(2), 
  9621 ;;  printf          2    0        unsigned int 
  9622 ;;  printf          1   31[COMRAM] char 
  9623 ;;  printf          1   28[COMRAM] unsigned char 
  9624 ;;  printf          1   25[COMRAM] char 
  9625 ;;  printf          1   22[COMRAM] unsigned char 
  9626 ;; Return value:  Size  Location     Type
  9627 ;;                  2   12[COMRAM] int 
  9628 ;; Registers used:
  9629 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9630 ;; Tracked objects:
  9631 ;;		On entry : 0/0
  9632 ;;		On exit  : 0/0
  9633 ;;		Unchanged: 0/0
  9634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9635 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9636 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9637 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9638 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9639 ;;Total ram usage:       20 bytes
  9640 ;; Hardware stack levels used:    1
  9641 ;; Hardware stack levels required when called:    2
  9642 ;; This function calls:
  9643 ;;		i2___lwdiv
  9644 ;;		i2___lwmod
  9645 ;;		i2___wmul
  9646 ;;		i2_isdigit
  9647 ;;		i2_putch
  9648 ;; This function is called by:
  9649 ;;		_keypressed
  9650 ;;		_tot_sorted
  9651 ;;		_op_time
  9652 ;;		_tin_results
  9653 ;;		_pop_results
  9654 ;; This function uses a non-reentrant model
  9655 ;;
  9656                           
  9657                           	psect	text62
  9658  0003F0                     __ptext62:
  9659                           	opt stack 0
  9660  0003F0                     i2_printf:
  9661                           	opt stack 22
  9662                           
  9663                           ;doprnt.c: 466: va_list ap;
  9664                           ;doprnt.c: 499: signed char c;
  9665                           ;doprnt.c: 501: int width;
  9666                           ;doprnt.c: 506: signed char prec;
  9667                           ;doprnt.c: 508: unsigned char flag;
  9668                           ;doprnt.c: 523: union {
  9669                           ;doprnt.c: 524: unsigned long vd;
  9670                           ;doprnt.c: 525: double integ;
  9671                           ;doprnt.c: 526: } tmpval;
  9672                           ;doprnt.c: 528: unsigned int val;
  9673                           ;doprnt.c: 529: unsigned len;
  9674                           ;doprnt.c: 530: const char * cp;
  9675                           ;doprnt.c: 533: *ap = __va_start();
  9676                           
  9677                           ;incstack = 0
  9678  0003F0  0E0F               	movlw	low (?i2_printf+2)
  9679  0003F2  6E18               	movwf	i2printf@ap,c
  9680  0003F4  0E00               	movlw	high (?i2_printf+2)
  9681  0003F6  6E19               	movwf	i2printf@ap+1,c
  9682                           
  9683                           ;doprnt.c: 536: while(c = *f++) {
  9684  0003F8  D188               	goto	i2l4030
  9685  0003FA                     i2l3904:
  9686                           
  9687                           ;doprnt.c: 538: if(c != '%')
  9688  0003FA  0E25               	movlw	37
  9689  0003FC  1820               	xorwf	i2printf@c,w,c
  9690  0003FE  B4D8               	btfsc	status,2,c
  9691  000400  D004               	goto	i2l3908
  9692                           
  9693                           ;doprnt.c: 540: {
  9694                           ;doprnt.c: 541: (putch(c) );
  9695  000402  5020               	movf	i2printf@c,w,c
  9696  000404  EC8B  F010         	call	i2_putch
  9697                           
  9698                           ;doprnt.c: 542: continue;
  9699  000408  D180               	goto	i2l4030
  9700  00040A                     i2l3908:
  9701                           
  9702                           ;doprnt.c: 543: }
  9703                           ;doprnt.c: 546: width = 0;
  9704  00040A  0E00               	movlw	0
  9705  00040C  6E1F               	movwf	i2printf@width+1,c
  9706  00040E  0E00               	movlw	0
  9707  000410  6E1E               	movwf	i2printf@width,c
  9708                           
  9709                           ;doprnt.c: 548: flag = 0;
  9710  000412  0E00               	movlw	0
  9711  000414  6E1D               	movwf	i2printf@flag,c
  9712                           
  9713                           ;doprnt.c: 551: switch(*f) {
  9714                           
  9715                           ;doprnt.c: 550: for(;;) {
  9716  000416  D003               	goto	i2l3914
  9717  000418                     i2l3910:
  9718                           
  9719                           ;doprnt.c: 580: flag |= 0x04;
  9720  000418  841D               	bsf	i2printf@flag,2,c
  9721                           
  9722                           ;doprnt.c: 581: f++;
  9723  00041A  4A0D               	infsnz	i2printf@f,f,c
  9724  00041C  2A0E               	incf	i2printf@f+1,f,c
  9725  00041E                     i2l3914:
  9726  00041E  C00D  FFF6         	movff	i2printf@f,tblptrl
  9727  000422  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9728  000426                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9729  000426  6AF8               	clrf	tblptru,c
  9730  000428                     	endif
  9731  000428                     	if	0	;tblptru may be non-zero
  9732  000428                     	endif
  9733  000428  0008               	tblrd		*
  9734  00042A  50F5               	movf	tablat,w,c
  9735                           
  9736                           ; Switch size 1, requested type "space"
  9737                           ; Number of cases is 1, Range of values is 48 to 48
  9738                           ; switch strategies available:
  9739                           ; Name         Instructions Cycles
  9740                           ; simple_byte            4     3 (average)
  9741                           ;	Chosen strategy is simple_byte
  9742  00042C  0A30               	xorlw	48	; case 48
  9743  00042E  B4D8               	btfsc	status,2,c
  9744  000430  D7F3               	goto	i2l3910
  9745                           
  9746                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9747                           
  9748                           ;doprnt.c: 586: }
  9749                           
  9750                           ;doprnt.c: 585: break;
  9751  000432  C00D  FFF6         	movff	i2printf@f,tblptrl
  9752  000436  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9753  00043A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9754  00043A  6AF8               	clrf	tblptru,c
  9755  00043C                     	endif
  9756  00043C                     	if	0	;tblptru may be non-zero
  9757  00043C                     	endif
  9758  00043C  0008               	tblrd		*
  9759  00043E  50F5               	movf	tablat,w,c
  9760  000440  EC27  F010         	call	i2_isdigit
  9761  000444  A0D8               	btfss	status,0,c
  9762  000446  D037               	goto	i2l3932
  9763                           
  9764                           ;doprnt.c: 598: width = 0;
  9765  000448  0E00               	movlw	0
  9766  00044A  6E1F               	movwf	i2printf@width+1,c
  9767  00044C  0E00               	movlw	0
  9768  00044E  6E1E               	movwf	i2printf@width,c
  9769  000450                     i2l3920:
  9770                           
  9771                           ;doprnt.c: 600: width *= 10;
  9772  000450  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
  9773  000454  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  9774  000458  0E00               	movlw	0
  9775  00045A  6E04               	movwf	i2___wmul@multiplicand+1,c
  9776  00045C  0E0A               	movlw	10
  9777  00045E  6E03               	movwf	i2___wmul@multiplicand,c
  9778  000460  ECC1  F00F         	call	i2___wmul	;wreg free
  9779  000464  C001  F01E         	movff	?i2___wmul,i2printf@width
  9780  000468  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
  9781                           
  9782                           ;doprnt.c: 601: width += *f++ - '0';
  9783  00046C  0ED0               	movlw	208
  9784  00046E  6E13               	movwf	??i2_printf& (0+255),c
  9785  000470  0EFF               	movlw	255
  9786  000472  6E14               	movwf	(??i2_printf+1)& (0+255),c
  9787  000474  C00D  FFF6         	movff	i2printf@f,tblptrl
  9788  000478  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9789  00047C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9790  00047C  6AF8               	clrf	tblptru,c
  9791  00047E                     	endif
  9792  00047E                     	if	0	;tblptru may be non-zero
  9793  00047E                     	endif
  9794  00047E  0008               	tblrd		*
  9795  000480  50F5               	movf	tablat,w,c
  9796  000482  6E15               	movwf	(??i2_printf+2)& (0+255),c
  9797  000484  6A16               	clrf	(??i2_printf+3)& (0+255),c
  9798  000486  5013               	movf	??i2_printf,w,c
  9799  000488  2615               	addwf	??i2_printf+2,f,c
  9800  00048A  5014               	movf	??i2_printf+1,w,c
  9801  00048C  2216               	addwfc	??i2_printf+3,f,c
  9802  00048E  5015               	movf	??i2_printf+2,w,c
  9803  000490  261E               	addwf	i2printf@width,f,c
  9804  000492  5016               	movf	??i2_printf+3,w,c
  9805  000494  221F               	addwfc	i2printf@width+1,f,c
  9806  000496  4A0D               	infsnz	i2printf@f,f,c
  9807  000498  2A0E               	incf	i2printf@f+1,f,c
  9808                           
  9809                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9810  00049A  C00D  FFF6         	movff	i2printf@f,tblptrl
  9811  00049E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9812  0004A2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9813  0004A2  6AF8               	clrf	tblptru,c
  9814  0004A4                     	endif
  9815  0004A4                     	if	0	;tblptru may be non-zero
  9816  0004A4                     	endif
  9817  0004A4  0008               	tblrd		*
  9818  0004A6  50F5               	movf	tablat,w,c
  9819  0004A8  EC27  F010         	call	i2_isdigit
  9820  0004AC  A0D8               	btfss	status,0,c
  9821  0004AE  D003               	goto	i2l3932
  9822  0004B0  D7CF               	goto	i2l3920
  9823  0004B2                     i2l3928:
  9824                           
  9825                           ;doprnt.c: 721: flag |= 0x80;
  9826  0004B2  8E1D               	bsf	i2printf@flag,7,c
  9827                           
  9828                           ;doprnt.c: 723: break;
  9829  0004B4  D018               	goto	i2l766
  9830  0004B6                     i2l3932:
  9831  0004B6  C00D  FFF6         	movff	i2printf@f,tblptrl
  9832  0004BA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9833  0004BE  4A0D               	infsnz	i2printf@f,f,c
  9834  0004C0  2A0E               	incf	i2printf@f+1,f,c
  9835  0004C2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9836  0004C2  6AF8               	clrf	tblptru,c
  9837  0004C4                     	endif
  9838  0004C4                     	if	0	;tblptru may be non-zero
  9839  0004C4                     	endif
  9840  0004C4  0008               	tblrd		*
  9841  0004C6  CFF5 F020          	movff	tablat,i2printf@c
  9842  0004CA  5020               	movf	i2printf@c,w,c
  9843                           
  9844                           ; Switch size 1, requested type "space"
  9845                           ; Number of cases is 4, Range of values is 0 to 120
  9846                           ; switch strategies available:
  9847                           ; Name         Instructions Cycles
  9848                           ; simple_byte           13     7 (average)
  9849                           ;	Chosen strategy is simple_byte
  9850  0004CC  0A00               	xorlw	0	; case 0
  9851  0004CE  B4D8               	btfsc	status,2,c
  9852  0004D0  0012               	return	
  9853  0004D2  0A64               	xorlw	100	; case 100
  9854  0004D4  B4D8               	btfsc	status,2,c
  9855  0004D6  D007               	goto	i2l766
  9856  0004D8  0A0D               	xorlw	13	; case 105
  9857  0004DA  B4D8               	btfsc	status,2,c
  9858  0004DC  D004               	goto	i2l766
  9859  0004DE  0A11               	xorlw	17	; case 120
  9860  0004E0  B4D8               	btfsc	status,2,c
  9861  0004E2  D7E7               	goto	i2l3928
  9862  0004E4  D112               	goto	i2l4030
  9863  0004E6                     i2l766:
  9864                           
  9865                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  9866  0004E6  BE1D               	btfsc	i2printf@flag,7,c
  9867  0004E8  D015               	goto	i2l3944
  9868                           
  9869                           ;doprnt.c: 1253: {
  9870                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9871  0004EA  C018  FFD9         	movff	i2printf@ap,fsr2l
  9872  0004EE  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  9873  0004F2  CFDE F01B          	movff	postinc2,i2printf@val
  9874  0004F6  CFDD F01C          	movff	postdec2,i2printf@val+1
  9875  0004FA  0E02               	movlw	2
  9876  0004FC  2618               	addwf	i2printf@ap,f,c
  9877  0004FE  0E00               	movlw	0
  9878  000500  2219               	addwfc	i2printf@ap+1,f,c
  9879                           
  9880                           ;doprnt.c: 1261: if((int)val < 0) {
  9881  000502  AE1C               	btfss	i2printf@val+1,7,c
  9882  000504  D04A               	goto	i2l3978
  9883                           
  9884                           ;doprnt.c: 1262: flag |= 0x03;
  9885  000506  0E03               	movlw	3
  9886  000508  121D               	iorwf	i2printf@flag,f,c
  9887                           
  9888                           ;doprnt.c: 1263: val = -val;
  9889  00050A  6C1B               	negf	i2printf@val,c
  9890  00050C  1E1C               	comf	i2printf@val+1,f,c
  9891  00050E  B0D8               	btfsc	status,0,c
  9892  000510  2A1C               	incf	i2printf@val+1,f,c
  9893                           
  9894                           ;doprnt.c: 1264: }
  9895                           ;doprnt.c: 1266: }
  9896  000512  D043               	goto	i2l3978
  9897  000514                     i2l3944:
  9898                           
  9899                           ;doprnt.c: 1268: else
  9900                           ;doprnt.c: 1273: {
  9901                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9902  000514  C018  FFD9         	movff	i2printf@ap,fsr2l
  9903  000518  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  9904  00051C  CFDE F01B          	movff	postinc2,i2printf@val
  9905  000520  CFDD F01C          	movff	postdec2,i2printf@val+1
  9906  000524  0E02               	movlw	2
  9907  000526  2618               	addwf	i2printf@ap,f,c
  9908  000528  0E00               	movlw	0
  9909  00052A  2219               	addwfc	i2printf@ap+1,f,c
  9910                           
  9911                           ;doprnt.c: 1287: }
  9912                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  9913  00052C  D036               	goto	i2l3978
  9914  00052E                     i2l3948:
  9915                           
  9916                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9917  00052E  0E01               	movlw	1
  9918  000530  6E20               	movwf	i2printf@c,c
  9919  000532                     i2l3950:
  9920  000532  0E05               	movlw	5
  9921  000534  1820               	xorwf	i2printf@c,w,c
  9922  000536  B4D8               	btfsc	status,2,c
  9923  000538  D038               	goto	i2l3980
  9924                           
  9925                           ;doprnt.c: 1306: if(val < dpowers[c])
  9926  00053A  5020               	movf	i2printf@c,w,c
  9927  00053C  0D02               	mullw	2
  9928  00053E  0EFC               	movlw	low _dpowers
  9929  000540  24F3               	addwf	prodl,w,c
  9930  000542  6EF6               	movwf	tblptrl,c
  9931  000544  0EFE               	movlw	high _dpowers
  9932  000546  20F4               	addwfc	prodh,w,c
  9933  000548  6EF7               	movwf	tblptrh,c
  9934  00054A                     	if	1	;There are 3 active tblptr bytes
  9935  00054A  6AF8               	clrf	tblptru,c
  9936  00054C  0E00               	movlw	low (__mediumconst shr (0+16))
  9937  00054E  22F8               	addwfc	tblptru,f,c
  9938  000550                     	endif
  9939  000550  0009               	tblrd		*+
  9940  000552  50F5               	movf	tablat,w,c
  9941  000554  5C1B               	subwf	i2printf@val,w,c
  9942  000556  0009               	tblrd		*+
  9943  000558  50F5               	movf	tablat,w,c
  9944  00055A  581C               	subwfb	i2printf@val+1,w,c
  9945  00055C  A0D8               	btfss	status,0,c
  9946  00055E  D025               	goto	i2l3980
  9947                           
  9948                           ;doprnt.c: 1307: break;
  9949  000560  2A20               	incf	i2printf@c,f,c
  9950  000562  D7E7               	goto	i2l3950
  9951  000564                     i2l3962:
  9952                           
  9953                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  9954  000564  0E01               	movlw	1
  9955  000566  6E20               	movwf	i2printf@c,c
  9956  000568                     i2l3964:
  9957  000568  0E04               	movlw	4
  9958  00056A  1820               	xorwf	i2printf@c,w,c
  9959  00056C  B4D8               	btfsc	status,2,c
  9960  00056E  D01D               	goto	i2l3980
  9961                           
  9962                           ;doprnt.c: 1317: if(val < hexpowers[c])
  9963  000570  5020               	movf	i2printf@c,w,c
  9964  000572  0D02               	mullw	2
  9965  000574  0E06               	movlw	low _hexpowers
  9966  000576  24F3               	addwf	prodl,w,c
  9967  000578  6EF6               	movwf	tblptrl,c
  9968  00057A  0EFF               	movlw	high _hexpowers
  9969  00057C  20F4               	addwfc	prodh,w,c
  9970  00057E  6EF7               	movwf	tblptrh,c
  9971  000580                     	if	1	;There are 3 active tblptr bytes
  9972  000580  6AF8               	clrf	tblptru,c
  9973  000582  0E00               	movlw	low (__mediumconst shr (0+16))
  9974  000584  22F8               	addwfc	tblptru,f,c
  9975  000586                     	endif
  9976  000586  0009               	tblrd		*+
  9977  000588  50F5               	movf	tablat,w,c
  9978  00058A  5C1B               	subwf	i2printf@val,w,c
  9979  00058C  0009               	tblrd		*+
  9980  00058E  50F5               	movf	tablat,w,c
  9981  000590  581C               	subwfb	i2printf@val+1,w,c
  9982  000592  A0D8               	btfss	status,0,c
  9983  000594  D00A               	goto	i2l3980
  9984                           
  9985                           ;doprnt.c: 1318: break;
  9986  000596  2A20               	incf	i2printf@c,f,c
  9987  000598  D7E7               	goto	i2l3964
  9988  00059A                     i2l3978:
  9989  00059A  501D               	movf	i2printf@flag,w,c
  9990  00059C  0B80               	andlw	128
  9991                           
  9992                           ; Switch size 1, requested type "space"
  9993                           ; Number of cases is 2, Range of values is 0 to 128
  9994                           ; switch strategies available:
  9995                           ; Name         Instructions Cycles
  9996                           ; simple_byte            7     4 (average)
  9997                           ;	Chosen strategy is simple_byte
  9998  00059E  0A00               	xorlw	0	; case 0
  9999  0005A0  B4D8               	btfsc	status,2,c
 10000  0005A2  D7C5               	goto	i2l3948
 10001  0005A4  0A80               	xorlw	128	; case 128
 10002  0005A6  B4D8               	btfsc	status,2,c
 10003  0005A8  D7DD               	goto	i2l3962
 10004  0005AA                     i2l3980:
 10005                           
 10006                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10007  0005AA  501E               	movf	i2printf@width,w,c
 10008  0005AC  101F               	iorwf	i2printf@width+1,w,c
 10009  0005AE  B4D8               	btfsc	status,2,c
 10010  0005B0  D009               	goto	i2l3986
 10011  0005B2  C01D  F013         	movff	i2printf@flag,??i2_printf
 10012  0005B6  0E03               	movlw	3
 10013  0005B8  1613               	andwf	??i2_printf,f,c
 10014  0005BA  B4D8               	btfsc	status,2,c
 10015  0005BC  D003               	goto	i2l3986
 10016                           
 10017                           ;doprnt.c: 1346: width--;
 10018  0005BE  061E               	decf	i2printf@width,f,c
 10019  0005C0  A0D8               	btfss	status,0,c
 10020  0005C2  061F               	decf	i2printf@width+1,f,c
 10021  0005C4                     i2l3986:
 10022                           
 10023                           ;doprnt.c: 1381: if(width > c)
 10024  0005C4  0E80               	movlw	128
 10025  0005C6  BE20               	btfsc	i2printf@c,7,c
 10026  0005C8  0E7F               	movlw	127
 10027  0005CA  6E13               	movwf	??i2_printf& (0+255),c
 10028  0005CC  501E               	movf	i2printf@width,w,c
 10029  0005CE  5C20               	subwf	i2printf@c,w,c
 10030  0005D0  501F               	movf	i2printf@width+1,w,c
 10031  0005D2  0A80               	xorlw	128
 10032  0005D4  5813               	subwfb	??i2_printf& (0+255),w,c
 10033  0005D6  B0D8               	btfsc	status,0,c
 10034  0005D8  D007               	goto	i2l3990
 10035                           
 10036                           ;doprnt.c: 1382: width -= c;
 10037  0005DA  5020               	movf	i2printf@c,w,c
 10038  0005DC  5E1E               	subwf	i2printf@width,f,c
 10039  0005DE  0E00               	movlw	0
 10040  0005E0  BE20               	btfsc	i2printf@c,7,c
 10041  0005E2  0EFF               	movlw	255
 10042  0005E4  5A1F               	subwfb	i2printf@width+1,f,c
 10043  0005E6  D004               	goto	i2l3992
 10044  0005E8                     i2l3990:
 10045                           
 10046                           ;doprnt.c: 1383: else
 10047                           ;doprnt.c: 1384: width = 0;
 10048  0005E8  0E00               	movlw	0
 10049  0005EA  6E1F               	movwf	i2printf@width+1,c
 10050  0005EC  0E00               	movlw	0
 10051  0005EE  6E1E               	movwf	i2printf@width,c
 10052  0005F0                     i2l3992:
 10053                           
 10054                           ;doprnt.c: 1387: if(flag & 0x04) {
 10055  0005F0  A41D               	btfss	i2printf@flag,2,c
 10056  0005F2  D014               	goto	i2l4004
 10057                           
 10058                           ;doprnt.c: 1392: if(flag & 0x03)
 10059  0005F4  C01D  F013         	movff	i2printf@flag,??i2_printf
 10060  0005F8  0E03               	movlw	3
 10061  0005FA  1613               	andwf	??i2_printf,f,c
 10062  0005FC  B4D8               	btfsc	status,2,c
 10063  0005FE  D003               	goto	i2l3998
 10064                           
 10065                           ;doprnt.c: 1393: (putch('-') );
 10066  000600  0E2D               	movlw	45
 10067  000602  EC8B  F010         	call	i2_putch
 10068  000606                     i2l3998:
 10069                           
 10070                           ;doprnt.c: 1415: if(width)
 10071  000606  501E               	movf	i2printf@width,w,c
 10072  000608  101F               	iorwf	i2printf@width+1,w,c
 10073  00060A  B4D8               	btfsc	status,2,c
 10074  00060C  D01E               	goto	i2l4014
 10075                           
 10076                           ;doprnt.c: 1417: (putch('0') );
 10077                           
 10078                           ;doprnt.c: 1416: do
 10079  00060E  0E30               	movlw	48
 10080  000610  EC8B  F010         	call	i2_putch
 10081                           
 10082                           ;doprnt.c: 1418: while(--width);
 10083  000614  061E               	decf	i2printf@width,f,c
 10084  000616  A0D8               	btfss	status,0,c
 10085  000618  061F               	decf	i2printf@width+1,f,c
 10086  00061A  D7F5               	goto	i2l3998
 10087  00061C                     i2l4004:
 10088                           
 10089                           ;doprnt.c: 1422: {
 10090                           ;doprnt.c: 1424: if(width
 10091                           ;doprnt.c: 1428: )
 10092  00061C  501E               	movf	i2printf@width,w,c
 10093  00061E  101F               	iorwf	i2printf@width+1,w,c
 10094  000620  B4D8               	btfsc	status,2,c
 10095  000622  D00A               	goto	i2l4010
 10096  000624                     i2l4006:
 10097                           
 10098                           ;doprnt.c: 1430: (putch(' ') );
 10099  000624  0E20               	movlw	32
 10100  000626  EC8B  F010         	call	i2_putch
 10101                           
 10102                           ;doprnt.c: 1431: while(--width);
 10103  00062A  061E               	decf	i2printf@width,f,c
 10104  00062C  A0D8               	btfss	status,0,c
 10105  00062E  061F               	decf	i2printf@width+1,f,c
 10106  000630  501E               	movf	i2printf@width,w,c
 10107  000632  101F               	iorwf	i2printf@width+1,w,c
 10108  000634  A4D8               	btfss	status,2,c
 10109  000636  D7F6               	goto	i2l4006
 10110  000638                     i2l4010:
 10111                           
 10112                           ;doprnt.c: 1438: if(flag & 0x03)
 10113  000638  C01D  F013         	movff	i2printf@flag,??i2_printf
 10114  00063C  0E03               	movlw	3
 10115  00063E  1613               	andwf	??i2_printf,f,c
 10116  000640  B4D8               	btfsc	status,2,c
 10117  000642  D003               	goto	i2l4014
 10118                           
 10119                           ;doprnt.c: 1439: (putch('-') );
 10120  000644  0E2D               	movlw	45
 10121  000646  EC8B  F010         	call	i2_putch
 10122  00064A                     i2l4014:
 10123                           
 10124                           ;doprnt.c: 1469: }
 10125                           ;doprnt.c: 1472: prec = c;
 10126  00064A  C020  F01A         	movff	i2printf@c,i2printf@prec
 10127                           
 10128                           ;doprnt.c: 1474: while(prec--) {
 10129  00064E  D059               	goto	i2l4028
 10130  000650                     i2l4016:
 10131                           
 10132                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10133  000650  501A               	movf	i2printf@prec,w,c
 10134  000652  0D02               	mullw	2
 10135  000654  0EFC               	movlw	low _dpowers
 10136  000656  24F3               	addwf	prodl,w,c
 10137  000658  6EF6               	movwf	tblptrl,c
 10138  00065A  0EFE               	movlw	high _dpowers
 10139  00065C  20F4               	addwfc	prodh,w,c
 10140  00065E  6EF7               	movwf	tblptrh,c
 10141  000660                     	if	1	;There are 3 active tblptr bytes
 10142  000660  6AF8               	clrf	tblptru,c
 10143  000662  0E00               	movlw	low (__mediumconst shr (0+16))
 10144  000664  22F8               	addwfc	tblptru,f,c
 10145  000666                     	endif
 10146  000666  0009               	tblrd		*+
 10147  000668  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 10148  00066C  000A               	tblrd		*-
 10149  00066E  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 10150  000672  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
 10151  000676  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 10152  00067A  EC96  F00C         	call	i2___lwdiv	;wreg free
 10153  00067E  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 10154  000682  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 10155  000686  0E00               	movlw	0
 10156  000688  6E0B               	movwf	i2___lwmod@divisor+1,c
 10157  00068A  0E0A               	movlw	10
 10158  00068C  6E0A               	movwf	i2___lwmod@divisor,c
 10159  00068E  ECED  F00D         	call	i2___lwmod	;wreg free
 10160  000692  5008               	movf	?i2___lwmod,w,c
 10161  000694  0F30               	addlw	48
 10162  000696  6E20               	movwf	i2printf@c,c
 10163                           
 10164                           ;doprnt.c: 1491: break;
 10165  000698  D031               	goto	i2l4026
 10166  00069A                     i2l4018:
 10167                           
 10168                           ;doprnt.c: 1499: {
 10169                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 10170  00069A  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
 10171  00069E  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 10172  0006A2  501A               	movf	i2printf@prec,w,c
 10173  0006A4  0D02               	mullw	2
 10174  0006A6  0E06               	movlw	low _hexpowers
 10175  0006A8  24F3               	addwf	prodl,w,c
 10176  0006AA  6EF6               	movwf	tblptrl,c
 10177  0006AC  0EFF               	movlw	high _hexpowers
 10178  0006AE  20F4               	addwfc	prodh,w,c
 10179  0006B0  6EF7               	movwf	tblptrh,c
 10180  0006B2                     	if	1	;There are 3 active tblptr bytes
 10181  0006B2  6AF8               	clrf	tblptru,c
 10182  0006B4  0E00               	movlw	low (__mediumconst shr (0+16))
 10183  0006B6  22F8               	addwfc	tblptru,f,c
 10184  0006B8                     	endif
 10185  0006B8  0009               	tblrd		*+
 10186  0006BA  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 10187  0006BE  000A               	tblrd		*-
 10188  0006C0  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 10189  0006C4  EC96  F00C         	call	i2___lwdiv	;wreg free
 10190  0006C8  5001               	movf	?i2___lwdiv,w,c
 10191  0006CA  0B0F               	andlw	15
 10192  0006CC  6E17               	movwf	i2printf@idx,c
 10193                           
 10194                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 10195  0006CE  5017               	movf	i2printf@idx,w,c
 10196  0006D0  0D01               	mullw	1
 10197  0006D2  0E3E               	movlw	low STR_16
 10198  0006D4  24F3               	addwf	prodl,w,c
 10199  0006D6  6EF6               	movwf	tblptrl,c
 10200  0006D8  0EFF               	movlw	high STR_16
 10201  0006DA  20F4               	addwfc	prodh,w,c
 10202  0006DC  6EF7               	movwf	tblptrh,c
 10203  0006DE                     	if	1	;There are 3 active tblptr bytes
 10204  0006DE  6AF8               	clrf	tblptru,c
 10205  0006E0  0E00               	movlw	low (__mediumconst shr (0+16))
 10206  0006E2  22F8               	addwfc	tblptru,f,c
 10207  0006E4                     	endif
 10208  0006E4  0008               	tblrd		*
 10209  0006E6  CFF5 F020          	movff	tablat,i2printf@c
 10210                           
 10211                           ;doprnt.c: 1523: }
 10212                           
 10213                           ;doprnt.c: 1508: }
 10214                           ;doprnt.c: 1510: break;
 10215  0006EA  D008               	goto	i2l4026
 10216  0006EC                     i2l4024:
 10217  0006EC  501D               	movf	i2printf@flag,w,c
 10218  0006EE  0B80               	andlw	128
 10219                           
 10220                           ; Switch size 1, requested type "space"
 10221                           ; Number of cases is 2, Range of values is 0 to 128
 10222                           ; switch strategies available:
 10223                           ; Name         Instructions Cycles
 10224                           ; simple_byte            7     4 (average)
 10225                           ;	Chosen strategy is simple_byte
 10226  0006F0  0A00               	xorlw	0	; case 0
 10227  0006F2  B4D8               	btfsc	status,2,c
 10228  0006F4  D7AD               	goto	i2l4016
 10229  0006F6  0A80               	xorlw	128	; case 128
 10230  0006F8  B4D8               	btfsc	status,2,c
 10231  0006FA  D7CF               	goto	i2l4018
 10232  0006FC                     i2l4026:
 10233                           
 10234                           ;doprnt.c: 1524: (putch(c) );
 10235  0006FC  5020               	movf	i2printf@c,w,c
 10236  0006FE  EC8B  F010         	call	i2_putch
 10237  000702                     i2l4028:
 10238  000702  061A               	decf	i2printf@prec,f,c
 10239  000704  281A               	incf	i2printf@prec,w,c
 10240  000706  A4D8               	btfss	status,2,c
 10241  000708  D7F1               	goto	i2l4024
 10242  00070A                     i2l4030:
 10243  00070A  C00D  FFF6         	movff	i2printf@f,tblptrl
 10244  00070E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 10245  000712  4A0D               	infsnz	i2printf@f,f,c
 10246  000714  2A0E               	incf	i2printf@f+1,f,c
 10247  000716                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10248  000716  6AF8               	clrf	tblptru,c
 10249  000718                     	endif
 10250  000718                     	if	0	;tblptru may be non-zero
 10251  000718                     	endif
 10252  000718  0008               	tblrd		*
 10253  00071A  CFF5 F020          	movff	tablat,i2printf@c
 10254  00071E  5020               	movf	i2printf@c,w,c
 10255  000720  B4D8               	btfsc	status,2,c
 10256  000722  0012               	return	
 10257  000724  D66A               	goto	i2l3904
 10258  000726                     __end_ofi2_printf:
 10259                           	opt stack 0
 10260                           tosu	equ	0xFFF
 10261                           tosh	equ	0xFFE
 10262                           tosl	equ	0xFFD
 10263                           pclatu	equ	0xFFB
 10264                           pclath	equ	0xFFA
 10265                           tblptru	equ	0xFF8
 10266                           tblptrh	equ	0xFF7
 10267                           tblptrl	equ	0xFF6
 10268                           tablat	equ	0xFF5
 10269                           prodh	equ	0xFF4
 10270                           prodl	equ	0xFF3
 10271                           intcon	equ	0xFF2
 10272                           intcon2	equ	0xFF1
 10273                           intcon3	equ	0xFF0
 10274                           postinc0	equ	0xFEE
 10275                           fsr0h	equ	0xFEA
 10276                           fsr0l	equ	0xFE9
 10277                           wreg	equ	0xFE8
 10278                           fsr1h	equ	0xFE2
 10279                           fsr1l	equ	0xFE1
 10280                           indf2	equ	0xFDF
 10281                           postinc2	equ	0xFDE
 10282                           postdec2	equ	0xFDD
 10283                           fsr2h	equ	0xFDA
 10284                           fsr2l	equ	0xFD9
 10285                           status	equ	0xFD8
 10286                           
 10287 ;; *************** function i2_putch *****************
 10288 ;; Defined at:
 10289 ;;		line 42 in file "lcd.c"
 10290 ;; Parameters:    Size  Location     Type
 10291 ;;  data            1    wreg     unsigned char 
 10292 ;; Auto vars:     Size  Location     Type
 10293 ;;  data            1    2[COMRAM] unsigned char 
 10294 ;; Return value:  Size  Location     Type
 10295 ;;                  1    wreg      void 
 10296 ;; Registers used:
 10297 ;;		wreg, status,2, status,0, cstack
 10298 ;; Tracked objects:
 10299 ;;		On entry : 0/0
 10300 ;;		On exit  : 0/0
 10301 ;;		Unchanged: 0/0
 10302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10304 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10306 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10307 ;;Total ram usage:        1 bytes
 10308 ;; Hardware stack levels used:    1
 10309 ;; Hardware stack levels required when called:    1
 10310 ;; This function calls:
 10311 ;;		i2_lcdNibble
 10312 ;; This function is called by:
 10313 ;;		i2_printf
 10314 ;; This function uses a non-reentrant model
 10315 ;;
 10316                           
 10317                           	psect	text63
 10318  002116                     __ptext63:
 10319                           	opt stack 0
 10320  002116                     i2_putch:
 10321                           	opt stack 22
 10322                           
 10323                           ;incstack = 0
 10324                           ;i2putch@data stored from wreg
 10325  002116  6E03               	movwf	i2putch@data,c
 10326                           
 10327                           ;lcd.c: 43: LATDbits.LATD2 = 1;
 10328  002118  848C               	bsf	3980,2,c	;volatile
 10329                           
 10330                           ;lcd.c: 44: lcdNibble(data);
 10331  00211A  5003               	movf	i2putch@data,w,c
 10332  00211C  EC41  F00C         	call	i2_lcdNibble
 10333  002120  0012               	return		;funcret
 10334  002122                     __end_ofi2_putch:
 10335                           	opt stack 0
 10336                           tosu	equ	0xFFF
 10337                           tosh	equ	0xFFE
 10338                           tosl	equ	0xFFD
 10339                           pclatu	equ	0xFFB
 10340                           pclath	equ	0xFFA
 10341                           tblptru	equ	0xFF8
 10342                           tblptrh	equ	0xFF7
 10343                           tblptrl	equ	0xFF6
 10344                           tablat	equ	0xFF5
 10345                           prodh	equ	0xFF4
 10346                           prodl	equ	0xFF3
 10347                           intcon	equ	0xFF2
 10348                           intcon2	equ	0xFF1
 10349                           intcon3	equ	0xFF0
 10350                           postinc0	equ	0xFEE
 10351                           fsr0h	equ	0xFEA
 10352                           fsr0l	equ	0xFE9
 10353                           wreg	equ	0xFE8
 10354                           fsr1h	equ	0xFE2
 10355                           fsr1l	equ	0xFE1
 10356                           indf2	equ	0xFDF
 10357                           postinc2	equ	0xFDE
 10358                           postdec2	equ	0xFDD
 10359                           fsr2h	equ	0xFDA
 10360                           fsr2l	equ	0xFD9
 10361                           status	equ	0xFD8
 10362                           
 10363 ;; *************** function i2_isdigit *****************
 10364 ;; Defined at:
 10365 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/isdigit.c"
 10366 ;; Parameters:    Size  Location     Type
 10367 ;;  c               1    wreg     unsigned char 
 10368 ;; Auto vars:     Size  Location     Type
 10369 ;;  c               1    2[COMRAM] unsigned char 
 10370 ;; Return value:  Size  Location     Type
 10371 ;;		None               void
 10372 ;; Registers used:
 10373 ;;		wreg, status,2, status,0
 10374 ;; Tracked objects:
 10375 ;;		On entry : 0/0
 10376 ;;		On exit  : 0/0
 10377 ;;		Unchanged: 0/0
 10378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10380 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10381 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10382 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10383 ;;Total ram usage:        3 bytes
 10384 ;; Hardware stack levels used:    1
 10385 ;; This function calls:
 10386 ;;		Nothing
 10387 ;; This function is called by:
 10388 ;;		i2_printf
 10389 ;; This function uses a non-reentrant model
 10390 ;;
 10391                           
 10392                           	psect	text64
 10393  00204E                     __ptext64:
 10394                           	opt stack 0
 10395  00204E                     i2_isdigit:
 10396                           	opt stack 23
 10397                           
 10398                           ;incstack = 0
 10399                           ;i2isdigit@c stored from wreg
 10400  00204E  6E03               	movwf	i2isdigit@c,c
 10401  002050  0E00               	movlw	0
 10402  002052  6E02               	movwf	i2_isdigit$1503,c
 10403  002054  0E3A               	movlw	58
 10404  002056  6003               	cpfslt	i2isdigit@c,c
 10405  002058  D005               	goto	i2l3344
 10406  00205A  0E2F               	movlw	47
 10407  00205C  6403               	cpfsgt	i2isdigit@c,c
 10408  00205E  D002               	goto	i2l3344
 10409  002060  0E01               	movlw	1
 10410  002062  6E02               	movwf	i2_isdigit$1503,c
 10411  002064                     i2l3344:
 10412  002064  C002  F001         	movff	i2_isdigit$1503,??i2_isdigit
 10413  002068  3001               	rrcf	??i2_isdigit,w,c
 10414  00206A  0012               	return	
 10415  00206C                     __end_ofi2_isdigit:
 10416                           	opt stack 0
 10417                           tosu	equ	0xFFF
 10418                           tosh	equ	0xFFE
 10419                           tosl	equ	0xFFD
 10420                           pclatu	equ	0xFFB
 10421                           pclath	equ	0xFFA
 10422                           tblptru	equ	0xFF8
 10423                           tblptrh	equ	0xFF7
 10424                           tblptrl	equ	0xFF6
 10425                           tablat	equ	0xFF5
 10426                           prodh	equ	0xFF4
 10427                           prodl	equ	0xFF3
 10428                           intcon	equ	0xFF2
 10429                           intcon2	equ	0xFF1
 10430                           intcon3	equ	0xFF0
 10431                           postinc0	equ	0xFEE
 10432                           fsr0h	equ	0xFEA
 10433                           fsr0l	equ	0xFE9
 10434                           wreg	equ	0xFE8
 10435                           fsr1h	equ	0xFE2
 10436                           fsr1l	equ	0xFE1
 10437                           indf2	equ	0xFDF
 10438                           postinc2	equ	0xFDE
 10439                           postdec2	equ	0xFDD
 10440                           fsr2h	equ	0xFDA
 10441                           fsr2l	equ	0xFD9
 10442                           status	equ	0xFD8
 10443                           
 10444 ;; *************** function i2___wmul *****************
 10445 ;; Defined at:
 10446 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/Umul16.c"
 10447 ;; Parameters:    Size  Location     Type
 10448 ;;  multiplier      2    0[COMRAM] unsigned int 
 10449 ;;  multiplicand    2    2[COMRAM] unsigned int 
 10450 ;; Auto vars:     Size  Location     Type
 10451 ;;  __wmul          2    4[COMRAM] unsigned int 
 10452 ;; Return value:  Size  Location     Type
 10453 ;;                  2    0[COMRAM] unsigned int 
 10454 ;; Registers used:
 10455 ;;		wreg, status,2, status,0, prodl, prodh
 10456 ;; Tracked objects:
 10457 ;;		On entry : 0/0
 10458 ;;		On exit  : 0/0
 10459 ;;		Unchanged: 0/0
 10460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10461 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10462 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10464 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10465 ;;Total ram usage:        6 bytes
 10466 ;; Hardware stack levels used:    1
 10467 ;; This function calls:
 10468 ;;		Nothing
 10469 ;; This function is called by:
 10470 ;;		i2_printf
 10471 ;; This function uses a non-reentrant model
 10472 ;;
 10473                           
 10474                           	psect	text65
 10475  001F82                     __ptext65:
 10476                           	opt stack 0
 10477  001F82                     i2___wmul:
 10478                           	opt stack 23
 10479                           
 10480                           ;incstack = 0
 10481  001F82  5001               	movf	i2___wmul@multiplier,w,c
 10482  001F84  0203               	mulwf	i2___wmul@multiplicand,c
 10483  001F86  CFF3 F005          	movff	prodl,i2___wmul@product
 10484  001F8A  CFF4 F006          	movff	prodh,i2___wmul@product+1
 10485  001F8E  5001               	movf	i2___wmul@multiplier,w,c
 10486  001F90  0204               	mulwf	i2___wmul@multiplicand+1,c
 10487  001F92  50F3               	movf	prodl,w,c
 10488  001F94  2606               	addwf	i2___wmul@product+1,f,c
 10489  001F96  5002               	movf	i2___wmul@multiplier+1,w,c
 10490  001F98  0203               	mulwf	i2___wmul@multiplicand,c
 10491  001F9A  50F3               	movf	prodl,w,c
 10492  001F9C  2606               	addwf	i2___wmul@product+1,f,c
 10493  001F9E  C005  F001         	movff	i2___wmul@product,?i2___wmul
 10494  001FA2  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 10495  001FA6  0012               	return	
 10496  001FA8                     __end_ofi2___wmul:
 10497                           	opt stack 0
 10498                           tosu	equ	0xFFF
 10499                           tosh	equ	0xFFE
 10500                           tosl	equ	0xFFD
 10501                           pclatu	equ	0xFFB
 10502                           pclath	equ	0xFFA
 10503                           tblptru	equ	0xFF8
 10504                           tblptrh	equ	0xFF7
 10505                           tblptrl	equ	0xFF6
 10506                           tablat	equ	0xFF5
 10507                           prodh	equ	0xFF4
 10508                           prodl	equ	0xFF3
 10509                           intcon	equ	0xFF2
 10510                           intcon2	equ	0xFF1
 10511                           intcon3	equ	0xFF0
 10512                           postinc0	equ	0xFEE
 10513                           fsr0h	equ	0xFEA
 10514                           fsr0l	equ	0xFE9
 10515                           wreg	equ	0xFE8
 10516                           fsr1h	equ	0xFE2
 10517                           fsr1l	equ	0xFE1
 10518                           indf2	equ	0xFDF
 10519                           postinc2	equ	0xFDE
 10520                           postdec2	equ	0xFDD
 10521                           fsr2h	equ	0xFDA
 10522                           fsr2l	equ	0xFD9
 10523                           status	equ	0xFD8
 10524                           
 10525 ;; *************** function i2___lwmod *****************
 10526 ;; Defined at:
 10527 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
 10528 ;; Parameters:    Size  Location     Type
 10529 ;;  dividend        2    7[COMRAM] unsigned int 
 10530 ;;  divisor         2    9[COMRAM] unsigned int 
 10531 ;; Auto vars:     Size  Location     Type
 10532 ;;  __lwmod         1   11[COMRAM] unsigned char 
 10533 ;; Return value:  Size  Location     Type
 10534 ;;                  2    7[COMRAM] unsigned int 
 10535 ;; Registers used:
 10536 ;;		wreg, status,2, status,0
 10537 ;; Tracked objects:
 10538 ;;		On entry : 0/0
 10539 ;;		On exit  : 0/0
 10540 ;;		Unchanged: 0/0
 10541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10542 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10543 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10545 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10546 ;;Total ram usage:        5 bytes
 10547 ;; Hardware stack levels used:    1
 10548 ;; This function calls:
 10549 ;;		Nothing
 10550 ;; This function is called by:
 10551 ;;		i2_printf
 10552 ;; This function uses a non-reentrant model
 10553 ;;
 10554                           
 10555                           	psect	text66
 10556  001BDA                     __ptext66:
 10557                           	opt stack 0
 10558  001BDA                     i2___lwmod:
 10559                           	opt stack 23
 10560                           
 10561                           ;incstack = 0
 10562  001BDA  500A               	movf	i2___lwmod@divisor,w,c
 10563  001BDC  100B               	iorwf	i2___lwmod@divisor+1,w,c
 10564  001BDE  B4D8               	btfsc	status,2,c
 10565  001BE0  D018               	goto	i2l1221
 10566  001BE2  0E01               	movlw	1
 10567  001BE4  6E0C               	movwf	i2___lwmod@counter,c
 10568  001BE6  D004               	goto	i2l3376
 10569  001BE8                     i2l3374:
 10570  001BE8  90D8               	bcf	status,0,c
 10571  001BEA  360A               	rlcf	i2___lwmod@divisor,f,c
 10572  001BEC  360B               	rlcf	i2___lwmod@divisor+1,f,c
 10573  001BEE  2A0C               	incf	i2___lwmod@counter,f,c
 10574  001BF0                     i2l3376:
 10575  001BF0  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 10576  001BF2  D7FA               	goto	i2l3374
 10577  001BF4                     i2l3378:
 10578  001BF4  500A               	movf	i2___lwmod@divisor,w,c
 10579  001BF6  5C08               	subwf	i2___lwmod@dividend,w,c
 10580  001BF8  500B               	movf	i2___lwmod@divisor+1,w,c
 10581  001BFA  5809               	subwfb	i2___lwmod@dividend+1,w,c
 10582  001BFC  A0D8               	btfss	status,0,c
 10583  001BFE  D004               	goto	i2l3382
 10584  001C00  500A               	movf	i2___lwmod@divisor,w,c
 10585  001C02  5E08               	subwf	i2___lwmod@dividend,f,c
 10586  001C04  500B               	movf	i2___lwmod@divisor+1,w,c
 10587  001C06  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 10588  001C08                     i2l3382:
 10589  001C08  90D8               	bcf	status,0,c
 10590  001C0A  320B               	rrcf	i2___lwmod@divisor+1,f,c
 10591  001C0C  320A               	rrcf	i2___lwmod@divisor,f,c
 10592  001C0E  2E0C               	decfsz	i2___lwmod@counter,f,c
 10593  001C10  D7F1               	goto	i2l3378
 10594  001C12                     i2l1221:
 10595  001C12  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 10596  001C16  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 10597  001C1A  0012               	return		;funcret
 10598  001C1C                     __end_ofi2___lwmod:
 10599                           	opt stack 0
 10600                           tosu	equ	0xFFF
 10601                           tosh	equ	0xFFE
 10602                           tosl	equ	0xFFD
 10603                           pclatu	equ	0xFFB
 10604                           pclath	equ	0xFFA
 10605                           tblptru	equ	0xFF8
 10606                           tblptrh	equ	0xFF7
 10607                           tblptrl	equ	0xFF6
 10608                           tablat	equ	0xFF5
 10609                           prodh	equ	0xFF4
 10610                           prodl	equ	0xFF3
 10611                           intcon	equ	0xFF2
 10612                           intcon2	equ	0xFF1
 10613                           intcon3	equ	0xFF0
 10614                           postinc0	equ	0xFEE
 10615                           fsr0h	equ	0xFEA
 10616                           fsr0l	equ	0xFE9
 10617                           wreg	equ	0xFE8
 10618                           fsr1h	equ	0xFE2
 10619                           fsr1l	equ	0xFE1
 10620                           indf2	equ	0xFDF
 10621                           postinc2	equ	0xFDE
 10622                           postdec2	equ	0xFDD
 10623                           fsr2h	equ	0xFDA
 10624                           fsr2l	equ	0xFD9
 10625                           status	equ	0xFD8
 10626                           
 10627 ;; *************** function i2___lwdiv *****************
 10628 ;; Defined at:
 10629 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
 10630 ;; Parameters:    Size  Location     Type
 10631 ;;  dividend        2    0[COMRAM] unsigned int 
 10632 ;;  divisor         2    2[COMRAM] unsigned int 
 10633 ;; Auto vars:     Size  Location     Type
 10634 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 10635 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 10636 ;; Return value:  Size  Location     Type
 10637 ;;                  2    0[COMRAM] unsigned int 
 10638 ;; Registers used:
 10639 ;;		wreg, status,2, status,0
 10640 ;; Tracked objects:
 10641 ;;		On entry : 0/0
 10642 ;;		On exit  : 0/0
 10643 ;;		Unchanged: 0/0
 10644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10645 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10646 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10648 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10649 ;;Total ram usage:        7 bytes
 10650 ;; Hardware stack levels used:    1
 10651 ;; This function calls:
 10652 ;;		Nothing
 10653 ;; This function is called by:
 10654 ;;		i2_printf
 10655 ;; This function uses a non-reentrant model
 10656 ;;
 10657                           
 10658                           	psect	text67
 10659  00192C                     __ptext67:
 10660                           	opt stack 0
 10661  00192C                     i2___lwdiv:
 10662                           	opt stack 23
 10663                           
 10664                           ;incstack = 0
 10665  00192C  0E00               	movlw	0
 10666  00192E  6E06               	movwf	i2___lwdiv@quotient+1,c
 10667  001930  0E00               	movlw	0
 10668  001932  6E05               	movwf	i2___lwdiv@quotient,c
 10669  001934  5003               	movf	i2___lwdiv@divisor,w,c
 10670  001936  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 10671  001938  B4D8               	btfsc	status,2,c
 10672  00193A  D01C               	goto	i2l1211
 10673  00193C  0E01               	movlw	1
 10674  00193E  6E07               	movwf	i2___lwdiv@counter,c
 10675  001940  D004               	goto	i2l3356
 10676  001942                     i2l3354:
 10677  001942  90D8               	bcf	status,0,c
 10678  001944  3603               	rlcf	i2___lwdiv@divisor,f,c
 10679  001946  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 10680  001948  2A07               	incf	i2___lwdiv@counter,f,c
 10681  00194A                     i2l3356:
 10682  00194A  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 10683  00194C  D7FA               	goto	i2l3354
 10684  00194E                     i2l3358:
 10685  00194E  90D8               	bcf	status,0,c
 10686  001950  3605               	rlcf	i2___lwdiv@quotient,f,c
 10687  001952  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 10688  001954  5003               	movf	i2___lwdiv@divisor,w,c
 10689  001956  5C01               	subwf	i2___lwdiv@dividend,w,c
 10690  001958  5004               	movf	i2___lwdiv@divisor+1,w,c
 10691  00195A  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 10692  00195C  A0D8               	btfss	status,0,c
 10693  00195E  D005               	goto	i2l3366
 10694  001960  5003               	movf	i2___lwdiv@divisor,w,c
 10695  001962  5E01               	subwf	i2___lwdiv@dividend,f,c
 10696  001964  5004               	movf	i2___lwdiv@divisor+1,w,c
 10697  001966  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 10698  001968  8005               	bsf	i2___lwdiv@quotient,0,c
 10699  00196A                     i2l3366:
 10700  00196A  90D8               	bcf	status,0,c
 10701  00196C  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 10702  00196E  3203               	rrcf	i2___lwdiv@divisor,f,c
 10703  001970  2E07               	decfsz	i2___lwdiv@counter,f,c
 10704  001972  D7ED               	goto	i2l3358
 10705  001974                     i2l1211:
 10706  001974  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 10707  001978  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 10708  00197C  0012               	return		;funcret
 10709  00197E                     __end_ofi2___lwdiv:
 10710                           	opt stack 0
 10711                           tosu	equ	0xFFF
 10712                           tosh	equ	0xFFE
 10713                           tosl	equ	0xFFD
 10714                           pclatu	equ	0xFFB
 10715                           pclath	equ	0xFFA
 10716                           tblptru	equ	0xFF8
 10717                           tblptrh	equ	0xFF7
 10718                           tblptrl	equ	0xFF6
 10719                           tablat	equ	0xFF5
 10720                           prodh	equ	0xFF4
 10721                           prodl	equ	0xFF3
 10722                           intcon	equ	0xFF2
 10723                           intcon2	equ	0xFF1
 10724                           intcon3	equ	0xFF0
 10725                           postinc0	equ	0xFEE
 10726                           fsr0h	equ	0xFEA
 10727                           fsr0l	equ	0xFE9
 10728                           wreg	equ	0xFE8
 10729                           fsr1h	equ	0xFE2
 10730                           fsr1l	equ	0xFE1
 10731                           indf2	equ	0xFDF
 10732                           postinc2	equ	0xFDE
 10733                           postdec2	equ	0xFDD
 10734                           fsr2h	equ	0xFDA
 10735                           fsr2l	equ	0xFD9
 10736                           status	equ	0xFD8
 10737                           
 10738 ;; *************** function i2_initLCD *****************
 10739 ;; Defined at:
 10740 ;;		line 26 in file "lcd.c"
 10741 ;; Parameters:    Size  Location     Type
 10742 ;;		None
 10743 ;; Auto vars:     Size  Location     Type
 10744 ;;		None
 10745 ;; Return value:  Size  Location     Type
 10746 ;;                  1    wreg      void 
 10747 ;; Registers used:
 10748 ;;		wreg, status,2, status,0, cstack
 10749 ;; Tracked objects:
 10750 ;;		On entry : 0/0
 10751 ;;		On exit  : 0/0
 10752 ;;		Unchanged: 0/0
 10753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10756 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10757 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10758 ;;Total ram usage:        1 bytes
 10759 ;; Hardware stack levels used:    1
 10760 ;; Hardware stack levels required when called:    2
 10761 ;; This function calls:
 10762 ;;		i2_lcdInst
 10763 ;; This function is called by:
 10764 ;;		_keypressed
 10765 ;;		_tot_sorted
 10766 ;;		_op_time
 10767 ;;		_tin_results
 10768 ;;		_pop_results
 10769 ;; This function uses a non-reentrant model
 10770 ;;
 10771                           
 10772                           	psect	text68
 10773  001B94                     __ptext68:
 10774                           	opt stack 0
 10775  001B94                     i2_initLCD:
 10776                           	opt stack 22
 10777                           
 10778                           ;lcd.c: 27: _delay((unsigned long)((15)*(10000000/4000.0)));
 10779                           
 10780                           ;incstack = 0
 10781  001B94  0E31               	movlw	49
 10782  001B96  6E04               	movwf	??i2_initLCD& (0+255),c
 10783  001B98  0EB2               	movlw	178
 10784  001B9A                     i2u521_47:
 10785  001B9A  2EE8               	decfsz	wreg,f,c
 10786  001B9C  D7FE               	bra	i2u521_47
 10787  001B9E  2E04               	decfsz	??i2_initLCD& (0+255),f,c
 10788  001BA0  D7FC               	bra	i2u521_47
 10789  001BA2  D000               	nop2	
 10790                           
 10791                           ;lcd.c: 28: lcdInst(0b00110011);
 10792  001BA4  0E33               	movlw	51
 10793  001BA6  EC91  F010         	call	i2_lcdInst
 10794                           
 10795                           ;lcd.c: 29: lcdInst(0b00110010);
 10796  001BAA  0E32               	movlw	50
 10797  001BAC  EC91  F010         	call	i2_lcdInst
 10798                           
 10799                           ;lcd.c: 30: lcdInst(0b00101000);
 10800  001BB0  0E28               	movlw	40
 10801  001BB2  EC91  F010         	call	i2_lcdInst
 10802                           
 10803                           ;lcd.c: 31: lcdInst(0b00001111);
 10804  001BB6  0E0F               	movlw	15
 10805  001BB8  EC91  F010         	call	i2_lcdInst
 10806                           
 10807                           ;lcd.c: 32: lcdInst(0b00000110);
 10808  001BBC  0E06               	movlw	6
 10809  001BBE  EC91  F010         	call	i2_lcdInst
 10810                           
 10811                           ;lcd.c: 33: lcdInst(0b00000001);
 10812  001BC2  0E01               	movlw	1
 10813  001BC4  EC91  F010         	call	i2_lcdInst
 10814                           
 10815                           ;lcd.c: 34: _delay((unsigned long)((15)*(10000000/4000.0)));
 10816  001BC8  0E31               	movlw	49
 10817  001BCA  6E04               	movwf	??i2_initLCD& (0+255),c
 10818  001BCC  0EB2               	movlw	178
 10819  001BCE                     i2u522_47:
 10820  001BCE  2EE8               	decfsz	wreg,f,c
 10821  001BD0  D7FE               	bra	i2u522_47
 10822  001BD2  2E04               	decfsz	??i2_initLCD& (0+255),f,c
 10823  001BD4  D7FC               	bra	i2u522_47
 10824  001BD6  D000               	nop2	
 10825  001BD8  0012               	return		;funcret
 10826  001BDA                     __end_ofi2_initLCD:
 10827                           	opt stack 0
 10828                           tosu	equ	0xFFF
 10829                           tosh	equ	0xFFE
 10830                           tosl	equ	0xFFD
 10831                           pclatu	equ	0xFFB
 10832                           pclath	equ	0xFFA
 10833                           tblptru	equ	0xFF8
 10834                           tblptrh	equ	0xFF7
 10835                           tblptrl	equ	0xFF6
 10836                           tablat	equ	0xFF5
 10837                           prodh	equ	0xFF4
 10838                           prodl	equ	0xFF3
 10839                           intcon	equ	0xFF2
 10840                           intcon2	equ	0xFF1
 10841                           intcon3	equ	0xFF0
 10842                           postinc0	equ	0xFEE
 10843                           fsr0h	equ	0xFEA
 10844                           fsr0l	equ	0xFE9
 10845                           wreg	equ	0xFE8
 10846                           fsr1h	equ	0xFE2
 10847                           fsr1l	equ	0xFE1
 10848                           indf2	equ	0xFDF
 10849                           postinc2	equ	0xFDE
 10850                           postdec2	equ	0xFDD
 10851                           fsr2h	equ	0xFDA
 10852                           fsr2l	equ	0xFD9
 10853                           status	equ	0xFD8
 10854                           
 10855 ;; *************** function i2_lcdInst *****************
 10856 ;; Defined at:
 10857 ;;		line 37 in file "lcd.c"
 10858 ;; Parameters:    Size  Location     Type
 10859 ;;  data            1    wreg     unsigned char 
 10860 ;; Auto vars:     Size  Location     Type
 10861 ;;  data            1    2[COMRAM] unsigned char 
 10862 ;; Return value:  Size  Location     Type
 10863 ;;                  1    wreg      void 
 10864 ;; Registers used:
 10865 ;;		wreg, status,2, status,0, cstack
 10866 ;; Tracked objects:
 10867 ;;		On entry : 0/0
 10868 ;;		On exit  : 0/0
 10869 ;;		Unchanged: 0/0
 10870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10872 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10874 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10875 ;;Total ram usage:        1 bytes
 10876 ;; Hardware stack levels used:    1
 10877 ;; Hardware stack levels required when called:    1
 10878 ;; This function calls:
 10879 ;;		i2_lcdNibble
 10880 ;; This function is called by:
 10881 ;;		_keypressed
 10882 ;;		_tot_sorted
 10883 ;;		_op_time
 10884 ;;		_tin_results
 10885 ;;		_pop_results
 10886 ;;		i2_initLCD
 10887 ;; This function uses a non-reentrant model
 10888 ;;
 10889                           
 10890                           	psect	text69
 10891  002122                     __ptext69:
 10892                           	opt stack 0
 10893  002122                     i2_lcdInst:
 10894                           	opt stack 23
 10895                           
 10896                           ;incstack = 0
 10897                           ;i2lcdInst@data stored from wreg
 10898  002122  6E03               	movwf	i2lcdInst@data,c
 10899                           
 10900                           ;lcd.c: 38: LATDbits.LATD2 = 0;
 10901  002124  948C               	bcf	3980,2,c	;volatile
 10902                           
 10903                           ;lcd.c: 39: lcdNibble(data);
 10904  002126  5003               	movf	i2lcdInst@data,w,c
 10905  002128  EC41  F00C         	call	i2_lcdNibble
 10906  00212C  0012               	return		;funcret
 10907  00212E                     __end_ofi2_lcdInst:
 10908                           	opt stack 0
 10909                           tosu	equ	0xFFF
 10910                           tosh	equ	0xFFE
 10911                           tosl	equ	0xFFD
 10912                           pclatu	equ	0xFFB
 10913                           pclath	equ	0xFFA
 10914                           tblptru	equ	0xFF8
 10915                           tblptrh	equ	0xFF7
 10916                           tblptrl	equ	0xFF6
 10917                           tablat	equ	0xFF5
 10918                           prodh	equ	0xFF4
 10919                           prodl	equ	0xFF3
 10920                           intcon	equ	0xFF2
 10921                           intcon2	equ	0xFF1
 10922                           intcon3	equ	0xFF0
 10923                           postinc0	equ	0xFEE
 10924                           fsr0h	equ	0xFEA
 10925                           fsr0l	equ	0xFE9
 10926                           wreg	equ	0xFE8
 10927                           fsr1h	equ	0xFE2
 10928                           fsr1l	equ	0xFE1
 10929                           indf2	equ	0xFDF
 10930                           postinc2	equ	0xFDE
 10931                           postdec2	equ	0xFDD
 10932                           fsr2h	equ	0xFDA
 10933                           fsr2l	equ	0xFD9
 10934                           status	equ	0xFD8
 10935                           
 10936 ;; *************** function i2_lcdNibble *****************
 10937 ;; Defined at:
 10938 ;;		line 47 in file "lcd.c"
 10939 ;; Parameters:    Size  Location     Type
 10940 ;;  data            1    wreg     unsigned char 
 10941 ;; Auto vars:     Size  Location     Type
 10942 ;;  data            1    1[COMRAM] unsigned char 
 10943 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 10944 ;; Return value:  Size  Location     Type
 10945 ;;                  1    wreg      void 
 10946 ;; Registers used:
 10947 ;;		wreg, status,2, status,0
 10948 ;; Tracked objects:
 10949 ;;		On entry : 0/0
 10950 ;;		On exit  : 0/0
 10951 ;;		Unchanged: 0/0
 10952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10954 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10956 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10957 ;;Total ram usage:        2 bytes
 10958 ;; Hardware stack levels used:    1
 10959 ;; This function calls:
 10960 ;;		Nothing
 10961 ;; This function is called by:
 10962 ;;		i2_lcdInst
 10963 ;;		i2_putch
 10964 ;; This function uses a non-reentrant model
 10965 ;;
 10966                           
 10967                           	psect	text70
 10968  001882                     __ptext70:
 10969                           	opt stack 0
 10970  001882                     i2_lcdNibble:
 10971                           	opt stack 22
 10972                           
 10973                           ;incstack = 0
 10974                           ;i2lcdNibble@data stored from wreg
 10975  001882  6E02               	movwf	i2lcdNibble@data,c
 10976                           
 10977                           ;lcd.c: 49: char temp = data & 0xF0;
 10978  001884  5002               	movf	i2lcdNibble@data,w,c
 10979  001886  0BF0               	andlw	240
 10980  001888  6E01               	movwf	i2lcdNibble@temp,c
 10981                           
 10982                           ;lcd.c: 50: LATD = LATD & 0x0F;
 10983  00188A  508C               	movf	3980,w,c	;volatile
 10984  00188C  0B0F               	andlw	15
 10985  00188E  6E8C               	movwf	3980,c	;volatile
 10986                           
 10987                           ;lcd.c: 51: LATD = temp | LATD;
 10988  001890  5001               	movf	i2lcdNibble@temp,w,c
 10989  001892  108C               	iorwf	3980,w,c	;volatile
 10990  001894  6E8C               	movwf	3980,c	;volatile
 10991                           
 10992                           ;lcd.c: 53: LATDbits.LATD3 = 0;
 10993  001896  968C               	bcf	3980,3,c	;volatile
 10994                           
 10995                           ;lcd.c: 54: _delay((unsigned long)((25)*(10000000/4000000.0)));
 10996  001898  0E14               	movlw	20
 10997  00189A                     i2u523_47:
 10998  00189A  2EE8               	decfsz	wreg,f,c
 10999  00189C  D7FE               	bra	i2u523_47
 11000  00189E  D000               	nop2	
 11001                           
 11002                           ;lcd.c: 55: LATDbits.LATD3 = 1;
 11003  0018A0  868C               	bsf	3980,3,c	;volatile
 11004                           
 11005                           ;lcd.c: 56: _delay((unsigned long)((25)*(10000000/4000000.0)));
 11006  0018A2  0E14               	movlw	20
 11007  0018A4                     i2u524_47:
 11008  0018A4  2EE8               	decfsz	wreg,f,c
 11009  0018A6  D7FE               	bra	i2u524_47
 11010  0018A8  D000               	nop2	
 11011                           
 11012                           ;lcd.c: 58: data = data << 4;
 11013  0018AA  3802               	swapf	i2lcdNibble@data,w,c
 11014  0018AC  0BF0               	andlw	240
 11015  0018AE  6E02               	movwf	i2lcdNibble@data,c
 11016                           
 11017                           ;lcd.c: 60: temp = data & 0xF0;
 11018  0018B0  5002               	movf	i2lcdNibble@data,w,c
 11019  0018B2  0BF0               	andlw	240
 11020  0018B4  6E01               	movwf	i2lcdNibble@temp,c
 11021                           
 11022                           ;lcd.c: 61: LATD = LATD & 0x0F;
 11023  0018B6  508C               	movf	3980,w,c	;volatile
 11024  0018B8  0B0F               	andlw	15
 11025  0018BA  6E8C               	movwf	3980,c	;volatile
 11026                           
 11027                           ;lcd.c: 62: LATD = temp | LATD;
 11028  0018BC  5001               	movf	i2lcdNibble@temp,w,c
 11029  0018BE  108C               	iorwf	3980,w,c	;volatile
 11030  0018C0  6E8C               	movwf	3980,c	;volatile
 11031                           
 11032                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 11033  0018C2  968C               	bcf	3980,3,c	;volatile
 11034                           
 11035                           ;lcd.c: 65: _delay((unsigned long)((25)*(10000000/4000000.0)));
 11036  0018C4  0E14               	movlw	20
 11037  0018C6                     i2u525_47:
 11038  0018C6  2EE8               	decfsz	wreg,f,c
 11039  0018C8  D7FE               	bra	i2u525_47
 11040  0018CA  D000               	nop2	
 11041                           
 11042                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 11043  0018CC  868C               	bsf	3980,3,c	;volatile
 11044                           
 11045                           ;lcd.c: 67: _delay((unsigned long)((25)*(10000000/4000000.0)));
 11046  0018CE  0E14               	movlw	20
 11047  0018D0                     i2u526_47:
 11048  0018D0  2EE8               	decfsz	wreg,f,c
 11049  0018D2  D7FE               	bra	i2u526_47
 11050  0018D4  D000               	nop2	
 11051  0018D6  0012               	return		;funcret
 11052  0018D8                     __end_ofi2_lcdNibble:
 11053                           	opt stack 0
 11054                           tosu	equ	0xFFF
 11055                           tosh	equ	0xFFE
 11056                           tosl	equ	0xFFD
 11057                           pclatu	equ	0xFFB
 11058                           pclath	equ	0xFFA
 11059                           tblptru	equ	0xFF8
 11060                           tblptrh	equ	0xFF7
 11061                           tblptrl	equ	0xFF6
 11062                           tablat	equ	0xFF5
 11063                           prodh	equ	0xFF4
 11064                           prodl	equ	0xFF3
 11065                           intcon	equ	0xFF2
 11066                           intcon2	equ	0xFF1
 11067                           intcon3	equ	0xFF0
 11068                           postinc0	equ	0xFEE
 11069                           fsr0h	equ	0xFEA
 11070                           fsr0l	equ	0xFE9
 11071                           wreg	equ	0xFE8
 11072                           fsr1h	equ	0xFE2
 11073                           fsr1l	equ	0xFE1
 11074                           indf2	equ	0xFDF
 11075                           postinc2	equ	0xFDE
 11076                           postdec2	equ	0xFDD
 11077                           fsr2h	equ	0xFDA
 11078                           fsr2l	equ	0xFD9
 11079                           status	equ	0xFD8
 11080                           
 11081 ;; *************** function i2___awdiv *****************
 11082 ;; Defined at:
 11083 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awdiv.c"
 11084 ;; Parameters:    Size  Location     Type
 11085 ;;  dividend        2    0[COMRAM] int 
 11086 ;;  divisor         2    2[COMRAM] int 
 11087 ;; Auto vars:     Size  Location     Type
 11088 ;;  __awdiv         2    6[COMRAM] int 
 11089 ;;  __awdiv         1    5[COMRAM] unsigned char 
 11090 ;;  __awdiv         1    4[COMRAM] unsigned char 
 11091 ;; Return value:  Size  Location     Type
 11092 ;;                  2    0[COMRAM] int 
 11093 ;; Registers used:
 11094 ;;		wreg, status,2, status,0
 11095 ;; Tracked objects:
 11096 ;;		On entry : 0/0
 11097 ;;		On exit  : 0/0
 11098 ;;		Unchanged: 0/0
 11099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11100 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11101 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11103 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11104 ;;Total ram usage:        8 bytes
 11105 ;; Hardware stack levels used:    1
 11106 ;; This function calls:
 11107 ;;		Nothing
 11108 ;; This function is called by:
 11109 ;;		_op_time
 11110 ;; This function uses a non-reentrant model
 11111 ;;
 11112                           
 11113                           	psect	text71
 11114  0014C2                     __ptext71:
 11115                           	opt stack 0
 11116  0014C2                     i2___awdiv:
 11117                           	opt stack 23
 11118                           
 11119                           ;incstack = 0
 11120  0014C2  0E00               	movlw	0
 11121  0014C4  6E06               	movwf	i2___awdiv@sign,c
 11122  0014C6  AE04               	btfss	i2___awdiv@divisor+1,7,c
 11123  0014C8  D006               	goto	i2l4040
 11124  0014CA  6C03               	negf	i2___awdiv@divisor,c
 11125  0014CC  1E04               	comf	i2___awdiv@divisor+1,f,c
 11126  0014CE  B0D8               	btfsc	status,0,c
 11127  0014D0  2A04               	incf	i2___awdiv@divisor+1,f,c
 11128  0014D2  0E01               	movlw	1
 11129  0014D4  6E06               	movwf	i2___awdiv@sign,c
 11130  0014D6                     i2l4040:
 11131  0014D6  AE02               	btfss	i2___awdiv@dividend+1,7,c
 11132  0014D8  D006               	goto	i2l4046
 11133  0014DA  6C01               	negf	i2___awdiv@dividend,c
 11134  0014DC  1E02               	comf	i2___awdiv@dividend+1,f,c
 11135  0014DE  B0D8               	btfsc	status,0,c
 11136  0014E0  2A02               	incf	i2___awdiv@dividend+1,f,c
 11137  0014E2  0E01               	movlw	1
 11138  0014E4  1A06               	xorwf	i2___awdiv@sign,f,c
 11139  0014E6                     i2l4046:
 11140  0014E6  0E00               	movlw	0
 11141  0014E8  6E08               	movwf	i2___awdiv@quotient+1,c
 11142  0014EA  0E00               	movlw	0
 11143  0014EC  6E07               	movwf	i2___awdiv@quotient,c
 11144  0014EE  5003               	movf	i2___awdiv@divisor,w,c
 11145  0014F0  1004               	iorwf	i2___awdiv@divisor+1,w,c
 11146  0014F2  B4D8               	btfsc	status,2,c
 11147  0014F4  D01C               	goto	i2l4068
 11148  0014F6  0E01               	movlw	1
 11149  0014F8  6E05               	movwf	i2___awdiv@counter,c
 11150  0014FA  D004               	goto	i2l4054
 11151  0014FC                     i2l4052:
 11152  0014FC  90D8               	bcf	status,0,c
 11153  0014FE  3603               	rlcf	i2___awdiv@divisor,f,c
 11154  001500  3604               	rlcf	i2___awdiv@divisor+1,f,c
 11155  001502  2A05               	incf	i2___awdiv@counter,f,c
 11156  001504                     i2l4054:
 11157  001504  AE04               	btfss	i2___awdiv@divisor+1,7,c
 11158  001506  D7FA               	goto	i2l4052
 11159  001508                     i2l4056:
 11160  001508  90D8               	bcf	status,0,c
 11161  00150A  3607               	rlcf	i2___awdiv@quotient,f,c
 11162  00150C  3608               	rlcf	i2___awdiv@quotient+1,f,c
 11163  00150E  5003               	movf	i2___awdiv@divisor,w,c
 11164  001510  5C01               	subwf	i2___awdiv@dividend,w,c
 11165  001512  5004               	movf	i2___awdiv@divisor+1,w,c
 11166  001514  5802               	subwfb	i2___awdiv@dividend+1,w,c
 11167  001516  A0D8               	btfss	status,0,c
 11168  001518  D005               	goto	i2l4064
 11169  00151A  5003               	movf	i2___awdiv@divisor,w,c
 11170  00151C  5E01               	subwf	i2___awdiv@dividend,f,c
 11171  00151E  5004               	movf	i2___awdiv@divisor+1,w,c
 11172  001520  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 11173  001522  8007               	bsf	i2___awdiv@quotient,0,c
 11174  001524                     i2l4064:
 11175  001524  90D8               	bcf	status,0,c
 11176  001526  3204               	rrcf	i2___awdiv@divisor+1,f,c
 11177  001528  3203               	rrcf	i2___awdiv@divisor,f,c
 11178  00152A  2E05               	decfsz	i2___awdiv@counter,f,c
 11179  00152C  D7ED               	goto	i2l4056
 11180  00152E                     i2l4068:
 11181  00152E  5006               	movf	i2___awdiv@sign,w,c
 11182  001530  B4D8               	btfsc	status,2,c
 11183  001532  D004               	goto	i2l4072
 11184  001534  6C07               	negf	i2___awdiv@quotient,c
 11185  001536  1E08               	comf	i2___awdiv@quotient+1,f,c
 11186  001538  B0D8               	btfsc	status,0,c
 11187  00153A  2A08               	incf	i2___awdiv@quotient+1,f,c
 11188  00153C                     i2l4072:
 11189  00153C  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 11190  001540  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 11191  001544  0012               	return	
 11192  001546                     __end_ofi2___awdiv:
 11193                           	opt stack 0
 11194                           tosu	equ	0xFFF
 11195                           tosh	equ	0xFFE
 11196                           tosl	equ	0xFFD
 11197                           pclatu	equ	0xFFB
 11198                           pclath	equ	0xFFA
 11199                           tblptru	equ	0xFF8
 11200                           tblptrh	equ	0xFF7
 11201                           tblptrl	equ	0xFF6
 11202                           tablat	equ	0xFF5
 11203                           prodh	equ	0xFF4
 11204                           prodl	equ	0xFF3
 11205                           intcon	equ	0xFF2
 11206                           intcon2	equ	0xFF1
 11207                           intcon3	equ	0xFF0
 11208                           postinc0	equ	0xFEE
 11209                           fsr0h	equ	0xFEA
 11210                           fsr0l	equ	0xFE9
 11211                           wreg	equ	0xFE8
 11212                           fsr1h	equ	0xFE2
 11213                           fsr1l	equ	0xFE1
 11214                           indf2	equ	0xFDF
 11215                           postinc2	equ	0xFDE
 11216                           postdec2	equ	0xFDD
 11217                           fsr2h	equ	0xFDA
 11218                           fsr2l	equ	0xFD9
 11219                           status	equ	0xFD8
 11220                           
 11221 ;; *************** function ___awmod *****************
 11222 ;; Defined at:
 11223 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awmod.c"
 11224 ;; Parameters:    Size  Location     Type
 11225 ;;  dividend        2    0[COMRAM] int 
 11226 ;;  divisor         2    2[COMRAM] int 
 11227 ;; Auto vars:     Size  Location     Type
 11228 ;;  sign            1    5[COMRAM] unsigned char 
 11229 ;;  counter         1    4[COMRAM] unsigned char 
 11230 ;; Return value:  Size  Location     Type
 11231 ;;                  2    0[COMRAM] int 
 11232 ;; Registers used:
 11233 ;;		wreg, status,2, status,0
 11234 ;; Tracked objects:
 11235 ;;		On entry : 0/0
 11236 ;;		On exit  : 0/0
 11237 ;;		Unchanged: 0/0
 11238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11239 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11240 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11242 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11243 ;;Total ram usage:        6 bytes
 11244 ;; Hardware stack levels used:    1
 11245 ;; This function calls:
 11246 ;;		Nothing
 11247 ;; This function is called by:
 11248 ;;		_op_time
 11249 ;; This function uses a non-reentrant model
 11250 ;;
 11251                           
 11252                           	psect	text72
 11253  0015BE                     __ptext72:
 11254                           	opt stack 0
 11255  0015BE                     ___awmod:
 11256                           	opt stack 23
 11257                           
 11258                           ;incstack = 0
 11259  0015BE  0E00               	movlw	0
 11260  0015C0  6E06               	movwf	___awmod@sign,c
 11261  0015C2  AE02               	btfss	___awmod@dividend+1,7,c
 11262  0015C4  D006               	goto	i2l3838
 11263  0015C6  6C01               	negf	___awmod@dividend,c
 11264  0015C8  1E02               	comf	___awmod@dividend+1,f,c
 11265  0015CA  B0D8               	btfsc	status,0,c
 11266  0015CC  2A02               	incf	___awmod@dividend+1,f,c
 11267  0015CE  0E01               	movlw	1
 11268  0015D0  6E06               	movwf	___awmod@sign,c
 11269  0015D2                     i2l3838:
 11270  0015D2  AE04               	btfss	___awmod@divisor+1,7,c
 11271  0015D4  D004               	goto	i2l3842
 11272  0015D6  6C03               	negf	___awmod@divisor,c
 11273  0015D8  1E04               	comf	___awmod@divisor+1,f,c
 11274  0015DA  B0D8               	btfsc	status,0,c
 11275  0015DC  2A04               	incf	___awmod@divisor+1,f,c
 11276  0015DE                     i2l3842:
 11277  0015DE  5003               	movf	___awmod@divisor,w,c
 11278  0015E0  1004               	iorwf	___awmod@divisor+1,w,c
 11279  0015E2  B4D8               	btfsc	status,2,c
 11280  0015E4  D018               	goto	i2l3858
 11281  0015E6  0E01               	movlw	1
 11282  0015E8  6E05               	movwf	___awmod@counter,c
 11283  0015EA  D004               	goto	i2l3848
 11284  0015EC                     i2l3846:
 11285  0015EC  90D8               	bcf	status,0,c
 11286  0015EE  3603               	rlcf	___awmod@divisor,f,c
 11287  0015F0  3604               	rlcf	___awmod@divisor+1,f,c
 11288  0015F2  2A05               	incf	___awmod@counter,f,c
 11289  0015F4                     i2l3848:
 11290  0015F4  AE04               	btfss	___awmod@divisor+1,7,c
 11291  0015F6  D7FA               	goto	i2l3846
 11292  0015F8                     i2l3850:
 11293  0015F8  5003               	movf	___awmod@divisor,w,c
 11294  0015FA  5C01               	subwf	___awmod@dividend,w,c
 11295  0015FC  5004               	movf	___awmod@divisor+1,w,c
 11296  0015FE  5802               	subwfb	___awmod@dividend+1,w,c
 11297  001600  A0D8               	btfss	status,0,c
 11298  001602  D004               	goto	i2l3854
 11299  001604  5003               	movf	___awmod@divisor,w,c
 11300  001606  5E01               	subwf	___awmod@dividend,f,c
 11301  001608  5004               	movf	___awmod@divisor+1,w,c
 11302  00160A  5A02               	subwfb	___awmod@dividend+1,f,c
 11303  00160C                     i2l3854:
 11304  00160C  90D8               	bcf	status,0,c
 11305  00160E  3204               	rrcf	___awmod@divisor+1,f,c
 11306  001610  3203               	rrcf	___awmod@divisor,f,c
 11307  001612  2E05               	decfsz	___awmod@counter,f,c
 11308  001614  D7F1               	goto	i2l3850
 11309  001616                     i2l3858:
 11310  001616  5006               	movf	___awmod@sign,w,c
 11311  001618  B4D8               	btfsc	status,2,c
 11312  00161A  D004               	goto	i2l3862
 11313  00161C  6C01               	negf	___awmod@dividend,c
 11314  00161E  1E02               	comf	___awmod@dividend+1,f,c
 11315  001620  B0D8               	btfsc	status,0,c
 11316  001622  2A02               	incf	___awmod@dividend+1,f,c
 11317  001624                     i2l3862:
 11318  001624  C001  F001         	movff	___awmod@dividend,?___awmod
 11319  001628  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 11320  00162C  0012               	return	
 11321  00162E                     __end_of___awmod:
 11322                           	opt stack 0
 11323                           tosu	equ	0xFFF
 11324                           tosh	equ	0xFFE
 11325                           tosl	equ	0xFFD
 11326                           pclatu	equ	0xFFB
 11327                           pclath	equ	0xFFA
 11328                           tblptru	equ	0xFF8
 11329                           tblptrh	equ	0xFF7
 11330                           tblptrl	equ	0xFF6
 11331                           tablat	equ	0xFF5
 11332                           prodh	equ	0xFF4
 11333                           prodl	equ	0xFF3
 11334                           intcon	equ	0xFF2
 11335                           intcon2	equ	0xFF1
 11336                           intcon3	equ	0xFF0
 11337                           postinc0	equ	0xFEE
 11338                           fsr0h	equ	0xFEA
 11339                           fsr0l	equ	0xFE9
 11340                           wreg	equ	0xFE8
 11341                           fsr1h	equ	0xFE2
 11342                           fsr1l	equ	0xFE1
 11343                           indf2	equ	0xFDF
 11344                           postinc2	equ	0xFDE
 11345                           postdec2	equ	0xFDD
 11346                           fsr2h	equ	0xFDA
 11347                           fsr2l	equ	0xFD9
 11348                           status	equ	0xFD8
 11349                           tosu	equ	0xFFF
 11350                           tosh	equ	0xFFE
 11351                           tosl	equ	0xFFD
 11352                           pclatu	equ	0xFFB
 11353                           pclath	equ	0xFFA
 11354                           tblptru	equ	0xFF8
 11355                           tblptrh	equ	0xFF7
 11356                           tblptrl	equ	0xFF6
 11357                           tablat	equ	0xFF5
 11358                           prodh	equ	0xFF4
 11359                           prodl	equ	0xFF3
 11360                           intcon	equ	0xFF2
 11361                           intcon2	equ	0xFF1
 11362                           intcon3	equ	0xFF0
 11363                           postinc0	equ	0xFEE
 11364                           fsr0h	equ	0xFEA
 11365                           fsr0l	equ	0xFE9
 11366                           wreg	equ	0xFE8
 11367                           fsr1h	equ	0xFE2
 11368                           fsr1l	equ	0xFE1
 11369                           indf2	equ	0xFDF
 11370                           postinc2	equ	0xFDE
 11371                           postdec2	equ	0xFDD
 11372                           fsr2h	equ	0xFDA
 11373                           fsr2l	equ	0xFD9
 11374                           status	equ	0xFD8
 11375                           
 11376                           	psect	text73
 11377  000000                     __ptext73:
 11378                           	opt stack 0
 11379                           tosu	equ	0xFFF
 11380                           tosh	equ	0xFFE
 11381                           tosl	equ	0xFFD
 11382                           pclatu	equ	0xFFB
 11383                           pclath	equ	0xFFA
 11384                           tblptru	equ	0xFF8
 11385                           tblptrh	equ	0xFF7
 11386                           tblptrl	equ	0xFF6
 11387                           tablat	equ	0xFF5
 11388                           prodh	equ	0xFF4
 11389                           prodl	equ	0xFF3
 11390                           intcon	equ	0xFF2
 11391                           intcon2	equ	0xFF1
 11392                           intcon3	equ	0xFF0
 11393                           postinc0	equ	0xFEE
 11394                           fsr0h	equ	0xFEA
 11395                           fsr0l	equ	0xFE9
 11396                           wreg	equ	0xFE8
 11397                           fsr1h	equ	0xFE2
 11398                           fsr1l	equ	0xFE1
 11399                           indf2	equ	0xFDF
 11400                           postinc2	equ	0xFDE
 11401                           postdec2	equ	0xFDD
 11402                           fsr2h	equ	0xFDA
 11403                           fsr2l	equ	0xFD9
 11404                           status	equ	0xFD8
 11405                           
 11406                           	psect	rparam
 11407  0000                     tosu	equ	0xFFF
 11408                           tosh	equ	0xFFE
 11409                           tosl	equ	0xFFD
 11410                           pclatu	equ	0xFFB
 11411                           pclath	equ	0xFFA
 11412                           tblptru	equ	0xFF8
 11413                           tblptrh	equ	0xFF7
 11414                           tblptrl	equ	0xFF6
 11415                           tablat	equ	0xFF5
 11416                           prodh	equ	0xFF4
 11417                           prodl	equ	0xFF3
 11418                           intcon	equ	0xFF2
 11419                           intcon2	equ	0xFF1
 11420                           intcon3	equ	0xFF0
 11421                           postinc0	equ	0xFEE
 11422                           fsr0h	equ	0xFEA
 11423                           fsr0l	equ	0xFE9
 11424                           wreg	equ	0xFE8
 11425                           fsr1h	equ	0xFE2
 11426                           fsr1l	equ	0xFE1
 11427                           indf2	equ	0xFDF
 11428                           postinc2	equ	0xFDE
 11429                           postdec2	equ	0xFDD
 11430                           fsr2h	equ	0xFDA
 11431                           fsr2l	equ	0xFD9
 11432                           status	equ	0xFD8
 11433                           
 11434                           	psect	temp
 11435  00004F                     btemp:
 11436                           	opt stack 0
 11437  00004F                     	ds	1
 11438  0000                     int$flags	set	btemp
 11439                           tosu	equ	0xFFF
 11440                           tosh	equ	0xFFE
 11441                           tosl	equ	0xFFD
 11442                           pclatu	equ	0xFFB
 11443                           pclath	equ	0xFFA
 11444                           tblptru	equ	0xFF8
 11445                           tblptrh	equ	0xFF7
 11446                           tblptrl	equ	0xFF6
 11447                           tablat	equ	0xFF5
 11448                           prodh	equ	0xFF4
 11449                           prodl	equ	0xFF3
 11450                           intcon	equ	0xFF2
 11451                           intcon2	equ	0xFF1
 11452                           intcon3	equ	0xFF0
 11453                           postinc0	equ	0xFEE
 11454                           fsr0h	equ	0xFEA
 11455                           fsr0l	equ	0xFE9
 11456                           wreg	equ	0xFE8
 11457                           fsr1h	equ	0xFE2
 11458                           fsr1l	equ	0xFE1
 11459                           indf2	equ	0xFDF
 11460                           postinc2	equ	0xFDE
 11461                           postdec2	equ	0xFDD
 11462                           fsr2h	equ	0xFDA
 11463                           fsr2l	equ	0xFD9
 11464                           status	equ	0xFD8


Data Sizes:
    Strings     234
    Constant    42
    Data        0
    BSS         59
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     62      78
    BANK0           128     43      86
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_15(CODE[13]), STR_14(CODE[15]), STR_13(CODE[15]), STR_12(CODE[17]), 
		 -> STR_11(CODE[22]), STR_10(CODE[19]), STR_9(CODE[17]), STR_8(CODE[17]), 
		 -> STR_7(CODE[17]), STR_6(CODE[11]), STR_5(CODE[9]), STR_4(CODE[17]), 
		 -> STR_3(CODE[15]), STR_2(CODE[13]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    topDistributionState	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), top_distribution_move(), top_distribution_prepare(), top_distribution_idle(), 

    topRockerState	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), top_rocker_restore(), top_rocker_release(), solenoids_back(), 
		 -> solenoids_out(), top_rocker_idle(), 

    bottomRockerState	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), bottom_rocker_restore(), bottom_rocker_release(), bottom_rocker_detect(), 
		 -> bottom_rocker_idle(), 

    bottomDistributionState	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), bottom_distribution_move(), bottom_distribution_prepare(), bottom_distribution_idle(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _keypressed in COMRAM

    _keypressed->i2_printf
    _tot_sorted->i2_printf
    _tin_results->i2_printf
    _pop_results->i2_printf
    _op_time->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _main->_results
    _startSorting->_printf
    _top_rocker_restore->_top_servo_leftTilt
    _top_rocker_release->_top_servo_rightTilt
    _top_rocker_idle->_initLCD
    _top_distribution_prepare->_top_distribution_motor_ccw
    _top_distribution_prepare->_top_distribution_motor_cw
    _top_distribution_move->_top_distribution_motor_ccw
    _top_distribution_move->_top_distribution_motor_ccw2
    _top_distribution_move->_top_distribution_motor_cw
    _top_distribution_move->_top_distribution_motor_cw2
    _solenoids_out->_pop_out
    _solenoids_back->_go_back
    _done_sorting->___wmul
    _bottom_rocker_restore->_bottom_servo_leftTilt
    _bottom_rocker_release->_bottom_servo_rightTilt
    _bottom_rocker_idle->_bottom_servo_rightTilt
    _bottom_distribution_prepare->_bottom_distribution_motor_ccw
    _bottom_distribution_prepare->_bottom_distribution_motor_cw
    _bottom_distribution_move->_bottom_distribution_motor_ccw
    _bottom_distribution_move->_bottom_distribution_motor_ccw2
    _bottom_distribution_move->_bottom_distribution_motor_cw
    _bottom_distribution_move->_bottom_distribution_motor_cw2
    _standby->_printf
    _I2C_Master_Read->_I2C_Master_Wait
    _set_time->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _results->_printf
    _printf->___wmul
    _putch->_lcdNibble
    ___wmul->___awdiv
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   27279
                    _I2C_Master_Init
                       _done_sorting
                            _initLCD
                            _results
                           _set_time
                            _standby
                       _startSorting
 ---------------------------------------------------------------------------------
 (1) _startSorting                                         4     4      0   10079
                                             36 BANK0      4     4      0
                   Absolute function *
           _bottom_distribution_idle *
           _bottom_distribution_move *
        _bottom_distribution_prepare *
               _bottom_rocker_detect *
                 _bottom_rocker_idle *
              _bottom_rocker_release *
              _bottom_rocker_restore *
                       _done_sorting
                            _initLCD
                     _initialization
                            _lcdInst
                             _printf
                     _solenoids_back *
                      _solenoids_out *
              _top_distribution_idle *
              _top_distribution_move *
           _top_distribution_prepare *
                    _top_rocker_idle *
                 _top_rocker_release *
                 _top_rocker_restore *
 ---------------------------------------------------------------------------------
 (2) _top_rocker_restore                                   0     0      0      68
                 _top_servo_leftTilt
 ---------------------------------------------------------------------------------
 (3) _top_servo_leftTilt                                   3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _top_rocker_release                                   2     2      0      68
                                              3 BANK0      2     2      0
                _top_servo_rightTilt
 ---------------------------------------------------------------------------------
 (3) _top_servo_rightTilt                                  3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _top_rocker_idle                                      0     0      0     195
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _top_distribution_prepare                             0     0      0       0
         _top_distribution_motor_ccw
          _top_distribution_motor_cw
 ---------------------------------------------------------------------------------
 (2) _top_distribution_move                                1     1      0       0
                                              2 BANK0      1     1      0
         _top_distribution_motor_ccw
        _top_distribution_motor_ccw2
          _top_distribution_motor_cw
         _top_distribution_motor_cw2
 ---------------------------------------------------------------------------------
 (3) _top_distribution_motor_cw2                           2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _top_distribution_motor_cw                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _top_distribution_motor_ccw2                          2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _top_distribution_motor_ccw                           2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _top_distribution_idle                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _solenoids_out                                        0     0      0       0
                            _pop_out
 ---------------------------------------------------------------------------------
 (3) _pop_out                                              2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _solenoids_back                                       1     1      0       0
                                              2 BANK0      1     1      0
                            _go_back
 ---------------------------------------------------------------------------------
 (3) _go_back                                              2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _initialization                                       0     0      0       0
        _bottom_distribution_initial
              _bottom_rocker_initial
           _top_distribution_initial
                 _top_rocker_initial
 ---------------------------------------------------------------------------------
 (3) _top_rocker_initial                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _top_distribution_initial                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _bottom_rocker_initial                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _bottom_distribution_initial                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _done_sorting                                        14    12      2    3791
                                             14 BANK0     12    10      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1145
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _bottom_rocker_restore                                0     0      0      68
              _bottom_servo_leftTilt
 ---------------------------------------------------------------------------------
 (3) _bottom_servo_leftTilt                                3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _bottom_rocker_release                                2     2      0     105
                                              4 BANK0      2     2      0
             _bottom_servo_rightTilt
 ---------------------------------------------------------------------------------
 (2) _bottom_rocker_idle                                   5     5      0     315
                                              4 BANK0      5     5      0
             _bottom_servo_rightTilt
 ---------------------------------------------------------------------------------
 (3) _bottom_servo_rightTilt                               4     4      0     105
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _bottom_rocker_detect                                 1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _bottom_distribution_prepare                          0     0      0       0
      _bottom_distribution_motor_ccw
       _bottom_distribution_motor_cw
 ---------------------------------------------------------------------------------
 (2) _bottom_distribution_move                             2     2      0       0
                                              2 BANK0      2     2      0
      _bottom_distribution_motor_ccw
     _bottom_distribution_motor_ccw2
       _bottom_distribution_motor_cw
      _bottom_distribution_motor_cw2
 ---------------------------------------------------------------------------------
 (3) _bottom_distribution_motor_cw2                        2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _bottom_distribution_motor_cw                         2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _bottom_distribution_motor_ccw2                       2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _bottom_distribution_motor_ccw                        2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _bottom_distribution_idle                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _standby                                              6     6      0    6320
                                             36 BANK0      6     6      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      65
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _set_time                                             1     1      0     823
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     724
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _results                                              7     7      0    5568
                                             36 BANK0      7     7      0
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    4906
                                             14 BANK0     22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1316
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     503
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     395
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _keypressed                                          30    30      0   13152
                                             32 COMRAM    30    30      0
                            _op_time
                        _pop_results
                        _tin_results
                         _tot_sorted
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _tot_sorted                                           0     0      0    2338
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _tin_results                                          0     0      0    2338
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _pop_results                                          0     0      0    2338
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _op_time                                              0     0      0    3114
                            ___awmod
                          i2___awdiv
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) i2_printf                                            29    23      6    2068
                                             12 COMRAM    20    14      6
                            ___awmod (ARG)
                          i2___awdiv (ARG)
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (7) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) i2___awdiv                                            8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) ___awmod                                              6     2      4     424
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _done_sorting
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _initLCD
     _lcdInst
       _lcdNibble
   _results
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _set_time
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _standby
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _startSorting
     Absolute function(Fake) *
     _bottom_distribution_idle *
     _bottom_distribution_move *
       _bottom_distribution_motor_ccw
       _bottom_distribution_motor_ccw2
       _bottom_distribution_motor_cw
       _bottom_distribution_motor_cw2
     _bottom_distribution_prepare *
       _bottom_distribution_motor_ccw
       _bottom_distribution_motor_cw
     _bottom_rocker_detect *
     _bottom_rocker_idle *
       _bottom_servo_rightTilt
     _bottom_rocker_release *
       _bottom_servo_rightTilt
     _bottom_rocker_restore *
       _bottom_servo_leftTilt
     _done_sorting *
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
       ___awdiv
       ___wmul
         ___awdiv (ARG)
     _initLCD *
       _lcdInst
         _lcdNibble
     _initialization *
       _bottom_distribution_initial
       _bottom_rocker_initial
       _top_distribution_initial
       _top_rocker_initial
     _lcdInst *
       _lcdNibble
     _printf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
     _solenoids_back *
       _go_back
     _solenoids_out *
       _pop_out
     _top_distribution_idle *
     _top_distribution_move *
       _top_distribution_motor_ccw
       _top_distribution_motor_ccw2
       _top_distribution_motor_cw
       _top_distribution_motor_cw2
     _top_distribution_prepare *
       _top_distribution_motor_ccw
       _top_distribution_motor_cw
     _top_rocker_idle *
       _initLCD
         _lcdInst
           _lcdNibble
     _top_rocker_release *
       _top_servo_rightTilt
     _top_rocker_restore *
       _top_servo_leftTilt

 _keypressed (ROOT)
   _op_time
     ___awmod
     i2___awdiv
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   _pop_results
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   _tin_results
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   _tot_sorted
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     ___awmod (ARG)
     i2___awdiv (ARG)
     i2___lwdiv (ARG)
     i2___lwmod (ARG)
       i2___lwdiv (ARG)
     i2___wmul (ARG)
     i2_isdigit (ARG)
     i2_putch (ARG)
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2B      56       5       67.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3E      4E       1       61.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A4      34        0.0%
DATA                 0      0      A4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Apr 11 19:22:35 2017

                           ___awdiv@sign 00B0                      ___wmul@multiplicand 00B5  
                     i2___lwdiv@dividend 0001                              __CFG_BORV$3 000000  
                          _solenoids_out 206C                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                              __CFG_OSC$HS 000000  
                                    l157 2086                                      l506 0F08  
                                    l508 0F54                                      l465 0FBC  
                                    l468 109E                                      l724 1B48  
                                    l734 1AB4                                      l719 1698  
                                    l729 1AFE                                      l766 013A  
                           __CFG_CPB$OFF 000000                                      _PEN 007E2A  
                           __CFG_CPD$OFF 000000                                      _SEN 007E28  
                                    _b_m 004B                           _solenoids_back 197E  
                                    _t_m 003F                                      _tot 0047  
                          ?_done_sorting 00B9                             ___awmod@sign 0006  
                   _topDistributionState 00A5                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
                           __CFG_LVP$OFF 000000                              _total_start 008B  
      __size_of_top_distribution_initial 000E                             __CFG_WDT$OFF 000000  
                                   l1211 15B4                                     l1221 17BC  
                                   l1158 1426                                     l5002 0020  
                                   l5012 0050                                     l5102 02BE  
                                   l5030 0106                                     l5006 0034  
                                   l5104 02CA                                     l5112 02F8  
                                   l5008 0046                                     l5114 02FE  
                                   l5122 03AA                                     l5042 0172  
                                   l5026 0100                                     l5018 0084  
                                   l5202 1E40                                     l5300 13BA  
                                   l5116 0350                                     l5124 03BC  
                                   l5108 02E4                                     l5060 01D0  
                                   l5212 1DAA                                     l5310 1414  
                                   l5302 13C0                                     l5126 03C4  
                                   l5062 01D6                                     l5046 018E  
              ?_top_distribution_initial 0001                                     l5048 0194  
                                   l5128 03D0                                     l5144 0A4E  
                                   l5216 1DB6                                     l5090 0288  
                                   l5330 1732                                     l4602 1688  
                                   l4610 1B0A                                     l5154 0A78  
                                   l5234 191E                                     l5084 0246  
                                   l5076 0212                                     l5148 0A58  
                                   l5228 1900                                     l5078 0224  
                                   l5326 1728                                     l5174 0C74  
                                   l5246 1D18                                     l5430 0DBC  
                                   l5096 02A2                                     l5088 027E  
                                   l5504 0F2A                                     l5336 175E  
                                   l4640 1E1A                                     l5352 1002  
                                   l5176 0C88                                     l5272 19BC  
                                   l4802 135E                                     l5426 0DB2  
                                   l4820 1576                                     l5508 0F34  
                                   l5380 10E8                                     l5348 0FF8  
                                   l5268 19AE                                     l5444 0E0C  
                                   l5436 0DDC                                     l5374 10D8  
                                   l5358 1022                                     l4910 114A  
                                   l4902 1114                                     l4806 1372  
                                   l4726 1AC0                                     l5390 0CC6  
                                   l5542 148C                                     l4816 1564  
                                   l4840 178A                                     l5456 0E72  
                                   l5376 10DE                                     l4920 1176  
                                   l5448 0E16                                     l5392 0CDE  
                                   l5298 13AA                                     l4818 1570  
                                   l5482 0ED8                                     l5474 0EAE  
                                   l4586 1638                                     l4906 1134  
                                   l4738 1A76                                     l5394 0CF6  
                                   l5386 0C96                                     l4828 15A6  
                                   l4844 17AE                                     l4836 1778  
                                   l4756 1E6E                                     l5484 0EDE  
                                   l4932 119E                                     l4780 12F0  
                                   l5388 0CAE                                     l4838 1784  
                                   l5478 0EB8                                     l4854 1D86  
                                   l4926 1186                                     l4790 1320  
                                   l4774 12DA                                     l5488 0EE8  
                                   l4864 1DDA                                     l4952 11F0  
                                   l4936 11B4                                     l4946 11E0  
                                   l4786 130E                                     l4868 1DE6  
                                   l4884 125C                                     l4964 1840  
                                   l4788 131A                                     l4894 12B0  
                                   l4974 1866                                     l4798 1350  
                                   l4978 1874                                     STR_1 FFDC  
                                   STR_2 FFD1                                     STR_3 FFC2  
                                   STR_4 FF93                                     STR_5 FFF6  
                                   STR_6 FFEB                                     STR_7 FF4F  
                                   STR_8 FF71                                     STR_9 FF82  
                           _startSorting 0C92                                     _LATA 000F89  
                                   _LATB 000F8A                                     _LATC 000F8B  
                                   _LATD 000F8C                                     _LATE 000F8D  
                                   u4300 198A                                     u5007 0EC6  
                                   u5017 0EF6                                     u5027 0F42  
                                   u4308 198E                                     u5037 1B52  
                                   u5047 1B88                                     u4520 0DEC  
                                   u5057 16BA                                     u3650 1E18  
                                   u4355 17F6                                     u5067 16C4  
                                   u5077 16F0                                     u5087 16FA  
                                   u4480 0D82                                     u4448 0C9A  
                                   u4490 0D92                                     u4458 0CB2  
                                   u4707 1AA4                                     u4627 0D10  
                                   u4468 0CCA                                     _RCEN 007E2B  
                                   u4717 1ADA                                     u4637 0D28  
                                   u4478 0CE2                                     u4807 201E  
                                   u4727 1AEC                                     u4647 0D40  
                                   u4817 1A30                                     u4737 18F0  
                                   u4657 0D60                                     u4907 1232  
                                   u4827 1A5C                                     u4747 1910  
                                   u4667 0DCA                                     u4917 124C  
                                   u4837 1152                                     u4757 1E8A  
                                   u4677 0E24                                     u4927 126C  
                                   u4847 11BC                                     u4767 1EB0  
                                   u4687 1D46                                     u4937 1288  
                                   u4857 1B24                                     u4777 1ED6  
                                   u4697 1A90                                     u4947 12A2  
                                   u4867 1B38                                     u4787 1EFC  
                                   u4957 1F22                                     u4877 1652  
                                   u4797 1FFE                                     u4967 1F48  
                                   u4887 1664                                     u4977 1F6E  
                                   u4897 1216                                     u4987 1FBA  
                                   u4997 10F6      __end_of_top_distribution_motor_ccw2 1EEA  
            _top_distribution_motor_ccw2 1EC4                                     _RSEN 007E29  
               __size_of_top_rocker_idle 0034        __size_of_top_distribution_prepare 0030  
              ?_top_distribution_prepare 0001                         ??_initialization 00AB  
                                   _fsm1 0093                                     _fsm2 009F  
                                   _main 1438                                     _keys FEEB  
                                   _time 0080                                     fsr0h 000FEA  
                                   fsr1h 000FE2                       i2___lwdiv@quotient 0005  
                                   fsr2h 000FDA                                     fsr0l 000FE9  
                                   indf2 000FDF                                     fsr1l 000FE1  
                                   fsr2l 000FD9                                     btemp 004F  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 000E                            __CFG_IESO$OFF 000000  
                        __end_ofi2_putch 2122                            __CFG_MCLRE$ON 000000  
                           ___param_bank 000000                              i2_lcdNibble 1882  
                         ?_solenoids_out 0001                         ?_I2C_Master_Init 00B8  
                       ?_I2C_Master_Read 0001            __size_of_bottom_rocker_detect 005C  
                       ?_I2C_Master_Wait 0001                         ?_I2C_Master_Stop 0001  
                 __end_of_solenoids_back 19CE                                    ?_main 0001  
                                  _ACKEN 007E2C                                    _ACKDT 007E2D  
                        __end_of___awdiv 137C                                    STR_10 FF2B  
                                  STR_11 FF15                                    STR_12 FF60  
                                  STR_13 FFB3                                    STR_14 FFA4  
                                  STR_15 FFDE                                    STR_16 FF3E  
                        __end_of___awmod 162E                          __end_of___lldiv 1438  
                        ___awdiv@divisor 00AD                          __end_of___lwdiv 15BE  
                        standby@keypress 00D1                          __end_of___lwmod 17C6  
                                  i2l243 09C2                           ??_done_sorting 00BB  
                                  i2l766 04E6                          ___awdiv@counter 00AF  
                                  _PORTB 000F81                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                                  _TRISD 000F95                                    _TRISE 000F96  
                          __CFG_PWRT$OFF 000000                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                          __CFG_WRT3$OFF 000000                          __end_of_lcdInst 20DE  
                         __CFG_EBTR0$OFF 000000                           __CFG_FCMEN$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                          __end_of_go_back 202E  
                                  _nRBPU 007F8F               ?_top_distribution_motor_cw 0001  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                          __end_of_initLCD 1B94  
                                  _check 0091                           __CFG_EBTRB$OFF 000000  
                             i2isdigit@c 0003                    _bottom_rocker_initial 20FA  
                        __end_of_dpowers FF06                                    _tabed 0045  
                        __end_of_isdigit 1E78                    _bottom_rocker_release 1A1E  
                                  _putch 20BE              __size_of_top_servo_leftTilt 004A  
                        __end_of_op_time 1A1E                    _bottom_rocker_restore 20AC  
                                  pclath 000FFA                                    tablat 000FF5  
                        __end_of_pop_out 200E                          __end_of_results 0FAC  
                       __end_ofi2___wmul 1FA8                          __end_of_standby 1108  
                                  status 000FD8                       __size_ofi2___awdiv 0084  
                         __CFG_PBADEN$ON 000000                            i2printf@width 001E  
                           standby@i_818 00D3                         __end_ofi2_printf 0726  
                     __size_ofi2___lwdiv 0052                       __size_ofi2___lwmod 0042  
                      startSorting@i_835 00D2                          __initialization 1FCC  
                     __size_ofi2_lcdInst 000C                             __end_of_main 14C2  
                           __end_of_keys FEFC                               i2printf@ap 0018  
                     __size_ofi2_initLCD 0046                       __size_ofi2_isdigit 001E  
                        ?_solenoids_back 0001                                   ??_main 00D6  
                          __activetblptr 000003         __end_of_bottom_distribution_idle 1D94  
       __end_of_bottom_distribution_move 12BE                        ?_I2C_Master_Start 0001  
                      ?_I2C_Master_Write 00AC                       ??_I2C_Master_Start 00AC  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                     ??_I2C_Master_Write 00AE                         ___awdiv@dividend 00AB  
                        i2lcdNibble@data 0002                                   ?_putch 0001  
                        i2lcdNibble@temp 0001                                   _INT1IE 007F83  
                                 _INT1IF 007F80                                   i2l1211 1974  
                                 i2l1221 1C12                   _bottom_rocker_idle$350 00B1  
                                 i2l4010 0638                                   i2l4004 061C  
                                 i2l4006 0624                                   i2l4014 064A  
                                 i2l4030 070A                   _bottom_rocker_idle$349 00B0  
                                 i2l4040 14D6                                   i2l4016 0650  
                                 i2l4024 06EC                                   i2l4018 069A  
                                 i2l4026 06FC                                   i2l4052 14FC  
                                 i2l4028 0702                                   i2l4054 1504  
                                 i2l4046 14E6                                   i2l4072 153C  
                                 i2l4064 1524                                   i2l4056 1508  
                                 i2l3344 2064                                   i2l4400 08AE  
                                 i2l3354 1942                                   i2l4410 08D6  
                                 i2l4068 152E                                   i2l3356 194A  
                                 i2l4420 08FE                                   i2l4404 08CA  
                                 i2l4332 07A6                                   i2l3366 196A  
                                 i2l3358 194E                                   i2l3382 1C08  
                                 i2l3374 1BE8                                   i2l4430 092A  
                                 i2l4414 08F2                                   i2l4406 08CE  
                                 i2l4342 07CE                                   i2l3376 1BF0  
                                 i2l4440 0952                                   i2l4416 08F6  
                                 i2l4424 091A                                   i2l4352 07F6  
                                 i2l4336 07C2                                   i2l4328 079E  
                                 i2l3378 1BF4                                   i2l4450 097A  
                                 i2l4434 0932                                   i2l4370 0846  
                                 i2l4362 0822                                   i2l4346 07EA  
                                 i2l4338 07C6                                   i2l4444 095A  
                                 i2l4380 086E                                   i2l4372 084A  
                                 i2l4348 07EE                                   i2l4356 0812  
                                 i2l3910 0418                                   i2l4462 09AA  
                                 i2l4454 0982                                   i2l4438 094E  
                                 i2l4382 0872                                   i2l4366 082A  
                                 i2l4390 0896                                   i2l3920 0450  
                                 i2l3904 03FA                                   i2l4448 0976  
                                 i2l4376 0852                                   i2l3850 15F8  
                                 i2l3842 15DE                                   i2l3914 041E  
                                 i2l4458 099E                                   i2l4386 087A  
                                 i2l4466 09BA                                   i2l3932 04B6  
                                 i2l3908 040A                                   i2l4396 08A6  
                                 i2l3862 1624                                   i2l3854 160C  
                                 i2l3846 15EC                                   i2l3838 15D2  
                                 i2l3950 0532                                   i2l3848 15F4  
                                 i2l3944 0514                                   i2l3928 04B2  
                                 i2l3858 1616                                   i2l3962 0564  
                                 i2l3964 0568                                   i2l3980 05AA  
                                 i2l3948 052E                                   i2l3990 05E8  
                                 i2l3992 05F0                                   i2l3986 05C4  
                                 i2l3978 059A                                   i2l3998 0606  
                              ??i2_putch 0003                                   _SSPADD 000FC8  
                                 _TRISC3 007CA3                                   _TRISC4 007CA4  
                                 _SSPBUF 000FC9                      top_servo_leftTilt@i 00AC  
                         __CFG_XINST$OFF 000000                        ??_top_rocker_idle 00AF  
                        ??_solenoids_out 00AD                                   ___wmul 1CC6  
                              ??___awdiv 00AF                           __CFG_STVREN$ON 000000  
                              ??___awmod 0005                                ??___lldiv 00B3  
                              ??___lwdiv 00AF                                ??___lwmod 00B6  
                                 clear_0 1FD2                                   clear_1 1FDE  
                       ___awdiv@quotient 00B1                          ___awmod@divisor 0003  
        ?_bottom_distribution_motor_ccw2 0001         ??_bottom_distribution_motor_ccw2 00AB  
                        ___awmod@counter 0005                                ??_lcdInst 00AD  
                                 _printf 0012                                ??_go_back 00AB  
                         i2___awdiv@sign 0006                                ??_initLCD 00AE  
                           ?_pop_results 0001                                ??_isdigit 00AB  
                      __end_ofi2___awdiv 1546                         __end_of_set_time 1764  
                      __end_ofi2___lwdiv 197E                             __mediumconst FEEA  
                      __end_ofi2___lwmod 1C1C                   ?_bottom_rocker_initial 0001  
                              ??_op_time 0021                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                              ??_pop_out 00AB                             ?_tin_results 0001  
                 ?_bottom_rocker_release 0001                                ??_results 00CF  
                _bottomDistributionState 00A3                                ??_standby 00CF  
                      __end_ofi2_lcdInst 212E                   ?_bottom_rocker_restore 0001  
                             _Start_time 008F                        __end_ofi2_initLCD 1BDA  
                      __end_ofi2_isdigit 206C                               __accesstop 0080  
                __end_of__initialization 1FE4                            done_sorting@i 00C2  
           __size_of_top_servo_rightTilt 004A                            ___rparam_used 000001  
             __end_of_top_rocker_initial 20EC                     __end_of_done_sorting 0C92  
             __end_of_top_rocker_release 1D62               __end_of_top_rocker_restore 20AC  
                     i2___lwmod@dividend 0008                           __pcstackCOMRAM 0001  
            __size_of_bottom_rocker_idle 00F6                    _bottom_servo_leftTilt 1B00  
                          __end_of_putch 20CE                              i2printf@idx 0017  
                            i2printf@val 001B      __end_of_bottom_distribution_initial 2116  
            _bottom_distribution_initial 2108                                ?i2___wmul 0001  
                     __size_of_lcdNibble 0068      __end_of_bottom_distribution_prepare 1DF4  
            _bottom_distribution_prepare 1DC4                              i2putch@data 0003  
                            keypressed@i 0032                                ?i2_printf 000D  
                  _top_distribution_idle 1E22                _start_bottom_distribution 00A9  
                  _top_distribution_move 18D8                                  ??_putch 00AD  
                             __pbssBANK0 0080           ?_bottom_distribution_motor_cw2 0001  
         ?_bottom_distribution_motor_ccw 0001        __size_of_bottom_distribution_idle 0032  
           ??_top_distribution_motor_cw2 00AB             ??_top_distribution_motor_ccw 00AB  
              ?_bottom_distribution_idle 0001        __size_of_bottom_distribution_move 00C0  
              ?_bottom_distribution_move 0001                             ?i2_lcdNibble 0001  
                                ?___wmul 00B3                  keypressed@keypress_temp 003E  
                                ?_printf 00B9                               ??i2___wmul 0005  
               ??_bottom_servo_rightTilt 00AB                               ??i2_printf 0013  
            ??_top_distribution_motor_cw 00AB                                  _SSPCON1 000FC6  
                                _SSPCON2 000FC5                                  _SSPSTAT 000FC7  
    __size_of_top_distribution_motor_cw2 0026      __size_of_top_distribution_motor_ccw 0026  
           __end_of_bottom_rocker_detect 1882                                  i2_putch 2116  
                      __end_of_lcdNibble 1702                   bottom_servo_leftTilt@i 00AC  
                                __Hparam 0000                                  __Lparam 0000  
                              ?_set_time 0001                         ??_solenoids_back 00AD  
                 ?_bottom_servo_leftTilt 0001                                  ___awdiv 12BE  
                                ___awmod 15BE                                  ___lldiv 137C  
                        __size_of___wmul 0036                                  ___lwdiv 1546  
                                ___lwmod 1764                                  __pcinit 1FCC  
                                __ramtop 1000                                  _lcdInst 20CE  
                                __ptext0 1438                                  __ptext1 0C92  
                                __ptext2 1D30                                  __ptext3 197E  
                                __ptext4 206C                                  __ptext5 1CFC  
                                __ptext6 209A                                  __ptext7 1A6C  
                                __ptext8 1AB6                                  __ptext9 18D8  
                                _labeled 009D                                  _go_back 200E  
                        __size_of_printf 03DE                                  _initLCD 1B4A  
                      __end_of_hexpowers FF0E                                  _dpowers FEFC  
                                _isdigit 1E4E                         ___awmod@dividend 0001  
                   done_sorting@End_time 00C3                   ?_top_distribution_idle 0001  
               _top_distribution_initial 20EC                                  _op_time 19CE  
                             _keypressed 0008                   ?_top_distribution_move 0001  
               __size_of_I2C_Master_Init 0060                 __size_of_I2C_Master_Read 002E  
                                _pop_can 0097                 __size_of_I2C_Master_Wait 0014  
                                _tin_can 0099               __end_of_top_servo_leftTilt 1AB6  
                      __end_of_real_time FF15                 __size_of_I2C_Master_Stop 0008  
                                _pop_out 1FEE                                  _results 0E36  
                   __size_of_pop_results 003A                                  _standby 0FAC  
               _top_distribution_prepare 1D94                           __pintcode_body 0726  
                        _top_rocker_idle 1CFC                     end_of_initialization 1FE4  
            _bottom_servo_rightTilt$1247 00AC                     __size_of_tin_results 003A  
                          startSorting@i 00D1                    __size_of_done_sorting 0294  
                                int_func 0726                      i2___wmul@multiplier 0001  
                         _operation_time 0049                __size_of_I2C_Master_Start 0008  
              __size_of_I2C_Master_Write 000A                          ___lldiv@divisor 00AF  
                        ___lldiv@counter 00B7                _top_distribution_motor_cw 1E9E  
                             ??_set_time 00AE                                  printf@c 00CE  
                                printf@f 00B9                         I2C_Master_Init@c 00B8  
                       I2C_Master_Read@a 00AC                                  postdec2 000FDD  
                                postinc0 000FEE                                  postinc2 000FDE  
                __size_of_initialization 0036                                _PORTBbits 000F81  
                              _PORTCbits 000F82                                _PORTEbits 000F84  
                ??_bottom_rocker_initial 00AB                      _top_servo_rightTilt 1AB6  
                ??_bottom_rocker_release 00AF          __size_of_bottom_servo_rightTilt 006C  
                ??_bottom_rocker_restore 00AE                             _done_sorting 09FE  
                              i2___awdiv 14C2                        i2___lwdiv@divisor 0003  
                              i2___lwdiv 192C                                i2___lwmod 1BDA  
                      i2___lwdiv@counter 0007   __end_of_bottom_distribution_motor_ccw2 1F82  
__size_of_bottom_distribution_motor_ccw2 0026           _bottom_distribution_motor_ccw2 1F5C  
                   results@keypress_temp 00D2                                i2_lcdInst 2122  
                   ?_top_servo_rightTilt 0001                     top_servo_rightTilt@i 00AC  
                            printf@width 00CC       __end_of_top_distribution_motor_cw2 1E9E  
             _top_distribution_motor_cw2 1E78       __end_of_top_distribution_motor_ccw 1F10  
             _top_distribution_motor_ccw 1EEA                                i2_initLCD 1B94  
                     i2___awdiv@dividend 0001                               _tot_sorted 202E  
                              i2_isdigit 204E                    __end_of_solenoids_out 2086  
                         __end_of___wmul 1CFC                     _bottom_rocker_detect 1826  
                   __size_ofi2_lcdNibble 0056                            i2lcdInst@data 0003  
                     _top_rocker_initial 20DE                       _top_rocker_release 1D30  
                       i2___wmul@product 0005                           __end_of_printf 03F0  
                __end_of_top_rocker_idle 1D30                       _top_rocker_restore 209A  
                           i2printf@flag 001D                             i2printf@prec 001A  
                    start_initialization 1FCC                              ?_keypressed 0001  
                     i2___awdiv@quotient 0007                        __size_ofi2___wmul 0026  
                    ?_top_rocker_initial 0001                                i2printf@c 0020  
                              i2printf@f 000D                      ?_top_rocker_release 0001  
                             ?i2___awdiv 0001                            ?_startSorting 0001  
                    ?_top_rocker_restore 0001                               ?i2___lwdiv 0001  
                             ?i2___lwmod 0008                        __size_ofi2_printf 0336  
   __end_of_bottom_distribution_motor_cw 1F5C    __size_of_bottom_distribution_motor_cw 0026  
           _bottom_distribution_motor_cw 1F36             ?_top_distribution_motor_ccw2 0001  
                      ??_I2C_Master_Init 00BC                        ??_I2C_Master_Read 00AC  
                  ??_top_servo_rightTilt 00AB                        ??_I2C_Master_Wait 00AB  
                             ?i2_lcdInst 0001                        ??_I2C_Master_Stop 00AC  
                             ?i2_initLCD 0001                   _bottom_servo_rightTilt 162E  
                             ?i2_isdigit 0001               __end_of_bottom_rocker_idle 11FE  
                   ??_top_rocker_initial 00AB                     ??_top_rocker_release 00AE  
                               ??___wmul 00B7          ??_bottom_distribution_motor_cw2 00AB  
                   ??_top_rocker_restore 00AE          ??_bottom_distribution_motor_ccw 00AB  
                  ?_bottom_rocker_detect 0001                         __CFG_LPT1OSC$OFF 000000  
               done_sorting@total_second 00C0                                 ??_printf 00C1  
                            __pbssCOMRAM 003F                            __pcstackBANK0 00AB  
                      i2___lwmod@divisor 000A                        i2___lwmod@counter 000C  
                           _isdigit$1503 00AC                           ??_startSorting 00CF  
                               ?i2_putch 0001            ?_bottom_distribution_motor_cw 0001  
          ??_top_distribution_motor_ccw2 00AB                              ?_tot_sorted 0001  
                       _I2C_Master_Start 2140                        _bottomRockerState 00A1  
                       _I2C_Master_Write 212E                  ??_bottom_servo_leftTilt 00AB  
                       ___lwdiv@dividend 00AB                        __CFG_CCP2MX$PORTC 000000  
                    __size_of_keypressed 09F6                                __pintcode 0008  
                          __pmediumconst FEEA                                _lcdNibble 169A  
                               ?___awdiv 00AB                                 ?___awmod 0001  
                         _initialization 1C90                                 ?___lldiv 00AB  
                               ?___lwdiv 00AB                                 ?___lwmod 00B2  
             ??_top_distribution_initial 00AB                        __size_of_set_time 0062  
                               ?_lcdInst 0001               ??_top_distribution_prepare 00AD  
                ??_top_distribution_idle 00AB                                 ?_go_back 0001  
                ??_top_distribution_move 00AD       __size_of_top_distribution_motor_cw 0026  
                               ?_initLCD 0001                                 ?_isdigit 0001  
                       ?_top_rocker_idle 0001                                 ?_op_time 0001  
                               ?_pop_out 0001                                 ?_results 0001  
                              _hexpowers FF06                                 ?_standby 0001  
                       ___lwdiv@quotient 00B0                              ??i2___awdiv 0005  
                            ??i2___lwdiv 0005                              ??i2___lwmod 000C  
                         __size_of_putch 0010                                _real_time FF0E  
                        keypressed@i_440 0037                          keypressed@i_441 0038  
                        keypressed@i_442 0039                          keypressed@i_443 003A  
                        keypressed@i_444 003B                          keypressed@i_436 0033  
                        keypressed@i_445 003C                          keypressed@i_437 0034  
                        keypressed@i_446 003D                          keypressed@i_438 0035  
                        keypressed@i_439 0036                 _bottom_distribution_idle 1D62  
                            ??i2_lcdInst 0003                 _bottom_distribution_move 11FE  
                         ___wmul@product 00B7                                 _LATAbits 000F89  
                               _LATBbits 000F8A                                 _LATCbits 000F8B  
                               _LATDbits 000F8C                              ??i2_initLCD 0004  
                            ??i2_isdigit 0001                       _top_servo_leftTilt 1A6C  
                               i2u510_47 07D8                                 i2u511_47 0800  
                               i2u520_47 098C                                 i2u512_47 0834  
                               i2u521_47 1B9A                                 i2u513_47 085C  
                               i2u522_47 1BCE                                 i2u514_47 0884  
                               i2u523_47 189A                                 i2u515_47 08B8  
                 __end_of_initialization 1CC6                                 i2u524_47 18A4  
                               i2u516_47 08E0                                 i2u525_47 18C6  
                               i2u517_47 0908                                 i2u509_47 07B0  
                               i2u526_47 18D0                                 i2u518_47 093C  
                               i2u519_47 0964                         __CFG_WDTPS$32768 000000  
                             ?_lcdNibble 0001                   ??_bottom_rocker_detect 00AB  
                    ?_top_servo_leftTilt 0001                 _bottom_rocker_detect$352 00AB  
   __size_of_top_distribution_motor_ccw2 0026                        ___wmul@multiplier 00B3  
  __end_of_bottom_distribution_motor_cw2 1F36   __size_of_bottom_distribution_motor_cw2 0026  
          _bottom_distribution_motor_cw2 1F10                                 i2___wmul 1F82  
  __end_of_bottom_distribution_motor_ccw 1FCC   __size_of_bottom_distribution_motor_ccw 0024  
          _bottom_distribution_motor_ccw 1FA8                            lcdNibble@data 00AC  
                          ??_pop_results 0021                                _total_end 0087  
                             printf@flag 00CB                            lcdNibble@temp 00AB  
         __size_of_bottom_rocker_initial 000E                               printf@prec 00C8  
          __end_of_bottom_rocker_initial 2108        __end_of_top_distribution_motor_cw 1EC4  
                    __size_of_tot_sorted 0020           __size_of_bottom_rocker_release 004E  
                      i2___awdiv@divisor 0003            __end_of_bottom_rocker_release 1A6C  
                      i2___awdiv@counter 0005                            ??_tin_results 0021  
                               i2_printf 03F0           __size_of_bottom_rocker_restore 0012  
          __end_of_bottom_rocker_restore 20BE                      I2C_Master_Read@temp 00AD  
                   ??_top_servo_leftTilt 00AB                              _bottom_move 004D  
                          _tin_can_label 009B                         __size_ofi2_putch 000C  
            ?_top_distribution_motor_cw2 0001                       keypressed@keypress 0031  
            ?_top_distribution_motor_ccw 0001                                 __Hrparam 0000  
                        ?_initialization 0001                                 __Lrparam 0000  
                     __CFG_BOREN$SBORDIS 000000           ??_bottom_distribution_motor_cw 00AB  
                   __end_of_startSorting 0E36                         __size_of___awdiv 00BE  
                       __size_of___awmod 0070                    i2___wmul@multiplicand 0003  
                       __size_of___lldiv 00BC                         __size_of___lwdiv 0078  
                       __size_of___lwmod 0062             ?_bottom_distribution_initial 0001  
                       __size_of_lcdInst 0010                         __size_of_go_back 0020  
                        _I2C_Master_Init 17C6                          _I2C_Master_Read 1DF4  
                       __size_of_initLCD 004A                  __size_of_solenoids_back 0050  
           ?_bottom_distribution_prepare 0001                          _I2C_Master_Wait 2086  
                        _I2C_Master_Stop 2138                             ??_keypressed 0021  
                       __size_of_isdigit 002A                      bottom_rocker_idle@o 00B2  
                        ___lwdiv@divisor 00AD                          ___lwdiv@counter 00AF  
                       __size_of_op_time 0050                                 __ptext10 1E22  
                               __ptext11 1D94                                 __ptext20 20EC  
                               __ptext12 1E78                                 __ptext21 20FA  
                               __ptext13 1E9E                                 __ptext30 162E  
                               __ptext22 2108                                 __ptext14 1EC4  
                               __ptext31 11FE                                 __ptext23 09FE  
                               __ptext15 1EEA                                 __ptext40 1702  
                               __ptext32 1D62                                 __ptext24 12BE  
                               __ptext16 1FEE                                 __ptext41 212E  
                               __ptext33 1DC4                                 __ptext25 1A1E  
                               __ptext17 200E                                 __ptext50 1764  
                               __ptext42 2138                                 __ptext34 1F10  
                               __ptext26 1826                                 __ptext18 1C90  
                               __ptext51 1546                                 __ptext43 2140  
                               __ptext35 1F36                                 __ptext27 1108  
                               __ptext19 20DE                                 __ptext60 1C56  
                               __ptext52 1B4A                                 __ptext44 2086  
                               __ptext36 1F5C                                 __ptext28 20AC  
                               __ptext61 19CE                                 __ptext53 20CE  
                               __ptext45 0E36                                 __ptext37 1FA8  
                               __ptext29 1B00                                 __ptext70 1882  
                               __ptext62 03F0                                 __ptext54 169A  
                               __ptext46 0012                                 __ptext38 0FAC  
                               __ptext71 14C2                                 __ptext63 2116  
                               __ptext55 17C6                                 __ptext47 20BE  
                               __ptext39 1DF4                                 __ptext72 15BE  
                               __ptext64 204E                                 __ptext56 137C  
                               __ptext48 1E4E                                 __ptext73 0000  
                               __ptext65 1F82                                 __ptext49 1CC6  
                               __ptext66 1BDA                                 __ptext58 202E  
                               __ptext67 192C                                 __ptext59 1C1C  
                               __ptext68 1B94                                 __ptext69 2122  
                       __size_of_pop_out 0020                         __size_of_results 0176  
                       __size_of_standby 015C                      __end_of_pop_results 1C90  
                ?_bottom_servo_rightTilt 0001                           i2_isdigit$1503 0002  
                      _done_sorting$1848 00BE                      __end_of_tin_results 1C56  
                          __size_of_main 008A                                set_time@i 00AE  
                               _set_time 1702                            ??i2_lcdNibble 0001  
                            ??_lcdNibble 00AB                       __end_of_keypressed 09FE  
       __end_of_top_distribution_initial 20FA                                 int$flags 004F  
                               _top_move 0043                                printf@idx 00C5  
                              printf@val 00C9         __end_of_top_distribution_prepare 1DC4  
                     _bottom_rocker_idle 1108                                putch@data 00AD  
               __end_of_I2C_Master_Start 2148                     standby@keypress_temp 00D2  
               __end_of_I2C_Master_Write 2138                               _INTCONbits 000FF2  
          ??_bottom_distribution_initial 00AB              __end_of_top_servo_rightTilt 1B00  
          ??_bottom_distribution_prepare 00AD                      ?_bottom_rocker_idle 0001  
                               isdigit@c 00AD           __end_of_bottom_servo_rightTilt 169A  
                               intlevel2 0000                   __size_of_solenoids_out 001A  
                       ___lwmod@dividend 00B2                         ___lldiv@dividend 00AB  
                        results@keypress 00D1                             ??_tot_sorted 0021  
                 _start_top_distribution 0041                  bottom_servo_rightTilt@i 00AD  
         __size_of_bottom_servo_leftTilt 004A                     ??_bottom_rocker_idle 00AF  
            __size_of_top_rocker_initial 000E            __end_of_bottom_servo_leftTilt 1B4A  
                               results@i 00D3                           _topRockerState 00A7  
                            _pop_can_tab 0095              __size_of_top_rocker_release 0032  
                               printf@ap 00C6              __size_of_top_rocker_restore 0012  
                __end_of_I2C_Master_Init 1826                  __end_of_I2C_Master_Read 1E22  
                               standby@i 00D4                  __end_of_I2C_Master_Wait 209A  
                __end_of_I2C_Master_Stop 2140                              lcdInst@data 00AD  
                    __end_ofi2_lcdNibble 18D8           __size_of_top_distribution_idle 002C  
                       ___lldiv@quotient 00B3                        I2C_Master_Write@d 00AC  
                        ___lwmod@divisor 00B4            __end_of_top_distribution_idle 1E4E  
         __size_of_top_distribution_move 0054                              _pop_results 1C56  
          __end_of_top_distribution_move 192C                          ___lwmod@counter 00B6  
             ??_bottom_distribution_idle 00AB               ??_bottom_distribution_move 00AD  
                     __end_of_tot_sorted 204E                              _tin_results 1C1C  
                           results@i_847 00D4                             results@i_849 00D5  
   __size_of_bottom_distribution_initial 000E                    __size_of_startSorting 01A4  
   __size_of_bottom_distribution_prepare 0030  

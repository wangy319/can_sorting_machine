

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Feb 28 22:32:00 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           ; Version 1.41
    56                           ; Generated 25/01/2017 GMT
    57                           ; 
    58                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC18F4620 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     
    90                           	psect	mediumconst
    91  00FEE0                     __pmediumconst:
    92                           	opt stack 0
    93  00FEE0  00                 	db	0
    94  00FEE1                     _keys:
    95                           	opt stack 0
    96  00FEE1  31                 	db	49
    97  00FEE2  32                 	db	50
    98  00FEE3  33                 	db	51
    99  00FEE4  41                 	db	65
   100  00FEE5  34                 	db	52
   101  00FEE6  35                 	db	53
   102  00FEE7  36                 	db	54
   103  00FEE8  42                 	db	66
   104  00FEE9  37                 	db	55
   105  00FEEA  38                 	db	56
   106  00FEEB  39                 	db	57
   107  00FEEC  43                 	db	67
   108  00FEED  2A                 	db	42
   109  00FEEE  30                 	db	48
   110  00FEEF  23                 	db	35
   111  00FEF0  44                 	db	68
   112  00FEF1  00                 	db	0
   113  00FEF2                     __end_of_keys:
   114                           	opt stack 0
   115  00FEF2                     _dpowers:
   116                           	opt stack 0
   117  00FEF2  0001               	dw	1
   118  00FEF4  000A               	dw	10
   119  00FEF6  0064               	dw	100
   120  00FEF8  03E8               	dw	1000
   121  00FEFA  2710               	dw	10000
   122  00FEFC                     __end_of_dpowers:
   123                           	opt stack 0
   124  00FEFC                     _hexpowers:
   125                           	opt stack 0
   126  00FEFC  0001               	dw	1
   127  00FEFE  0010               	dw	16
   128  00FF00  0100               	dw	256
   129  00FF02  1000               	dw	4096
   130  00FF04                     __end_of_hexpowers:
   131                           	opt stack 0
   132  00FF04                     _real_time:
   133                           	opt stack 0
   134  00FF04  45                 	db	69
   135  00FF05  59                 	db	89
   136  00FF06  17                 	db	23
   137  00FF07  04                 	db	4
   138  00FF08  31                 	db	49
   139  00FF09  02                 	db	2
   140  00FF0A  17                 	db	23
   141  00FF0B                     __end_of_real_time:
   142                           	opt stack 0
   143  0000                     _LATEbits	set	3981
   144  0000                     _LATBbits	set	3978
   145  0000                     _PORTBbits	set	3969
   146  0000                     _INTCONbits	set	4082
   147  0000                     _ADCON1	set	4033
   148  0000                     _ADCON0	set	4034
   149  0000                     _LATE	set	3981
   150  0000                     _LATC	set	3979
   151  0000                     _LATB	set	3978
   152  0000                     _LATA	set	3977
   153  0000                     _TRISE	set	3990
   154  0000                     _TRISD	set	3989
   155  0000                     _TRISC	set	3988
   156  0000                     _TRISB	set	3987
   157  0000                     _TRISA	set	3986
   158  0000                     _LATD	set	3980
   159  0000                     _LATDbits	set	3980
   160  0000                     _PORTB	set	3969
   161  0000                     _SSPBUF	set	4041
   162  0000                     _SSPADD	set	4040
   163  0000                     _SSPCON2	set	4037
   164  0000                     _SSPCON1	set	4038
   165  0000                     _SSPSTAT	set	4039
   166  0000                     _INT1IE	set	32643
   167  0000                     _INT1IF	set	32640
   168  0000                     _ACKEN	set	32300
   169  0000                     _ACKDT	set	32301
   170  0000                     _RCEN	set	32299
   171  0000                     _PEN	set	32298
   172  0000                     _RSEN	set	32297
   173  0000                     _SEN	set	32296
   174  0000                     _TRISC4	set	31908
   175  0000                     _TRISC3	set	31907
   176  00FF0B                     STR_3:
   177  00FF0B  54                 	db	84	;'T'
   178  00FF0C  69                 	db	105	;'i'
   179  00FF0D  6D                 	db	109	;'m'
   180  00FF0E  65                 	db	101	;'e'
   181  00FF0F  3A                 	db	58	;':'
   182  00FF10  20                 	db	32
   183  00FF11  25                 	db	37
   184  00FF12  30                 	db	48	;'0'
   185  00FF13  31                 	db	49	;'1'
   186  00FF14  64                 	db	100	;'d'
   187  00FF15  20                 	db	32
   188  00FF16  6D                 	db	109	;'m'
   189  00FF17  69                 	db	105	;'i'
   190  00FF18  6E                 	db	110	;'n'
   191  00FF19  20                 	db	32
   192  00FF1A  25                 	db	37
   193  00FF1B  30                 	db	48	;'0'
   194  00FF1C  32                 	db	50	;'2'
   195  00FF1D  64                 	db	100	;'d'
   196  00FF1E  20                 	db	32
   197  00FF1F  73                 	db	115	;'s'
   198  00FF20  00                 	db	0
   199  00FF21                     STR_2:
   200  00FF21  54                 	db	84	;'T'
   201  00FF22  6F                 	db	111	;'o'
   202  00FF23  74                 	db	116	;'t'
   203  00FF24  61                 	db	97	;'a'
   204  00FF25  6C                 	db	108	;'l'
   205  00FF26  20                 	db	32
   206  00FF27  53                 	db	83	;'S'
   207  00FF28  6F                 	db	111	;'o'
   208  00FF29  72                 	db	114	;'r'
   209  00FF2A  74                 	db	116	;'t'
   210  00FF2B  65                 	db	101	;'e'
   211  00FF2C  64                 	db	100	;'d'
   212  00FF2D  3A                 	db	58	;':'
   213  00FF2E  20                 	db	32
   214  00FF2F  25                 	db	37
   215  00FF30  30                 	db	48	;'0'
   216  00FF31  32                 	db	50	;'2'
   217  00FF32  78                 	db	120	;'x'
   218  00FF33  00                 	db	0
   219  00FF34                     STR_17:
   220  00FF34  30                 	db	48	;'0'
   221  00FF35  31                 	db	49	;'1'
   222  00FF36  32                 	db	50	;'2'
   223  00FF37  33                 	db	51	;'3'
   224  00FF38  34                 	db	52	;'4'
   225  00FF39  35                 	db	53	;'5'
   226  00FF3A  36                 	db	54	;'6'
   227  00FF3B  37                 	db	55	;'7'
   228  00FF3C  38                 	db	56	;'8'
   229  00FF3D  39                 	db	57	;'9'
   230  00FF3E  61                 	db	97	;'a'
   231  00FF3F  62                 	db	98	;'b'
   232  00FF40  63                 	db	99	;'c'
   233  00FF41  64                 	db	100	;'d'
   234  00FF42  65                 	db	101	;'e'
   235  00FF43  66                 	db	102	;'f'
   236  00FF44  00                 	db	0
   237  00FF45                     STR_13:
   238  00FF45  41                 	db	65	;'A'
   239  00FF46  3A                 	db	58	;':'
   240  00FF47  54                 	db	84	;'T'
   241  00FF48  6F                 	db	111	;'o'
   242  00FF49  74                 	db	116	;'t'
   243  00FF4A  61                 	db	97	;'a'
   244  00FF4B  6C                 	db	108	;'l'
   245  00FF4C  20                 	db	32
   246  00FF4D  20                 	db	32
   247  00FF4E  20                 	db	32
   248  00FF4F  42                 	db	66	;'B'
   249  00FF50  3A                 	db	58	;':'
   250  00FF51  50                 	db	80	;'P'
   251  00FF52  6F                 	db	111	;'o'
   252  00FF53  70                 	db	112	;'p'
   253  00FF54  20                 	db	32
   254  00FF55  00                 	db	0
   255  00FF56                     STR_14:
   256  00FF56  43                 	db	67	;'C'
   257  00FF57  3A                 	db	58	;':'
   258  00FF58  54                 	db	84	;'T'
   259  00FF59  69                 	db	105	;'i'
   260  00FF5A  6E                 	db	110	;'n'
   261  00FF5B  20                 	db	32
   262  00FF5C  20                 	db	32
   263  00FF5D  20                 	db	32
   264  00FF5E  20                 	db	32
   265  00FF5F  20                 	db	32
   266  00FF60  44                 	db	68	;'D'
   267  00FF61  3A                 	db	58	;':'
   268  00FF62  54                 	db	84	;'T'
   269  00FF63  69                 	db	105	;'i'
   270  00FF64  6D                 	db	109	;'m'
   271  00FF65  65                 	db	101	;'e'
   272  00FF66  00                 	db	0
   273  00FF67                     STR_15:
   274  00FF67  50                 	db	80	;'P'
   275  00FF68  72                 	db	114	;'r'
   276  00FF69  65                 	db	101	;'e'
   277  00FF6A  73                 	db	115	;'s'
   278  00FF6B  73                 	db	115	;'s'
   279  00FF6C  20                 	db	32
   280  00FF6D  30                 	db	48	;'0'
   281  00FF6E  20                 	db	32
   282  00FF6F  74                 	db	116	;'t'
   283  00FF70  6F                 	db	111	;'o'
   284  00FF71  20                 	db	32
   285  00FF72  52                 	db	82	;'R'
   286  00FF73  65                 	db	101	;'e'
   287  00FF74  73                 	db	115	;'s'
   288  00FF75  65                 	db	101	;'e'
   289  00FF76  74                 	db	116	;'t'
   290  00FF77  00                 	db	0
   291  00FF78                     STR_10:
   292  00FF78  50                 	db	80	;'P'
   293  00FF79  72                 	db	114	;'r'
   294  00FF7A  65                 	db	101	;'e'
   295  00FF7B  73                 	db	115	;'s'
   296  00FF7C  73                 	db	115	;'s'
   297  00FF7D  20                 	db	32
   298  00FF7E  23                 	db	35
   299  00FF7F  20                 	db	32
   300  00FF80  74                 	db	116	;'t'
   301  00FF81  6F                 	db	111	;'o'
   302  00FF82  20                 	db	32
   303  00FF83  53                 	db	83	;'S'
   304  00FF84  74                 	db	116	;'t'
   305  00FF85  61                 	db	97	;'a'
   306  00FF86  72                 	db	114	;'r'
   307  00FF87  74                 	db	116	;'t'
   308  00FF88  00                 	db	0
   309  00FF89                     STR_4:
   310  00FF89  57                 	db	87	;'W'
   311  00FF8A  69                 	db	105	;'i'
   312  00FF8B  74                 	db	116	;'t'
   313  00FF8C  68                 	db	104	;'h'
   314  00FF8D  20                 	db	32
   315  00FF8E  4C                 	db	76	;'L'
   316  00FF8F  61                 	db	97	;'a'
   317  00FF90  62                 	db	98	;'b'
   318  00FF91  65                 	db	101	;'e'
   319  00FF92  6C                 	db	108	;'l'
   320  00FF93  3A                 	db	58	;':'
   321  00FF94  20                 	db	32
   322  00FF95  25                 	db	37
   323  00FF96  30                 	db	48	;'0'
   324  00FF97  32                 	db	50	;'2'
   325  00FF98  78                 	db	120	;'x'
   326  00FF99  00                 	db	0
   327  00FF9A                     STR_9:
   328  00FF9A  25                 	db	37
   329  00FF9B  30                 	db	48	;'0'
   330  00FF9C  32                 	db	50	;'2'
   331  00FF9D  78                 	db	120	;'x'
   332  00FF9E  3A                 	db	58	;':'
   333  00FF9F  25                 	db	37
   334  00FFA0  30                 	db	48	;'0'
   335  00FFA1  32                 	db	50	;'2'
   336  00FFA2  78                 	db	120	;'x'
   337  00FFA3  3A                 	db	58	;':'
   338  00FFA4  25                 	db	37
   339  00FFA5  30                 	db	48	;'0'
   340  00FFA6  32                 	db	50	;'2'
   341  00FFA7  78                 	db	120	;'x'
   342  00FFA8  00                 	db	0
   343  00FFA9                     STR_6:
   344  00FFA9  57                 	db	87	;'W'
   345  00FFAA  69                 	db	105	;'i'
   346  00FFAB  74                 	db	116	;'t'
   347  00FFAC  68                 	db	104	;'h'
   348  00FFAD  20                 	db	32
   349  00FFAE  54                 	db	84	;'T'
   350  00FFAF  61                 	db	97	;'a'
   351  00FFB0  62                 	db	98	;'b'
   352  00FFB1  3A                 	db	58	;':'
   353  00FFB2  20                 	db	32
   354  00FFB3  25                 	db	37
   355  00FFB4  30                 	db	48	;'0'
   356  00FFB5  32                 	db	50	;'2'
   357  00FFB6  78                 	db	120	;'x'
   358  00FFB7  00                 	db	0
   359  00FFB8                     STR_5:
   360  00FFB8  4E                 	db	78	;'N'
   361  00FFB9  6F                 	db	111	;'o'
   362  00FFBA  20                 	db	32
   363  00FFBB  4C                 	db	76	;'L'
   364  00FFBC  61                 	db	97	;'a'
   365  00FFBD  62                 	db	98	;'b'
   366  00FFBE  65                 	db	101	;'e'
   367  00FFBF  6C                 	db	108	;'l'
   368  00FFC0  3A                 	db	58	;':'
   369  00FFC1  20                 	db	32
   370  00FFC2  25                 	db	37
   371  00FFC3  30                 	db	48	;'0'
   372  00FFC4  32                 	db	50	;'2'
   373  00FFC5  78                 	db	120	;'x'
   374  00FFC6  00                 	db	0
   375  00FFC7                     STR_11:
   376  00FFC7  49                 	db	73	;'I'
   377  00FFC8  6E                 	db	110	;'n'
   378  00FFC9  69                 	db	105	;'i'
   379  00FFCA  74                 	db	116	;'t'
   380  00FFCB  69                 	db	105	;'i'
   381  00FFCC  61                 	db	97	;'a'
   382  00FFCD  6C                 	db	108	;'l'
   383  00FFCE  69                 	db	105	;'i'
   384  00FFCF  7A                 	db	122	;'z'
   385  00FFD0  69                 	db	105	;'i'
   386  00FFD1  6E                 	db	110	;'n'
   387  00FFD2  67                 	db	103	;'g'
   388  00FFD3  00                 	db	0
   389  00FFD4                     STR_8:
   390  00FFD4  25                 	db	37
   391  00FFD5  30                 	db	48	;'0'
   392  00FFD6  32                 	db	50	;'2'
   393  00FFD7  78                 	db	120	;'x'
   394  00FFD8  2F                 	db	47
   395  00FFD9  25                 	db	37
   396  00FFDA  30                 	db	48	;'0'
   397  00FFDB  32                 	db	50	;'2'
   398  00FFDC  78                 	db	120	;'x'
   399  00FFDD  20                 	db	32
   400  00FFDE  20                 	db	32
   401  00FFDF  20                 	db	32
   402  00FFE0  00                 	db	0
   403  00FFE1                     STR_7:
   404  00FFE1  4E                 	db	78	;'N'
   405  00FFE2  6F                 	db	111	;'o'
   406  00FFE3  20                 	db	32
   407  00FFE4  54                 	db	84	;'T'
   408  00FFE5  61                 	db	97	;'a'
   409  00FFE6  62                 	db	98	;'b'
   410  00FFE7  3A                 	db	58	;':'
   411  00FFE8  20                 	db	32
   412  00FFE9  25                 	db	37
   413  00FFEA  30                 	db	48	;'0'
   414  00FFEB  32                 	db	50	;'2'
   415  00FFEC  78                 	db	120	;'x'
   416  00FFED  00                 	db	0
   417  00FFEE                     STR_12:
   418  00FFEE  43                 	db	67	;'C'
   419  00FFEF  6F                 	db	111	;'o'
   420  00FFF0  6D                 	db	109	;'m'
   421  00FFF1  70                 	db	112	;'p'
   422  00FFF2  6C                 	db	108	;'l'
   423  00FFF3  65                 	db	101	;'e'
   424  00FFF4  74                 	db	116	;'t'
   425  00FFF5  65                 	db	101	;'e'
   426  00FFF6  00                 	db	0
   427  00FFF7                     STR_16:
   428  00FFF7  52                 	db	82	;'R'
   429  00FFF8  65                 	db	101	;'e'
   430  00FFF9  73                 	db	115	;'s'
   431  00FFFA  74                 	db	116	;'t'
   432  00FFFB  61                 	db	97	;'a'
   433  00FFFC  72                 	db	114	;'r'
   434  00FFFD  74                 	db	116	;'t'
   435  00FFFE  00                 	db	0
   436  0000                     
   437                           ; #config settings
   438  00FFFF  00                 	db	0	; dummy byte at the end
   439  0000                     
   440                           	psect	cinit
   441  001790                     __pcinit:
   442                           	opt stack 0
   443  001790                     start_initialization:
   444                           	opt stack 0
   445  001790                     __initialization:
   446                           	opt stack 0
   447                           
   448                           ; Clear objects allocated to BANK0 (2 bytes)
   449  001790  0100               	movlb	0
   450  001792  6BC8               	clrf	(__pbssBANK0+1)& (0+255),b
   451  001794  6BC7               	clrf	__pbssBANK0& (0+255),b
   452                           
   453                           ; Clear objects allocated to COMRAM (12 bytes)
   454  001796  EE00  F03F         	lfsr	0,__pbssCOMRAM
   455  00179A  0E0C               	movlw	12
   456  00179C                     clear_0:
   457  00179C  6AEE               	clrf	postinc0,c
   458  00179E  06E8               	decf	wreg,f,c
   459  0017A0  E1FD               	bnz	clear_0
   460  0017A2                     end_of_initialization:
   461                           	opt stack 0
   462  0017A2                     __end_of__initialization:
   463                           	opt stack 0
   464  0017A2  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   465  0017A4  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   466  0017A6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   467  0017A8  6EF8               	movwf	tblptru,c
   468  0017AA  0100               	movlb	0
   469  0017AC  EFF1  F008         	goto	_main	;jump to C main() function
   470                           tblptru	equ	0xFF8
   471                           postinc0	equ	0xFEE
   472                           wreg	equ	0xFE8
   473                           
   474                           	psect	bssCOMRAM
   475  00003F                     __pbssCOMRAM:
   476                           	opt stack 0
   477  00003F                     _tot:
   478                           	opt stack 0
   479  00003F                     	ds	2
   480  000041                     _operation_time:
   481                           	opt stack 0
   482  000041                     	ds	2
   483  000043                     _tin_can_label:
   484                           	opt stack 0
   485  000043                     	ds	2
   486  000045                     _tin_can:
   487                           	opt stack 0
   488  000045                     	ds	2
   489  000047                     _pop_can_tab:
   490                           	opt stack 0
   491  000047                     	ds	2
   492  000049                     _pop_can:
   493                           	opt stack 0
   494  000049                     	ds	2
   495                           tblptru	equ	0xFF8
   496                           postinc0	equ	0xFEE
   497                           wreg	equ	0xFE8
   498                           
   499                           	psect	bssBANK0
   500  0000C7                     __pbssBANK0:
   501                           	opt stack 0
   502  0000C7                     _total_second:
   503                           	opt stack 0
   504  0000C7                     	ds	2
   505                           tblptru	equ	0xFF8
   506                           postinc0	equ	0xFEE
   507                           wreg	equ	0xFE8
   508                           
   509                           	psect	cstackBANK0
   510  000080                     __pcstackBANK0:
   511                           	opt stack 0
   512  000080                     ??_initialization:
   513  000080                     ??_isdigit:
   514  000080                     ??_I2C_Master_Wait:
   515  000080                     ?___awdiv:
   516                           	opt stack 0
   517  000080                     ?___lwdiv:
   518                           	opt stack 0
   519  000080                     ?___lldiv:
   520                           	opt stack 0
   521  000080                     lcdNibble@temp:
   522                           	opt stack 0
   523  000080                     ___awdiv@dividend:
   524                           	opt stack 0
   525  000080                     ___lwdiv@dividend:
   526                           	opt stack 0
   527  000080                     ___lldiv@dividend:
   528                           	opt stack 0
   529                           
   530                           ; 4 bytes @ 0x0
   531  000080                     	ds	1
   532  000081                     I2C_Master_Read@a:
   533                           	opt stack 0
   534  000081                     lcdNibble@data:
   535                           	opt stack 0
   536  000081                     _isdigit$766:
   537                           	opt stack 0
   538  000081                     I2C_Master_Write@d:
   539                           	opt stack 0
   540                           
   541                           ; 2 bytes @ 0x1
   542  000081                     	ds	1
   543  000082                     I2C_Master_Read@temp:
   544                           	opt stack 0
   545  000082                     lcdInst@data:
   546                           	opt stack 0
   547  000082                     putch@data:
   548                           	opt stack 0
   549  000082                     initialization@i:
   550                           	opt stack 0
   551  000082                     isdigit@c:
   552                           	opt stack 0
   553  000082                     ___awdiv@divisor:
   554                           	opt stack 0
   555  000082                     ___lwdiv@divisor:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x2
   559  000082                     	ds	1
   560  000083                     ??_initLCD:
   561  000083                     set_time@i:
   562                           	opt stack 0
   563  000083                     initialization@i_504:
   564                           	opt stack 0
   565                           
   566                           ; 1 bytes @ 0x3
   567  000083                     	ds	1
   568  000084                     ___awdiv@counter:
   569                           	opt stack 0
   570  000084                     ___lwdiv@counter:
   571                           	opt stack 0
   572  000084                     ___lldiv@divisor:
   573                           	opt stack 0
   574                           
   575                           ; 4 bytes @ 0x4
   576  000084                     	ds	1
   577  000085                     ___awdiv@sign:
   578                           	opt stack 0
   579  000085                     ___lwdiv@quotient:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0x5
   583  000085                     	ds	1
   584  000086                     ___awdiv@quotient:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0x6
   588  000086                     	ds	1
   589  000087                     ?___lwmod:
   590                           	opt stack 0
   591  000087                     ___lwmod@dividend:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x7
   595  000087                     	ds	1
   596  000088                     ?___wmul:
   597                           	opt stack 0
   598  000088                     ___wmul@multiplier:
   599                           	opt stack 0
   600  000088                     ___lldiv@quotient:
   601                           	opt stack 0
   602                           
   603                           ; 4 bytes @ 0x8
   604  000088                     	ds	1
   605  000089                     ___lwmod@divisor:
   606                           	opt stack 0
   607                           
   608                           ; 2 bytes @ 0x9
   609  000089                     	ds	1
   610  00008A                     ___wmul@multiplicand:
   611                           	opt stack 0
   612                           
   613                           ; 2 bytes @ 0xA
   614  00008A                     	ds	1
   615  00008B                     ___lwmod@counter:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0xB
   619  00008B                     	ds	1
   620  00008C                     ___lldiv@counter:
   621                           	opt stack 0
   622  00008C                     ___wmul@product:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0xC
   626  00008C                     	ds	1
   627  00008D                     I2C_Master_Init@c:
   628                           	opt stack 0
   629                           
   630                           ; 4 bytes @ 0xD
   631  00008D                     	ds	1
   632  00008E                     ?_printf:
   633                           	opt stack 0
   634  00008E                     printf@f:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0xE
   638  00008E                     	ds	3
   639  000091                     ??_I2C_Master_Init:
   640                           
   641                           ; 1 bytes @ 0x11
   642  000091                     	ds	5
   643  000096                     ??_printf:
   644                           
   645                           ; 1 bytes @ 0x16
   646  000096                     	ds	4
   647  00009A                     printf@idx:
   648                           	opt stack 0
   649                           
   650                           ; 1 bytes @ 0x1A
   651  00009A                     	ds	1
   652  00009B                     printf@ap:
   653                           	opt stack 0
   654                           
   655                           ; 2 bytes @ 0x1B
   656  00009B                     	ds	2
   657  00009D                     printf@prec:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x1D
   661  00009D                     	ds	1
   662  00009E                     printf@val:
   663                           	opt stack 0
   664                           
   665                           ; 2 bytes @ 0x1E
   666  00009E                     	ds	2
   667  0000A0                     printf@flag:
   668                           	opt stack 0
   669                           
   670                           ; 1 bytes @ 0x20
   671  0000A0                     	ds	1
   672  0000A1                     printf@width:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0x21
   676  0000A1                     	ds	2
   677  0000A3                     printf@c:
   678                           	opt stack 0
   679                           
   680                           ; 1 bytes @ 0x23
   681  0000A3                     	ds	1
   682  0000A4                     ??_results:
   683  0000A4                     ??_startSorting:
   684                           
   685                           ; 1 bytes @ 0x24
   686  0000A4                     	ds	2
   687  0000A6                     startSorting@i:
   688                           	opt stack 0
   689  0000A6                     results@keypress:
   690                           	opt stack 0
   691                           
   692                           ; 1 bytes @ 0x26
   693  0000A6                     	ds	1
   694  0000A7                     startSorting@i_490:
   695                           	opt stack 0
   696  0000A7                     results@keypress_temp:
   697                           	opt stack 0
   698                           
   699                           ; 1 bytes @ 0x27
   700  0000A7                     	ds	1
   701  0000A8                     ?_operation:
   702                           	opt stack 0
   703  0000A8                     results@restart_flag:
   704                           	opt stack 0
   705                           
   706                           ; 2 bytes @ 0x28
   707  0000A8                     	ds	2
   708  0000AA                     ??_operation:
   709  0000AA                     results@i:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0x2A
   713  0000AA                     	ds	1
   714  0000AB                     results@i_510:
   715                           	opt stack 0
   716                           
   717                           ; 1 bytes @ 0x2B
   718  0000AB                     	ds	1
   719  0000AC                     results@i_512:
   720                           	opt stack 0
   721                           
   722                           ; 1 bytes @ 0x2C
   723  0000AC                     	ds	1
   724  0000AD                     results@i_516:
   725                           	opt stack 0
   726  0000AD                     operation@total_start:
   727                           	opt stack 0
   728                           
   729                           ; 4 bytes @ 0x2D
   730  0000AD                     	ds	4
   731  0000B1                     operation@total_end:
   732                           	opt stack 0
   733                           
   734                           ; 4 bytes @ 0x31
   735  0000B1                     	ds	4
   736  0000B5                     operation@keypress:
   737                           	opt stack 0
   738                           
   739                           ; 1 bytes @ 0x35
   740  0000B5                     	ds	1
   741  0000B6                     operation@keypress_temp:
   742                           	opt stack 0
   743                           
   744                           ; 1 bytes @ 0x36
   745  0000B6                     	ds	1
   746  0000B7                     _operation$1102:
   747                           	opt stack 0
   748                           
   749                           ; 2 bytes @ 0x37
   750  0000B7                     	ds	2
   751  0000B9                     operation@time:
   752                           	opt stack 0
   753                           
   754                           ; 7 bytes @ 0x39
   755  0000B9                     	ds	7
   756  0000C0                     operation@i_386:
   757                           	opt stack 0
   758                           
   759                           ; 1 bytes @ 0x40
   760  0000C0                     	ds	1
   761  0000C1                     operation@i:
   762                           	opt stack 0
   763                           
   764                           ; 1 bytes @ 0x41
   765  0000C1                     	ds	1
   766  0000C2                     operation@i_387:
   767                           	opt stack 0
   768                           
   769                           ; 1 bytes @ 0x42
   770  0000C2                     	ds	1
   771  0000C3                     operation@Start_time:
   772                           	opt stack 0
   773                           
   774                           ; 2 bytes @ 0x43
   775  0000C3                     	ds	2
   776  0000C5                     operation@End_time:
   777                           	opt stack 0
   778                           
   779                           ; 2 bytes @ 0x45
   780  0000C5                     	ds	2
   781  0000C7                     tblptru	equ	0xFF8
   782                           postinc0	equ	0xFEE
   783                           wreg	equ	0xFE8
   784                           
   785                           ; 1 bytes @ 0x47
   786                           
   787                           	psect	cstackCOMRAM
   788  000001                     __pcstackCOMRAM:
   789                           	opt stack 0
   790  000001                     ??i2_isdigit:
   791  000001                     ?___awmod:
   792                           	opt stack 0
   793  000001                     ?i2___wmul:
   794                           	opt stack 0
   795  000001                     ?i2___awdiv:
   796                           	opt stack 0
   797  000001                     ?i2___lwdiv:
   798                           	opt stack 0
   799  000001                     i2lcdNibble@temp:
   800                           	opt stack 0
   801  000001                     ___awmod@dividend:
   802                           	opt stack 0
   803  000001                     i2___wmul@multiplier:
   804                           	opt stack 0
   805  000001                     i2___awdiv@dividend:
   806                           	opt stack 0
   807  000001                     i2___lwdiv@dividend:
   808                           	opt stack 0
   809                           
   810                           ; 2 bytes @ 0x0
   811  000001                     	ds	1
   812  000002                     i2lcdNibble@data:
   813                           	opt stack 0
   814  000002                     i2_isdigit$766:
   815                           	opt stack 0
   816                           
   817                           ; 1 bytes @ 0x1
   818  000002                     	ds	1
   819  000003                     i2lcdInst@data:
   820                           	opt stack 0
   821  000003                     i2putch@data:
   822                           	opt stack 0
   823  000003                     i2isdigit@c:
   824                           	opt stack 0
   825  000003                     ___awmod@divisor:
   826                           	opt stack 0
   827  000003                     i2___wmul@multiplicand:
   828                           	opt stack 0
   829  000003                     i2___awdiv@divisor:
   830                           	opt stack 0
   831  000003                     i2___lwdiv@divisor:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0x2
   835  000003                     	ds	1
   836  000004                     ??i2_initLCD:
   837                           
   838                           ; 1 bytes @ 0x3
   839  000004                     	ds	1
   840  000005                     ___awmod@counter:
   841                           	opt stack 0
   842  000005                     i2___awdiv@counter:
   843                           	opt stack 0
   844  000005                     i2___wmul@product:
   845                           	opt stack 0
   846  000005                     i2___lwdiv@quotient:
   847                           	opt stack 0
   848                           
   849                           ; 2 bytes @ 0x4
   850  000005                     	ds	1
   851  000006                     ___awmod@sign:
   852                           	opt stack 0
   853  000006                     i2___awdiv@sign:
   854                           	opt stack 0
   855                           
   856                           ; 1 bytes @ 0x5
   857  000006                     	ds	1
   858  000007                     i2___lwdiv@counter:
   859                           	opt stack 0
   860  000007                     i2___awdiv@quotient:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x6
   864  000007                     	ds	1
   865  000008                     ?i2___lwmod:
   866                           	opt stack 0
   867  000008                     i2___lwmod@dividend:
   868                           	opt stack 0
   869                           
   870                           ; 2 bytes @ 0x7
   871  000008                     	ds	2
   872  00000A                     i2___lwmod@divisor:
   873                           	opt stack 0
   874                           
   875                           ; 2 bytes @ 0x9
   876  00000A                     	ds	2
   877  00000C                     i2___lwmod@counter:
   878                           	opt stack 0
   879                           
   880                           ; 1 bytes @ 0xB
   881  00000C                     	ds	1
   882  00000D                     ?i2_printf:
   883                           	opt stack 0
   884  00000D                     i2printf@f:
   885                           	opt stack 0
   886                           
   887                           ; 2 bytes @ 0xC
   888  00000D                     	ds	6
   889  000013                     ??i2_printf:
   890                           
   891                           ; 1 bytes @ 0x12
   892  000013                     	ds	4
   893  000017                     i2printf@idx:
   894                           	opt stack 0
   895                           
   896                           ; 1 bytes @ 0x16
   897  000017                     	ds	1
   898  000018                     i2printf@ap:
   899                           	opt stack 0
   900                           
   901                           ; 2 bytes @ 0x17
   902  000018                     	ds	2
   903  00001A                     i2printf@prec:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x19
   907  00001A                     	ds	1
   908  00001B                     i2printf@val:
   909                           	opt stack 0
   910                           
   911                           ; 2 bytes @ 0x1A
   912  00001B                     	ds	2
   913  00001D                     i2printf@flag:
   914                           	opt stack 0
   915                           
   916                           ; 1 bytes @ 0x1C
   917  00001D                     	ds	1
   918  00001E                     i2printf@width:
   919                           	opt stack 0
   920                           
   921                           ; 2 bytes @ 0x1D
   922  00001E                     	ds	2
   923  000020                     i2printf@c:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x1F
   927  000020                     	ds	1
   928  000021                     ??_keypressed:
   929                           
   930                           ; 1 bytes @ 0x20
   931  000021                     	ds	16
   932  000031                     keypressed@keypress:
   933                           	opt stack 0
   934                           
   935                           ; 1 bytes @ 0x30
   936  000031                     	ds	1
   937  000032                     keypressed@i:
   938                           	opt stack 0
   939                           
   940                           ; 1 bytes @ 0x31
   941  000032                     	ds	1
   942  000033                     keypressed@i_94:
   943                           	opt stack 0
   944                           
   945                           ; 1 bytes @ 0x32
   946  000033                     	ds	1
   947  000034                     keypressed@i_95:
   948                           	opt stack 0
   949                           
   950                           ; 1 bytes @ 0x33
   951  000034                     	ds	1
   952  000035                     keypressed@i_96:
   953                           	opt stack 0
   954                           
   955                           ; 1 bytes @ 0x34
   956  000035                     	ds	1
   957  000036                     keypressed@i_97:
   958                           	opt stack 0
   959                           
   960                           ; 1 bytes @ 0x35
   961  000036                     	ds	1
   962  000037                     keypressed@i_98:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x36
   966  000037                     	ds	1
   967  000038                     keypressed@i_99:
   968                           	opt stack 0
   969                           
   970                           ; 1 bytes @ 0x37
   971  000038                     	ds	1
   972  000039                     keypressed@i_100:
   973                           	opt stack 0
   974                           
   975                           ; 1 bytes @ 0x38
   976  000039                     	ds	1
   977  00003A                     keypressed@i_101:
   978                           	opt stack 0
   979                           
   980                           ; 1 bytes @ 0x39
   981  00003A                     	ds	1
   982  00003B                     keypressed@i_102:
   983                           	opt stack 0
   984                           
   985                           ; 1 bytes @ 0x3A
   986  00003B                     	ds	1
   987  00003C                     keypressed@i_103:
   988                           	opt stack 0
   989                           
   990                           ; 1 bytes @ 0x3B
   991  00003C                     	ds	1
   992  00003D                     keypressed@i_104:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x3C
   996  00003D                     	ds	1
   997  00003E                     keypressed@keypress_temp:
   998                           	opt stack 0
   999                           
  1000                           ; 1 bytes @ 0x3D
  1001  00003E                     	ds	1
  1002                           tblptru	equ	0xFF8
  1003                           postinc0	equ	0xFEE
  1004                           wreg	equ	0xFE8
  1005                           
  1006 ;;
  1007 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1008 ;;
  1009 ;; *************** function _main *****************
  1010 ;; Defined at:
  1011 ;;		line 50 in file "main.c"
  1012 ;; Parameters:    Size  Location     Type
  1013 ;;		None
  1014 ;; Auto vars:     Size  Location     Type
  1015 ;;  time            7    0        unsigned char [7]
  1016 ;; Return value:  Size  Location     Type
  1017 ;;                  1    wreg      void 
  1018 ;; Registers used:
  1019 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1020 ;; Tracked objects:
  1021 ;;		On entry : 0/0
  1022 ;;		On exit  : 0/0
  1023 ;;		Unchanged: 0/0
  1024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1028 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1029 ;;Total ram usage:        0 bytes
  1030 ;; Hardware stack levels required when called:   10
  1031 ;; This function calls:
  1032 ;;		_I2C_Master_Init
  1033 ;;		_initLCD
  1034 ;;		_operation
  1035 ;;		_results
  1036 ;;		_set_time
  1037 ;; This function is called by:
  1038 ;;		Startup code after reset
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042                           	psect	text0
  1043  0011E2                     __ptext0:
  1044                           	opt stack 0
  1045  0011E2                     _main:
  1046                           	opt stack 21
  1047                           
  1048                           ;main.c: 51: TRISA = 0x11111100;
  1049                           
  1050                           ;incstack = 0
  1051  0011E2  0E00               	movlw	0
  1052  0011E4  6E92               	movwf	3986,c	;volatile
  1053                           
  1054                           ;main.c: 52: TRISB = 0b11110010;
  1055  0011E6  0EF2               	movlw	242
  1056  0011E8  6E93               	movwf	3987,c	;volatile
  1057                           
  1058                           ;main.c: 54: TRISC = 0x00011110;
  1059  0011EA  0E10               	movlw	16
  1060  0011EC  6E94               	movwf	3988,c	;volatile
  1061                           
  1062                           ;main.c: 55: TRISD = 0x00;
  1063  0011EE  0E00               	movlw	0
  1064  0011F0  6E95               	movwf	3989,c	;volatile
  1065                           
  1066                           ;main.c: 56: TRISE = 0x00;
  1067  0011F2  0E00               	movlw	0
  1068  0011F4  6E96               	movwf	3990,c	;volatile
  1069                           
  1070                           ;main.c: 58: LATA = 0x00;
  1071  0011F6  0E00               	movlw	0
  1072  0011F8  6E89               	movwf	3977,c	;volatile
  1073                           
  1074                           ;main.c: 59: LATB = 0x00;
  1075  0011FA  0E00               	movlw	0
  1076  0011FC  6E8A               	movwf	3978,c	;volatile
  1077                           
  1078                           ;main.c: 60: LATC = 0x01;
  1079  0011FE  0E01               	movlw	1
  1080  001200  6E8B               	movwf	3979,c	;volatile
  1081                           
  1082                           ;main.c: 61: LATD = 0x00;
  1083  001202  0E00               	movlw	0
  1084  001204  6E8C               	movwf	3980,c	;volatile
  1085                           
  1086                           ;main.c: 62: LATE = 0x00001000;
  1087  001206  0E00               	movlw	0
  1088  001208  6E8D               	movwf	3981,c	;volatile
  1089                           
  1090                           ;main.c: 64: ADCON0 = 0x00;
  1091  00120A  0E00               	movlw	0
  1092  00120C  6EC2               	movwf	4034,c	;volatile
  1093                           
  1094                           ;main.c: 65: ADCON1 = 0xFF;
  1095  00120E  68C1               	setf	4033,c	;volatile
  1096                           
  1097                           ;main.c: 67: initLCD();
  1098  001210  ECAC  F00A         	call	_initLCD	;wreg free
  1099                           
  1100                           ;main.c: 68: INT1IE = 1;
  1101  001214  86F0               	bsf	intcon3,3,c	;volatile
  1102                           
  1103                           ;main.c: 70: unsigned char time[7];
  1104                           ;main.c: 71: I2C_Master_Init(10000);
  1105  001216  0E10               	movlw	16
  1106  001218  0100               	movlb	0	; () banked
  1107  00121A  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  1108  00121C  0E27               	movlw	39
  1109  00121E  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1110  001220  0E00               	movlw	0
  1111  001222  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1112  001224  0E00               	movlw	0
  1113  001226  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1114  001228  ECFA  F009         	call	_I2C_Master_Init	;wreg free
  1115                           
  1116                           ;main.c: 72: set_time();
  1117  00122C  EC2A  F00A         	call	_set_time	;wreg free
  1118  001230                     l3731:
  1119                           
  1120                           ;main.c: 77: operation_time = operation();
  1121  001230  EC09  F000         	call	_operation	;wreg free
  1122  001234  C0A8  F041         	movff	?_operation,_operation_time
  1123  001238  C0A9  F042         	movff	?_operation+1,_operation_time+1
  1124                           
  1125                           ;main.c: 79: LATA = 0x00;
  1126  00123C  0E00               	movlw	0
  1127  00123E  6E89               	movwf	3977,c	;volatile
  1128                           
  1129                           ;main.c: 80: LATB = 0x00;
  1130  001240  0E00               	movlw	0
  1131  001242  6E8A               	movwf	3978,c	;volatile
  1132                           
  1133                           ;main.c: 81: LATC = 0x01;
  1134  001244  0E01               	movlw	1
  1135  001246  6E8B               	movwf	3979,c	;volatile
  1136                           
  1137                           ;main.c: 82: LATD = 0x00;
  1138  001248  0E00               	movlw	0
  1139  00124A  6E8C               	movwf	3980,c	;volatile
  1140                           
  1141                           ;main.c: 83: LATE = 0x00;
  1142  00124C  0E00               	movlw	0
  1143  00124E  6E8D               	movwf	3981,c	;volatile
  1144                           
  1145                           ;main.c: 85: results();
  1146  001250  ECB4  F006         	call	_results	;wreg free
  1147  001254  D7ED               	goto	l3731
  1148  001256                     __end_of_main:
  1149                           	opt stack 0
  1150                           tblptru	equ	0xFF8
  1151                           intcon3	equ	0xFF0
  1152                           postinc0	equ	0xFEE
  1153                           wreg	equ	0xFE8
  1154                           
  1155 ;; *************** function _set_time *****************
  1156 ;; Defined at:
  1157 ;;		line 40 in file "main.c"
  1158 ;; Parameters:    Size  Location     Type
  1159 ;;		None
  1160 ;; Auto vars:     Size  Location     Type
  1161 ;;  i               1    3[BANK0 ] unsigned char 
  1162 ;; Return value:  Size  Location     Type
  1163 ;;                  1    wreg      void 
  1164 ;; Registers used:
  1165 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1166 ;; Tracked objects:
  1167 ;;		On entry : 0/0
  1168 ;;		On exit  : 0/0
  1169 ;;		Unchanged: 0/0
  1170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1172 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1174 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1175 ;;Total ram usage:        1 bytes
  1176 ;; Hardware stack levels used:    1
  1177 ;; Hardware stack levels required when called:    7
  1178 ;; This function calls:
  1179 ;;		_I2C_Master_Start
  1180 ;;		_I2C_Master_Stop
  1181 ;;		_I2C_Master_Write
  1182 ;; This function is called by:
  1183 ;;		_main
  1184 ;; This function uses a non-reentrant model
  1185 ;;
  1186                           
  1187                           	psect	text1
  1188  001454                     __ptext1:
  1189                           	opt stack 0
  1190  001454                     _set_time:
  1191                           	opt stack 23
  1192                           
  1193                           ;main.c: 41: I2C_Master_Start();
  1194                           
  1195                           ;incstack = 0
  1196  001454  EC23  F00C         	call	_I2C_Master_Start	;wreg free
  1197                           
  1198                           ;main.c: 42: I2C_Master_Write(0b11010000);
  1199  001458  0E00               	movlw	0
  1200  00145A  0100               	movlb	0	; () banked
  1201  00145C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1202  00145E  0ED0               	movlw	208
  1203  001460  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  1204  001462  EC1A  F00C         	call	_I2C_Master_Write	;wreg free
  1205                           
  1206                           ;main.c: 43: I2C_Master_Write(0x00);
  1207  001466  0E00               	movlw	0
  1208  001468  0100               	movlb	0	; () banked
  1209  00146A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1210  00146C  0E00               	movlw	0
  1211  00146E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  1212  001470  EC1A  F00C         	call	_I2C_Master_Write	;wreg free
  1213                           
  1214                           ;main.c: 44: for(char i=0; i<7; i++){
  1215  001474  0E00               	movlw	0
  1216  001476  0100               	movlb	0	; () banked
  1217  001478  6F83               	movwf	set_time@i& (0+255),b
  1218  00147A                     l3541:
  1219                           
  1220                           ; BSR set to: 0
  1221  00147A  0E06               	movlw	6
  1222  00147C  0100               	movlb	0	; () banked
  1223  00147E  6583               	cpfsgt	set_time@i& (0+255),b
  1224  001480  D001               	goto	l3545
  1225  001482  D013               	goto	l3551
  1226  001484                     l3545:
  1227                           
  1228                           ; BSR set to: 0
  1229                           ;main.c: 45: I2C_Master_Write(real_time[i]);
  1230  001484  0100               	movlb	0	; () banked
  1231  001486  5183               	movf	set_time@i& (0+255),w,b
  1232  001488  0D01               	mullw	1
  1233  00148A  0E04               	movlw	low _real_time
  1234  00148C  24F3               	addwf	prodl,w,c
  1235  00148E  6EF6               	movwf	tblptrl,c
  1236  001490  0EFF               	movlw	high _real_time
  1237  001492  20F4               	addwfc	prodh,w,c
  1238  001494  6EF7               	movwf	tblptrh,c
  1239  001496                     	if	0	;There are less than 3 active tblptr bytes
  1240  001496                     	endif
  1241  001496  0008               	tblrd		*
  1242  001498  50F5               	movf	tablat,w,c
  1243  00149A  0100               	movlb	0	; () banked
  1244  00149C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  1245  00149E  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  1246  0014A0  EC1A  F00C         	call	_I2C_Master_Write	;wreg free
  1247  0014A4  0100               	movlb	0	; () banked
  1248  0014A6  2B83               	incf	set_time@i& (0+255),f,b
  1249  0014A8  D7E8               	goto	l3541
  1250  0014AA                     l3551:
  1251                           
  1252                           ; BSR set to: 0
  1253                           ;main.c: 46: }
  1254                           ;main.c: 47: I2C_Master_Stop();
  1255  0014AA  EC1F  F00C         	call	_I2C_Master_Stop	;wreg free
  1256  0014AE  0012               	return		;funcret
  1257  0014B0                     __end_of_set_time:
  1258                           	opt stack 0
  1259                           tblptru	equ	0xFF8
  1260                           tblptrh	equ	0xFF7
  1261                           tblptrl	equ	0xFF6
  1262                           tablat	equ	0xFF5
  1263                           prodh	equ	0xFF4
  1264                           prodl	equ	0xFF3
  1265                           intcon3	equ	0xFF0
  1266                           postinc0	equ	0xFEE
  1267                           wreg	equ	0xFE8
  1268                           
  1269 ;; *************** function _results *****************
  1270 ;; Defined at:
  1271 ;;		line 61 in file "sort.c"
  1272 ;; Parameters:    Size  Location     Type
  1273 ;;		None
  1274 ;; Auto vars:     Size  Location     Type
  1275 ;;  i               1   45[BANK0 ] unsigned char 
  1276 ;;  i               1   44[BANK0 ] unsigned char 
  1277 ;;  i               1   43[BANK0 ] unsigned char 
  1278 ;;  i               1   42[BANK0 ] unsigned char 
  1279 ;;  keypress_tem    1   39[BANK0 ] unsigned char 
  1280 ;;  keypress        1   38[BANK0 ] unsigned char 
  1281 ;;  restart_flag    2   40[BANK0 ] int 
  1282 ;; Return value:  Size  Location     Type
  1283 ;;                  2  178[None  ] int 
  1284 ;; Registers used:
  1285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1286 ;; Tracked objects:
  1287 ;;		On entry : 0/0
  1288 ;;		On exit  : 0/0
  1289 ;;		Unchanged: 0/0
  1290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1292 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1293 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1294 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1295 ;;Total ram usage:       10 bytes
  1296 ;; Hardware stack levels used:    1
  1297 ;; Hardware stack levels required when called:    8
  1298 ;; This function calls:
  1299 ;;		_initLCD
  1300 ;;		_lcdInst
  1301 ;;		_printf
  1302 ;; This function is called by:
  1303 ;;		_main
  1304 ;; This function uses a non-reentrant model
  1305 ;;
  1306                           
  1307                           	psect	text2
  1308  000D68                     __ptext2:
  1309                           	opt stack 0
  1310  000D68                     _results:
  1311                           	opt stack 22
  1312                           
  1313                           ;sort.c: 63: int restart_flag = 0;
  1314                           
  1315                           ;incstack = 0
  1316  000D68  0E00               	movlw	0
  1317  000D6A  0100               	movlb	0	; () banked
  1318  000D6C  6FA9               	movwf	(results@restart_flag+1)& (0+255),b
  1319  000D6E  0E00               	movlw	0
  1320  000D70  D0AB               	goto	L1
  1321  000D72                     l304:
  1322                           
  1323                           ; BSR set to: 0
  1324                           ;sort.c: 66: (INTCONbits.GIE = 0);
  1325  000D72  9EF2               	bcf	intcon,7,c	;volatile
  1326                           
  1327                           ; BSR set to: 0
  1328                           ;sort.c: 67: lcdInst(0b10000000);;
  1329  000D74  0E80               	movlw	128
  1330  000D76  EC06  F00C         	call	_lcdInst
  1331                           
  1332                           ;sort.c: 68: initLCD();
  1333  000D7A  ECAC  F00A         	call	_initLCD	;wreg free
  1334                           
  1335                           ;sort.c: 69: printf("A:Total   B:Pop ");
  1336  000D7E  0E45               	movlw	low STR_13
  1337  000D80  0100               	movlb	0	; () banked
  1338  000D82  6F8E               	movwf	printf@f& (0+255),b
  1339  000D84  0EFF               	movlw	high STR_13
  1340  000D86  0100               	movlb	0	; () banked
  1341  000D88  6F8F               	movwf	(printf@f+1)& (0+255),b
  1342  000D8A  ECF1  F001         	call	_printf	;wreg free
  1343                           
  1344                           ;sort.c: 70: lcdInst(0b11000000);;
  1345  000D8E  0EC0               	movlw	192
  1346  000D90  EC06  F00C         	call	_lcdInst
  1347                           
  1348                           ;sort.c: 71: printf("C:Tin     D:Time");
  1349  000D94  0E56               	movlw	low STR_14
  1350  000D96  0100               	movlb	0	; () banked
  1351  000D98  6F8E               	movwf	printf@f& (0+255),b
  1352  000D9A  0EFF               	movlw	high STR_14
  1353  000D9C  0100               	movlb	0	; () banked
  1354  000D9E  6F8F               	movwf	(printf@f+1)& (0+255),b
  1355  000DA0  ECF1  F001         	call	_printf	;wreg free
  1356                           
  1357                           ;sort.c: 72: (INTCONbits.GIE = 1);
  1358  000DA4  8EF2               	bsf	intcon,7,c	;volatile
  1359                           
  1360                           ;sort.c: 73: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)));};
  1361  000DA6  0E00               	movlw	0
  1362  000DA8  0100               	movlb	0	; () banked
  1363  000DAA  6FAA               	movwf	results@i& (0+255),b
  1364  000DAC                     l3659:
  1365                           
  1366                           ; BSR set to: 0
  1367  000DAC  0E09               	movlw	9
  1368  000DAE  0100               	movlb	0	; () banked
  1369  000DB0  65AA               	cpfsgt	results@i& (0+255),b
  1370  000DB2  D001               	goto	l3663
  1371  000DB4  D010               	goto	l3667
  1372  000DB6                     l3663:
  1373                           
  1374                           ; BSR set to: 0
  1375  000DB6  0E02               	movlw	2
  1376  000DB8  0100               	movlb	0	; () banked
  1377  000DBA  6FA5               	movwf	(??_results+1)& (0+255),b
  1378  000DBC  0E3F               	movlw	63
  1379  000DBE  0100               	movlb	0	; () banked
  1380  000DC0  6FA4               	movwf	??_results& (0+255),b
  1381  000DC2  0E2B               	movlw	43
  1382  000DC4                     u3687:
  1383  000DC4  2EE8               	decfsz	wreg,f,c
  1384  000DC6  D7FE               	bra	u3687
  1385  000DC8  2FA4               	decfsz	??_results& (0+255),f,b
  1386  000DCA  D7FC               	bra	u3687
  1387  000DCC  2FA5               	decfsz	(??_results+1)& (0+255),f,b
  1388  000DCE  D7FA               	bra	u3687
  1389  000DD0  0100               	movlb	0	; () banked
  1390  000DD2  2BAA               	incf	results@i& (0+255),f,b
  1391  000DD4  D7EB               	goto	l3659
  1392  000DD6                     l3667:
  1393                           
  1394                           ; BSR set to: 0
  1395                           ;sort.c: 74: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)));};
  1396  000DD6  0E00               	movlw	0
  1397  000DD8  0100               	movlb	0	; () banked
  1398  000DDA  6FAB               	movwf	results@i_510& (0+255),b
  1399  000DDC                     l3669:
  1400                           
  1401                           ; BSR set to: 0
  1402  000DDC  0E09               	movlw	9
  1403  000DDE  0100               	movlb	0	; () banked
  1404  000DE0  65AB               	cpfsgt	results@i_510& (0+255),b
  1405  000DE2  D001               	goto	l3673
  1406  000DE4  D010               	goto	l308
  1407  000DE6                     l3673:
  1408                           
  1409                           ; BSR set to: 0
  1410  000DE6  0E02               	movlw	2
  1411  000DE8  0100               	movlb	0	; () banked
  1412  000DEA  6FA5               	movwf	(??_results+1)& (0+255),b
  1413  000DEC  0E3F               	movlw	63
  1414  000DEE  0100               	movlb	0	; () banked
  1415  000DF0  6FA4               	movwf	??_results& (0+255),b
  1416  000DF2  0E2B               	movlw	43
  1417  000DF4                     u3697:
  1418  000DF4  2EE8               	decfsz	wreg,f,c
  1419  000DF6  D7FE               	bra	u3697
  1420  000DF8  2FA4               	decfsz	??_results& (0+255),f,b
  1421  000DFA  D7FC               	bra	u3697
  1422  000DFC  2FA5               	decfsz	(??_results+1)& (0+255),f,b
  1423  000DFE  D7FA               	bra	u3697
  1424  000E00  0100               	movlb	0	; () banked
  1425  000E02  2BAB               	incf	results@i_510& (0+255),f,b
  1426  000E04  D7EB               	goto	l3669
  1427  000E06                     l308:
  1428                           
  1429                           ; BSR set to: 0
  1430                           ;sort.c: 76: (INTCONbits.GIE = 0);
  1431  000E06  9EF2               	bcf	intcon,7,c	;volatile
  1432                           
  1433                           ; BSR set to: 0
  1434                           ;sort.c: 77: lcdInst(0b10000000);;
  1435  000E08  0E80               	movlw	128
  1436  000E0A  EC06  F00C         	call	_lcdInst
  1437                           
  1438                           ;sort.c: 78: initLCD();
  1439  000E0E  ECAC  F00A         	call	_initLCD	;wreg free
  1440                           
  1441                           ;sort.c: 79: printf("Press 0 to Reset");
  1442  000E12  0E67               	movlw	low STR_15
  1443  000E14  0100               	movlb	0	; () banked
  1444  000E16  6F8E               	movwf	printf@f& (0+255),b
  1445  000E18  0EFF               	movlw	high STR_15
  1446  000E1A  0100               	movlb	0	; () banked
  1447  000E1C  6F8F               	movwf	(printf@f+1)& (0+255),b
  1448  000E1E  ECF1  F001         	call	_printf	;wreg free
  1449                           
  1450                           ;sort.c: 80: (INTCONbits.GIE = 1);
  1451  000E22  8EF2               	bsf	intcon,7,c	;volatile
  1452                           
  1453                           ;sort.c: 81: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)));};
  1454  000E24  0E00               	movlw	0
  1455  000E26  0100               	movlb	0	; () banked
  1456  000E28  6FAC               	movwf	results@i_512& (0+255),b
  1457  000E2A                     l3685:
  1458                           
  1459                           ; BSR set to: 0
  1460  000E2A  0E09               	movlw	9
  1461  000E2C  0100               	movlb	0	; () banked
  1462  000E2E  65AC               	cpfsgt	results@i_512& (0+255),b
  1463  000E30  D001               	goto	l3689
  1464  000E32  D010               	goto	l3693
  1465  000E34                     l3689:
  1466                           
  1467                           ; BSR set to: 0
  1468  000E34  0E02               	movlw	2
  1469  000E36  0100               	movlb	0	; () banked
  1470  000E38  6FA5               	movwf	(??_results+1)& (0+255),b
  1471  000E3A  0E3F               	movlw	63
  1472  000E3C  0100               	movlb	0	; () banked
  1473  000E3E  6FA4               	movwf	??_results& (0+255),b
  1474  000E40  0E2B               	movlw	43
  1475  000E42                     u3707:
  1476  000E42  2EE8               	decfsz	wreg,f,c
  1477  000E44  D7FE               	bra	u3707
  1478  000E46  2FA4               	decfsz	??_results& (0+255),f,b
  1479  000E48  D7FC               	bra	u3707
  1480  000E4A  2FA5               	decfsz	(??_results+1)& (0+255),f,b
  1481  000E4C  D7FA               	bra	u3707
  1482  000E4E  0100               	movlb	0	; () banked
  1483  000E50  2BAC               	incf	results@i_512& (0+255),f,b
  1484  000E52  D7EB               	goto	l3685
  1485  000E54                     l3693:
  1486                           
  1487                           ; BSR set to: 0
  1488                           ;sort.c: 83: unsigned char keypress = (PORTB & 0xF0) >> 4;
  1489  000E54  3881               	swapf	3969,w,c	;volatile
  1490  000E56  0B0F               	andlw	15
  1491  000E58  0B0F               	andlw	15
  1492  000E5A  0100               	movlb	0	; () banked
  1493  000E5C  6FA6               	movwf	results@keypress& (0+255),b
  1494                           
  1495                           ; BSR set to: 0
  1496                           ;sort.c: 84: unsigned char keypress_temp = keys[keypress];
  1497  000E5E  0100               	movlb	0	; () banked
  1498  000E60  51A6               	movf	results@keypress& (0+255),w,b
  1499  000E62  0D01               	mullw	1
  1500  000E64  0EE1               	movlw	low _keys
  1501  000E66  24F3               	addwf	prodl,w,c
  1502  000E68  6EF6               	movwf	tblptrl,c
  1503  000E6A  0EFE               	movlw	high _keys
  1504  000E6C  20F4               	addwfc	prodh,w,c
  1505  000E6E  6EF7               	movwf	tblptrh,c
  1506  000E70                     	if	0	;There are less than 3 active tblptr bytes
  1507  000E70                     	endif
  1508  000E70  0008               	tblrd		*
  1509  000E72  CFF5 F0A7          	movff	tablat,results@keypress_temp
  1510                           
  1511                           ; BSR set to: 0
  1512                           ;sort.c: 86: if(keypress_temp == '0'){
  1513  000E76  0E30               	movlw	48
  1514  000E78  0100               	movlb	0	; () banked
  1515  000E7A  19A7               	xorwf	results@keypress_temp& (0+255),w,b
  1516  000E7C  A4D8               	btfss	status,2,c
  1517  000E7E  D025               	goto	l3713
  1518                           
  1519                           ; BSR set to: 0
  1520                           ;sort.c: 87: printf("Restart");
  1521  000E80  0EF7               	movlw	low STR_16
  1522  000E82  0100               	movlb	0	; () banked
  1523  000E84  6F8E               	movwf	printf@f& (0+255),b
  1524  000E86  0EFF               	movlw	high STR_16
  1525  000E88  0100               	movlb	0	; () banked
  1526  000E8A  6F8F               	movwf	(printf@f+1)& (0+255),b
  1527  000E8C  ECF1  F001         	call	_printf	;wreg free
  1528                           
  1529                           ;sort.c: 88: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)));};
  1530  000E90  0E00               	movlw	0
  1531  000E92  0100               	movlb	0	; () banked
  1532  000E94  6FAD               	movwf	results@i_516& (0+255),b
  1533  000E96                     l3703:
  1534                           
  1535                           ; BSR set to: 0
  1536  000E96  0E09               	movlw	9
  1537  000E98  0100               	movlb	0	; () banked
  1538  000E9A  65AD               	cpfsgt	results@i_516& (0+255),b
  1539  000E9C  D001               	goto	l3707
  1540  000E9E  D010               	goto	l3711
  1541  000EA0                     l3707:
  1542                           
  1543                           ; BSR set to: 0
  1544  000EA0  0E02               	movlw	2
  1545  000EA2  0100               	movlb	0	; () banked
  1546  000EA4  6FA5               	movwf	(??_results+1)& (0+255),b
  1547  000EA6  0E3F               	movlw	63
  1548  000EA8  0100               	movlb	0	; () banked
  1549  000EAA  6FA4               	movwf	??_results& (0+255),b
  1550  000EAC  0E2B               	movlw	43
  1551  000EAE                     u3717:
  1552  000EAE  2EE8               	decfsz	wreg,f,c
  1553  000EB0  D7FE               	bra	u3717
  1554  000EB2  2FA4               	decfsz	??_results& (0+255),f,b
  1555  000EB4  D7FC               	bra	u3717
  1556  000EB6  2FA5               	decfsz	(??_results+1)& (0+255),f,b
  1557  000EB8  D7FA               	bra	u3717
  1558  000EBA  0100               	movlb	0	; () banked
  1559  000EBC  2BAD               	incf	results@i_516& (0+255),f,b
  1560  000EBE  D7EB               	goto	l3703
  1561  000EC0                     l3711:
  1562                           
  1563                           ; BSR set to: 0
  1564                           ;sort.c: 89: restart_flag = 1;
  1565  000EC0  0E00               	movlw	0
  1566  000EC2  0100               	movlb	0	; () banked
  1567  000EC4  6FA9               	movwf	(results@restart_flag+1)& (0+255),b
  1568  000EC6  0E01               	movlw	1
  1569  000EC8                     L1:
  1570  000EC8  6FA8               	movwf	results@restart_flag& (0+255),b
  1571  000ECA                     l3713:
  1572                           
  1573                           ; BSR set to: 0
  1574  000ECA  0100               	movlb	0	; () banked
  1575  000ECC  51A8               	movf	results@restart_flag& (0+255),w,b
  1576  000ECE  0100               	movlb	0	; () banked
  1577  000ED0  11A9               	iorwf	(results@restart_flag+1)& (0+255),w,b
  1578  000ED2  A4D8               	btfss	status,2,c
  1579  000ED4  0012               	return	
  1580  000ED6  D74D               	goto	l304
  1581  000ED8                     __end_of_results:
  1582                           	opt stack 0
  1583                           tblptru	equ	0xFF8
  1584                           tblptrh	equ	0xFF7
  1585                           tblptrl	equ	0xFF6
  1586                           tablat	equ	0xFF5
  1587                           prodh	equ	0xFF4
  1588                           prodl	equ	0xFF3
  1589                           intcon	equ	0xFF2
  1590                           intcon3	equ	0xFF0
  1591                           postinc0	equ	0xFEE
  1592                           wreg	equ	0xFE8
  1593                           status	equ	0xFD8
  1594                           
  1595 ;; *************** function _operation *****************
  1596 ;; Defined at:
  1597 ;;		line 21 in file "operation_time.c"
  1598 ;; Parameters:    Size  Location     Type
  1599 ;;		None
  1600 ;; Auto vars:     Size  Location     Type
  1601 ;;  i               1   64[BANK0 ] unsigned char 
  1602 ;;  i               1   65[BANK0 ] unsigned char 
  1603 ;;  i               1   66[BANK0 ] unsigned char 
  1604 ;;  keypress_tem    1   54[BANK0 ] unsigned char 
  1605 ;;  keypress        1   53[BANK0 ] unsigned char 
  1606 ;;  time            7   57[BANK0 ] unsigned char [7]
  1607 ;;  total_end       4   49[BANK0 ] unsigned long 
  1608 ;;  total_start     4   45[BANK0 ] unsigned long 
  1609 ;;  End_time        2   69[BANK0 ] unsigned char [2]
  1610 ;;  Start_time      2   67[BANK0 ] unsigned char [2]
  1611 ;; Return value:  Size  Location     Type
  1612 ;;                  2   40[BANK0 ] int 
  1613 ;; Registers used:
  1614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1620 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1621 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1622 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1623 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1624 ;;Total ram usage:       31 bytes
  1625 ;; Hardware stack levels used:    1
  1626 ;; Hardware stack levels required when called:    9
  1627 ;; This function calls:
  1628 ;;		_I2C_Master_Read
  1629 ;;		_I2C_Master_Start
  1630 ;;		_I2C_Master_Stop
  1631 ;;		_I2C_Master_Write
  1632 ;;		___awdiv
  1633 ;;		___wmul
  1634 ;;		_initLCD
  1635 ;;		_lcdInst
  1636 ;;		_printf
  1637 ;;		_startSorting
  1638 ;; This function is called by:
  1639 ;;		_main
  1640 ;; This function uses a non-reentrant model
  1641 ;;
  1642                           
  1643                           	psect	text3
  1644  000012                     __ptext3:
  1645                           	opt stack 0
  1646  000012                     _operation:
  1647                           	opt stack 21
  1648                           
  1649                           ;operation_time.c: 23: unsigned char Start_time[2];
  1650                           ;operation_time.c: 24: unsigned char End_time[2];
  1651                           ;operation_time.c: 25: unsigned long total_start, total_end;
  1652                           ;operation_time.c: 27: initLCD();
  1653                           
  1654                           ; BSR set to: 0
  1655                           ;incstack = 0
  1656  000012  ECAC  F00A         	call	_initLCD	;wreg free
  1657                           
  1658                           ;operation_time.c: 28: unsigned char time[7];
  1659                           ;operation_time.c: 30: (INTCONbits.GIE = 0);
  1660  000016  9EF2               	bcf	intcon,7,c	;volatile
  1661  000018                     l252:
  1662                           
  1663                           ;operation_time.c: 34: I2C_Master_Start();
  1664  000018  EC23  F00C         	call	_I2C_Master_Start	;wreg free
  1665                           
  1666                           ;operation_time.c: 35: I2C_Master_Write(0b11010000);
  1667  00001C  0E00               	movlw	0
  1668  00001E  0100               	movlb	0	; () banked
  1669  000020  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1670  000022  0ED0               	movlw	208
  1671  000024  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  1672  000026  EC1A  F00C         	call	_I2C_Master_Write	;wreg free
  1673                           
  1674                           ;operation_time.c: 36: I2C_Master_Write(0x00);
  1675  00002A  0E00               	movlw	0
  1676  00002C  0100               	movlb	0	; () banked
  1677  00002E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1678  000030  0E00               	movlw	0
  1679  000032  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  1680  000034  EC1A  F00C         	call	_I2C_Master_Write	;wreg free
  1681                           
  1682                           ;operation_time.c: 37: I2C_Master_Stop();
  1683  000038  EC1F  F00C         	call	_I2C_Master_Stop	;wreg free
  1684                           
  1685                           ;operation_time.c: 40: I2C_Master_Start();
  1686  00003C  EC23  F00C         	call	_I2C_Master_Start	;wreg free
  1687                           
  1688                           ;operation_time.c: 41: I2C_Master_Write(0b11010001);
  1689  000040  0E00               	movlw	0
  1690  000042  0100               	movlb	0	; () banked
  1691  000044  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1692  000046  0ED1               	movlw	209
  1693  000048  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  1694  00004A  EC1A  F00C         	call	_I2C_Master_Write	;wreg free
  1695                           
  1696                           ;operation_time.c: 42: for(unsigned char i=0;i<0x06;i++){
  1697  00004E  0E00               	movlw	0
  1698  000050  0100               	movlb	0	; () banked
  1699  000052  6FC1               	movwf	operation@i& (0+255),b
  1700  000054                     l3559:
  1701                           
  1702                           ; BSR set to: 0
  1703  000054  0E05               	movlw	5
  1704  000056  0100               	movlb	0	; () banked
  1705  000058  65C1               	cpfsgt	operation@i& (0+255),b
  1706  00005A  D001               	goto	l3563
  1707  00005C  D010               	goto	l3569
  1708  00005E                     l3563:
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;operation_time.c: 43: time[i] = I2C_Master_Read(1);
  1712  00005E  0100               	movlb	0	; () banked
  1713  000060  51C1               	movf	operation@i& (0+255),w,b
  1714  000062  0D01               	mullw	1
  1715  000064  0EB9               	movlw	low operation@time
  1716  000066  24F3               	addwf	prodl,w,c
  1717  000068  6ED9               	movwf	fsr2l,c
  1718  00006A  0E00               	movlw	high operation@time
  1719  00006C  20F4               	addwfc	prodh,w,c
  1720  00006E  6EDA               	movwf	fsr2h,c
  1721  000070  0E01               	movlw	1
  1722  000072  EC89  F00B         	call	_I2C_Master_Read
  1723  000076  6EDF               	movwf	indf2,c
  1724  000078  0100               	movlb	0	; () banked
  1725  00007A  2BC1               	incf	operation@i& (0+255),f,b
  1726  00007C  D7EB               	goto	l3559
  1727  00007E                     l3569:
  1728                           
  1729                           ; BSR set to: 0
  1730                           ;operation_time.c: 44: }
  1731                           ;operation_time.c: 45: time[6] = I2C_Master_Read(0);
  1732  00007E  0E00               	movlw	0
  1733  000080  EC89  F00B         	call	_I2C_Master_Read
  1734  000084  0100               	movlb	0	; () banked
  1735  000086  6FBF               	movwf	(operation@time+6)& (0+255),b
  1736                           
  1737                           ;operation_time.c: 46: I2C_Master_Stop();
  1738  000088  EC1F  F00C         	call	_I2C_Master_Stop	;wreg free
  1739                           
  1740                           ;operation_time.c: 48: lcdInst(0b10000000);;
  1741  00008C  0E80               	movlw	128
  1742  00008E  EC06  F00C         	call	_lcdInst
  1743                           
  1744                           ;operation_time.c: 49: printf("%02x/%02x   ",time[5],time[4]);
  1745  000092  0ED4               	movlw	low STR_8
  1746  000094  0100               	movlb	0	; () banked
  1747  000096  6F8E               	movwf	printf@f& (0+255),b
  1748  000098  0EFF               	movlw	high STR_8
  1749  00009A  0100               	movlb	0	; () banked
  1750  00009C  6F8F               	movwf	(printf@f+1)& (0+255),b
  1751  00009E  C0BE  F090         	movff	operation@time+5,?_printf+2
  1752  0000A2  0100               	movlb	0	; () banked
  1753  0000A4  6B91               	clrf	(?_printf+3)& (0+255),b
  1754  0000A6  C0BD  F092         	movff	operation@time+4,?_printf+4
  1755  0000AA  0100               	movlb	0	; () banked
  1756  0000AC  6B93               	clrf	(?_printf+5)& (0+255),b
  1757  0000AE  ECF1  F001         	call	_printf	;wreg free
  1758                           
  1759                           ;operation_time.c: 50: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  1760  0000B2  0E9A               	movlw	low STR_9
  1761  0000B4  0100               	movlb	0	; () banked
  1762  0000B6  6F8E               	movwf	printf@f& (0+255),b
  1763  0000B8  0EFF               	movlw	high STR_9
  1764  0000BA  0100               	movlb	0	; () banked
  1765  0000BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  1766  0000BE  C0BB  F090         	movff	operation@time+2,?_printf+2
  1767  0000C2  0100               	movlb	0	; () banked
  1768  0000C4  6B91               	clrf	(?_printf+3)& (0+255),b
  1769  0000C6  C0BA  F092         	movff	operation@time+1,?_printf+4
  1770  0000CA  0100               	movlb	0	; () banked
  1771  0000CC  6B93               	clrf	(?_printf+5)& (0+255),b
  1772  0000CE  C0B9  F094         	movff	operation@time,?_printf+6
  1773  0000D2  0100               	movlb	0	; () banked
  1774  0000D4  6B95               	clrf	(?_printf+7)& (0+255),b
  1775  0000D6  ECF1  F001         	call	_printf	;wreg free
  1776                           
  1777                           ;operation_time.c: 52: lcdInst(0b11000000);;
  1778  0000DA  0EC0               	movlw	192
  1779  0000DC  EC06  F00C         	call	_lcdInst
  1780                           
  1781                           ;operation_time.c: 53: printf("Press # to Start");
  1782  0000E0  0E78               	movlw	low STR_10
  1783  0000E2  0100               	movlb	0	; () banked
  1784  0000E4  6F8E               	movwf	printf@f& (0+255),b
  1785  0000E6  0EFF               	movlw	high STR_10
  1786  0000E8  0100               	movlb	0	; () banked
  1787  0000EA  6F8F               	movwf	(printf@f+1)& (0+255),b
  1788  0000EC  ECF1  F001         	call	_printf	;wreg free
  1789                           
  1790                           ;operation_time.c: 56: unsigned char keypress = (PORTB & 0xF0) >> 4;
  1791  0000F0  3881               	swapf	3969,w,c	;volatile
  1792  0000F2  0B0F               	andlw	15
  1793  0000F4  0B0F               	andlw	15
  1794  0000F6  0100               	movlb	0	; () banked
  1795  0000F8  6FB5               	movwf	operation@keypress& (0+255),b
  1796  0000FA                     l255:
  1797  0000FA  B281               	btfsc	3969,1,c	;volatile
  1798  0000FC  D7FE               	goto	l255
  1799                           
  1800                           ;operation_time.c: 59: }
  1801                           ;operation_time.c: 60: unsigned char keypress_temp = keys[keypress];
  1802  0000FE  0100               	movlb	0	; () banked
  1803  000100  51B5               	movf	operation@keypress& (0+255),w,b
  1804  000102  0D01               	mullw	1
  1805  000104  0EE1               	movlw	low _keys
  1806  000106  24F3               	addwf	prodl,w,c
  1807  000108  6EF6               	movwf	tblptrl,c
  1808  00010A  0EFE               	movlw	high _keys
  1809  00010C  20F4               	addwfc	prodh,w,c
  1810  00010E  6EF7               	movwf	tblptrh,c
  1811  000110                     	if	0	;There are less than 3 active tblptr bytes
  1812  000110                     	endif
  1813  000110  0008               	tblrd		*
  1814  000112  CFF5 F0B6          	movff	tablat,operation@keypress_temp
  1815                           
  1816                           ; BSR set to: 0
  1817                           ;operation_time.c: 62: if(keypress_temp == '#'){
  1818  000116  0E23               	movlw	35
  1819  000118  0100               	movlb	0	; () banked
  1820  00011A  19B6               	xorwf	operation@keypress_temp& (0+255),w,b
  1821  00011C  A4D8               	btfss	status,2,c
  1822  00011E  D007               	goto	l3585
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;operation_time.c: 63: Start_time[2] = time[2];
  1826  000120  C0BB  F0C5         	movff	operation@time+2,operation@Start_time+2
  1827                           
  1828                           ;operation_time.c: 64: Start_time[1] = time[1];
  1829  000124  C0BA  F0C4         	movff	operation@time+1,operation@Start_time+1
  1830                           
  1831                           ;operation_time.c: 65: Start_time[0] = time[0];
  1832  000128  C0B9  F0C3         	movff	operation@time,operation@Start_time
  1833                           
  1834                           ;operation_time.c: 66: break;
  1835  00012C  D018               	goto	l3595
  1836  00012E                     l3585:
  1837                           
  1838                           ; BSR set to: 0
  1839                           ;operation_time.c: 67: }
  1840                           ;operation_time.c: 68: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000
      +                          .0)));};
  1841  00012E  0E00               	movlw	0
  1842  000130  0100               	movlb	0	; () banked
  1843  000132  6FC0               	movwf	operation@i_386& (0+255),b
  1844  000134                     l3587:
  1845                           
  1846                           ; BSR set to: 0
  1847  000134  0E09               	movlw	9
  1848  000136  0100               	movlb	0	; () banked
  1849  000138  65C0               	cpfsgt	operation@i_386& (0+255),b
  1850  00013A  D001               	goto	l3591
  1851  00013C  D76D               	goto	l252
  1852  00013E                     l3591:
  1853                           
  1854                           ; BSR set to: 0
  1855  00013E  0E02               	movlw	2
  1856  000140  0100               	movlb	0	; () banked
  1857  000142  6FAB               	movwf	(??_operation+1)& (0+255),b
  1858  000144  0E3F               	movlw	63
  1859  000146  0100               	movlb	0	; () banked
  1860  000148  6FAA               	movwf	??_operation& (0+255),b
  1861  00014A  0E2B               	movlw	43
  1862  00014C                     u3727:
  1863  00014C  2EE8               	decfsz	wreg,f,c
  1864  00014E  D7FE               	bra	u3727
  1865  000150  2FAA               	decfsz	??_operation& (0+255),f,b
  1866  000152  D7FC               	bra	u3727
  1867  000154  2FAB               	decfsz	(??_operation+1)& (0+255),f,b
  1868  000156  D7FA               	bra	u3727
  1869  000158  0100               	movlb	0	; () banked
  1870  00015A  2BC0               	incf	operation@i_386& (0+255),f,b
  1871  00015C  D7EB               	goto	l3587
  1872  00015E                     l3595:
  1873                           
  1874                           ; BSR set to: 0
  1875                           ;operation_time.c: 70: }
  1876                           ;operation_time.c: 73: startSorting();
  1877  00015E  EC29  F008         	call	_startSorting	;wreg free
  1878                           
  1879                           ;operation_time.c: 76: I2C_Master_Start();
  1880  000162  EC23  F00C         	call	_I2C_Master_Start	;wreg free
  1881                           
  1882                           ;operation_time.c: 77: I2C_Master_Write(0b11010000);
  1883  000166  0E00               	movlw	0
  1884  000168  0100               	movlb	0	; () banked
  1885  00016A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1886  00016C  0ED0               	movlw	208
  1887  00016E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  1888  000170  EC1A  F00C         	call	_I2C_Master_Write	;wreg free
  1889                           
  1890                           ;operation_time.c: 78: I2C_Master_Write(0x00);
  1891  000174  0E00               	movlw	0
  1892  000176  0100               	movlb	0	; () banked
  1893  000178  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1894  00017A  0E00               	movlw	0
  1895  00017C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  1896  00017E  EC1A  F00C         	call	_I2C_Master_Write	;wreg free
  1897                           
  1898                           ;operation_time.c: 79: I2C_Master_Stop();
  1899  000182  EC1F  F00C         	call	_I2C_Master_Stop	;wreg free
  1900                           
  1901                           ;operation_time.c: 82: I2C_Master_Start();
  1902  000186  EC23  F00C         	call	_I2C_Master_Start	;wreg free
  1903                           
  1904                           ;operation_time.c: 83: I2C_Master_Write(0b11010001);
  1905  00018A  0E00               	movlw	0
  1906  00018C  0100               	movlb	0	; () banked
  1907  00018E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1908  000190  0ED1               	movlw	209
  1909  000192  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  1910  000194  EC1A  F00C         	call	_I2C_Master_Write	;wreg free
  1911                           
  1912                           ;operation_time.c: 84: for(unsigned char i=0;i<0x06;i++){
  1913  000198  0E00               	movlw	0
  1914  00019A  0100               	movlb	0	; () banked
  1915  00019C  6FC2               	movwf	operation@i_387& (0+255),b
  1916  00019E                     l3611:
  1917                           
  1918                           ; BSR set to: 0
  1919  00019E  0E05               	movlw	5
  1920  0001A0  0100               	movlb	0	; () banked
  1921  0001A2  65C2               	cpfsgt	operation@i_387& (0+255),b
  1922  0001A4  D001               	goto	l3615
  1923  0001A6  D010               	goto	l3621
  1924  0001A8                     l3615:
  1925                           
  1926                           ; BSR set to: 0
  1927                           ;operation_time.c: 85: time[i] = I2C_Master_Read(1);
  1928  0001A8  0100               	movlb	0	; () banked
  1929  0001AA  51C2               	movf	operation@i_387& (0+255),w,b
  1930  0001AC  0D01               	mullw	1
  1931  0001AE  0EB9               	movlw	low operation@time
  1932  0001B0  24F3               	addwf	prodl,w,c
  1933  0001B2  6ED9               	movwf	fsr2l,c
  1934  0001B4  0E00               	movlw	high operation@time
  1935  0001B6  20F4               	addwfc	prodh,w,c
  1936  0001B8  6EDA               	movwf	fsr2h,c
  1937  0001BA  0E01               	movlw	1
  1938  0001BC  EC89  F00B         	call	_I2C_Master_Read
  1939  0001C0  6EDF               	movwf	indf2,c
  1940  0001C2  0100               	movlb	0	; () banked
  1941  0001C4  2BC2               	incf	operation@i_387& (0+255),f,b
  1942  0001C6  D7EB               	goto	l3611
  1943  0001C8                     l3621:
  1944                           
  1945                           ; BSR set to: 0
  1946                           ;operation_time.c: 86: }
  1947                           ;operation_time.c: 87: time[6] = I2C_Master_Read(0);
  1948  0001C8  0E00               	movlw	0
  1949  0001CA  EC89  F00B         	call	_I2C_Master_Read
  1950  0001CE  0100               	movlb	0	; () banked
  1951  0001D0  6FBF               	movwf	(operation@time+6)& (0+255),b
  1952                           
  1953                           ;operation_time.c: 88: I2C_Master_Stop();
  1954  0001D2  EC1F  F00C         	call	_I2C_Master_Stop	;wreg free
  1955                           
  1956                           ;operation_time.c: 90: End_time[2] = time[2];
  1957  0001D6  C0BB  F0C7         	movff	operation@time+2,operation@End_time+2
  1958                           
  1959                           ;operation_time.c: 91: End_time[1] = time[1];
  1960  0001DA  C0BA  F0C6         	movff	operation@time+1,operation@End_time+1
  1961                           
  1962                           ;operation_time.c: 92: End_time[0] = time[0];
  1963  0001DE  C0B9  F0C5         	movff	operation@time,operation@End_time
  1964                           
  1965                           ;operation_time.c: 94: total_start = (Start_time[1]/16*10 + Start_time[1]%16)*60 + (Star
      +                          t_time[0]/16*10 + Start_time[0]%16);
  1966  0001E2  C0C4  F0AA         	movff	operation@Start_time+1,??_operation
  1967  0001E6  0E0F               	movlw	15
  1968  0001E8  0100               	movlb	0	; () banked
  1969  0001EA  17AA               	andwf	??_operation& (0+255),f,b
  1970  0001EC  0E00               	movlw	0
  1971  0001EE  0100               	movlb	0	; () banked
  1972  0001F0  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1973  0001F2  0E10               	movlw	16
  1974  0001F4  6F82               	movwf	___awdiv@divisor& (0+255),b
  1975  0001F6  C0C4  F080         	movff	operation@Start_time+1,___awdiv@dividend
  1976  0001FA  0100               	movlb	0	; () banked
  1977  0001FC  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  1978  0001FE  EC6C  F007         	call	___awdiv	;wreg free
  1979  000202  C080  F088         	movff	?___awdiv,___wmul@multiplier
  1980  000206  C081  F089         	movff	?___awdiv+1,___wmul@multiplier+1
  1981  00020A  0E00               	movlw	0
  1982  00020C  0100               	movlb	0	; () banked
  1983  00020E  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1984  000210  0E0A               	movlw	10
  1985  000212  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  1986  000214  EC3A  F00B         	call	___wmul	;wreg free
  1987  000218  0100               	movlb	0	; () banked
  1988  00021A  51AA               	movf	??_operation& (0+255),w,b
  1989  00021C  0100               	movlb	0	; () banked
  1990  00021E  2588               	addwf	?___wmul& (0+255),w,b
  1991  000220  0100               	movlb	0	; () banked
  1992  000222  6FB7               	movwf	_operation$1102& (0+255),b
  1993  000224  0100               	movlb	0	; () banked
  1994  000226  0E00               	movlw	0
  1995  000228  0100               	movlb	0	; () banked
  1996  00022A  2189               	addwfc	(?___wmul+1)& (0+255),w,b
  1997  00022C  0100               	movlb	0	; () banked
  1998  00022E  6FB8               	movwf	(_operation$1102+1)& (0+255),b
  1999                           
  2000                           ; BSR set to: 0
  2001                           ;operation_time.c: 94: total_start = (Start_time[1]/16*10 + Start_time[1]%16)*60 + (Star
      +                          t_time[0]/16*10 + Start_time[0]%16);
  2002  000230  0E00               	movlw	0
  2003  000232  0100               	movlb	0	; () banked
  2004  000234  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  2005  000236  0E10               	movlw	16
  2006  000238  6F82               	movwf	___awdiv@divisor& (0+255),b
  2007  00023A  C0C3  F080         	movff	operation@Start_time,___awdiv@dividend
  2008  00023E  0100               	movlb	0	; () banked
  2009  000240  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  2010  000242  EC6C  F007         	call	___awdiv	;wreg free
  2011  000246  C080  F088         	movff	?___awdiv,___wmul@multiplier
  2012  00024A  C081  F089         	movff	?___awdiv+1,___wmul@multiplier+1
  2013  00024E  0E00               	movlw	0
  2014  000250  0100               	movlb	0	; () banked
  2015  000252  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2016  000254  0E0A               	movlw	10
  2017  000256  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  2018  000258  EC3A  F00B         	call	___wmul	;wreg free
  2019  00025C  C088  F0AA         	movff	?___wmul,??_operation
  2020  000260  C089  F0AB         	movff	?___wmul+1,??_operation+1
  2021  000264  C0C3  F0AC         	movff	operation@Start_time,??_operation+2
  2022  000268  0E0F               	movlw	15
  2023  00026A  0100               	movlb	0	; () banked
  2024  00026C  17AC               	andwf	(??_operation+2)& (0+255),f,b
  2025  00026E  0100               	movlb	0	; () banked
  2026  000270  51AC               	movf	(??_operation+2)& (0+255),w,b
  2027  000272  0100               	movlb	0	; () banked
  2028  000274  27AA               	addwf	??_operation& (0+255),f,b
  2029  000276  0E00               	movlw	0
  2030  000278  23AB               	addwfc	(??_operation+1)& (0+255),f,b
  2031  00027A  C0B7  F088         	movff	_operation$1102,___wmul@multiplier
  2032  00027E  C0B8  F089         	movff	_operation$1102+1,___wmul@multiplier+1
  2033  000282  0E00               	movlw	0
  2034  000284  0100               	movlb	0	; () banked
  2035  000286  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2036  000288  0E3C               	movlw	60
  2037  00028A  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  2038  00028C  EC3A  F00B         	call	___wmul	;wreg free
  2039  000290  0100               	movlb	0	; () banked
  2040  000292  5188               	movf	?___wmul& (0+255),w,b
  2041  000294  0100               	movlb	0	; () banked
  2042  000296  27AA               	addwf	??_operation& (0+255),f,b
  2043  000298  0100               	movlb	0	; () banked
  2044  00029A  5189               	movf	(?___wmul+1)& (0+255),w,b
  2045  00029C  0100               	movlb	0	; () banked
  2046  00029E  23AB               	addwfc	(??_operation+1)& (0+255),f,b
  2047  0002A0  C0AA  F0AD         	movff	??_operation,operation@total_start
  2048  0002A4  C0AB  F0AE         	movff	??_operation+1,operation@total_start+1
  2049  0002A8  0100               	movlb	0	; () banked
  2050  0002AA  0E00               	movlw	0
  2051  0002AC  BFAE               	btfsc	(operation@total_start+1)& (0+255),7,b
  2052  0002AE  0EFF               	movlw	-1
  2053  0002B0  6FAF               	movwf	(operation@total_start+2)& (0+255),b
  2054  0002B2  6FB0               	movwf	(operation@total_start+3)& (0+255),b
  2055                           
  2056                           ; BSR set to: 0
  2057                           ;operation_time.c: 95: total_end = (End_time[1]/16*10 + End_time[1]%16)*60 + (End_time[0
      +                          ]/16*10 + End_time[0]%16);
  2058  0002B4  C0C6  F0AA         	movff	operation@End_time+1,??_operation
  2059  0002B8  0E0F               	movlw	15
  2060  0002BA  0100               	movlb	0	; () banked
  2061  0002BC  17AA               	andwf	??_operation& (0+255),f,b
  2062  0002BE  0E00               	movlw	0
  2063  0002C0  0100               	movlb	0	; () banked
  2064  0002C2  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  2065  0002C4  0E10               	movlw	16
  2066  0002C6  6F82               	movwf	___awdiv@divisor& (0+255),b
  2067  0002C8  C0C6  F080         	movff	operation@End_time+1,___awdiv@dividend
  2068  0002CC  0100               	movlb	0	; () banked
  2069  0002CE  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  2070  0002D0  EC6C  F007         	call	___awdiv	;wreg free
  2071  0002D4  C080  F088         	movff	?___awdiv,___wmul@multiplier
  2072  0002D8  C081  F089         	movff	?___awdiv+1,___wmul@multiplier+1
  2073  0002DC  0E00               	movlw	0
  2074  0002DE  0100               	movlb	0	; () banked
  2075  0002E0  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2076  0002E2  0E0A               	movlw	10
  2077  0002E4  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  2078  0002E6  EC3A  F00B         	call	___wmul	;wreg free
  2079  0002EA  0100               	movlb	0	; () banked
  2080  0002EC  51AA               	movf	??_operation& (0+255),w,b
  2081  0002EE  0100               	movlb	0	; () banked
  2082  0002F0  2588               	addwf	?___wmul& (0+255),w,b
  2083  0002F2  0100               	movlb	0	; () banked
  2084  0002F4  6FB7               	movwf	_operation$1102& (0+255),b
  2085  0002F6  0100               	movlb	0	; () banked
  2086  0002F8  0E00               	movlw	0
  2087  0002FA  0100               	movlb	0	; () banked
  2088  0002FC  2189               	addwfc	(?___wmul+1)& (0+255),w,b
  2089  0002FE  0100               	movlb	0	; () banked
  2090  000300  6FB8               	movwf	(_operation$1102+1)& (0+255),b
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;operation_time.c: 95: total_end = (End_time[1]/16*10 + End_time[1]%16)*60 + (End_time[0
      +                          ]/16*10 + End_time[0]%16);
  2094  000302  0E00               	movlw	0
  2095  000304  0100               	movlb	0	; () banked
  2096  000306  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  2097  000308  0E10               	movlw	16
  2098  00030A  6F82               	movwf	___awdiv@divisor& (0+255),b
  2099  00030C  C0C5  F080         	movff	operation@End_time,___awdiv@dividend
  2100  000310  0100               	movlb	0	; () banked
  2101  000312  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  2102  000314  EC6C  F007         	call	___awdiv	;wreg free
  2103  000318  C080  F088         	movff	?___awdiv,___wmul@multiplier
  2104  00031C  C081  F089         	movff	?___awdiv+1,___wmul@multiplier+1
  2105  000320  0E00               	movlw	0
  2106  000322  0100               	movlb	0	; () banked
  2107  000324  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2108  000326  0E0A               	movlw	10
  2109  000328  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  2110  00032A  EC3A  F00B         	call	___wmul	;wreg free
  2111  00032E  C088  F0AA         	movff	?___wmul,??_operation
  2112  000332  C089  F0AB         	movff	?___wmul+1,??_operation+1
  2113  000336  C0C5  F0AC         	movff	operation@End_time,??_operation+2
  2114  00033A  0E0F               	movlw	15
  2115  00033C  0100               	movlb	0	; () banked
  2116  00033E  17AC               	andwf	(??_operation+2)& (0+255),f,b
  2117  000340  0100               	movlb	0	; () banked
  2118  000342  51AC               	movf	(??_operation+2)& (0+255),w,b
  2119  000344  0100               	movlb	0	; () banked
  2120  000346  27AA               	addwf	??_operation& (0+255),f,b
  2121  000348  0E00               	movlw	0
  2122  00034A  23AB               	addwfc	(??_operation+1)& (0+255),f,b
  2123  00034C  C0B7  F088         	movff	_operation$1102,___wmul@multiplier
  2124  000350  C0B8  F089         	movff	_operation$1102+1,___wmul@multiplier+1
  2125  000354  0E00               	movlw	0
  2126  000356  0100               	movlb	0	; () banked
  2127  000358  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2128  00035A  0E3C               	movlw	60
  2129  00035C  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  2130  00035E  EC3A  F00B         	call	___wmul	;wreg free
  2131  000362  0100               	movlb	0	; () banked
  2132  000364  5188               	movf	?___wmul& (0+255),w,b
  2133  000366  0100               	movlb	0	; () banked
  2134  000368  27AA               	addwf	??_operation& (0+255),f,b
  2135  00036A  0100               	movlb	0	; () banked
  2136  00036C  5189               	movf	(?___wmul+1)& (0+255),w,b
  2137  00036E  0100               	movlb	0	; () banked
  2138  000370  23AB               	addwfc	(??_operation+1)& (0+255),f,b
  2139  000372  C0AA  F0B1         	movff	??_operation,operation@total_end
  2140  000376  C0AB  F0B2         	movff	??_operation+1,operation@total_end+1
  2141  00037A  0100               	movlb	0	; () banked
  2142  00037C  0E00               	movlw	0
  2143  00037E  BFB2               	btfsc	(operation@total_end+1)& (0+255),7,b
  2144  000380  0EFF               	movlw	-1
  2145  000382  6FB3               	movwf	(operation@total_end+2)& (0+255),b
  2146  000384  6FB4               	movwf	(operation@total_end+3)& (0+255),b
  2147                           
  2148                           ; BSR set to: 0
  2149                           ;operation_time.c: 96: total_second = total_end - total_start;
  2150  000386  C0AD  F0AA         	movff	operation@total_start,??_operation
  2151  00038A  C0AE  F0AB         	movff	operation@total_start+1,??_operation+1
  2152  00038E  0100               	movlb	0	; () banked
  2153  000390  1FAA               	comf	??_operation& (0+255),f,b
  2154  000392  1FAB               	comf	(??_operation+1)& (0+255),f,b
  2155  000394  4BAA               	infsnz	??_operation& (0+255),f,b
  2156  000396  2BAB               	incf	(??_operation+1)& (0+255),f,b
  2157  000398  0100               	movlb	0	; () banked
  2158  00039A  51B1               	movf	operation@total_end& (0+255),w,b
  2159  00039C  0100               	movlb	0	; () banked
  2160  00039E  25AA               	addwf	??_operation& (0+255),w,b
  2161  0003A0  0100               	movlb	0	; () banked
  2162  0003A2  6FC7               	movwf	_total_second& (0+255),b
  2163  0003A4  0100               	movlb	0	; () banked
  2164  0003A6  51B2               	movf	(operation@total_end+1)& (0+255),w,b
  2165  0003A8  0100               	movlb	0	; () banked
  2166  0003AA  21AB               	addwfc	(??_operation+1)& (0+255),w,b
  2167  0003AC  0100               	movlb	0	; () banked
  2168  0003AE  6FC8               	movwf	(_total_second+1)& (0+255),b
  2169                           
  2170                           ; BSR set to: 0
  2171                           ;operation_time.c: 98: if(total_second <= 0){
  2172  0003B0  0100               	movlb	0	; () banked
  2173  0003B2  BFC8               	btfsc	(_total_second+1)& (0+255),7,b
  2174  0003B4  D007               	goto	l3641
  2175  0003B6  0100               	movlb	0	; () banked
  2176  0003B8  51C8               	movf	(_total_second+1)& (0+255),w,b
  2177  0003BA  E10E               	bnz	l3643
  2178  0003BC  0100               	movlb	0	; () banked
  2179  0003BE  05C7               	decf	_total_second& (0+255),w,b
  2180  0003C0  B0D8               	btfsc	status,0,c
  2181  0003C2  D00A               	goto	l3643
  2182  0003C4                     l3641:
  2183                           
  2184                           ; BSR set to: 0
  2185                           ;operation_time.c: 99: total_second = 3600 + total_second;
  2186  0003C4  0E10               	movlw	16
  2187  0003C6  0100               	movlb	0	; () banked
  2188  0003C8  25C7               	addwf	_total_second& (0+255),w,b
  2189  0003CA  0100               	movlb	0	; () banked
  2190  0003CC  6FC7               	movwf	_total_second& (0+255),b
  2191  0003CE  0E0E               	movlw	14
  2192  0003D0  0100               	movlb	0	; () banked
  2193  0003D2  21C8               	addwfc	(_total_second+1)& (0+255),w,b
  2194  0003D4  0100               	movlb	0	; () banked
  2195  0003D6  6FC8               	movwf	(_total_second+1)& (0+255),b
  2196  0003D8                     l3643:
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;operation_time.c: 100: }
  2200                           ;operation_time.c: 101: return total_second;
  2201  0003D8  C0C7  F0A8         	movff	_total_second,?_operation
  2202  0003DC  C0C8  F0A9         	movff	_total_second+1,?_operation+1
  2203  0003E0  0012               	return	
  2204  0003E2                     __end_of_operation:
  2205                           	opt stack 0
  2206                           tblptru	equ	0xFF8
  2207                           tblptrh	equ	0xFF7
  2208                           tblptrl	equ	0xFF6
  2209                           tablat	equ	0xFF5
  2210                           prodh	equ	0xFF4
  2211                           prodl	equ	0xFF3
  2212                           intcon	equ	0xFF2
  2213                           intcon3	equ	0xFF0
  2214                           postinc0	equ	0xFEE
  2215                           wreg	equ	0xFE8
  2216                           indf2	equ	0xFDF
  2217                           fsr2h	equ	0xFDA
  2218                           fsr2l	equ	0xFD9
  2219                           status	equ	0xFD8
  2220                           
  2221 ;; *************** function _startSorting *****************
  2222 ;; Defined at:
  2223 ;;		line 25 in file "sort.c"
  2224 ;; Parameters:    Size  Location     Type
  2225 ;;		None
  2226 ;; Auto vars:     Size  Location     Type
  2227 ;;  i               1   39[BANK0 ] unsigned char 
  2228 ;;  i               1   38[BANK0 ] unsigned char 
  2229 ;; Return value:  Size  Location     Type
  2230 ;;                  2  245[None  ] int 
  2231 ;; Registers used:
  2232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2233 ;; Tracked objects:
  2234 ;;		On entry : 0/0
  2235 ;;		On exit  : 0/0
  2236 ;;		Unchanged: 0/0
  2237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2239 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2240 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2241 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2242 ;;Total ram usage:        4 bytes
  2243 ;; Hardware stack levels used:    1
  2244 ;; Hardware stack levels required when called:    8
  2245 ;; This function calls:
  2246 ;;		_initLCD
  2247 ;;		_initialization
  2248 ;;		_lcdInst
  2249 ;;		_printf
  2250 ;; This function is called by:
  2251 ;;		_operation
  2252 ;; This function uses a non-reentrant model
  2253 ;;
  2254                           
  2255                           	psect	text4
  2256  001052                     __ptext4:
  2257                           	opt stack 0
  2258  001052                     _startSorting:
  2259                           	opt stack 21
  2260                           
  2261                           ;sort.c: 27: initLCD();
  2262                           
  2263                           ; BSR set to: 0
  2264                           ;incstack = 0
  2265  001052  ECAC  F00A         	call	_initLCD	;wreg free
  2266                           
  2267                           ;sort.c: 28: lcdInst(0b10000000);;
  2268  001056  0E80               	movlw	128
  2269  001058  EC06  F00C         	call	_lcdInst
  2270                           
  2271                           ;sort.c: 30: printf("Initializing");
  2272  00105C  0EC7               	movlw	low STR_11
  2273  00105E  0100               	movlb	0	; () banked
  2274  001060  6F8E               	movwf	printf@f& (0+255),b
  2275  001062  0EFF               	movlw	high STR_11
  2276  001064  0100               	movlb	0	; () banked
  2277  001066  6F8F               	movwf	(printf@f+1)& (0+255),b
  2278  001068  ECF1  F001         	call	_printf	;wreg free
  2279                           
  2280                           ;sort.c: 31: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)));};
  2281  00106C  0E00               	movlw	0
  2282  00106E  0100               	movlb	0	; () banked
  2283  001070  6FA6               	movwf	startSorting@i& (0+255),b
  2284  001072                     l3441:
  2285                           
  2286                           ; BSR set to: 0
  2287  001072  0E09               	movlw	9
  2288  001074  0100               	movlb	0	; () banked
  2289  001076  65A6               	cpfsgt	startSorting@i& (0+255),b
  2290  001078  D001               	goto	l3445
  2291  00107A  D010               	goto	l3449
  2292  00107C                     l3445:
  2293                           
  2294                           ; BSR set to: 0
  2295  00107C  0E02               	movlw	2
  2296  00107E  0100               	movlb	0	; () banked
  2297  001080  6FA5               	movwf	(??_startSorting+1)& (0+255),b
  2298  001082  0E3F               	movlw	63
  2299  001084  0100               	movlb	0	; () banked
  2300  001086  6FA4               	movwf	??_startSorting& (0+255),b
  2301  001088  0E2B               	movlw	43
  2302  00108A                     u3737:
  2303  00108A  2EE8               	decfsz	wreg,f,c
  2304  00108C  D7FE               	bra	u3737
  2305  00108E  2FA4               	decfsz	??_startSorting& (0+255),f,b
  2306  001090  D7FC               	bra	u3737
  2307  001092  2FA5               	decfsz	(??_startSorting+1)& (0+255),f,b
  2308  001094  D7FA               	bra	u3737
  2309  001096  0100               	movlb	0	; () banked
  2310  001098  2BA6               	incf	startSorting@i& (0+255),f,b
  2311  00109A  D7EB               	goto	l3441
  2312  00109C                     l3449:
  2313                           
  2314                           ; BSR set to: 0
  2315                           ;sort.c: 34: initialization();
  2316  00109C  EC97  F009         	call	_initialization	;wreg free
  2317                           
  2318                           ;sort.c: 39: lcdInst(0b11000000);;
  2319  0010A0  0EC0               	movlw	192
  2320  0010A2  EC06  F00C         	call	_lcdInst
  2321                           
  2322                           ;sort.c: 40: printf("Complete");
  2323  0010A6  0EEE               	movlw	low STR_12
  2324  0010A8  0100               	movlb	0	; () banked
  2325  0010AA  6F8E               	movwf	printf@f& (0+255),b
  2326  0010AC  0EFF               	movlw	high STR_12
  2327  0010AE  0100               	movlb	0	; () banked
  2328  0010B0  6F8F               	movwf	(printf@f+1)& (0+255),b
  2329  0010B2  ECF1  F001         	call	_printf	;wreg free
  2330                           
  2331                           ;sort.c: 41: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)));};
  2332  0010B6  0E00               	movlw	0
  2333  0010B8  0100               	movlb	0	; () banked
  2334  0010BA  6FA7               	movwf	startSorting@i_490& (0+255),b
  2335  0010BC                     l3455:
  2336                           
  2337                           ; BSR set to: 0
  2338  0010BC  0E09               	movlw	9
  2339  0010BE  0100               	movlb	0	; () banked
  2340  0010C0  65A7               	cpfsgt	startSorting@i_490& (0+255),b
  2341  0010C2  D001               	goto	l3459
  2342  0010C4  0012               	return	
  2343  0010C6                     l3459:
  2344                           
  2345                           ; BSR set to: 0
  2346  0010C6  0E02               	movlw	2
  2347  0010C8  0100               	movlb	0	; () banked
  2348  0010CA  6FA5               	movwf	(??_startSorting+1)& (0+255),b
  2349  0010CC  0E3F               	movlw	63
  2350  0010CE  0100               	movlb	0	; () banked
  2351  0010D0  6FA4               	movwf	??_startSorting& (0+255),b
  2352  0010D2  0E2B               	movlw	43
  2353  0010D4                     u3747:
  2354  0010D4  2EE8               	decfsz	wreg,f,c
  2355  0010D6  D7FE               	bra	u3747
  2356  0010D8  2FA4               	decfsz	??_startSorting& (0+255),f,b
  2357  0010DA  D7FC               	bra	u3747
  2358  0010DC  2FA5               	decfsz	(??_startSorting+1)& (0+255),f,b
  2359  0010DE  D7FA               	bra	u3747
  2360  0010E0  0100               	movlb	0	; () banked
  2361  0010E2  2BA7               	incf	startSorting@i_490& (0+255),f,b
  2362  0010E4  D7EB               	goto	l3455
  2363  0010E6                     __end_of_startSorting:
  2364                           	opt stack 0
  2365                           tblptru	equ	0xFF8
  2366                           tblptrh	equ	0xFF7
  2367                           tblptrl	equ	0xFF6
  2368                           tablat	equ	0xFF5
  2369                           prodh	equ	0xFF4
  2370                           prodl	equ	0xFF3
  2371                           intcon	equ	0xFF2
  2372                           intcon3	equ	0xFF0
  2373                           postinc0	equ	0xFEE
  2374                           wreg	equ	0xFE8
  2375                           indf2	equ	0xFDF
  2376                           fsr2h	equ	0xFDA
  2377                           fsr2l	equ	0xFD9
  2378                           status	equ	0xFD8
  2379                           
  2380 ;; *************** function _printf *****************
  2381 ;; Defined at:
  2382 ;;		line 464 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
  2383 ;; Parameters:    Size  Location     Type
  2384 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  2385 ;;		 -> STR_16(8), STR_15(17), STR_14(17), STR_13(17), 
  2386 ;;		 -> STR_12(9), STR_11(13), STR_10(17), STR_9(15), 
  2387 ;;		 -> STR_8(13), STR_7(13), STR_6(15), STR_5(15), 
  2388 ;;		 -> STR_4(17), STR_3(22), STR_2(19), STR_1(2), 
  2389 ;; Auto vars:     Size  Location     Type
  2390 ;;  idx             1   26[BANK0 ] unsigned char 
  2391 ;;  tmpval          4    0        struct .
  2392 ;;  cp              3    0        PTR const unsigned char 
  2393 ;;  width           2   33[BANK0 ] int 
  2394 ;;  val             2   30[BANK0 ] unsigned int 
  2395 ;;  ap              2   27[BANK0 ] PTR void [1]
  2396 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2397 ;;  len             2    0        unsigned int 
  2398 ;;  c               1   35[BANK0 ] char 
  2399 ;;  flag            1   32[BANK0 ] unsigned char 
  2400 ;;  prec            1   29[BANK0 ] char 
  2401 ;; Return value:  Size  Location     Type
  2402 ;;                  2   14[BANK0 ] int 
  2403 ;; Registers used:
  2404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2405 ;; Tracked objects:
  2406 ;;		On entry : 0/0
  2407 ;;		On exit  : 0/0
  2408 ;;		Unchanged: 0/0
  2409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2410 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2411 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2412 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2413 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2414 ;;Total ram usage:       22 bytes
  2415 ;; Hardware stack levels used:    1
  2416 ;; Hardware stack levels required when called:    7
  2417 ;; This function calls:
  2418 ;;		___lwdiv
  2419 ;;		___lwmod
  2420 ;;		___wmul
  2421 ;;		_isdigit
  2422 ;;		_putch
  2423 ;; This function is called by:
  2424 ;;		_operation
  2425 ;;		_startSorting
  2426 ;;		_results
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           	psect	text5
  2431  0003E2                     __ptext5:
  2432                           	opt stack 0
  2433  0003E2                     _printf:
  2434                           	opt stack 22
  2435                           
  2436                           ;doprnt.c: 466: va_list ap;
  2437                           ;doprnt.c: 499: signed char c;
  2438                           ;doprnt.c: 501: int width;
  2439                           ;doprnt.c: 506: signed char prec;
  2440                           ;doprnt.c: 508: unsigned char flag;
  2441                           ;doprnt.c: 523: union {
  2442                           ;doprnt.c: 524: unsigned long vd;
  2443                           ;doprnt.c: 525: double integ;
  2444                           ;doprnt.c: 526: } tmpval;
  2445                           ;doprnt.c: 528: unsigned int val;
  2446                           ;doprnt.c: 529: unsigned len;
  2447                           ;doprnt.c: 530: const char * cp;
  2448                           ;doprnt.c: 533: *ap = __va_start();
  2449                           
  2450                           ; BSR set to: 0
  2451                           ;incstack = 0
  2452  0003E2  0E90               	movlw	low (?_printf+2)
  2453  0003E4  0100               	movlb	0	; () banked
  2454  0003E6  6F9B               	movwf	printf@ap& (0+255),b
  2455  0003E8  0E00               	movlw	high (?_printf+2)
  2456  0003EA  0100               	movlb	0	; () banked
  2457  0003EC  6F9C               	movwf	(printf@ap+1)& (0+255),b
  2458                           
  2459                           ;doprnt.c: 536: while(c = *f++) {
  2460  0003EE  D1C4               	goto	l3385
  2461  0003F0                     l3259:
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;doprnt.c: 538: if(c != '%')
  2465  0003F0  0E25               	movlw	37
  2466  0003F2  0100               	movlb	0	; () banked
  2467  0003F4  19A3               	xorwf	printf@c& (0+255),w,b
  2468  0003F6  B4D8               	btfsc	status,2,c
  2469  0003F8  D005               	goto	l3263
  2470                           
  2471                           ; BSR set to: 0
  2472                           ;doprnt.c: 540: {
  2473                           ;doprnt.c: 541: (putch(c) );
  2474  0003FA  0100               	movlb	0	; () banked
  2475  0003FC  51A3               	movf	printf@c& (0+255),w,b
  2476  0003FE  ECFE  F00B         	call	_putch
  2477                           
  2478                           ;doprnt.c: 542: continue;
  2479  000402  D1BA               	goto	l3385
  2480  000404                     l3263:
  2481                           
  2482                           ;doprnt.c: 543: }
  2483                           ;doprnt.c: 546: width = 0;
  2484  000404  0E00               	movlw	0
  2485  000406  0100               	movlb	0	; () banked
  2486  000408  6FA2               	movwf	(printf@width+1)& (0+255),b
  2487  00040A  0E00               	movlw	0
  2488  00040C  6FA1               	movwf	printf@width& (0+255),b
  2489                           
  2490                           ;doprnt.c: 548: flag = 0;
  2491  00040E  0E00               	movlw	0
  2492  000410  0100               	movlb	0	; () banked
  2493  000412  6FA0               	movwf	printf@flag& (0+255),b
  2494                           
  2495                           ; BSR set to: 0
  2496                           ;doprnt.c: 551: switch(*f) {
  2497                           
  2498                           ;doprnt.c: 550: for(;;) {
  2499  000414  D005               	goto	l3269
  2500  000416                     l3265:
  2501                           
  2502                           ;doprnt.c: 580: flag |= 0x04;
  2503  000416  0100               	movlb	0	; () banked
  2504  000418  85A0               	bsf	printf@flag& (0+255),2,b
  2505                           
  2506                           ;doprnt.c: 581: f++;
  2507  00041A  0100               	movlb	0	; () banked
  2508  00041C  4B8E               	infsnz	printf@f& (0+255),f,b
  2509  00041E  2B8F               	incf	(printf@f+1)& (0+255),f,b
  2510  000420                     l3269:
  2511  000420  C08E  FFF6         	movff	printf@f,tblptrl
  2512  000424  C08F  FFF7         	movff	printf@f+1,tblptrh
  2513  000428                     	if	0	;tblptru may be non-zero
  2514  000428                     	endif
  2515  000428                     	if	0	;tblptru may be non-zero
  2516  000428                     	endif
  2517  000428  0008               	tblrd		*
  2518  00042A  50F5               	movf	tablat,w,c
  2519                           
  2520                           ; Switch size 1, requested type "space"
  2521                           ; Number of cases is 1, Range of values is 48 to 48
  2522                           ; switch strategies available:
  2523                           ; Name         Instructions Cycles
  2524                           ; simple_byte            4     3 (average)
  2525                           ;	Chosen strategy is simple_byte
  2526  00042C  0A30               	xorlw	48	; case 48
  2527  00042E  B4D8               	btfsc	status,2,c
  2528  000430  D7F2               	goto	l3265
  2529                           
  2530                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2531                           
  2532                           ;doprnt.c: 586: }
  2533                           
  2534                           ;doprnt.c: 585: break;
  2535  000432  C08E  FFF6         	movff	printf@f,tblptrl
  2536  000436  C08F  FFF7         	movff	printf@f+1,tblptrh
  2537  00043A                     	if	0	;tblptru may be non-zero
  2538  00043A                     	endif
  2539  00043A                     	if	0	;tblptru may be non-zero
  2540  00043A                     	endif
  2541  00043A  0008               	tblrd		*
  2542  00043C  50F5               	movf	tablat,w,c
  2543  00043E  ECA0  F00B         	call	_isdigit
  2544  000442  A0D8               	btfss	status,0,c
  2545  000444  D044               	goto	l3287
  2546                           
  2547                           ;doprnt.c: 598: width = 0;
  2548  000446  0E00               	movlw	0
  2549  000448  0100               	movlb	0	; () banked
  2550  00044A  6FA2               	movwf	(printf@width+1)& (0+255),b
  2551  00044C  0E00               	movlw	0
  2552  00044E  6FA1               	movwf	printf@width& (0+255),b
  2553  000450                     l3275:
  2554                           
  2555                           ;doprnt.c: 600: width *= 10;
  2556  000450  C0A1  F088         	movff	printf@width,___wmul@multiplier
  2557  000454  C0A2  F089         	movff	printf@width+1,___wmul@multiplier+1
  2558  000458  0E00               	movlw	0
  2559  00045A  0100               	movlb	0	; () banked
  2560  00045C  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2561  00045E  0E0A               	movlw	10
  2562  000460  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  2563  000462  EC3A  F00B         	call	___wmul	;wreg free
  2564  000466  C088  F0A1         	movff	?___wmul,printf@width
  2565  00046A  C089  F0A2         	movff	?___wmul+1,printf@width+1
  2566                           
  2567                           ;doprnt.c: 601: width += *f++ - '0';
  2568  00046E  0ED0               	movlw	208
  2569  000470  0100               	movlb	0	; () banked
  2570  000472  6F96               	movwf	??_printf& (0+255),b
  2571  000474  0EFF               	movlw	255
  2572  000476  0100               	movlb	0	; () banked
  2573  000478  6F97               	movwf	(??_printf+1)& (0+255),b
  2574  00047A  C08E  FFF6         	movff	printf@f,tblptrl
  2575  00047E  C08F  FFF7         	movff	printf@f+1,tblptrh
  2576  000482                     	if	0	;tblptru may be non-zero
  2577  000482                     	endif
  2578  000482                     	if	0	;tblptru may be non-zero
  2579  000482                     	endif
  2580  000482  0008               	tblrd		*
  2581  000484  50F5               	movf	tablat,w,c
  2582  000486  0100               	movlb	0	; () banked
  2583  000488  6F98               	movwf	(??_printf+2)& (0+255),b
  2584  00048A  6B99               	clrf	(??_printf+3)& (0+255),b
  2585  00048C  0100               	movlb	0	; () banked
  2586  00048E  5196               	movf	??_printf& (0+255),w,b
  2587  000490  0100               	movlb	0	; () banked
  2588  000492  2798               	addwf	(??_printf+2)& (0+255),f,b
  2589  000494  0100               	movlb	0	; () banked
  2590  000496  5197               	movf	(??_printf+1)& (0+255),w,b
  2591  000498  0100               	movlb	0	; () banked
  2592  00049A  2399               	addwfc	(??_printf+3)& (0+255),f,b
  2593  00049C  0100               	movlb	0	; () banked
  2594  00049E  5198               	movf	(??_printf+2)& (0+255),w,b
  2595  0004A0  0100               	movlb	0	; () banked
  2596  0004A2  27A1               	addwf	printf@width& (0+255),f,b
  2597  0004A4  0100               	movlb	0	; () banked
  2598  0004A6  5199               	movf	(??_printf+3)& (0+255),w,b
  2599  0004A8  0100               	movlb	0	; () banked
  2600  0004AA  23A2               	addwfc	(printf@width+1)& (0+255),f,b
  2601                           
  2602                           ; BSR set to: 0
  2603  0004AC  0100               	movlb	0	; () banked
  2604  0004AE  4B8E               	infsnz	printf@f& (0+255),f,b
  2605  0004B0  2B8F               	incf	(printf@f+1)& (0+255),f,b
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2609  0004B2  C08E  FFF6         	movff	printf@f,tblptrl
  2610  0004B6  C08F  FFF7         	movff	printf@f+1,tblptrh
  2611  0004BA                     	if	0	;tblptru may be non-zero
  2612  0004BA                     	endif
  2613  0004BA                     	if	0	;tblptru may be non-zero
  2614  0004BA                     	endif
  2615  0004BA  0008               	tblrd		*
  2616  0004BC  50F5               	movf	tablat,w,c
  2617  0004BE  ECA0  F00B         	call	_isdigit
  2618  0004C2  A0D8               	btfss	status,0,c
  2619  0004C4  D004               	goto	l3287
  2620  0004C6  D7C4               	goto	l3275
  2621  0004C8                     l3283:
  2622                           
  2623                           ;doprnt.c: 721: flag |= 0x80;
  2624  0004C8  0100               	movlb	0	; () banked
  2625  0004CA  8FA0               	bsf	printf@flag& (0+255),7,b
  2626                           
  2627                           ;doprnt.c: 723: break;
  2628  0004CC  D019               	goto	l347
  2629  0004CE                     l3287:
  2630  0004CE  C08E  FFF6         	movff	printf@f,tblptrl
  2631  0004D2  C08F  FFF7         	movff	printf@f+1,tblptrh
  2632  0004D6  0100               	movlb	0	; () banked
  2633  0004D8  4B8E               	infsnz	printf@f& (0+255),f,b
  2634  0004DA  2B8F               	incf	(printf@f+1)& (0+255),f,b
  2635  0004DC                     	if	0	;tblptru may be non-zero
  2636  0004DC                     	endif
  2637  0004DC                     	if	0	;tblptru may be non-zero
  2638  0004DC                     	endif
  2639  0004DC  0008               	tblrd		*
  2640  0004DE  CFF5 F0A3          	movff	tablat,printf@c
  2641  0004E2  0100               	movlb	0	; () banked
  2642  0004E4  51A3               	movf	printf@c& (0+255),w,b
  2643                           
  2644                           ; Switch size 1, requested type "space"
  2645                           ; Number of cases is 4, Range of values is 0 to 120
  2646                           ; switch strategies available:
  2647                           ; Name         Instructions Cycles
  2648                           ; simple_byte           13     7 (average)
  2649                           ;	Chosen strategy is simple_byte
  2650  0004E6  0A00               	xorlw	0	; case 0
  2651  0004E8  B4D8               	btfsc	status,2,c
  2652  0004EA  0012               	return	
  2653  0004EC  0A64               	xorlw	100	; case 100
  2654  0004EE  B4D8               	btfsc	status,2,c
  2655  0004F0  D007               	goto	l347
  2656  0004F2  0A0D               	xorlw	13	; case 105
  2657  0004F4  B4D8               	btfsc	status,2,c
  2658  0004F6  D004               	goto	l347
  2659  0004F8  0A11               	xorlw	17	; case 120
  2660  0004FA  B4D8               	btfsc	status,2,c
  2661  0004FC  D7E5               	goto	l3283
  2662  0004FE  D13C               	goto	l3385
  2663  000500                     l347:
  2664                           
  2665                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2666  000500  0100               	movlb	0	; () banked
  2667  000502  BFA0               	btfsc	printf@flag& (0+255),7,b
  2668  000504  D019               	goto	l3299
  2669                           
  2670                           ; BSR set to: 0
  2671                           ;doprnt.c: 1253: {
  2672                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2673  000506  C09B  FFD9         	movff	printf@ap,fsr2l
  2674  00050A  C09C  FFDA         	movff	printf@ap+1,fsr2h
  2675  00050E  CFDE F09E          	movff	postinc2,printf@val
  2676  000512  CFDD F09F          	movff	postdec2,printf@val+1
  2677                           
  2678                           ; BSR set to: 0
  2679  000516  0E02               	movlw	2
  2680  000518  0100               	movlb	0	; () banked
  2681  00051A  279B               	addwf	printf@ap& (0+255),f,b
  2682  00051C  0E00               	movlw	0
  2683  00051E  239C               	addwfc	(printf@ap+1)& (0+255),f,b
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;doprnt.c: 1261: if((int)val < 0) {
  2687  000520  0100               	movlb	0	; () banked
  2688  000522  AF9F               	btfss	(printf@val+1)& (0+255),7,b
  2689  000524  D053               	goto	l3333
  2690                           
  2691                           ; BSR set to: 0
  2692                           ;doprnt.c: 1262: flag |= 0x03;
  2693  000526  0E03               	movlw	3
  2694  000528  0100               	movlb	0	; () banked
  2695  00052A  13A0               	iorwf	printf@flag& (0+255),f,b
  2696                           
  2697                           ; BSR set to: 0
  2698                           ;doprnt.c: 1263: val = -val;
  2699  00052C  0100               	movlb	0	; () banked
  2700  00052E  6D9E               	negf	printf@val& (0+255),b
  2701  000530  1F9F               	comf	(printf@val+1)& (0+255),f,b
  2702  000532  B0D8               	btfsc	status,0,c
  2703  000534  2B9F               	incf	(printf@val+1)& (0+255),f,b
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;doprnt.c: 1264: }
  2707                           ;doprnt.c: 1266: }
  2708  000536  D04A               	goto	l3333
  2709  000538                     l3299:
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;doprnt.c: 1268: else
  2713                           ;doprnt.c: 1273: {
  2714                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2715  000538  C09B  FFD9         	movff	printf@ap,fsr2l
  2716  00053C  C09C  FFDA         	movff	printf@ap+1,fsr2h
  2717  000540  CFDE F09E          	movff	postinc2,printf@val
  2718  000544  CFDD F09F          	movff	postdec2,printf@val+1
  2719                           
  2720                           ; BSR set to: 0
  2721  000548  0E02               	movlw	2
  2722  00054A  0100               	movlb	0	; () banked
  2723  00054C  279B               	addwf	printf@ap& (0+255),f,b
  2724  00054E  0E00               	movlw	0
  2725  000550  239C               	addwfc	(printf@ap+1)& (0+255),f,b
  2726                           
  2727                           ; BSR set to: 0
  2728                           ;doprnt.c: 1287: }
  2729                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2730  000552  D03C               	goto	l3333
  2731  000554                     l3303:
  2732                           
  2733                           ; BSR set to: 0
  2734                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2735  000554  0E01               	movlw	1
  2736  000556  0100               	movlb	0	; () banked
  2737  000558  6FA3               	movwf	printf@c& (0+255),b
  2738  00055A                     l3305:
  2739                           
  2740                           ; BSR set to: 0
  2741  00055A  0E05               	movlw	5
  2742  00055C  0100               	movlb	0	; () banked
  2743  00055E  19A3               	xorwf	printf@c& (0+255),w,b
  2744  000560  B4D8               	btfsc	status,2,c
  2745  000562  D03D               	goto	l3335
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;doprnt.c: 1306: if(val < dpowers[c])
  2749                           
  2750                           ; BSR set to: 0
  2751                           
  2752                           ; BSR set to: 0
  2753  000564  0100               	movlb	0	; () banked
  2754  000566  51A3               	movf	printf@c& (0+255),w,b
  2755  000568  0D02               	mullw	2
  2756  00056A  0EF2               	movlw	low _dpowers
  2757  00056C  24F3               	addwf	prodl,w,c
  2758  00056E  6EF6               	movwf	tblptrl,c
  2759  000570  0EFE               	movlw	high _dpowers
  2760  000572  20F4               	addwfc	prodh,w,c
  2761  000574  6EF7               	movwf	tblptrh,c
  2762  000576                     	if	0	;There are less than 3 active tblptr bytes
  2763  000576                     	endif
  2764  000576  0009               	tblrd		*+
  2765  000578  50F5               	movf	tablat,w,c
  2766  00057A  0100               	movlb	0	; () banked
  2767  00057C  5D9E               	subwf	printf@val& (0+255),w,b
  2768  00057E  0009               	tblrd		*+
  2769  000580  50F5               	movf	tablat,w,c
  2770  000582  0100               	movlb	0	; () banked
  2771  000584  599F               	subwfb	(printf@val+1)& (0+255),w,b
  2772  000586  A0D8               	btfss	status,0,c
  2773  000588  D02A               	goto	l3335
  2774                           
  2775                           ; BSR set to: 0
  2776                           
  2777                           ; BSR set to: 0
  2778                           
  2779                           ; BSR set to: 0
  2780                           ;doprnt.c: 1307: break;
  2781  00058A  0100               	movlb	0	; () banked
  2782  00058C  2BA3               	incf	printf@c& (0+255),f,b
  2783  00058E  D7E5               	goto	l3305
  2784  000590                     l3317:
  2785                           
  2786                           ; BSR set to: 0
  2787                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2788  000590  0E01               	movlw	1
  2789  000592  0100               	movlb	0	; () banked
  2790  000594  6FA3               	movwf	printf@c& (0+255),b
  2791  000596                     l3319:
  2792                           
  2793                           ; BSR set to: 0
  2794  000596  0E04               	movlw	4
  2795  000598  0100               	movlb	0	; () banked
  2796  00059A  19A3               	xorwf	printf@c& (0+255),w,b
  2797  00059C  B4D8               	btfsc	status,2,c
  2798  00059E  D01F               	goto	l3335
  2799                           
  2800                           ; BSR set to: 0
  2801                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2802                           
  2803                           ; BSR set to: 0
  2804                           
  2805                           ; BSR set to: 0
  2806  0005A0  0100               	movlb	0	; () banked
  2807  0005A2  51A3               	movf	printf@c& (0+255),w,b
  2808  0005A4  0D02               	mullw	2
  2809  0005A6  0EFC               	movlw	low _hexpowers
  2810  0005A8  24F3               	addwf	prodl,w,c
  2811  0005AA  6EF6               	movwf	tblptrl,c
  2812  0005AC  0EFE               	movlw	high _hexpowers
  2813  0005AE  20F4               	addwfc	prodh,w,c
  2814  0005B0  6EF7               	movwf	tblptrh,c
  2815  0005B2                     	if	0	;There are less than 3 active tblptr bytes
  2816  0005B2                     	endif
  2817  0005B2  0009               	tblrd		*+
  2818  0005B4  50F5               	movf	tablat,w,c
  2819  0005B6  0100               	movlb	0	; () banked
  2820  0005B8  5D9E               	subwf	printf@val& (0+255),w,b
  2821  0005BA  0009               	tblrd		*+
  2822  0005BC  50F5               	movf	tablat,w,c
  2823  0005BE  0100               	movlb	0	; () banked
  2824  0005C0  599F               	subwfb	(printf@val+1)& (0+255),w,b
  2825  0005C2  A0D8               	btfss	status,0,c
  2826  0005C4  D00C               	goto	l3335
  2827                           
  2828                           ; BSR set to: 0
  2829                           
  2830                           ; BSR set to: 0
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;doprnt.c: 1318: break;
  2834  0005C6  0100               	movlb	0	; () banked
  2835  0005C8  2BA3               	incf	printf@c& (0+255),f,b
  2836  0005CA  D7E5               	goto	l3319
  2837  0005CC                     l3333:
  2838                           
  2839                           ; BSR set to: 0
  2840  0005CC  0100               	movlb	0	; () banked
  2841  0005CE  51A0               	movf	printf@flag& (0+255),w,b
  2842  0005D0  0B80               	andlw	128
  2843                           
  2844                           ; Switch size 1, requested type "space"
  2845                           ; Number of cases is 2, Range of values is 0 to 128
  2846                           ; switch strategies available:
  2847                           ; Name         Instructions Cycles
  2848                           ; simple_byte            7     4 (average)
  2849                           ;	Chosen strategy is simple_byte
  2850  0005D2  0A00               	xorlw	0	; case 0
  2851  0005D4  B4D8               	btfsc	status,2,c
  2852  0005D6  D7BE               	goto	l3303
  2853  0005D8  0A80               	xorlw	128	; case 128
  2854  0005DA  B4D8               	btfsc	status,2,c
  2855  0005DC  D7D9               	goto	l3317
  2856  0005DE                     l3335:
  2857                           
  2858                           ; BSR set to: 0
  2859                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2860  0005DE  0100               	movlb	0	; () banked
  2861  0005E0  51A1               	movf	printf@width& (0+255),w,b
  2862  0005E2  0100               	movlb	0	; () banked
  2863  0005E4  11A2               	iorwf	(printf@width+1)& (0+255),w,b
  2864  0005E6  B4D8               	btfsc	status,2,c
  2865  0005E8  D00B               	goto	l3341
  2866                           
  2867                           ; BSR set to: 0
  2868  0005EA  C0A0  F096         	movff	printf@flag,??_printf
  2869  0005EE  0E03               	movlw	3
  2870  0005F0  0100               	movlb	0	; () banked
  2871  0005F2  1796               	andwf	??_printf& (0+255),f,b
  2872  0005F4  B4D8               	btfsc	status,2,c
  2873  0005F6  D004               	goto	l3341
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;doprnt.c: 1346: width--;
  2877  0005F8  0100               	movlb	0	; () banked
  2878  0005FA  07A1               	decf	printf@width& (0+255),f,b
  2879  0005FC  A0D8               	btfss	status,0,c
  2880  0005FE  07A2               	decf	(printf@width+1)& (0+255),f,b
  2881  000600                     l3341:
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;doprnt.c: 1381: if(width > c)
  2885  000600  0E80               	movlw	128
  2886  000602  0100               	movlb	0	; () banked
  2887  000604  BFA3               	btfsc	printf@c& (0+255),7,b
  2888  000606  0E7F               	movlw	127
  2889  000608  0100               	movlb	0	; () banked
  2890  00060A  6F96               	movwf	??_printf& (0+255),b
  2891  00060C  0100               	movlb	0	; () banked
  2892  00060E  51A1               	movf	printf@width& (0+255),w,b
  2893  000610  0100               	movlb	0	; () banked
  2894  000612  5DA3               	subwf	printf@c& (0+255),w,b
  2895  000614  0100               	movlb	0	; () banked
  2896  000616  51A2               	movf	(printf@width+1)& (0+255),w,b
  2897  000618  0A80               	xorlw	128
  2898  00061A  0100               	movlb	0	; () banked
  2899  00061C  5996               	subwfb	??_printf& (0+255),w,b
  2900  00061E  B0D8               	btfsc	status,0,c
  2901  000620  D00B               	goto	l3345
  2902                           
  2903                           ; BSR set to: 0
  2904                           ;doprnt.c: 1382: width -= c;
  2905  000622  0100               	movlb	0	; () banked
  2906  000624  51A3               	movf	printf@c& (0+255),w,b
  2907  000626  0100               	movlb	0	; () banked
  2908  000628  5FA1               	subwf	printf@width& (0+255),f,b
  2909  00062A  0E00               	movlw	0
  2910  00062C  0100               	movlb	0	; () banked
  2911  00062E  BFA3               	btfsc	printf@c& (0+255),7,b
  2912  000630  0EFF               	movlw	255
  2913  000632  0100               	movlb	0	; () banked
  2914  000634  5BA2               	subwfb	(printf@width+1)& (0+255),f,b
  2915  000636  D005               	goto	l3347
  2916  000638                     l3345:
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;doprnt.c: 1383: else
  2920                           ;doprnt.c: 1384: width = 0;
  2921  000638  0E00               	movlw	0
  2922  00063A  0100               	movlb	0	; () banked
  2923  00063C  6FA2               	movwf	(printf@width+1)& (0+255),b
  2924  00063E  0E00               	movlw	0
  2925  000640  6FA1               	movwf	printf@width& (0+255),b
  2926  000642                     l3347:
  2927                           
  2928                           ; BSR set to: 0
  2929                           ;doprnt.c: 1387: if(flag & 0x04) {
  2930  000642  0100               	movlb	0	; () banked
  2931  000644  A5A0               	btfss	printf@flag& (0+255),2,b
  2932  000646  D018               	goto	l3359
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;doprnt.c: 1392: if(flag & 0x03)
  2936  000648  C0A0  F096         	movff	printf@flag,??_printf
  2937  00064C  0E03               	movlw	3
  2938  00064E  0100               	movlb	0	; () banked
  2939  000650  1796               	andwf	??_printf& (0+255),f,b
  2940  000652  B4D8               	btfsc	status,2,c
  2941  000654  D003               	goto	l3353
  2942                           
  2943                           ; BSR set to: 0
  2944                           ;doprnt.c: 1393: (putch('-') );
  2945  000656  0E2D               	movlw	45
  2946  000658  ECFE  F00B         	call	_putch
  2947  00065C                     l3353:
  2948                           
  2949                           ;doprnt.c: 1415: if(width)
  2950  00065C  0100               	movlb	0	; () banked
  2951  00065E  51A1               	movf	printf@width& (0+255),w,b
  2952  000660  0100               	movlb	0	; () banked
  2953  000662  11A2               	iorwf	(printf@width+1)& (0+255),w,b
  2954  000664  B4D8               	btfsc	status,2,c
  2955  000666  D025               	goto	l3369
  2956                           
  2957                           ; BSR set to: 0
  2958                           ;doprnt.c: 1417: (putch('0') );
  2959                           
  2960                           ; BSR set to: 0
  2961                           
  2962                           ;doprnt.c: 1416: do
  2963  000668  0E30               	movlw	48
  2964  00066A  ECFE  F00B         	call	_putch
  2965                           
  2966                           ;doprnt.c: 1418: while(--width);
  2967  00066E  0100               	movlb	0	; () banked
  2968  000670  07A1               	decf	printf@width& (0+255),f,b
  2969  000672  A0D8               	btfss	status,0,c
  2970  000674  07A2               	decf	(printf@width+1)& (0+255),f,b
  2971  000676  D7F2               	goto	l3353
  2972  000678                     l3359:
  2973                           
  2974                           ; BSR set to: 0
  2975                           ;doprnt.c: 1422: {
  2976                           ;doprnt.c: 1424: if(width
  2977                           ;doprnt.c: 1428: )
  2978  000678  0100               	movlb	0	; () banked
  2979  00067A  51A1               	movf	printf@width& (0+255),w,b
  2980  00067C  0100               	movlb	0	; () banked
  2981  00067E  11A2               	iorwf	(printf@width+1)& (0+255),w,b
  2982  000680  B4D8               	btfsc	status,2,c
  2983  000682  D00D               	goto	l3365
  2984  000684                     l3361:
  2985                           
  2986                           ; BSR set to: 0
  2987                           ;doprnt.c: 1430: (putch(' ') );
  2988  000684  0E20               	movlw	32
  2989  000686  ECFE  F00B         	call	_putch
  2990                           
  2991                           ;doprnt.c: 1431: while(--width);
  2992  00068A  0100               	movlb	0	; () banked
  2993  00068C  07A1               	decf	printf@width& (0+255),f,b
  2994  00068E  A0D8               	btfss	status,0,c
  2995  000690  07A2               	decf	(printf@width+1)& (0+255),f,b
  2996  000692  0100               	movlb	0	; () banked
  2997  000694  51A1               	movf	printf@width& (0+255),w,b
  2998  000696  0100               	movlb	0	; () banked
  2999  000698  11A2               	iorwf	(printf@width+1)& (0+255),w,b
  3000  00069A  A4D8               	btfss	status,2,c
  3001  00069C  D7F3               	goto	l3361
  3002  00069E                     l3365:
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;doprnt.c: 1438: if(flag & 0x03)
  3006  00069E  C0A0  F096         	movff	printf@flag,??_printf
  3007  0006A2  0E03               	movlw	3
  3008  0006A4  0100               	movlb	0	; () banked
  3009  0006A6  1796               	andwf	??_printf& (0+255),f,b
  3010  0006A8  B4D8               	btfsc	status,2,c
  3011  0006AA  D003               	goto	l3369
  3012                           
  3013                           ; BSR set to: 0
  3014                           ;doprnt.c: 1439: (putch('-') );
  3015  0006AC  0E2D               	movlw	45
  3016  0006AE  ECFE  F00B         	call	_putch
  3017  0006B2                     l3369:
  3018                           
  3019                           ;doprnt.c: 1469: }
  3020                           ;doprnt.c: 1472: prec = c;
  3021  0006B2  C0A3  F09D         	movff	printf@c,printf@prec
  3022                           
  3023                           ;doprnt.c: 1474: while(prec--) {
  3024  0006B6  D05A               	goto	l3383
  3025  0006B8                     l3371:
  3026                           
  3027                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3028  0006B8  0100               	movlb	0	; () banked
  3029  0006BA  519D               	movf	printf@prec& (0+255),w,b
  3030  0006BC  0D02               	mullw	2
  3031  0006BE  0EF2               	movlw	low _dpowers
  3032  0006C0  24F3               	addwf	prodl,w,c
  3033  0006C2  6EF6               	movwf	tblptrl,c
  3034  0006C4  0EFE               	movlw	high _dpowers
  3035  0006C6  20F4               	addwfc	prodh,w,c
  3036  0006C8  6EF7               	movwf	tblptrh,c
  3037  0006CA                     	if	0	;There are less than 3 active tblptr bytes
  3038  0006CA                     	endif
  3039  0006CA  0009               	tblrd		*+
  3040  0006CC  CFF5 F082          	movff	tablat,___lwdiv@divisor
  3041  0006D0  000A               	tblrd		*-
  3042  0006D2  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  3043  0006D6  C09E  F080         	movff	printf@val,___lwdiv@dividend
  3044  0006DA  C09F  F081         	movff	printf@val+1,___lwdiv@dividend+1
  3045  0006DE  ECB5  F008         	call	___lwdiv	;wreg free
  3046  0006E2  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  3047  0006E6  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  3048  0006EA  0E00               	movlw	0
  3049  0006EC  0100               	movlb	0	; () banked
  3050  0006EE  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  3051  0006F0  0E0A               	movlw	10
  3052  0006F2  6F89               	movwf	___lwmod@divisor& (0+255),b
  3053  0006F4  ECC9  F009         	call	___lwmod	;wreg free
  3054  0006F8  0100               	movlb	0	; () banked
  3055  0006FA  5187               	movf	?___lwmod& (0+255),w,b
  3056  0006FC  0F30               	addlw	48
  3057  0006FE  0100               	movlb	0	; () banked
  3058  000700  6FA3               	movwf	printf@c& (0+255),b
  3059                           
  3060                           ;doprnt.c: 1491: break;
  3061  000702  D030               	goto	l3381
  3062  000704                     l3373:
  3063                           
  3064                           ; BSR set to: 0
  3065                           ;doprnt.c: 1499: {
  3066                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3067  000704  C09E  F080         	movff	printf@val,___lwdiv@dividend
  3068  000708  C09F  F081         	movff	printf@val+1,___lwdiv@dividend+1
  3069  00070C  0100               	movlb	0	; () banked
  3070  00070E  519D               	movf	printf@prec& (0+255),w,b
  3071  000710  0D02               	mullw	2
  3072  000712  0EFC               	movlw	low _hexpowers
  3073  000714  24F3               	addwf	prodl,w,c
  3074  000716  6EF6               	movwf	tblptrl,c
  3075  000718  0EFE               	movlw	high _hexpowers
  3076  00071A  20F4               	addwfc	prodh,w,c
  3077  00071C  6EF7               	movwf	tblptrh,c
  3078  00071E                     	if	0	;There are less than 3 active tblptr bytes
  3079  00071E                     	endif
  3080  00071E  0009               	tblrd		*+
  3081  000720  CFF5 F082          	movff	tablat,___lwdiv@divisor
  3082  000724  000A               	tblrd		*-
  3083  000726  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  3084  00072A  ECB5  F008         	call	___lwdiv	;wreg free
  3085  00072E  0100               	movlb	0	; () banked
  3086  000730  5180               	movf	?___lwdiv& (0+255),w,b
  3087  000732  0B0F               	andlw	15
  3088  000734  0100               	movlb	0	; () banked
  3089  000736  6F9A               	movwf	printf@idx& (0+255),b
  3090                           
  3091                           ; BSR set to: 0
  3092                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3093  000738  0100               	movlb	0	; () banked
  3094  00073A  519A               	movf	printf@idx& (0+255),w,b
  3095  00073C  0D01               	mullw	1
  3096  00073E  0E34               	movlw	low STR_17
  3097  000740  24F3               	addwf	prodl,w,c
  3098  000742  6EF6               	movwf	tblptrl,c
  3099  000744  0EFF               	movlw	high STR_17
  3100  000746  20F4               	addwfc	prodh,w,c
  3101  000748  6EF7               	movwf	tblptrh,c
  3102  00074A                     	if	0	;There are less than 3 active tblptr bytes
  3103  00074A                     	endif
  3104  00074A  0008               	tblrd		*
  3105  00074C  CFF5 F0A3          	movff	tablat,printf@c
  3106                           
  3107                           ; BSR set to: 0
  3108                           ;doprnt.c: 1523: }
  3109                           
  3110                           ;doprnt.c: 1508: }
  3111                           ;doprnt.c: 1510: break;
  3112  000750  D009               	goto	l3381
  3113  000752                     l3379:
  3114  000752  0100               	movlb	0	; () banked
  3115  000754  51A0               	movf	printf@flag& (0+255),w,b
  3116  000756  0B80               	andlw	128
  3117                           
  3118                           ; Switch size 1, requested type "space"
  3119                           ; Number of cases is 2, Range of values is 0 to 128
  3120                           ; switch strategies available:
  3121                           ; Name         Instructions Cycles
  3122                           ; simple_byte            7     4 (average)
  3123                           ;	Chosen strategy is simple_byte
  3124  000758  0A00               	xorlw	0	; case 0
  3125  00075A  B4D8               	btfsc	status,2,c
  3126  00075C  D7AD               	goto	l3371
  3127  00075E  0A80               	xorlw	128	; case 128
  3128  000760  B4D8               	btfsc	status,2,c
  3129  000762  D7D0               	goto	l3373
  3130  000764                     l3381:
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;doprnt.c: 1524: (putch(c) );
  3134  000764  0100               	movlb	0	; () banked
  3135  000766  51A3               	movf	printf@c& (0+255),w,b
  3136  000768  ECFE  F00B         	call	_putch
  3137  00076C                     l3383:
  3138  00076C  0100               	movlb	0	; () banked
  3139  00076E  079D               	decf	printf@prec& (0+255),f,b
  3140  000770  0100               	movlb	0	; () banked
  3141  000772  299D               	incf	printf@prec& (0+255),w,b
  3142  000774  A4D8               	btfss	status,2,c
  3143  000776  D7ED               	goto	l3379
  3144  000778                     l3385:
  3145  000778  C08E  FFF6         	movff	printf@f,tblptrl
  3146  00077C  C08F  FFF7         	movff	printf@f+1,tblptrh
  3147  000780  0100               	movlb	0	; () banked
  3148  000782  4B8E               	infsnz	printf@f& (0+255),f,b
  3149  000784  2B8F               	incf	(printf@f+1)& (0+255),f,b
  3150  000786                     	if	0	;tblptru may be non-zero
  3151  000786                     	endif
  3152  000786                     	if	0	;tblptru may be non-zero
  3153  000786                     	endif
  3154  000786  0008               	tblrd		*
  3155  000788  CFF5 F0A3          	movff	tablat,printf@c
  3156  00078C  0100               	movlb	0	; () banked
  3157  00078E  51A3               	movf	printf@c& (0+255),w,b
  3158  000790  B4D8               	btfsc	status,2,c
  3159  000792  0012               	return	
  3160  000794  D62D               	goto	l3259
  3161  000796                     __end_of_printf:
  3162                           	opt stack 0
  3163                           tblptru	equ	0xFF8
  3164                           tblptrh	equ	0xFF7
  3165                           tblptrl	equ	0xFF6
  3166                           tablat	equ	0xFF5
  3167                           prodh	equ	0xFF4
  3168                           prodl	equ	0xFF3
  3169                           intcon	equ	0xFF2
  3170                           intcon3	equ	0xFF0
  3171                           postinc0	equ	0xFEE
  3172                           wreg	equ	0xFE8
  3173                           indf2	equ	0xFDF
  3174                           postinc2	equ	0xFDE
  3175                           postdec2	equ	0xFDD
  3176                           fsr2h	equ	0xFDA
  3177                           fsr2l	equ	0xFD9
  3178                           status	equ	0xFD8
  3179                           
  3180 ;; *************** function _putch *****************
  3181 ;; Defined at:
  3182 ;;		line 30 in file "lcd.c"
  3183 ;; Parameters:    Size  Location     Type
  3184 ;;  data            1    wreg     unsigned char 
  3185 ;; Auto vars:     Size  Location     Type
  3186 ;;  data            1    2[BANK0 ] unsigned char 
  3187 ;; Return value:  Size  Location     Type
  3188 ;;                  1    wreg      void 
  3189 ;; Registers used:
  3190 ;;		wreg, status,2, status,0, cstack
  3191 ;; Tracked objects:
  3192 ;;		On entry : 0/0
  3193 ;;		On exit  : 0/0
  3194 ;;		Unchanged: 0/0
  3195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3197 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3199 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3200 ;;Total ram usage:        1 bytes
  3201 ;; Hardware stack levels used:    1
  3202 ;; Hardware stack levels required when called:    6
  3203 ;; This function calls:
  3204 ;;		_lcdNibble
  3205 ;; This function is called by:
  3206 ;;		_printf
  3207 ;; This function uses a non-reentrant model
  3208 ;;
  3209                           
  3210                           	psect	text6
  3211  0017FC                     __ptext6:
  3212                           	opt stack 0
  3213  0017FC                     _putch:
  3214                           	opt stack 22
  3215                           
  3216                           ;incstack = 0
  3217                           ;putch@data stored from wreg
  3218  0017FC  0100               	movlb	0	; () banked
  3219  0017FE  6F82               	movwf	putch@data& (0+255),b
  3220                           
  3221                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  3222  001800  848C               	bsf	3980,2,c	;volatile
  3223                           
  3224                           ;lcd.c: 32: lcdNibble(data);
  3225  001802  0100               	movlb	0	; () banked
  3226  001804  5182               	movf	putch@data& (0+255),w,b
  3227  001806  EC63  F009         	call	_lcdNibble
  3228  00180A  0012               	return		;funcret
  3229  00180C                     __end_of_putch:
  3230                           	opt stack 0
  3231                           tblptru	equ	0xFF8
  3232                           tblptrh	equ	0xFF7
  3233                           tblptrl	equ	0xFF6
  3234                           tablat	equ	0xFF5
  3235                           prodh	equ	0xFF4
  3236                           prodl	equ	0xFF3
  3237                           intcon	equ	0xFF2
  3238                           intcon3	equ	0xFF0
  3239                           postinc0	equ	0xFEE
  3240                           wreg	equ	0xFE8
  3241                           indf2	equ	0xFDF
  3242                           postinc2	equ	0xFDE
  3243                           postdec2	equ	0xFDD
  3244                           fsr2h	equ	0xFDA
  3245                           fsr2l	equ	0xFD9
  3246                           status	equ	0xFD8
  3247                           
  3248 ;; *************** function _isdigit *****************
  3249 ;; Defined at:
  3250 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/isdigit.c"
  3251 ;; Parameters:    Size  Location     Type
  3252 ;;  c               1    wreg     unsigned char 
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;  c               1    2[BANK0 ] unsigned char 
  3255 ;; Return value:  Size  Location     Type
  3256 ;;		None               void
  3257 ;; Registers used:
  3258 ;;		wreg, status,2, status,0
  3259 ;; Tracked objects:
  3260 ;;		On entry : 0/0
  3261 ;;		On exit  : 0/0
  3262 ;;		Unchanged: 0/0
  3263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3267 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3268 ;;Total ram usage:        3 bytes
  3269 ;; Hardware stack levels used:    1
  3270 ;; Hardware stack levels required when called:    5
  3271 ;; This function calls:
  3272 ;;		Nothing
  3273 ;; This function is called by:
  3274 ;;		_printf
  3275 ;; This function uses a non-reentrant model
  3276 ;;
  3277                           
  3278                           	psect	text7
  3279  001740                     __ptext7:
  3280                           	opt stack 0
  3281  001740                     _isdigit:
  3282                           	opt stack 23
  3283                           
  3284                           ;incstack = 0
  3285                           ;isdigit@c stored from wreg
  3286  001740  0100               	movlb	0	; () banked
  3287  001742  6F82               	movwf	isdigit@c& (0+255),b
  3288  001744  0E00               	movlw	0
  3289  001746  0100               	movlb	0	; () banked
  3290  001748  6F81               	movwf	_isdigit$766& (0+255),b
  3291                           
  3292                           ; BSR set to: 0
  3293  00174A  0E3A               	movlw	58
  3294  00174C  0100               	movlb	0	; () banked
  3295  00174E  6182               	cpfslt	isdigit@c& (0+255),b
  3296  001750  D007               	goto	l3191
  3297                           
  3298                           ; BSR set to: 0
  3299  001752  0E2F               	movlw	47
  3300  001754  0100               	movlb	0	; () banked
  3301  001756  6582               	cpfsgt	isdigit@c& (0+255),b
  3302  001758  D003               	goto	l3191
  3303                           
  3304                           ; BSR set to: 0
  3305  00175A  0E01               	movlw	1
  3306  00175C  0100               	movlb	0	; () banked
  3307  00175E  6F81               	movwf	_isdigit$766& (0+255),b
  3308  001760                     l3191:
  3309                           
  3310                           ; BSR set to: 0
  3311  001760  C081  F080         	movff	_isdigit$766,??_isdigit
  3312  001764  0100               	movlb	0	; () banked
  3313  001766  3180               	rrcf	??_isdigit& (0+255),w,b
  3314  001768  0012               	return	
  3315  00176A                     __end_of_isdigit:
  3316                           	opt stack 0
  3317                           tblptru	equ	0xFF8
  3318                           tblptrh	equ	0xFF7
  3319                           tblptrl	equ	0xFF6
  3320                           tablat	equ	0xFF5
  3321                           prodh	equ	0xFF4
  3322                           prodl	equ	0xFF3
  3323                           intcon	equ	0xFF2
  3324                           intcon3	equ	0xFF0
  3325                           postinc0	equ	0xFEE
  3326                           wreg	equ	0xFE8
  3327                           indf2	equ	0xFDF
  3328                           postinc2	equ	0xFDE
  3329                           postdec2	equ	0xFDD
  3330                           fsr2h	equ	0xFDA
  3331                           fsr2l	equ	0xFD9
  3332                           status	equ	0xFD8
  3333                           
  3334 ;; *************** function ___wmul *****************
  3335 ;; Defined at:
  3336 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/Umul16.c"
  3337 ;; Parameters:    Size  Location     Type
  3338 ;;  multiplier      2    8[BANK0 ] unsigned int 
  3339 ;;  multiplicand    2   10[BANK0 ] unsigned int 
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;  product         2   12[BANK0 ] unsigned int 
  3342 ;; Return value:  Size  Location     Type
  3343 ;;                  2    8[BANK0 ] unsigned int 
  3344 ;; Registers used:
  3345 ;;		wreg, status,2, status,0, prodl, prodh
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3351 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3352 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3354 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3355 ;;Total ram usage:        6 bytes
  3356 ;; Hardware stack levels used:    1
  3357 ;; Hardware stack levels required when called:    5
  3358 ;; This function calls:
  3359 ;;		Nothing
  3360 ;; This function is called by:
  3361 ;;		_operation
  3362 ;;		_printf
  3363 ;; This function uses a non-reentrant model
  3364 ;;
  3365                           
  3366                           	psect	text8
  3367  001674                     __ptext8:
  3368                           	opt stack 0
  3369  001674                     ___wmul:
  3370                           	opt stack 23
  3371                           
  3372                           ; BSR set to: 0
  3373                           ;incstack = 0
  3374  001674  0100               	movlb	0	; () banked
  3375  001676  5188               	movf	___wmul@multiplier& (0+255),w,b
  3376  001678  0100               	movlb	0	; () banked
  3377  00167A  038A               	mulwf	___wmul@multiplicand& (0+255),b
  3378  00167C  CFF3 F08C          	movff	prodl,___wmul@product
  3379  001680  CFF4 F08D          	movff	prodh,___wmul@product+1
  3380  001684  0100               	movlb	0	; () banked
  3381  001686  5188               	movf	___wmul@multiplier& (0+255),w,b
  3382  001688  0100               	movlb	0	; () banked
  3383  00168A  038B               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3384  00168C  50F3               	movf	prodl,w,c
  3385  00168E  0100               	movlb	0	; () banked
  3386  001690  278D               	addwf	(___wmul@product+1)& (0+255),f,b
  3387  001692  0100               	movlb	0	; () banked
  3388  001694  5189               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3389  001696  0100               	movlb	0	; () banked
  3390  001698  038A               	mulwf	___wmul@multiplicand& (0+255),b
  3391  00169A  50F3               	movf	prodl,w,c
  3392  00169C  0100               	movlb	0	; () banked
  3393  00169E  278D               	addwf	(___wmul@product+1)& (0+255),f,b
  3394                           
  3395                           ; BSR set to: 0
  3396  0016A0  C08C  F088         	movff	___wmul@product,?___wmul
  3397  0016A4  C08D  F089         	movff	___wmul@product+1,?___wmul+1
  3398  0016A8  0012               	return	
  3399  0016AA                     __end_of___wmul:
  3400                           	opt stack 0
  3401                           tblptru	equ	0xFF8
  3402                           tblptrh	equ	0xFF7
  3403                           tblptrl	equ	0xFF6
  3404                           tablat	equ	0xFF5
  3405                           prodh	equ	0xFF4
  3406                           prodl	equ	0xFF3
  3407                           intcon	equ	0xFF2
  3408                           intcon3	equ	0xFF0
  3409                           postinc0	equ	0xFEE
  3410                           wreg	equ	0xFE8
  3411                           indf2	equ	0xFDF
  3412                           postinc2	equ	0xFDE
  3413                           postdec2	equ	0xFDD
  3414                           fsr2h	equ	0xFDA
  3415                           fsr2l	equ	0xFD9
  3416                           status	equ	0xFD8
  3417                           
  3418 ;; *************** function ___lwmod *****************
  3419 ;; Defined at:
  3420 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
  3421 ;; Parameters:    Size  Location     Type
  3422 ;;  dividend        2    7[BANK0 ] unsigned int 
  3423 ;;  divisor         2    9[BANK0 ] unsigned int 
  3424 ;; Auto vars:     Size  Location     Type
  3425 ;;  counter         1   11[BANK0 ] unsigned char 
  3426 ;; Return value:  Size  Location     Type
  3427 ;;                  2    7[BANK0 ] unsigned int 
  3428 ;; Registers used:
  3429 ;;		wreg, status,2, status,0
  3430 ;; Tracked objects:
  3431 ;;		On entry : 0/0
  3432 ;;		On exit  : 0/0
  3433 ;;		Unchanged: 0/0
  3434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3435 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3436 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3438 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3439 ;;Total ram usage:        5 bytes
  3440 ;; Hardware stack levels used:    1
  3441 ;; Hardware stack levels required when called:    5
  3442 ;; This function calls:
  3443 ;;		Nothing
  3444 ;; This function is called by:
  3445 ;;		_printf
  3446 ;; This function uses a non-reentrant model
  3447 ;;
  3448                           
  3449                           	psect	text9
  3450  001392                     __ptext9:
  3451                           	opt stack 0
  3452  001392                     ___lwmod:
  3453                           	opt stack 23
  3454                           
  3455                           ; BSR set to: 0
  3456                           ;incstack = 0
  3457  001392  0100               	movlb	0	; () banked
  3458  001394  5189               	movf	___lwmod@divisor& (0+255),w,b
  3459  001396  0100               	movlb	0	; () banked
  3460  001398  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  3461  00139A  B4D8               	btfsc	status,2,c
  3462  00139C  D026               	goto	l802
  3463                           
  3464                           ; BSR set to: 0
  3465  00139E  0E01               	movlw	1
  3466  0013A0  0100               	movlb	0	; () banked
  3467  0013A2  6F8B               	movwf	___lwmod@counter& (0+255),b
  3468  0013A4  D006               	goto	l3229
  3469  0013A6                     l3227:
  3470                           
  3471                           ; BSR set to: 0
  3472  0013A6  0100               	movlb	0	; () banked
  3473  0013A8  90D8               	bcf	status,0,c
  3474  0013AA  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  3475  0013AC  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  3476  0013AE  0100               	movlb	0	; () banked
  3477  0013B0  2B8B               	incf	___lwmod@counter& (0+255),f,b
  3478  0013B2                     l3229:
  3479                           
  3480                           ; BSR set to: 0
  3481  0013B2  0100               	movlb	0	; () banked
  3482  0013B4  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  3483  0013B6  D7F7               	goto	l3227
  3484  0013B8                     l3231:
  3485                           
  3486                           ; BSR set to: 0
  3487  0013B8  0100               	movlb	0	; () banked
  3488  0013BA  5189               	movf	___lwmod@divisor& (0+255),w,b
  3489  0013BC  0100               	movlb	0	; () banked
  3490  0013BE  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  3491  0013C0  0100               	movlb	0	; () banked
  3492  0013C2  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3493  0013C4  0100               	movlb	0	; () banked
  3494  0013C6  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  3495  0013C8  A0D8               	btfss	status,0,c
  3496  0013CA  D008               	goto	l3235
  3497                           
  3498                           ; BSR set to: 0
  3499  0013CC  0100               	movlb	0	; () banked
  3500  0013CE  5189               	movf	___lwmod@divisor& (0+255),w,b
  3501  0013D0  0100               	movlb	0	; () banked
  3502  0013D2  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  3503  0013D4  0100               	movlb	0	; () banked
  3504  0013D6  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3505  0013D8  0100               	movlb	0	; () banked
  3506  0013DA  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  3507  0013DC                     l3235:
  3508                           
  3509                           ; BSR set to: 0
  3510  0013DC  0100               	movlb	0	; () banked
  3511  0013DE  90D8               	bcf	status,0,c
  3512  0013E0  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  3513  0013E2  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  3514                           
  3515                           ; BSR set to: 0
  3516  0013E4  0100               	movlb	0	; () banked
  3517  0013E6  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  3518  0013E8  D7E7               	goto	l3231
  3519  0013EA                     l802:
  3520                           
  3521                           ; BSR set to: 0
  3522  0013EA  C087  F087         	movff	___lwmod@dividend,?___lwmod
  3523  0013EE  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  3524                           
  3525                           ; BSR set to: 0
  3526  0013F2  0012               	return		;funcret
  3527  0013F4                     __end_of___lwmod:
  3528                           	opt stack 0
  3529                           tblptru	equ	0xFF8
  3530                           tblptrh	equ	0xFF7
  3531                           tblptrl	equ	0xFF6
  3532                           tablat	equ	0xFF5
  3533                           prodh	equ	0xFF4
  3534                           prodl	equ	0xFF3
  3535                           intcon	equ	0xFF2
  3536                           intcon3	equ	0xFF0
  3537                           postinc0	equ	0xFEE
  3538                           wreg	equ	0xFE8
  3539                           indf2	equ	0xFDF
  3540                           postinc2	equ	0xFDE
  3541                           postdec2	equ	0xFDD
  3542                           fsr2h	equ	0xFDA
  3543                           fsr2l	equ	0xFD9
  3544                           status	equ	0xFD8
  3545                           
  3546 ;; *************** function ___lwdiv *****************
  3547 ;; Defined at:
  3548 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  3549 ;; Parameters:    Size  Location     Type
  3550 ;;  dividend        2    0[BANK0 ] unsigned int 
  3551 ;;  divisor         2    2[BANK0 ] unsigned int 
  3552 ;; Auto vars:     Size  Location     Type
  3553 ;;  quotient        2    5[BANK0 ] unsigned int 
  3554 ;;  counter         1    4[BANK0 ] unsigned char 
  3555 ;; Return value:  Size  Location     Type
  3556 ;;                  2    0[BANK0 ] unsigned int 
  3557 ;; Registers used:
  3558 ;;		wreg, status,2, status,0
  3559 ;; Tracked objects:
  3560 ;;		On entry : 0/0
  3561 ;;		On exit  : 0/0
  3562 ;;		Unchanged: 0/0
  3563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3564 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3565 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3567 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3568 ;;Total ram usage:        7 bytes
  3569 ;; Hardware stack levels used:    1
  3570 ;; Hardware stack levels required when called:    5
  3571 ;; This function calls:
  3572 ;;		Nothing
  3573 ;; This function is called by:
  3574 ;;		_printf
  3575 ;; This function uses a non-reentrant model
  3576 ;;
  3577                           
  3578                           	psect	text10
  3579  00116A                     __ptext10:
  3580                           	opt stack 0
  3581  00116A                     ___lwdiv:
  3582                           	opt stack 23
  3583                           
  3584                           ; BSR set to: 0
  3585                           ;incstack = 0
  3586  00116A  0E00               	movlw	0
  3587  00116C  0100               	movlb	0	; () banked
  3588  00116E  6F86               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3589  001170  0E00               	movlw	0
  3590  001172  6F85               	movwf	___lwdiv@quotient& (0+255),b
  3591                           
  3592                           ; BSR set to: 0
  3593  001174  0100               	movlb	0	; () banked
  3594  001176  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3595  001178  0100               	movlb	0	; () banked
  3596  00117A  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3597  00117C  B4D8               	btfsc	status,2,c
  3598  00117E  D02C               	goto	l792
  3599                           
  3600                           ; BSR set to: 0
  3601  001180  0E01               	movlw	1
  3602  001182  0100               	movlb	0	; () banked
  3603  001184  6F84               	movwf	___lwdiv@counter& (0+255),b
  3604  001186  D006               	goto	l3209
  3605  001188                     l3207:
  3606                           
  3607                           ; BSR set to: 0
  3608  001188  0100               	movlb	0	; () banked
  3609  00118A  90D8               	bcf	status,0,c
  3610  00118C  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  3611  00118E  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3612  001190  0100               	movlb	0	; () banked
  3613  001192  2B84               	incf	___lwdiv@counter& (0+255),f,b
  3614  001194                     l3209:
  3615                           
  3616                           ; BSR set to: 0
  3617  001194  0100               	movlb	0	; () banked
  3618  001196  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3619  001198  D7F7               	goto	l3207
  3620  00119A                     l3211:
  3621                           
  3622                           ; BSR set to: 0
  3623  00119A  0100               	movlb	0	; () banked
  3624  00119C  90D8               	bcf	status,0,c
  3625  00119E  3785               	rlcf	___lwdiv@quotient& (0+255),f,b
  3626  0011A0  3786               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3627                           
  3628                           ; BSR set to: 0
  3629  0011A2  0100               	movlb	0	; () banked
  3630  0011A4  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3631  0011A6  0100               	movlb	0	; () banked
  3632  0011A8  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  3633  0011AA  0100               	movlb	0	; () banked
  3634  0011AC  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3635  0011AE  0100               	movlb	0	; () banked
  3636  0011B0  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3637  0011B2  A0D8               	btfss	status,0,c
  3638  0011B4  D00A               	goto	l3219
  3639                           
  3640                           ; BSR set to: 0
  3641  0011B6  0100               	movlb	0	; () banked
  3642  0011B8  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3643  0011BA  0100               	movlb	0	; () banked
  3644  0011BC  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  3645  0011BE  0100               	movlb	0	; () banked
  3646  0011C0  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3647  0011C2  0100               	movlb	0	; () banked
  3648  0011C4  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3649                           
  3650                           ; BSR set to: 0
  3651  0011C6  0100               	movlb	0	; () banked
  3652  0011C8  8185               	bsf	___lwdiv@quotient& (0+255),0,b
  3653  0011CA                     l3219:
  3654                           
  3655                           ; BSR set to: 0
  3656  0011CA  0100               	movlb	0	; () banked
  3657  0011CC  90D8               	bcf	status,0,c
  3658  0011CE  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3659  0011D0  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  3660                           
  3661                           ; BSR set to: 0
  3662  0011D2  0100               	movlb	0	; () banked
  3663  0011D4  2F84               	decfsz	___lwdiv@counter& (0+255),f,b
  3664  0011D6  D7E1               	goto	l3211
  3665  0011D8                     l792:
  3666                           
  3667                           ; BSR set to: 0
  3668  0011D8  C085  F080         	movff	___lwdiv@quotient,?___lwdiv
  3669  0011DC  C086  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3670                           
  3671                           ; BSR set to: 0
  3672  0011E0  0012               	return		;funcret
  3673  0011E2                     __end_of___lwdiv:
  3674                           	opt stack 0
  3675                           tblptru	equ	0xFF8
  3676                           tblptrh	equ	0xFF7
  3677                           tblptrl	equ	0xFF6
  3678                           tablat	equ	0xFF5
  3679                           prodh	equ	0xFF4
  3680                           prodl	equ	0xFF3
  3681                           intcon	equ	0xFF2
  3682                           intcon3	equ	0xFF0
  3683                           postinc0	equ	0xFEE
  3684                           wreg	equ	0xFE8
  3685                           indf2	equ	0xFDF
  3686                           postinc2	equ	0xFDE
  3687                           postdec2	equ	0xFDD
  3688                           fsr2h	equ	0xFDA
  3689                           fsr2l	equ	0xFD9
  3690                           status	equ	0xFD8
  3691                           
  3692 ;; *************** function _initialization *****************
  3693 ;; Defined at:
  3694 ;;		line 47 in file "sort.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;		None
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;  i               1    3[BANK0 ] unsigned char 
  3699 ;;  i               1    2[BANK0 ] unsigned char 
  3700 ;; Return value:  Size  Location     Type
  3701 ;;                  1    wreg      void 
  3702 ;; Registers used:
  3703 ;;		wreg, status,2, status,0
  3704 ;; Tracked objects:
  3705 ;;		On entry : 0/0
  3706 ;;		On exit  : 0/0
  3707 ;;		Unchanged: 0/0
  3708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3710 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3711 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3712 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3713 ;;Total ram usage:        4 bytes
  3714 ;; Hardware stack levels used:    1
  3715 ;; Hardware stack levels required when called:    5
  3716 ;; This function calls:
  3717 ;;		Nothing
  3718 ;; This function is called by:
  3719 ;;		_startSorting
  3720 ;; This function uses a non-reentrant model
  3721 ;;
  3722                           
  3723                           	psect	text11
  3724  00132E                     __ptext11:
  3725                           	opt stack 0
  3726  00132E                     _initialization:
  3727                           	opt stack 23
  3728                           
  3729                           ;sort.c: 51: LATBbits.LATB0 = 1;
  3730                           
  3731                           ; BSR set to: 0
  3732                           ;incstack = 0
  3733  00132E  808A               	bsf	3978,0,c	;volatile
  3734                           
  3735                           ;sort.c: 54: LATEbits.LATE0 = 1;
  3736  001330  808D               	bsf	3981,0,c	;volatile
  3737                           
  3738                           ;sort.c: 57: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)));};
  3739  001332  0E00               	movlw	0
  3740  001334  0100               	movlb	0	; () banked
  3741  001336  6F82               	movwf	initialization@i& (0+255),b
  3742  001338                     l3391:
  3743                           
  3744                           ; BSR set to: 0
  3745  001338  0E09               	movlw	9
  3746  00133A  0100               	movlb	0	; () banked
  3747  00133C  6582               	cpfsgt	initialization@i& (0+255),b
  3748  00133E  D001               	goto	l3395
  3749  001340  D010               	goto	l3399
  3750  001342                     l3395:
  3751                           
  3752                           ; BSR set to: 0
  3753  001342  0E02               	movlw	2
  3754  001344  0100               	movlb	0	; () banked
  3755  001346  6F81               	movwf	(??_initialization+1)& (0+255),b
  3756  001348  0E3F               	movlw	63
  3757  00134A  0100               	movlb	0	; () banked
  3758  00134C  6F80               	movwf	??_initialization& (0+255),b
  3759  00134E  0E2B               	movlw	43
  3760  001350                     u3757:
  3761  001350  2EE8               	decfsz	wreg,f,c
  3762  001352  D7FE               	bra	u3757
  3763  001354  2F80               	decfsz	??_initialization& (0+255),f,b
  3764  001356  D7FC               	bra	u3757
  3765  001358  2F81               	decfsz	(??_initialization+1)& (0+255),f,b
  3766  00135A  D7FA               	bra	u3757
  3767  00135C  0100               	movlb	0	; () banked
  3768  00135E  2B82               	incf	initialization@i& (0+255),f,b
  3769  001360  D7EB               	goto	l3391
  3770  001362                     l3399:
  3771                           
  3772                           ; BSR set to: 0
  3773                           ;sort.c: 58: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)));};
  3774  001362  0E00               	movlw	0
  3775  001364  0100               	movlb	0	; () banked
  3776  001366  6F83               	movwf	initialization@i_504& (0+255),b
  3777  001368                     l3401:
  3778                           
  3779                           ; BSR set to: 0
  3780  001368  0E09               	movlw	9
  3781  00136A  0100               	movlb	0	; () banked
  3782  00136C  6583               	cpfsgt	initialization@i_504& (0+255),b
  3783  00136E  D001               	goto	l3405
  3784  001370  0012               	return	
  3785  001372                     l3405:
  3786                           
  3787                           ; BSR set to: 0
  3788  001372  0E02               	movlw	2
  3789  001374  0100               	movlb	0	; () banked
  3790  001376  6F81               	movwf	(??_initialization+1)& (0+255),b
  3791  001378  0E3F               	movlw	63
  3792  00137A  0100               	movlb	0	; () banked
  3793  00137C  6F80               	movwf	??_initialization& (0+255),b
  3794  00137E  0E2B               	movlw	43
  3795  001380                     u3767:
  3796  001380  2EE8               	decfsz	wreg,f,c
  3797  001382  D7FE               	bra	u3767
  3798  001384  2F80               	decfsz	??_initialization& (0+255),f,b
  3799  001386  D7FC               	bra	u3767
  3800  001388  2F81               	decfsz	(??_initialization+1)& (0+255),f,b
  3801  00138A  D7FA               	bra	u3767
  3802  00138C  0100               	movlb	0	; () banked
  3803  00138E  2B83               	incf	initialization@i_504& (0+255),f,b
  3804  001390  D7EB               	goto	l3401
  3805  001392                     __end_of_initialization:
  3806                           	opt stack 0
  3807                           tblptru	equ	0xFF8
  3808                           tblptrh	equ	0xFF7
  3809                           tblptrl	equ	0xFF6
  3810                           tablat	equ	0xFF5
  3811                           prodh	equ	0xFF4
  3812                           prodl	equ	0xFF3
  3813                           intcon	equ	0xFF2
  3814                           intcon3	equ	0xFF0
  3815                           postinc0	equ	0xFEE
  3816                           wreg	equ	0xFE8
  3817                           indf2	equ	0xFDF
  3818                           postinc2	equ	0xFDE
  3819                           postdec2	equ	0xFDD
  3820                           fsr2h	equ	0xFDA
  3821                           fsr2l	equ	0xFD9
  3822                           status	equ	0xFD8
  3823                           
  3824 ;; *************** function _initLCD *****************
  3825 ;; Defined at:
  3826 ;;		line 14 in file "lcd.c"
  3827 ;; Parameters:    Size  Location     Type
  3828 ;;		None
  3829 ;; Auto vars:     Size  Location     Type
  3830 ;;		None
  3831 ;; Return value:  Size  Location     Type
  3832 ;;                  1    wreg      void 
  3833 ;; Registers used:
  3834 ;;		wreg, status,2, status,0, cstack
  3835 ;; Tracked objects:
  3836 ;;		On entry : 0/0
  3837 ;;		On exit  : 0/0
  3838 ;;		Unchanged: 0/0
  3839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3842 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3843 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3844 ;;Total ram usage:        1 bytes
  3845 ;; Hardware stack levels used:    1
  3846 ;; Hardware stack levels required when called:    7
  3847 ;; This function calls:
  3848 ;;		_lcdInst
  3849 ;; This function is called by:
  3850 ;;		_main
  3851 ;;		_operation
  3852 ;;		_startSorting
  3853 ;;		_results
  3854 ;; This function uses a non-reentrant model
  3855 ;;
  3856                           
  3857                           	psect	text12
  3858  001558                     __ptext12:
  3859                           	opt stack 0
  3860  001558                     _initLCD:
  3861                           	opt stack 22
  3862                           
  3863                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  3864                           
  3865                           ; BSR set to: 0
  3866                           ;incstack = 0
  3867  001558  0E31               	movlw	49
  3868  00155A  0100               	movlb	0	; () banked
  3869  00155C  6F83               	movwf	??_initLCD& (0+255),b
  3870  00155E  0EB2               	movlw	178
  3871  001560                     u3777:
  3872  001560  2EE8               	decfsz	wreg,f,c
  3873  001562  D7FE               	bra	u3777
  3874  001564  2F83               	decfsz	??_initLCD& (0+255),f,b
  3875  001566  D7FC               	bra	u3777
  3876  001568  F000               	nop	
  3877                           
  3878                           ;lcd.c: 16: lcdInst(0b00110011);
  3879  00156A  0E33               	movlw	51
  3880  00156C  EC06  F00C         	call	_lcdInst
  3881                           
  3882                           ;lcd.c: 17: lcdInst(0b00110010);
  3883  001570  0E32               	movlw	50
  3884  001572  EC06  F00C         	call	_lcdInst
  3885                           
  3886                           ;lcd.c: 18: lcdInst(0b00101000);
  3887  001576  0E28               	movlw	40
  3888  001578  EC06  F00C         	call	_lcdInst
  3889                           
  3890                           ;lcd.c: 19: lcdInst(0b00001111);
  3891  00157C  0E0F               	movlw	15
  3892  00157E  EC06  F00C         	call	_lcdInst
  3893                           
  3894                           ;lcd.c: 20: lcdInst(0b00000110);
  3895  001582  0E06               	movlw	6
  3896  001584  EC06  F00C         	call	_lcdInst
  3897                           
  3898                           ;lcd.c: 21: lcdInst(0b00000001);
  3899  001588  0E01               	movlw	1
  3900  00158A  EC06  F00C         	call	_lcdInst
  3901                           
  3902                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  3903  00158E  0E31               	movlw	49
  3904  001590  0100               	movlb	0	; () banked
  3905  001592  6F83               	movwf	??_initLCD& (0+255),b
  3906  001594  0EB2               	movlw	178
  3907  001596                     u3787:
  3908  001596  2EE8               	decfsz	wreg,f,c
  3909  001598  D7FE               	bra	u3787
  3910  00159A  2F83               	decfsz	??_initLCD& (0+255),f,b
  3911  00159C  D7FC               	bra	u3787
  3912  00159E  F000               	nop	
  3913  0015A0  0012               	return		;funcret
  3914  0015A2                     __end_of_initLCD:
  3915                           	opt stack 0
  3916                           tblptru	equ	0xFF8
  3917                           tblptrh	equ	0xFF7
  3918                           tblptrl	equ	0xFF6
  3919                           tablat	equ	0xFF5
  3920                           prodh	equ	0xFF4
  3921                           prodl	equ	0xFF3
  3922                           intcon	equ	0xFF2
  3923                           intcon3	equ	0xFF0
  3924                           postinc0	equ	0xFEE
  3925                           wreg	equ	0xFE8
  3926                           indf2	equ	0xFDF
  3927                           postinc2	equ	0xFDE
  3928                           postdec2	equ	0xFDD
  3929                           fsr2h	equ	0xFDA
  3930                           fsr2l	equ	0xFD9
  3931                           status	equ	0xFD8
  3932                           
  3933 ;; *************** function _lcdInst *****************
  3934 ;; Defined at:
  3935 ;;		line 25 in file "lcd.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;  data            1    wreg     unsigned char 
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;  data            1    2[BANK0 ] unsigned char 
  3940 ;; Return value:  Size  Location     Type
  3941 ;;                  1    wreg      void 
  3942 ;; Registers used:
  3943 ;;		wreg, status,2, status,0, cstack
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3950 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3952 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3953 ;;Total ram usage:        1 bytes
  3954 ;; Hardware stack levels used:    1
  3955 ;; Hardware stack levels required when called:    6
  3956 ;; This function calls:
  3957 ;;		_lcdNibble
  3958 ;; This function is called by:
  3959 ;;		_initLCD
  3960 ;;		_operation
  3961 ;;		_startSorting
  3962 ;;		_results
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966                           	psect	text13
  3967  00180C                     __ptext13:
  3968                           	opt stack 0
  3969  00180C                     _lcdInst:
  3970                           	opt stack 23
  3971                           
  3972                           ;incstack = 0
  3973                           ;lcdInst@data stored from wreg
  3974  00180C  0100               	movlb	0	; () banked
  3975  00180E  6F82               	movwf	lcdInst@data& (0+255),b
  3976                           
  3977                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  3978  001810  948C               	bcf	3980,2,c	;volatile
  3979                           
  3980                           ;lcd.c: 27: lcdNibble(data);
  3981  001812  0100               	movlb	0	; () banked
  3982  001814  5182               	movf	lcdInst@data& (0+255),w,b
  3983  001816  EC63  F009         	call	_lcdNibble
  3984  00181A  0012               	return		;funcret
  3985  00181C                     __end_of_lcdInst:
  3986                           	opt stack 0
  3987                           tblptru	equ	0xFF8
  3988                           tblptrh	equ	0xFF7
  3989                           tblptrl	equ	0xFF6
  3990                           tablat	equ	0xFF5
  3991                           prodh	equ	0xFF4
  3992                           prodl	equ	0xFF3
  3993                           intcon	equ	0xFF2
  3994                           intcon3	equ	0xFF0
  3995                           postinc0	equ	0xFEE
  3996                           wreg	equ	0xFE8
  3997                           indf2	equ	0xFDF
  3998                           postinc2	equ	0xFDE
  3999                           postdec2	equ	0xFDD
  4000                           fsr2h	equ	0xFDA
  4001                           fsr2l	equ	0xFD9
  4002                           status	equ	0xFD8
  4003                           
  4004 ;; *************** function _lcdNibble *****************
  4005 ;; Defined at:
  4006 ;;		line 35 in file "lcd.c"
  4007 ;; Parameters:    Size  Location     Type
  4008 ;;  data            1    wreg     unsigned char 
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;  data            1    1[BANK0 ] unsigned char 
  4011 ;;  temp            1    0[BANK0 ] unsigned char 
  4012 ;; Return value:  Size  Location     Type
  4013 ;;                  1    wreg      void 
  4014 ;; Registers used:
  4015 ;;		wreg, status,2, status,0
  4016 ;; Tracked objects:
  4017 ;;		On entry : 0/0
  4018 ;;		On exit  : 0/0
  4019 ;;		Unchanged: 0/0
  4020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4022 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4024 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4025 ;;Total ram usage:        2 bytes
  4026 ;; Hardware stack levels used:    1
  4027 ;; Hardware stack levels required when called:    5
  4028 ;; This function calls:
  4029 ;;		Nothing
  4030 ;; This function is called by:
  4031 ;;		_lcdInst
  4032 ;;		_putch
  4033 ;; This function uses a non-reentrant model
  4034 ;;
  4035                           
  4036                           	psect	text14
  4037  0012C6                     __ptext14:
  4038                           	opt stack 0
  4039  0012C6                     _lcdNibble:
  4040                           	opt stack 22
  4041                           
  4042                           ;incstack = 0
  4043                           ;lcdNibble@data stored from wreg
  4044  0012C6  0100               	movlb	0	; () banked
  4045  0012C8  6F81               	movwf	lcdNibble@data& (0+255),b
  4046                           
  4047                           ;lcd.c: 37: char temp = data & 0xF0;
  4048  0012CA  0100               	movlb	0	; () banked
  4049  0012CC  5181               	movf	lcdNibble@data& (0+255),w,b
  4050  0012CE  0BF0               	andlw	240
  4051  0012D0  0100               	movlb	0	; () banked
  4052  0012D2  6F80               	movwf	lcdNibble@temp& (0+255),b
  4053                           
  4054                           ;lcd.c: 38: LATD = LATD & 0x0F;
  4055  0012D4  508C               	movf	3980,w,c	;volatile
  4056  0012D6  0B0F               	andlw	15
  4057  0012D8  6E8C               	movwf	3980,c	;volatile
  4058                           
  4059                           ;lcd.c: 39: LATD = temp | LATD;
  4060  0012DA  0100               	movlb	0	; () banked
  4061  0012DC  5180               	movf	lcdNibble@temp& (0+255),w,b
  4062  0012DE  108C               	iorwf	3980,w,c	;volatile
  4063  0012E0  6E8C               	movwf	3980,c	;volatile
  4064                           
  4065                           ; BSR set to: 0
  4066                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  4067  0012E2  968C               	bcf	3980,3,c	;volatile
  4068                           
  4069                           ; BSR set to: 0
  4070                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
  4071  0012E4  0E14               	movlw	20
  4072  0012E6                     u3797:
  4073  0012E6  2EE8               	decfsz	wreg,f,c
  4074  0012E8  D7FE               	bra	u3797
  4075  0012EA  D000               	nop2	
  4076                           
  4077                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  4078  0012EC  868C               	bsf	3980,3,c	;volatile
  4079                           
  4080                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
  4081  0012EE  0E14               	movlw	20
  4082  0012F0                     u3807:
  4083  0012F0  2EE8               	decfsz	wreg,f,c
  4084  0012F2  D7FE               	bra	u3807
  4085  0012F4  D000               	nop2	
  4086                           
  4087                           ;lcd.c: 46: data = data << 4;
  4088  0012F6  0100               	movlb	0	; () banked
  4089  0012F8  3981               	swapf	lcdNibble@data& (0+255),w,b
  4090  0012FA  0BF0               	andlw	240
  4091  0012FC  0100               	movlb	0	; () banked
  4092  0012FE  6F81               	movwf	lcdNibble@data& (0+255),b
  4093                           
  4094                           ;lcd.c: 48: temp = data & 0xF0;
  4095  001300  0100               	movlb	0	; () banked
  4096  001302  5181               	movf	lcdNibble@data& (0+255),w,b
  4097  001304  0BF0               	andlw	240
  4098  001306  0100               	movlb	0	; () banked
  4099  001308  6F80               	movwf	lcdNibble@temp& (0+255),b
  4100                           
  4101                           ;lcd.c: 49: LATD = LATD & 0x0F;
  4102  00130A  508C               	movf	3980,w,c	;volatile
  4103  00130C  0B0F               	andlw	15
  4104  00130E  6E8C               	movwf	3980,c	;volatile
  4105                           
  4106                           ;lcd.c: 50: LATD = temp | LATD;
  4107  001310  0100               	movlb	0	; () banked
  4108  001312  5180               	movf	lcdNibble@temp& (0+255),w,b
  4109  001314  108C               	iorwf	3980,w,c	;volatile
  4110  001316  6E8C               	movwf	3980,c	;volatile
  4111                           
  4112                           ; BSR set to: 0
  4113                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  4114  001318  968C               	bcf	3980,3,c	;volatile
  4115                           
  4116                           ; BSR set to: 0
  4117                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
  4118  00131A  0E14               	movlw	20
  4119  00131C                     u3817:
  4120  00131C  2EE8               	decfsz	wreg,f,c
  4121  00131E  D7FE               	bra	u3817
  4122  001320  D000               	nop2	
  4123                           
  4124                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  4125  001322  868C               	bsf	3980,3,c	;volatile
  4126                           
  4127                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
  4128  001324  0E14               	movlw	20
  4129  001326                     u3827:
  4130  001326  2EE8               	decfsz	wreg,f,c
  4131  001328  D7FE               	bra	u3827
  4132  00132A  D000               	nop2	
  4133  00132C  0012               	return		;funcret
  4134  00132E                     __end_of_lcdNibble:
  4135                           	opt stack 0
  4136                           tblptru	equ	0xFF8
  4137                           tblptrh	equ	0xFF7
  4138                           tblptrl	equ	0xFF6
  4139                           tablat	equ	0xFF5
  4140                           prodh	equ	0xFF4
  4141                           prodl	equ	0xFF3
  4142                           intcon	equ	0xFF2
  4143                           intcon3	equ	0xFF0
  4144                           postinc0	equ	0xFEE
  4145                           wreg	equ	0xFE8
  4146                           indf2	equ	0xFDF
  4147                           postinc2	equ	0xFDE
  4148                           postdec2	equ	0xFDD
  4149                           fsr2h	equ	0xFDA
  4150                           fsr2l	equ	0xFD9
  4151                           status	equ	0xFD8
  4152                           
  4153 ;; *************** function ___awdiv *****************
  4154 ;; Defined at:
  4155 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awdiv.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;  dividend        2    0[BANK0 ] int 
  4158 ;;  divisor         2    2[BANK0 ] int 
  4159 ;; Auto vars:     Size  Location     Type
  4160 ;;  quotient        2    6[BANK0 ] int 
  4161 ;;  sign            1    5[BANK0 ] unsigned char 
  4162 ;;  counter         1    4[BANK0 ] unsigned char 
  4163 ;; Return value:  Size  Location     Type
  4164 ;;                  2    0[BANK0 ] int 
  4165 ;; Registers used:
  4166 ;;		wreg, status,2, status,0
  4167 ;; Tracked objects:
  4168 ;;		On entry : 0/0
  4169 ;;		On exit  : 0/0
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4172 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4173 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4175 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4176 ;;Total ram usage:        8 bytes
  4177 ;; Hardware stack levels used:    1
  4178 ;; Hardware stack levels required when called:    5
  4179 ;; This function calls:
  4180 ;;		Nothing
  4181 ;; This function is called by:
  4182 ;;		_operation
  4183 ;; This function uses a non-reentrant model
  4184 ;;
  4185                           
  4186                           	psect	text15
  4187  000ED8                     __ptext15:
  4188                           	opt stack 0
  4189  000ED8                     ___awdiv:
  4190                           	opt stack 24
  4191                           
  4192                           ;incstack = 0
  4193  000ED8  0E00               	movlw	0
  4194  000EDA  0100               	movlb	0	; () banked
  4195  000EDC  6F85               	movwf	___awdiv@sign& (0+255),b
  4196                           
  4197                           ; BSR set to: 0
  4198  000EDE  0100               	movlb	0	; () banked
  4199  000EE0  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4200  000EE2  D008               	goto	l3471
  4201                           
  4202                           ; BSR set to: 0
  4203  000EE4  0100               	movlb	0	; () banked
  4204  000EE6  6D82               	negf	___awdiv@divisor& (0+255),b
  4205  000EE8  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4206  000EEA  B0D8               	btfsc	status,0,c
  4207  000EEC  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4208                           
  4209                           ; BSR set to: 0
  4210  000EEE  0E01               	movlw	1
  4211  000EF0  0100               	movlb	0	; () banked
  4212  000EF2  6F85               	movwf	___awdiv@sign& (0+255),b
  4213  000EF4                     l3471:
  4214                           
  4215                           ; BSR set to: 0
  4216  000EF4  0100               	movlb	0	; () banked
  4217  000EF6  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4218  000EF8  D008               	goto	l3477
  4219                           
  4220                           ; BSR set to: 0
  4221  000EFA  0100               	movlb	0	; () banked
  4222  000EFC  6D80               	negf	___awdiv@dividend& (0+255),b
  4223  000EFE  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4224  000F00  B0D8               	btfsc	status,0,c
  4225  000F02  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4226                           
  4227                           ; BSR set to: 0
  4228  000F04  0E01               	movlw	1
  4229  000F06  0100               	movlb	0	; () banked
  4230  000F08  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  4231  000F0A                     l3477:
  4232                           
  4233                           ; BSR set to: 0
  4234  000F0A  0E00               	movlw	0
  4235  000F0C  0100               	movlb	0	; () banked
  4236  000F0E  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  4237  000F10  0E00               	movlw	0
  4238  000F12  6F86               	movwf	___awdiv@quotient& (0+255),b
  4239                           
  4240                           ; BSR set to: 0
  4241  000F14  0100               	movlb	0	; () banked
  4242  000F16  5182               	movf	___awdiv@divisor& (0+255),w,b
  4243  000F18  0100               	movlb	0	; () banked
  4244  000F1A  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4245  000F1C  B4D8               	btfsc	status,2,c
  4246  000F1E  D02C               	goto	l3499
  4247                           
  4248                           ; BSR set to: 0
  4249  000F20  0E01               	movlw	1
  4250  000F22  0100               	movlb	0	; () banked
  4251  000F24  6F84               	movwf	___awdiv@counter& (0+255),b
  4252  000F26  D006               	goto	l3485
  4253  000F28                     l3483:
  4254                           
  4255                           ; BSR set to: 0
  4256  000F28  0100               	movlb	0	; () banked
  4257  000F2A  90D8               	bcf	status,0,c
  4258  000F2C  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  4259  000F2E  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4260  000F30  0100               	movlb	0	; () banked
  4261  000F32  2B84               	incf	___awdiv@counter& (0+255),f,b
  4262  000F34                     l3485:
  4263                           
  4264                           ; BSR set to: 0
  4265  000F34  0100               	movlb	0	; () banked
  4266  000F36  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4267  000F38  D7F7               	goto	l3483
  4268  000F3A                     l3487:
  4269                           
  4270                           ; BSR set to: 0
  4271  000F3A  0100               	movlb	0	; () banked
  4272  000F3C  90D8               	bcf	status,0,c
  4273  000F3E  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  4274  000F40  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4275                           
  4276                           ; BSR set to: 0
  4277  000F42  0100               	movlb	0	; () banked
  4278  000F44  5182               	movf	___awdiv@divisor& (0+255),w,b
  4279  000F46  0100               	movlb	0	; () banked
  4280  000F48  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  4281  000F4A  0100               	movlb	0	; () banked
  4282  000F4C  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4283  000F4E  0100               	movlb	0	; () banked
  4284  000F50  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4285  000F52  A0D8               	btfss	status,0,c
  4286  000F54  D00A               	goto	l3495
  4287                           
  4288                           ; BSR set to: 0
  4289  000F56  0100               	movlb	0	; () banked
  4290  000F58  5182               	movf	___awdiv@divisor& (0+255),w,b
  4291  000F5A  0100               	movlb	0	; () banked
  4292  000F5C  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  4293  000F5E  0100               	movlb	0	; () banked
  4294  000F60  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4295  000F62  0100               	movlb	0	; () banked
  4296  000F64  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4297                           
  4298                           ; BSR set to: 0
  4299  000F66  0100               	movlb	0	; () banked
  4300  000F68  8186               	bsf	___awdiv@quotient& (0+255),0,b
  4301  000F6A                     l3495:
  4302                           
  4303                           ; BSR set to: 0
  4304  000F6A  0100               	movlb	0	; () banked
  4305  000F6C  90D8               	bcf	status,0,c
  4306  000F6E  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4307  000F70  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  4308                           
  4309                           ; BSR set to: 0
  4310  000F72  0100               	movlb	0	; () banked
  4311  000F74  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  4312  000F76  D7E1               	goto	l3487
  4313  000F78                     l3499:
  4314                           
  4315                           ; BSR set to: 0
  4316  000F78  0100               	movlb	0	; () banked
  4317  000F7A  5185               	movf	___awdiv@sign& (0+255),w,b
  4318  000F7C  0100               	movlb	0	; () banked
  4319  000F7E  B4D8               	btfsc	status,2,c
  4320  000F80  D005               	goto	l3503
  4321                           
  4322                           ; BSR set to: 0
  4323  000F82  0100               	movlb	0	; () banked
  4324  000F84  6D86               	negf	___awdiv@quotient& (0+255),b
  4325  000F86  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4326  000F88  B0D8               	btfsc	status,0,c
  4327  000F8A  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4328  000F8C                     l3503:
  4329                           
  4330                           ; BSR set to: 0
  4331  000F8C  C086  F080         	movff	___awdiv@quotient,?___awdiv
  4332  000F90  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  4333  000F94  0012               	return	
  4334  000F96                     __end_of___awdiv:
  4335                           	opt stack 0
  4336                           tblptru	equ	0xFF8
  4337                           tblptrh	equ	0xFF7
  4338                           tblptrl	equ	0xFF6
  4339                           tablat	equ	0xFF5
  4340                           prodh	equ	0xFF4
  4341                           prodl	equ	0xFF3
  4342                           intcon	equ	0xFF2
  4343                           intcon3	equ	0xFF0
  4344                           postinc0	equ	0xFEE
  4345                           wreg	equ	0xFE8
  4346                           indf2	equ	0xFDF
  4347                           postinc2	equ	0xFDE
  4348                           postdec2	equ	0xFDD
  4349                           fsr2h	equ	0xFDA
  4350                           fsr2l	equ	0xFD9
  4351                           status	equ	0xFD8
  4352                           
  4353 ;; *************** function _I2C_Master_Write *****************
  4354 ;; Defined at:
  4355 ;;		line 47 in file "I2C.c"
  4356 ;; Parameters:    Size  Location     Type
  4357 ;;  d               2    1[BANK0 ] unsigned int 
  4358 ;; Auto vars:     Size  Location     Type
  4359 ;;		None
  4360 ;; Return value:  Size  Location     Type
  4361 ;;                  1    wreg      void 
  4362 ;; Registers used:
  4363 ;;		wreg, status,2, status,0, cstack
  4364 ;; Tracked objects:
  4365 ;;		On entry : 0/0
  4366 ;;		On exit  : 0/0
  4367 ;;		Unchanged: 0/0
  4368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4369 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4372 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4373 ;;Total ram usage:        2 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:    6
  4376 ;; This function calls:
  4377 ;;		_I2C_Master_Wait
  4378 ;; This function is called by:
  4379 ;;		_set_time
  4380 ;;		_operation
  4381 ;; This function uses a non-reentrant model
  4382 ;;
  4383                           
  4384                           	psect	text16
  4385  001834                     __ptext16:
  4386                           	opt stack 0
  4387  001834                     _I2C_Master_Write:
  4388                           	opt stack 23
  4389                           
  4390                           ;I2C.c: 49: I2C_Master_Wait();
  4391                           
  4392                           ; BSR set to: 0
  4393                           ;incstack = 0
  4394  001834  ECF4  F00B         	call	_I2C_Master_Wait	;wreg free
  4395                           
  4396                           ;I2C.c: 50: SSPBUF = d;
  4397  001838  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  4398  00183C  0012               	return		;funcret
  4399  00183E                     __end_of_I2C_Master_Write:
  4400                           	opt stack 0
  4401                           tblptru	equ	0xFF8
  4402                           tblptrh	equ	0xFF7
  4403                           tblptrl	equ	0xFF6
  4404                           tablat	equ	0xFF5
  4405                           prodh	equ	0xFF4
  4406                           prodl	equ	0xFF3
  4407                           intcon	equ	0xFF2
  4408                           intcon3	equ	0xFF0
  4409                           postinc0	equ	0xFEE
  4410                           wreg	equ	0xFE8
  4411                           indf2	equ	0xFDF
  4412                           postinc2	equ	0xFDE
  4413                           postdec2	equ	0xFDD
  4414                           fsr2h	equ	0xFDA
  4415                           fsr2l	equ	0xFD9
  4416                           status	equ	0xFD8
  4417                           
  4418 ;; *************** function _I2C_Master_Stop *****************
  4419 ;; Defined at:
  4420 ;;		line 41 in file "I2C.c"
  4421 ;; Parameters:    Size  Location     Type
  4422 ;;		None
  4423 ;; Auto vars:     Size  Location     Type
  4424 ;;		None
  4425 ;; Return value:  Size  Location     Type
  4426 ;;                  1    wreg      void 
  4427 ;; Registers used:
  4428 ;;		wreg, status,2, status,0, cstack
  4429 ;; Tracked objects:
  4430 ;;		On entry : 0/0
  4431 ;;		On exit  : 0/0
  4432 ;;		Unchanged: 0/0
  4433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4438 ;;Total ram usage:        0 bytes
  4439 ;; Hardware stack levels used:    1
  4440 ;; Hardware stack levels required when called:    6
  4441 ;; This function calls:
  4442 ;;		_I2C_Master_Wait
  4443 ;; This function is called by:
  4444 ;;		_set_time
  4445 ;;		_operation
  4446 ;; This function uses a non-reentrant model
  4447 ;;
  4448                           
  4449                           	psect	text17
  4450  00183E                     __ptext17:
  4451                           	opt stack 0
  4452  00183E                     _I2C_Master_Stop:
  4453                           	opt stack 23
  4454                           
  4455                           ;I2C.c: 43: I2C_Master_Wait();
  4456                           
  4457                           ;incstack = 0
  4458  00183E  ECF4  F00B         	call	_I2C_Master_Wait	;wreg free
  4459                           
  4460                           ;I2C.c: 44: PEN = 1;
  4461  001842  84C5               	bsf	4037,2,c	;volatile
  4462  001844  0012               	return		;funcret
  4463  001846                     __end_of_I2C_Master_Stop:
  4464                           	opt stack 0
  4465                           tblptru	equ	0xFF8
  4466                           tblptrh	equ	0xFF7
  4467                           tblptrl	equ	0xFF6
  4468                           tablat	equ	0xFF5
  4469                           prodh	equ	0xFF4
  4470                           prodl	equ	0xFF3
  4471                           intcon	equ	0xFF2
  4472                           intcon3	equ	0xFF0
  4473                           postinc0	equ	0xFEE
  4474                           wreg	equ	0xFE8
  4475                           indf2	equ	0xFDF
  4476                           postinc2	equ	0xFDE
  4477                           postdec2	equ	0xFDD
  4478                           fsr2h	equ	0xFDA
  4479                           fsr2l	equ	0xFD9
  4480                           status	equ	0xFD8
  4481                           
  4482 ;; *************** function _I2C_Master_Start *****************
  4483 ;; Defined at:
  4484 ;;		line 29 in file "I2C.c"
  4485 ;; Parameters:    Size  Location     Type
  4486 ;;		None
  4487 ;; Auto vars:     Size  Location     Type
  4488 ;;		None
  4489 ;; Return value:  Size  Location     Type
  4490 ;;                  1    wreg      void 
  4491 ;; Registers used:
  4492 ;;		wreg, status,2, status,0, cstack
  4493 ;; Tracked objects:
  4494 ;;		On entry : 0/0
  4495 ;;		On exit  : 0/0
  4496 ;;		Unchanged: 0/0
  4497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4502 ;;Total ram usage:        0 bytes
  4503 ;; Hardware stack levels used:    1
  4504 ;; Hardware stack levels required when called:    6
  4505 ;; This function calls:
  4506 ;;		_I2C_Master_Wait
  4507 ;; This function is called by:
  4508 ;;		_set_time
  4509 ;;		_operation
  4510 ;; This function uses a non-reentrant model
  4511 ;;
  4512                           
  4513                           	psect	text18
  4514  001846                     __ptext18:
  4515                           	opt stack 0
  4516  001846                     _I2C_Master_Start:
  4517                           	opt stack 23
  4518                           
  4519                           ;I2C.c: 31: I2C_Master_Wait();
  4520                           
  4521                           ;incstack = 0
  4522  001846  ECF4  F00B         	call	_I2C_Master_Wait	;wreg free
  4523                           
  4524                           ;I2C.c: 32: SEN = 1;
  4525  00184A  80C5               	bsf	4037,0,c	;volatile
  4526  00184C  0012               	return		;funcret
  4527  00184E                     __end_of_I2C_Master_Start:
  4528                           	opt stack 0
  4529                           tblptru	equ	0xFF8
  4530                           tblptrh	equ	0xFF7
  4531                           tblptrl	equ	0xFF6
  4532                           tablat	equ	0xFF5
  4533                           prodh	equ	0xFF4
  4534                           prodl	equ	0xFF3
  4535                           intcon	equ	0xFF2
  4536                           intcon3	equ	0xFF0
  4537                           postinc0	equ	0xFEE
  4538                           wreg	equ	0xFE8
  4539                           indf2	equ	0xFDF
  4540                           postinc2	equ	0xFDE
  4541                           postdec2	equ	0xFDD
  4542                           fsr2h	equ	0xFDA
  4543                           fsr2l	equ	0xFD9
  4544                           status	equ	0xFD8
  4545                           
  4546 ;; *************** function _I2C_Master_Read *****************
  4547 ;; Defined at:
  4548 ;;		line 53 in file "I2C.c"
  4549 ;; Parameters:    Size  Location     Type
  4550 ;;  a               1    wreg     unsigned char 
  4551 ;; Auto vars:     Size  Location     Type
  4552 ;;  a               1    1[BANK0 ] unsigned char 
  4553 ;;  temp            1    2[BANK0 ] unsigned char 
  4554 ;; Return value:  Size  Location     Type
  4555 ;;                  1    wreg      unsigned char 
  4556 ;; Registers used:
  4557 ;;		wreg, status,2, status,0, cstack
  4558 ;; Tracked objects:
  4559 ;;		On entry : 0/0
  4560 ;;		On exit  : 0/0
  4561 ;;		Unchanged: 0/0
  4562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4564 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4566 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4567 ;;Total ram usage:        2 bytes
  4568 ;; Hardware stack levels used:    1
  4569 ;; Hardware stack levels required when called:    6
  4570 ;; This function calls:
  4571 ;;		_I2C_Master_Wait
  4572 ;; This function is called by:
  4573 ;;		_operation
  4574 ;; This function uses a non-reentrant model
  4575 ;;
  4576                           
  4577                           	psect	text19
  4578  001712                     __ptext19:
  4579                           	opt stack 0
  4580  001712                     _I2C_Master_Read:
  4581                           	opt stack 23
  4582                           
  4583                           ;incstack = 0
  4584                           ;I2C_Master_Read@a stored from wreg
  4585  001712  0100               	movlb	0	; () banked
  4586  001714  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  4587                           
  4588                           ;I2C.c: 55: unsigned char temp;
  4589                           ;I2C.c: 56: I2C_Master_Wait();
  4590  001716  ECF4  F00B         	call	_I2C_Master_Wait	;wreg free
  4591                           
  4592                           ;I2C.c: 57: RCEN = 1;
  4593  00171A  86C5               	bsf	4037,3,c	;volatile
  4594                           
  4595                           ;I2C.c: 58: I2C_Master_Wait();
  4596  00171C  ECF4  F00B         	call	_I2C_Master_Wait	;wreg free
  4597                           
  4598                           ;I2C.c: 59: temp = SSPBUF;
  4599  001720  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  4600                           
  4601                           ;I2C.c: 60: I2C_Master_Wait();
  4602  001724  ECF4  F00B         	call	_I2C_Master_Wait	;wreg free
  4603                           
  4604                           ;I2C.c: 61: ACKDT = (a)?0:1;
  4605  001728  0100               	movlb	0	; () banked
  4606  00172A  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  4607  00172C  0100               	movlb	0	; () banked
  4608  00172E  A4D8               	btfss	status,2,c
  4609  001730  D002               	goto	u3310
  4610  001732  8AC5               	bsf	4037,5,c	;volatile
  4611  001734  D001               	goto	l3429
  4612  001736                     u3310:
  4613  001736  9AC5               	bcf	4037,5,c	;volatile
  4614  001738                     l3429:
  4615                           
  4616                           ;I2C.c: 62: ACKEN = 1;
  4617  001738  88C5               	bsf	4037,4,c	;volatile
  4618                           
  4619                           ;I2C.c: 63: return temp;
  4620  00173A  0100               	movlb	0	; () banked
  4621  00173C  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  4622  00173E  0012               	return	
  4623  001740                     __end_of_I2C_Master_Read:
  4624                           	opt stack 0
  4625                           tblptru	equ	0xFF8
  4626                           tblptrh	equ	0xFF7
  4627                           tblptrl	equ	0xFF6
  4628                           tablat	equ	0xFF5
  4629                           prodh	equ	0xFF4
  4630                           prodl	equ	0xFF3
  4631                           intcon	equ	0xFF2
  4632                           intcon3	equ	0xFF0
  4633                           postinc0	equ	0xFEE
  4634                           wreg	equ	0xFE8
  4635                           indf2	equ	0xFDF
  4636                           postinc2	equ	0xFDE
  4637                           postdec2	equ	0xFDD
  4638                           fsr2h	equ	0xFDA
  4639                           fsr2l	equ	0xFD9
  4640                           status	equ	0xFD8
  4641                           
  4642 ;; *************** function _I2C_Master_Wait *****************
  4643 ;; Defined at:
  4644 ;;		line 24 in file "I2C.c"
  4645 ;; Parameters:    Size  Location     Type
  4646 ;;		None
  4647 ;; Auto vars:     Size  Location     Type
  4648 ;;		None
  4649 ;; Return value:  Size  Location     Type
  4650 ;;                  1    wreg      void 
  4651 ;; Registers used:
  4652 ;;		wreg, status,2, status,0
  4653 ;; Tracked objects:
  4654 ;;		On entry : 0/0
  4655 ;;		On exit  : 0/0
  4656 ;;		Unchanged: 0/0
  4657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4660 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4661 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4662 ;;Total ram usage:        1 bytes
  4663 ;; Hardware stack levels used:    1
  4664 ;; Hardware stack levels required when called:    5
  4665 ;; This function calls:
  4666 ;;		Nothing
  4667 ;; This function is called by:
  4668 ;;		_I2C_Master_Start
  4669 ;;		_I2C_Master_Stop
  4670 ;;		_I2C_Master_Write
  4671 ;;		_I2C_Master_Read
  4672 ;;		_I2C_Master_RepeatedStart
  4673 ;; This function uses a non-reentrant model
  4674 ;;
  4675                           
  4676                           	psect	text20
  4677  0017E8                     __ptext20:
  4678                           	opt stack 0
  4679  0017E8                     _I2C_Master_Wait:
  4680                           	opt stack 23
  4681  0017E8                     l34:
  4682  0017E8  B4C7               	btfsc	4039,2,c	;volatile
  4683  0017EA  D7FE               	goto	l34
  4684  0017EC  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  4685  0017F0  0E1F               	movlw	31
  4686  0017F2  0100               	movlb	0	; () banked
  4687  0017F4  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  4688  0017F6  B4D8               	btfsc	status,2,c
  4689  0017F8  0012               	return	
  4690  0017FA  D7F6               	goto	l34
  4691  0017FC                     __end_of_I2C_Master_Wait:
  4692                           	opt stack 0
  4693                           tblptru	equ	0xFF8
  4694                           tblptrh	equ	0xFF7
  4695                           tblptrl	equ	0xFF6
  4696                           tablat	equ	0xFF5
  4697                           prodh	equ	0xFF4
  4698                           prodl	equ	0xFF3
  4699                           intcon	equ	0xFF2
  4700                           intcon3	equ	0xFF0
  4701                           postinc0	equ	0xFEE
  4702                           wreg	equ	0xFE8
  4703                           indf2	equ	0xFDF
  4704                           postinc2	equ	0xFDE
  4705                           postdec2	equ	0xFDD
  4706                           fsr2h	equ	0xFDA
  4707                           fsr2l	equ	0xFD9
  4708                           status	equ	0xFD8
  4709                           
  4710 ;; *************** function _I2C_Master_Init *****************
  4711 ;; Defined at:
  4712 ;;		line 13 in file "I2C.c"
  4713 ;; Parameters:    Size  Location     Type
  4714 ;;  c               4   13[BANK0 ] const unsigned long 
  4715 ;; Auto vars:     Size  Location     Type
  4716 ;;		None
  4717 ;; Return value:  Size  Location     Type
  4718 ;;                  1    wreg      void 
  4719 ;; Registers used:
  4720 ;;		wreg, status,2, status,0, cstack
  4721 ;; Tracked objects:
  4722 ;;		On entry : 0/0
  4723 ;;		On exit  : 0/0
  4724 ;;		Unchanged: 0/0
  4725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4726 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4728 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4729 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4730 ;;Total ram usage:        8 bytes
  4731 ;; Hardware stack levels used:    1
  4732 ;; Hardware stack levels required when called:    6
  4733 ;; This function calls:
  4734 ;;		___lldiv
  4735 ;; This function is called by:
  4736 ;;		_main
  4737 ;; This function uses a non-reentrant model
  4738 ;;
  4739                           
  4740                           	psect	text21
  4741  0013F4                     __ptext21:
  4742                           	opt stack 0
  4743  0013F4                     _I2C_Master_Init:
  4744                           	opt stack 24
  4745                           
  4746                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  4747                           
  4748                           ; BSR set to: 0
  4749                           ;incstack = 0
  4750  0013F4  0E00               	movlw	0
  4751  0013F6  6EC7               	movwf	4039,c	;volatile
  4752                           
  4753                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  4754  0013F8  0E28               	movlw	40
  4755  0013FA  6EC6               	movwf	4038,c	;volatile
  4756                           
  4757                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  4758  0013FC  0E00               	movlw	0
  4759  0013FE  6EC5               	movwf	4037,c	;volatile
  4760                           
  4761                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  4762  001400  0E80               	movlw	128
  4763  001402  0100               	movlb	0	; () banked
  4764  001404  6F80               	movwf	___lldiv@dividend& (0+255),b
  4765  001406  0E96               	movlw	150
  4766  001408  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  4767  00140A  0E98               	movlw	152
  4768  00140C  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  4769  00140E  0E00               	movlw	0
  4770  001410  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  4771  001412  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4772  001416  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4773  00141A  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4774  00141E  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4775  001422  0E02               	movlw	2
  4776  001424                     u3465:
  4777  001424  90D8               	bcf	status,0,c
  4778  001426  0100               	movlb	0	; () banked
  4779  001428  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  4780  00142A  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  4781  00142C  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  4782  00142E  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  4783  001430  2EE8               	decfsz	wreg,f,c
  4784  001432  D7F8               	goto	u3465
  4785  001434  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  4786  001438  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4787  00143C  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4788  001440  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4789  001444  ECCB  F007         	call	___lldiv	;wreg free
  4790  001448  0100               	movlb	0	; () banked
  4791  00144A  0580               	decf	?___lldiv& (0+255),w,b
  4792  00144C  6EC8               	movwf	4040,c	;volatile
  4793                           
  4794                           ; BSR set to: 0
  4795                           ;I2C.c: 20: TRISC3 = 1;
  4796  00144E  8694               	bsf	3988,3,c	;volatile
  4797                           
  4798                           ; BSR set to: 0
  4799                           ;I2C.c: 21: TRISC4 = 1;
  4800  001450  8894               	bsf	3988,4,c	;volatile
  4801                           
  4802                           ; BSR set to: 0
  4803  001452  0012               	return		;funcret
  4804  001454                     __end_of_I2C_Master_Init:
  4805                           	opt stack 0
  4806                           tblptru	equ	0xFF8
  4807                           tblptrh	equ	0xFF7
  4808                           tblptrl	equ	0xFF6
  4809                           tablat	equ	0xFF5
  4810                           prodh	equ	0xFF4
  4811                           prodl	equ	0xFF3
  4812                           intcon	equ	0xFF2
  4813                           intcon3	equ	0xFF0
  4814                           postinc0	equ	0xFEE
  4815                           wreg	equ	0xFE8
  4816                           indf2	equ	0xFDF
  4817                           postinc2	equ	0xFDE
  4818                           postdec2	equ	0xFDD
  4819                           fsr2h	equ	0xFDA
  4820                           fsr2l	equ	0xFD9
  4821                           status	equ	0xFD8
  4822                           
  4823 ;; *************** function ___lldiv *****************
  4824 ;; Defined at:
  4825 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lldiv.c"
  4826 ;; Parameters:    Size  Location     Type
  4827 ;;  dividend        4    0[BANK0 ] unsigned long 
  4828 ;;  divisor         4    4[BANK0 ] unsigned long 
  4829 ;; Auto vars:     Size  Location     Type
  4830 ;;  quotient        4    8[BANK0 ] unsigned long 
  4831 ;;  counter         1   12[BANK0 ] unsigned char 
  4832 ;; Return value:  Size  Location     Type
  4833 ;;                  4    0[BANK0 ] unsigned long 
  4834 ;; Registers used:
  4835 ;;		wreg, status,2, status,0
  4836 ;; Tracked objects:
  4837 ;;		On entry : 0/0
  4838 ;;		On exit  : 0/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4841 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4842 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4844 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4845 ;;Total ram usage:       13 bytes
  4846 ;; Hardware stack levels used:    1
  4847 ;; Hardware stack levels required when called:    5
  4848 ;; This function calls:
  4849 ;;		Nothing
  4850 ;; This function is called by:
  4851 ;;		_I2C_Master_Init
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855                           	psect	text22
  4856  000F96                     __ptext22:
  4857                           	opt stack 0
  4858  000F96                     ___lldiv:
  4859                           	opt stack 24
  4860                           
  4861                           ; BSR set to: 0
  4862                           ;incstack = 0
  4863  000F96  0E00               	movlw	0
  4864  000F98  0100               	movlb	0	; () banked
  4865  000F9A  6F88               	movwf	___lldiv@quotient& (0+255),b
  4866  000F9C  0E00               	movlw	0
  4867  000F9E  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  4868  000FA0  0E00               	movlw	0
  4869  000FA2  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  4870  000FA4  0E00               	movlw	0
  4871  000FA6  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  4872                           
  4873                           ; BSR set to: 0
  4874  000FA8  0100               	movlb	0	; () banked
  4875  000FAA  5184               	movf	___lldiv@divisor& (0+255),w,b
  4876  000FAC  0100               	movlb	0	; () banked
  4877  000FAE  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  4878  000FB0  0100               	movlb	0	; () banked
  4879  000FB2  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  4880  000FB4  0100               	movlb	0	; () banked
  4881  000FB6  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  4882  000FB8  B4D8               	btfsc	status,2,c
  4883  000FBA  D042               	goto	l739
  4884                           
  4885                           ; BSR set to: 0
  4886  000FBC  0E01               	movlw	1
  4887  000FBE  0100               	movlb	0	; () banked
  4888  000FC0  6F8C               	movwf	___lldiv@counter& (0+255),b
  4889  000FC2  D008               	goto	l3515
  4890  000FC4                     l3513:
  4891                           
  4892                           ; BSR set to: 0
  4893  000FC4  0100               	movlb	0	; () banked
  4894  000FC6  90D8               	bcf	status,0,c
  4895  000FC8  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  4896  000FCA  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  4897  000FCC  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  4898  000FCE  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  4899  000FD0  0100               	movlb	0	; () banked
  4900  000FD2  2B8C               	incf	___lldiv@counter& (0+255),f,b
  4901  000FD4                     l3515:
  4902                           
  4903                           ; BSR set to: 0
  4904  000FD4  0100               	movlb	0	; () banked
  4905  000FD6  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  4906  000FD8  D7F5               	goto	l3513
  4907  000FDA                     l3517:
  4908                           
  4909                           ; BSR set to: 0
  4910  000FDA  0100               	movlb	0	; () banked
  4911  000FDC  90D8               	bcf	status,0,c
  4912  000FDE  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  4913  000FE0  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  4914  000FE2  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  4915  000FE4  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  4916                           
  4917                           ; BSR set to: 0
  4918  000FE6  0100               	movlb	0	; () banked
  4919  000FE8  5184               	movf	___lldiv@divisor& (0+255),w,b
  4920  000FEA  0100               	movlb	0	; () banked
  4921  000FEC  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  4922  000FEE  0100               	movlb	0	; () banked
  4923  000FF0  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4924  000FF2  0100               	movlb	0	; () banked
  4925  000FF4  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  4926  000FF6  0100               	movlb	0	; () banked
  4927  000FF8  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4928  000FFA  0100               	movlb	0	; () banked
  4929  000FFC  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  4930  000FFE  0100               	movlb	0	; () banked
  4931  001000  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4932  001002  0100               	movlb	0	; () banked
  4933  001004  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  4934  001006  A0D8               	btfss	status,0,c
  4935  001008  D012               	goto	l3525
  4936                           
  4937                           ; BSR set to: 0
  4938  00100A  0100               	movlb	0	; () banked
  4939  00100C  5184               	movf	___lldiv@divisor& (0+255),w,b
  4940  00100E  0100               	movlb	0	; () banked
  4941  001010  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  4942  001012  0100               	movlb	0	; () banked
  4943  001014  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4944  001016  0100               	movlb	0	; () banked
  4945  001018  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  4946  00101A  0100               	movlb	0	; () banked
  4947  00101C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4948  00101E  0100               	movlb	0	; () banked
  4949  001020  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  4950  001022  0100               	movlb	0	; () banked
  4951  001024  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4952  001026  0100               	movlb	0	; () banked
  4953  001028  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  4954                           
  4955                           ; BSR set to: 0
  4956  00102A  0100               	movlb	0	; () banked
  4957  00102C  8188               	bsf	___lldiv@quotient& (0+255),0,b
  4958  00102E                     l3525:
  4959                           
  4960                           ; BSR set to: 0
  4961  00102E  0100               	movlb	0	; () banked
  4962  001030  90D8               	bcf	status,0,c
  4963  001032  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  4964  001034  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  4965  001036  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  4966  001038  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  4967                           
  4968                           ; BSR set to: 0
  4969  00103A  0100               	movlb	0	; () banked
  4970  00103C  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  4971  00103E  D7CD               	goto	l3517
  4972  001040                     l739:
  4973                           
  4974                           ; BSR set to: 0
  4975  001040  C088  F080         	movff	___lldiv@quotient,?___lldiv
  4976  001044  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  4977  001048  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  4978  00104C  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  4979                           
  4980                           ; BSR set to: 0
  4981  001050  0012               	return		;funcret
  4982  001052                     __end_of___lldiv:
  4983                           	opt stack 0
  4984                           tblptru	equ	0xFF8
  4985                           tblptrh	equ	0xFF7
  4986                           tblptrl	equ	0xFF6
  4987                           tablat	equ	0xFF5
  4988                           prodh	equ	0xFF4
  4989                           prodl	equ	0xFF3
  4990                           intcon	equ	0xFF2
  4991                           intcon3	equ	0xFF0
  4992                           postinc0	equ	0xFEE
  4993                           wreg	equ	0xFE8
  4994                           indf2	equ	0xFDF
  4995                           postinc2	equ	0xFDE
  4996                           postdec2	equ	0xFDD
  4997                           fsr2h	equ	0xFDA
  4998                           fsr2l	equ	0xFD9
  4999                           status	equ	0xFD8
  5000                           
  5001 ;; *************** function _keypressed *****************
  5002 ;; Defined at:
  5003 ;;		line 23 in file "Interrupt_ISR.c"
  5004 ;; Parameters:    Size  Location     Type
  5005 ;;		None
  5006 ;; Auto vars:     Size  Location     Type
  5007 ;;  i               1   60[COMRAM] unsigned char 
  5008 ;;  i               1   59[COMRAM] unsigned char 
  5009 ;;  i               1   58[COMRAM] unsigned char 
  5010 ;;  i               1   57[COMRAM] unsigned char 
  5011 ;;  i               1   56[COMRAM] unsigned char 
  5012 ;;  i               1   55[COMRAM] unsigned char 
  5013 ;;  i               1   54[COMRAM] unsigned char 
  5014 ;;  i               1   53[COMRAM] unsigned char 
  5015 ;;  i               1   52[COMRAM] unsigned char 
  5016 ;;  i               1   51[COMRAM] unsigned char 
  5017 ;;  i               1   50[COMRAM] unsigned char 
  5018 ;;  i               1   49[COMRAM] unsigned char 
  5019 ;;  keypress_tem    1   61[COMRAM] unsigned char 
  5020 ;;  keypress        1   48[COMRAM] unsigned char 
  5021 ;; Return value:  Size  Location     Type
  5022 ;;                  1    wreg      void 
  5023 ;; Registers used:
  5024 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5025 ;; Tracked objects:
  5026 ;;		On entry : 0/0
  5027 ;;		On exit  : 0/0
  5028 ;;		Unchanged: 0/0
  5029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5031 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5032 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5033 ;;      Totals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5034 ;;Total ram usage:       30 bytes
  5035 ;; Hardware stack levels used:    1
  5036 ;; Hardware stack levels required when called:    4
  5037 ;; This function calls:
  5038 ;;		_op_time
  5039 ;;		_pop_results
  5040 ;;		_tin_results
  5041 ;;		_tot_sorted
  5042 ;;		i2_initLCD
  5043 ;;		i2_lcdInst
  5044 ;;		i2_printf
  5045 ;; This function is called by:
  5046 ;;		Interrupt level 2
  5047 ;; This function uses a non-reentrant model
  5048 ;;
  5049                           
  5050                           	psect	intcode
  5051  000008                     __pintcode:
  5052                           	opt stack 0
  5053  000008                     _keypressed:
  5054                           	opt stack 21
  5055                           
  5056                           ; BSR set to: 0
  5057                           ;incstack = 0
  5058  000008  824B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5059  00000A  ED51  F005         	call	int_func,f	;refresh shadow registers
  5060                           tblptru	equ	0xFF8
  5061                           tblptrh	equ	0xFF7
  5062                           tblptrl	equ	0xFF6
  5063                           tablat	equ	0xFF5
  5064                           prodh	equ	0xFF4
  5065                           prodl	equ	0xFF3
  5066                           intcon	equ	0xFF2
  5067                           intcon3	equ	0xFF0
  5068                           postinc0	equ	0xFEE
  5069                           wreg	equ	0xFE8
  5070                           indf2	equ	0xFDF
  5071                           postinc2	equ	0xFDE
  5072                           postdec2	equ	0xFDD
  5073                           fsr2h	equ	0xFDA
  5074                           fsr2l	equ	0xFD9
  5075                           status	equ	0xFD8
  5076                           
  5077                           	psect	intcode_body
  5078  000AA2                     __pintcode_body:
  5079                           	opt stack 21
  5080  000AA2                     int_func:
  5081                           	opt stack 21
  5082  000AA2  0006               	pop		; remove dummy address from shadow register refresh
  5083  000AA4  CFFA F023          	movff	pclath,??_keypressed+2
  5084  000AA8  CFFB F024          	movff	pclatu,??_keypressed+3
  5085  000AAC  CFE9 F025          	movff	fsr0l,??_keypressed+4
  5086  000AB0  CFEA F026          	movff	fsr0h,??_keypressed+5
  5087  000AB4  CFE1 F027          	movff	fsr1l,??_keypressed+6
  5088  000AB8  CFE2 F028          	movff	fsr1h,??_keypressed+7
  5089  000ABC  CFD9 F029          	movff	fsr2l,??_keypressed+8
  5090  000AC0  CFDA F02A          	movff	fsr2h,??_keypressed+9
  5091  000AC4  CFF3 F02B          	movff	prodl,??_keypressed+10
  5092  000AC8  CFF4 F02C          	movff	prodh,??_keypressed+11
  5093  000ACC  CFF6 F02D          	movff	tblptrl,??_keypressed+12
  5094  000AD0  CFF7 F02E          	movff	tblptrh,??_keypressed+13
  5095  000AD4  CFF8 F02F          	movff	tblptru,??_keypressed+14
  5096  000AD8  CFF5 F030          	movff	tablat,??_keypressed+15
  5097                           
  5098                           ;Interrupt_ISR.c: 26: if(INT1IF){
  5099  000ADC  A0F0               	btfss	intcon3,0,c	;volatile
  5100  000ADE  D126               	goto	i2l116
  5101                           
  5102                           ;Interrupt_ISR.c: 27: lcdInst(0b11000000);;
  5103  000AE0  0EC0               	movlw	192
  5104  000AE2  EC14  F00C         	call	i2_lcdInst
  5105                           
  5106                           ;Interrupt_ISR.c: 28: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5107  000AE6  3881               	swapf	3969,w,c	;volatile
  5108  000AE8  0B0F               	andlw	15
  5109  000AEA  0B0F               	andlw	15
  5110  000AEC  6E31               	movwf	keypressed@keypress,c
  5111                           
  5112                           ;Interrupt_ISR.c: 30: unsigned char keypress_temp = keys[keypress];
  5113  000AEE  5031               	movf	keypressed@keypress,w,c
  5114  000AF0  0D01               	mullw	1
  5115  000AF2  0EE1               	movlw	low _keys
  5116  000AF4  24F3               	addwf	prodl,w,c
  5117  000AF6  6EF6               	movwf	tblptrl,c
  5118  000AF8  0EFE               	movlw	high _keys
  5119  000AFA  20F4               	addwfc	prodh,w,c
  5120  000AFC  6EF7               	movwf	tblptrh,c
  5121  000AFE                     	if	0	;There are less than 3 active tblptr bytes
  5122  000AFE                     	endif
  5123  000AFE  0008               	tblrd		*
  5124  000B00  CFF5 F03E          	movff	tablat,keypressed@keypress_temp
  5125                           
  5126                           ;Interrupt_ISR.c: 31: if (keypress_temp == 0b01000001){
  5127  000B04  0E41               	movlw	65
  5128  000B06  183E               	xorwf	keypressed@keypress_temp,w,c
  5129  000B08  A4D8               	btfss	status,2,c
  5130  000B0A  D03E               	goto	i2l3021
  5131                           
  5132                           ;Interrupt_ISR.c: 32: tot_sorted();
  5133  000B0C  ECE7  F00B         	call	_tot_sorted	;wreg free
  5134                           
  5135                           ;Interrupt_ISR.c: 35: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  5136  000B10  0E00               	movlw	0
  5137  000B12  6E32               	movwf	keypressed@i,c
  5138  000B14                     i2l2993:
  5139  000B14  0E09               	movlw	9
  5140  000B16  6432               	cpfsgt	keypressed@i,c
  5141  000B18  D001               	goto	i2l2997
  5142  000B1A  D00E               	goto	i2l3001
  5143  000B1C                     i2l2997:
  5144  000B1C  0E02               	movlw	2
  5145  000B1E  6E22               	movwf	(??_keypressed+1)& (0+255),c
  5146  000B20  0E3F               	movlw	63
  5147  000B22  6E21               	movwf	??_keypressed& (0+255),c
  5148  000B24  0E2B               	movlw	43
  5149  000B26                     i2u383_47:
  5150  000B26  2EE8               	decfsz	wreg,f,c
  5151  000B28  D7FE               	bra	i2u383_47
  5152  000B2A  2E21               	decfsz	??_keypressed& (0+255),f,c
  5153  000B2C  D7FC               	bra	i2u383_47
  5154  000B2E  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  5155  000B30  D7FA               	bra	i2u383_47
  5156  000B32  F000               	nop	
  5157  000B34  2A32               	incf	keypressed@i,f,c
  5158  000B36  D7EE               	goto	i2l2993
  5159  000B38                     i2l3001:
  5160                           
  5161                           ;Interrupt_ISR.c: 36: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  5162  000B38  0E00               	movlw	0
  5163  000B3A  6E33               	movwf	keypressed@i_94,c
  5164  000B3C                     i2l3003:
  5165  000B3C  0E09               	movlw	9
  5166  000B3E  6433               	cpfsgt	keypressed@i_94,c
  5167  000B40  D001               	goto	i2l3007
  5168  000B42  D00E               	goto	i2l3011
  5169  000B44                     i2l3007:
  5170  000B44  0E02               	movlw	2
  5171  000B46  6E22               	movwf	(??_keypressed+1)& (0+255),c
  5172  000B48  0E3F               	movlw	63
  5173  000B4A  6E21               	movwf	??_keypressed& (0+255),c
  5174  000B4C  0E2B               	movlw	43
  5175  000B4E                     i2u384_47:
  5176  000B4E  2EE8               	decfsz	wreg,f,c
  5177  000B50  D7FE               	bra	i2u384_47
  5178  000B52  2E21               	decfsz	??_keypressed& (0+255),f,c
  5179  000B54  D7FC               	bra	i2u384_47
  5180  000B56  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  5181  000B58  D7FA               	bra	i2u384_47
  5182  000B5A  F000               	nop	
  5183  000B5C  2A33               	incf	keypressed@i_94,f,c
  5184  000B5E  D7EE               	goto	i2l3003
  5185  000B60                     i2l3011:
  5186                           
  5187                           ;Interrupt_ISR.c: 37: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  5188  000B60  0E00               	movlw	0
  5189  000B62  6E34               	movwf	keypressed@i_95,c
  5190  000B64                     i2l3013:
  5191  000B64  0E09               	movlw	9
  5192  000B66  6434               	cpfsgt	keypressed@i_95,c
  5193  000B68  D001               	goto	i2l3017
  5194  000B6A  D0DC               	goto	i2l3127
  5195  000B6C                     i2l3017:
  5196  000B6C  0E02               	movlw	2
  5197  000B6E  6E22               	movwf	(??_keypressed+1)& (0+255),c
  5198  000B70  0E3F               	movlw	63
  5199  000B72  6E21               	movwf	??_keypressed& (0+255),c
  5200  000B74  0E2B               	movlw	43
  5201  000B76                     i2u385_47:
  5202  000B76  2EE8               	decfsz	wreg,f,c
  5203  000B78  D7FE               	bra	i2u385_47
  5204  000B7A  2E21               	decfsz	??_keypressed& (0+255),f,c
  5205  000B7C  D7FC               	bra	i2u385_47
  5206  000B7E  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  5207  000B80  D7FA               	bra	i2u385_47
  5208  000B82  F000               	nop	
  5209  000B84  2A34               	incf	keypressed@i_95,f,c
  5210  000B86  D7EE               	goto	i2l3013
  5211  000B88                     i2l3021:
  5212                           
  5213                           ;Interrupt_ISR.c: 39: else if(keypress_temp == 0b01000010){
  5214  000B88  0E42               	movlw	66
  5215  000B8A  183E               	xorwf	keypressed@keypress_temp,w,c
  5216  000B8C  A4D8               	btfss	status,2,c
  5217  000B8E  D03E               	goto	i2l3055
  5218                           
  5219                           ;Interrupt_ISR.c: 40: pop_results();
  5220  000B90  EC6F  F00B         	call	_pop_results	;wreg free
  5221                           
  5222                           ;Interrupt_ISR.c: 45: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  5223  000B94  0E00               	movlw	0
  5224  000B96  6E35               	movwf	keypressed@i_96,c
  5225  000B98                     i2l3027:
  5226  000B98  0E09               	movlw	9
  5227  000B9A  6435               	cpfsgt	keypressed@i_96,c
  5228  000B9C  D001               	goto	i2l3031
  5229  000B9E  D00E               	goto	i2l3035
  5230  000BA0                     i2l3031:
  5231  000BA0  0E02               	movlw	2
  5232  000BA2  6E22               	movwf	(??_keypressed+1)& (0+255),c
  5233  000BA4  0E3F               	movlw	63
  5234  000BA6  6E21               	movwf	??_keypressed& (0+255),c
  5235  000BA8  0E2B               	movlw	43
  5236  000BAA                     i2u386_47:
  5237  000BAA  2EE8               	decfsz	wreg,f,c
  5238  000BAC  D7FE               	bra	i2u386_47
  5239  000BAE  2E21               	decfsz	??_keypressed& (0+255),f,c
  5240  000BB0  D7FC               	bra	i2u386_47
  5241  000BB2  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  5242  000BB4  D7FA               	bra	i2u386_47
  5243  000BB6  F000               	nop	
  5244  000BB8  2A35               	incf	keypressed@i_96,f,c
  5245  000BBA  D7EE               	goto	i2l3027
  5246  000BBC                     i2l3035:
  5247                           
  5248                           ;Interrupt_ISR.c: 46: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  5249  000BBC  0E00               	movlw	0
  5250  000BBE  6E36               	movwf	keypressed@i_97,c
  5251  000BC0                     i2l3037:
  5252  000BC0  0E09               	movlw	9
  5253  000BC2  6436               	cpfsgt	keypressed@i_97,c
  5254  000BC4  D001               	goto	i2l3041
  5255  000BC6  D00E               	goto	i2l3045
  5256  000BC8                     i2l3041:
  5257  000BC8  0E02               	movlw	2
  5258  000BCA  6E22               	movwf	(??_keypressed+1)& (0+255),c
  5259  000BCC  0E3F               	movlw	63
  5260  000BCE  6E21               	movwf	??_keypressed& (0+255),c
  5261  000BD0  0E2B               	movlw	43
  5262  000BD2                     i2u387_47:
  5263  000BD2  2EE8               	decfsz	wreg,f,c
  5264  000BD4  D7FE               	bra	i2u387_47
  5265  000BD6  2E21               	decfsz	??_keypressed& (0+255),f,c
  5266  000BD8  D7FC               	bra	i2u387_47
  5267  000BDA  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  5268  000BDC  D7FA               	bra	i2u387_47
  5269  000BDE  F000               	nop	
  5270  000BE0  2A36               	incf	keypressed@i_97,f,c
  5271  000BE2  D7EE               	goto	i2l3037
  5272  000BE4                     i2l3045:
  5273                           
  5274                           ;Interrupt_ISR.c: 47: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  5275  000BE4  0E00               	movlw	0
  5276  000BE6  6E37               	movwf	keypressed@i_98,c
  5277  000BE8                     i2l3047:
  5278  000BE8  0E09               	movlw	9
  5279  000BEA  6437               	cpfsgt	keypressed@i_98,c
  5280  000BEC  D001               	goto	i2l3051
  5281  000BEE  D09A               	goto	i2l3127
  5282  000BF0                     i2l3051:
  5283  000BF0  0E02               	movlw	2
  5284  000BF2  6E22               	movwf	(??_keypressed+1)& (0+255),c
  5285  000BF4  0E3F               	movlw	63
  5286  000BF6  6E21               	movwf	??_keypressed& (0+255),c
  5287  000BF8  0E2B               	movlw	43
  5288  000BFA                     i2u388_47:
  5289  000BFA  2EE8               	decfsz	wreg,f,c
  5290  000BFC  D7FE               	bra	i2u388_47
  5291  000BFE  2E21               	decfsz	??_keypressed& (0+255),f,c
  5292  000C00  D7FC               	bra	i2u388_47
  5293  000C02  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  5294  000C04  D7FA               	bra	i2u388_47
  5295  000C06  F000               	nop	
  5296  000C08  2A37               	incf	keypressed@i_98,f,c
  5297  000C0A  D7EE               	goto	i2l3047
  5298  000C0C                     i2l3055:
  5299                           
  5300                           ;Interrupt_ISR.c: 49: else if(keypress_temp == 0b01000011){
  5301  000C0C  0E43               	movlw	67
  5302  000C0E  183E               	xorwf	keypressed@keypress_temp,w,c
  5303  000C10  A4D8               	btfss	status,2,c
  5304  000C12  D03E               	goto	i2l3089
  5305                           
  5306                           ;Interrupt_ISR.c: 50: tin_results();
  5307  000C14  EC55  F00B         	call	_tin_results	;wreg free
  5308                           
  5309                           ;Interrupt_ISR.c: 55: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  5310  000C18  0E00               	movlw	0
  5311  000C1A  6E38               	movwf	keypressed@i_99,c
  5312  000C1C                     i2l3061:
  5313  000C1C  0E09               	movlw	9
  5314  000C1E  6438               	cpfsgt	keypressed@i_99,c
  5315  000C20  D001               	goto	i2l3065
  5316  000C22  D00E               	goto	i2l3069
  5317  000C24                     i2l3065:
  5318  000C24  0E02               	movlw	2
  5319  000C26  6E22               	movwf	(??_keypressed+1)& (0+255),c
  5320  000C28  0E3F               	movlw	63
  5321  000C2A  6E21               	movwf	??_keypressed& (0+255),c
  5322  000C2C  0E2B               	movlw	43
  5323  000C2E                     i2u389_47:
  5324  000C2E  2EE8               	decfsz	wreg,f,c
  5325  000C30  D7FE               	bra	i2u389_47
  5326  000C32  2E21               	decfsz	??_keypressed& (0+255),f,c
  5327  000C34  D7FC               	bra	i2u389_47
  5328  000C36  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  5329  000C38  D7FA               	bra	i2u389_47
  5330  000C3A  F000               	nop	
  5331  000C3C  2A38               	incf	keypressed@i_99,f,c
  5332  000C3E  D7EE               	goto	i2l3061
  5333  000C40                     i2l3069:
  5334                           
  5335                           ;Interrupt_ISR.c: 56: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  5336  000C40  0E00               	movlw	0
  5337  000C42  6E39               	movwf	keypressed@i_100,c
  5338  000C44                     i2l3071:
  5339  000C44  0E09               	movlw	9
  5340  000C46  6439               	cpfsgt	keypressed@i_100,c
  5341  000C48  D001               	goto	i2l3075
  5342  000C4A  D00E               	goto	i2l3079
  5343  000C4C                     i2l3075:
  5344  000C4C  0E02               	movlw	2
  5345  000C4E  6E22               	movwf	(??_keypressed+1)& (0+255),c
  5346  000C50  0E3F               	movlw	63
  5347  000C52  6E21               	movwf	??_keypressed& (0+255),c
  5348  000C54  0E2B               	movlw	43
  5349  000C56                     i2u390_47:
  5350  000C56  2EE8               	decfsz	wreg,f,c
  5351  000C58  D7FE               	bra	i2u390_47
  5352  000C5A  2E21               	decfsz	??_keypressed& (0+255),f,c
  5353  000C5C  D7FC               	bra	i2u390_47
  5354  000C5E  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  5355  000C60  D7FA               	bra	i2u390_47
  5356  000C62  F000               	nop	
  5357  000C64  2A39               	incf	keypressed@i_100,f,c
  5358  000C66  D7EE               	goto	i2l3071
  5359  000C68                     i2l3079:
  5360                           
  5361                           ;Interrupt_ISR.c: 57: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  5362  000C68  0E00               	movlw	0
  5363  000C6A  6E3A               	movwf	keypressed@i_101,c
  5364  000C6C                     i2l3081:
  5365  000C6C  0E09               	movlw	9
  5366  000C6E  643A               	cpfsgt	keypressed@i_101,c
  5367  000C70  D001               	goto	i2l3085
  5368  000C72  D058               	goto	i2l3127
  5369  000C74                     i2l3085:
  5370  000C74  0E02               	movlw	2
  5371  000C76  6E22               	movwf	(??_keypressed+1)& (0+255),c
  5372  000C78  0E3F               	movlw	63
  5373  000C7A  6E21               	movwf	??_keypressed& (0+255),c
  5374  000C7C  0E2B               	movlw	43
  5375  000C7E                     i2u391_47:
  5376  000C7E  2EE8               	decfsz	wreg,f,c
  5377  000C80  D7FE               	bra	i2u391_47
  5378  000C82  2E21               	decfsz	??_keypressed& (0+255),f,c
  5379  000C84  D7FC               	bra	i2u391_47
  5380  000C86  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  5381  000C88  D7FA               	bra	i2u391_47
  5382  000C8A  F000               	nop	
  5383  000C8C  2A3A               	incf	keypressed@i_101,f,c
  5384  000C8E  D7EE               	goto	i2l3081
  5385  000C90                     i2l3089:
  5386                           
  5387                           ;Interrupt_ISR.c: 59: else if(keypress_temp == 0b01000100){
  5388  000C90  0E44               	movlw	68
  5389  000C92  183E               	xorwf	keypressed@keypress_temp,w,c
  5390  000C94  A4D8               	btfss	status,2,c
  5391  000C96  D03E               	goto	i2l3123
  5392                           
  5393                           ;Interrupt_ISR.c: 60: op_time();
  5394  000C98  ECD1  F00A         	call	_op_time	;wreg free
  5395                           
  5396                           ;Interrupt_ISR.c: 63: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  5397  000C9C  0E00               	movlw	0
  5398  000C9E  6E3B               	movwf	keypressed@i_102,c
  5399  000CA0                     i2l3095:
  5400  000CA0  0E09               	movlw	9
  5401  000CA2  643B               	cpfsgt	keypressed@i_102,c
  5402  000CA4  D001               	goto	i2l3099
  5403  000CA6  D00E               	goto	i2l3103
  5404  000CA8                     i2l3099:
  5405  000CA8  0E02               	movlw	2
  5406  000CAA  6E22               	movwf	(??_keypressed+1)& (0+255),c
  5407  000CAC  0E3F               	movlw	63
  5408  000CAE  6E21               	movwf	??_keypressed& (0+255),c
  5409  000CB0  0E2B               	movlw	43
  5410  000CB2                     i2u392_47:
  5411  000CB2  2EE8               	decfsz	wreg,f,c
  5412  000CB4  D7FE               	bra	i2u392_47
  5413  000CB6  2E21               	decfsz	??_keypressed& (0+255),f,c
  5414  000CB8  D7FC               	bra	i2u392_47
  5415  000CBA  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  5416  000CBC  D7FA               	bra	i2u392_47
  5417  000CBE  F000               	nop	
  5418  000CC0  2A3B               	incf	keypressed@i_102,f,c
  5419  000CC2  D7EE               	goto	i2l3095
  5420  000CC4                     i2l3103:
  5421                           
  5422                           ;Interrupt_ISR.c: 64: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  5423  000CC4  0E00               	movlw	0
  5424  000CC6  6E3C               	movwf	keypressed@i_103,c
  5425  000CC8                     i2l3105:
  5426  000CC8  0E09               	movlw	9
  5427  000CCA  643C               	cpfsgt	keypressed@i_103,c
  5428  000CCC  D001               	goto	i2l3109
  5429  000CCE  D00E               	goto	i2l3113
  5430  000CD0                     i2l3109:
  5431  000CD0  0E02               	movlw	2
  5432  000CD2  6E22               	movwf	(??_keypressed+1)& (0+255),c
  5433  000CD4  0E3F               	movlw	63
  5434  000CD6  6E21               	movwf	??_keypressed& (0+255),c
  5435  000CD8  0E2B               	movlw	43
  5436  000CDA                     i2u393_47:
  5437  000CDA  2EE8               	decfsz	wreg,f,c
  5438  000CDC  D7FE               	bra	i2u393_47
  5439  000CDE  2E21               	decfsz	??_keypressed& (0+255),f,c
  5440  000CE0  D7FC               	bra	i2u393_47
  5441  000CE2  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  5442  000CE4  D7FA               	bra	i2u393_47
  5443  000CE6  F000               	nop	
  5444  000CE8  2A3C               	incf	keypressed@i_103,f,c
  5445  000CEA  D7EE               	goto	i2l3105
  5446  000CEC                     i2l3113:
  5447                           
  5448                           ;Interrupt_ISR.c: 65: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  5449  000CEC  0E00               	movlw	0
  5450  000CEE  6E3D               	movwf	keypressed@i_104,c
  5451  000CF0                     i2l3115:
  5452  000CF0  0E09               	movlw	9
  5453  000CF2  643D               	cpfsgt	keypressed@i_104,c
  5454  000CF4  D001               	goto	i2l3119
  5455  000CF6  D016               	goto	i2l3127
  5456  000CF8                     i2l3119:
  5457  000CF8  0E02               	movlw	2
  5458  000CFA  6E22               	movwf	(??_keypressed+1)& (0+255),c
  5459  000CFC  0E3F               	movlw	63
  5460  000CFE  6E21               	movwf	??_keypressed& (0+255),c
  5461  000D00  0E2B               	movlw	43
  5462  000D02                     i2u394_47:
  5463  000D02  2EE8               	decfsz	wreg,f,c
  5464  000D04  D7FE               	bra	i2u394_47
  5465  000D06  2E21               	decfsz	??_keypressed& (0+255),f,c
  5466  000D08  D7FC               	bra	i2u394_47
  5467  000D0A  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  5468  000D0C  D7FA               	bra	i2u394_47
  5469  000D0E  F000               	nop	
  5470  000D10  2A3D               	incf	keypressed@i_104,f,c
  5471  000D12  D7EE               	goto	i2l3115
  5472  000D14                     i2l3123:
  5473                           
  5474                           ;Interrupt_ISR.c: 67: else{
  5475                           ;Interrupt_ISR.c: 68: initLCD();
  5476  000D14  ECF6  F00A         	call	i2_initLCD	;wreg free
  5477                           
  5478                           ;Interrupt_ISR.c: 69: printf(" ");
  5479  000D18  0EDF               	movlw	low (STR_8+11)
  5480  000D1A  6E0D               	movwf	i2printf@f,c
  5481  000D1C  0EFF               	movlw	high (STR_8+11)
  5482  000D1E  6E0E               	movwf	i2printf@f+1,c
  5483  000D20  ECCB  F003         	call	i2_printf	;wreg free
  5484  000D24                     i2l3127:
  5485                           
  5486                           ;Interrupt_ISR.c: 70: }
  5487                           ;Interrupt_ISR.c: 71: lcdInst(0b10000000);;
  5488  000D24  0E80               	movlw	128
  5489  000D26  EC14  F00C         	call	i2_lcdInst
  5490                           
  5491                           ;Interrupt_ISR.c: 72: INT1IF = 0;
  5492  000D2A  90F0               	bcf	intcon3,0,c	;volatile
  5493  000D2C                     i2l116:
  5494  000D2C  C030  FFF5         	movff	??_keypressed+15,tablat
  5495  000D30  C02F  FFF8         	movff	??_keypressed+14,tblptru
  5496  000D34  C02E  FFF7         	movff	??_keypressed+13,tblptrh
  5497  000D38  C02D  FFF6         	movff	??_keypressed+12,tblptrl
  5498  000D3C  C02C  FFF4         	movff	??_keypressed+11,prodh
  5499  000D40  C02B  FFF3         	movff	??_keypressed+10,prodl
  5500  000D44  C02A  FFDA         	movff	??_keypressed+9,fsr2h
  5501  000D48  C029  FFD9         	movff	??_keypressed+8,fsr2l
  5502  000D4C  C028  FFE2         	movff	??_keypressed+7,fsr1h
  5503  000D50  C027  FFE1         	movff	??_keypressed+6,fsr1l
  5504  000D54  C026  FFEA         	movff	??_keypressed+5,fsr0h
  5505  000D58  C025  FFE9         	movff	??_keypressed+4,fsr0l
  5506  000D5C  C024  FFFB         	movff	??_keypressed+3,pclatu
  5507  000D60  C023  FFFA         	movff	??_keypressed+2,pclath
  5508  000D64  924B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5509  000D66  0011               	retfie		f
  5510  000D68                     __end_of_keypressed:
  5511                           	opt stack 0
  5512                           pclatu	equ	0xFFB
  5513                           pclath	equ	0xFFA
  5514                           tblptru	equ	0xFF8
  5515                           tblptrh	equ	0xFF7
  5516                           tblptrl	equ	0xFF6
  5517                           tablat	equ	0xFF5
  5518                           prodh	equ	0xFF4
  5519                           prodl	equ	0xFF3
  5520                           intcon	equ	0xFF2
  5521                           intcon3	equ	0xFF0
  5522                           postinc0	equ	0xFEE
  5523                           fsr0h	equ	0xFEA
  5524                           fsr0l	equ	0xFE9
  5525                           wreg	equ	0xFE8
  5526                           fsr1h	equ	0xFE2
  5527                           fsr1l	equ	0xFE1
  5528                           indf2	equ	0xFDF
  5529                           postinc2	equ	0xFDE
  5530                           postdec2	equ	0xFDD
  5531                           fsr2h	equ	0xFDA
  5532                           fsr2l	equ	0xFD9
  5533                           status	equ	0xFD8
  5534                           
  5535 ;; *************** function _tot_sorted *****************
  5536 ;; Defined at:
  5537 ;;		line 96 in file "main.c"
  5538 ;; Parameters:    Size  Location     Type
  5539 ;;		None
  5540 ;; Auto vars:     Size  Location     Type
  5541 ;;		None
  5542 ;; Return value:  Size  Location     Type
  5543 ;;                  2   66[None  ] int 
  5544 ;; Registers used:
  5545 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5546 ;; Tracked objects:
  5547 ;;		On entry : 0/0
  5548 ;;		On exit  : 0/0
  5549 ;;		Unchanged: 0/0
  5550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5555 ;;Total ram usage:        0 bytes
  5556 ;; Hardware stack levels used:    1
  5557 ;; Hardware stack levels required when called:    3
  5558 ;; This function calls:
  5559 ;;		i2_initLCD
  5560 ;;		i2_printf
  5561 ;; This function is called by:
  5562 ;;		_keypressed
  5563 ;; This function uses a non-reentrant model
  5564 ;;
  5565                           
  5566                           	psect	text24
  5567  0017CE                     __ptext24:
  5568                           	opt stack 0
  5569  0017CE                     _tot_sorted:
  5570                           	opt stack 21
  5571                           
  5572                           ;main.c: 97: initLCD();
  5573                           
  5574                           ;incstack = 0
  5575  0017CE  ECF6  F00A         	call	i2_initLCD	;wreg free
  5576                           
  5577                           ;main.c: 98: printf("Total Sorted: %02x", tot);
  5578  0017D2  0E21               	movlw	low STR_2
  5579  0017D4  6E0D               	movwf	i2printf@f,c
  5580  0017D6  0EFF               	movlw	high STR_2
  5581  0017D8  6E0E               	movwf	i2printf@f+1,c
  5582  0017DA  C03F  F00F         	movff	_tot,?i2_printf+2
  5583  0017DE  C040  F010         	movff	_tot+1,?i2_printf+3
  5584  0017E2  ECCB  F003         	call	i2_printf	;wreg free
  5585  0017E6  0012               	return	
  5586  0017E8                     __end_of_tot_sorted:
  5587                           	opt stack 0
  5588                           pclatu	equ	0xFFB
  5589                           pclath	equ	0xFFA
  5590                           tblptru	equ	0xFF8
  5591                           tblptrh	equ	0xFF7
  5592                           tblptrl	equ	0xFF6
  5593                           tablat	equ	0xFF5
  5594                           prodh	equ	0xFF4
  5595                           prodl	equ	0xFF3
  5596                           intcon	equ	0xFF2
  5597                           intcon3	equ	0xFF0
  5598                           postinc0	equ	0xFEE
  5599                           fsr0h	equ	0xFEA
  5600                           fsr0l	equ	0xFE9
  5601                           wreg	equ	0xFE8
  5602                           fsr1h	equ	0xFE2
  5603                           fsr1l	equ	0xFE1
  5604                           indf2	equ	0xFDF
  5605                           postinc2	equ	0xFDE
  5606                           postdec2	equ	0xFDD
  5607                           fsr2h	equ	0xFDA
  5608                           fsr2l	equ	0xFD9
  5609                           status	equ	0xFD8
  5610                           
  5611 ;; *************** function _tin_results *****************
  5612 ;; Defined at:
  5613 ;;		line 108 in file "main.c"
  5614 ;; Parameters:    Size  Location     Type
  5615 ;;		None
  5616 ;; Auto vars:     Size  Location     Type
  5617 ;;		None
  5618 ;; Return value:  Size  Location     Type
  5619 ;;                  2   72[None  ] int 
  5620 ;; Registers used:
  5621 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5622 ;; Tracked objects:
  5623 ;;		On entry : 0/0
  5624 ;;		On exit  : 0/0
  5625 ;;		Unchanged: 0/0
  5626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5631 ;;Total ram usage:        0 bytes
  5632 ;; Hardware stack levels used:    1
  5633 ;; Hardware stack levels required when called:    3
  5634 ;; This function calls:
  5635 ;;		i2_initLCD
  5636 ;;		i2_lcdInst
  5637 ;;		i2_printf
  5638 ;; This function is called by:
  5639 ;;		_keypressed
  5640 ;; This function uses a non-reentrant model
  5641 ;;
  5642                           
  5643                           	psect	text25
  5644  0016AA                     __ptext25:
  5645                           	opt stack 0
  5646  0016AA                     _tin_results:
  5647                           	opt stack 21
  5648                           
  5649                           ;main.c: 109: initLCD();
  5650                           
  5651                           ;incstack = 0
  5652  0016AA  ECF6  F00A         	call	i2_initLCD	;wreg free
  5653                           
  5654                           ;main.c: 110: printf("With Label: %02x",tin_can);
  5655  0016AE  0E89               	movlw	low STR_4
  5656  0016B0  6E0D               	movwf	i2printf@f,c
  5657  0016B2  0EFF               	movlw	high STR_4
  5658  0016B4  6E0E               	movwf	i2printf@f+1,c
  5659  0016B6  C045  F00F         	movff	_tin_can,?i2_printf+2
  5660  0016BA  C046  F010         	movff	_tin_can+1,?i2_printf+3
  5661  0016BE  ECCB  F003         	call	i2_printf	;wreg free
  5662                           
  5663                           ;main.c: 111: lcdInst(0b11000000);;
  5664  0016C2  0EC0               	movlw	192
  5665  0016C4  EC14  F00C         	call	i2_lcdInst
  5666                           
  5667                           ;main.c: 112: printf("No Label: %02x",tin_can_label);
  5668  0016C8  0EB8               	movlw	low STR_5
  5669  0016CA  6E0D               	movwf	i2printf@f,c
  5670  0016CC  0EFF               	movlw	high STR_5
  5671  0016CE  6E0E               	movwf	i2printf@f+1,c
  5672  0016D0  C043  F00F         	movff	_tin_can_label,?i2_printf+2
  5673  0016D4  C044  F010         	movff	_tin_can_label+1,?i2_printf+3
  5674  0016D8  ECCB  F003         	call	i2_printf	;wreg free
  5675  0016DC  0012               	return	
  5676  0016DE                     __end_of_tin_results:
  5677                           	opt stack 0
  5678                           pclatu	equ	0xFFB
  5679                           pclath	equ	0xFFA
  5680                           tblptru	equ	0xFF8
  5681                           tblptrh	equ	0xFF7
  5682                           tblptrl	equ	0xFF6
  5683                           tablat	equ	0xFF5
  5684                           prodh	equ	0xFF4
  5685                           prodl	equ	0xFF3
  5686                           intcon	equ	0xFF2
  5687                           intcon3	equ	0xFF0
  5688                           postinc0	equ	0xFEE
  5689                           fsr0h	equ	0xFEA
  5690                           fsr0l	equ	0xFE9
  5691                           wreg	equ	0xFE8
  5692                           fsr1h	equ	0xFE2
  5693                           fsr1l	equ	0xFE1
  5694                           indf2	equ	0xFDF
  5695                           postinc2	equ	0xFDE
  5696                           postdec2	equ	0xFDD
  5697                           fsr2h	equ	0xFDA
  5698                           fsr2l	equ	0xFD9
  5699                           status	equ	0xFD8
  5700                           
  5701 ;; *************** function _pop_results *****************
  5702 ;; Defined at:
  5703 ;;		line 116 in file "main.c"
  5704 ;; Parameters:    Size  Location     Type
  5705 ;;		None
  5706 ;; Auto vars:     Size  Location     Type
  5707 ;;		None
  5708 ;; Return value:  Size  Location     Type
  5709 ;;                  2   70[None  ] int 
  5710 ;; Registers used:
  5711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5712 ;; Tracked objects:
  5713 ;;		On entry : 0/0
  5714 ;;		On exit  : 0/0
  5715 ;;		Unchanged: 0/0
  5716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5720 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5721 ;;Total ram usage:        0 bytes
  5722 ;; Hardware stack levels used:    1
  5723 ;; Hardware stack levels required when called:    3
  5724 ;; This function calls:
  5725 ;;		i2_initLCD
  5726 ;;		i2_lcdInst
  5727 ;;		i2_printf
  5728 ;; This function is called by:
  5729 ;;		_keypressed
  5730 ;; This function uses a non-reentrant model
  5731 ;;
  5732                           
  5733                           	psect	text26
  5734  0016DE                     __ptext26:
  5735                           	opt stack 0
  5736  0016DE                     _pop_results:
  5737                           	opt stack 21
  5738                           
  5739                           ;main.c: 117: initLCD();
  5740                           
  5741                           ;incstack = 0
  5742  0016DE  ECF6  F00A         	call	i2_initLCD	;wreg free
  5743                           
  5744                           ;main.c: 118: printf("With Tab: %02x",pop_can_tab);
  5745  0016E2  0EA9               	movlw	low STR_6
  5746  0016E4  6E0D               	movwf	i2printf@f,c
  5747  0016E6  0EFF               	movlw	high STR_6
  5748  0016E8  6E0E               	movwf	i2printf@f+1,c
  5749  0016EA  C047  F00F         	movff	_pop_can_tab,?i2_printf+2
  5750  0016EE  C048  F010         	movff	_pop_can_tab+1,?i2_printf+3
  5751  0016F2  ECCB  F003         	call	i2_printf	;wreg free
  5752                           
  5753                           ;main.c: 119: lcdInst(0b11000000);;
  5754  0016F6  0EC0               	movlw	192
  5755  0016F8  EC14  F00C         	call	i2_lcdInst
  5756                           
  5757                           ;main.c: 120: printf("No Tab: %02x",pop_can);
  5758  0016FC  0EE1               	movlw	low STR_7
  5759  0016FE  6E0D               	movwf	i2printf@f,c
  5760  001700  0EFF               	movlw	high STR_7
  5761  001702  6E0E               	movwf	i2printf@f+1,c
  5762  001704  C049  F00F         	movff	_pop_can,?i2_printf+2
  5763  001708  C04A  F010         	movff	_pop_can+1,?i2_printf+3
  5764  00170C  ECCB  F003         	call	i2_printf	;wreg free
  5765  001710  0012               	return	
  5766  001712                     __end_of_pop_results:
  5767                           	opt stack 0
  5768                           pclatu	equ	0xFFB
  5769                           pclath	equ	0xFFA
  5770                           tblptru	equ	0xFF8
  5771                           tblptrh	equ	0xFF7
  5772                           tblptrl	equ	0xFF6
  5773                           tablat	equ	0xFF5
  5774                           prodh	equ	0xFF4
  5775                           prodl	equ	0xFF3
  5776                           intcon	equ	0xFF2
  5777                           intcon3	equ	0xFF0
  5778                           postinc0	equ	0xFEE
  5779                           fsr0h	equ	0xFEA
  5780                           fsr0l	equ	0xFE9
  5781                           wreg	equ	0xFE8
  5782                           fsr1h	equ	0xFE2
  5783                           fsr1l	equ	0xFE1
  5784                           indf2	equ	0xFDF
  5785                           postinc2	equ	0xFDE
  5786                           postdec2	equ	0xFDD
  5787                           fsr2h	equ	0xFDA
  5788                           fsr2l	equ	0xFD9
  5789                           status	equ	0xFD8
  5790                           
  5791 ;; *************** function _op_time *****************
  5792 ;; Defined at:
  5793 ;;		line 102 in file "main.c"
  5794 ;; Parameters:    Size  Location     Type
  5795 ;;		None
  5796 ;; Auto vars:     Size  Location     Type
  5797 ;;		None
  5798 ;; Return value:  Size  Location     Type
  5799 ;;                  2   74[None  ] int 
  5800 ;; Registers used:
  5801 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5802 ;; Tracked objects:
  5803 ;;		On entry : 0/0
  5804 ;;		On exit  : 0/0
  5805 ;;		Unchanged: 0/0
  5806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5811 ;;Total ram usage:        0 bytes
  5812 ;; Hardware stack levels used:    1
  5813 ;; Hardware stack levels required when called:    3
  5814 ;; This function calls:
  5815 ;;		___awmod
  5816 ;;		i2___awdiv
  5817 ;;		i2_initLCD
  5818 ;;		i2_printf
  5819 ;; This function is called by:
  5820 ;;		_keypressed
  5821 ;; This function uses a non-reentrant model
  5822 ;;
  5823                           
  5824                           	psect	text27
  5825  0015A2                     __ptext27:
  5826                           	opt stack 0
  5827  0015A2                     _op_time:
  5828                           	opt stack 21
  5829                           
  5830                           ;main.c: 103: initLCD();
  5831                           
  5832                           ;incstack = 0
  5833  0015A2  ECF6  F00A         	call	i2_initLCD	;wreg free
  5834                           
  5835                           ;main.c: 104: printf("Time: %01d min %02d s", operation_time/60, operation_time%60 );
  5836  0015A6  0E0B               	movlw	low STR_3
  5837  0015A8  6E0D               	movwf	i2printf@f,c
  5838  0015AA  0EFF               	movlw	high STR_3
  5839  0015AC  6E0E               	movwf	i2printf@f+1,c
  5840  0015AE  C041  F001         	movff	_operation_time,i2___awdiv@dividend
  5841  0015B2  C042  F002         	movff	_operation_time+1,i2___awdiv@dividend+1
  5842  0015B6  0E00               	movlw	0
  5843  0015B8  6E04               	movwf	i2___awdiv@divisor+1,c
  5844  0015BA  0E3C               	movlw	60
  5845  0015BC  6E03               	movwf	i2___awdiv@divisor,c
  5846  0015BE  EC73  F008         	call	i2___awdiv	;wreg free
  5847  0015C2  C001  F00F         	movff	?i2___awdiv,?i2_printf+2
  5848  0015C6  C002  F010         	movff	?i2___awdiv+1,?i2_printf+3
  5849  0015CA  C041  F001         	movff	_operation_time,___awmod@dividend
  5850  0015CE  C042  F002         	movff	_operation_time+1,___awmod@dividend+1
  5851  0015D2  0E00               	movlw	0
  5852  0015D4  6E04               	movwf	___awmod@divisor+1,c
  5853  0015D6  0E3C               	movlw	60
  5854  0015D8  6E03               	movwf	___awmod@divisor,c
  5855  0015DA  EC2B  F009         	call	___awmod	;wreg free
  5856  0015DE  C001  F011         	movff	?___awmod,?i2_printf+4
  5857  0015E2  C002  F012         	movff	?___awmod+1,?i2_printf+5
  5858  0015E6  ECCB  F003         	call	i2_printf	;wreg free
  5859  0015EA  0012               	return	
  5860  0015EC                     __end_of_op_time:
  5861                           	opt stack 0
  5862                           pclatu	equ	0xFFB
  5863                           pclath	equ	0xFFA
  5864                           tblptru	equ	0xFF8
  5865                           tblptrh	equ	0xFF7
  5866                           tblptrl	equ	0xFF6
  5867                           tablat	equ	0xFF5
  5868                           prodh	equ	0xFF4
  5869                           prodl	equ	0xFF3
  5870                           intcon	equ	0xFF2
  5871                           intcon3	equ	0xFF0
  5872                           postinc0	equ	0xFEE
  5873                           fsr0h	equ	0xFEA
  5874                           fsr0l	equ	0xFE9
  5875                           wreg	equ	0xFE8
  5876                           fsr1h	equ	0xFE2
  5877                           fsr1l	equ	0xFE1
  5878                           indf2	equ	0xFDF
  5879                           postinc2	equ	0xFDE
  5880                           postdec2	equ	0xFDD
  5881                           fsr2h	equ	0xFDA
  5882                           fsr2l	equ	0xFD9
  5883                           status	equ	0xFD8
  5884                           
  5885 ;; *************** function i2_printf *****************
  5886 ;; Defined at:
  5887 ;;		line 464 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
  5888 ;; Parameters:    Size  Location     Type
  5889 ;;  f               2   12[COMRAM] PTR const unsigned char 
  5890 ;;		 -> STR_16(8), STR_15(17), STR_14(17), STR_13(17), 
  5891 ;;		 -> STR_12(9), STR_11(13), STR_10(17), STR_9(15), 
  5892 ;;		 -> STR_8(13), STR_7(13), STR_6(15), STR_5(15), 
  5893 ;;		 -> STR_4(17), STR_3(22), STR_2(19), STR_1(2), 
  5894 ;; Auto vars:     Size  Location     Type
  5895 ;;  printf          4    0        struct .
  5896 ;;  printf          3    0        PTR const unsigned char 
  5897 ;;  printf          2   29[COMRAM] int 
  5898 ;;  printf          2   26[COMRAM] unsigned int 
  5899 ;;  printf          2   23[COMRAM] PTR void [1]
  5900 ;;		 -> ?i2_printf(2), ?_printf(2), 
  5901 ;;  printf          2    0        unsigned int 
  5902 ;;  printf          1   31[COMRAM] char 
  5903 ;;  printf          1   28[COMRAM] unsigned char 
  5904 ;;  printf          1   25[COMRAM] char 
  5905 ;;  printf          1   22[COMRAM] unsigned char 
  5906 ;; Return value:  Size  Location     Type
  5907 ;;                  2   12[COMRAM] int 
  5908 ;; Registers used:
  5909 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5910 ;; Tracked objects:
  5911 ;;		On entry : 0/0
  5912 ;;		On exit  : 0/0
  5913 ;;		Unchanged: 0/0
  5914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5915 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5916 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5917 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5918 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5919 ;;Total ram usage:       20 bytes
  5920 ;; Hardware stack levels used:    1
  5921 ;; Hardware stack levels required when called:    2
  5922 ;; This function calls:
  5923 ;;		i2___lwdiv
  5924 ;;		i2___lwmod
  5925 ;;		i2___wmul
  5926 ;;		i2_isdigit
  5927 ;;		i2_putch
  5928 ;; This function is called by:
  5929 ;;		_keypressed
  5930 ;;		_tot_sorted
  5931 ;;		_op_time
  5932 ;;		_tin_results
  5933 ;;		_pop_results
  5934 ;; This function uses a non-reentrant model
  5935 ;;
  5936                           
  5937                           	psect	text28
  5938  000796                     __ptext28:
  5939                           	opt stack 0
  5940  000796                     i2_printf:
  5941                           	opt stack 22
  5942                           
  5943                           ;doprnt.c: 466: va_list ap;
  5944                           ;doprnt.c: 499: signed char c;
  5945                           ;doprnt.c: 501: int width;
  5946                           ;doprnt.c: 506: signed char prec;
  5947                           ;doprnt.c: 508: unsigned char flag;
  5948                           ;doprnt.c: 523: union {
  5949                           ;doprnt.c: 524: unsigned long vd;
  5950                           ;doprnt.c: 525: double integ;
  5951                           ;doprnt.c: 526: } tmpval;
  5952                           ;doprnt.c: 528: unsigned int val;
  5953                           ;doprnt.c: 529: unsigned len;
  5954                           ;doprnt.c: 530: const char * cp;
  5955                           ;doprnt.c: 533: *ap = __va_start();
  5956                           
  5957                           ;incstack = 0
  5958  000796  0E0F               	movlw	low (?i2_printf+2)
  5959  000798  6E18               	movwf	i2printf@ap,c
  5960  00079A  0E00               	movlw	high (?i2_printf+2)
  5961  00079C  6E19               	movwf	i2printf@ap+1,c
  5962                           
  5963                           ;doprnt.c: 536: while(c = *f++) {
  5964  00079E  D174               	goto	i2l2715
  5965  0007A0                     i2l2589:
  5966                           
  5967                           ;doprnt.c: 538: if(c != '%')
  5968  0007A0  0E25               	movlw	37
  5969  0007A2  1820               	xorwf	i2printf@c,w,c
  5970  0007A4  B4D8               	btfsc	status,2,c
  5971  0007A6  D004               	goto	i2l2593
  5972                           
  5973                           ;doprnt.c: 540: {
  5974                           ;doprnt.c: 541: (putch(c) );
  5975  0007A8  5020               	movf	i2printf@c,w,c
  5976  0007AA  EC0E  F00C         	call	i2_putch
  5977                           
  5978                           ;doprnt.c: 542: continue;
  5979  0007AE  D16C               	goto	i2l2715
  5980  0007B0                     i2l2593:
  5981                           
  5982                           ;doprnt.c: 543: }
  5983                           ;doprnt.c: 546: width = 0;
  5984  0007B0  0E00               	movlw	0
  5985  0007B2  6E1F               	movwf	i2printf@width+1,c
  5986  0007B4  0E00               	movlw	0
  5987  0007B6  6E1E               	movwf	i2printf@width,c
  5988                           
  5989                           ;doprnt.c: 548: flag = 0;
  5990  0007B8  0E00               	movlw	0
  5991  0007BA  6E1D               	movwf	i2printf@flag,c
  5992                           
  5993                           ;doprnt.c: 551: switch(*f) {
  5994                           
  5995                           ;doprnt.c: 550: for(;;) {
  5996  0007BC  D003               	goto	i2l2599
  5997  0007BE                     i2l2595:
  5998                           
  5999                           ;doprnt.c: 580: flag |= 0x04;
  6000  0007BE  841D               	bsf	i2printf@flag,2,c
  6001                           
  6002                           ;doprnt.c: 581: f++;
  6003  0007C0  4A0D               	infsnz	i2printf@f,f,c
  6004  0007C2  2A0E               	incf	i2printf@f+1,f,c
  6005  0007C4                     i2l2599:
  6006  0007C4  C00D  FFF6         	movff	i2printf@f,tblptrl
  6007  0007C8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6008  0007CC                     	if	0	;tblptru may be non-zero
  6009  0007CC                     	endif
  6010  0007CC                     	if	0	;tblptru may be non-zero
  6011  0007CC                     	endif
  6012  0007CC  0008               	tblrd		*
  6013  0007CE  50F5               	movf	tablat,w,c
  6014                           
  6015                           ; Switch size 1, requested type "space"
  6016                           ; Number of cases is 1, Range of values is 48 to 48
  6017                           ; switch strategies available:
  6018                           ; Name         Instructions Cycles
  6019                           ; simple_byte            4     3 (average)
  6020                           ;	Chosen strategy is simple_byte
  6021  0007D0  0A30               	xorlw	48	; case 48
  6022  0007D2  B4D8               	btfsc	status,2,c
  6023  0007D4  D7F4               	goto	i2l2595
  6024                           
  6025                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6026                           
  6027                           ;doprnt.c: 586: }
  6028                           
  6029                           ;doprnt.c: 585: break;
  6030  0007D6  C00D  FFF6         	movff	i2printf@f,tblptrl
  6031  0007DA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6032  0007DE                     	if	0	;tblptru may be non-zero
  6033  0007DE                     	endif
  6034  0007DE                     	if	0	;tblptru may be non-zero
  6035  0007DE                     	endif
  6036  0007DE  0008               	tblrd		*
  6037  0007E0  50F5               	movf	tablat,w,c
  6038  0007E2  ECD8  F00B         	call	i2_isdigit
  6039  0007E6  A0D8               	btfss	status,0,c
  6040  0007E8  D035               	goto	i2l2617
  6041                           
  6042                           ;doprnt.c: 598: width = 0;
  6043  0007EA  0E00               	movlw	0
  6044  0007EC  6E1F               	movwf	i2printf@width+1,c
  6045  0007EE  0E00               	movlw	0
  6046  0007F0  6E1E               	movwf	i2printf@width,c
  6047  0007F2                     i2l2605:
  6048                           
  6049                           ;doprnt.c: 600: width *= 10;
  6050  0007F2  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
  6051  0007F6  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  6052  0007FA  0E00               	movlw	0
  6053  0007FC  6E04               	movwf	i2___wmul@multiplicand+1,c
  6054  0007FE  0E0A               	movlw	10
  6055  000800  6E03               	movwf	i2___wmul@multiplicand,c
  6056  000802  ECB5  F00B         	call	i2___wmul	;wreg free
  6057  000806  C001  F01E         	movff	?i2___wmul,i2printf@width
  6058  00080A  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
  6059                           
  6060                           ;doprnt.c: 601: width += *f++ - '0';
  6061  00080E  0ED0               	movlw	208
  6062  000810  6E13               	movwf	??i2_printf& (0+255),c
  6063  000812  0EFF               	movlw	255
  6064  000814  6E14               	movwf	(??i2_printf+1)& (0+255),c
  6065  000816  C00D  FFF6         	movff	i2printf@f,tblptrl
  6066  00081A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6067  00081E                     	if	0	;tblptru may be non-zero
  6068  00081E                     	endif
  6069  00081E                     	if	0	;tblptru may be non-zero
  6070  00081E                     	endif
  6071  00081E  0008               	tblrd		*
  6072  000820  50F5               	movf	tablat,w,c
  6073  000822  6E15               	movwf	(??i2_printf+2)& (0+255),c
  6074  000824  6A16               	clrf	(??i2_printf+3)& (0+255),c
  6075  000826  5013               	movf	??i2_printf,w,c
  6076  000828  2615               	addwf	??i2_printf+2,f,c
  6077  00082A  5014               	movf	??i2_printf+1,w,c
  6078  00082C  2216               	addwfc	??i2_printf+3,f,c
  6079  00082E  5015               	movf	??i2_printf+2,w,c
  6080  000830  261E               	addwf	i2printf@width,f,c
  6081  000832  5016               	movf	??i2_printf+3,w,c
  6082  000834  221F               	addwfc	i2printf@width+1,f,c
  6083  000836  4A0D               	infsnz	i2printf@f,f,c
  6084  000838  2A0E               	incf	i2printf@f+1,f,c
  6085                           
  6086                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6087  00083A  C00D  FFF6         	movff	i2printf@f,tblptrl
  6088  00083E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6089  000842                     	if	0	;tblptru may be non-zero
  6090  000842                     	endif
  6091  000842                     	if	0	;tblptru may be non-zero
  6092  000842                     	endif
  6093  000842  0008               	tblrd		*
  6094  000844  50F5               	movf	tablat,w,c
  6095  000846  ECD8  F00B         	call	i2_isdigit
  6096  00084A  A0D8               	btfss	status,0,c
  6097  00084C  D003               	goto	i2l2617
  6098  00084E  D7D1               	goto	i2l2605
  6099  000850                     i2l2613:
  6100                           
  6101                           ;doprnt.c: 721: flag |= 0x80;
  6102  000850  8E1D               	bsf	i2printf@flag,7,c
  6103                           
  6104                           ;doprnt.c: 723: break;
  6105  000852  D017               	goto	i2l347
  6106  000854                     i2l2617:
  6107  000854  C00D  FFF6         	movff	i2printf@f,tblptrl
  6108  000858  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6109  00085C  4A0D               	infsnz	i2printf@f,f,c
  6110  00085E  2A0E               	incf	i2printf@f+1,f,c
  6111  000860                     	if	0	;tblptru may be non-zero
  6112  000860                     	endif
  6113  000860                     	if	0	;tblptru may be non-zero
  6114  000860                     	endif
  6115  000860  0008               	tblrd		*
  6116  000862  CFF5 F020          	movff	tablat,i2printf@c
  6117  000866  5020               	movf	i2printf@c,w,c
  6118                           
  6119                           ; Switch size 1, requested type "space"
  6120                           ; Number of cases is 4, Range of values is 0 to 120
  6121                           ; switch strategies available:
  6122                           ; Name         Instructions Cycles
  6123                           ; simple_byte           13     7 (average)
  6124                           ;	Chosen strategy is simple_byte
  6125  000868  0A00               	xorlw	0	; case 0
  6126  00086A  B4D8               	btfsc	status,2,c
  6127  00086C  0012               	return	
  6128  00086E  0A64               	xorlw	100	; case 100
  6129  000870  B4D8               	btfsc	status,2,c
  6130  000872  D007               	goto	i2l347
  6131  000874  0A0D               	xorlw	13	; case 105
  6132  000876  B4D8               	btfsc	status,2,c
  6133  000878  D004               	goto	i2l347
  6134  00087A  0A11               	xorlw	17	; case 120
  6135  00087C  B4D8               	btfsc	status,2,c
  6136  00087E  D7E8               	goto	i2l2613
  6137  000880  D103               	goto	i2l2715
  6138  000882                     i2l347:
  6139                           
  6140                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6141  000882  BE1D               	btfsc	i2printf@flag,7,c
  6142  000884  D015               	goto	i2l2629
  6143                           
  6144                           ;doprnt.c: 1253: {
  6145                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6146  000886  C018  FFD9         	movff	i2printf@ap,fsr2l
  6147  00088A  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  6148  00088E  CFDE F01B          	movff	postinc2,i2printf@val
  6149  000892  CFDD F01C          	movff	postdec2,i2printf@val+1
  6150  000896  0E02               	movlw	2
  6151  000898  2618               	addwf	i2printf@ap,f,c
  6152  00089A  0E00               	movlw	0
  6153  00089C  2219               	addwfc	i2printf@ap+1,f,c
  6154                           
  6155                           ;doprnt.c: 1261: if((int)val < 0) {
  6156  00089E  AE1C               	btfss	i2printf@val+1,7,c
  6157  0008A0  D044               	goto	i2l2663
  6158                           
  6159                           ;doprnt.c: 1262: flag |= 0x03;
  6160  0008A2  0E03               	movlw	3
  6161  0008A4  121D               	iorwf	i2printf@flag,f,c
  6162                           
  6163                           ;doprnt.c: 1263: val = -val;
  6164  0008A6  6C1B               	negf	i2printf@val,c
  6165  0008A8  1E1C               	comf	i2printf@val+1,f,c
  6166  0008AA  B0D8               	btfsc	status,0,c
  6167  0008AC  2A1C               	incf	i2printf@val+1,f,c
  6168                           
  6169                           ;doprnt.c: 1264: }
  6170                           ;doprnt.c: 1266: }
  6171  0008AE  D03D               	goto	i2l2663
  6172  0008B0                     i2l2629:
  6173                           
  6174                           ;doprnt.c: 1268: else
  6175                           ;doprnt.c: 1273: {
  6176                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6177  0008B0  C018  FFD9         	movff	i2printf@ap,fsr2l
  6178  0008B4  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  6179  0008B8  CFDE F01B          	movff	postinc2,i2printf@val
  6180  0008BC  CFDD F01C          	movff	postdec2,i2printf@val+1
  6181  0008C0  0E02               	movlw	2
  6182  0008C2  2618               	addwf	i2printf@ap,f,c
  6183  0008C4  0E00               	movlw	0
  6184  0008C6  2219               	addwfc	i2printf@ap+1,f,c
  6185                           
  6186                           ;doprnt.c: 1287: }
  6187                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6188  0008C8  D030               	goto	i2l2663
  6189  0008CA                     i2l2633:
  6190                           
  6191                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6192  0008CA  0E01               	movlw	1
  6193  0008CC  6E20               	movwf	i2printf@c,c
  6194  0008CE                     i2l2635:
  6195  0008CE  0E05               	movlw	5
  6196  0008D0  1820               	xorwf	i2printf@c,w,c
  6197  0008D2  B4D8               	btfsc	status,2,c
  6198  0008D4  D032               	goto	i2l2665
  6199                           
  6200                           ;doprnt.c: 1306: if(val < dpowers[c])
  6201  0008D6  5020               	movf	i2printf@c,w,c
  6202  0008D8  0D02               	mullw	2
  6203  0008DA  0EF2               	movlw	low _dpowers
  6204  0008DC  24F3               	addwf	prodl,w,c
  6205  0008DE  6EF6               	movwf	tblptrl,c
  6206  0008E0  0EFE               	movlw	high _dpowers
  6207  0008E2  20F4               	addwfc	prodh,w,c
  6208  0008E4  6EF7               	movwf	tblptrh,c
  6209  0008E6                     	if	0	;There are less than 3 active tblptr bytes
  6210  0008E6                     	endif
  6211  0008E6  0009               	tblrd		*+
  6212  0008E8  50F5               	movf	tablat,w,c
  6213  0008EA  5C1B               	subwf	i2printf@val,w,c
  6214  0008EC  0009               	tblrd		*+
  6215  0008EE  50F5               	movf	tablat,w,c
  6216  0008F0  581C               	subwfb	i2printf@val+1,w,c
  6217  0008F2  A0D8               	btfss	status,0,c
  6218  0008F4  D022               	goto	i2l2665
  6219                           
  6220                           ;doprnt.c: 1307: break;
  6221  0008F6  2A20               	incf	i2printf@c,f,c
  6222  0008F8  D7EA               	goto	i2l2635
  6223  0008FA                     i2l2647:
  6224                           
  6225                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6226  0008FA  0E01               	movlw	1
  6227  0008FC  6E20               	movwf	i2printf@c,c
  6228  0008FE                     i2l2649:
  6229  0008FE  0E04               	movlw	4
  6230  000900  1820               	xorwf	i2printf@c,w,c
  6231  000902  B4D8               	btfsc	status,2,c
  6232  000904  D01A               	goto	i2l2665
  6233                           
  6234                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6235  000906  5020               	movf	i2printf@c,w,c
  6236  000908  0D02               	mullw	2
  6237  00090A  0EFC               	movlw	low _hexpowers
  6238  00090C  24F3               	addwf	prodl,w,c
  6239  00090E  6EF6               	movwf	tblptrl,c
  6240  000910  0EFE               	movlw	high _hexpowers
  6241  000912  20F4               	addwfc	prodh,w,c
  6242  000914  6EF7               	movwf	tblptrh,c
  6243  000916                     	if	0	;There are less than 3 active tblptr bytes
  6244  000916                     	endif
  6245  000916  0009               	tblrd		*+
  6246  000918  50F5               	movf	tablat,w,c
  6247  00091A  5C1B               	subwf	i2printf@val,w,c
  6248  00091C  0009               	tblrd		*+
  6249  00091E  50F5               	movf	tablat,w,c
  6250  000920  581C               	subwfb	i2printf@val+1,w,c
  6251  000922  A0D8               	btfss	status,0,c
  6252  000924  D00A               	goto	i2l2665
  6253                           
  6254                           ;doprnt.c: 1318: break;
  6255  000926  2A20               	incf	i2printf@c,f,c
  6256  000928  D7EA               	goto	i2l2649
  6257  00092A                     i2l2663:
  6258  00092A  501D               	movf	i2printf@flag,w,c
  6259  00092C  0B80               	andlw	128
  6260                           
  6261                           ; Switch size 1, requested type "space"
  6262                           ; Number of cases is 2, Range of values is 0 to 128
  6263                           ; switch strategies available:
  6264                           ; Name         Instructions Cycles
  6265                           ; simple_byte            7     4 (average)
  6266                           ;	Chosen strategy is simple_byte
  6267  00092E  0A00               	xorlw	0	; case 0
  6268  000930  B4D8               	btfsc	status,2,c
  6269  000932  D7CB               	goto	i2l2633
  6270  000934  0A80               	xorlw	128	; case 128
  6271  000936  B4D8               	btfsc	status,2,c
  6272  000938  D7E0               	goto	i2l2647
  6273  00093A                     i2l2665:
  6274                           
  6275                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6276  00093A  501E               	movf	i2printf@width,w,c
  6277  00093C  101F               	iorwf	i2printf@width+1,w,c
  6278  00093E  B4D8               	btfsc	status,2,c
  6279  000940  D009               	goto	i2l2671
  6280  000942  C01D  F013         	movff	i2printf@flag,??i2_printf
  6281  000946  0E03               	movlw	3
  6282  000948  1613               	andwf	??i2_printf,f,c
  6283  00094A  B4D8               	btfsc	status,2,c
  6284  00094C  D003               	goto	i2l2671
  6285                           
  6286                           ;doprnt.c: 1346: width--;
  6287  00094E  061E               	decf	i2printf@width,f,c
  6288  000950  A0D8               	btfss	status,0,c
  6289  000952  061F               	decf	i2printf@width+1,f,c
  6290  000954                     i2l2671:
  6291                           
  6292                           ;doprnt.c: 1381: if(width > c)
  6293  000954  0E80               	movlw	128
  6294  000956  BE20               	btfsc	i2printf@c,7,c
  6295  000958  0E7F               	movlw	127
  6296  00095A  6E13               	movwf	??i2_printf& (0+255),c
  6297  00095C  501E               	movf	i2printf@width,w,c
  6298  00095E  5C20               	subwf	i2printf@c,w,c
  6299  000960  501F               	movf	i2printf@width+1,w,c
  6300  000962  0A80               	xorlw	128
  6301  000964  5813               	subwfb	??i2_printf& (0+255),w,c
  6302  000966  B0D8               	btfsc	status,0,c
  6303  000968  D007               	goto	i2l2675
  6304                           
  6305                           ;doprnt.c: 1382: width -= c;
  6306  00096A  5020               	movf	i2printf@c,w,c
  6307  00096C  5E1E               	subwf	i2printf@width,f,c
  6308  00096E  0E00               	movlw	0
  6309  000970  BE20               	btfsc	i2printf@c,7,c
  6310  000972  0EFF               	movlw	255
  6311  000974  5A1F               	subwfb	i2printf@width+1,f,c
  6312  000976  D004               	goto	i2l2677
  6313  000978                     i2l2675:
  6314                           
  6315                           ;doprnt.c: 1383: else
  6316                           ;doprnt.c: 1384: width = 0;
  6317  000978  0E00               	movlw	0
  6318  00097A  6E1F               	movwf	i2printf@width+1,c
  6319  00097C  0E00               	movlw	0
  6320  00097E  6E1E               	movwf	i2printf@width,c
  6321  000980                     i2l2677:
  6322                           
  6323                           ;doprnt.c: 1387: if(flag & 0x04) {
  6324  000980  A41D               	btfss	i2printf@flag,2,c
  6325  000982  D014               	goto	i2l2689
  6326                           
  6327                           ;doprnt.c: 1392: if(flag & 0x03)
  6328  000984  C01D  F013         	movff	i2printf@flag,??i2_printf
  6329  000988  0E03               	movlw	3
  6330  00098A  1613               	andwf	??i2_printf,f,c
  6331  00098C  B4D8               	btfsc	status,2,c
  6332  00098E  D003               	goto	i2l2683
  6333                           
  6334                           ;doprnt.c: 1393: (putch('-') );
  6335  000990  0E2D               	movlw	45
  6336  000992  EC0E  F00C         	call	i2_putch
  6337  000996                     i2l2683:
  6338                           
  6339                           ;doprnt.c: 1415: if(width)
  6340  000996  501E               	movf	i2printf@width,w,c
  6341  000998  101F               	iorwf	i2printf@width+1,w,c
  6342  00099A  B4D8               	btfsc	status,2,c
  6343  00099C  D01E               	goto	i2l2699
  6344                           
  6345                           ;doprnt.c: 1417: (putch('0') );
  6346                           
  6347                           ;doprnt.c: 1416: do
  6348  00099E  0E30               	movlw	48
  6349  0009A0  EC0E  F00C         	call	i2_putch
  6350                           
  6351                           ;doprnt.c: 1418: while(--width);
  6352  0009A4  061E               	decf	i2printf@width,f,c
  6353  0009A6  A0D8               	btfss	status,0,c
  6354  0009A8  061F               	decf	i2printf@width+1,f,c
  6355  0009AA  D7F5               	goto	i2l2683
  6356  0009AC                     i2l2689:
  6357                           
  6358                           ;doprnt.c: 1422: {
  6359                           ;doprnt.c: 1424: if(width
  6360                           ;doprnt.c: 1428: )
  6361  0009AC  501E               	movf	i2printf@width,w,c
  6362  0009AE  101F               	iorwf	i2printf@width+1,w,c
  6363  0009B0  B4D8               	btfsc	status,2,c
  6364  0009B2  D00A               	goto	i2l2695
  6365  0009B4                     i2l2691:
  6366                           
  6367                           ;doprnt.c: 1430: (putch(' ') );
  6368  0009B4  0E20               	movlw	32
  6369  0009B6  EC0E  F00C         	call	i2_putch
  6370                           
  6371                           ;doprnt.c: 1431: while(--width);
  6372  0009BA  061E               	decf	i2printf@width,f,c
  6373  0009BC  A0D8               	btfss	status,0,c
  6374  0009BE  061F               	decf	i2printf@width+1,f,c
  6375  0009C0  501E               	movf	i2printf@width,w,c
  6376  0009C2  101F               	iorwf	i2printf@width+1,w,c
  6377  0009C4  A4D8               	btfss	status,2,c
  6378  0009C6  D7F6               	goto	i2l2691
  6379  0009C8                     i2l2695:
  6380                           
  6381                           ;doprnt.c: 1438: if(flag & 0x03)
  6382  0009C8  C01D  F013         	movff	i2printf@flag,??i2_printf
  6383  0009CC  0E03               	movlw	3
  6384  0009CE  1613               	andwf	??i2_printf,f,c
  6385  0009D0  B4D8               	btfsc	status,2,c
  6386  0009D2  D003               	goto	i2l2699
  6387                           
  6388                           ;doprnt.c: 1439: (putch('-') );
  6389  0009D4  0E2D               	movlw	45
  6390  0009D6  EC0E  F00C         	call	i2_putch
  6391  0009DA                     i2l2699:
  6392                           
  6393                           ;doprnt.c: 1469: }
  6394                           ;doprnt.c: 1472: prec = c;
  6395  0009DA  C020  F01A         	movff	i2printf@c,i2printf@prec
  6396                           
  6397                           ;doprnt.c: 1474: while(prec--) {
  6398  0009DE  D050               	goto	i2l2713
  6399  0009E0                     i2l2701:
  6400                           
  6401                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6402  0009E0  501A               	movf	i2printf@prec,w,c
  6403  0009E2  0D02               	mullw	2
  6404  0009E4  0EF2               	movlw	low _dpowers
  6405  0009E6  24F3               	addwf	prodl,w,c
  6406  0009E8  6EF6               	movwf	tblptrl,c
  6407  0009EA  0EFE               	movlw	high _dpowers
  6408  0009EC  20F4               	addwfc	prodh,w,c
  6409  0009EE  6EF7               	movwf	tblptrh,c
  6410  0009F0                     	if	0	;There are less than 3 active tblptr bytes
  6411  0009F0                     	endif
  6412  0009F0  0009               	tblrd		*+
  6413  0009F2  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  6414  0009F6  000A               	tblrd		*-
  6415  0009F8  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  6416  0009FC  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  6417  000A00  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  6418  000A04  EC83  F00A         	call	i2___lwdiv	;wreg free
  6419  000A08  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  6420  000A0C  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  6421  000A10  0E00               	movlw	0
  6422  000A12  6E0B               	movwf	i2___lwmod@divisor+1,c
  6423  000A14  0E0A               	movlw	10
  6424  000A16  6E0A               	movwf	i2___lwmod@divisor,c
  6425  000A18  EC19  F00B         	call	i2___lwmod	;wreg free
  6426  000A1C  5008               	movf	?i2___lwmod,w,c
  6427  000A1E  0F30               	addlw	48
  6428  000A20  6E20               	movwf	i2printf@c,c
  6429                           
  6430                           ;doprnt.c: 1491: break;
  6431  000A22  D02B               	goto	i2l2711
  6432  000A24                     i2l2703:
  6433                           
  6434                           ;doprnt.c: 1499: {
  6435                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6436  000A24  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  6437  000A28  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  6438  000A2C  501A               	movf	i2printf@prec,w,c
  6439  000A2E  0D02               	mullw	2
  6440  000A30  0EFC               	movlw	low _hexpowers
  6441  000A32  24F3               	addwf	prodl,w,c
  6442  000A34  6EF6               	movwf	tblptrl,c
  6443  000A36  0EFE               	movlw	high _hexpowers
  6444  000A38  20F4               	addwfc	prodh,w,c
  6445  000A3A  6EF7               	movwf	tblptrh,c
  6446  000A3C                     	if	0	;There are less than 3 active tblptr bytes
  6447  000A3C                     	endif
  6448  000A3C  0009               	tblrd		*+
  6449  000A3E  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  6450  000A42  000A               	tblrd		*-
  6451  000A44  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  6452  000A48  EC83  F00A         	call	i2___lwdiv	;wreg free
  6453  000A4C  5001               	movf	?i2___lwdiv,w,c
  6454  000A4E  0B0F               	andlw	15
  6455  000A50  6E17               	movwf	i2printf@idx,c
  6456                           
  6457                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6458  000A52  5017               	movf	i2printf@idx,w,c
  6459  000A54  0D01               	mullw	1
  6460  000A56  0E34               	movlw	low STR_17
  6461  000A58  24F3               	addwf	prodl,w,c
  6462  000A5A  6EF6               	movwf	tblptrl,c
  6463  000A5C  0EFF               	movlw	high STR_17
  6464  000A5E  20F4               	addwfc	prodh,w,c
  6465  000A60  6EF7               	movwf	tblptrh,c
  6466  000A62                     	if	0	;There are less than 3 active tblptr bytes
  6467  000A62                     	endif
  6468  000A62  0008               	tblrd		*
  6469  000A64  CFF5 F020          	movff	tablat,i2printf@c
  6470                           
  6471                           ;doprnt.c: 1523: }
  6472                           
  6473                           ;doprnt.c: 1508: }
  6474                           ;doprnt.c: 1510: break;
  6475  000A68  D008               	goto	i2l2711
  6476  000A6A                     i2l2709:
  6477  000A6A  501D               	movf	i2printf@flag,w,c
  6478  000A6C  0B80               	andlw	128
  6479                           
  6480                           ; Switch size 1, requested type "space"
  6481                           ; Number of cases is 2, Range of values is 0 to 128
  6482                           ; switch strategies available:
  6483                           ; Name         Instructions Cycles
  6484                           ; simple_byte            7     4 (average)
  6485                           ;	Chosen strategy is simple_byte
  6486  000A6E  0A00               	xorlw	0	; case 0
  6487  000A70  B4D8               	btfsc	status,2,c
  6488  000A72  D7B6               	goto	i2l2701
  6489  000A74  0A80               	xorlw	128	; case 128
  6490  000A76  B4D8               	btfsc	status,2,c
  6491  000A78  D7D5               	goto	i2l2703
  6492  000A7A                     i2l2711:
  6493                           
  6494                           ;doprnt.c: 1524: (putch(c) );
  6495  000A7A  5020               	movf	i2printf@c,w,c
  6496  000A7C  EC0E  F00C         	call	i2_putch
  6497  000A80                     i2l2713:
  6498  000A80  061A               	decf	i2printf@prec,f,c
  6499  000A82  281A               	incf	i2printf@prec,w,c
  6500  000A84  A4D8               	btfss	status,2,c
  6501  000A86  D7F1               	goto	i2l2709
  6502  000A88                     i2l2715:
  6503  000A88  C00D  FFF6         	movff	i2printf@f,tblptrl
  6504  000A8C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6505  000A90  4A0D               	infsnz	i2printf@f,f,c
  6506  000A92  2A0E               	incf	i2printf@f+1,f,c
  6507  000A94                     	if	0	;tblptru may be non-zero
  6508  000A94                     	endif
  6509  000A94                     	if	0	;tblptru may be non-zero
  6510  000A94                     	endif
  6511  000A94  0008               	tblrd		*
  6512  000A96  CFF5 F020          	movff	tablat,i2printf@c
  6513  000A9A  5020               	movf	i2printf@c,w,c
  6514  000A9C  B4D8               	btfsc	status,2,c
  6515  000A9E  0012               	return	
  6516  000AA0  D67F               	goto	i2l2589
  6517  000AA2                     __end_ofi2_printf:
  6518                           	opt stack 0
  6519                           pclatu	equ	0xFFB
  6520                           pclath	equ	0xFFA
  6521                           tblptru	equ	0xFF8
  6522                           tblptrh	equ	0xFF7
  6523                           tblptrl	equ	0xFF6
  6524                           tablat	equ	0xFF5
  6525                           prodh	equ	0xFF4
  6526                           prodl	equ	0xFF3
  6527                           intcon	equ	0xFF2
  6528                           intcon3	equ	0xFF0
  6529                           postinc0	equ	0xFEE
  6530                           fsr0h	equ	0xFEA
  6531                           fsr0l	equ	0xFE9
  6532                           wreg	equ	0xFE8
  6533                           fsr1h	equ	0xFE2
  6534                           fsr1l	equ	0xFE1
  6535                           indf2	equ	0xFDF
  6536                           postinc2	equ	0xFDE
  6537                           postdec2	equ	0xFDD
  6538                           fsr2h	equ	0xFDA
  6539                           fsr2l	equ	0xFD9
  6540                           status	equ	0xFD8
  6541                           
  6542 ;; *************** function i2_putch *****************
  6543 ;; Defined at:
  6544 ;;		line 30 in file "lcd.c"
  6545 ;; Parameters:    Size  Location     Type
  6546 ;;  data            1    wreg     unsigned char 
  6547 ;; Auto vars:     Size  Location     Type
  6548 ;;  data            1    2[COMRAM] unsigned char 
  6549 ;; Return value:  Size  Location     Type
  6550 ;;                  1    wreg      void 
  6551 ;; Registers used:
  6552 ;;		wreg, status,2, status,0, cstack
  6553 ;; Tracked objects:
  6554 ;;		On entry : 0/0
  6555 ;;		On exit  : 0/0
  6556 ;;		Unchanged: 0/0
  6557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6559 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6561 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6562 ;;Total ram usage:        1 bytes
  6563 ;; Hardware stack levels used:    1
  6564 ;; Hardware stack levels required when called:    1
  6565 ;; This function calls:
  6566 ;;		i2_lcdNibble
  6567 ;; This function is called by:
  6568 ;;		i2_printf
  6569 ;; This function uses a non-reentrant model
  6570 ;;
  6571                           
  6572                           	psect	text29
  6573  00181C                     __ptext29:
  6574                           	opt stack 0
  6575  00181C                     i2_putch:
  6576                           	opt stack 22
  6577                           
  6578                           ;incstack = 0
  6579                           ;i2putch@data stored from wreg
  6580  00181C  6E03               	movwf	i2putch@data,c
  6581                           
  6582                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  6583  00181E  848C               	bsf	3980,2,c	;volatile
  6584                           
  6585                           ;lcd.c: 32: lcdNibble(data);
  6586  001820  5003               	movf	i2putch@data,w,c
  6587  001822  EC58  F00A         	call	i2_lcdNibble
  6588  001826  0012               	return		;funcret
  6589  001828                     __end_ofi2_putch:
  6590                           	opt stack 0
  6591                           pclatu	equ	0xFFB
  6592                           pclath	equ	0xFFA
  6593                           tblptru	equ	0xFF8
  6594                           tblptrh	equ	0xFF7
  6595                           tblptrl	equ	0xFF6
  6596                           tablat	equ	0xFF5
  6597                           prodh	equ	0xFF4
  6598                           prodl	equ	0xFF3
  6599                           intcon	equ	0xFF2
  6600                           intcon3	equ	0xFF0
  6601                           postinc0	equ	0xFEE
  6602                           fsr0h	equ	0xFEA
  6603                           fsr0l	equ	0xFE9
  6604                           wreg	equ	0xFE8
  6605                           fsr1h	equ	0xFE2
  6606                           fsr1l	equ	0xFE1
  6607                           indf2	equ	0xFDF
  6608                           postinc2	equ	0xFDE
  6609                           postdec2	equ	0xFDD
  6610                           fsr2h	equ	0xFDA
  6611                           fsr2l	equ	0xFD9
  6612                           status	equ	0xFD8
  6613                           
  6614 ;; *************** function i2_isdigit *****************
  6615 ;; Defined at:
  6616 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/isdigit.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;  c               1    wreg     unsigned char 
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;  c               1    2[COMRAM] unsigned char 
  6621 ;; Return value:  Size  Location     Type
  6622 ;;		None               void
  6623 ;; Registers used:
  6624 ;;		wreg, status,2, status,0
  6625 ;; Tracked objects:
  6626 ;;		On entry : 0/0
  6627 ;;		On exit  : 0/0
  6628 ;;		Unchanged: 0/0
  6629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6631 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6632 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6633 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6634 ;;Total ram usage:        3 bytes
  6635 ;; Hardware stack levels used:    1
  6636 ;; This function calls:
  6637 ;;		Nothing
  6638 ;; This function is called by:
  6639 ;;		i2_printf
  6640 ;; This function uses a non-reentrant model
  6641 ;;
  6642                           
  6643                           	psect	text30
  6644  0017B0                     __ptext30:
  6645                           	opt stack 0
  6646  0017B0                     i2_isdigit:
  6647                           	opt stack 23
  6648                           
  6649                           ;incstack = 0
  6650                           ;i2isdigit@c stored from wreg
  6651  0017B0  6E03               	movwf	i2isdigit@c,c
  6652  0017B2  0E00               	movlw	0
  6653  0017B4  6E02               	movwf	i2_isdigit$766,c
  6654  0017B6  0E3A               	movlw	58
  6655  0017B8  6003               	cpfslt	i2isdigit@c,c
  6656  0017BA  D005               	goto	i2l2375
  6657  0017BC  0E2F               	movlw	47
  6658  0017BE  6403               	cpfsgt	i2isdigit@c,c
  6659  0017C0  D002               	goto	i2l2375
  6660  0017C2  0E01               	movlw	1
  6661  0017C4  6E02               	movwf	i2_isdigit$766,c
  6662  0017C6                     i2l2375:
  6663  0017C6  C002  F001         	movff	i2_isdigit$766,??i2_isdigit
  6664  0017CA  3001               	rrcf	??i2_isdigit,w,c
  6665  0017CC  0012               	return	
  6666  0017CE                     __end_ofi2_isdigit:
  6667                           	opt stack 0
  6668                           pclatu	equ	0xFFB
  6669                           pclath	equ	0xFFA
  6670                           tblptru	equ	0xFF8
  6671                           tblptrh	equ	0xFF7
  6672                           tblptrl	equ	0xFF6
  6673                           tablat	equ	0xFF5
  6674                           prodh	equ	0xFF4
  6675                           prodl	equ	0xFF3
  6676                           intcon	equ	0xFF2
  6677                           intcon3	equ	0xFF0
  6678                           postinc0	equ	0xFEE
  6679                           fsr0h	equ	0xFEA
  6680                           fsr0l	equ	0xFE9
  6681                           wreg	equ	0xFE8
  6682                           fsr1h	equ	0xFE2
  6683                           fsr1l	equ	0xFE1
  6684                           indf2	equ	0xFDF
  6685                           postinc2	equ	0xFDE
  6686                           postdec2	equ	0xFDD
  6687                           fsr2h	equ	0xFDA
  6688                           fsr2l	equ	0xFD9
  6689                           status	equ	0xFD8
  6690                           
  6691 ;; *************** function i2___wmul *****************
  6692 ;; Defined at:
  6693 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/Umul16.c"
  6694 ;; Parameters:    Size  Location     Type
  6695 ;;  multiplier      2    0[COMRAM] unsigned int 
  6696 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6697 ;; Auto vars:     Size  Location     Type
  6698 ;;  __wmul          2    4[COMRAM] unsigned int 
  6699 ;; Return value:  Size  Location     Type
  6700 ;;                  2    0[COMRAM] unsigned int 
  6701 ;; Registers used:
  6702 ;;		wreg, status,2, status,0, prodl, prodh
  6703 ;; Tracked objects:
  6704 ;;		On entry : 0/0
  6705 ;;		On exit  : 0/0
  6706 ;;		Unchanged: 0/0
  6707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6708 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6709 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6711 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6712 ;;Total ram usage:        6 bytes
  6713 ;; Hardware stack levels used:    1
  6714 ;; This function calls:
  6715 ;;		Nothing
  6716 ;; This function is called by:
  6717 ;;		i2_printf
  6718 ;; This function uses a non-reentrant model
  6719 ;;
  6720                           
  6721                           	psect	text31
  6722  00176A                     __ptext31:
  6723                           	opt stack 0
  6724  00176A                     i2___wmul:
  6725                           	opt stack 23
  6726                           
  6727                           ;incstack = 0
  6728  00176A  5001               	movf	i2___wmul@multiplier,w,c
  6729  00176C  0203               	mulwf	i2___wmul@multiplicand,c
  6730  00176E  CFF3 F005          	movff	prodl,i2___wmul@product
  6731  001772  CFF4 F006          	movff	prodh,i2___wmul@product+1
  6732  001776  5001               	movf	i2___wmul@multiplier,w,c
  6733  001778  0204               	mulwf	i2___wmul@multiplicand+1,c
  6734  00177A  50F3               	movf	prodl,w,c
  6735  00177C  2606               	addwf	i2___wmul@product+1,f,c
  6736  00177E  5002               	movf	i2___wmul@multiplier+1,w,c
  6737  001780  0203               	mulwf	i2___wmul@multiplicand,c
  6738  001782  50F3               	movf	prodl,w,c
  6739  001784  2606               	addwf	i2___wmul@product+1,f,c
  6740  001786  C005  F001         	movff	i2___wmul@product,?i2___wmul
  6741  00178A  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  6742  00178E  0012               	return	
  6743  001790                     __end_ofi2___wmul:
  6744                           	opt stack 0
  6745                           pclatu	equ	0xFFB
  6746                           pclath	equ	0xFFA
  6747                           tblptru	equ	0xFF8
  6748                           tblptrh	equ	0xFF7
  6749                           tblptrl	equ	0xFF6
  6750                           tablat	equ	0xFF5
  6751                           prodh	equ	0xFF4
  6752                           prodl	equ	0xFF3
  6753                           intcon	equ	0xFF2
  6754                           intcon3	equ	0xFF0
  6755                           postinc0	equ	0xFEE
  6756                           fsr0h	equ	0xFEA
  6757                           fsr0l	equ	0xFE9
  6758                           wreg	equ	0xFE8
  6759                           fsr1h	equ	0xFE2
  6760                           fsr1l	equ	0xFE1
  6761                           indf2	equ	0xFDF
  6762                           postinc2	equ	0xFDE
  6763                           postdec2	equ	0xFDD
  6764                           fsr2h	equ	0xFDA
  6765                           fsr2l	equ	0xFD9
  6766                           status	equ	0xFD8
  6767                           
  6768 ;; *************** function i2___lwmod *****************
  6769 ;; Defined at:
  6770 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
  6771 ;; Parameters:    Size  Location     Type
  6772 ;;  dividend        2    7[COMRAM] unsigned int 
  6773 ;;  divisor         2    9[COMRAM] unsigned int 
  6774 ;; Auto vars:     Size  Location     Type
  6775 ;;  __lwmod         1   11[COMRAM] unsigned char 
  6776 ;; Return value:  Size  Location     Type
  6777 ;;                  2    7[COMRAM] unsigned int 
  6778 ;; Registers used:
  6779 ;;		wreg, status,2, status,0
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6785 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6786 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6788 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6789 ;;Total ram usage:        5 bytes
  6790 ;; Hardware stack levels used:    1
  6791 ;; This function calls:
  6792 ;;		Nothing
  6793 ;; This function is called by:
  6794 ;;		i2_printf
  6795 ;; This function uses a non-reentrant model
  6796 ;;
  6797                           
  6798                           	psect	text32
  6799  001632                     __ptext32:
  6800                           	opt stack 0
  6801  001632                     i2___lwmod:
  6802                           	opt stack 23
  6803                           
  6804                           ;incstack = 0
  6805  001632  500A               	movf	i2___lwmod@divisor,w,c
  6806  001634  100B               	iorwf	i2___lwmod@divisor+1,w,c
  6807  001636  B4D8               	btfsc	status,2,c
  6808  001638  D018               	goto	i2l802
  6809  00163A  0E01               	movlw	1
  6810  00163C  6E0C               	movwf	i2___lwmod@counter,c
  6811  00163E  D004               	goto	i2l2407
  6812  001640                     i2l2405:
  6813  001640  90D8               	bcf	status,0,c
  6814  001642  360A               	rlcf	i2___lwmod@divisor,f,c
  6815  001644  360B               	rlcf	i2___lwmod@divisor+1,f,c
  6816  001646  2A0C               	incf	i2___lwmod@counter,f,c
  6817  001648                     i2l2407:
  6818  001648  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  6819  00164A  D7FA               	goto	i2l2405
  6820  00164C                     i2l2409:
  6821  00164C  500A               	movf	i2___lwmod@divisor,w,c
  6822  00164E  5C08               	subwf	i2___lwmod@dividend,w,c
  6823  001650  500B               	movf	i2___lwmod@divisor+1,w,c
  6824  001652  5809               	subwfb	i2___lwmod@dividend+1,w,c
  6825  001654  A0D8               	btfss	status,0,c
  6826  001656  D004               	goto	i2l2413
  6827  001658  500A               	movf	i2___lwmod@divisor,w,c
  6828  00165A  5E08               	subwf	i2___lwmod@dividend,f,c
  6829  00165C  500B               	movf	i2___lwmod@divisor+1,w,c
  6830  00165E  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  6831  001660                     i2l2413:
  6832  001660  90D8               	bcf	status,0,c
  6833  001662  320B               	rrcf	i2___lwmod@divisor+1,f,c
  6834  001664  320A               	rrcf	i2___lwmod@divisor,f,c
  6835  001666  2E0C               	decfsz	i2___lwmod@counter,f,c
  6836  001668  D7F1               	goto	i2l2409
  6837  00166A                     i2l802:
  6838  00166A  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  6839  00166E  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  6840  001672  0012               	return		;funcret
  6841  001674                     __end_ofi2___lwmod:
  6842                           	opt stack 0
  6843                           pclatu	equ	0xFFB
  6844                           pclath	equ	0xFFA
  6845                           tblptru	equ	0xFF8
  6846                           tblptrh	equ	0xFF7
  6847                           tblptrl	equ	0xFF6
  6848                           tablat	equ	0xFF5
  6849                           prodh	equ	0xFF4
  6850                           prodl	equ	0xFF3
  6851                           intcon	equ	0xFF2
  6852                           intcon3	equ	0xFF0
  6853                           postinc0	equ	0xFEE
  6854                           fsr0h	equ	0xFEA
  6855                           fsr0l	equ	0xFE9
  6856                           wreg	equ	0xFE8
  6857                           fsr1h	equ	0xFE2
  6858                           fsr1l	equ	0xFE1
  6859                           indf2	equ	0xFDF
  6860                           postinc2	equ	0xFDE
  6861                           postdec2	equ	0xFDD
  6862                           fsr2h	equ	0xFDA
  6863                           fsr2l	equ	0xFD9
  6864                           status	equ	0xFD8
  6865                           
  6866 ;; *************** function i2___lwdiv *****************
  6867 ;; Defined at:
  6868 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  6869 ;; Parameters:    Size  Location     Type
  6870 ;;  dividend        2    0[COMRAM] unsigned int 
  6871 ;;  divisor         2    2[COMRAM] unsigned int 
  6872 ;; Auto vars:     Size  Location     Type
  6873 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  6874 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  6875 ;; Return value:  Size  Location     Type
  6876 ;;                  2    0[COMRAM] unsigned int 
  6877 ;; Registers used:
  6878 ;;		wreg, status,2, status,0
  6879 ;; Tracked objects:
  6880 ;;		On entry : 0/0
  6881 ;;		On exit  : 0/0
  6882 ;;		Unchanged: 0/0
  6883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6884 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6885 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6887 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6888 ;;Total ram usage:        7 bytes
  6889 ;; Hardware stack levels used:    1
  6890 ;; This function calls:
  6891 ;;		Nothing
  6892 ;; This function is called by:
  6893 ;;		i2_printf
  6894 ;; This function uses a non-reentrant model
  6895 ;;
  6896                           
  6897                           	psect	text33
  6898  001506                     __ptext33:
  6899                           	opt stack 0
  6900  001506                     i2___lwdiv:
  6901                           	opt stack 23
  6902                           
  6903                           ;incstack = 0
  6904  001506  0E00               	movlw	0
  6905  001508  6E06               	movwf	i2___lwdiv@quotient+1,c
  6906  00150A  0E00               	movlw	0
  6907  00150C  6E05               	movwf	i2___lwdiv@quotient,c
  6908  00150E  5003               	movf	i2___lwdiv@divisor,w,c
  6909  001510  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  6910  001512  B4D8               	btfsc	status,2,c
  6911  001514  D01C               	goto	i2l792
  6912  001516  0E01               	movlw	1
  6913  001518  6E07               	movwf	i2___lwdiv@counter,c
  6914  00151A  D004               	goto	i2l2387
  6915  00151C                     i2l2385:
  6916  00151C  90D8               	bcf	status,0,c
  6917  00151E  3603               	rlcf	i2___lwdiv@divisor,f,c
  6918  001520  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  6919  001522  2A07               	incf	i2___lwdiv@counter,f,c
  6920  001524                     i2l2387:
  6921  001524  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  6922  001526  D7FA               	goto	i2l2385
  6923  001528                     i2l2389:
  6924  001528  90D8               	bcf	status,0,c
  6925  00152A  3605               	rlcf	i2___lwdiv@quotient,f,c
  6926  00152C  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  6927  00152E  5003               	movf	i2___lwdiv@divisor,w,c
  6928  001530  5C01               	subwf	i2___lwdiv@dividend,w,c
  6929  001532  5004               	movf	i2___lwdiv@divisor+1,w,c
  6930  001534  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  6931  001536  A0D8               	btfss	status,0,c
  6932  001538  D005               	goto	i2l2397
  6933  00153A  5003               	movf	i2___lwdiv@divisor,w,c
  6934  00153C  5E01               	subwf	i2___lwdiv@dividend,f,c
  6935  00153E  5004               	movf	i2___lwdiv@divisor+1,w,c
  6936  001540  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  6937  001542  8005               	bsf	i2___lwdiv@quotient,0,c
  6938  001544                     i2l2397:
  6939  001544  90D8               	bcf	status,0,c
  6940  001546  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  6941  001548  3203               	rrcf	i2___lwdiv@divisor,f,c
  6942  00154A  2E07               	decfsz	i2___lwdiv@counter,f,c
  6943  00154C  D7ED               	goto	i2l2389
  6944  00154E                     i2l792:
  6945  00154E  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  6946  001552  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  6947  001556  0012               	return		;funcret
  6948  001558                     __end_ofi2___lwdiv:
  6949                           	opt stack 0
  6950                           pclatu	equ	0xFFB
  6951                           pclath	equ	0xFFA
  6952                           tblptru	equ	0xFF8
  6953                           tblptrh	equ	0xFF7
  6954                           tblptrl	equ	0xFF6
  6955                           tablat	equ	0xFF5
  6956                           prodh	equ	0xFF4
  6957                           prodl	equ	0xFF3
  6958                           intcon	equ	0xFF2
  6959                           intcon3	equ	0xFF0
  6960                           postinc0	equ	0xFEE
  6961                           fsr0h	equ	0xFEA
  6962                           fsr0l	equ	0xFE9
  6963                           wreg	equ	0xFE8
  6964                           fsr1h	equ	0xFE2
  6965                           fsr1l	equ	0xFE1
  6966                           indf2	equ	0xFDF
  6967                           postinc2	equ	0xFDE
  6968                           postdec2	equ	0xFDD
  6969                           fsr2h	equ	0xFDA
  6970                           fsr2l	equ	0xFD9
  6971                           status	equ	0xFD8
  6972                           
  6973 ;; *************** function i2_initLCD *****************
  6974 ;; Defined at:
  6975 ;;		line 14 in file "lcd.c"
  6976 ;; Parameters:    Size  Location     Type
  6977 ;;		None
  6978 ;; Auto vars:     Size  Location     Type
  6979 ;;		None
  6980 ;; Return value:  Size  Location     Type
  6981 ;;                  1    wreg      void 
  6982 ;; Registers used:
  6983 ;;		wreg, status,2, status,0, cstack
  6984 ;; Tracked objects:
  6985 ;;		On entry : 0/0
  6986 ;;		On exit  : 0/0
  6987 ;;		Unchanged: 0/0
  6988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6991 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6992 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6993 ;;Total ram usage:        1 bytes
  6994 ;; Hardware stack levels used:    1
  6995 ;; Hardware stack levels required when called:    2
  6996 ;; This function calls:
  6997 ;;		i2_lcdInst
  6998 ;; This function is called by:
  6999 ;;		_keypressed
  7000 ;;		_tot_sorted
  7001 ;;		_op_time
  7002 ;;		_tin_results
  7003 ;;		_pop_results
  7004 ;; This function uses a non-reentrant model
  7005 ;;
  7006                           
  7007                           	psect	text34
  7008  0015EC                     __ptext34:
  7009                           	opt stack 0
  7010  0015EC                     i2_initLCD:
  7011                           	opt stack 22
  7012                           
  7013                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  7014                           
  7015                           ;incstack = 0
  7016  0015EC  0E31               	movlw	49
  7017  0015EE  6E04               	movwf	??i2_initLCD& (0+255),c
  7018  0015F0  0EB2               	movlw	178
  7019  0015F2                     i2u395_47:
  7020  0015F2  2EE8               	decfsz	wreg,f,c
  7021  0015F4  D7FE               	bra	i2u395_47
  7022  0015F6  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  7023  0015F8  D7FC               	bra	i2u395_47
  7024  0015FA  D000               	nop2	
  7025                           
  7026                           ;lcd.c: 16: lcdInst(0b00110011);
  7027  0015FC  0E33               	movlw	51
  7028  0015FE  EC14  F00C         	call	i2_lcdInst
  7029                           
  7030                           ;lcd.c: 17: lcdInst(0b00110010);
  7031  001602  0E32               	movlw	50
  7032  001604  EC14  F00C         	call	i2_lcdInst
  7033                           
  7034                           ;lcd.c: 18: lcdInst(0b00101000);
  7035  001608  0E28               	movlw	40
  7036  00160A  EC14  F00C         	call	i2_lcdInst
  7037                           
  7038                           ;lcd.c: 19: lcdInst(0b00001111);
  7039  00160E  0E0F               	movlw	15
  7040  001610  EC14  F00C         	call	i2_lcdInst
  7041                           
  7042                           ;lcd.c: 20: lcdInst(0b00000110);
  7043  001614  0E06               	movlw	6
  7044  001616  EC14  F00C         	call	i2_lcdInst
  7045                           
  7046                           ;lcd.c: 21: lcdInst(0b00000001);
  7047  00161A  0E01               	movlw	1
  7048  00161C  EC14  F00C         	call	i2_lcdInst
  7049                           
  7050                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  7051  001620  0E31               	movlw	49
  7052  001622  6E04               	movwf	??i2_initLCD& (0+255),c
  7053  001624  0EB2               	movlw	178
  7054  001626                     i2u396_47:
  7055  001626  2EE8               	decfsz	wreg,f,c
  7056  001628  D7FE               	bra	i2u396_47
  7057  00162A  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  7058  00162C  D7FC               	bra	i2u396_47
  7059  00162E  D000               	nop2	
  7060  001630  0012               	return		;funcret
  7061  001632                     __end_ofi2_initLCD:
  7062                           	opt stack 0
  7063                           pclatu	equ	0xFFB
  7064                           pclath	equ	0xFFA
  7065                           tblptru	equ	0xFF8
  7066                           tblptrh	equ	0xFF7
  7067                           tblptrl	equ	0xFF6
  7068                           tablat	equ	0xFF5
  7069                           prodh	equ	0xFF4
  7070                           prodl	equ	0xFF3
  7071                           intcon	equ	0xFF2
  7072                           intcon3	equ	0xFF0
  7073                           postinc0	equ	0xFEE
  7074                           fsr0h	equ	0xFEA
  7075                           fsr0l	equ	0xFE9
  7076                           wreg	equ	0xFE8
  7077                           fsr1h	equ	0xFE2
  7078                           fsr1l	equ	0xFE1
  7079                           indf2	equ	0xFDF
  7080                           postinc2	equ	0xFDE
  7081                           postdec2	equ	0xFDD
  7082                           fsr2h	equ	0xFDA
  7083                           fsr2l	equ	0xFD9
  7084                           status	equ	0xFD8
  7085                           
  7086 ;; *************** function i2_lcdInst *****************
  7087 ;; Defined at:
  7088 ;;		line 25 in file "lcd.c"
  7089 ;; Parameters:    Size  Location     Type
  7090 ;;  data            1    wreg     unsigned char 
  7091 ;; Auto vars:     Size  Location     Type
  7092 ;;  data            1    2[COMRAM] unsigned char 
  7093 ;; Return value:  Size  Location     Type
  7094 ;;                  1    wreg      void 
  7095 ;; Registers used:
  7096 ;;		wreg, status,2, status,0, cstack
  7097 ;; Tracked objects:
  7098 ;;		On entry : 0/0
  7099 ;;		On exit  : 0/0
  7100 ;;		Unchanged: 0/0
  7101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7103 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7105 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7106 ;;Total ram usage:        1 bytes
  7107 ;; Hardware stack levels used:    1
  7108 ;; Hardware stack levels required when called:    1
  7109 ;; This function calls:
  7110 ;;		i2_lcdNibble
  7111 ;; This function is called by:
  7112 ;;		_keypressed
  7113 ;;		_tin_results
  7114 ;;		_pop_results
  7115 ;;		i2_initLCD
  7116 ;; This function uses a non-reentrant model
  7117 ;;
  7118                           
  7119                           	psect	text35
  7120  001828                     __ptext35:
  7121                           	opt stack 0
  7122  001828                     i2_lcdInst:
  7123                           	opt stack 23
  7124                           
  7125                           ;incstack = 0
  7126                           ;i2lcdInst@data stored from wreg
  7127  001828  6E03               	movwf	i2lcdInst@data,c
  7128                           
  7129                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  7130  00182A  948C               	bcf	3980,2,c	;volatile
  7131                           
  7132                           ;lcd.c: 27: lcdNibble(data);
  7133  00182C  5003               	movf	i2lcdInst@data,w,c
  7134  00182E  EC58  F00A         	call	i2_lcdNibble
  7135  001832  0012               	return		;funcret
  7136  001834                     __end_ofi2_lcdInst:
  7137                           	opt stack 0
  7138                           pclatu	equ	0xFFB
  7139                           pclath	equ	0xFFA
  7140                           tblptru	equ	0xFF8
  7141                           tblptrh	equ	0xFF7
  7142                           tblptrl	equ	0xFF6
  7143                           tablat	equ	0xFF5
  7144                           prodh	equ	0xFF4
  7145                           prodl	equ	0xFF3
  7146                           intcon	equ	0xFF2
  7147                           intcon3	equ	0xFF0
  7148                           postinc0	equ	0xFEE
  7149                           fsr0h	equ	0xFEA
  7150                           fsr0l	equ	0xFE9
  7151                           wreg	equ	0xFE8
  7152                           fsr1h	equ	0xFE2
  7153                           fsr1l	equ	0xFE1
  7154                           indf2	equ	0xFDF
  7155                           postinc2	equ	0xFDE
  7156                           postdec2	equ	0xFDD
  7157                           fsr2h	equ	0xFDA
  7158                           fsr2l	equ	0xFD9
  7159                           status	equ	0xFD8
  7160                           
  7161 ;; *************** function i2_lcdNibble *****************
  7162 ;; Defined at:
  7163 ;;		line 35 in file "lcd.c"
  7164 ;; Parameters:    Size  Location     Type
  7165 ;;  data            1    wreg     unsigned char 
  7166 ;; Auto vars:     Size  Location     Type
  7167 ;;  data            1    1[COMRAM] unsigned char 
  7168 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  7169 ;; Return value:  Size  Location     Type
  7170 ;;                  1    wreg      void 
  7171 ;; Registers used:
  7172 ;;		wreg, status,2, status,0
  7173 ;; Tracked objects:
  7174 ;;		On entry : 0/0
  7175 ;;		On exit  : 0/0
  7176 ;;		Unchanged: 0/0
  7177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7179 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7181 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7182 ;;Total ram usage:        2 bytes
  7183 ;; Hardware stack levels used:    1
  7184 ;; This function calls:
  7185 ;;		Nothing
  7186 ;; This function is called by:
  7187 ;;		i2_lcdInst
  7188 ;;		i2_putch
  7189 ;; This function uses a non-reentrant model
  7190 ;;
  7191                           
  7192                           	psect	text36
  7193  0014B0                     __ptext36:
  7194                           	opt stack 0
  7195  0014B0                     i2_lcdNibble:
  7196                           	opt stack 22
  7197                           
  7198                           ;incstack = 0
  7199                           ;i2lcdNibble@data stored from wreg
  7200  0014B0  6E02               	movwf	i2lcdNibble@data,c
  7201                           
  7202                           ;lcd.c: 37: char temp = data & 0xF0;
  7203  0014B2  5002               	movf	i2lcdNibble@data,w,c
  7204  0014B4  0BF0               	andlw	240
  7205  0014B6  6E01               	movwf	i2lcdNibble@temp,c
  7206                           
  7207                           ;lcd.c: 38: LATD = LATD & 0x0F;
  7208  0014B8  508C               	movf	3980,w,c	;volatile
  7209  0014BA  0B0F               	andlw	15
  7210  0014BC  6E8C               	movwf	3980,c	;volatile
  7211                           
  7212                           ;lcd.c: 39: LATD = temp | LATD;
  7213  0014BE  5001               	movf	i2lcdNibble@temp,w,c
  7214  0014C0  108C               	iorwf	3980,w,c	;volatile
  7215  0014C2  6E8C               	movwf	3980,c	;volatile
  7216                           
  7217                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  7218  0014C4  968C               	bcf	3980,3,c	;volatile
  7219                           
  7220                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
  7221  0014C6  0E14               	movlw	20
  7222  0014C8                     i2u397_47:
  7223  0014C8  2EE8               	decfsz	wreg,f,c
  7224  0014CA  D7FE               	bra	i2u397_47
  7225  0014CC  D000               	nop2	
  7226                           
  7227                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  7228  0014CE  868C               	bsf	3980,3,c	;volatile
  7229                           
  7230                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
  7231  0014D0  0E14               	movlw	20
  7232  0014D2                     i2u398_47:
  7233  0014D2  2EE8               	decfsz	wreg,f,c
  7234  0014D4  D7FE               	bra	i2u398_47
  7235  0014D6  D000               	nop2	
  7236                           
  7237                           ;lcd.c: 46: data = data << 4;
  7238  0014D8  3802               	swapf	i2lcdNibble@data,w,c
  7239  0014DA  0BF0               	andlw	240
  7240  0014DC  6E02               	movwf	i2lcdNibble@data,c
  7241                           
  7242                           ;lcd.c: 48: temp = data & 0xF0;
  7243  0014DE  5002               	movf	i2lcdNibble@data,w,c
  7244  0014E0  0BF0               	andlw	240
  7245  0014E2  6E01               	movwf	i2lcdNibble@temp,c
  7246                           
  7247                           ;lcd.c: 49: LATD = LATD & 0x0F;
  7248  0014E4  508C               	movf	3980,w,c	;volatile
  7249  0014E6  0B0F               	andlw	15
  7250  0014E8  6E8C               	movwf	3980,c	;volatile
  7251                           
  7252                           ;lcd.c: 50: LATD = temp | LATD;
  7253  0014EA  5001               	movf	i2lcdNibble@temp,w,c
  7254  0014EC  108C               	iorwf	3980,w,c	;volatile
  7255  0014EE  6E8C               	movwf	3980,c	;volatile
  7256                           
  7257                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  7258  0014F0  968C               	bcf	3980,3,c	;volatile
  7259                           
  7260                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
  7261  0014F2  0E14               	movlw	20
  7262  0014F4                     i2u399_47:
  7263  0014F4  2EE8               	decfsz	wreg,f,c
  7264  0014F6  D7FE               	bra	i2u399_47
  7265  0014F8  D000               	nop2	
  7266                           
  7267                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  7268  0014FA  868C               	bsf	3980,3,c	;volatile
  7269                           
  7270                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
  7271  0014FC  0E14               	movlw	20
  7272  0014FE                     i2u400_47:
  7273  0014FE  2EE8               	decfsz	wreg,f,c
  7274  001500  D7FE               	bra	i2u400_47
  7275  001502  D000               	nop2	
  7276  001504  0012               	return		;funcret
  7277  001506                     __end_ofi2_lcdNibble:
  7278                           	opt stack 0
  7279                           pclatu	equ	0xFFB
  7280                           pclath	equ	0xFFA
  7281                           tblptru	equ	0xFF8
  7282                           tblptrh	equ	0xFF7
  7283                           tblptrl	equ	0xFF6
  7284                           tablat	equ	0xFF5
  7285                           prodh	equ	0xFF4
  7286                           prodl	equ	0xFF3
  7287                           intcon	equ	0xFF2
  7288                           intcon3	equ	0xFF0
  7289                           postinc0	equ	0xFEE
  7290                           fsr0h	equ	0xFEA
  7291                           fsr0l	equ	0xFE9
  7292                           wreg	equ	0xFE8
  7293                           fsr1h	equ	0xFE2
  7294                           fsr1l	equ	0xFE1
  7295                           indf2	equ	0xFDF
  7296                           postinc2	equ	0xFDE
  7297                           postdec2	equ	0xFDD
  7298                           fsr2h	equ	0xFDA
  7299                           fsr2l	equ	0xFD9
  7300                           status	equ	0xFD8
  7301                           
  7302 ;; *************** function i2___awdiv *****************
  7303 ;; Defined at:
  7304 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awdiv.c"
  7305 ;; Parameters:    Size  Location     Type
  7306 ;;  dividend        2    0[COMRAM] int 
  7307 ;;  divisor         2    2[COMRAM] int 
  7308 ;; Auto vars:     Size  Location     Type
  7309 ;;  __awdiv         2    6[COMRAM] int 
  7310 ;;  __awdiv         1    5[COMRAM] unsigned char 
  7311 ;;  __awdiv         1    4[COMRAM] unsigned char 
  7312 ;; Return value:  Size  Location     Type
  7313 ;;                  2    0[COMRAM] int 
  7314 ;; Registers used:
  7315 ;;		wreg, status,2, status,0
  7316 ;; Tracked objects:
  7317 ;;		On entry : 0/0
  7318 ;;		On exit  : 0/0
  7319 ;;		Unchanged: 0/0
  7320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7321 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7322 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7324 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7325 ;;Total ram usage:        8 bytes
  7326 ;; Hardware stack levels used:    1
  7327 ;; This function calls:
  7328 ;;		Nothing
  7329 ;; This function is called by:
  7330 ;;		_op_time
  7331 ;; This function uses a non-reentrant model
  7332 ;;
  7333                           
  7334                           	psect	text37
  7335  0010E6                     __ptext37:
  7336                           	opt stack 0
  7337  0010E6                     i2___awdiv:
  7338                           	opt stack 23
  7339                           
  7340                           ;incstack = 0
  7341  0010E6  0E00               	movlw	0
  7342  0010E8  6E06               	movwf	i2___awdiv@sign,c
  7343  0010EA  AE04               	btfss	i2___awdiv@divisor+1,7,c
  7344  0010EC  D006               	goto	i2l2725
  7345  0010EE  6C03               	negf	i2___awdiv@divisor,c
  7346  0010F0  1E04               	comf	i2___awdiv@divisor+1,f,c
  7347  0010F2  B0D8               	btfsc	status,0,c
  7348  0010F4  2A04               	incf	i2___awdiv@divisor+1,f,c
  7349  0010F6  0E01               	movlw	1
  7350  0010F8  6E06               	movwf	i2___awdiv@sign,c
  7351  0010FA                     i2l2725:
  7352  0010FA  AE02               	btfss	i2___awdiv@dividend+1,7,c
  7353  0010FC  D006               	goto	i2l2731
  7354  0010FE  6C01               	negf	i2___awdiv@dividend,c
  7355  001100  1E02               	comf	i2___awdiv@dividend+1,f,c
  7356  001102  B0D8               	btfsc	status,0,c
  7357  001104  2A02               	incf	i2___awdiv@dividend+1,f,c
  7358  001106  0E01               	movlw	1
  7359  001108  1A06               	xorwf	i2___awdiv@sign,f,c
  7360  00110A                     i2l2731:
  7361  00110A  0E00               	movlw	0
  7362  00110C  6E08               	movwf	i2___awdiv@quotient+1,c
  7363  00110E  0E00               	movlw	0
  7364  001110  6E07               	movwf	i2___awdiv@quotient,c
  7365  001112  5003               	movf	i2___awdiv@divisor,w,c
  7366  001114  1004               	iorwf	i2___awdiv@divisor+1,w,c
  7367  001116  B4D8               	btfsc	status,2,c
  7368  001118  D01C               	goto	i2l2753
  7369  00111A  0E01               	movlw	1
  7370  00111C  6E05               	movwf	i2___awdiv@counter,c
  7371  00111E  D004               	goto	i2l2739
  7372  001120                     i2l2737:
  7373  001120  90D8               	bcf	status,0,c
  7374  001122  3603               	rlcf	i2___awdiv@divisor,f,c
  7375  001124  3604               	rlcf	i2___awdiv@divisor+1,f,c
  7376  001126  2A05               	incf	i2___awdiv@counter,f,c
  7377  001128                     i2l2739:
  7378  001128  AE04               	btfss	i2___awdiv@divisor+1,7,c
  7379  00112A  D7FA               	goto	i2l2737
  7380  00112C                     i2l2741:
  7381  00112C  90D8               	bcf	status,0,c
  7382  00112E  3607               	rlcf	i2___awdiv@quotient,f,c
  7383  001130  3608               	rlcf	i2___awdiv@quotient+1,f,c
  7384  001132  5003               	movf	i2___awdiv@divisor,w,c
  7385  001134  5C01               	subwf	i2___awdiv@dividend,w,c
  7386  001136  5004               	movf	i2___awdiv@divisor+1,w,c
  7387  001138  5802               	subwfb	i2___awdiv@dividend+1,w,c
  7388  00113A  A0D8               	btfss	status,0,c
  7389  00113C  D005               	goto	i2l2749
  7390  00113E  5003               	movf	i2___awdiv@divisor,w,c
  7391  001140  5E01               	subwf	i2___awdiv@dividend,f,c
  7392  001142  5004               	movf	i2___awdiv@divisor+1,w,c
  7393  001144  5A02               	subwfb	i2___awdiv@dividend+1,f,c
  7394  001146  8007               	bsf	i2___awdiv@quotient,0,c
  7395  001148                     i2l2749:
  7396  001148  90D8               	bcf	status,0,c
  7397  00114A  3204               	rrcf	i2___awdiv@divisor+1,f,c
  7398  00114C  3203               	rrcf	i2___awdiv@divisor,f,c
  7399  00114E  2E05               	decfsz	i2___awdiv@counter,f,c
  7400  001150  D7ED               	goto	i2l2741
  7401  001152                     i2l2753:
  7402  001152  5006               	movf	i2___awdiv@sign,w,c
  7403  001154  B4D8               	btfsc	status,2,c
  7404  001156  D004               	goto	i2l2757
  7405  001158  6C07               	negf	i2___awdiv@quotient,c
  7406  00115A  1E08               	comf	i2___awdiv@quotient+1,f,c
  7407  00115C  B0D8               	btfsc	status,0,c
  7408  00115E  2A08               	incf	i2___awdiv@quotient+1,f,c
  7409  001160                     i2l2757:
  7410  001160  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
  7411  001164  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  7412  001168  0012               	return	
  7413  00116A                     __end_ofi2___awdiv:
  7414                           	opt stack 0
  7415                           pclatu	equ	0xFFB
  7416                           pclath	equ	0xFFA
  7417                           tblptru	equ	0xFF8
  7418                           tblptrh	equ	0xFF7
  7419                           tblptrl	equ	0xFF6
  7420                           tablat	equ	0xFF5
  7421                           prodh	equ	0xFF4
  7422                           prodl	equ	0xFF3
  7423                           intcon	equ	0xFF2
  7424                           intcon3	equ	0xFF0
  7425                           postinc0	equ	0xFEE
  7426                           fsr0h	equ	0xFEA
  7427                           fsr0l	equ	0xFE9
  7428                           wreg	equ	0xFE8
  7429                           fsr1h	equ	0xFE2
  7430                           fsr1l	equ	0xFE1
  7431                           indf2	equ	0xFDF
  7432                           postinc2	equ	0xFDE
  7433                           postdec2	equ	0xFDD
  7434                           fsr2h	equ	0xFDA
  7435                           fsr2l	equ	0xFD9
  7436                           status	equ	0xFD8
  7437                           
  7438 ;; *************** function ___awmod *****************
  7439 ;; Defined at:
  7440 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awmod.c"
  7441 ;; Parameters:    Size  Location     Type
  7442 ;;  dividend        2    0[COMRAM] int 
  7443 ;;  divisor         2    2[COMRAM] int 
  7444 ;; Auto vars:     Size  Location     Type
  7445 ;;  sign            1    5[COMRAM] unsigned char 
  7446 ;;  counter         1    4[COMRAM] unsigned char 
  7447 ;; Return value:  Size  Location     Type
  7448 ;;                  2    0[COMRAM] int 
  7449 ;; Registers used:
  7450 ;;		wreg, status,2, status,0
  7451 ;; Tracked objects:
  7452 ;;		On entry : 0/0
  7453 ;;		On exit  : 0/0
  7454 ;;		Unchanged: 0/0
  7455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7456 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7457 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7459 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7460 ;;Total ram usage:        6 bytes
  7461 ;; Hardware stack levels used:    1
  7462 ;; This function calls:
  7463 ;;		Nothing
  7464 ;; This function is called by:
  7465 ;;		_op_time
  7466 ;; This function uses a non-reentrant model
  7467 ;;
  7468                           
  7469                           	psect	text38
  7470  001256                     __ptext38:
  7471                           	opt stack 0
  7472  001256                     ___awmod:
  7473                           	opt stack 23
  7474                           
  7475                           ;incstack = 0
  7476  001256  0E00               	movlw	0
  7477  001258  6E06               	movwf	___awmod@sign,c
  7478  00125A  AE02               	btfss	___awmod@dividend+1,7,c
  7479  00125C  D006               	goto	i2l2523
  7480  00125E  6C01               	negf	___awmod@dividend,c
  7481  001260  1E02               	comf	___awmod@dividend+1,f,c
  7482  001262  B0D8               	btfsc	status,0,c
  7483  001264  2A02               	incf	___awmod@dividend+1,f,c
  7484  001266  0E01               	movlw	1
  7485  001268  6E06               	movwf	___awmod@sign,c
  7486  00126A                     i2l2523:
  7487  00126A  AE04               	btfss	___awmod@divisor+1,7,c
  7488  00126C  D004               	goto	i2l2527
  7489  00126E  6C03               	negf	___awmod@divisor,c
  7490  001270  1E04               	comf	___awmod@divisor+1,f,c
  7491  001272  B0D8               	btfsc	status,0,c
  7492  001274  2A04               	incf	___awmod@divisor+1,f,c
  7493  001276                     i2l2527:
  7494  001276  5003               	movf	___awmod@divisor,w,c
  7495  001278  1004               	iorwf	___awmod@divisor+1,w,c
  7496  00127A  B4D8               	btfsc	status,2,c
  7497  00127C  D018               	goto	i2l2543
  7498  00127E  0E01               	movlw	1
  7499  001280  6E05               	movwf	___awmod@counter,c
  7500  001282  D004               	goto	i2l2533
  7501  001284                     i2l2531:
  7502  001284  90D8               	bcf	status,0,c
  7503  001286  3603               	rlcf	___awmod@divisor,f,c
  7504  001288  3604               	rlcf	___awmod@divisor+1,f,c
  7505  00128A  2A05               	incf	___awmod@counter,f,c
  7506  00128C                     i2l2533:
  7507  00128C  AE04               	btfss	___awmod@divisor+1,7,c
  7508  00128E  D7FA               	goto	i2l2531
  7509  001290                     i2l2535:
  7510  001290  5003               	movf	___awmod@divisor,w,c
  7511  001292  5C01               	subwf	___awmod@dividend,w,c
  7512  001294  5004               	movf	___awmod@divisor+1,w,c
  7513  001296  5802               	subwfb	___awmod@dividend+1,w,c
  7514  001298  A0D8               	btfss	status,0,c
  7515  00129A  D004               	goto	i2l2539
  7516  00129C  5003               	movf	___awmod@divisor,w,c
  7517  00129E  5E01               	subwf	___awmod@dividend,f,c
  7518  0012A0  5004               	movf	___awmod@divisor+1,w,c
  7519  0012A2  5A02               	subwfb	___awmod@dividend+1,f,c
  7520  0012A4                     i2l2539:
  7521  0012A4  90D8               	bcf	status,0,c
  7522  0012A6  3204               	rrcf	___awmod@divisor+1,f,c
  7523  0012A8  3203               	rrcf	___awmod@divisor,f,c
  7524  0012AA  2E05               	decfsz	___awmod@counter,f,c
  7525  0012AC  D7F1               	goto	i2l2535
  7526  0012AE                     i2l2543:
  7527  0012AE  5006               	movf	___awmod@sign,w,c
  7528  0012B0  B4D8               	btfsc	status,2,c
  7529  0012B2  D004               	goto	i2l2547
  7530  0012B4  6C01               	negf	___awmod@dividend,c
  7531  0012B6  1E02               	comf	___awmod@dividend+1,f,c
  7532  0012B8  B0D8               	btfsc	status,0,c
  7533  0012BA  2A02               	incf	___awmod@dividend+1,f,c
  7534  0012BC                     i2l2547:
  7535  0012BC  C001  F001         	movff	___awmod@dividend,?___awmod
  7536  0012C0  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  7537  0012C4  0012               	return	
  7538  0012C6                     __end_of___awmod:
  7539                           	opt stack 0
  7540                           pclatu	equ	0xFFB
  7541                           pclath	equ	0xFFA
  7542                           tblptru	equ	0xFF8
  7543                           tblptrh	equ	0xFF7
  7544                           tblptrl	equ	0xFF6
  7545                           tablat	equ	0xFF5
  7546                           prodh	equ	0xFF4
  7547                           prodl	equ	0xFF3
  7548                           intcon	equ	0xFF2
  7549                           intcon3	equ	0xFF0
  7550                           postinc0	equ	0xFEE
  7551                           fsr0h	equ	0xFEA
  7552                           fsr0l	equ	0xFE9
  7553                           wreg	equ	0xFE8
  7554                           fsr1h	equ	0xFE2
  7555                           fsr1l	equ	0xFE1
  7556                           indf2	equ	0xFDF
  7557                           postinc2	equ	0xFDE
  7558                           postdec2	equ	0xFDD
  7559                           fsr2h	equ	0xFDA
  7560                           fsr2l	equ	0xFD9
  7561                           status	equ	0xFD8
  7562                           pclatu	equ	0xFFB
  7563                           pclath	equ	0xFFA
  7564                           tblptru	equ	0xFF8
  7565                           tblptrh	equ	0xFF7
  7566                           tblptrl	equ	0xFF6
  7567                           tablat	equ	0xFF5
  7568                           prodh	equ	0xFF4
  7569                           prodl	equ	0xFF3
  7570                           intcon	equ	0xFF2
  7571                           intcon3	equ	0xFF0
  7572                           postinc0	equ	0xFEE
  7573                           fsr0h	equ	0xFEA
  7574                           fsr0l	equ	0xFE9
  7575                           wreg	equ	0xFE8
  7576                           fsr1h	equ	0xFE2
  7577                           fsr1l	equ	0xFE1
  7578                           indf2	equ	0xFDF
  7579                           postinc2	equ	0xFDE
  7580                           postdec2	equ	0xFDD
  7581                           fsr2h	equ	0xFDA
  7582                           fsr2l	equ	0xFD9
  7583                           status	equ	0xFD8
  7584                           
  7585                           	psect	rparam
  7586  0000                     pclatu	equ	0xFFB
  7587                           pclath	equ	0xFFA
  7588                           tblptru	equ	0xFF8
  7589                           tblptrh	equ	0xFF7
  7590                           tblptrl	equ	0xFF6
  7591                           tablat	equ	0xFF5
  7592                           prodh	equ	0xFF4
  7593                           prodl	equ	0xFF3
  7594                           intcon	equ	0xFF2
  7595                           intcon3	equ	0xFF0
  7596                           postinc0	equ	0xFEE
  7597                           fsr0h	equ	0xFEA
  7598                           fsr0l	equ	0xFE9
  7599                           wreg	equ	0xFE8
  7600                           fsr1h	equ	0xFE2
  7601                           fsr1l	equ	0xFE1
  7602                           indf2	equ	0xFDF
  7603                           postinc2	equ	0xFDE
  7604                           postdec2	equ	0xFDD
  7605                           fsr2h	equ	0xFDA
  7606                           fsr2l	equ	0xFD9
  7607                           status	equ	0xFD8
  7608                           
  7609                           	psect	temp
  7610  00004B                     btemp:
  7611                           	opt stack 0
  7612  00004B                     	ds	1
  7613  0000                     int$flags	set	btemp
  7614                           pclatu	equ	0xFFB
  7615                           pclath	equ	0xFFA
  7616                           tblptru	equ	0xFF8
  7617                           tblptrh	equ	0xFF7
  7618                           tblptrl	equ	0xFF6
  7619                           tablat	equ	0xFF5
  7620                           prodh	equ	0xFF4
  7621                           prodl	equ	0xFF3
  7622                           intcon	equ	0xFF2
  7623                           intcon3	equ	0xFF0
  7624                           postinc0	equ	0xFEE
  7625                           fsr0h	equ	0xFEA
  7626                           fsr0l	equ	0xFE9
  7627                           wreg	equ	0xFE8
  7628                           fsr1h	equ	0xFE2
  7629                           fsr1l	equ	0xFE1
  7630                           indf2	equ	0xFDF
  7631                           postinc2	equ	0xFDE
  7632                           postdec2	equ	0xFDD
  7633                           fsr2h	equ	0xFDA
  7634                           fsr2l	equ	0xFD9
  7635                           status	equ	0xFD8


Data Sizes:
    Strings     244
    Constant    42
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     62      74
    BANK0           128     71      73
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_16(CODE[8]), STR_15(CODE[17]), STR_14(CODE[17]), STR_13(CODE[17]), 
		 -> STR_12(CODE[9]), STR_11(CODE[13]), STR_10(CODE[17]), STR_9(CODE[15]), 
		 -> STR_8(CODE[13]), STR_7(CODE[13]), STR_6(CODE[15]), STR_5(CODE[15]), 
		 -> STR_4(CODE[17]), STR_3(CODE[22]), STR_2(CODE[19]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _keypressed in COMRAM

    _keypressed->i2_printf
    _tot_sorted->i2_printf
    _tin_results->i2_printf
    _pop_results->i2_printf
    _op_time->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _main->_operation
    _set_time->_I2C_Master_Write
    _results->_printf
    _operation->_startSorting
    _startSorting->_printf
    _printf->___wmul
    _putch->_lcdNibble
    ___wmul->___awdiv
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   23004
                    _I2C_Master_Init
                            _initLCD
                          _operation
                            _results
                           _set_time
 ---------------------------------------------------------------------------------
 (1) _set_time                                             1     1      0     823
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _results                                             10    10      0    5750
                                             36 BANK0     10    10      0
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                           33    31      2   15733
                                             40 BANK0     31    29      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            ___awdiv
                             ___wmul
                            _initLCD
                            _lcdInst
                             _printf
                       _startSorting
 ---------------------------------------------------------------------------------
 (2) _startSorting                                         4     4      0    5645
                                             36 BANK0      4     4      0
                            _initLCD
                     _initialization
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    4983
                                             14 BANK0     22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1316
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _initialization                                       4     4      0     136
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1145
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     724
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      65
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     503
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     395
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _keypressed                                          30    30      0   12860
                                             32 COMRAM    30    30      0
                            _op_time
                        _pop_results
                        _tin_results
                         _tot_sorted
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _tot_sorted                                           0     0      0    2203
                          i2_initLCD
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _tin_results                                          0     0      0    2338
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _pop_results                                          0     0      0    2338
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _op_time                                              0     0      0    2979
                            ___awmod
                          i2___awdiv
                          i2_initLCD
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) i2_printf                                            29    23      6    2068
                                             12 COMRAM    20    14      6
                            ___awmod (ARG)
                          i2___awdiv (ARG)
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (7) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) i2___awdiv                                            8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) ___awmod                                              6     2      4     424
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___awdiv
     ___wmul
       ___awdiv (ARG)
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
     _startSorting
       _initLCD
         _lcdInst
           _lcdNibble
       _initialization
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
           ___awdiv (ARG)
         _isdigit
         _putch
           _lcdNibble
   _results
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _set_time
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _keypressed (ROOT)
   _op_time
     ___awmod
     i2___awdiv
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   _pop_results
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   _tin_results
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   _tot_sorted
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     ___awmod (ARG)
     i2___awdiv (ARG)
     i2___lwdiv (ARG)
     i2___lwmod (ARG)
       i2___lwdiv (ARG)
     i2___wmul (ARG)
     i2_isdigit (ARG)
     i2_putch (ARG)
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     47      49       5       57.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3E      4A       1       58.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      93      34        0.0%
DATA                 0      0      93       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Feb 28 22:32:00 2017

                       l34 17E8               ___awdiv@sign 0085        ___wmul@multiplicand 008A  
       i2___lwdiv@dividend 0001                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
              __CFG_OSC$HS 000000                        l304 0D72                        l252 0018  
                      l308 0E06                        l255 00FA                        l347 0500  
                      l802 13EA                        l739 1040                        l792 11D8  
             __CFG_CPB$OFF 000000                        _PEN 007E2A               __CFG_CPD$OFF 000000  
                      _SEN 007E28                        _tot 003F               ___awmod@sign 0006  
                      prod 000FF3                        wreg 000FE8               __CFG_LVP$OFF 000000  
             __CFG_WDT$OFF 000000                       l3211 119A                       l3207 1188  
                     l3231 13B8                       l3303 0554                       l3401 1368  
                     l3209 1194                       l3305 055A                       l3219 11CA  
                     l3235 13DC                       l3227 13A6                       l3405 1372  
                     l3229 13B2                       l3341 0600                       l3317 0590  
                     l3333 05CC                       l3503 0F8C                       l3191 1760  
                     l3319 0596                       l3335 05DE                       l3263 0404  
                     l3513 0FC4                       l3361 0684                       l3353 065C  
                     l3345 0638                       l3265 0416                       l3441 1072  
                     l3515 0FD4                       l3371 06B8                       l3347 0642  
                     l3283 04C8                       l3275 0450                       l3259 03F0  
                     l3611 019E                       l3525 102E                       l3517 0FDA  
                     l3429 1738                       l3373 0704                       l3381 0764  
                     l3365 069E                       l3269 0420                       l3445 107C  
                     l3621 01C8                       l3541 147A                       l3471 0EF4  
                     l3391 1338                       l3383 076C                       l3359 0678  
                     l3287 04CE                       l3455 10BC                       l3615 01A8  
                     l3711 0EC0                       l3703 0E96                       l3551 14AA  
                     l3369 06B2                       l3385 0778                       l3449 109C  
                     l3641 03C4                       l3713 0ECA                       l3545 1484  
                     l3483 0F28                       l3395 1342                       l3379 0752  
                     l3299 0538                       l3459 10C6                       l3643 03D8  
                     l3563 005E                       l3707 0EA0                       l3731 1230  
                     l3485 0F34                       l3477 0F0A                       l3495 0F6A  
                     l3487 0F3A                       l3399 1362                       l3591 013E  
                     l3559 0054                       l3663 0DB6                       l3585 012E  
                     l3569 007E                       l3673 0DE6                       l3499 0F78  
                     l3587 0134                       l3595 015E                       l3667 0DD6  
                     l3659 0DAC                       l3693 0E54                       l3685 0E2A  
                     l3669 0DDC                       l3689 0E34                       STR_1 FFDF  
                     STR_2 FF21                       STR_3 FF0B                       STR_4 FF89  
                     STR_5 FFB8                       STR_6 FFA9                       STR_7 FFE1  
                     STR_8 FFD4                       STR_9 FF9A               _startSorting 1052  
                     _LATA 000F89                       _LATB 000F8A                       _LATC 000F8B  
                     _LATD 000F8C                       _LATE 000F8D                       u3310 1736  
                     u3465 1424                       u3707 0E42                       u3717 0EAE  
                     u3807 12F0                       u3727 014C                       u3817 131C  
                     u3737 108A                       u3827 1326                       u3747 10D4  
                     _RCEN 007E2B                       u3757 1350                       u3767 1380  
                     u3687 0DC4                       u3777 1560                       u3697 0DF4  
                     u3787 1596                       u3797 12E6                       _RSEN 007E29  
         ??_initialization 0080                       _main 11E2                       _keys FEE1  
                     fsr0h 000FEA                       fsr1h 000FE2         i2___lwdiv@quotient 0005  
                     fsr2h 000FDA                       fsr0l 000FE9                       indf2 000FDF  
                     fsr1l 000FE1                       fsr2l 000FD9                       btemp 004B  
                     prodh 000FF4                       prodl 000FF3                       start 000E  
            __CFG_IESO$OFF 000000            __end_ofi2_putch 1828         operation@total_end 00B1  
            __CFG_MCLRE$ON 000000               ___param_bank 000000                i2_lcdNibble 14B0  
             _total_second 00C7           ?_I2C_Master_Init 008D           ?_I2C_Master_Read 0001  
         ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001                      ?_main 0001  
                    _ACKEN 007E2C                      _ACKDT 007E2D            __end_of___awdiv 0F96  
                    STR_10 FF78                      STR_11 FFC7                      STR_12 FFEE  
                    STR_13 FF45                      STR_14 FF56                      STR_15 FF67  
                    STR_16 FFF7                      STR_17 FF34            __end_of___awmod 12C6  
          __end_of___lldiv 1052            ___awdiv@divisor 0082            __end_of___lwdiv 11E2  
          __end_of___lwmod 13F4                      i2l116 0D2C                      i2l347 0882  
                    i2l802 166A                      i2l792 154E            ___awdiv@counter 0084  
                    _PORTB 000F81                      _TRISA 000F92                      _TRISB 000F93  
                    _TRISC 000F94                      _TRISD 000F95                      _TRISE 000F96  
            __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000            __end_of_lcdInst 181C  
           __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000  
           __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000            __end_of_initLCD 15A2  
           __CFG_EBTRB$OFF 000000                 i2isdigit@c 0003            __end_of_dpowers FEFC  
          __end_of_isdigit 176A                      _putch 17FC            __end_of_op_time 15EC  
                    pclath 000FFA                      tablat 000FF5            __end_of_results 0ED8  
         __end_ofi2___wmul 1790                      status 000FD8         __size_ofi2___awdiv 0084  
           __CFG_PBADEN$ON 000000              i2printf@width 001E           __end_ofi2_printf 0AA2  
       __size_ofi2___lwdiv 0052         __size_ofi2___lwmod 0042          startSorting@i_490 00A7  
          __initialization 1790         __size_ofi2_lcdInst 000C               __end_of_main 1256  
             __end_of_keys FEF2                 i2printf@ap 0018         __size_ofi2_initLCD 0046  
       __size_ofi2_isdigit 001E                     ??_main 00C7              __activetblptr 000002  
        ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0081         ??_I2C_Master_Start 0081  
                   _ADCON0 000FC2                     _ADCON1 000FC1         ??_I2C_Master_Write 0083  
         ___awdiv@dividend 0080            i2lcdNibble@data 0002                     ?_putch 0001  
          i2lcdNibble@temp 0001                     _INT1IE 007F83                     _INT1IF 007F80  
                   i2l3001 0B38                     i2l3011 0B60                     i2l3003 0B3C  
                   i2l3013 0B64                     i2l3021 0B88                     i2l3103 0CC4  
                   i2l3031 0BA0                     i2l3007 0B44                     i2l3113 0CEC  
                   i2l3105 0CC8                     i2l3041 0BC8                     i2l3017 0B6C  
                   i2l3115 0CF0                     i2l3123 0D14                     i2l3051 0BF0  
                   i2l3035 0BBC                     i2l3027 0B98                     i2l2413 1660  
                   i2l2405 1640                     i2l3109 0CD0                     i2l3061 0C1C  
                   i2l3045 0BE4                     i2l3037 0BC0                     i2l2407 1648  
                   i2l3119 0CF8                     i2l3071 0C44                     i2l3047 0BE8  
                   i2l3055 0C0C                     i2l3127 0D24                     i2l2409 164C  
                   i2l3081 0C6C                     i2l3065 0C24                     i2l2531 1284  
                   i2l2523 126A                     i2l3075 0C4C                     i2l2533 128C  
                   i2l2701 09E0                     i2l2613 0850                     i2l2605 07F2  
                   i2l3085 0C74                     i2l3069 0C40                     i2l2535 1290  
                   i2l2543 12AE                     i2l2527 1276                     i2l2375 17C6  
                   i2l2703 0A24                     i2l2711 0A7A                     i2l3095 0CA0  
                   i2l3079 0C68                     i2l2385 151C                     i2l2713 0A80  
                   i2l2633 08CA                     i2l2617 0854                     i2l3089 0C90  
                   i2l2547 12BC                     i2l2539 12A4                     i2l2731 110A  
                   i2l2387 1524                     i2l2635 08CE                     i2l2715 0A88  
                   i2l3099 0CA8                     i2l2741 112C                     i2l2725 10FA  
                   i2l2397 1544                     i2l2389 1528                     i2l2709 0A6A  
                   i2l2629 08B0                     i2l2671 0954                     i2l2647 08FA  
                   i2l2663 092A                     i2l2737 1120                     i2l2753 1152  
                   i2l2649 08FE                     i2l2665 093A                     i2l2593 07B0  
                   i2l2739 1128                     i2l2691 09B4                     i2l2683 0996  
                   i2l2675 0978                     i2l2595 07BE                     i2l2757 1160  
                   i2l2749 1148                     i2l2677 0980                     i2l2589 07A0  
                   i2l2695 09C8                     i2l2599 07C4                     i2l2689 09AC  
                   i2l2699 09DA                     i2l2993 0B14                     i2l2997 0B1C  
                ??i2_putch 0003                     _SSPADD 000FC8                     _TRISC3 007CA3  
                   _TRISC4 007CA4                     _SSPBUF 000FC9             __CFG_XINST$OFF 000000  
                   ___wmul 1674                  ??___awdiv 0084             __CFG_STVREN$ON 000000  
                ??___awmod 0005                  ??___lldiv 0088                  ??___lwdiv 0084  
                ??___lwmod 008B                     clear_0 179C           ___awdiv@quotient 0086  
          ___awmod@divisor 0003            ___awmod@counter 0005                  ??_lcdInst 0082  
                   _printf 03E2             i2___awdiv@sign 0006                  ??_initLCD 0083  
             ?_pop_results 0001                  ??_isdigit 0080          __end_ofi2___awdiv 116A  
         __end_of_set_time 14B0          __end_ofi2___lwdiv 1558               __mediumconst FEE0  
        __end_ofi2___lwmod 1674                  ??_op_time 0021                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8               ?_tin_results 0001  
                ??_results 00A4          __end_ofi2_lcdInst 1834          __end_ofi2_initLCD 1632  
        __end_ofi2_isdigit 17CE                 __accesstop 0080    __end_of__initialization 17A2  
            ___rparam_used 000001       operation@total_start 00AD         i2___lwmod@dividend 0008  
           __pcstackCOMRAM 0001              __end_of_putch 180C                i2printf@idx 0017  
              i2printf@val 001B                  ?i2___wmul 0001         __size_of_lcdNibble 0068  
              i2putch@data 0003                keypressed@i 0032                  ?i2_printf 000D  
                  ??_putch 0082                 __pbssBANK0 00C7               ?i2_lcdNibble 0001  
                  ?___wmul 0088    keypressed@keypress_temp 003E                    ?_printf 008E  
       __size_of_operation 03D0                 ??i2___wmul 0005             keypressed@i_94 0033  
           keypressed@i_95 0034             keypressed@i_96 0035             keypressed@i_97 0036  
           keypressed@i_98 0037             keypressed@i_99 0038                 ??i2_printf 0013  
   operation@keypress_temp 00B6                    _SSPCON1 000FC6                    _SSPCON2 000FC5  
                  _SSPSTAT 000FC7                    i2_putch 181C          __end_of_lcdNibble 132E  
                  __Hparam 0000                    __Lparam 0000        initialization@i_504 0083  
                ?_set_time 0001                    ___awdiv 0ED8                    ___awmod 1256  
                  ___lldiv 0F96            __size_of___wmul 0036                    ___lwdiv 116A  
                  ___lwmod 1392                    __pcinit 1790                    __ramtop 1000  
                  _lcdInst 180C                    __ptext0 11E2                    __ptext1 1454  
                  __ptext2 0D68                    __ptext3 0012                    __ptext4 1052  
                  __ptext5 03E2                    __ptext6 17FC                    __ptext7 1740  
                  __ptext8 1674                    __ptext9 1392            __size_of_printf 03B4  
                  _initLCD 1558          __end_of_hexpowers FF04              i2_isdigit$766 0002  
                  _dpowers FEF2          operation@End_time 00C5                    _isdigit 1740  
           _operation$1102 00B7           ___awmod@dividend 0001             operation@i_386 00C0  
           operation@i_387 00C2                    _op_time 15A2                 _keypressed 0008  
 __size_of_I2C_Master_Init 0060   __size_of_I2C_Master_Read 002E                    _pop_can 0049  
 __size_of_I2C_Master_Wait 0014                    _tin_can 0045          __end_of_real_time FF0B  
 __size_of_I2C_Master_Stop 0008                    _results 0D68       __size_of_pop_results 0034  
           __pintcode_body 0AA2       end_of_initialization 17A2       __size_of_tin_results 0034  
            startSorting@i 00A6              __Lmediumconst FEE0                    int_func 0AA2  
      i2___wmul@multiplier 0001          __end_of_operation 03E2             _operation_time 0041  
__size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A            ___lldiv@divisor 0084  
          ___lldiv@counter 008C                 ??_set_time 0083                    printf@c 00A3  
                  printf@f 008E           I2C_Master_Init@c 008D           I2C_Master_Read@a 0081  
                  postdec2 000FDD                    postinc0 000FEE                    postinc2 000FDE  
  __size_of_initialization 0064                  _PORTBbits 000F81                  i2___awdiv 10E6  
        i2___lwdiv@divisor 0003                  i2___lwdiv 1506                  i2___lwmod 1632  
        i2___lwdiv@counter 0007          operation@keypress 00B5       results@keypress_temp 00A7  
                i2_lcdInst 1828                printf@width 00A1                  i2_initLCD 15EC  
       i2___awdiv@dividend 0001                 _tot_sorted 17CE                  i2_isdigit 17B0  
           __end_of___wmul 16AA       __size_ofi2_lcdNibble 0056              i2lcdInst@data 0003  
         i2___wmul@product 0005             __end_of_printf 0796               i2printf@flag 001D  
             i2printf@prec 001A        start_initialization 1790                ?_keypressed 0001  
       i2___awdiv@quotient 0007          __size_ofi2___wmul 0026                  i2printf@c 0020  
                i2printf@f 000D                 ?i2___awdiv 0001              ?_startSorting 0001  
               ?i2___lwdiv 0001                 ?i2___lwmod 0008          __size_ofi2_printf 030C  
        ??_I2C_Master_Init 0091          ??_I2C_Master_Read 0081          ??_I2C_Master_Wait 0080  
               ?i2_lcdInst 0001          ??_I2C_Master_Stop 0081                 ?i2_initLCD 0001  
               ?i2_isdigit 0001                   ??___wmul 008C           __CFG_LPT1OSC$OFF 000000  
                 ??_printf 0096                __pbssCOMRAM 003F              __pcstackBANK0 0080  
        i2___lwmod@divisor 000A          i2___lwmod@counter 000C             ??_startSorting 00A4  
                 ?i2_putch 0001                ?_tot_sorted 0001           _I2C_Master_Start 1846  
         _I2C_Master_Write 1834           ___lwdiv@dividend 0080          __CFG_CCP2MX$PORTC 000000  
      __size_of_keypressed 0D60                  __pintcode 0008              __pmediumconst FEE0  
                _lcdNibble 12C6                   ?___awdiv 0080                   ?___awmod 0001  
           _initialization 132E                   ?___lldiv 0080                   ?___lwdiv 0080  
                 ?___lwmod 0087          __size_of_set_time 005C                   ?_lcdInst 0001  
                 ?_initLCD 0001                   ?_isdigit 0001                   ?_op_time 0001  
                 ?_results 0001                  _hexpowers FEFC           ___lwdiv@quotient 0085  
              ??i2___awdiv 0005                ??i2___lwdiv 0005                ??i2___lwmod 000C  
           __size_of_putch 0010                  _real_time FF04            keypressed@i_100 0039  
          keypressed@i_101 003A            keypressed@i_102 003B            keypressed@i_103 003C  
          keypressed@i_104 003D                 operation@i 00C1                ??i2_lcdInst 0003  
           ___wmul@product 008C              operation@time 00B9                   _LATBbits 000F8A  
                 _LATDbits 000F8C                   _LATEbits 000F8D                ??i2_initLCD 0004  
              ??i2_isdigit 0001                   i2u400_47 14FE     __end_of_initialization 1392  
                 i2u390_47 0C56                   i2u391_47 0C7E                   i2u383_47 0B26  
                _operation 0012                   i2u392_47 0CB2                   i2u384_47 0B4E  
                 i2u393_47 0CDA                   i2u385_47 0B76                   i2u394_47 0D02  
                 i2u386_47 0BAA                   i2u395_47 15F2                   i2u387_47 0BD2  
                 i2u396_47 1626                   i2u388_47 0BFA                   i2u397_47 14C8  
                 i2u389_47 0C2E                   i2u398_47 14D2                   i2u399_47 14F4  
         __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001          ___wmul@multiplier 0088  
                 i2___wmul 176A              lcdNibble@data 0081              ??_pop_results 0021  
               printf@flag 00A0              lcdNibble@temp 0080                 printf@prec 009D  
      __size_of_tot_sorted 001A          i2___awdiv@divisor 0003          i2___awdiv@counter 0005  
            ??_tin_results 0021                   i2_printf 0796        I2C_Master_Read@temp 0082  
          initialization@i 0082              _tin_can_label 0043           __size_ofi2_putch 000C  
       keypressed@keypress 0031                   __Hrparam 0000                 ?_operation 00A8  
          ?_initialization 0001                   __Lrparam 0000         __CFG_BOREN$SBORDIS 000000  
     __end_of_startSorting 10E6           __size_of___awdiv 00BE           __size_of___awmod 0070  
    i2___wmul@multiplicand 0003           __size_of___lldiv 00BC           __size_of___lwdiv 0078  
         __size_of___lwmod 0062                _isdigit$766 0081           __size_of_lcdInst 0010  
          _I2C_Master_Init 13F4            _I2C_Master_Read 1712           __size_of_initLCD 004A  
          _I2C_Master_Wait 17E8            _I2C_Master_Stop 183E               ??_keypressed 0021  
         __size_of_isdigit 002A            ___lwdiv@divisor 0082            ___lwdiv@counter 0084  
         __size_of_op_time 004A                   __ptext10 116A                   __ptext11 132E  
                 __ptext20 17E8                   __ptext12 1558                   __ptext21 13F4  
                 __ptext13 180C                   __ptext30 17B0                   __ptext22 0F96  
                 __ptext14 12C6                   __ptext31 176A                   __ptext15 0ED8  
                 __ptext32 1632                   __ptext24 17CE                   __ptext16 1834  
                 __ptext33 1506                   __ptext25 16AA                   __ptext17 183E  
                 __ptext34 15EC                   __ptext26 16DE                   __ptext18 1846  
                 __ptext35 1828                   __ptext27 15A2                   __ptext19 1712  
                 __ptext36 14B0                   __ptext28 0796                   __ptext37 10E6  
                 __ptext29 181C                   __ptext38 1256           __size_of_results 0170  
      __end_of_pop_results 1712        __end_of_tin_results 16DE              __size_of_main 0074  
      operation@Start_time 00C3                  set_time@i 0083                   _set_time 1454  
            ??i2_lcdNibble 0001                ??_lcdNibble 0080         __end_of_keypressed 0D68  
                 int$flags 004B                  printf@idx 009A                  printf@val 009E  
                putch@data 0082   __end_of_I2C_Master_Start 184E   __end_of_I2C_Master_Write 183E  
               _INTCONbits 000FF2                   isdigit@c 0082                   intlevel2 0000  
         ___lwmod@dividend 0087           ___lldiv@dividend 0080            results@keypress 00A6  
             ??_tot_sorted 0021                ??_operation 00AA        results@restart_flag 00A8  
                 results@i 00AA                _pop_can_tab 0047                   printf@ap 009B  
  __end_of_I2C_Master_Init 1454    __end_of_I2C_Master_Read 1740    __end_of_I2C_Master_Wait 17FC  
  __end_of_I2C_Master_Stop 1846                lcdInst@data 0082        __end_ofi2_lcdNibble 1506  
         ___lldiv@quotient 0088          I2C_Master_Write@d 0081            ___lwmod@divisor 0089  
              _pop_results 16DE            ___lwmod@counter 008B         __end_of_tot_sorted 17E8  
              _tin_results 16AA               results@i_510 00AB               results@i_512 00AC  
             results@i_516 00AD      __size_of_startSorting 0094  

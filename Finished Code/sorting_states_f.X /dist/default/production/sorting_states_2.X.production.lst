

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Mar 15 16:19:23 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1
    76                           	psect	text64,global,reloc=2,class=CODE,delta=1
    77                           	psect	text65,global,reloc=2,class=CODE,delta=1
    78                           	psect	text66,global,reloc=2,class=CODE,delta=1
    79                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    81                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    83                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    84  0000                     
    85                           ; Version 1.41
    86                           ; Generated 25/01/2017 GMT
    87                           ; 
    88                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    89                           ; All rights reserved.
    90                           ; 
    91                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    92                           ; 
    93                           ; Redistribution and use in source and binary forms, with or without modification, are
    94                           ; permitted provided that the following conditions are met:
    95                           ; 
    96                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    97                           ;        conditions and the following disclaimer.
    98                           ; 
    99                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   100                           ;        of conditions and the following disclaimer in the documentation and/or other
   101                           ;        materials provided with the distribution.
   102                           ; 
   103                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   104                           ;        software without specific prior written permission.
   105                           ; 
   106                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   107                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   108                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   109                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   110                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   111                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   112                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   113                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   114                           ; 
   115                           ; 
   116                           ; Code-generator required, PIC18F4620 Definitions
   117                           ; 
   118                           ; SFR Addresses
   119  0000                     
   120                           	psect	mediumconst
   121  00FEE8                     __pmediumconst:
   122                           	opt stack 0
   123  00FEE8  00                 	db	0
   124  00FEE9                     _keys:
   125                           	opt stack 0
   126  00FEE9  31                 	db	49
   127  00FEEA  32                 	db	50
   128  00FEEB  33                 	db	51
   129  00FEEC  41                 	db	65
   130  00FEED  34                 	db	52
   131  00FEEE  35                 	db	53
   132  00FEEF  36                 	db	54
   133  00FEF0  42                 	db	66
   134  00FEF1  37                 	db	55
   135  00FEF2  38                 	db	56
   136  00FEF3  39                 	db	57
   137  00FEF4  43                 	db	67
   138  00FEF5  2A                 	db	42
   139  00FEF6  30                 	db	48
   140  00FEF7  23                 	db	35
   141  00FEF8  44                 	db	68
   142  00FEF9  00                 	db	0
   143  00FEFA                     __end_of_keys:
   144                           	opt stack 0
   145  00FEFA                     _dpowers:
   146                           	opt stack 0
   147  00FEFA  0001               	dw	1
   148  00FEFC  000A               	dw	10
   149  00FEFE  0064               	dw	100
   150  00FF00  03E8               	dw	1000
   151  00FF02  2710               	dw	10000
   152  00FF04                     __end_of_dpowers:
   153                           	opt stack 0
   154  00FF04                     _hexpowers:
   155                           	opt stack 0
   156  00FF04  0001               	dw	1
   157  00FF06  0010               	dw	16
   158  00FF08  0100               	dw	256
   159  00FF0A  1000               	dw	4096
   160  00FF0C                     __end_of_hexpowers:
   161                           	opt stack 0
   162  00FF0C                     _real_time:
   163                           	opt stack 0
   164  00FF0C  45                 	db	69
   165  00FF0D  59                 	db	89
   166  00FF0E  17                 	db	23
   167  00FF0F  04                 	db	4
   168  00FF10  31                 	db	49
   169  00FF11  02                 	db	2
   170  00FF12  17                 	db	23
   171  00FF13                     __end_of_real_time:
   172                           	opt stack 0
   173  0000                     _LATCbits	set	3979
   174  0000                     _LATBbits	set	3978
   175  0000                     _LATEbits	set	3981
   176  0000                     _PORTBbits	set	3969
   177  0000                     _INTCONbits	set	4082
   178  0000                     _ADCON1	set	4033
   179  0000                     _ADCON0	set	4034
   180  0000                     _LATE	set	3981
   181  0000                     _LATC	set	3979
   182  0000                     _LATB	set	3978
   183  0000                     _LATAbits	set	3977
   184  0000                     _LATA	set	3977
   185  0000                     _TRISE	set	3990
   186  0000                     _TRISD	set	3989
   187  0000                     _TRISC	set	3988
   188  0000                     _TRISB	set	3987
   189  0000                     _TRISA	set	3986
   190  0000                     _LATD	set	3980
   191  0000                     _LATDbits	set	3980
   192  0000                     _PORTB	set	3969
   193  0000                     _SSPBUF	set	4041
   194  0000                     _SSPADD	set	4040
   195  0000                     _SSPCON2	set	4037
   196  0000                     _SSPCON1	set	4038
   197  0000                     _SSPSTAT	set	4039
   198  0000                     _PORTCbits	set	3970
   199  0000                     _PORTAbits	set	3968
   200  0000                     _INT1IE	set	32643
   201  0000                     _INT1IF	set	32640
   202  0000                     _ACKEN	set	32300
   203  0000                     _ACKDT	set	32301
   204  0000                     _RCEN	set	32299
   205  0000                     _PEN	set	32298
   206  0000                     _RSEN	set	32297
   207  0000                     _SEN	set	32296
   208  0000                     _TRISC4	set	31908
   209  0000                     _TRISC3	set	31907
   210  00FF13                     STR_11:
   211  00FF13  54                 	db	84	;'T'
   212  00FF14  69                 	db	105	;'i'
   213  00FF15  6D                 	db	109	;'m'
   214  00FF16  65                 	db	101	;'e'
   215  00FF17  3A                 	db	58	;':'
   216  00FF18  20                 	db	32
   217  00FF19  25                 	db	37
   218  00FF1A  30                 	db	48	;'0'
   219  00FF1B  31                 	db	49	;'1'
   220  00FF1C  64                 	db	100	;'d'
   221  00FF1D  20                 	db	32
   222  00FF1E  6D                 	db	109	;'m'
   223  00FF1F  69                 	db	105	;'i'
   224  00FF20  6E                 	db	110	;'n'
   225  00FF21  20                 	db	32
   226  00FF22  25                 	db	37
   227  00FF23  30                 	db	48	;'0'
   228  00FF24  32                 	db	50	;'2'
   229  00FF25  64                 	db	100	;'d'
   230  00FF26  20                 	db	32
   231  00FF27  73                 	db	115	;'s'
   232  00FF28  00                 	db	0
   233  00FF29                     STR_10:
   234  00FF29  54                 	db	84	;'T'
   235  00FF2A  6F                 	db	111	;'o'
   236  00FF2B  74                 	db	116	;'t'
   237  00FF2C  61                 	db	97	;'a'
   238  00FF2D  6C                 	db	108	;'l'
   239  00FF2E  20                 	db	32
   240  00FF2F  53                 	db	83	;'S'
   241  00FF30  6F                 	db	111	;'o'
   242  00FF31  72                 	db	114	;'r'
   243  00FF32  74                 	db	116	;'t'
   244  00FF33  65                 	db	101	;'e'
   245  00FF34  64                 	db	100	;'d'
   246  00FF35  3A                 	db	58	;':'
   247  00FF36  20                 	db	32
   248  00FF37  25                 	db	37
   249  00FF38  30                 	db	48	;'0'
   250  00FF39  32                 	db	50	;'2'
   251  00FF3A  78                 	db	120	;'x'
   252  00FF3B  00                 	db	0
   253  00FF3C                     STR_16:
   254  00FF3C  30                 	db	48	;'0'
   255  00FF3D  31                 	db	49	;'1'
   256  00FF3E  32                 	db	50	;'2'
   257  00FF3F  33                 	db	51	;'3'
   258  00FF40  34                 	db	52	;'4'
   259  00FF41  35                 	db	53	;'5'
   260  00FF42  36                 	db	54	;'6'
   261  00FF43  37                 	db	55	;'7'
   262  00FF44  38                 	db	56	;'8'
   263  00FF45  39                 	db	57	;'9'
   264  00FF46  61                 	db	97	;'a'
   265  00FF47  62                 	db	98	;'b'
   266  00FF48  63                 	db	99	;'c'
   267  00FF49  64                 	db	100	;'d'
   268  00FF4A  65                 	db	101	;'e'
   269  00FF4B  66                 	db	102	;'f'
   270  00FF4C  00                 	db	0
   271  00FF4D                     STR_7:
   272  00FF4D  41                 	db	65	;'A'
   273  00FF4E  3A                 	db	58	;':'
   274  00FF4F  54                 	db	84	;'T'
   275  00FF50  6F                 	db	111	;'o'
   276  00FF51  74                 	db	116	;'t'
   277  00FF52  61                 	db	97	;'a'
   278  00FF53  6C                 	db	108	;'l'
   279  00FF54  20                 	db	32
   280  00FF55  20                 	db	32
   281  00FF56  20                 	db	32
   282  00FF57  42                 	db	66	;'B'
   283  00FF58  3A                 	db	58	;':'
   284  00FF59  50                 	db	80	;'P'
   285  00FF5A  6F                 	db	111	;'o'
   286  00FF5B  70                 	db	112	;'p'
   287  00FF5C  20                 	db	32
   288  00FF5D  00                 	db	0
   289  00FF5E                     STR_8:
   290  00FF5E  43                 	db	67	;'C'
   291  00FF5F  3A                 	db	58	;':'
   292  00FF60  54                 	db	84	;'T'
   293  00FF61  69                 	db	105	;'i'
   294  00FF62  6E                 	db	110	;'n'
   295  00FF63  20                 	db	32
   296  00FF64  20                 	db	32
   297  00FF65  20                 	db	32
   298  00FF66  20                 	db	32
   299  00FF67  20                 	db	32
   300  00FF68  44                 	db	68	;'D'
   301  00FF69  3A                 	db	58	;':'
   302  00FF6A  54                 	db	84	;'T'
   303  00FF6B  69                 	db	105	;'i'
   304  00FF6C  6D                 	db	109	;'m'
   305  00FF6D  65                 	db	101	;'e'
   306  00FF6E  00                 	db	0
   307  00FF6F                     STR_9:
   308  00FF6F  50                 	db	80	;'P'
   309  00FF70  72                 	db	114	;'r'
   310  00FF71  65                 	db	101	;'e'
   311  00FF72  73                 	db	115	;'s'
   312  00FF73  73                 	db	115	;'s'
   313  00FF74  20                 	db	32
   314  00FF75  30                 	db	48	;'0'
   315  00FF76  20                 	db	32
   316  00FF77  74                 	db	116	;'t'
   317  00FF78  6F                 	db	111	;'o'
   318  00FF79  20                 	db	32
   319  00FF7A  52                 	db	82	;'R'
   320  00FF7B  65                 	db	101	;'e'
   321  00FF7C  73                 	db	115	;'s'
   322  00FF7D  65                 	db	101	;'e'
   323  00FF7E  74                 	db	116	;'t'
   324  00FF7F  00                 	db	0
   325  00FF80                     STR_4:
   326  00FF80  50                 	db	80	;'P'
   327  00FF81  72                 	db	114	;'r'
   328  00FF82  65                 	db	101	;'e'
   329  00FF83  73                 	db	115	;'s'
   330  00FF84  73                 	db	115	;'s'
   331  00FF85  20                 	db	32
   332  00FF86  23                 	db	35
   333  00FF87  20                 	db	32
   334  00FF88  74                 	db	116	;'t'
   335  00FF89  6F                 	db	111	;'o'
   336  00FF8A  20                 	db	32
   337  00FF8B  53                 	db	83	;'S'
   338  00FF8C  74                 	db	116	;'t'
   339  00FF8D  61                 	db	97	;'a'
   340  00FF8E  72                 	db	114	;'r'
   341  00FF8F  74                 	db	116	;'t'
   342  00FF90  00                 	db	0
   343  00FF91                     STR_12:
   344  00FF91  57                 	db	87	;'W'
   345  00FF92  69                 	db	105	;'i'
   346  00FF93  74                 	db	116	;'t'
   347  00FF94  68                 	db	104	;'h'
   348  00FF95  20                 	db	32
   349  00FF96  4C                 	db	76	;'L'
   350  00FF97  61                 	db	97	;'a'
   351  00FF98  62                 	db	98	;'b'
   352  00FF99  65                 	db	101	;'e'
   353  00FF9A  6C                 	db	108	;'l'
   354  00FF9B  3A                 	db	58	;':'
   355  00FF9C  20                 	db	32
   356  00FF9D  25                 	db	37
   357  00FF9E  30                 	db	48	;'0'
   358  00FF9F  32                 	db	50	;'2'
   359  00FFA0  78                 	db	120	;'x'
   360  00FFA1  00                 	db	0
   361  00FFA2                     STR_14:
   362  00FFA2  57                 	db	87	;'W'
   363  00FFA3  69                 	db	105	;'i'
   364  00FFA4  74                 	db	116	;'t'
   365  00FFA5  68                 	db	104	;'h'
   366  00FFA6  20                 	db	32
   367  00FFA7  54                 	db	84	;'T'
   368  00FFA8  61                 	db	97	;'a'
   369  00FFA9  62                 	db	98	;'b'
   370  00FFAA  3A                 	db	58	;':'
   371  00FFAB  20                 	db	32
   372  00FFAC  25                 	db	37
   373  00FFAD  30                 	db	48	;'0'
   374  00FFAE  32                 	db	50	;'2'
   375  00FFAF  78                 	db	120	;'x'
   376  00FFB0  00                 	db	0
   377  00FFB1                     STR_13:
   378  00FFB1  4E                 	db	78	;'N'
   379  00FFB2  6F                 	db	111	;'o'
   380  00FFB3  20                 	db	32
   381  00FFB4  4C                 	db	76	;'L'
   382  00FFB5  61                 	db	97	;'a'
   383  00FFB6  62                 	db	98	;'b'
   384  00FFB7  65                 	db	101	;'e'
   385  00FFB8  6C                 	db	108	;'l'
   386  00FFB9  3A                 	db	58	;':'
   387  00FFBA  20                 	db	32
   388  00FFBB  25                 	db	37
   389  00FFBC  30                 	db	48	;'0'
   390  00FFBD  32                 	db	50	;'2'
   391  00FFBE  78                 	db	120	;'x'
   392  00FFBF  00                 	db	0
   393  00FFC0                     STR_3:
   394  00FFC0  25                 	db	37
   395  00FFC1  30                 	db	48	;'0'
   396  00FFC2  32                 	db	50	;'2'
   397  00FFC3  78                 	db	120	;'x'
   398  00FFC4  3A                 	db	58	;':'
   399  00FFC5  25                 	db	37
   400  00FFC6  30                 	db	48	;'0'
   401  00FFC7  32                 	db	50	;'2'
   402  00FFC8  78                 	db	120	;'x'
   403  00FFC9  3A                 	db	58	;':'
   404  00FFCA  25                 	db	37
   405  00FFCB  30                 	db	48	;'0'
   406  00FFCC  32                 	db	50	;'2'
   407  00FFCD  78                 	db	120	;'x'
   408  00FFCE  00                 	db	0
   409  00FFCF                     STR_2:
   410  00FFCF  25                 	db	37
   411  00FFD0  30                 	db	48	;'0'
   412  00FFD1  32                 	db	50	;'2'
   413  00FFD2  78                 	db	120	;'x'
   414  00FFD3  2F                 	db	47
   415  00FFD4  25                 	db	37
   416  00FFD5  30                 	db	48	;'0'
   417  00FFD6  32                 	db	50	;'2'
   418  00FFD7  78                 	db	120	;'x'
   419  00FFD8  20                 	db	32
   420  00FFD9  20                 	db	32
   421  00FFDA  20                 	db	32
   422  00FFDB  00                 	db	0
   423  00FFDC                     STR_6:
   424  00FFDC  49                 	db	73	;'I'
   425  00FFDD  6E                 	db	110	;'n'
   426  00FFDE  69                 	db	105	;'i'
   427  00FFDF  74                 	db	116	;'t'
   428  00FFE0  69                 	db	105	;'i'
   429  00FFE1  61                 	db	97	;'a'
   430  00FFE2  6C                 	db	108	;'l'
   431  00FFE3  69                 	db	105	;'i'
   432  00FFE4  7A                 	db	122	;'z'
   433  00FFE5  69                 	db	105	;'i'
   434  00FFE6  6E                 	db	110	;'n'
   435  00FFE7  67                 	db	103	;'g'
   436  00FFE8  00                 	db	0
   437  00FFE9                     STR_15:
   438  00FFE9  4E                 	db	78	;'N'
   439  00FFEA  6F                 	db	111	;'o'
   440  00FFEB  20                 	db	32
   441  00FFEC  54                 	db	84	;'T'
   442  00FFED  61                 	db	97	;'a'
   443  00FFEE  62                 	db	98	;'b'
   444  00FFEF  3A                 	db	58	;':'
   445  00FFF0  20                 	db	32
   446  00FFF1  25                 	db	37
   447  00FFF2  30                 	db	48	;'0'
   448  00FFF3  32                 	db	50	;'2'
   449  00FFF4  78                 	db	120	;'x'
   450  00FFF5  00                 	db	0
   451  00FFF6                     STR_5:
   452  00FFF6  43                 	db	67	;'C'
   453  00FFF7  6F                 	db	111	;'o'
   454  00FFF8  6D                 	db	109	;'m'
   455  00FFF9  70                 	db	112	;'p'
   456  00FFFA  6C                 	db	108	;'l'
   457  00FFFB  65                 	db	101	;'e'
   458  00FFFC  74                 	db	116	;'t'
   459  00FFFD  65                 	db	101	;'e'
   460  00FFFE  00                 	db	0
   461  0000                     
   462                           ; #config settings
   463  00FFFF  00                 	db	0	; dummy byte at the end
   464  0000                     
   465                           	psect	cinit
   466  001BA2                     __pcinit:
   467                           	opt stack 0
   468  001BA2                     start_initialization:
   469                           	opt stack 0
   470  001BA2                     __initialization:
   471                           	opt stack 0
   472                           
   473                           ; Clear objects allocated to BANK0 (39 bytes)
   474  001BA2  EE00  F0AB         	lfsr	0,__pbssBANK0
   475  001BA6  0E27               	movlw	39
   476  001BA8                     clear_0:
   477  001BA8  6AEE               	clrf	postinc0,c
   478  001BAA  06E8               	decf	wreg,f,c
   479  001BAC  E1FD               	bnz	clear_0
   480                           
   481                           ; Clear objects allocated to COMRAM (14 bytes)
   482  001BAE  EE00  F03F         	lfsr	0,__pbssCOMRAM
   483  001BB2  0E0E               	movlw	14
   484  001BB4                     clear_1:
   485  001BB4  6AEE               	clrf	postinc0,c
   486  001BB6  06E8               	decf	wreg,f,c
   487  001BB8  E1FD               	bnz	clear_1
   488  001BBA                     end_of_initialization:
   489                           	opt stack 0
   490  001BBA                     __end_of__initialization:
   491                           	opt stack 0
   492  001BBA  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   493  001BBC  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   494  001BBE  0100               	movlb	0
   495  001BC0  EFDE  F008         	goto	_main	;jump to C main() function
   496                           postinc0	equ	0xFEE
   497                           wreg	equ	0xFE8
   498                           
   499                           	psect	bssCOMRAM
   500  00003F                     __pbssCOMRAM:
   501                           	opt stack 0
   502  00003F                     _top_move:
   503                           	opt stack 0
   504  00003F                     	ds	2
   505  000041                     _tabed:
   506                           	opt stack 0
   507  000041                     	ds	2
   508  000043                     _tot:
   509                           	opt stack 0
   510  000043                     	ds	2
   511  000045                     _operation_time:
   512                           	opt stack 0
   513  000045                     	ds	2
   514  000047                     _labeled:
   515                           	opt stack 0
   516  000047                     	ds	2
   517  000049                     _bottom_move:
   518                           	opt stack 0
   519  000049                     	ds	2
   520  00004B                     _start_bottom_distribution:
   521                           	opt stack 0
   522  00004B                     	ds	2
   523                           postinc0	equ	0xFEE
   524                           wreg	equ	0xFE8
   525                           
   526                           	psect	bssBANK0
   527  0000AB                     __pbssBANK0:
   528                           	opt stack 0
   529  0000AB                     _time:
   530                           	opt stack 0
   531  0000AB                     	ds	7
   532  0000B2                     _total_end:
   533                           	opt stack 0
   534  0000B2                     	ds	4
   535  0000B6                     _total_start:
   536                           	opt stack 0
   537  0000B6                     	ds	4
   538  0000BA                     _Start_time:
   539                           	opt stack 0
   540  0000BA                     	ds	2
   541  0000BC                     _fsm1:
   542                           	opt stack 0
   543  0000BC                     	ds	2
   544  0000BE                     _start_top_distribution:
   545                           	opt stack 0
   546  0000BE                     	ds	2
   547  0000C0                     _pop_can_tab:
   548                           	opt stack 0
   549  0000C0                     	ds	2
   550  0000C2                     _pop_can:
   551                           	opt stack 0
   552  0000C2                     	ds	2
   553  0000C4                     _tin_can:
   554                           	opt stack 0
   555  0000C4                     	ds	2
   556  0000C6                     _tin_can_label:
   557                           	opt stack 0
   558  0000C6                     	ds	2
   559  0000C8                     _fsm2:
   560                           	opt stack 0
   561  0000C8                     	ds	2
   562  0000CA                     _bottomRockerState:
   563                           	opt stack 0
   564  0000CA                     	ds	2
   565  0000CC                     _bottomDistributionState:
   566                           	opt stack 0
   567  0000CC                     	ds	2
   568  0000CE                     _topDistributionState:
   569                           	opt stack 0
   570  0000CE                     	ds	2
   571  0000D0                     _topRockerState:
   572                           	opt stack 0
   573  0000D0                     	ds	2
   574                           postinc0	equ	0xFEE
   575                           wreg	equ	0xFE8
   576                           
   577                           	psect	cstackBANK0
   578  000080                     __pcstackBANK0:
   579                           	opt stack 0
   580  000080                     ??_bottom_distribution_motor_cw:
   581  000080                     ??_bottom_distribution_motor_ccw:
   582  000080                     ??_bottom_rocker_idle:
   583  000080                     ??_bottom_rocker_motor_ccw:
   584  000080                     ??_bottom_rocker_motor_cw:
   585  000080                     ??_top_distribution_motor_cw:
   586  000080                     ??_top_distribution_motor_ccw:
   587  000080                     ??_top_rocker_motor_ccw:
   588  000080                     ??_top_rocker_motor_cw:
   589  000080                     ??_isdigit:
   590  000080                     ??_I2C_Master_Wait:
   591  000080                     ??_pop_out:
   592  000080                     ??_go_back:
   593  000080                     ?___awdiv:
   594                           	opt stack 0
   595  000080                     ?___lwdiv:
   596                           	opt stack 0
   597  000080                     ?___lldiv:
   598                           	opt stack 0
   599  000080                     lcdNibble@temp:
   600                           	opt stack 0
   601  000080                     ___awdiv@dividend:
   602                           	opt stack 0
   603  000080                     ___lwdiv@dividend:
   604                           	opt stack 0
   605  000080                     ___lldiv@dividend:
   606                           	opt stack 0
   607                           
   608                           ; 4 bytes @ 0x0
   609  000080                     	ds	1
   610  000081                     I2C_Master_Read@a:
   611                           	opt stack 0
   612  000081                     lcdNibble@data:
   613                           	opt stack 0
   614  000081                     _isdigit$1388:
   615                           	opt stack 0
   616  000081                     I2C_Master_Write@d:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x1
   620  000081                     	ds	1
   621  000082                     ??_solenoids_back:
   622  000082                     I2C_Master_Read@temp:
   623                           	opt stack 0
   624  000082                     lcdInst@data:
   625                           	opt stack 0
   626  000082                     putch@data:
   627                           	opt stack 0
   628  000082                     isdigit@c:
   629                           	opt stack 0
   630  000082                     top_rocker_motor_ccw@j:
   631                           	opt stack 0
   632  000082                     bottom_rocker_motor_ccw@k:
   633                           	opt stack 0
   634  000082                     ___awdiv@divisor:
   635                           	opt stack 0
   636  000082                     ___lwdiv@divisor:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0x2
   640  000082                     	ds	1
   641  000083                     ??_initLCD:
   642  000083                     set_time@i:
   643                           	opt stack 0
   644                           
   645                           ; 1 bytes @ 0x3
   646  000083                     	ds	1
   647  000084                     ___awdiv@counter:
   648                           	opt stack 0
   649  000084                     ___lwdiv@counter:
   650                           	opt stack 0
   651  000084                     ___lldiv@divisor:
   652                           	opt stack 0
   653                           
   654                           ; 4 bytes @ 0x4
   655  000084                     	ds	1
   656  000085                     ___awdiv@sign:
   657                           	opt stack 0
   658  000085                     ___lwdiv@quotient:
   659                           	opt stack 0
   660                           
   661                           ; 2 bytes @ 0x5
   662  000085                     	ds	1
   663  000086                     ___awdiv@quotient:
   664                           	opt stack 0
   665                           
   666                           ; 2 bytes @ 0x6
   667  000086                     	ds	1
   668  000087                     ?___lwmod:
   669                           	opt stack 0
   670  000087                     ___lwmod@dividend:
   671                           	opt stack 0
   672                           
   673                           ; 2 bytes @ 0x7
   674  000087                     	ds	1
   675  000088                     ?___wmul:
   676                           	opt stack 0
   677  000088                     ___wmul@multiplier:
   678                           	opt stack 0
   679  000088                     ___lldiv@quotient:
   680                           	opt stack 0
   681                           
   682                           ; 4 bytes @ 0x8
   683  000088                     	ds	1
   684  000089                     ___lwmod@divisor:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x9
   688  000089                     	ds	1
   689  00008A                     ___wmul@multiplicand:
   690                           	opt stack 0
   691                           
   692                           ; 2 bytes @ 0xA
   693  00008A                     	ds	1
   694  00008B                     ___lwmod@counter:
   695                           	opt stack 0
   696                           
   697                           ; 1 bytes @ 0xB
   698  00008B                     	ds	1
   699  00008C                     ___lldiv@counter:
   700                           	opt stack 0
   701  00008C                     ___wmul@product:
   702                           	opt stack 0
   703                           
   704                           ; 2 bytes @ 0xC
   705  00008C                     	ds	1
   706  00008D                     I2C_Master_Init@c:
   707                           	opt stack 0
   708                           
   709                           ; 4 bytes @ 0xD
   710  00008D                     	ds	1
   711  00008E                     ?_printf:
   712                           	opt stack 0
   713  00008E                     ?_done_sorting:
   714                           	opt stack 0
   715  00008E                     printf@f:
   716                           	opt stack 0
   717                           
   718                           ; 2 bytes @ 0xE
   719  00008E                     	ds	2
   720  000090                     ??_done_sorting:
   721                           
   722                           ; 1 bytes @ 0x10
   723  000090                     	ds	1
   724  000091                     ??_I2C_Master_Init:
   725                           
   726                           ; 1 bytes @ 0x11
   727  000091                     	ds	2
   728  000093                     _done_sorting$1733:
   729                           	opt stack 0
   730                           
   731                           ; 2 bytes @ 0x13
   732  000093                     	ds	2
   733  000095                     done_sorting@total_second:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x15
   737  000095                     	ds	1
   738  000096                     ??_printf:
   739                           
   740                           ; 1 bytes @ 0x16
   741  000096                     	ds	1
   742  000097                     done_sorting@i:
   743                           	opt stack 0
   744                           
   745                           ; 1 bytes @ 0x17
   746  000097                     	ds	1
   747  000098                     done_sorting@End_time:
   748                           	opt stack 0
   749                           
   750                           ; 2 bytes @ 0x18
   751  000098                     	ds	2
   752  00009A                     printf@idx:
   753                           	opt stack 0
   754                           
   755                           ; 1 bytes @ 0x1A
   756  00009A                     	ds	1
   757  00009B                     printf@ap:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0x1B
   761  00009B                     	ds	2
   762  00009D                     printf@prec:
   763                           	opt stack 0
   764                           
   765                           ; 1 bytes @ 0x1D
   766  00009D                     	ds	1
   767  00009E                     printf@val:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x1E
   771  00009E                     	ds	2
   772  0000A0                     printf@flag:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x20
   776  0000A0                     	ds	1
   777  0000A1                     printf@width:
   778                           	opt stack 0
   779                           
   780                           ; 2 bytes @ 0x21
   781  0000A1                     	ds	2
   782  0000A3                     printf@c:
   783                           	opt stack 0
   784                           
   785                           ; 1 bytes @ 0x23
   786  0000A3                     	ds	1
   787  0000A4                     ??_standby:
   788  0000A4                     ??_results:
   789  0000A4                     ??_initialization:
   790                           
   791                           ; 1 bytes @ 0x24
   792  0000A4                     	ds	2
   793  0000A6                     standby@keypress:
   794                           	opt stack 0
   795  0000A6                     initialization@i:
   796                           	opt stack 0
   797  0000A6                     results@keypress:
   798                           	opt stack 0
   799                           
   800                           ; 1 bytes @ 0x26
   801  0000A6                     	ds	1
   802  0000A7                     ??_startSorting:
   803  0000A7                     standby@keypress_temp:
   804                           	opt stack 0
   805  0000A7                     results@keypress_temp:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x27
   809  0000A7                     	ds	1
   810  0000A8                     standby@i_741:
   811                           	opt stack 0
   812  0000A8                     results@i:
   813                           	opt stack 0
   814                           
   815                           ; 1 bytes @ 0x28
   816  0000A8                     	ds	1
   817  0000A9                     standby@i:
   818                           	opt stack 0
   819  0000A9                     startSorting@i:
   820                           	opt stack 0
   821  0000A9                     results@i_765:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0x29
   825  0000A9                     	ds	1
   826  0000AA                     results@i_767:
   827                           	opt stack 0
   828                           
   829                           ; 1 bytes @ 0x2A
   830  0000AA                     	ds	1
   831  0000AB                     postinc0	equ	0xFEE
   832                           wreg	equ	0xFE8
   833                           
   834                           ; 1 bytes @ 0x2B
   835                           
   836                           	psect	cstackCOMRAM
   837  000001                     __pcstackCOMRAM:
   838                           	opt stack 0
   839  000001                     ??i2_isdigit:
   840  000001                     ?___awmod:
   841                           	opt stack 0
   842  000001                     ?i2___wmul:
   843                           	opt stack 0
   844  000001                     ?i2___awdiv:
   845                           	opt stack 0
   846  000001                     ?i2___lwdiv:
   847                           	opt stack 0
   848  000001                     i2lcdNibble@temp:
   849                           	opt stack 0
   850  000001                     ___awmod@dividend:
   851                           	opt stack 0
   852  000001                     i2___wmul@multiplier:
   853                           	opt stack 0
   854  000001                     i2___awdiv@dividend:
   855                           	opt stack 0
   856  000001                     i2___lwdiv@dividend:
   857                           	opt stack 0
   858                           
   859                           ; 2 bytes @ 0x0
   860  000001                     	ds	1
   861  000002                     i2lcdNibble@data:
   862                           	opt stack 0
   863  000002                     i2_isdigit$1388:
   864                           	opt stack 0
   865                           
   866                           ; 1 bytes @ 0x1
   867  000002                     	ds	1
   868  000003                     i2lcdInst@data:
   869                           	opt stack 0
   870  000003                     i2putch@data:
   871                           	opt stack 0
   872  000003                     i2isdigit@c:
   873                           	opt stack 0
   874  000003                     ___awmod@divisor:
   875                           	opt stack 0
   876  000003                     i2___wmul@multiplicand:
   877                           	opt stack 0
   878  000003                     i2___awdiv@divisor:
   879                           	opt stack 0
   880  000003                     i2___lwdiv@divisor:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x2
   884  000003                     	ds	1
   885  000004                     ??i2_initLCD:
   886                           
   887                           ; 1 bytes @ 0x3
   888  000004                     	ds	1
   889  000005                     ___awmod@counter:
   890                           	opt stack 0
   891  000005                     i2___awdiv@counter:
   892                           	opt stack 0
   893  000005                     i2___wmul@product:
   894                           	opt stack 0
   895  000005                     i2___lwdiv@quotient:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x4
   899  000005                     	ds	1
   900  000006                     ___awmod@sign:
   901                           	opt stack 0
   902  000006                     i2___awdiv@sign:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0x5
   906  000006                     	ds	1
   907  000007                     i2___lwdiv@counter:
   908                           	opt stack 0
   909  000007                     i2___awdiv@quotient:
   910                           	opt stack 0
   911                           
   912                           ; 2 bytes @ 0x6
   913  000007                     	ds	1
   914  000008                     ?i2___lwmod:
   915                           	opt stack 0
   916  000008                     i2___lwmod@dividend:
   917                           	opt stack 0
   918                           
   919                           ; 2 bytes @ 0x7
   920  000008                     	ds	2
   921  00000A                     i2___lwmod@divisor:
   922                           	opt stack 0
   923                           
   924                           ; 2 bytes @ 0x9
   925  00000A                     	ds	2
   926  00000C                     i2___lwmod@counter:
   927                           	opt stack 0
   928                           
   929                           ; 1 bytes @ 0xB
   930  00000C                     	ds	1
   931  00000D                     ?i2_printf:
   932                           	opt stack 0
   933  00000D                     i2printf@f:
   934                           	opt stack 0
   935                           
   936                           ; 2 bytes @ 0xC
   937  00000D                     	ds	6
   938  000013                     ??i2_printf:
   939                           
   940                           ; 1 bytes @ 0x12
   941  000013                     	ds	4
   942  000017                     i2printf@idx:
   943                           	opt stack 0
   944                           
   945                           ; 1 bytes @ 0x16
   946  000017                     	ds	1
   947  000018                     i2printf@ap:
   948                           	opt stack 0
   949                           
   950                           ; 2 bytes @ 0x17
   951  000018                     	ds	2
   952  00001A                     i2printf@prec:
   953                           	opt stack 0
   954                           
   955                           ; 1 bytes @ 0x19
   956  00001A                     	ds	1
   957  00001B                     i2printf@val:
   958                           	opt stack 0
   959                           
   960                           ; 2 bytes @ 0x1A
   961  00001B                     	ds	2
   962  00001D                     i2printf@flag:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x1C
   966  00001D                     	ds	1
   967  00001E                     i2printf@width:
   968                           	opt stack 0
   969                           
   970                           ; 2 bytes @ 0x1D
   971  00001E                     	ds	2
   972  000020                     i2printf@c:
   973                           	opt stack 0
   974                           
   975                           ; 1 bytes @ 0x1F
   976  000020                     	ds	1
   977  000021                     ??_keypressed:
   978                           
   979                           ; 1 bytes @ 0x20
   980  000021                     	ds	16
   981  000031                     keypressed@keypress:
   982                           	opt stack 0
   983                           
   984                           ; 1 bytes @ 0x30
   985  000031                     	ds	1
   986  000032                     keypressed@i:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0x31
   990  000032                     	ds	1
   991  000033                     keypressed@i_333:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x32
   995  000033                     	ds	1
   996  000034                     keypressed@i_334:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0x33
  1000  000034                     	ds	1
  1001  000035                     keypressed@i_335:
  1002                           	opt stack 0
  1003                           
  1004                           ; 1 bytes @ 0x34
  1005  000035                     	ds	1
  1006  000036                     keypressed@i_336:
  1007                           	opt stack 0
  1008                           
  1009                           ; 1 bytes @ 0x35
  1010  000036                     	ds	1
  1011  000037                     keypressed@i_337:
  1012                           	opt stack 0
  1013                           
  1014                           ; 1 bytes @ 0x36
  1015  000037                     	ds	1
  1016  000038                     keypressed@i_338:
  1017                           	opt stack 0
  1018                           
  1019                           ; 1 bytes @ 0x37
  1020  000038                     	ds	1
  1021  000039                     keypressed@i_339:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x38
  1025  000039                     	ds	1
  1026  00003A                     keypressed@i_340:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0x39
  1030  00003A                     	ds	1
  1031  00003B                     keypressed@i_341:
  1032                           	opt stack 0
  1033                           
  1034                           ; 1 bytes @ 0x3A
  1035  00003B                     	ds	1
  1036  00003C                     keypressed@i_342:
  1037                           	opt stack 0
  1038                           
  1039                           ; 1 bytes @ 0x3B
  1040  00003C                     	ds	1
  1041  00003D                     keypressed@i_343:
  1042                           	opt stack 0
  1043                           
  1044                           ; 1 bytes @ 0x3C
  1045  00003D                     	ds	1
  1046  00003E                     keypressed@keypress_temp:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x3D
  1050  00003E                     	ds	1
  1051                           postinc0	equ	0xFEE
  1052                           wreg	equ	0xFE8
  1053                           
  1054 ;;
  1055 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1056 ;;
  1057 ;; *************** function _main *****************
  1058 ;; Defined at:
  1059 ;;		line 82 in file "main.c"
  1060 ;; Parameters:    Size  Location     Type
  1061 ;;		None
  1062 ;; Auto vars:     Size  Location     Type
  1063 ;;		None
  1064 ;; Return value:  Size  Location     Type
  1065 ;;                  1    wreg      void 
  1066 ;; Registers used:
  1067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1068 ;; Tracked objects:
  1069 ;;		On entry : 0/0
  1070 ;;		On exit  : 0/0
  1071 ;;		Unchanged: 0/0
  1072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1077 ;;Total ram usage:        0 bytes
  1078 ;; Hardware stack levels required when called:   10
  1079 ;; This function calls:
  1080 ;;		_I2C_Master_Init
  1081 ;;		_done_sorting
  1082 ;;		_initLCD
  1083 ;;		_results
  1084 ;;		_set_time
  1085 ;;		_standby
  1086 ;;		_startSorting
  1087 ;; This function is called by:
  1088 ;;		Startup code after reset
  1089 ;; This function uses a non-reentrant model
  1090 ;;
  1091                           
  1092                           	psect	text0
  1093  0011BC                     __ptext0:
  1094                           	opt stack 0
  1095  0011BC                     _main:
  1096                           	opt stack 21
  1097                           
  1098                           ;main.c: 84: TRISA = 0xF6;
  1099                           
  1100                           ;incstack = 0
  1101  0011BC  0EF6               	movlw	246
  1102  0011BE  6E92               	movwf	3986,c	;volatile
  1103                           
  1104                           ;main.c: 86: TRISB = 0xF2;
  1105  0011C0  0EF2               	movlw	242
  1106  0011C2  6E93               	movwf	3987,c	;volatile
  1107                           
  1108                           ;main.c: 89: TRISC = 0x1F;
  1109  0011C4  0E1F               	movlw	31
  1110  0011C6  6E94               	movwf	3988,c	;volatile
  1111                           
  1112                           ;main.c: 90: TRISD = 0x00;
  1113  0011C8  0E00               	movlw	0
  1114  0011CA  6E95               	movwf	3989,c	;volatile
  1115                           
  1116                           ;main.c: 91: TRISE = 0x00;
  1117  0011CC  0E00               	movlw	0
  1118  0011CE  6E96               	movwf	3990,c	;volatile
  1119                           
  1120                           ;main.c: 93: LATA = 0xF6;
  1121  0011D0  0EF6               	movlw	246
  1122  0011D2  6E89               	movwf	3977,c	;volatile
  1123                           
  1124                           ;main.c: 94: LATAbits.LA2 = 0;
  1125  0011D4  9489               	bcf	3977,2,c	;volatile
  1126                           
  1127                           ;main.c: 95: LATAbits.LA3 = 0;
  1128  0011D6  9689               	bcf	3977,3,c	;volatile
  1129                           
  1130                           ;main.c: 96: LATB = 0x00;
  1131  0011D8  0E00               	movlw	0
  1132  0011DA  6E8A               	movwf	3978,c	;volatile
  1133                           
  1134                           ;main.c: 97: LATC = 0x00;
  1135  0011DC  0E00               	movlw	0
  1136  0011DE  6E8B               	movwf	3979,c	;volatile
  1137                           
  1138                           ;main.c: 98: LATD = 0x01;
  1139  0011E0  0E01               	movlw	1
  1140  0011E2  6E8C               	movwf	3980,c	;volatile
  1141                           
  1142                           ;main.c: 100: LATE = 0x08;
  1143  0011E4  0E08               	movlw	8
  1144  0011E6  6E8D               	movwf	3981,c	;volatile
  1145                           
  1146                           ;main.c: 102: ADCON0 = 0x00;
  1147  0011E8  0E00               	movlw	0
  1148  0011EA  6EC2               	movwf	4034,c	;volatile
  1149                           
  1150                           ;main.c: 103: ADCON1 = 0xFF;
  1151  0011EC  68C1               	setf	4033,c	;volatile
  1152                           
  1153                           ;main.c: 105: initLCD();
  1154  0011EE  EC1F  F00C         	call	_initLCD	;wreg free
  1155                           
  1156                           ;main.c: 106: __nop();
  1157  0011F2  F000               	nop	
  1158                           
  1159                           ;main.c: 107: __nop();
  1160  0011F4  F000               	nop	
  1161                           
  1162                           ;main.c: 108: INT1IE = 1;
  1163  0011F6  86F0               	bsf	intcon3,3,c	;volatile
  1164                           
  1165                           ;main.c: 111: I2C_Master_Init(10000);
  1166  0011F8  0E10               	movlw	16
  1167  0011FA  0100               	movlb	0	; () banked
  1168  0011FC  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  1169  0011FE  0E27               	movlw	39
  1170  001200  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1171  001202  0E00               	movlw	0
  1172  001204  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1173  001206  0E00               	movlw	0
  1174  001208  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1175  00120A  EC4B  F00B         	call	_I2C_Master_Init	;wreg free
  1176                           
  1177                           ;main.c: 112: set_time();
  1178  00120E  ECE9  F00A         	call	_set_time	;wreg free
  1179  001212                     l4887:
  1180                           
  1181                           ;main.c: 119: standby();
  1182  001212  EC04  F007         	call	_standby	;wreg free
  1183                           
  1184                           ;main.c: 122: startSorting();
  1185  001216  ECB2  F007         	call	_startSorting	;wreg free
  1186                           
  1187                           ;main.c: 125: operation_time = done_sorting();
  1188  00121A  ECFF  F004         	call	_done_sorting	;wreg free
  1189  00121E  C08E  F045         	movff	?_done_sorting,_operation_time
  1190  001222  C08F  F046         	movff	?_done_sorting+1,_operation_time+1
  1191                           
  1192                           ;main.c: 127: __nop();
  1193  001226  F000               	nop	
  1194                           
  1195                           ;main.c: 128: __nop();
  1196  001228  F000               	nop	
  1197                           
  1198                           ;main.c: 130: LATA = 0xF6;
  1199  00122A  0EF6               	movlw	246
  1200  00122C  6E89               	movwf	3977,c	;volatile
  1201                           
  1202                           ;main.c: 131: LATAbits.LA2 = 0;
  1203  00122E  9489               	bcf	3977,2,c	;volatile
  1204                           
  1205                           ;main.c: 132: LATAbits.LA3 = 0;
  1206  001230  9689               	bcf	3977,3,c	;volatile
  1207                           
  1208                           ;main.c: 133: LATB = 0x00;
  1209  001232  0E00               	movlw	0
  1210  001234  6E8A               	movwf	3978,c	;volatile
  1211                           
  1212                           ;main.c: 134: LATC = 0x00;
  1213  001236  0E00               	movlw	0
  1214  001238  6E8B               	movwf	3979,c	;volatile
  1215                           
  1216                           ;main.c: 135: LATD = 0x01;
  1217  00123A  0E01               	movlw	1
  1218  00123C  6E8C               	movwf	3980,c	;volatile
  1219                           
  1220                           ;main.c: 137: LATE = 0x08;
  1221  00123E  0E08               	movlw	8
  1222  001240  6E8D               	movwf	3981,c	;volatile
  1223                           
  1224                           ;main.c: 139: results();
  1225  001242  EC49  F006         	call	_results	;wreg free
  1226  001246  D7E5               	goto	l4887
  1227                           
  1228                           ;main.c: 140: }
  1229                           ;main.c: 141: __nop();
  1230  001248  F000               	nop	
  1231                           
  1232                           ;main.c: 142: __nop();
  1233  00124A  F000               	nop	
  1234  00124C                     __end_of_main:
  1235                           	opt stack 0
  1236                           intcon3	equ	0xFF0
  1237                           postinc0	equ	0xFEE
  1238                           wreg	equ	0xFE8
  1239                           
  1240 ;; *************** function _startSorting *****************
  1241 ;; Defined at:
  1242 ;;		line 80 in file "operation.c"
  1243 ;; Parameters:    Size  Location     Type
  1244 ;;		None
  1245 ;; Auto vars:     Size  Location     Type
  1246 ;;  i               1   41[BANK0 ] unsigned char 
  1247 ;; Return value:  Size  Location     Type
  1248 ;;                  1    wreg      void 
  1249 ;; Registers used:
  1250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1257 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1258 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1259 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1260 ;;Total ram usage:        3 bytes
  1261 ;; Hardware stack levels used:    1
  1262 ;; Hardware stack levels required when called:    9
  1263 ;; This function calls:
  1264 ;;		Absolute function
  1265 ;;		_bottom_distribution_idle
  1266 ;;		_bottom_distribution_move
  1267 ;;		_bottom_distribution_prepare
  1268 ;;		_bottom_rocker_idle
  1269 ;;		_bottom_rocker_release
  1270 ;;		_bottom_rocker_restore
  1271 ;;		_initLCD
  1272 ;;		_initialization
  1273 ;;		_lcdInst
  1274 ;;		_printf
  1275 ;;		_solenoids_back
  1276 ;;		_solenoids_out
  1277 ;;		_top_distribution_idle
  1278 ;;		_top_distribution_move
  1279 ;;		_top_distribution_prepare
  1280 ;;		_top_rocker_idle
  1281 ;;		_top_rocker_release
  1282 ;;		_top_rocker_restore
  1283 ;; This function is called by:
  1284 ;;		_main
  1285 ;; This function uses a non-reentrant model
  1286 ;;
  1287                           
  1288                           	psect	text1
  1289  000F64                     __ptext1:
  1290                           	opt stack 0
  1291  000F64                     _startSorting:
  1292                           	opt stack 21
  1293                           
  1294                           ;operation.c: 83: initialization();
  1295                           
  1296                           ;incstack = 0
  1297  000F64  EC81  F00A         	call	_initialization	;wreg free
  1298  000F68                     l4715:
  1299                           
  1300                           ;operation.c: 100: (*topRockerState)();
  1301  000F68  D801               	call	u3948
  1302  000F6A  D00A               	goto	l4717
  1303  000F6C                     u3948:
  1304  000F6C  0005               	push	
  1305  000F6E  6EFA               	movwf	pclath,c
  1306  000F70  0100               	movlb	0	; () banked
  1307  000F72  51D0               	movf	_topRockerState& (0+255),w,b
  1308  000F74  6EFD               	movwf	tosl,c
  1309  000F76  51D1               	movf	(_topRockerState+1)& (0+255),w,b
  1310  000F78  6EFE               	movwf	tosh,c
  1311  000F7A  6AFF               	clrf	tosu,c
  1312  000F7C  50FA               	movf	pclath,w,c
  1313  000F7E  0012               	return		;indir
  1314  000F80                     l4717:
  1315                           
  1316                           ;operation.c: 101: (*bottomRockerState)();
  1317  000F80  D801               	call	u3958
  1318  000F82  D00A               	goto	l4719
  1319  000F84                     u3958:
  1320  000F84  0005               	push	
  1321  000F86  6EFA               	movwf	pclath,c
  1322  000F88  0100               	movlb	0	; () banked
  1323  000F8A  51CA               	movf	_bottomRockerState& (0+255),w,b
  1324  000F8C  6EFD               	movwf	tosl,c
  1325  000F8E  51CB               	movf	(_bottomRockerState+1)& (0+255),w,b
  1326  000F90  6EFE               	movwf	tosh,c
  1327  000F92  6AFF               	clrf	tosu,c
  1328  000F94  50FA               	movf	pclath,w,c
  1329  000F96  0012               	return		;indir
  1330  000F98                     l4719:
  1331                           
  1332                           ;operation.c: 102: (*topDistributionState)();
  1333  000F98  D801               	call	u3968
  1334  000F9A  D00A               	goto	l4721
  1335  000F9C                     u3968:
  1336  000F9C  0005               	push	
  1337  000F9E  6EFA               	movwf	pclath,c
  1338  000FA0  0100               	movlb	0	; () banked
  1339  000FA2  51CE               	movf	_topDistributionState& (0+255),w,b
  1340  000FA4  6EFD               	movwf	tosl,c
  1341  000FA6  51CF               	movf	(_topDistributionState+1)& (0+255),w,b
  1342  000FA8  6EFE               	movwf	tosh,c
  1343  000FAA  6AFF               	clrf	tosu,c
  1344  000FAC  50FA               	movf	pclath,w,c
  1345  000FAE  0012               	return		;indir
  1346  000FB0                     l4721:
  1347                           
  1348                           ;operation.c: 103: (*bottomDistributionState)();
  1349  000FB0  D801               	call	u3978
  1350  000FB2  D00A               	goto	l4723
  1351  000FB4                     u3978:
  1352  000FB4  0005               	push	
  1353  000FB6  6EFA               	movwf	pclath,c
  1354  000FB8  0100               	movlb	0	; () banked
  1355  000FBA  51CC               	movf	_bottomDistributionState& (0+255),w,b
  1356  000FBC  6EFD               	movwf	tosl,c
  1357  000FBE  51CD               	movf	(_bottomDistributionState+1)& (0+255),w,b
  1358  000FC0  6EFE               	movwf	tosh,c
  1359  000FC2  6AFF               	clrf	tosu,c
  1360  000FC4  50FA               	movf	pclath,w,c
  1361  000FC6  0012               	return		;indir
  1362  000FC8                     l4723:
  1363                           
  1364                           ;operation.c: 105: LATEbits.LATE0 = 0;
  1365  000FC8  908D               	bcf	3981,0,c	;volatile
  1366                           
  1367                           ;operation.c: 106: _delay((unsigned long)((800)*(10000000/4000.0)));
  1368  000FCA  0E0B               	movlw	11
  1369  000FCC  0100               	movlb	0	; () banked
  1370  000FCE  6FA8               	movwf	(??_startSorting+1)& (0+255),b
  1371  000FD0  0E26               	movlw	38
  1372  000FD2  0100               	movlb	0	; () banked
  1373  000FD4  6FA7               	movwf	??_startSorting& (0+255),b
  1374  000FD6  0E5D               	movlw	93
  1375  000FD8                     u4117:
  1376  000FD8  2EE8               	decfsz	wreg,f,c
  1377  000FDA  D7FE               	bra	u4117
  1378  000FDC  2FA7               	decfsz	??_startSorting& (0+255),f,b
  1379  000FDE  D7FC               	bra	u4117
  1380  000FE0  2FA8               	decfsz	(??_startSorting+1)& (0+255),f,b
  1381  000FE2  D7FA               	bra	u4117
  1382  000FE4  D000               	nop2	
  1383                           
  1384                           ;operation.c: 107: LATEbits.LATE0 = 1;
  1385  000FE6  808D               	bsf	3981,0,c	;volatile
  1386                           
  1387                           ;operation.c: 113: if(fsm2>=40){
  1388  000FE8  0100               	movlb	0	; () banked
  1389  000FEA  51C9               	movf	(_fsm2+1)& (0+255),w,b
  1390  000FEC  E105               	bnz	u3980
  1391  000FEE  0E28               	movlw	40
  1392  000FF0  0100               	movlb	0	; () banked
  1393  000FF2  5DC8               	subwf	_fsm2& (0+255),w,b
  1394  000FF4  A0D8               	btfss	status,0,c
  1395  000FF6  D7B8               	goto	l4715
  1396  000FF8                     u3980:
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;operation.c: 116: lcdInst(0b10000000);;
  1400  000FF8  0E80               	movlw	128
  1401  000FFA  ECA5  F00E         	call	_lcdInst
  1402                           
  1403                           ;operation.c: 117: initLCD();
  1404  000FFE  EC1F  F00C         	call	_initLCD	;wreg free
  1405                           
  1406                           ;operation.c: 118: printf("Complete");
  1407  001002  0EF6               	movlw	low STR_5
  1408  001004  0100               	movlb	0	; () banked
  1409  001006  6F8E               	movwf	printf@f& (0+255),b
  1410  001008  0EFF               	movlw	high STR_5
  1411  00100A  0100               	movlb	0	; () banked
  1412  00100C  6F8F               	movwf	(printf@f+1)& (0+255),b
  1413  00100E  EC09  F000         	call	_printf	;wreg free
  1414                           
  1415                           ;operation.c: 119: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  1416  001012  0E00               	movlw	0
  1417  001014  0100               	movlb	0	; () banked
  1418  001016  6FA9               	movwf	startSorting@i& (0+255),b
  1419  001018                     l4737:
  1420                           
  1421                           ; BSR set to: 0
  1422  001018  0E09               	movlw	9
  1423  00101A  0100               	movlb	0	; () banked
  1424  00101C  65A9               	cpfsgt	startSorting@i& (0+255),b
  1425  00101E  D001               	goto	l4741
  1426  001020  0012               	return	
  1427  001022                     l4741:
  1428                           
  1429                           ; BSR set to: 0
  1430  001022  0E02               	movlw	2
  1431  001024  0100               	movlb	0	; () banked
  1432  001026  6FA8               	movwf	(??_startSorting+1)& (0+255),b
  1433  001028  0E3F               	movlw	63
  1434  00102A  0100               	movlb	0	; () banked
  1435  00102C  6FA7               	movwf	??_startSorting& (0+255),b
  1436  00102E  0E2B               	movlw	43
  1437  001030                     u4127:
  1438  001030  2EE8               	decfsz	wreg,f,c
  1439  001032  D7FE               	bra	u4127
  1440  001034  2FA7               	decfsz	??_startSorting& (0+255),f,b
  1441  001036  D7FC               	bra	u4127
  1442  001038  2FA8               	decfsz	(??_startSorting+1)& (0+255),f,b
  1443  00103A  D7FA               	bra	u4127
  1444  00103C  0100               	movlb	0	; () banked
  1445  00103E  2BA9               	incf	startSorting@i& (0+255),f,b
  1446  001040  D7EB               	goto	l4737
  1447  001042                     __end_of_startSorting:
  1448                           	opt stack 0
  1449                           tosu	equ	0xFFF
  1450                           tosh	equ	0xFFE
  1451                           tosl	equ	0xFFD
  1452                           pclath	equ	0xFFA
  1453                           intcon3	equ	0xFF0
  1454                           postinc0	equ	0xFEE
  1455                           wreg	equ	0xFE8
  1456                           status	equ	0xFD8
  1457                           
  1458 ;; *************** function _top_rocker_release *****************
  1459 ;; Defined at:
  1460 ;;		line 139 in file "top_rocker_fsm.c"
  1461 ;; Parameters:    Size  Location     Type
  1462 ;;		None
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;		None
  1465 ;; Return value:  Size  Location     Type
  1466 ;;                  1    wreg      void 
  1467 ;; Registers used:
  1468 ;;		wreg, status,2, status,0, cstack
  1469 ;; Tracked objects:
  1470 ;;		On entry : 0/0
  1471 ;;		On exit  : 0/0
  1472 ;;		Unchanged: 0/0
  1473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1478 ;;Total ram usage:        0 bytes
  1479 ;; Hardware stack levels used:    1
  1480 ;; Hardware stack levels required when called:    6
  1481 ;; This function calls:
  1482 ;;		_top_rocker_motor_ccw
  1483 ;; This function is called by:
  1484 ;;		_solenoids_back
  1485 ;;		_startSorting
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489                           	psect	text2
  1490  001CC2                     __ptext2:
  1491                           	opt stack 0
  1492  001CC2                     _top_rocker_release:
  1493                           	opt stack 23
  1494                           
  1495                           ;top_rocker_fsm.c: 142: top_rocker_motor_ccw();
  1496                           
  1497                           ; BSR set to: 0
  1498                           ;incstack = 0
  1499  001CC2  ECA4  F009         	call	_top_rocker_motor_ccw	;wreg free
  1500                           
  1501                           ;top_rocker_fsm.c: 147: topRockerState = top_rocker_restore;
  1502  001CC6  0E04               	movlw	low _top_rocker_restore
  1503  001CC8  0100               	movlb	0	; () banked
  1504  001CCA  6FD0               	movwf	_topRockerState& (0+255),b
  1505  001CCC  0E1D               	movlw	high _top_rocker_restore
  1506  001CCE  0100               	movlb	0	; () banked
  1507  001CD0  6FD1               	movwf	(_topRockerState+1)& (0+255),b
  1508                           
  1509                           ; BSR set to: 0
  1510                           ;top_rocker_fsm.c: 150: start_top_distribution = 1;
  1511  001CD2  0E00               	movlw	0
  1512  001CD4  0100               	movlb	0	; () banked
  1513  001CD6  6FBF               	movwf	(_start_top_distribution+1)& (0+255),b
  1514  001CD8  0E01               	movlw	1
  1515  001CDA  6FBE               	movwf	_start_top_distribution& (0+255),b
  1516  001CDC  0012               	return	
  1517  001CDE                     __end_of_top_rocker_release:
  1518                           	opt stack 0
  1519                           tosu	equ	0xFFF
  1520                           tosh	equ	0xFFE
  1521                           tosl	equ	0xFFD
  1522                           pclath	equ	0xFFA
  1523                           intcon3	equ	0xFF0
  1524                           postinc0	equ	0xFEE
  1525                           wreg	equ	0xFE8
  1526                           status	equ	0xFD8
  1527                           
  1528 ;; *************** function _solenoids_back *****************
  1529 ;; Defined at:
  1530 ;;		line 99 in file "top_rocker_fsm.c"
  1531 ;; Parameters:    Size  Location     Type
  1532 ;;		None
  1533 ;; Auto vars:     Size  Location     Type
  1534 ;;		None
  1535 ;; Return value:  Size  Location     Type
  1536 ;;                  1    wreg      void 
  1537 ;; Registers used:
  1538 ;;		wreg, status,2, status,0, cstack
  1539 ;; Tracked objects:
  1540 ;;		On entry : 0/0
  1541 ;;		On exit  : 0/0
  1542 ;;		Unchanged: 0/0
  1543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1546 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1547 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1548 ;;Total ram usage:        1 bytes
  1549 ;; Hardware stack levels used:    1
  1550 ;; Hardware stack levels required when called:    6
  1551 ;; This function calls:
  1552 ;;		_go_back
  1553 ;; This function is called by:
  1554 ;;		_solenoids_out
  1555 ;;		_startSorting
  1556 ;; This function uses a non-reentrant model
  1557 ;;
  1558                           
  1559                           	psect	text3
  1560  00179E                     __ptext3:
  1561                           	opt stack 0
  1562  00179E                     _solenoids_back:
  1563                           	opt stack 23
  1564                           
  1565                           ;top_rocker_fsm.c: 101: tabed = PORTCbits.RC1;
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;incstack = 0
  1569  00179E  A282               	btfss	3970,1,c	;volatile
  1570  0017A0  D004               	goto	u3740
  1571  0017A2  0100               	movlb	0	; () banked
  1572  0017A4  6B82               	clrf	??_solenoids_back& (0+255),b
  1573  0017A6  2B82               	incf	??_solenoids_back& (0+255),f,b
  1574  0017A8  D002               	goto	u3748
  1575  0017AA                     u3740:
  1576  0017AA  0100               	movlb	0	; () banked
  1577  0017AC  6B82               	clrf	??_solenoids_back& (0+255),b
  1578  0017AE                     u3748:
  1579  0017AE  0100               	movlb	0	; () banked
  1580  0017B0  5182               	movf	??_solenoids_back& (0+255),w,b
  1581  0017B2  6E41               	movwf	_tabed,c
  1582  0017B4  6A42               	clrf	_tabed+1,c
  1583                           
  1584                           ; BSR set to: 0
  1585                           ;top_rocker_fsm.c: 103: if(tabed){
  1586  0017B6  5041               	movf	_tabed,w,c
  1587  0017B8  1042               	iorwf	_tabed+1,w,c
  1588  0017BA  B4D8               	btfsc	status,2,c
  1589  0017BC  D008               	goto	l4553
  1590                           
  1591                           ; BSR set to: 0
  1592                           ;top_rocker_fsm.c: 104: top_move = 1;
  1593  0017BE  0E00               	movlw	0
  1594  0017C0  6E40               	movwf	_top_move+1,c
  1595  0017C2  0E01               	movlw	1
  1596  0017C4  6E3F               	movwf	_top_move,c
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;top_rocker_fsm.c: 106: pop_can_tab++;
  1600  0017C6  0100               	movlb	0	; () banked
  1601  0017C8  4BC0               	infsnz	_pop_can_tab& (0+255),f,b
  1602  0017CA  2BC1               	incf	(_pop_can_tab+1)& (0+255),f,b
  1603                           
  1604                           ;top_rocker_fsm.c: 116: }else{
  1605  0017CC  D007               	goto	l4557
  1606  0017CE                     l4553:
  1607                           
  1608                           ; BSR set to: 0
  1609                           ;top_rocker_fsm.c: 125: pop_can++;
  1610  0017CE  0100               	movlb	0	; () banked
  1611  0017D0  4BC2               	infsnz	_pop_can& (0+255),f,b
  1612  0017D2  2BC3               	incf	(_pop_can+1)& (0+255),f,b
  1613                           
  1614                           ; BSR set to: 0
  1615                           ;top_rocker_fsm.c: 126: top_move = 0;
  1616  0017D4  0E00               	movlw	0
  1617  0017D6  6E40               	movwf	_top_move+1,c
  1618  0017D8  0E00               	movlw	0
  1619  0017DA  6E3F               	movwf	_top_move,c
  1620  0017DC                     l4557:
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;top_rocker_fsm.c: 127: }
  1624                           ;top_rocker_fsm.c: 130: go_back();
  1625  0017DC  EC12  F00E         	call	_go_back	;wreg free
  1626                           
  1627                           ;top_rocker_fsm.c: 133: topRockerState = top_rocker_release;
  1628  0017E0  0EC2               	movlw	low _top_rocker_release
  1629  0017E2  0100               	movlb	0	; () banked
  1630  0017E4  6FD0               	movwf	_topRockerState& (0+255),b
  1631  0017E6  0E1C               	movlw	high _top_rocker_release
  1632  0017E8  0100               	movlb	0	; () banked
  1633  0017EA  6FD1               	movwf	(_topRockerState+1)& (0+255),b
  1634  0017EC  0012               	return	
  1635  0017EE                     __end_of_solenoids_back:
  1636                           	opt stack 0
  1637                           tosu	equ	0xFFF
  1638                           tosh	equ	0xFFE
  1639                           tosl	equ	0xFFD
  1640                           pclath	equ	0xFFA
  1641                           intcon3	equ	0xFF0
  1642                           postinc0	equ	0xFEE
  1643                           wreg	equ	0xFE8
  1644                           status	equ	0xFD8
  1645                           
  1646 ;; *************** function _solenoids_out *****************
  1647 ;; Defined at:
  1648 ;;		line 89 in file "top_rocker_fsm.c"
  1649 ;; Parameters:    Size  Location     Type
  1650 ;;		None
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;		None
  1653 ;; Return value:  Size  Location     Type
  1654 ;;                  1    wreg      void 
  1655 ;; Registers used:
  1656 ;;		wreg, status,2, status,0, cstack
  1657 ;; Tracked objects:
  1658 ;;		On entry : 0/0
  1659 ;;		On exit  : 0/0
  1660 ;;		Unchanged: 0/0
  1661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1666 ;;Total ram usage:        0 bytes
  1667 ;; Hardware stack levels used:    1
  1668 ;; Hardware stack levels required when called:    6
  1669 ;; This function calls:
  1670 ;;		_pop_out
  1671 ;; This function is called by:
  1672 ;;		_top_rocker_idle
  1673 ;;		_startSorting
  1674 ;; This function uses a non-reentrant model
  1675 ;;
  1676                           
  1677                           	psect	text4
  1678  001CF2                     __ptext4:
  1679                           	opt stack 0
  1680  001CF2                     _solenoids_out:
  1681                           	opt stack 23
  1682                           
  1683                           ;top_rocker_fsm.c: 92: pop_out();
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;incstack = 0
  1687  001CF2  EC02  F00E         	call	_pop_out	;wreg free
  1688                           
  1689                           ;top_rocker_fsm.c: 94: topRockerState = solenoids_back;
  1690  001CF6  0E9E               	movlw	low _solenoids_back
  1691  001CF8  0100               	movlb	0	; () banked
  1692  001CFA  6FD0               	movwf	_topRockerState& (0+255),b
  1693  001CFC  0E17               	movlw	high _solenoids_back
  1694  001CFE  0100               	movlb	0	; () banked
  1695  001D00  6FD1               	movwf	(_topRockerState+1)& (0+255),b
  1696  001D02  0012               	return	
  1697  001D04                     __end_of_solenoids_out:
  1698                           	opt stack 0
  1699                           tosu	equ	0xFFF
  1700                           tosh	equ	0xFFE
  1701                           tosl	equ	0xFFD
  1702                           pclath	equ	0xFFA
  1703                           intcon3	equ	0xFF0
  1704                           postinc0	equ	0xFEE
  1705                           wreg	equ	0xFE8
  1706                           status	equ	0xFD8
  1707                           
  1708 ;; *************** function _top_rocker_idle *****************
  1709 ;; Defined at:
  1710 ;;		line 50 in file "top_rocker_fsm.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;		None
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;		None
  1715 ;; Return value:  Size  Location     Type
  1716 ;;                  1    wreg      void 
  1717 ;; Registers used:
  1718 ;;		wreg, status,2, status,0, cstack
  1719 ;; Tracked objects:
  1720 ;;		On entry : 0/0
  1721 ;;		On exit  : 0/0
  1722 ;;		Unchanged: 0/0
  1723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1728 ;;Total ram usage:        0 bytes
  1729 ;; Hardware stack levels used:    1
  1730 ;; Hardware stack levels required when called:    8
  1731 ;; This function calls:
  1732 ;;		_initLCD
  1733 ;; This function is called by:
  1734 ;;		_top_rocker_initial
  1735 ;;		_top_rocker_restore
  1736 ;;		_startSorting
  1737 ;; This function uses a non-reentrant model
  1738 ;;
  1739                           
  1740                           	psect	text5
  1741  001A70                     __ptext5:
  1742                           	opt stack 0
  1743  001A70                     _top_rocker_idle:
  1744                           	opt stack 21
  1745                           
  1746                           ;top_rocker_fsm.c: 62: initLCD();
  1747                           
  1748                           ; BSR set to: 0
  1749                           ;incstack = 0
  1750  001A70  EC1F  F00C         	call	_initLCD	;wreg free
  1751                           
  1752                           ;top_rocker_fsm.c: 63: if( PORTAbits.RA2 == 1){
  1753  001A74  A480               	btfss	3968,2,c	;volatile
  1754  001A76  D004               	goto	l4533
  1755                           
  1756                           ;top_rocker_fsm.c: 65: fsm1++;
  1757  001A78  0100               	movlb	0	; () banked
  1758  001A7A  4BBC               	infsnz	_fsm1& (0+255),f,b
  1759  001A7C  2BBD               	incf	(_fsm1+1)& (0+255),f,b
  1760                           
  1761                           ;top_rocker_fsm.c: 73: }else{
  1762  001A7E  0012               	return	
  1763  001A80                     l4533:
  1764                           
  1765                           ;top_rocker_fsm.c: 82: topRockerState = solenoids_out;
  1766  001A80  0EF2               	movlw	low _solenoids_out
  1767  001A82  0100               	movlb	0	; () banked
  1768  001A84  6FD0               	movwf	_topRockerState& (0+255),b
  1769  001A86  0E1C               	movlw	high _solenoids_out
  1770  001A88  0100               	movlb	0	; () banked
  1771  001A8A  6FD1               	movwf	(_topRockerState+1)& (0+255),b
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;top_rocker_fsm.c: 83: fsm1 = 0;
  1775  001A8C  0E00               	movlw	0
  1776  001A8E  0100               	movlb	0	; () banked
  1777  001A90  6FBD               	movwf	(_fsm1+1)& (0+255),b
  1778  001A92  0E00               	movlw	0
  1779  001A94  6FBC               	movwf	_fsm1& (0+255),b
  1780                           
  1781                           ; BSR set to: 0
  1782  001A96  0012               	return	
  1783  001A98                     __end_of_top_rocker_idle:
  1784                           	opt stack 0
  1785                           tosu	equ	0xFFF
  1786                           tosh	equ	0xFFE
  1787                           tosl	equ	0xFFD
  1788                           pclath	equ	0xFFA
  1789                           intcon3	equ	0xFF0
  1790                           postinc0	equ	0xFEE
  1791                           wreg	equ	0xFE8
  1792                           status	equ	0xFD8
  1793                           
  1794 ;; *************** function _top_rocker_restore *****************
  1795 ;; Defined at:
  1796 ;;		line 155 in file "top_rocker_fsm.c"
  1797 ;; Parameters:    Size  Location     Type
  1798 ;;		None
  1799 ;; Auto vars:     Size  Location     Type
  1800 ;;		None
  1801 ;; Return value:  Size  Location     Type
  1802 ;;                  1    wreg      void 
  1803 ;; Registers used:
  1804 ;;		wreg, status,2, status,0, cstack
  1805 ;; Tracked objects:
  1806 ;;		On entry : 0/0
  1807 ;;		On exit  : 0/0
  1808 ;;		Unchanged: 0/0
  1809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1814 ;;Total ram usage:        0 bytes
  1815 ;; Hardware stack levels used:    1
  1816 ;; Hardware stack levels required when called:    6
  1817 ;; This function calls:
  1818 ;;		_top_rocker_motor_cw
  1819 ;; This function is called by:
  1820 ;;		_top_rocker_release
  1821 ;;		_startSorting
  1822 ;; This function uses a non-reentrant model
  1823 ;;
  1824                           
  1825                           	psect	text6
  1826  001D04                     __ptext6:
  1827                           	opt stack 0
  1828  001D04                     _top_rocker_restore:
  1829                           	opt stack 23
  1830                           
  1831                           ;top_rocker_fsm.c: 166: top_rocker_motor_cw();
  1832                           
  1833                           ; BSR set to: 0
  1834                           ;incstack = 0
  1835  001D04  EC4C  F00D         	call	_top_rocker_motor_cw	;wreg free
  1836                           
  1837                           ;top_rocker_fsm.c: 169: topRockerState = top_rocker_idle;
  1838  001D08  0E70               	movlw	low _top_rocker_idle
  1839  001D0A  0100               	movlb	0	; () banked
  1840  001D0C  6FD0               	movwf	_topRockerState& (0+255),b
  1841  001D0E  0E1A               	movlw	high _top_rocker_idle
  1842  001D10  0100               	movlb	0	; () banked
  1843  001D12  6FD1               	movwf	(_topRockerState+1)& (0+255),b
  1844  001D14  0012               	return	
  1845  001D16                     __end_of_top_rocker_restore:
  1846                           	opt stack 0
  1847                           tosu	equ	0xFFF
  1848                           tosh	equ	0xFFE
  1849                           tosl	equ	0xFFD
  1850                           pclath	equ	0xFFA
  1851                           intcon3	equ	0xFF0
  1852                           postinc0	equ	0xFEE
  1853                           wreg	equ	0xFE8
  1854                           status	equ	0xFD8
  1855                           
  1856 ;; *************** function _top_rocker_motor_cw *****************
  1857 ;; Defined at:
  1858 ;;		line 25 in file "motors.c"
  1859 ;; Parameters:    Size  Location     Type
  1860 ;;		None
  1861 ;; Auto vars:     Size  Location     Type
  1862 ;;		None
  1863 ;; Return value:  Size  Location     Type
  1864 ;;                  1    wreg      void 
  1865 ;; Registers used:
  1866 ;;		wreg
  1867 ;; Tracked objects:
  1868 ;;		On entry : 0/0
  1869 ;;		On exit  : 0/0
  1870 ;;		Unchanged: 0/0
  1871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1874 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1875 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1876 ;;Total ram usage:        2 bytes
  1877 ;; Hardware stack levels used:    1
  1878 ;; Hardware stack levels required when called:    5
  1879 ;; This function calls:
  1880 ;;		Nothing
  1881 ;; This function is called by:
  1882 ;;		_top_rocker_restore
  1883 ;; This function uses a non-reentrant model
  1884 ;;
  1885                           
  1886                           	psect	text7
  1887  001A98                     __ptext7:
  1888                           	opt stack 0
  1889  001A98                     _top_rocker_motor_cw:
  1890                           	opt stack 23
  1891                           
  1892                           ;motors.c: 28: LATAbits.LATA0 = 0;
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;incstack = 0
  1896  001A98  9089               	bcf	3977,0,c	;volatile
  1897                           
  1898                           ;motors.c: 29: LATAbits.LATA3 = 1;
  1899  001A9A  8689               	bsf	3977,3,c	;volatile
  1900                           
  1901                           ;motors.c: 30: _delay((unsigned long)((500)*(10000000/4000.0)));
  1902  001A9C  0E07               	movlw	7
  1903  001A9E  0100               	movlb	0	; () banked
  1904  001AA0  6F81               	movwf	(??_top_rocker_motor_cw+1)& (0+255),b
  1905  001AA2  0E58               	movlw	88
  1906  001AA4  0100               	movlb	0	; () banked
  1907  001AA6  6F80               	movwf	??_top_rocker_motor_cw& (0+255),b
  1908  001AA8  0E59               	movlw	89
  1909  001AAA                     u4137:
  1910  001AAA  2EE8               	decfsz	wreg,f,c
  1911  001AAC  D7FE               	bra	u4137
  1912  001AAE  2F80               	decfsz	??_top_rocker_motor_cw& (0+255),f,b
  1913  001AB0  D7FC               	bra	u4137
  1914  001AB2  2F81               	decfsz	(??_top_rocker_motor_cw+1)& (0+255),f,b
  1915  001AB4  D7FA               	bra	u4137
  1916  001AB6  D000               	nop2	
  1917                           
  1918                           ;motors.c: 33: LATAbits.LATA0 = 0;
  1919  001AB8  9089               	bcf	3977,0,c	;volatile
  1920                           
  1921                           ;motors.c: 34: LATAbits.LATA3 = 0;
  1922  001ABA  9689               	bcf	3977,3,c	;volatile
  1923  001ABC  0012               	return	
  1924  001ABE                     __end_of_top_rocker_motor_cw:
  1925                           	opt stack 0
  1926                           tosu	equ	0xFFF
  1927                           tosh	equ	0xFFE
  1928                           tosl	equ	0xFFD
  1929                           pclath	equ	0xFFA
  1930                           intcon3	equ	0xFF0
  1931                           postinc0	equ	0xFEE
  1932                           wreg	equ	0xFE8
  1933                           status	equ	0xFD8
  1934                           
  1935 ;; *************** function _top_rocker_motor_ccw *****************
  1936 ;; Defined at:
  1937 ;;		line 39 in file "motors.c"
  1938 ;; Parameters:    Size  Location     Type
  1939 ;;		None
  1940 ;; Auto vars:     Size  Location     Type
  1941 ;;  j               2    2[BANK0 ] int 
  1942 ;; Return value:  Size  Location     Type
  1943 ;;                  1    wreg      void 
  1944 ;; Registers used:
  1945 ;;		wreg, status,2, status,0
  1946 ;; Tracked objects:
  1947 ;;		On entry : 0/0
  1948 ;;		On exit  : 0/0
  1949 ;;		Unchanged: 0/0
  1950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1952 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1953 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1954 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1955 ;;Total ram usage:        4 bytes
  1956 ;; Hardware stack levels used:    1
  1957 ;; Hardware stack levels required when called:    5
  1958 ;; This function calls:
  1959 ;;		Nothing
  1960 ;; This function is called by:
  1961 ;;		_top_rocker_release
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           	psect	text8
  1966  001348                     __ptext8:
  1967                           	opt stack 0
  1968  001348                     _top_rocker_motor_ccw:
  1969                           	opt stack 23
  1970                           
  1971                           ;motors.c: 41: int j;
  1972                           ;motors.c: 42: for(j=0;j<=5;j++){
  1973                           
  1974                           ;incstack = 0
  1975  001348  0E00               	movlw	0
  1976  00134A  0100               	movlb	0	; () banked
  1977  00134C  6F83               	movwf	(top_rocker_motor_ccw@j+1)& (0+255),b
  1978  00134E  0E00               	movlw	0
  1979  001350  6F82               	movwf	top_rocker_motor_ccw@j& (0+255),b
  1980                           
  1981                           ; BSR set to: 0
  1982  001352  0100               	movlb	0	; () banked
  1983  001354  BF83               	btfsc	(top_rocker_motor_ccw@j+1)& (0+255),7,b
  1984  001356  D008               	goto	l607
  1985  001358  0100               	movlb	0	; () banked
  1986  00135A  5183               	movf	(top_rocker_motor_ccw@j+1)& (0+255),w,b
  1987  00135C  E12A               	bnz	l608
  1988  00135E  0E06               	movlw	6
  1989  001360  0100               	movlb	0	; () banked
  1990  001362  5D82               	subwf	top_rocker_motor_ccw@j& (0+255),w,b
  1991  001364  B0D8               	btfsc	status,0,c
  1992  001366  D025               	goto	l608
  1993  001368                     l607:
  1994                           
  1995                           ; BSR set to: 0
  1996                           ;motors.c: 44: LATAbits.LATA0 = 1;
  1997  001368  8089               	bsf	3977,0,c	;volatile
  1998                           
  1999                           ;motors.c: 45: LATAbits.LATA3 = 0;
  2000  00136A  9689               	bcf	3977,3,c	;volatile
  2001                           
  2002                           ; BSR set to: 0
  2003                           ;motors.c: 46: _delay((unsigned long)((85)*(10000000/4000.0)));
  2004  00136C  0E02               	movlw	2
  2005  00136E  0100               	movlb	0	; () banked
  2006  001370  6F81               	movwf	(??_top_rocker_motor_ccw+1)& (0+255),b
  2007  001372  0E14               	movlw	20
  2008  001374  0100               	movlb	0	; () banked
  2009  001376  6F80               	movwf	??_top_rocker_motor_ccw& (0+255),b
  2010  001378  0EF6               	movlw	246
  2011  00137A                     u4147:
  2012  00137A  2EE8               	decfsz	wreg,f,c
  2013  00137C  D7FE               	bra	u4147
  2014  00137E  2F80               	decfsz	??_top_rocker_motor_ccw& (0+255),f,b
  2015  001380  D7FC               	bra	u4147
  2016  001382  2F81               	decfsz	(??_top_rocker_motor_ccw+1)& (0+255),f,b
  2017  001384  D7FA               	bra	u4147
  2018  001386  F000               	nop	
  2019                           
  2020                           ;motors.c: 49: LATAbits.LATA0 = 0;
  2021  001388  9089               	bcf	3977,0,c	;volatile
  2022                           
  2023                           ;motors.c: 50: LATAbits.LATA3 = 0;
  2024  00138A  9689               	bcf	3977,3,c	;volatile
  2025                           
  2026                           ;motors.c: 51: _delay((unsigned long)((10)*(10000000/4000.0)));
  2027  00138C  0E21               	movlw	33
  2028  00138E  0100               	movlb	0	; () banked
  2029  001390  6F80               	movwf	??_top_rocker_motor_ccw& (0+255),b
  2030  001392  0E76               	movlw	118
  2031  001394                     u4157:
  2032  001394  2EE8               	decfsz	wreg,f,c
  2033  001396  D7FE               	bra	u4157
  2034  001398  2F80               	decfsz	??_top_rocker_motor_ccw& (0+255),f,b
  2035  00139A  D7FC               	bra	u4157
  2036  00139C  F000               	nop	
  2037  00139E  0100               	movlb	0	; () banked
  2038  0013A0  4B82               	infsnz	top_rocker_motor_ccw@j& (0+255),f,b
  2039  0013A2  2B83               	incf	(top_rocker_motor_ccw@j+1)& (0+255),f,b
  2040  0013A4  0100               	movlb	0	; () banked
  2041  0013A6  BF83               	btfsc	(top_rocker_motor_ccw@j+1)& (0+255),7,b
  2042  0013A8  D7DF               	goto	l607
  2043  0013AA  0100               	movlb	0	; () banked
  2044  0013AC  5183               	movf	(top_rocker_motor_ccw@j+1)& (0+255),w,b
  2045  0013AE  E101               	bnz	u3590
  2046  0013B0  D7D6               	goto	L1
  2047  0013B2                     u3590:
  2048  0013B2                     l608:
  2049                           
  2050                           ; BSR set to: 0
  2051                           ;motors.c: 52: }
  2052                           ;motors.c: 53: LATAbits.LATA0 = 0;
  2053  0013B2  9089               	bcf	3977,0,c	;volatile
  2054                           
  2055                           ;motors.c: 54: LATAbits.LATA3 = 0;
  2056  0013B4  9689               	bcf	3977,3,c	;volatile
  2057                           
  2058                           ; BSR set to: 0
  2059                           
  2060                           ;motors.c: 57: return;
  2061  0013B6  0012               	return		;funcret
  2062  0013B8                     __end_of_top_rocker_motor_ccw:
  2063                           	opt stack 0
  2064                           tosu	equ	0xFFF
  2065                           tosh	equ	0xFFE
  2066                           tosl	equ	0xFFD
  2067                           pclath	equ	0xFFA
  2068                           intcon3	equ	0xFF0
  2069                           postinc0	equ	0xFEE
  2070                           wreg	equ	0xFE8
  2071                           status	equ	0xFD8
  2072                           
  2073 ;; *************** function _top_distribution_move *****************
  2074 ;; Defined at:
  2075 ;;		line 81 in file "top_distribution_fsm.c"
  2076 ;; Parameters:    Size  Location     Type
  2077 ;;		None
  2078 ;; Auto vars:     Size  Location     Type
  2079 ;;		None
  2080 ;; Return value:  Size  Location     Type
  2081 ;;                  1    wreg      void 
  2082 ;; Registers used:
  2083 ;;		wreg, status,2, status,0, cstack
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2093 ;;Total ram usage:        0 bytes
  2094 ;; Hardware stack levels used:    1
  2095 ;; Hardware stack levels required when called:    6
  2096 ;; This function calls:
  2097 ;;		_top_distribution_motor_ccw
  2098 ;;		_top_distribution_motor_cw
  2099 ;; This function is called by:
  2100 ;;		_top_distribution_prepare
  2101 ;;		_startSorting
  2102 ;; This function uses a non-reentrant model
  2103 ;;
  2104                           
  2105                           	psect	text9
  2106  001BC4                     __ptext9:
  2107                           	opt stack 0
  2108  001BC4                     _top_distribution_move:
  2109                           	opt stack 23
  2110                           
  2111                           ;top_distribution_fsm.c: 85: if(top_move == 1){
  2112                           
  2113                           ; BSR set to: 0
  2114                           ;incstack = 0
  2115  001BC4  043F               	decf	_top_move,w,c
  2116  001BC6  1040               	iorwf	_top_move+1,w,c
  2117  001BC8  A4D8               	btfss	status,2,c
  2118  001BCA  D003               	goto	l4521
  2119                           
  2120                           ;top_distribution_fsm.c: 86: top_distribution_motor_ccw();
  2121  001BCC  EC72  F00D         	call	_top_distribution_motor_ccw	;wreg free
  2122                           
  2123                           ;top_distribution_fsm.c: 96: }else{
  2124  001BD0  D002               	goto	l4523
  2125  001BD2                     l4521:
  2126                           
  2127                           ;top_distribution_fsm.c: 97: top_distribution_motor_cw();
  2128  001BD2  EC5F  F00D         	call	_top_distribution_motor_cw	;wreg free
  2129  001BD6                     l4523:
  2130                           
  2131                           ;top_distribution_fsm.c: 108: }
  2132                           ;top_distribution_fsm.c: 111: topDistributionState = top_distribution_idle;
  2133  001BD6  0EBA               	movlw	low _top_distribution_idle
  2134  001BD8  0100               	movlb	0	; () banked
  2135  001BDA  6FCE               	movwf	_topDistributionState& (0+255),b
  2136  001BDC  0E19               	movlw	high _top_distribution_idle
  2137  001BDE  0100               	movlb	0	; () banked
  2138  001BE0  6FCF               	movwf	(_topDistributionState+1)& (0+255),b
  2139  001BE2  0012               	return	
  2140  001BE4                     __end_of_top_distribution_move:
  2141                           	opt stack 0
  2142                           tosu	equ	0xFFF
  2143                           tosh	equ	0xFFE
  2144                           tosl	equ	0xFFD
  2145                           pclath	equ	0xFFA
  2146                           intcon3	equ	0xFF0
  2147                           postinc0	equ	0xFEE
  2148                           wreg	equ	0xFE8
  2149                           status	equ	0xFD8
  2150                           
  2151 ;; *************** function _top_distribution_idle *****************
  2152 ;; Defined at:
  2153 ;;		line 35 in file "top_distribution_fsm.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;		None
  2156 ;; Auto vars:     Size  Location     Type
  2157 ;;		None
  2158 ;; Return value:  Size  Location     Type
  2159 ;;                  1    wreg      void 
  2160 ;; Registers used:
  2161 ;;		wreg, status,2, status,0
  2162 ;; Tracked objects:
  2163 ;;		On entry : 0/0
  2164 ;;		On exit  : 0/0
  2165 ;;		Unchanged: 0/0
  2166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2171 ;;Total ram usage:        0 bytes
  2172 ;; Hardware stack levels used:    1
  2173 ;; Hardware stack levels required when called:    5
  2174 ;; This function calls:
  2175 ;;		Nothing
  2176 ;; This function is called by:
  2177 ;;		_top_distribution_initial
  2178 ;;		_top_distribution_move
  2179 ;;		_startSorting
  2180 ;; This function uses a non-reentrant model
  2181 ;;
  2182                           
  2183                           	psect	text10
  2184  0019BA                     __ptext10:
  2185                           	opt stack 0
  2186  0019BA                     _top_distribution_idle:
  2187                           	opt stack 24
  2188                           
  2189                           ;top_distribution_fsm.c: 38: if(start_top_distribution==1){
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;incstack = 0
  2193  0019BA  0100               	movlb	0	; () banked
  2194  0019BC  05BE               	decf	_start_top_distribution& (0+255),w,b
  2195  0019BE  0100               	movlb	0	; () banked
  2196  0019C0  11BF               	iorwf	(_start_top_distribution+1)& (0+255),w,b
  2197  0019C2  A4D8               	btfss	status,2,c
  2198  0019C4  D00C               	goto	l4503
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;top_distribution_fsm.c: 40: topDistributionState = top_distribution_prepare;
  2202  0019C6  0EE4               	movlw	low _top_distribution_prepare
  2203  0019C8  0100               	movlb	0	; () banked
  2204  0019CA  6FCE               	movwf	_topDistributionState& (0+255),b
  2205  0019CC  0E1B               	movlw	high _top_distribution_prepare
  2206  0019CE  0100               	movlb	0	; () banked
  2207  0019D0  6FCF               	movwf	(_topDistributionState+1)& (0+255),b
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;top_distribution_fsm.c: 41: start_top_distribution = 0;
  2211  0019D2  0E00               	movlw	0
  2212  0019D4  0100               	movlb	0	; () banked
  2213  0019D6  6FBF               	movwf	(_start_top_distribution+1)& (0+255),b
  2214  0019D8  0E00               	movlw	0
  2215  0019DA  6FBE               	movwf	_start_top_distribution& (0+255),b
  2216                           
  2217                           ;top_distribution_fsm.c: 42: }else{
  2218  0019DC  0012               	return	
  2219  0019DE                     l4503:
  2220                           
  2221                           ; BSR set to: 0
  2222                           ;top_distribution_fsm.c: 43: topDistributionState = top_distribution_idle;
  2223  0019DE  0EBA               	movlw	low _top_distribution_idle
  2224  0019E0  0100               	movlb	0	; () banked
  2225  0019E2  6FCE               	movwf	_topDistributionState& (0+255),b
  2226  0019E4  0E19               	movlw	high _top_distribution_idle
  2227  0019E6  0100               	movlb	0	; () banked
  2228  0019E8  6FCF               	movwf	(_topDistributionState+1)& (0+255),b
  2229                           
  2230                           ; BSR set to: 0
  2231  0019EA  0012               	return	
  2232  0019EC                     __end_of_top_distribution_idle:
  2233                           	opt stack 0
  2234                           tosu	equ	0xFFF
  2235                           tosh	equ	0xFFE
  2236                           tosl	equ	0xFFD
  2237                           pclath	equ	0xFFA
  2238                           intcon3	equ	0xFF0
  2239                           postinc0	equ	0xFEE
  2240                           wreg	equ	0xFE8
  2241                           status	equ	0xFD8
  2242                           
  2243 ;; *************** function _top_distribution_prepare *****************
  2244 ;; Defined at:
  2245 ;;		line 49 in file "top_distribution_fsm.c"
  2246 ;; Parameters:    Size  Location     Type
  2247 ;;		None
  2248 ;; Auto vars:     Size  Location     Type
  2249 ;;		None
  2250 ;; Return value:  Size  Location     Type
  2251 ;;                  1    wreg      void 
  2252 ;; Registers used:
  2253 ;;		wreg, status,2, status,0, cstack
  2254 ;; Tracked objects:
  2255 ;;		On entry : 0/0
  2256 ;;		On exit  : 0/0
  2257 ;;		Unchanged: 0/0
  2258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2263 ;;Total ram usage:        0 bytes
  2264 ;; Hardware stack levels used:    1
  2265 ;; Hardware stack levels required when called:    6
  2266 ;; This function calls:
  2267 ;;		_top_distribution_motor_ccw
  2268 ;;		_top_distribution_motor_cw
  2269 ;; This function is called by:
  2270 ;;		_top_distribution_idle
  2271 ;;		_startSorting
  2272 ;; This function uses a non-reentrant model
  2273 ;;
  2274                           
  2275                           	psect	text11
  2276  001BE4                     __ptext11:
  2277                           	opt stack 0
  2278  001BE4                     _top_distribution_prepare:
  2279                           	opt stack 23
  2280                           
  2281                           ;top_distribution_fsm.c: 52: if(top_move == 1){
  2282                           
  2283                           ; BSR set to: 0
  2284                           ;incstack = 0
  2285  001BE4  043F               	decf	_top_move,w,c
  2286  001BE6  1040               	iorwf	_top_move+1,w,c
  2287  001BE8  A4D8               	btfss	status,2,c
  2288  001BEA  D003               	goto	l4511
  2289                           
  2290                           ;top_distribution_fsm.c: 54: top_distribution_motor_cw();
  2291  001BEC  EC5F  F00D         	call	_top_distribution_motor_cw	;wreg free
  2292                           
  2293                           ;top_distribution_fsm.c: 62: }else{
  2294  001BF0  D002               	goto	l4513
  2295  001BF2                     l4511:
  2296                           
  2297                           ;top_distribution_fsm.c: 64: top_distribution_motor_ccw();
  2298  001BF2  EC72  F00D         	call	_top_distribution_motor_ccw	;wreg free
  2299  001BF6                     l4513:
  2300                           
  2301                           ;top_distribution_fsm.c: 73: }
  2302                           ;top_distribution_fsm.c: 76: topDistributionState = top_distribution_move;
  2303  001BF6  0EC4               	movlw	low _top_distribution_move
  2304  001BF8  0100               	movlb	0	; () banked
  2305  001BFA  6FCE               	movwf	_topDistributionState& (0+255),b
  2306  001BFC  0E1B               	movlw	high _top_distribution_move
  2307  001BFE  0100               	movlb	0	; () banked
  2308  001C00  6FCF               	movwf	(_topDistributionState+1)& (0+255),b
  2309  001C02  0012               	return	
  2310  001C04                     __end_of_top_distribution_prepare:
  2311                           	opt stack 0
  2312                           tosu	equ	0xFFF
  2313                           tosh	equ	0xFFE
  2314                           tosl	equ	0xFFD
  2315                           pclath	equ	0xFFA
  2316                           intcon3	equ	0xFF0
  2317                           postinc0	equ	0xFEE
  2318                           wreg	equ	0xFE8
  2319                           status	equ	0xFD8
  2320                           
  2321 ;; *************** function _top_distribution_motor_cw *****************
  2322 ;; Defined at:
  2323 ;;		line 109 in file "motors.c"
  2324 ;; Parameters:    Size  Location     Type
  2325 ;;		None
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;		None
  2328 ;; Return value:  Size  Location     Type
  2329 ;;                  1    wreg      void 
  2330 ;; Registers used:
  2331 ;;		wreg
  2332 ;; Tracked objects:
  2333 ;;		On entry : 0/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2339 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2340 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2341 ;;Total ram usage:        2 bytes
  2342 ;; Hardware stack levels used:    1
  2343 ;; Hardware stack levels required when called:    5
  2344 ;; This function calls:
  2345 ;;		Nothing
  2346 ;; This function is called by:
  2347 ;;		_top_distribution_prepare
  2348 ;;		_top_distribution_move
  2349 ;; This function uses a non-reentrant model
  2350 ;;
  2351                           
  2352                           	psect	text12
  2353  001ABE                     __ptext12:
  2354                           	opt stack 0
  2355  001ABE                     _top_distribution_motor_cw:
  2356                           	opt stack 23
  2357                           
  2358                           ;motors.c: 112: LATCbits.LATC5 = 0;
  2359                           
  2360                           ; BSR set to: 0
  2361                           ;incstack = 0
  2362  001ABE  9A8B               	bcf	3979,5,c	;volatile
  2363                           
  2364                           ;motors.c: 113: LATCbits.LATC6 = 1;
  2365  001AC0  8C8B               	bsf	3979,6,c	;volatile
  2366                           
  2367                           ;motors.c: 114: _delay((unsigned long)((500)*(10000000/4000.0)));
  2368  001AC2  0E07               	movlw	7
  2369  001AC4  0100               	movlb	0	; () banked
  2370  001AC6  6F81               	movwf	(??_top_distribution_motor_cw+1)& (0+255),b
  2371  001AC8  0E58               	movlw	88
  2372  001ACA  0100               	movlb	0	; () banked
  2373  001ACC  6F80               	movwf	??_top_distribution_motor_cw& (0+255),b
  2374  001ACE  0E59               	movlw	89
  2375  001AD0                     u4167:
  2376  001AD0  2EE8               	decfsz	wreg,f,c
  2377  001AD2  D7FE               	bra	u4167
  2378  001AD4  2F80               	decfsz	??_top_distribution_motor_cw& (0+255),f,b
  2379  001AD6  D7FC               	bra	u4167
  2380  001AD8  2F81               	decfsz	(??_top_distribution_motor_cw+1)& (0+255),f,b
  2381  001ADA  D7FA               	bra	u4167
  2382  001ADC  D000               	nop2	
  2383                           
  2384                           ;motors.c: 117: LATCbits.LATC5 = 0;
  2385  001ADE  9A8B               	bcf	3979,5,c	;volatile
  2386                           
  2387                           ;motors.c: 118: LATCbits.LATC6 = 0;
  2388  001AE0  9C8B               	bcf	3979,6,c	;volatile
  2389  001AE2  0012               	return	
  2390  001AE4                     __end_of_top_distribution_motor_cw:
  2391                           	opt stack 0
  2392                           tosu	equ	0xFFF
  2393                           tosh	equ	0xFFE
  2394                           tosl	equ	0xFFD
  2395                           pclath	equ	0xFFA
  2396                           intcon3	equ	0xFF0
  2397                           postinc0	equ	0xFEE
  2398                           wreg	equ	0xFE8
  2399                           status	equ	0xFD8
  2400                           
  2401 ;; *************** function _top_distribution_motor_ccw *****************
  2402 ;; Defined at:
  2403 ;;		line 95 in file "motors.c"
  2404 ;; Parameters:    Size  Location     Type
  2405 ;;		None
  2406 ;; Auto vars:     Size  Location     Type
  2407 ;;		None
  2408 ;; Return value:  Size  Location     Type
  2409 ;;                  1    wreg      void 
  2410 ;; Registers used:
  2411 ;;		wreg
  2412 ;; Tracked objects:
  2413 ;;		On entry : 0/0
  2414 ;;		On exit  : 0/0
  2415 ;;		Unchanged: 0/0
  2416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2419 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2420 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2421 ;;Total ram usage:        2 bytes
  2422 ;; Hardware stack levels used:    1
  2423 ;; Hardware stack levels required when called:    5
  2424 ;; This function calls:
  2425 ;;		Nothing
  2426 ;; This function is called by:
  2427 ;;		_top_distribution_prepare
  2428 ;;		_top_distribution_move
  2429 ;; This function uses a non-reentrant model
  2430 ;;
  2431                           
  2432                           	psect	text13
  2433  001AE4                     __ptext13:
  2434                           	opt stack 0
  2435  001AE4                     _top_distribution_motor_ccw:
  2436                           	opt stack 23
  2437                           
  2438                           ;motors.c: 98: LATCbits.LATC5 = 1;
  2439                           
  2440                           ;incstack = 0
  2441  001AE4  8A8B               	bsf	3979,5,c	;volatile
  2442                           
  2443                           ;motors.c: 99: LATCbits.LATC6 = 0;
  2444  001AE6  9C8B               	bcf	3979,6,c	;volatile
  2445                           
  2446                           ;motors.c: 100: _delay((unsigned long)((500)*(10000000/4000.0)));
  2447  001AE8  0E07               	movlw	7
  2448  001AEA  0100               	movlb	0	; () banked
  2449  001AEC  6F81               	movwf	(??_top_distribution_motor_ccw+1)& (0+255),b
  2450  001AEE  0E58               	movlw	88
  2451  001AF0  0100               	movlb	0	; () banked
  2452  001AF2  6F80               	movwf	??_top_distribution_motor_ccw& (0+255),b
  2453  001AF4  0E59               	movlw	89
  2454  001AF6                     u4177:
  2455  001AF6  2EE8               	decfsz	wreg,f,c
  2456  001AF8  D7FE               	bra	u4177
  2457  001AFA  2F80               	decfsz	??_top_distribution_motor_ccw& (0+255),f,b
  2458  001AFC  D7FC               	bra	u4177
  2459  001AFE  2F81               	decfsz	(??_top_distribution_motor_ccw+1)& (0+255),f,b
  2460  001B00  D7FA               	bra	u4177
  2461  001B02  D000               	nop2	
  2462                           
  2463                           ;motors.c: 103: LATCbits.LATC5 = 0;
  2464  001B04  9A8B               	bcf	3979,5,c	;volatile
  2465                           
  2466                           ;motors.c: 104: LATCbits.LATC6 = 0;
  2467  001B06  9C8B               	bcf	3979,6,c	;volatile
  2468  001B08  0012               	return	
  2469  001B0A                     __end_of_top_distribution_motor_ccw:
  2470                           	opt stack 0
  2471                           tosu	equ	0xFFF
  2472                           tosh	equ	0xFFE
  2473                           tosl	equ	0xFFD
  2474                           pclath	equ	0xFFA
  2475                           intcon3	equ	0xFF0
  2476                           postinc0	equ	0xFEE
  2477                           wreg	equ	0xFE8
  2478                           status	equ	0xFD8
  2479                           
  2480 ;; *************** function _pop_out *****************
  2481 ;; Defined at:
  2482 ;;		line 25 in file "solenoids.c"
  2483 ;; Parameters:    Size  Location     Type
  2484 ;;		None
  2485 ;; Auto vars:     Size  Location     Type
  2486 ;;		None
  2487 ;; Return value:  Size  Location     Type
  2488 ;;                  1    wreg      void 
  2489 ;; Registers used:
  2490 ;;		wreg
  2491 ;; Tracked objects:
  2492 ;;		On entry : 0/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2498 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2499 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2500 ;;Total ram usage:        2 bytes
  2501 ;; Hardware stack levels used:    1
  2502 ;; Hardware stack levels required when called:    5
  2503 ;; This function calls:
  2504 ;;		Nothing
  2505 ;; This function is called by:
  2506 ;;		_solenoids_out
  2507 ;; This function uses a non-reentrant model
  2508 ;;
  2509                           
  2510                           	psect	text14
  2511  001C04                     __ptext14:
  2512                           	opt stack 0
  2513  001C04                     _pop_out:
  2514                           	opt stack 23
  2515                           
  2516                           ;solenoids.c: 27: LATDbits.LATD0 = 0;
  2517                           
  2518                           ;incstack = 0
  2519  001C04  908C               	bcf	3980,0,c	;volatile
  2520                           
  2521                           ;solenoids.c: 28: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2522  001C06  0E0D               	movlw	13
  2523  001C08  0100               	movlb	0	; () banked
  2524  001C0A  6F81               	movwf	(??_pop_out+1)& (0+255),b
  2525  001C0C  0EAF               	movlw	175
  2526  001C0E  0100               	movlb	0	; () banked
  2527  001C10  6F80               	movwf	??_pop_out& (0+255),b
  2528  001C12  0EB6               	movlw	182
  2529  001C14                     u4187:
  2530  001C14  2EE8               	decfsz	wreg,f,c
  2531  001C16  D7FE               	bra	u4187
  2532  001C18  2F80               	decfsz	??_pop_out& (0+255),f,b
  2533  001C1A  D7FC               	bra	u4187
  2534  001C1C  2F81               	decfsz	(??_pop_out+1)& (0+255),f,b
  2535  001C1E  D7FA               	bra	u4187
  2536  001C20  F000               	nop	
  2537  001C22  0012               	return	
  2538  001C24                     __end_of_pop_out:
  2539                           	opt stack 0
  2540                           tosu	equ	0xFFF
  2541                           tosh	equ	0xFFE
  2542                           tosl	equ	0xFFD
  2543                           pclath	equ	0xFFA
  2544                           intcon3	equ	0xFF0
  2545                           postinc0	equ	0xFEE
  2546                           wreg	equ	0xFE8
  2547                           status	equ	0xFD8
  2548                           
  2549 ;; *************** function _go_back *****************
  2550 ;; Defined at:
  2551 ;;		line 32 in file "solenoids.c"
  2552 ;; Parameters:    Size  Location     Type
  2553 ;;		None
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;		None
  2556 ;; Return value:  Size  Location     Type
  2557 ;;                  1    wreg      void 
  2558 ;; Registers used:
  2559 ;;		wreg
  2560 ;; Tracked objects:
  2561 ;;		On entry : 0/0
  2562 ;;		On exit  : 0/0
  2563 ;;		Unchanged: 0/0
  2564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2567 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2568 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2569 ;;Total ram usage:        2 bytes
  2570 ;; Hardware stack levels used:    1
  2571 ;; Hardware stack levels required when called:    5
  2572 ;; This function calls:
  2573 ;;		Nothing
  2574 ;; This function is called by:
  2575 ;;		_solenoids_back
  2576 ;; This function uses a non-reentrant model
  2577 ;;
  2578                           
  2579                           	psect	text15
  2580  001C24                     __ptext15:
  2581                           	opt stack 0
  2582  001C24                     _go_back:
  2583                           	opt stack 23
  2584                           
  2585                           ;solenoids.c: 34: LATDbits.LATD0 = 1;
  2586                           
  2587                           ;incstack = 0
  2588  001C24  808C               	bsf	3980,0,c	;volatile
  2589                           
  2590                           ;solenoids.c: 35: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2591  001C26  0E0D               	movlw	13
  2592  001C28  0100               	movlb	0	; () banked
  2593  001C2A  6F81               	movwf	(??_go_back+1)& (0+255),b
  2594  001C2C  0EAF               	movlw	175
  2595  001C2E  0100               	movlb	0	; () banked
  2596  001C30  6F80               	movwf	??_go_back& (0+255),b
  2597  001C32  0EB6               	movlw	182
  2598  001C34                     u4197:
  2599  001C34  2EE8               	decfsz	wreg,f,c
  2600  001C36  D7FE               	bra	u4197
  2601  001C38  2F80               	decfsz	??_go_back& (0+255),f,b
  2602  001C3A  D7FC               	bra	u4197
  2603  001C3C  2F81               	decfsz	(??_go_back+1)& (0+255),f,b
  2604  001C3E  D7FA               	bra	u4197
  2605  001C40  F000               	nop	
  2606  001C42  0012               	return	
  2607  001C44                     __end_of_go_back:
  2608                           	opt stack 0
  2609                           tosu	equ	0xFFF
  2610                           tosh	equ	0xFFE
  2611                           tosl	equ	0xFFD
  2612                           pclath	equ	0xFFA
  2613                           intcon3	equ	0xFF0
  2614                           postinc0	equ	0xFEE
  2615                           wreg	equ	0xFE8
  2616                           status	equ	0xFD8
  2617                           
  2618 ;; *************** function _initialization *****************
  2619 ;; Defined at:
  2620 ;;		line 156 in file "operation.c"
  2621 ;; Parameters:    Size  Location     Type
  2622 ;;		None
  2623 ;; Auto vars:     Size  Location     Type
  2624 ;;  i               1   38[BANK0 ] unsigned char 
  2625 ;; Return value:  Size  Location     Type
  2626 ;;                  1    wreg      void 
  2627 ;; Registers used:
  2628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2629 ;; Tracked objects:
  2630 ;;		On entry : 0/0
  2631 ;;		On exit  : 0/0
  2632 ;;		Unchanged: 0/0
  2633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2635 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2636 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2637 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2638 ;;Total ram usage:        3 bytes
  2639 ;; Hardware stack levels used:    1
  2640 ;; Hardware stack levels required when called:    8
  2641 ;; This function calls:
  2642 ;;		_bottom_distribution_initial
  2643 ;;		_bottom_rocker_initial
  2644 ;;		_initLCD
  2645 ;;		_lcdInst
  2646 ;;		_printf
  2647 ;;		_top_distribution_initial
  2648 ;;		_top_rocker_initial
  2649 ;; This function is called by:
  2650 ;;		_startSorting
  2651 ;; This function uses a non-reentrant model
  2652 ;;
  2653                           
  2654                           	psect	text16
  2655  001502                     __ptext16:
  2656                           	opt stack 0
  2657  001502                     _initialization:
  2658                           	opt stack 21
  2659                           
  2660                           ;operation.c: 160: fsm1 = 0;
  2661                           
  2662                           ;incstack = 0
  2663  001502  0E00               	movlw	0
  2664  001504  0100               	movlb	0	; () banked
  2665  001506  6FBD               	movwf	(_fsm1+1)& (0+255),b
  2666  001508  0E00               	movlw	0
  2667  00150A  6FBC               	movwf	_fsm1& (0+255),b
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;operation.c: 162: initLCD();
  2671  00150C  EC1F  F00C         	call	_initLCD	;wreg free
  2672                           
  2673                           ;operation.c: 163: lcdInst(0b10000000);;
  2674  001510  0E80               	movlw	128
  2675  001512  ECA5  F00E         	call	_lcdInst
  2676                           
  2677                           ;operation.c: 164: printf("Initializing");
  2678  001516  0EDC               	movlw	low STR_6
  2679  001518  0100               	movlb	0	; () banked
  2680  00151A  6F8E               	movwf	printf@f& (0+255),b
  2681  00151C  0EFF               	movlw	high STR_6
  2682  00151E  0100               	movlb	0	; () banked
  2683  001520  6F8F               	movwf	(printf@f+1)& (0+255),b
  2684  001522  EC09  F000         	call	_printf	;wreg free
  2685                           
  2686                           ;operation.c: 165: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  2687  001526  0E00               	movlw	0
  2688  001528  0100               	movlb	0	; () banked
  2689  00152A  6FA6               	movwf	initialization@i& (0+255),b
  2690  00152C                     l4487:
  2691                           
  2692                           ; BSR set to: 0
  2693  00152C  0E09               	movlw	9
  2694  00152E  0100               	movlb	0	; () banked
  2695  001530  65A6               	cpfsgt	initialization@i& (0+255),b
  2696  001532  D001               	goto	l4491
  2697  001534  D010               	goto	l439
  2698  001536                     l4491:
  2699                           
  2700                           ; BSR set to: 0
  2701  001536  0E02               	movlw	2
  2702  001538  0100               	movlb	0	; () banked
  2703  00153A  6FA5               	movwf	(??_initialization+1)& (0+255),b
  2704  00153C  0E3F               	movlw	63
  2705  00153E  0100               	movlb	0	; () banked
  2706  001540  6FA4               	movwf	??_initialization& (0+255),b
  2707  001542  0E2B               	movlw	43
  2708  001544                     u4207:
  2709  001544  2EE8               	decfsz	wreg,f,c
  2710  001546  D7FE               	bra	u4207
  2711  001548  2FA4               	decfsz	??_initialization& (0+255),f,b
  2712  00154A  D7FC               	bra	u4207
  2713  00154C  2FA5               	decfsz	(??_initialization+1)& (0+255),f,b
  2714  00154E  D7FA               	bra	u4207
  2715  001550  0100               	movlb	0	; () banked
  2716  001552  2BA6               	incf	initialization@i& (0+255),f,b
  2717  001554  D7EB               	goto	l4487
  2718  001556                     l439:
  2719                           
  2720                           ; BSR set to: 0
  2721                           ;operation.c: 168: LATEbits.LATE0 = 1;
  2722  001556  808D               	bsf	3981,0,c	;volatile
  2723                           
  2724                           ; BSR set to: 0
  2725                           ;operation.c: 172: top_rocker_initial();
  2726  001558  ECAD  F00E         	call	_top_rocker_initial	;wreg free
  2727                           
  2728                           ;operation.c: 173: bottom_rocker_initial();
  2729  00155C  ECBB  F00E         	call	_bottom_rocker_initial	;wreg free
  2730                           
  2731                           ;operation.c: 176: top_distribution_initial();
  2732  001560  ECB4  F00E         	call	_top_distribution_initial	;wreg free
  2733                           
  2734                           ;operation.c: 177: bottom_distribution_initial();
  2735  001564  ECC2  F00E         	call	_bottom_distribution_initial	;wreg free
  2736  001568  0012               	return		;funcret
  2737  00156A                     __end_of_initialization:
  2738                           	opt stack 0
  2739                           tosu	equ	0xFFF
  2740                           tosh	equ	0xFFE
  2741                           tosl	equ	0xFFD
  2742                           pclath	equ	0xFFA
  2743                           intcon3	equ	0xFF0
  2744                           postinc0	equ	0xFEE
  2745                           wreg	equ	0xFE8
  2746                           status	equ	0xFD8
  2747                           
  2748 ;; *************** function _top_rocker_initial *****************
  2749 ;; Defined at:
  2750 ;;		line 31 in file "top_rocker_fsm.c"
  2751 ;; Parameters:    Size  Location     Type
  2752 ;;		None
  2753 ;; Auto vars:     Size  Location     Type
  2754 ;;		None
  2755 ;; Return value:  Size  Location     Type
  2756 ;;                  1    wreg      void 
  2757 ;; Registers used:
  2758 ;;		wreg, status,2, status,0
  2759 ;; Tracked objects:
  2760 ;;		On entry : 0/0
  2761 ;;		On exit  : 0/0
  2762 ;;		Unchanged: 0/0
  2763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2768 ;;Total ram usage:        0 bytes
  2769 ;; Hardware stack levels used:    1
  2770 ;; Hardware stack levels required when called:    5
  2771 ;; This function calls:
  2772 ;;		Nothing
  2773 ;; This function is called by:
  2774 ;;		_initialization
  2775 ;; This function uses a non-reentrant model
  2776 ;;
  2777                           
  2778                           	psect	text17
  2779  001D5A                     __ptext17:
  2780                           	opt stack 0
  2781  001D5A                     _top_rocker_initial:
  2782                           	opt stack 23
  2783                           
  2784                           ;top_rocker_fsm.c: 44: topRockerState = top_rocker_idle;
  2785                           
  2786                           ;incstack = 0
  2787  001D5A  0E70               	movlw	low _top_rocker_idle
  2788  001D5C  0100               	movlb	0	; () banked
  2789  001D5E  6FD0               	movwf	_topRockerState& (0+255),b
  2790  001D60  0E1A               	movlw	high _top_rocker_idle
  2791  001D62  0100               	movlb	0	; () banked
  2792  001D64  6FD1               	movwf	(_topRockerState+1)& (0+255),b
  2793  001D66  0012               	return	
  2794  001D68                     __end_of_top_rocker_initial:
  2795                           	opt stack 0
  2796                           tosu	equ	0xFFF
  2797                           tosh	equ	0xFFE
  2798                           tosl	equ	0xFFD
  2799                           pclath	equ	0xFFA
  2800                           intcon3	equ	0xFF0
  2801                           postinc0	equ	0xFEE
  2802                           wreg	equ	0xFE8
  2803                           status	equ	0xFD8
  2804                           
  2805 ;; *************** function _top_distribution_initial *****************
  2806 ;; Defined at:
  2807 ;;		line 26 in file "top_distribution_fsm.c"
  2808 ;; Parameters:    Size  Location     Type
  2809 ;;		None
  2810 ;; Auto vars:     Size  Location     Type
  2811 ;;		None
  2812 ;; Return value:  Size  Location     Type
  2813 ;;                  1    wreg      void 
  2814 ;; Registers used:
  2815 ;;		wreg, status,2, status,0
  2816 ;; Tracked objects:
  2817 ;;		On entry : 0/0
  2818 ;;		On exit  : 0/0
  2819 ;;		Unchanged: 0/0
  2820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2825 ;;Total ram usage:        0 bytes
  2826 ;; Hardware stack levels used:    1
  2827 ;; Hardware stack levels required when called:    5
  2828 ;; This function calls:
  2829 ;;		Nothing
  2830 ;; This function is called by:
  2831 ;;		_initialization
  2832 ;; This function uses a non-reentrant model
  2833 ;;
  2834                           
  2835                           	psect	text18
  2836  001D68                     __ptext18:
  2837                           	opt stack 0
  2838  001D68                     _top_distribution_initial:
  2839                           	opt stack 23
  2840                           
  2841                           ;top_distribution_fsm.c: 31: topDistributionState = top_distribution_idle;
  2842                           
  2843                           ; BSR set to: 0
  2844                           ;incstack = 0
  2845  001D68  0EBA               	movlw	low _top_distribution_idle
  2846  001D6A  0100               	movlb	0	; () banked
  2847  001D6C  6FCE               	movwf	_topDistributionState& (0+255),b
  2848  001D6E  0E19               	movlw	high _top_distribution_idle
  2849  001D70  0100               	movlb	0	; () banked
  2850  001D72  6FCF               	movwf	(_topDistributionState+1)& (0+255),b
  2851  001D74  0012               	return	
  2852  001D76                     __end_of_top_distribution_initial:
  2853                           	opt stack 0
  2854                           tosu	equ	0xFFF
  2855                           tosh	equ	0xFFE
  2856                           tosl	equ	0xFFD
  2857                           pclath	equ	0xFFA
  2858                           intcon3	equ	0xFF0
  2859                           postinc0	equ	0xFEE
  2860                           wreg	equ	0xFE8
  2861                           status	equ	0xFD8
  2862                           
  2863 ;; *************** function _bottom_rocker_initial *****************
  2864 ;; Defined at:
  2865 ;;		line 31 in file "bottom_rocker_fsm.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;		None
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;		None
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  1    wreg      void 
  2872 ;; Registers used:
  2873 ;;		wreg, status,2, status,0
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2882 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2883 ;;Total ram usage:        0 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; Hardware stack levels required when called:    5
  2886 ;; This function calls:
  2887 ;;		Nothing
  2888 ;; This function is called by:
  2889 ;;		_initialization
  2890 ;; This function uses a non-reentrant model
  2891 ;;
  2892                           
  2893                           	psect	text19
  2894  001D76                     __ptext19:
  2895                           	opt stack 0
  2896  001D76                     _bottom_rocker_initial:
  2897                           	opt stack 23
  2898                           
  2899                           ;bottom_rocker_fsm.c: 38: bottomRockerState = bottom_rocker_idle;
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;incstack = 0
  2903  001D76  0E98               	movlw	low _bottom_rocker_idle
  2904  001D78  0100               	movlb	0	; () banked
  2905  001D7A  6FCA               	movwf	_bottomRockerState& (0+255),b
  2906  001D7C  0E14               	movlw	high _bottom_rocker_idle
  2907  001D7E  0100               	movlb	0	; () banked
  2908  001D80  6FCB               	movwf	(_bottomRockerState+1)& (0+255),b
  2909  001D82  0012               	return	
  2910  001D84                     __end_of_bottom_rocker_initial:
  2911                           	opt stack 0
  2912                           tosu	equ	0xFFF
  2913                           tosh	equ	0xFFE
  2914                           tosl	equ	0xFFD
  2915                           pclath	equ	0xFFA
  2916                           intcon3	equ	0xFF0
  2917                           postinc0	equ	0xFEE
  2918                           wreg	equ	0xFE8
  2919                           status	equ	0xFD8
  2920                           
  2921 ;; *************** function _bottom_distribution_initial *****************
  2922 ;; Defined at:
  2923 ;;		line 28 in file "bottom_distribution_fsm.c"
  2924 ;; Parameters:    Size  Location     Type
  2925 ;;		None
  2926 ;; Auto vars:     Size  Location     Type
  2927 ;;		None
  2928 ;; Return value:  Size  Location     Type
  2929 ;;                  1    wreg      void 
  2930 ;; Registers used:
  2931 ;;		wreg, status,2, status,0
  2932 ;; Tracked objects:
  2933 ;;		On entry : 0/0
  2934 ;;		On exit  : 0/0
  2935 ;;		Unchanged: 0/0
  2936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2941 ;;Total ram usage:        0 bytes
  2942 ;; Hardware stack levels used:    1
  2943 ;; Hardware stack levels required when called:    5
  2944 ;; This function calls:
  2945 ;;		Nothing
  2946 ;; This function is called by:
  2947 ;;		_initialization
  2948 ;; This function uses a non-reentrant model
  2949 ;;
  2950                           
  2951                           	psect	text20
  2952  001D84                     __ptext20:
  2953                           	opt stack 0
  2954  001D84                     _bottom_distribution_initial:
  2955                           	opt stack 23
  2956                           
  2957                           ;bottom_distribution_fsm.c: 41: bottomDistributionState = bottom_distribution_idle;
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;incstack = 0
  2961  001D84  0E1A               	movlw	low _bottom_distribution_idle
  2962  001D86  0100               	movlb	0	; () banked
  2963  001D88  6FCC               	movwf	_bottomDistributionState& (0+255),b
  2964  001D8A  0E1A               	movlw	high _bottom_distribution_idle
  2965  001D8C  0100               	movlb	0	; () banked
  2966  001D8E  6FCD               	movwf	(_bottomDistributionState+1)& (0+255),b
  2967  001D90  0012               	return	
  2968  001D92                     __end_of_bottom_distribution_initial:
  2969                           	opt stack 0
  2970                           tosu	equ	0xFFF
  2971                           tosh	equ	0xFFE
  2972                           tosl	equ	0xFFD
  2973                           pclath	equ	0xFFA
  2974                           intcon3	equ	0xFF0
  2975                           postinc0	equ	0xFEE
  2976                           wreg	equ	0xFE8
  2977                           status	equ	0xFD8
  2978                           
  2979 ;; *************** function _bottom_rocker_release *****************
  2980 ;; Defined at:
  2981 ;;		line 119 in file "bottom_rocker_fsm.c"
  2982 ;; Parameters:    Size  Location     Type
  2983 ;;		None
  2984 ;; Auto vars:     Size  Location     Type
  2985 ;;		None
  2986 ;; Return value:  Size  Location     Type
  2987 ;;                  1    wreg      void 
  2988 ;; Registers used:
  2989 ;;		wreg, status,2, status,0, cstack
  2990 ;; Tracked objects:
  2991 ;;		On entry : 0/0
  2992 ;;		On exit  : 0/0
  2993 ;;		Unchanged: 0/0
  2994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2999 ;;Total ram usage:        0 bytes
  3000 ;; Hardware stack levels used:    1
  3001 ;; Hardware stack levels required when called:    6
  3002 ;; This function calls:
  3003 ;;		_bottom_rocker_motor_ccw
  3004 ;; This function is called by:
  3005 ;;		_bottom_rocker_idle
  3006 ;;		_startSorting
  3007 ;; This function uses a non-reentrant model
  3008 ;;
  3009                           
  3010                           	psect	text21
  3011  001D16                     __ptext21:
  3012                           	opt stack 0
  3013  001D16                     _bottom_rocker_release:
  3014                           	opt stack 23
  3015                           
  3016                           ;bottom_rocker_fsm.c: 130: bottom_rocker_motor_ccw();
  3017                           
  3018                           ; BSR set to: 0
  3019                           ;incstack = 0
  3020  001D16  ECDC  F009         	call	_bottom_rocker_motor_ccw	;wreg free
  3021                           
  3022                           ;bottom_rocker_fsm.c: 133: bottomRockerState = bottom_rocker_restore;
  3023  001D1A  0E28               	movlw	low _bottom_rocker_restore
  3024  001D1C  0100               	movlb	0	; () banked
  3025  001D1E  6FCA               	movwf	_bottomRockerState& (0+255),b
  3026  001D20  0E1D               	movlw	high _bottom_rocker_restore
  3027  001D22  0100               	movlb	0	; () banked
  3028  001D24  6FCB               	movwf	(_bottomRockerState+1)& (0+255),b
  3029  001D26  0012               	return	
  3030  001D28                     __end_of_bottom_rocker_release:
  3031                           	opt stack 0
  3032                           tosu	equ	0xFFF
  3033                           tosh	equ	0xFFE
  3034                           tosl	equ	0xFFD
  3035                           pclath	equ	0xFFA
  3036                           intcon3	equ	0xFF0
  3037                           postinc0	equ	0xFEE
  3038                           wreg	equ	0xFE8
  3039                           status	equ	0xFD8
  3040                           
  3041 ;; *************** function _bottom_rocker_idle *****************
  3042 ;; Defined at:
  3043 ;;		line 43 in file "bottom_rocker_fsm.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;		None
  3046 ;; Auto vars:     Size  Location     Type
  3047 ;;		None
  3048 ;; Return value:  Size  Location     Type
  3049 ;;                  1    wreg      void 
  3050 ;; Registers used:
  3051 ;;		wreg, status,2, status,0
  3052 ;; Tracked objects:
  3053 ;;		On entry : 0/0
  3054 ;;		On exit  : 0/0
  3055 ;;		Unchanged: 0/0
  3056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3060 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3061 ;;Total ram usage:        1 bytes
  3062 ;; Hardware stack levels used:    1
  3063 ;; Hardware stack levels required when called:    5
  3064 ;; This function calls:
  3065 ;;		Nothing
  3066 ;; This function is called by:
  3067 ;;		_bottom_rocker_initial
  3068 ;;		_bottom_rocker_restore
  3069 ;;		_startSorting
  3070 ;; This function uses a non-reentrant model
  3071 ;;
  3072                           
  3073                           	psect	text22
  3074  001498                     __ptext22:
  3075                           	opt stack 0
  3076  001498                     _bottom_rocker_idle:
  3077                           	opt stack 24
  3078                           
  3079                           ;bottom_rocker_fsm.c: 57: if( PORTAbits.RA1 == 1){
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;incstack = 0
  3083  001498  A280               	btfss	3968,1,c	;volatile
  3084  00149A  D004               	goto	l4421
  3085                           
  3086                           ;bottom_rocker_fsm.c: 58: fsm2++;
  3087  00149C  0100               	movlb	0	; () banked
  3088  00149E  4BC8               	infsnz	_fsm2& (0+255),f,b
  3089  0014A0  2BC9               	incf	(_fsm2+1)& (0+255),f,b
  3090                           
  3091                           ;bottom_rocker_fsm.c: 67: }else{
  3092  0014A2  0012               	return	
  3093  0014A4                     l4421:
  3094                           
  3095                           ;bottom_rocker_fsm.c: 77: fsm2 = 0;
  3096  0014A4  0E00               	movlw	0
  3097  0014A6  0100               	movlb	0	; () banked
  3098  0014A8  6FC9               	movwf	(_fsm2+1)& (0+255),b
  3099  0014AA  0E00               	movlw	0
  3100  0014AC  6FC8               	movwf	_fsm2& (0+255),b
  3101                           
  3102                           ;bottom_rocker_fsm.c: 79: labeled = PORTCbits.RC2;
  3103  0014AE  A482               	btfss	3970,2,c	;volatile
  3104  0014B0  D004               	goto	u3640
  3105  0014B2  0100               	movlb	0	; () banked
  3106  0014B4  6B80               	clrf	??_bottom_rocker_idle& (0+255),b
  3107  0014B6  2B80               	incf	??_bottom_rocker_idle& (0+255),f,b
  3108  0014B8  D002               	goto	u3648
  3109  0014BA                     u3640:
  3110  0014BA  0100               	movlb	0	; () banked
  3111  0014BC  6B80               	clrf	??_bottom_rocker_idle& (0+255),b
  3112  0014BE                     u3648:
  3113  0014BE  0100               	movlb	0	; () banked
  3114  0014C0  5180               	movf	??_bottom_rocker_idle& (0+255),w,b
  3115  0014C2  6E47               	movwf	_labeled,c
  3116  0014C4  6A48               	clrf	_labeled+1,c
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;bottom_rocker_fsm.c: 81: if(labeled){
  3120  0014C6  5047               	movf	_labeled,w,c
  3121  0014C8  1048               	iorwf	_labeled+1,w,c
  3122  0014CA  B4D8               	btfsc	status,2,c
  3123  0014CC  D008               	goto	l4429
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;bottom_rocker_fsm.c: 82: bottom_move = 1;
  3127  0014CE  0E00               	movlw	0
  3128  0014D0  6E4A               	movwf	_bottom_move+1,c
  3129  0014D2  0E01               	movlw	1
  3130  0014D4  6E49               	movwf	_bottom_move,c
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;bottom_rocker_fsm.c: 84: tin_can_label++;
  3134  0014D6  0100               	movlb	0	; () banked
  3135  0014D8  4BC6               	infsnz	_tin_can_label& (0+255),f,b
  3136  0014DA  2BC7               	incf	(_tin_can_label+1)& (0+255),f,b
  3137                           
  3138                           ;bottom_rocker_fsm.c: 94: }else{
  3139  0014DC  D007               	goto	l4433
  3140  0014DE                     l4429:
  3141                           
  3142                           ; BSR set to: 0
  3143                           ;bottom_rocker_fsm.c: 95: bottom_move = 0;
  3144  0014DE  0E00               	movlw	0
  3145  0014E0  6E4A               	movwf	_bottom_move+1,c
  3146  0014E2  0E00               	movlw	0
  3147  0014E4  6E49               	movwf	_bottom_move,c
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;bottom_rocker_fsm.c: 96: tin_can++;
  3151  0014E6  0100               	movlb	0	; () banked
  3152  0014E8  4BC4               	infsnz	_tin_can& (0+255),f,b
  3153  0014EA  2BC5               	incf	(_tin_can+1)& (0+255),f,b
  3154  0014EC                     l4433:
  3155                           
  3156                           ; BSR set to: 0
  3157                           ;bottom_rocker_fsm.c: 106: }
  3158                           ;bottom_rocker_fsm.c: 109: start_bottom_distribution = 1;
  3159  0014EC  0E00               	movlw	0
  3160  0014EE  6E4C               	movwf	_start_bottom_distribution+1,c
  3161  0014F0  0E01               	movlw	1
  3162  0014F2  6E4B               	movwf	_start_bottom_distribution,c
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;bottom_rocker_fsm.c: 112: bottomRockerState = bottom_rocker_release;
  3166  0014F4  0E16               	movlw	low _bottom_rocker_release
  3167  0014F6  0100               	movlb	0	; () banked
  3168  0014F8  6FCA               	movwf	_bottomRockerState& (0+255),b
  3169  0014FA  0E1D               	movlw	high _bottom_rocker_release
  3170  0014FC  0100               	movlb	0	; () banked
  3171  0014FE  6FCB               	movwf	(_bottomRockerState+1)& (0+255),b
  3172                           
  3173                           ; BSR set to: 0
  3174  001500  0012               	return	
  3175  001502                     __end_of_bottom_rocker_idle:
  3176                           	opt stack 0
  3177                           tosu	equ	0xFFF
  3178                           tosh	equ	0xFFE
  3179                           tosl	equ	0xFFD
  3180                           pclath	equ	0xFFA
  3181                           intcon3	equ	0xFF0
  3182                           postinc0	equ	0xFEE
  3183                           wreg	equ	0xFE8
  3184                           status	equ	0xFD8
  3185                           
  3186 ;; *************** function _bottom_rocker_restore *****************
  3187 ;; Defined at:
  3188 ;;		line 138 in file "bottom_rocker_fsm.c"
  3189 ;; Parameters:    Size  Location     Type
  3190 ;;		None
  3191 ;; Auto vars:     Size  Location     Type
  3192 ;;		None
  3193 ;; Return value:  Size  Location     Type
  3194 ;;                  1    wreg      void 
  3195 ;; Registers used:
  3196 ;;		wreg, status,2, status,0, cstack
  3197 ;; Tracked objects:
  3198 ;;		On entry : 0/0
  3199 ;;		On exit  : 0/0
  3200 ;;		Unchanged: 0/0
  3201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3206 ;;Total ram usage:        0 bytes
  3207 ;; Hardware stack levels used:    1
  3208 ;; Hardware stack levels required when called:    6
  3209 ;; This function calls:
  3210 ;;		_bottom_rocker_motor_cw
  3211 ;; This function is called by:
  3212 ;;		_bottom_rocker_release
  3213 ;;		_startSorting
  3214 ;; This function uses a non-reentrant model
  3215 ;;
  3216                           
  3217                           	psect	text23
  3218  001D28                     __ptext23:
  3219                           	opt stack 0
  3220  001D28                     _bottom_rocker_restore:
  3221                           	opt stack 23
  3222                           
  3223                           ;bottom_rocker_fsm.c: 149: bottom_rocker_motor_cw();
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;incstack = 0
  3227  001D28  EC85  F00D         	call	_bottom_rocker_motor_cw	;wreg free
  3228                           
  3229                           ;bottom_rocker_fsm.c: 152: bottomRockerState = bottom_rocker_idle;
  3230  001D2C  0E98               	movlw	low _bottom_rocker_idle
  3231  001D2E  0100               	movlb	0	; () banked
  3232  001D30  6FCA               	movwf	_bottomRockerState& (0+255),b
  3233  001D32  0E14               	movlw	high _bottom_rocker_idle
  3234  001D34  0100               	movlb	0	; () banked
  3235  001D36  6FCB               	movwf	(_bottomRockerState+1)& (0+255),b
  3236  001D38  0012               	return	
  3237  001D3A                     __end_of_bottom_rocker_restore:
  3238                           	opt stack 0
  3239                           tosu	equ	0xFFF
  3240                           tosh	equ	0xFFE
  3241                           tosl	equ	0xFFD
  3242                           pclath	equ	0xFFA
  3243                           intcon3	equ	0xFF0
  3244                           postinc0	equ	0xFEE
  3245                           wreg	equ	0xFE8
  3246                           status	equ	0xFD8
  3247                           
  3248 ;; *************** function _bottom_rocker_motor_cw *****************
  3249 ;; Defined at:
  3250 ;;		line 62 in file "motors.c"
  3251 ;; Parameters:    Size  Location     Type
  3252 ;;		None
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;		None
  3255 ;; Return value:  Size  Location     Type
  3256 ;;                  1    wreg      void 
  3257 ;; Registers used:
  3258 ;;		wreg
  3259 ;; Tracked objects:
  3260 ;;		On entry : 0/0
  3261 ;;		On exit  : 0/0
  3262 ;;		Unchanged: 0/0
  3263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3267 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3268 ;;Total ram usage:        2 bytes
  3269 ;; Hardware stack levels used:    1
  3270 ;; Hardware stack levels required when called:    5
  3271 ;; This function calls:
  3272 ;;		Nothing
  3273 ;; This function is called by:
  3274 ;;		_bottom_rocker_restore
  3275 ;; This function uses a non-reentrant model
  3276 ;;
  3277                           
  3278                           	psect	text24
  3279  001B0A                     __ptext24:
  3280                           	opt stack 0
  3281  001B0A                     _bottom_rocker_motor_cw:
  3282                           	opt stack 23
  3283                           
  3284                           ;motors.c: 65: LATBbits.LATB2 = 0;
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;incstack = 0
  3288  001B0A  948A               	bcf	3978,2,c	;volatile
  3289                           
  3290                           ;motors.c: 66: LATBbits.LATB3 = 1;
  3291  001B0C  868A               	bsf	3978,3,c	;volatile
  3292                           
  3293                           ;motors.c: 67: _delay((unsigned long)((500)*(10000000/4000.0)));
  3294  001B0E  0E07               	movlw	7
  3295  001B10  0100               	movlb	0	; () banked
  3296  001B12  6F81               	movwf	(??_bottom_rocker_motor_cw+1)& (0+255),b
  3297  001B14  0E58               	movlw	88
  3298  001B16  0100               	movlb	0	; () banked
  3299  001B18  6F80               	movwf	??_bottom_rocker_motor_cw& (0+255),b
  3300  001B1A  0E59               	movlw	89
  3301  001B1C                     u4217:
  3302  001B1C  2EE8               	decfsz	wreg,f,c
  3303  001B1E  D7FE               	bra	u4217
  3304  001B20  2F80               	decfsz	??_bottom_rocker_motor_cw& (0+255),f,b
  3305  001B22  D7FC               	bra	u4217
  3306  001B24  2F81               	decfsz	(??_bottom_rocker_motor_cw+1)& (0+255),f,b
  3307  001B26  D7FA               	bra	u4217
  3308  001B28  D000               	nop2	
  3309                           
  3310                           ;motors.c: 70: LATBbits.LATB2 = 0;
  3311  001B2A  948A               	bcf	3978,2,c	;volatile
  3312                           
  3313                           ;motors.c: 71: LATBbits.LATB3 = 0;
  3314  001B2C  968A               	bcf	3978,3,c	;volatile
  3315  001B2E  0012               	return	
  3316  001B30                     __end_of_bottom_rocker_motor_cw:
  3317                           	opt stack 0
  3318                           tosu	equ	0xFFF
  3319                           tosh	equ	0xFFE
  3320                           tosl	equ	0xFFD
  3321                           pclath	equ	0xFFA
  3322                           intcon3	equ	0xFF0
  3323                           postinc0	equ	0xFEE
  3324                           wreg	equ	0xFE8
  3325                           status	equ	0xFD8
  3326                           
  3327 ;; *************** function _bottom_rocker_motor_ccw *****************
  3328 ;; Defined at:
  3329 ;;		line 75 in file "motors.c"
  3330 ;; Parameters:    Size  Location     Type
  3331 ;;		None
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;  k               2    2[BANK0 ] int 
  3334 ;; Return value:  Size  Location     Type
  3335 ;;                  1    wreg      void 
  3336 ;; Registers used:
  3337 ;;		wreg, status,2, status,0
  3338 ;; Tracked objects:
  3339 ;;		On entry : 0/0
  3340 ;;		On exit  : 0/0
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3344 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3345 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3346 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3347 ;;Total ram usage:        4 bytes
  3348 ;; Hardware stack levels used:    1
  3349 ;; Hardware stack levels required when called:    5
  3350 ;; This function calls:
  3351 ;;		Nothing
  3352 ;; This function is called by:
  3353 ;;		_bottom_rocker_release
  3354 ;; This function uses a non-reentrant model
  3355 ;;
  3356                           
  3357                           	psect	text25
  3358  0013B8                     __ptext25:
  3359                           	opt stack 0
  3360  0013B8                     _bottom_rocker_motor_ccw:
  3361                           	opt stack 23
  3362                           
  3363                           ;motors.c: 76: int k;
  3364                           ;motors.c: 77: for(k=0;k<=5;k++){
  3365                           
  3366                           ;incstack = 0
  3367  0013B8  0E00               	movlw	0
  3368  0013BA  0100               	movlb	0	; () banked
  3369  0013BC  6F83               	movwf	(bottom_rocker_motor_ccw@k+1)& (0+255),b
  3370  0013BE  0E00               	movlw	0
  3371  0013C0  6F82               	movwf	bottom_rocker_motor_ccw@k& (0+255),b
  3372                           
  3373                           ; BSR set to: 0
  3374  0013C2  0100               	movlb	0	; () banked
  3375  0013C4  BF83               	btfsc	(bottom_rocker_motor_ccw@k+1)& (0+255),7,b
  3376  0013C6  D008               	goto	l615
  3377  0013C8  0100               	movlb	0	; () banked
  3378  0013CA  5183               	movf	(bottom_rocker_motor_ccw@k+1)& (0+255),w,b
  3379  0013CC  E12A               	bnz	l616
  3380  0013CE  0E06               	movlw	6
  3381  0013D0  0100               	movlb	0	; () banked
  3382  0013D2  5D82               	subwf	bottom_rocker_motor_ccw@k& (0+255),w,b
  3383  0013D4  B0D8               	btfsc	status,0,c
  3384  0013D6  D025               	goto	l616
  3385  0013D8                     l615:
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;motors.c: 79: LATBbits.LATB2 = 1;
  3389  0013D8  848A               	bsf	3978,2,c	;volatile
  3390                           
  3391                           ;motors.c: 80: LATBbits.LATB3 = 0;
  3392  0013DA  968A               	bcf	3978,3,c	;volatile
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;motors.c: 81: _delay((unsigned long)((85)*(10000000/4000.0)));
  3396  0013DC  0E02               	movlw	2
  3397  0013DE  0100               	movlb	0	; () banked
  3398  0013E0  6F81               	movwf	(??_bottom_rocker_motor_ccw+1)& (0+255),b
  3399  0013E2  0E14               	movlw	20
  3400  0013E4  0100               	movlb	0	; () banked
  3401  0013E6  6F80               	movwf	??_bottom_rocker_motor_ccw& (0+255),b
  3402  0013E8  0EF6               	movlw	246
  3403  0013EA                     u4227:
  3404  0013EA  2EE8               	decfsz	wreg,f,c
  3405  0013EC  D7FE               	bra	u4227
  3406  0013EE  2F80               	decfsz	??_bottom_rocker_motor_ccw& (0+255),f,b
  3407  0013F0  D7FC               	bra	u4227
  3408  0013F2  2F81               	decfsz	(??_bottom_rocker_motor_ccw+1)& (0+255),f,b
  3409  0013F4  D7FA               	bra	u4227
  3410  0013F6  F000               	nop	
  3411                           
  3412                           ;motors.c: 84: LATBbits.LATB2 = 0;
  3413  0013F8  948A               	bcf	3978,2,c	;volatile
  3414                           
  3415                           ;motors.c: 85: LATBbits.LATB3 = 0;
  3416  0013FA  968A               	bcf	3978,3,c	;volatile
  3417                           
  3418                           ;motors.c: 86: _delay((unsigned long)((10)*(10000000/4000.0)));
  3419  0013FC  0E21               	movlw	33
  3420  0013FE  0100               	movlb	0	; () banked
  3421  001400  6F80               	movwf	??_bottom_rocker_motor_ccw& (0+255),b
  3422  001402  0E76               	movlw	118
  3423  001404                     u4237:
  3424  001404  2EE8               	decfsz	wreg,f,c
  3425  001406  D7FE               	bra	u4237
  3426  001408  2F80               	decfsz	??_bottom_rocker_motor_ccw& (0+255),f,b
  3427  00140A  D7FC               	bra	u4237
  3428  00140C  F000               	nop	
  3429  00140E  0100               	movlb	0	; () banked
  3430  001410  4B82               	infsnz	bottom_rocker_motor_ccw@k& (0+255),f,b
  3431  001412  2B83               	incf	(bottom_rocker_motor_ccw@k+1)& (0+255),f,b
  3432  001414  0100               	movlb	0	; () banked
  3433  001416  BF83               	btfsc	(bottom_rocker_motor_ccw@k+1)& (0+255),7,b
  3434  001418  D7DF               	goto	l615
  3435  00141A  0100               	movlb	0	; () banked
  3436  00141C  5183               	movf	(bottom_rocker_motor_ccw@k+1)& (0+255),w,b
  3437  00141E  E101               	bnz	u3320
  3438  001420  D7D6               	goto	L2
  3439  001422                     u3320:
  3440  001422                     l616:
  3441                           
  3442                           ; BSR set to: 0
  3443                           ;motors.c: 87: }
  3444                           ;motors.c: 88: LATBbits.LATB2 = 0;
  3445  001422  948A               	bcf	3978,2,c	;volatile
  3446                           
  3447                           ;motors.c: 89: LATBbits.LATB3 = 0;
  3448  001424  968A               	bcf	3978,3,c	;volatile
  3449                           
  3450                           ; BSR set to: 0
  3451                           
  3452                           ;motors.c: 91: return;
  3453  001426  0012               	return		;funcret
  3454  001428                     __end_of_bottom_rocker_motor_ccw:
  3455                           	opt stack 0
  3456                           tosu	equ	0xFFF
  3457                           tosh	equ	0xFFE
  3458                           tosl	equ	0xFFD
  3459                           pclath	equ	0xFFA
  3460                           intcon3	equ	0xFF0
  3461                           postinc0	equ	0xFEE
  3462                           wreg	equ	0xFE8
  3463                           status	equ	0xFD8
  3464                           
  3465 ;; *************** function _bottom_distribution_move *****************
  3466 ;; Defined at:
  3467 ;;		line 105 in file "bottom_distribution_fsm.c"
  3468 ;; Parameters:    Size  Location     Type
  3469 ;;		None
  3470 ;; Auto vars:     Size  Location     Type
  3471 ;;		None
  3472 ;; Return value:  Size  Location     Type
  3473 ;;                  1    wreg      void 
  3474 ;; Registers used:
  3475 ;;		wreg, status,2, status,0, cstack
  3476 ;; Tracked objects:
  3477 ;;		On entry : 0/0
  3478 ;;		On exit  : 0/0
  3479 ;;		Unchanged: 0/0
  3480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3485 ;;Total ram usage:        0 bytes
  3486 ;; Hardware stack levels used:    1
  3487 ;; Hardware stack levels required when called:    6
  3488 ;; This function calls:
  3489 ;;		_bottom_distribution_motor_ccw
  3490 ;;		_bottom_distribution_motor_cw
  3491 ;; This function is called by:
  3492 ;;		_bottom_distribution_prepare
  3493 ;;		_startSorting
  3494 ;; This function uses a non-reentrant model
  3495 ;;
  3496                           
  3497                           	psect	text26
  3498  001C44                     __ptext26:
  3499                           	opt stack 0
  3500  001C44                     _bottom_distribution_move:
  3501                           	opt stack 23
  3502                           
  3503                           ;bottom_distribution_fsm.c: 118: if(bottom_move == 1){
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;incstack = 0
  3507  001C44  0449               	decf	_bottom_move,w,c
  3508  001C46  104A               	iorwf	_bottom_move+1,w,c
  3509  001C48  A4D8               	btfss	status,2,c
  3510  001C4A  D003               	goto	l4411
  3511                           
  3512                           ;bottom_distribution_fsm.c: 120: bottom_distribution_motor_ccw();
  3513  001C4C  ECAB  F00D         	call	_bottom_distribution_motor_ccw	;wreg free
  3514                           
  3515                           ;bottom_distribution_fsm.c: 122: }else{
  3516  001C50  D002               	goto	l4413
  3517  001C52                     l4411:
  3518                           
  3519                           ;bottom_distribution_fsm.c: 124: bottom_distribution_motor_cw();
  3520  001C52  EC98  F00D         	call	_bottom_distribution_motor_cw	;wreg free
  3521  001C56                     l4413:
  3522                           
  3523                           ;bottom_distribution_fsm.c: 125: }
  3524                           ;bottom_distribution_fsm.c: 128: bottomDistributionState = bottom_distribution_idle;
  3525  001C56  0E1A               	movlw	low _bottom_distribution_idle
  3526  001C58  0100               	movlb	0	; () banked
  3527  001C5A  6FCC               	movwf	_bottomDistributionState& (0+255),b
  3528  001C5C  0E1A               	movlw	high _bottom_distribution_idle
  3529  001C5E  0100               	movlb	0	; () banked
  3530  001C60  6FCD               	movwf	(_bottomDistributionState+1)& (0+255),b
  3531  001C62  0012               	return	
  3532  001C64                     __end_of_bottom_distribution_move:
  3533                           	opt stack 0
  3534                           tosu	equ	0xFFF
  3535                           tosh	equ	0xFFE
  3536                           tosl	equ	0xFFD
  3537                           pclath	equ	0xFFA
  3538                           intcon3	equ	0xFF0
  3539                           postinc0	equ	0xFEE
  3540                           wreg	equ	0xFE8
  3541                           status	equ	0xFD8
  3542                           
  3543 ;; *************** function _bottom_distribution_idle *****************
  3544 ;; Defined at:
  3545 ;;		line 45 in file "bottom_distribution_fsm.c"
  3546 ;; Parameters:    Size  Location     Type
  3547 ;;		None
  3548 ;; Auto vars:     Size  Location     Type
  3549 ;;		None
  3550 ;; Return value:  Size  Location     Type
  3551 ;;                  1    wreg      void 
  3552 ;; Registers used:
  3553 ;;		wreg, status,2, status,0
  3554 ;; Tracked objects:
  3555 ;;		On entry : 0/0
  3556 ;;		On exit  : 0/0
  3557 ;;		Unchanged: 0/0
  3558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3562 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3563 ;;Total ram usage:        0 bytes
  3564 ;; Hardware stack levels used:    1
  3565 ;; Hardware stack levels required when called:    5
  3566 ;; This function calls:
  3567 ;;		Nothing
  3568 ;; This function is called by:
  3569 ;;		_bottom_distribution_initial
  3570 ;;		_bottom_distribution_move
  3571 ;;		_startSorting
  3572 ;; This function uses a non-reentrant model
  3573 ;;
  3574                           
  3575                           	psect	text27
  3576  001A1A                     __ptext27:
  3577                           	opt stack 0
  3578  001A1A                     _bottom_distribution_idle:
  3579                           	opt stack 24
  3580                           
  3581                           ;bottom_distribution_fsm.c: 49: if(start_bottom_distribution ==1){
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;incstack = 0
  3585  001A1A  044B               	decf	_start_bottom_distribution,w,c
  3586  001A1C  104C               	iorwf	_start_bottom_distribution+1,w,c
  3587  001A1E  A4D8               	btfss	status,2,c
  3588  001A20  D00B               	goto	l4393
  3589                           
  3590                           ;bottom_distribution_fsm.c: 59: bottomDistributionState = bottom_distribution_prepare;
  3591  001A22  0E64               	movlw	low _bottom_distribution_prepare
  3592  001A24  0100               	movlb	0	; () banked
  3593  001A26  6FCC               	movwf	_bottomDistributionState& (0+255),b
  3594  001A28  0E1C               	movlw	high _bottom_distribution_prepare
  3595  001A2A  0100               	movlb	0	; () banked
  3596  001A2C  6FCD               	movwf	(_bottomDistributionState+1)& (0+255),b
  3597                           
  3598                           ; BSR set to: 0
  3599                           ;bottom_distribution_fsm.c: 60: start_bottom_distribution = 0;
  3600  001A2E  0E00               	movlw	0
  3601  001A30  6E4C               	movwf	_start_bottom_distribution+1,c
  3602  001A32  0E00               	movlw	0
  3603  001A34  6E4B               	movwf	_start_bottom_distribution,c
  3604                           
  3605                           ;bottom_distribution_fsm.c: 62: }else{
  3606  001A36  0012               	return	
  3607  001A38                     l4393:
  3608                           
  3609                           ;bottom_distribution_fsm.c: 63: bottomDistributionState = bottom_distribution_idle;
  3610  001A38  0E1A               	movlw	low _bottom_distribution_idle
  3611  001A3A  0100               	movlb	0	; () banked
  3612  001A3C  6FCC               	movwf	_bottomDistributionState& (0+255),b
  3613  001A3E  0E1A               	movlw	high _bottom_distribution_idle
  3614  001A40  0100               	movlb	0	; () banked
  3615  001A42  6FCD               	movwf	(_bottomDistributionState+1)& (0+255),b
  3616                           
  3617                           ; BSR set to: 0
  3618  001A44  0012               	return	
  3619  001A46                     __end_of_bottom_distribution_idle:
  3620                           	opt stack 0
  3621                           tosu	equ	0xFFF
  3622                           tosh	equ	0xFFE
  3623                           tosl	equ	0xFFD
  3624                           pclath	equ	0xFFA
  3625                           intcon3	equ	0xFF0
  3626                           postinc0	equ	0xFEE
  3627                           wreg	equ	0xFE8
  3628                           status	equ	0xFD8
  3629                           
  3630 ;; *************** function _bottom_distribution_prepare *****************
  3631 ;; Defined at:
  3632 ;;		line 69 in file "bottom_distribution_fsm.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;		None
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;		None
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  1    wreg      void 
  3639 ;; Registers used:
  3640 ;;		wreg, status,2, status,0, cstack
  3641 ;; Tracked objects:
  3642 ;;		On entry : 0/0
  3643 ;;		On exit  : 0/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3650 ;;Total ram usage:        0 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; Hardware stack levels required when called:    6
  3653 ;; This function calls:
  3654 ;;		_bottom_distribution_motor_ccw
  3655 ;;		_bottom_distribution_motor_cw
  3656 ;; This function is called by:
  3657 ;;		_bottom_distribution_idle
  3658 ;;		_startSorting
  3659 ;; This function uses a non-reentrant model
  3660 ;;
  3661                           
  3662                           	psect	text28
  3663  001C64                     __ptext28:
  3664                           	opt stack 0
  3665  001C64                     _bottom_distribution_prepare:
  3666                           	opt stack 23
  3667                           
  3668                           ;bottom_distribution_fsm.c: 72: if(bottom_move == 1){
  3669                           
  3670                           ; BSR set to: 0
  3671                           ;incstack = 0
  3672  001C64  0449               	decf	_bottom_move,w,c
  3673  001C66  104A               	iorwf	_bottom_move+1,w,c
  3674  001C68  A4D8               	btfss	status,2,c
  3675  001C6A  D003               	goto	l4401
  3676                           
  3677                           ;bottom_distribution_fsm.c: 82: bottom_distribution_motor_cw();
  3678  001C6C  EC98  F00D         	call	_bottom_distribution_motor_cw	;wreg free
  3679                           
  3680                           ;bottom_distribution_fsm.c: 84: }else{
  3681  001C70  D002               	goto	l4403
  3682  001C72                     l4401:
  3683                           
  3684                           ;bottom_distribution_fsm.c: 95: bottom_distribution_motor_ccw();
  3685  001C72  ECAB  F00D         	call	_bottom_distribution_motor_ccw	;wreg free
  3686  001C76                     l4403:
  3687                           
  3688                           ;bottom_distribution_fsm.c: 97: }
  3689                           ;bottom_distribution_fsm.c: 100: bottomDistributionState = bottom_distribution_move;
  3690  001C76  0E44               	movlw	low _bottom_distribution_move
  3691  001C78  0100               	movlb	0	; () banked
  3692  001C7A  6FCC               	movwf	_bottomDistributionState& (0+255),b
  3693  001C7C  0E1C               	movlw	high _bottom_distribution_move
  3694  001C7E  0100               	movlb	0	; () banked
  3695  001C80  6FCD               	movwf	(_bottomDistributionState+1)& (0+255),b
  3696  001C82  0012               	return	
  3697  001C84                     __end_of_bottom_distribution_prepare:
  3698                           	opt stack 0
  3699                           tosu	equ	0xFFF
  3700                           tosh	equ	0xFFE
  3701                           tosl	equ	0xFFD
  3702                           pclath	equ	0xFFA
  3703                           intcon3	equ	0xFF0
  3704                           postinc0	equ	0xFEE
  3705                           wreg	equ	0xFE8
  3706                           status	equ	0xFD8
  3707                           
  3708 ;; *************** function _bottom_distribution_motor_cw *****************
  3709 ;; Defined at:
  3710 ;;		line 124 in file "motors.c"
  3711 ;; Parameters:    Size  Location     Type
  3712 ;;		None
  3713 ;; Auto vars:     Size  Location     Type
  3714 ;;		None
  3715 ;; Return value:  Size  Location     Type
  3716 ;;                  1    wreg      void 
  3717 ;; Registers used:
  3718 ;;		wreg
  3719 ;; Tracked objects:
  3720 ;;		On entry : 0/0
  3721 ;;		On exit  : 0/0
  3722 ;;		Unchanged: 0/0
  3723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3726 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3727 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3728 ;;Total ram usage:        2 bytes
  3729 ;; Hardware stack levels used:    1
  3730 ;; Hardware stack levels required when called:    5
  3731 ;; This function calls:
  3732 ;;		Nothing
  3733 ;; This function is called by:
  3734 ;;		_bottom_distribution_prepare
  3735 ;;		_bottom_distribution_move
  3736 ;; This function uses a non-reentrant model
  3737 ;;
  3738                           
  3739                           	psect	text29
  3740  001B30                     __ptext29:
  3741                           	opt stack 0
  3742  001B30                     _bottom_distribution_motor_cw:
  3743                           	opt stack 23
  3744                           
  3745                           ;motors.c: 127: LATDbits.LATD1 = 0;
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;incstack = 0
  3749  001B30  928C               	bcf	3980,1,c	;volatile
  3750                           
  3751                           ;motors.c: 128: LATBbits.LATB0 = 1;
  3752  001B32  808A               	bsf	3978,0,c	;volatile
  3753                           
  3754                           ;motors.c: 129: _delay((unsigned long)((500)*(10000000/4000.0)));
  3755  001B34  0E07               	movlw	7
  3756  001B36  0100               	movlb	0	; () banked
  3757  001B38  6F81               	movwf	(??_bottom_distribution_motor_cw+1)& (0+255),b
  3758  001B3A  0E58               	movlw	88
  3759  001B3C  0100               	movlb	0	; () banked
  3760  001B3E  6F80               	movwf	??_bottom_distribution_motor_cw& (0+255),b
  3761  001B40  0E59               	movlw	89
  3762  001B42                     u4247:
  3763  001B42  2EE8               	decfsz	wreg,f,c
  3764  001B44  D7FE               	bra	u4247
  3765  001B46  2F80               	decfsz	??_bottom_distribution_motor_cw& (0+255),f,b
  3766  001B48  D7FC               	bra	u4247
  3767  001B4A  2F81               	decfsz	(??_bottom_distribution_motor_cw+1)& (0+255),f,b
  3768  001B4C  D7FA               	bra	u4247
  3769  001B4E  D000               	nop2	
  3770                           
  3771                           ;motors.c: 132: LATDbits.LATD1 = 0;
  3772  001B50  928C               	bcf	3980,1,c	;volatile
  3773                           
  3774                           ;motors.c: 133: LATBbits.LATB0 = 0;
  3775  001B52  908A               	bcf	3978,0,c	;volatile
  3776  001B54  0012               	return	
  3777  001B56                     __end_of_bottom_distribution_motor_cw:
  3778                           	opt stack 0
  3779                           tosu	equ	0xFFF
  3780                           tosh	equ	0xFFE
  3781                           tosl	equ	0xFFD
  3782                           pclath	equ	0xFFA
  3783                           intcon3	equ	0xFF0
  3784                           postinc0	equ	0xFEE
  3785                           wreg	equ	0xFE8
  3786                           status	equ	0xFD8
  3787                           
  3788 ;; *************** function _bottom_distribution_motor_ccw *****************
  3789 ;; Defined at:
  3790 ;;		line 138 in file "motors.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;		None
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;		None
  3795 ;; Return value:  Size  Location     Type
  3796 ;;                  1    wreg      void 
  3797 ;; Registers used:
  3798 ;;		wreg
  3799 ;; Tracked objects:
  3800 ;;		On entry : 0/0
  3801 ;;		On exit  : 0/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3806 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3807 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3808 ;;Total ram usage:        2 bytes
  3809 ;; Hardware stack levels used:    1
  3810 ;; Hardware stack levels required when called:    5
  3811 ;; This function calls:
  3812 ;;		Nothing
  3813 ;; This function is called by:
  3814 ;;		_bottom_distribution_prepare
  3815 ;;		_bottom_distribution_move
  3816 ;; This function uses a non-reentrant model
  3817 ;;
  3818                           
  3819                           	psect	text30
  3820  001B56                     __ptext30:
  3821                           	opt stack 0
  3822  001B56                     _bottom_distribution_motor_ccw:
  3823                           	opt stack 23
  3824                           
  3825                           ;motors.c: 141: LATDbits.LATD1 = 1;
  3826                           
  3827                           ;incstack = 0
  3828  001B56  828C               	bsf	3980,1,c	;volatile
  3829                           
  3830                           ;motors.c: 142: LATBbits.LATB0 = 0;
  3831  001B58  908A               	bcf	3978,0,c	;volatile
  3832                           
  3833                           ;motors.c: 143: _delay((unsigned long)((500)*(10000000/4000.0)));
  3834  001B5A  0E07               	movlw	7
  3835  001B5C  0100               	movlb	0	; () banked
  3836  001B5E  6F81               	movwf	(??_bottom_distribution_motor_ccw+1)& (0+255),b
  3837  001B60  0E58               	movlw	88
  3838  001B62  0100               	movlb	0	; () banked
  3839  001B64  6F80               	movwf	??_bottom_distribution_motor_ccw& (0+255),b
  3840  001B66  0E59               	movlw	89
  3841  001B68                     u4257:
  3842  001B68  2EE8               	decfsz	wreg,f,c
  3843  001B6A  D7FE               	bra	u4257
  3844  001B6C  2F80               	decfsz	??_bottom_distribution_motor_ccw& (0+255),f,b
  3845  001B6E  D7FC               	bra	u4257
  3846  001B70  2F81               	decfsz	(??_bottom_distribution_motor_ccw+1)& (0+255),f,b
  3847  001B72  D7FA               	bra	u4257
  3848  001B74  D000               	nop2	
  3849                           
  3850                           ;motors.c: 146: LATDbits.LATD1 = 0;
  3851  001B76  928C               	bcf	3980,1,c	;volatile
  3852                           
  3853                           ;motors.c: 147: LATBbits.LATB0 = 0;
  3854  001B78  908A               	bcf	3978,0,c	;volatile
  3855  001B7A  0012               	return	
  3856  001B7C                     __end_of_bottom_distribution_motor_ccw:
  3857                           	opt stack 0
  3858                           tosu	equ	0xFFF
  3859                           tosh	equ	0xFFE
  3860                           tosl	equ	0xFFD
  3861                           pclath	equ	0xFFA
  3862                           intcon3	equ	0xFF0
  3863                           postinc0	equ	0xFEE
  3864                           wreg	equ	0xFE8
  3865                           status	equ	0xFD8
  3866                           
  3867 ;; *************** function _standby *****************
  3868 ;; Defined at:
  3869 ;;		line 29 in file "operation.c"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;		None
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;  i               1   40[BANK0 ] unsigned char 
  3874 ;;  i               1   41[BANK0 ] unsigned char 
  3875 ;;  keypress_tem    1   39[BANK0 ] unsigned char 
  3876 ;;  keypress        1   38[BANK0 ] unsigned char 
  3877 ;; Return value:  Size  Location     Type
  3878 ;;                  1    wreg      void 
  3879 ;; Registers used:
  3880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3881 ;; Tracked objects:
  3882 ;;		On entry : 0/0
  3883 ;;		On exit  : 0/0
  3884 ;;		Unchanged: 0/0
  3885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3887 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3888 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3889 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3890 ;;Total ram usage:        6 bytes
  3891 ;; Hardware stack levels used:    1
  3892 ;; Hardware stack levels required when called:    8
  3893 ;; This function calls:
  3894 ;;		_I2C_Master_Read
  3895 ;;		_I2C_Master_Start
  3896 ;;		_I2C_Master_Stop
  3897 ;;		_I2C_Master_Write
  3898 ;;		_initLCD
  3899 ;;		_lcdInst
  3900 ;;		_printf
  3901 ;; This function is called by:
  3902 ;;		_main
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906                           	psect	text31
  3907  000E08                     __ptext31:
  3908                           	opt stack 0
  3909  000E08                     _standby:
  3910                           	opt stack 22
  3911                           
  3912                           ;operation.c: 31: (INTCONbits.GIE = 0);
  3913                           
  3914                           ;incstack = 0
  3915  000E08  9EF2               	bcf	intcon,7,c	;volatile
  3916                           
  3917                           ;operation.c: 32: lcdInst(0b10000000);;
  3918  000E0A  0E80               	movlw	128
  3919  000E0C  ECA5  F00E         	call	_lcdInst
  3920                           
  3921                           ;operation.c: 33: initLCD();
  3922  000E10  EC1F  F00C         	call	_initLCD	;wreg free
  3923                           
  3924                           ;operation.c: 34: __nop();
  3925  000E14  F000               	nop	
  3926                           
  3927                           ;operation.c: 35: __nop();
  3928  000E16  F000               	nop	
  3929  000E18                     l414:
  3930                           
  3931                           ;operation.c: 39: I2C_Master_Start();
  3932  000E18  ECDE  F00E         	call	_I2C_Master_Start	;wreg free
  3933                           
  3934                           ;operation.c: 40: I2C_Master_Write(0b11010000);
  3935  000E1C  0E00               	movlw	0
  3936  000E1E  0100               	movlb	0	; () banked
  3937  000E20  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3938  000E22  0ED0               	movlw	208
  3939  000E24  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3940  000E26  ECD5  F00E         	call	_I2C_Master_Write	;wreg free
  3941                           
  3942                           ;operation.c: 41: I2C_Master_Write(0x00);
  3943  000E2A  0E00               	movlw	0
  3944  000E2C  0100               	movlb	0	; () banked
  3945  000E2E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3946  000E30  0E00               	movlw	0
  3947  000E32  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3948  000E34  ECD5  F00E         	call	_I2C_Master_Write	;wreg free
  3949                           
  3950                           ;operation.c: 42: I2C_Master_Stop();
  3951  000E38  ECDA  F00E         	call	_I2C_Master_Stop	;wreg free
  3952                           
  3953                           ;operation.c: 45: I2C_Master_Start();
  3954  000E3C  ECDE  F00E         	call	_I2C_Master_Start	;wreg free
  3955                           
  3956                           ;operation.c: 46: I2C_Master_Write(0b11010001);
  3957  000E40  0E00               	movlw	0
  3958  000E42  0100               	movlb	0	; () banked
  3959  000E44  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3960  000E46  0ED1               	movlw	209
  3961  000E48  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3962  000E4A  ECD5  F00E         	call	_I2C_Master_Write	;wreg free
  3963                           
  3964                           ;operation.c: 47: for(unsigned char i=0;i<0x06;i++){
  3965  000E4E  0E00               	movlw	0
  3966  000E50  0100               	movlb	0	; () banked
  3967  000E52  6FA9               	movwf	standby@i& (0+255),b
  3968  000E54                     l4677:
  3969                           
  3970                           ; BSR set to: 0
  3971  000E54  0E05               	movlw	5
  3972  000E56  0100               	movlb	0	; () banked
  3973  000E58  65A9               	cpfsgt	standby@i& (0+255),b
  3974  000E5A  D001               	goto	l4681
  3975  000E5C  D010               	goto	l4687
  3976  000E5E                     l4681:
  3977                           
  3978                           ; BSR set to: 0
  3979                           ;operation.c: 48: time[i] = I2C_Master_Read(1);
  3980  000E5E  0100               	movlb	0	; () banked
  3981  000E60  51A9               	movf	standby@i& (0+255),w,b
  3982  000E62  0D01               	mullw	1
  3983  000E64  0EAB               	movlw	low _time
  3984  000E66  24F3               	addwf	prodl,w,c
  3985  000E68  6ED9               	movwf	fsr2l,c
  3986  000E6A  0E00               	movlw	high _time
  3987  000E6C  20F4               	addwfc	prodh,w,c
  3988  000E6E  6EDA               	movwf	fsr2h,c
  3989  000E70  0E01               	movlw	1
  3990  000E72  ECF6  F00C         	call	_I2C_Master_Read
  3991  000E76  6EDF               	movwf	indf2,c
  3992  000E78  0100               	movlb	0	; () banked
  3993  000E7A  2BA9               	incf	standby@i& (0+255),f,b
  3994  000E7C  D7EB               	goto	l4677
  3995  000E7E                     l4687:
  3996                           
  3997                           ; BSR set to: 0
  3998                           ;operation.c: 49: }
  3999                           ;operation.c: 50: time[6] = I2C_Master_Read(0);
  4000  000E7E  0E00               	movlw	0
  4001  000E80  ECF6  F00C         	call	_I2C_Master_Read
  4002  000E84  0100               	movlb	0	; () banked
  4003  000E86  6FB1               	movwf	(_time+6)& (0+255),b
  4004                           
  4005                           ;operation.c: 51: I2C_Master_Stop();
  4006  000E88  ECDA  F00E         	call	_I2C_Master_Stop	;wreg free
  4007                           
  4008                           ;operation.c: 53: lcdInst(0b10000000);;
  4009  000E8C  0E80               	movlw	128
  4010  000E8E  ECA5  F00E         	call	_lcdInst
  4011                           
  4012                           ;operation.c: 54: printf("%02x/%02x   ",time[5],time[4]);
  4013  000E92  0ECF               	movlw	low STR_2
  4014  000E94  0100               	movlb	0	; () banked
  4015  000E96  6F8E               	movwf	printf@f& (0+255),b
  4016  000E98  0EFF               	movlw	high STR_2
  4017  000E9A  0100               	movlb	0	; () banked
  4018  000E9C  6F8F               	movwf	(printf@f+1)& (0+255),b
  4019  000E9E  C0B0  F090         	movff	_time+5,?_printf+2
  4020  000EA2  0100               	movlb	0	; () banked
  4021  000EA4  6B91               	clrf	(?_printf+3)& (0+255),b
  4022  000EA6  C0AF  F092         	movff	_time+4,?_printf+4
  4023  000EAA  0100               	movlb	0	; () banked
  4024  000EAC  6B93               	clrf	(?_printf+5)& (0+255),b
  4025  000EAE  EC09  F000         	call	_printf	;wreg free
  4026                           
  4027                           ;operation.c: 55: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  4028  000EB2  0EC0               	movlw	low STR_3
  4029  000EB4  0100               	movlb	0	; () banked
  4030  000EB6  6F8E               	movwf	printf@f& (0+255),b
  4031  000EB8  0EFF               	movlw	high STR_3
  4032  000EBA  0100               	movlb	0	; () banked
  4033  000EBC  6F8F               	movwf	(printf@f+1)& (0+255),b
  4034  000EBE  C0AD  F090         	movff	_time+2,?_printf+2
  4035  000EC2  0100               	movlb	0	; () banked
  4036  000EC4  6B91               	clrf	(?_printf+3)& (0+255),b
  4037  000EC6  C0AC  F092         	movff	_time+1,?_printf+4
  4038  000ECA  0100               	movlb	0	; () banked
  4039  000ECC  6B93               	clrf	(?_printf+5)& (0+255),b
  4040  000ECE  C0AB  F094         	movff	_time,?_printf+6
  4041  000ED2  0100               	movlb	0	; () banked
  4042  000ED4  6B95               	clrf	(?_printf+7)& (0+255),b
  4043  000ED6  EC09  F000         	call	_printf	;wreg free
  4044                           
  4045                           ;operation.c: 57: lcdInst(0b11000000);;
  4046  000EDA  0EC0               	movlw	192
  4047  000EDC  ECA5  F00E         	call	_lcdInst
  4048                           
  4049                           ;operation.c: 58: printf("Press # to Start");
  4050  000EE0  0E80               	movlw	low STR_4
  4051  000EE2  0100               	movlb	0	; () banked
  4052  000EE4  6F8E               	movwf	printf@f& (0+255),b
  4053  000EE6  0EFF               	movlw	high STR_4
  4054  000EE8  0100               	movlb	0	; () banked
  4055  000EEA  6F8F               	movwf	(printf@f+1)& (0+255),b
  4056  000EEC  EC09  F000         	call	_printf	;wreg free
  4057                           
  4058                           ;operation.c: 61: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4059  000EF0  3881               	swapf	3969,w,c	;volatile
  4060  000EF2  0B0F               	andlw	15
  4061  000EF4  0B0F               	andlw	15
  4062  000EF6  0100               	movlb	0	; () banked
  4063  000EF8  6FA6               	movwf	standby@keypress& (0+255),b
  4064  000EFA                     l417:
  4065  000EFA  B281               	btfsc	3969,1,c	;volatile
  4066  000EFC  D7FE               	goto	l417
  4067                           
  4068                           ;operation.c: 64: }
  4069                           ;operation.c: 65: unsigned char keypress_temp = keys[keypress];
  4070  000EFE  0100               	movlb	0	; () banked
  4071  000F00  51A6               	movf	standby@keypress& (0+255),w,b
  4072  000F02  0D01               	mullw	1
  4073  000F04  0EE9               	movlw	low _keys
  4074  000F06  24F3               	addwf	prodl,w,c
  4075  000F08  6EF6               	movwf	tblptrl,c
  4076  000F0A  0EFE               	movlw	high _keys
  4077  000F0C  20F4               	addwfc	prodh,w,c
  4078  000F0E  6EF7               	movwf	tblptrh,c
  4079  000F10                     	if	1	;There are 3 active tblptr bytes
  4080  000F10  6AF8               	clrf	tblptru,c
  4081  000F12  0E00               	movlw	low (__mediumconst shr (0+16))
  4082  000F14  22F8               	addwfc	tblptru,f,c
  4083  000F16                     	endif
  4084  000F16  0008               	tblrd		*
  4085  000F18  CFF5 F0A7          	movff	tablat,standby@keypress_temp
  4086                           
  4087                           ; BSR set to: 0
  4088                           ;operation.c: 67: if(keypress_temp == '#'){
  4089  000F1C  0E23               	movlw	35
  4090  000F1E  0100               	movlb	0	; () banked
  4091  000F20  19A7               	xorwf	standby@keypress_temp& (0+255),w,b
  4092  000F22  A4D8               	btfss	status,2,c
  4093  000F24  D007               	goto	l4703
  4094                           
  4095                           ; BSR set to: 0
  4096                           ;operation.c: 68: Start_time[2] = time[2];
  4097  000F26  C0AD  F0BC         	movff	_time+2,_Start_time+2
  4098                           
  4099                           ;operation.c: 69: Start_time[1] = time[1];
  4100  000F2A  C0AC  F0BB         	movff	_time+1,_Start_time+1
  4101                           
  4102                           ;operation.c: 70: Start_time[0] = time[0];
  4103  000F2E  C0AB  F0BA         	movff	_time,_Start_time
  4104                           
  4105                           ;operation.c: 71: break;
  4106  000F32  0012               	return	
  4107  000F34                     l4703:
  4108                           
  4109                           ; BSR set to: 0
  4110                           ;operation.c: 72: }
  4111                           ;operation.c: 73: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)))
      +                          ;};
  4112  000F34  0E00               	movlw	0
  4113  000F36  0100               	movlb	0	; () banked
  4114  000F38  6FA8               	movwf	standby@i_741& (0+255),b
  4115  000F3A                     l4705:
  4116                           
  4117                           ; BSR set to: 0
  4118  000F3A  0E09               	movlw	9
  4119  000F3C  0100               	movlb	0	; () banked
  4120  000F3E  65A8               	cpfsgt	standby@i_741& (0+255),b
  4121  000F40  D001               	goto	l4709
  4122  000F42  D76A               	goto	l414
  4123  000F44                     l4709:
  4124                           
  4125                           ; BSR set to: 0
  4126  000F44  0E02               	movlw	2
  4127  000F46  0100               	movlb	0	; () banked
  4128  000F48  6FA5               	movwf	(??_standby+1)& (0+255),b
  4129  000F4A  0E3F               	movlw	63
  4130  000F4C  0100               	movlb	0	; () banked
  4131  000F4E  6FA4               	movwf	??_standby& (0+255),b
  4132  000F50  0E2B               	movlw	43
  4133  000F52                     u4267:
  4134  000F52  2EE8               	decfsz	wreg,f,c
  4135  000F54  D7FE               	bra	u4267
  4136  000F56  2FA4               	decfsz	??_standby& (0+255),f,b
  4137  000F58  D7FC               	bra	u4267
  4138  000F5A  2FA5               	decfsz	(??_standby+1)& (0+255),f,b
  4139  000F5C  D7FA               	bra	u4267
  4140  000F5E  0100               	movlb	0	; () banked
  4141  000F60  2BA8               	incf	standby@i_741& (0+255),f,b
  4142  000F62  D7EB               	goto	l4705
  4143  000F64                     __end_of_standby:
  4144                           	opt stack 0
  4145                           tosu	equ	0xFFF
  4146                           tosh	equ	0xFFE
  4147                           tosl	equ	0xFFD
  4148                           pclath	equ	0xFFA
  4149                           tblptru	equ	0xFF8
  4150                           tblptrh	equ	0xFF7
  4151                           tblptrl	equ	0xFF6
  4152                           tablat	equ	0xFF5
  4153                           prodh	equ	0xFF4
  4154                           prodl	equ	0xFF3
  4155                           intcon	equ	0xFF2
  4156                           intcon3	equ	0xFF0
  4157                           postinc0	equ	0xFEE
  4158                           wreg	equ	0xFE8
  4159                           indf2	equ	0xFDF
  4160                           fsr2h	equ	0xFDA
  4161                           fsr2l	equ	0xFD9
  4162                           status	equ	0xFD8
  4163                           
  4164 ;; *************** function _set_time *****************
  4165 ;; Defined at:
  4166 ;;		line 72 in file "main.c"
  4167 ;; Parameters:    Size  Location     Type
  4168 ;;		None
  4169 ;; Auto vars:     Size  Location     Type
  4170 ;;  i               1    3[BANK0 ] unsigned char 
  4171 ;; Return value:  Size  Location     Type
  4172 ;;                  1    wreg      void 
  4173 ;; Registers used:
  4174 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4175 ;; Tracked objects:
  4176 ;;		On entry : 0/0
  4177 ;;		On exit  : 0/0
  4178 ;;		Unchanged: 0/0
  4179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4181 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4183 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4184 ;;Total ram usage:        1 bytes
  4185 ;; Hardware stack levels used:    1
  4186 ;; Hardware stack levels required when called:    7
  4187 ;; This function calls:
  4188 ;;		_I2C_Master_Start
  4189 ;;		_I2C_Master_Stop
  4190 ;;		_I2C_Master_Write
  4191 ;; This function is called by:
  4192 ;;		_main
  4193 ;; This function uses a non-reentrant model
  4194 ;;
  4195                           
  4196                           	psect	text32
  4197  0015D2                     __ptext32:
  4198                           	opt stack 0
  4199  0015D2                     _set_time:
  4200                           	opt stack 23
  4201                           
  4202                           ;main.c: 73: I2C_Master_Start();
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;incstack = 0
  4206  0015D2  ECDE  F00E         	call	_I2C_Master_Start	;wreg free
  4207                           
  4208                           ;main.c: 74: I2C_Master_Write(0b11010000);
  4209  0015D6  0E00               	movlw	0
  4210  0015D8  0100               	movlb	0	; () banked
  4211  0015DA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4212  0015DC  0ED0               	movlw	208
  4213  0015DE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4214  0015E0  ECD5  F00E         	call	_I2C_Master_Write	;wreg free
  4215                           
  4216                           ;main.c: 75: I2C_Master_Write(0x00);
  4217  0015E4  0E00               	movlw	0
  4218  0015E6  0100               	movlb	0	; () banked
  4219  0015E8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4220  0015EA  0E00               	movlw	0
  4221  0015EC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4222  0015EE  ECD5  F00E         	call	_I2C_Master_Write	;wreg free
  4223                           
  4224                           ;main.c: 76: for(char i=0; i<7; i++){
  4225  0015F2  0E00               	movlw	0
  4226  0015F4  0100               	movlb	0	; () banked
  4227  0015F6  6F83               	movwf	set_time@i& (0+255),b
  4228  0015F8                     l4655:
  4229                           
  4230                           ; BSR set to: 0
  4231  0015F8  0E06               	movlw	6
  4232  0015FA  0100               	movlb	0	; () banked
  4233  0015FC  6583               	cpfsgt	set_time@i& (0+255),b
  4234  0015FE  D001               	goto	l4659
  4235  001600  D016               	goto	l4665
  4236  001602                     l4659:
  4237                           
  4238                           ; BSR set to: 0
  4239                           ;main.c: 77: I2C_Master_Write(real_time[i]);
  4240  001602  0100               	movlb	0	; () banked
  4241  001604  5183               	movf	set_time@i& (0+255),w,b
  4242  001606  0D01               	mullw	1
  4243  001608  0E0C               	movlw	low _real_time
  4244  00160A  24F3               	addwf	prodl,w,c
  4245  00160C  6EF6               	movwf	tblptrl,c
  4246  00160E  0EFF               	movlw	high _real_time
  4247  001610  20F4               	addwfc	prodh,w,c
  4248  001612  6EF7               	movwf	tblptrh,c
  4249  001614                     	if	1	;There are 3 active tblptr bytes
  4250  001614  6AF8               	clrf	tblptru,c
  4251  001616  0E00               	movlw	low (__mediumconst shr (0+16))
  4252  001618  22F8               	addwfc	tblptru,f,c
  4253  00161A                     	endif
  4254  00161A  0008               	tblrd		*
  4255  00161C  50F5               	movf	tablat,w,c
  4256  00161E  0100               	movlb	0	; () banked
  4257  001620  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4258  001622  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  4259  001624  ECD5  F00E         	call	_I2C_Master_Write	;wreg free
  4260  001628  0100               	movlb	0	; () banked
  4261  00162A  2B83               	incf	set_time@i& (0+255),f,b
  4262  00162C  D7E5               	goto	l4655
  4263  00162E                     l4665:
  4264                           
  4265                           ; BSR set to: 0
  4266                           ;main.c: 78: }
  4267                           ;main.c: 79: I2C_Master_Stop();
  4268  00162E  ECDA  F00E         	call	_I2C_Master_Stop	;wreg free
  4269  001632  0012               	return		;funcret
  4270  001634                     __end_of_set_time:
  4271                           	opt stack 0
  4272                           tosu	equ	0xFFF
  4273                           tosh	equ	0xFFE
  4274                           tosl	equ	0xFFD
  4275                           pclath	equ	0xFFA
  4276                           tblptru	equ	0xFF8
  4277                           tblptrh	equ	0xFF7
  4278                           tblptrl	equ	0xFF6
  4279                           tablat	equ	0xFF5
  4280                           prodh	equ	0xFF4
  4281                           prodl	equ	0xFF3
  4282                           intcon	equ	0xFF2
  4283                           intcon3	equ	0xFF0
  4284                           postinc0	equ	0xFEE
  4285                           wreg	equ	0xFE8
  4286                           indf2	equ	0xFDF
  4287                           fsr2h	equ	0xFDA
  4288                           fsr2l	equ	0xFD9
  4289                           status	equ	0xFD8
  4290                           
  4291 ;; *************** function _results *****************
  4292 ;; Defined at:
  4293 ;;		line 221 in file "operation.c"
  4294 ;; Parameters:    Size  Location     Type
  4295 ;;		None
  4296 ;; Auto vars:     Size  Location     Type
  4297 ;;  i               1   42[BANK0 ] unsigned char 
  4298 ;;  i               1   41[BANK0 ] unsigned char 
  4299 ;;  i               1   40[BANK0 ] unsigned char 
  4300 ;;  keypress_tem    1   39[BANK0 ] unsigned char 
  4301 ;;  keypress        1   38[BANK0 ] unsigned char 
  4302 ;; Return value:  Size  Location     Type
  4303 ;;                  1    wreg      void 
  4304 ;; Registers used:
  4305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4306 ;; Tracked objects:
  4307 ;;		On entry : 0/0
  4308 ;;		On exit  : 0/0
  4309 ;;		Unchanged: 0/0
  4310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4312 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4313 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4314 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4315 ;;Total ram usage:        7 bytes
  4316 ;; Hardware stack levels used:    1
  4317 ;; Hardware stack levels required when called:    8
  4318 ;; This function calls:
  4319 ;;		_initLCD
  4320 ;;		_lcdInst
  4321 ;;		_printf
  4322 ;; This function is called by:
  4323 ;;		_main
  4324 ;; This function uses a non-reentrant model
  4325 ;;
  4326                           
  4327                           	psect	text33
  4328  000C92                     __ptext33:
  4329                           	opt stack 0
  4330  000C92                     _results:
  4331                           	opt stack 22
  4332                           
  4333                           ;operation.c: 223: tot = pop_can + pop_can_tab + tin_can + tin_can_label;
  4334                           
  4335                           ;incstack = 0
  4336  000C92  0100               	movlb	0	; () banked
  4337  000C94  51C0               	movf	_pop_can_tab& (0+255),w,b
  4338  000C96  0100               	movlb	0	; () banked
  4339  000C98  25C2               	addwf	_pop_can& (0+255),w,b
  4340  000C9A  0100               	movlb	0	; () banked
  4341  000C9C  6FA4               	movwf	??_results& (0+255),b
  4342  000C9E  0100               	movlb	0	; () banked
  4343  000CA0  51C1               	movf	(_pop_can_tab+1)& (0+255),w,b
  4344  000CA2  0100               	movlb	0	; () banked
  4345  000CA4  21C3               	addwfc	(_pop_can+1)& (0+255),w,b
  4346  000CA6  0100               	movlb	0	; () banked
  4347  000CA8  6FA5               	movwf	(??_results+1)& (0+255),b
  4348  000CAA  0100               	movlb	0	; () banked
  4349  000CAC  51C4               	movf	_tin_can& (0+255),w,b
  4350  000CAE  0100               	movlb	0	; () banked
  4351  000CB0  27A4               	addwf	??_results& (0+255),f,b
  4352  000CB2  0100               	movlb	0	; () banked
  4353  000CB4  51C5               	movf	(_tin_can+1)& (0+255),w,b
  4354  000CB6  0100               	movlb	0	; () banked
  4355  000CB8  23A5               	addwfc	(??_results+1)& (0+255),f,b
  4356  000CBA  0100               	movlb	0	; () banked
  4357  000CBC  51C6               	movf	_tin_can_label& (0+255),w,b
  4358  000CBE  0100               	movlb	0	; () banked
  4359  000CC0  25A4               	addwf	??_results& (0+255),w,b
  4360  000CC2  6E43               	movwf	_tot,c
  4361  000CC4  0100               	movlb	0	; () banked
  4362  000CC6  51C7               	movf	(_tin_can_label+1)& (0+255),w,b
  4363  000CC8  0100               	movlb	0	; () banked
  4364  000CCA  21A5               	addwfc	(??_results+1)& (0+255),w,b
  4365  000CCC  6E44               	movwf	_tot+1,c
  4366  000CCE                     l4799:
  4367                           
  4368                           ; BSR set to: 0
  4369                           ;operation.c: 226: lcdInst(0b10000000);;
  4370  000CCE  0E80               	movlw	128
  4371  000CD0  ECA5  F00E         	call	_lcdInst
  4372                           
  4373                           ;operation.c: 227: initLCD();
  4374  000CD4  EC1F  F00C         	call	_initLCD	;wreg free
  4375                           
  4376                           ;operation.c: 228: __nop();
  4377  000CD8  F000               	nop	
  4378                           
  4379                           ;operation.c: 229: __nop();
  4380  000CDA  F000               	nop	
  4381                           
  4382                           ;operation.c: 231: printf("A:Total   B:Pop ");
  4383  000CDC  0E4D               	movlw	low STR_7
  4384  000CDE  0100               	movlb	0	; () banked
  4385  000CE0  6F8E               	movwf	printf@f& (0+255),b
  4386  000CE2  0EFF               	movlw	high STR_7
  4387  000CE4  0100               	movlb	0	; () banked
  4388  000CE6  6F8F               	movwf	(printf@f+1)& (0+255),b
  4389  000CE8  EC09  F000         	call	_printf	;wreg free
  4390                           
  4391                           ;operation.c: 232: lcdInst(0b11000000);;
  4392  000CEC  0EC0               	movlw	192
  4393  000CEE  ECA5  F00E         	call	_lcdInst
  4394                           
  4395                           ;operation.c: 233: printf("C:Tin     D:Time");
  4396  000CF2  0E5E               	movlw	low STR_8
  4397  000CF4  0100               	movlb	0	; () banked
  4398  000CF6  6F8E               	movwf	printf@f& (0+255),b
  4399  000CF8  0EFF               	movlw	high STR_8
  4400  000CFA  0100               	movlb	0	; () banked
  4401  000CFC  6F8F               	movwf	(printf@f+1)& (0+255),b
  4402  000CFE  EC09  F000         	call	_printf	;wreg free
  4403                           
  4404                           ;operation.c: 234: (INTCONbits.GIE = 1);
  4405  000D02  8EF2               	bsf	intcon,7,c	;volatile
  4406                           
  4407                           ;operation.c: 235: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  4408  000D04  0E00               	movlw	0
  4409  000D06  0100               	movlb	0	; () banked
  4410  000D08  6FA8               	movwf	results@i& (0+255),b
  4411  000D0A                     l4817:
  4412                           
  4413                           ; BSR set to: 0
  4414  000D0A  0E09               	movlw	9
  4415  000D0C  0100               	movlb	0	; () banked
  4416  000D0E  65A8               	cpfsgt	results@i& (0+255),b
  4417  000D10  D001               	goto	l4821
  4418  000D12  D010               	goto	l4825
  4419  000D14                     l4821:
  4420                           
  4421                           ; BSR set to: 0
  4422  000D14  0E02               	movlw	2
  4423  000D16  0100               	movlb	0	; () banked
  4424  000D18  6FA5               	movwf	(??_results+1)& (0+255),b
  4425  000D1A  0E3F               	movlw	63
  4426  000D1C  0100               	movlb	0	; () banked
  4427  000D1E  6FA4               	movwf	??_results& (0+255),b
  4428  000D20  0E2B               	movlw	43
  4429  000D22                     u4277:
  4430  000D22  2EE8               	decfsz	wreg,f,c
  4431  000D24  D7FE               	bra	u4277
  4432  000D26  2FA4               	decfsz	??_results& (0+255),f,b
  4433  000D28  D7FC               	bra	u4277
  4434  000D2A  2FA5               	decfsz	(??_results+1)& (0+255),f,b
  4435  000D2C  D7FA               	bra	u4277
  4436  000D2E  0100               	movlb	0	; () banked
  4437  000D30  2BA8               	incf	results@i& (0+255),f,b
  4438  000D32  D7EB               	goto	l4817
  4439  000D34                     l4825:
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;operation.c: 236: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  4443  000D34  0E00               	movlw	0
  4444  000D36  0100               	movlb	0	; () banked
  4445  000D38  6FA9               	movwf	results@i_765& (0+255),b
  4446  000D3A                     l4827:
  4447                           
  4448                           ; BSR set to: 0
  4449  000D3A  0E09               	movlw	9
  4450  000D3C  0100               	movlb	0	; () banked
  4451  000D3E  65A9               	cpfsgt	results@i_765& (0+255),b
  4452  000D40  D001               	goto	l4831
  4453  000D42  D010               	goto	l453
  4454  000D44                     l4831:
  4455                           
  4456                           ; BSR set to: 0
  4457  000D44  0E02               	movlw	2
  4458  000D46  0100               	movlb	0	; () banked
  4459  000D48  6FA5               	movwf	(??_results+1)& (0+255),b
  4460  000D4A  0E3F               	movlw	63
  4461  000D4C  0100               	movlb	0	; () banked
  4462  000D4E  6FA4               	movwf	??_results& (0+255),b
  4463  000D50  0E2B               	movlw	43
  4464  000D52                     u4287:
  4465  000D52  2EE8               	decfsz	wreg,f,c
  4466  000D54  D7FE               	bra	u4287
  4467  000D56  2FA4               	decfsz	??_results& (0+255),f,b
  4468  000D58  D7FC               	bra	u4287
  4469  000D5A  2FA5               	decfsz	(??_results+1)& (0+255),f,b
  4470  000D5C  D7FA               	bra	u4287
  4471  000D5E  0100               	movlb	0	; () banked
  4472  000D60  2BA9               	incf	results@i_765& (0+255),f,b
  4473  000D62  D7EB               	goto	l4827
  4474  000D64                     l453:
  4475                           
  4476                           ; BSR set to: 0
  4477                           ;operation.c: 237: (INTCONbits.GIE = 0);
  4478  000D64  9EF2               	bcf	intcon,7,c	;volatile
  4479                           
  4480                           ; BSR set to: 0
  4481                           ;operation.c: 238: initLCD();
  4482  000D66  EC1F  F00C         	call	_initLCD	;wreg free
  4483                           
  4484                           ;operation.c: 239: __nop();
  4485  000D6A  F000               	nop	
  4486                           
  4487                           ;operation.c: 240: __nop();
  4488  000D6C  F000               	nop	
  4489                           
  4490                           ;operation.c: 241: printf("Press 0 to Reset");
  4491  000D6E  0E6F               	movlw	low STR_9
  4492  000D70  0100               	movlb	0	; () banked
  4493  000D72  6F8E               	movwf	printf@f& (0+255),b
  4494  000D74  0EFF               	movlw	high STR_9
  4495  000D76  0100               	movlb	0	; () banked
  4496  000D78  6F8F               	movwf	(printf@f+1)& (0+255),b
  4497  000D7A  EC09  F000         	call	_printf	;wreg free
  4498                           
  4499                           ;operation.c: 242: (INTCONbits.GIE = 1);
  4500  000D7E  8EF2               	bsf	intcon,7,c	;volatile
  4501                           
  4502                           ;operation.c: 243: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  4503  000D80  0E00               	movlw	0
  4504  000D82  0100               	movlb	0	; () banked
  4505  000D84  6FAA               	movwf	results@i_767& (0+255),b
  4506  000D86                     l4847:
  4507                           
  4508                           ; BSR set to: 0
  4509  000D86  0E09               	movlw	9
  4510  000D88  0100               	movlb	0	; () banked
  4511  000D8A  65AA               	cpfsgt	results@i_767& (0+255),b
  4512  000D8C  D001               	goto	l4851
  4513  000D8E  D010               	goto	l455
  4514  000D90                     l4851:
  4515                           
  4516                           ; BSR set to: 0
  4517  000D90  0E02               	movlw	2
  4518  000D92  0100               	movlb	0	; () banked
  4519  000D94  6FA5               	movwf	(??_results+1)& (0+255),b
  4520  000D96  0E3F               	movlw	63
  4521  000D98  0100               	movlb	0	; () banked
  4522  000D9A  6FA4               	movwf	??_results& (0+255),b
  4523  000D9C  0E2B               	movlw	43
  4524  000D9E                     u4297:
  4525  000D9E  2EE8               	decfsz	wreg,f,c
  4526  000DA0  D7FE               	bra	u4297
  4527  000DA2  2FA4               	decfsz	??_results& (0+255),f,b
  4528  000DA4  D7FC               	bra	u4297
  4529  000DA6  2FA5               	decfsz	(??_results+1)& (0+255),f,b
  4530  000DA8  D7FA               	bra	u4297
  4531  000DAA  0100               	movlb	0	; () banked
  4532  000DAC  2BAA               	incf	results@i_767& (0+255),f,b
  4533  000DAE  D7EB               	goto	l4847
  4534  000DB0                     l455:
  4535                           
  4536                           ; BSR set to: 0
  4537                           ;operation.c: 244: (INTCONbits.GIE = 0);
  4538  000DB0  9EF2               	bcf	intcon,7,c	;volatile
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;operation.c: 247: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4542  000DB2  3881               	swapf	3969,w,c	;volatile
  4543  000DB4  0B0F               	andlw	15
  4544  000DB6  0B0F               	andlw	15
  4545  000DB8  0100               	movlb	0	; () banked
  4546  000DBA  6FA6               	movwf	results@keypress& (0+255),b
  4547                           
  4548                           ; BSR set to: 0
  4549                           ;operation.c: 248: unsigned char keypress_temp = keys[keypress];
  4550  000DBC  0100               	movlb	0	; () banked
  4551  000DBE  51A6               	movf	results@keypress& (0+255),w,b
  4552  000DC0  0D01               	mullw	1
  4553  000DC2  0EE9               	movlw	low _keys
  4554  000DC4  24F3               	addwf	prodl,w,c
  4555  000DC6  6EF6               	movwf	tblptrl,c
  4556  000DC8  0EFE               	movlw	high _keys
  4557  000DCA  20F4               	addwfc	prodh,w,c
  4558  000DCC  6EF7               	movwf	tblptrh,c
  4559  000DCE                     	if	1	;There are 3 active tblptr bytes
  4560  000DCE  6AF8               	clrf	tblptru,c
  4561  000DD0  0E00               	movlw	low (__mediumconst shr (0+16))
  4562  000DD2  22F8               	addwfc	tblptru,f,c
  4563  000DD4                     	endif
  4564  000DD4  0008               	tblrd		*
  4565  000DD6  CFF5 F0A7          	movff	tablat,results@keypress_temp
  4566                           
  4567                           ; BSR set to: 0
  4568                           ;operation.c: 250: if(keypress_temp == '0'){
  4569  000DDA  0E30               	movlw	48
  4570  000DDC  0100               	movlb	0	; () banked
  4571  000DDE  19A7               	xorwf	results@keypress_temp& (0+255),w,b
  4572  000DE0  A4D8               	btfss	status,2,c
  4573  000DE2  D775               	goto	l4799
  4574                           
  4575                           ; BSR set to: 0
  4576                           ;operation.c: 251: pop_can = pop_can_tab = tin_can = tin_can_label = 0;
  4577  000DE4  0E00               	movlw	0
  4578  000DE6  0100               	movlb	0	; () banked
  4579  000DE8  6FC7               	movwf	(_tin_can_label+1)& (0+255),b
  4580  000DEA  0E00               	movlw	0
  4581  000DEC  6FC6               	movwf	_tin_can_label& (0+255),b
  4582  000DEE  C0C6  F0C4         	movff	_tin_can_label,_tin_can
  4583  000DF2  C0C7  F0C5         	movff	_tin_can_label+1,_tin_can+1
  4584  000DF6  C0C4  F0C0         	movff	_tin_can,_pop_can_tab
  4585  000DFA  C0C5  F0C1         	movff	_tin_can+1,_pop_can_tab+1
  4586  000DFE  C0C0  F0C2         	movff	_pop_can_tab,_pop_can
  4587  000E02  C0C1  F0C3         	movff	_pop_can_tab+1,_pop_can+1
  4588                           
  4589                           ;operation.c: 252: break;
  4590  000E06  0012               	return	
  4591  000E08                     __end_of_results:
  4592                           	opt stack 0
  4593                           tosu	equ	0xFFF
  4594                           tosh	equ	0xFFE
  4595                           tosl	equ	0xFFD
  4596                           pclath	equ	0xFFA
  4597                           tblptru	equ	0xFF8
  4598                           tblptrh	equ	0xFF7
  4599                           tblptrl	equ	0xFF6
  4600                           tablat	equ	0xFF5
  4601                           prodh	equ	0xFF4
  4602                           prodl	equ	0xFF3
  4603                           intcon	equ	0xFF2
  4604                           intcon3	equ	0xFF0
  4605                           postinc0	equ	0xFEE
  4606                           wreg	equ	0xFE8
  4607                           indf2	equ	0xFDF
  4608                           fsr2h	equ	0xFDA
  4609                           fsr2l	equ	0xFD9
  4610                           status	equ	0xFD8
  4611                           
  4612 ;; *************** function _printf *****************
  4613 ;; Defined at:
  4614 ;;		line 464 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
  4615 ;; Parameters:    Size  Location     Type
  4616 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  4617 ;;		 -> STR_15(13), STR_14(15), STR_13(15), STR_12(17), 
  4618 ;;		 -> STR_11(22), STR_10(19), STR_9(17), STR_8(17), 
  4619 ;;		 -> STR_7(17), STR_6(13), STR_5(9), STR_4(17), 
  4620 ;;		 -> STR_3(15), STR_2(13), STR_1(2), 
  4621 ;; Auto vars:     Size  Location     Type
  4622 ;;  idx             1   26[BANK0 ] unsigned char 
  4623 ;;  tmpval          4    0        struct .
  4624 ;;  cp              3    0        PTR const unsigned char 
  4625 ;;  width           2   33[BANK0 ] int 
  4626 ;;  val             2   30[BANK0 ] unsigned int 
  4627 ;;  ap              2   27[BANK0 ] PTR void [1]
  4628 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4629 ;;  len             2    0        unsigned int 
  4630 ;;  c               1   35[BANK0 ] char 
  4631 ;;  flag            1   32[BANK0 ] unsigned char 
  4632 ;;  prec            1   29[BANK0 ] char 
  4633 ;; Return value:  Size  Location     Type
  4634 ;;                  2   14[BANK0 ] int 
  4635 ;; Registers used:
  4636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4642 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4643 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4644 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4645 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4646 ;;Total ram usage:       22 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:    7
  4649 ;; This function calls:
  4650 ;;		___lwdiv
  4651 ;;		___lwmod
  4652 ;;		___wmul
  4653 ;;		_isdigit
  4654 ;;		_putch
  4655 ;; This function is called by:
  4656 ;;		_standby
  4657 ;;		_startSorting
  4658 ;;		_initialization
  4659 ;;		_results
  4660 ;; This function uses a non-reentrant model
  4661 ;;
  4662                           
  4663                           	psect	text34
  4664  000012                     __ptext34:
  4665                           	opt stack 0
  4666  000012                     _printf:
  4667                           	opt stack 22
  4668                           
  4669                           ;doprnt.c: 466: va_list ap;
  4670                           ;doprnt.c: 499: signed char c;
  4671                           ;doprnt.c: 501: int width;
  4672                           ;doprnt.c: 506: signed char prec;
  4673                           ;doprnt.c: 508: unsigned char flag;
  4674                           ;doprnt.c: 523: union {
  4675                           ;doprnt.c: 524: unsigned long vd;
  4676                           ;doprnt.c: 525: double integ;
  4677                           ;doprnt.c: 526: } tmpval;
  4678                           ;doprnt.c: 528: unsigned int val;
  4679                           ;doprnt.c: 529: unsigned len;
  4680                           ;doprnt.c: 530: const char * cp;
  4681                           ;doprnt.c: 533: *ap = __va_start();
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;incstack = 0
  4685  000012  0E90               	movlw	low (?_printf+2)
  4686  000014  0100               	movlb	0	; () banked
  4687  000016  6F9B               	movwf	printf@ap& (0+255),b
  4688  000018  0E00               	movlw	high (?_printf+2)
  4689  00001A  0100               	movlb	0	; () banked
  4690  00001C  6F9C               	movwf	(printf@ap+1)& (0+255),b
  4691                           
  4692                           ;doprnt.c: 536: while(c = *f++) {
  4693  00001E  D1D8               	goto	l4321
  4694  000020                     l4195:
  4695                           
  4696                           ; BSR set to: 0
  4697                           ;doprnt.c: 538: if(c != '%')
  4698  000020  0E25               	movlw	37
  4699  000022  0100               	movlb	0	; () banked
  4700  000024  19A3               	xorwf	printf@c& (0+255),w,b
  4701  000026  B4D8               	btfsc	status,2,c
  4702  000028  D005               	goto	l4199
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;doprnt.c: 540: {
  4706                           ;doprnt.c: 541: (putch(c) );
  4707  00002A  0100               	movlb	0	; () banked
  4708  00002C  51A3               	movf	printf@c& (0+255),w,b
  4709  00002E  EC9D  F00E         	call	_putch
  4710                           
  4711                           ;doprnt.c: 542: continue;
  4712  000032  D1CE               	goto	l4321
  4713  000034                     l4199:
  4714                           
  4715                           ;doprnt.c: 543: }
  4716                           ;doprnt.c: 546: width = 0;
  4717  000034  0E00               	movlw	0
  4718  000036  0100               	movlb	0	; () banked
  4719  000038  6FA2               	movwf	(printf@width+1)& (0+255),b
  4720  00003A  0E00               	movlw	0
  4721  00003C  6FA1               	movwf	printf@width& (0+255),b
  4722                           
  4723                           ;doprnt.c: 548: flag = 0;
  4724  00003E  0E00               	movlw	0
  4725  000040  0100               	movlb	0	; () banked
  4726  000042  6FA0               	movwf	printf@flag& (0+255),b
  4727                           
  4728                           ; BSR set to: 0
  4729                           ;doprnt.c: 551: switch(*f) {
  4730                           
  4731                           ;doprnt.c: 550: for(;;) {
  4732  000044  D005               	goto	l4205
  4733  000046                     l4201:
  4734                           
  4735                           ;doprnt.c: 580: flag |= 0x04;
  4736  000046  0100               	movlb	0	; () banked
  4737  000048  85A0               	bsf	printf@flag& (0+255),2,b
  4738                           
  4739                           ;doprnt.c: 581: f++;
  4740  00004A  0100               	movlb	0	; () banked
  4741  00004C  4B8E               	infsnz	printf@f& (0+255),f,b
  4742  00004E  2B8F               	incf	(printf@f+1)& (0+255),f,b
  4743  000050                     l4205:
  4744  000050  C08E  FFF6         	movff	printf@f,tblptrl
  4745  000054  C08F  FFF7         	movff	printf@f+1,tblptrh
  4746  000058                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4747  000058  6AF8               	clrf	tblptru,c
  4748  00005A                     	endif
  4749  00005A                     	if	0	;tblptru may be non-zero
  4750  00005A                     	endif
  4751  00005A  0008               	tblrd		*
  4752  00005C  50F5               	movf	tablat,w,c
  4753                           
  4754                           ; Switch size 1, requested type "space"
  4755                           ; Number of cases is 1, Range of values is 48 to 48
  4756                           ; switch strategies available:
  4757                           ; Name         Instructions Cycles
  4758                           ; simple_byte            4     3 (average)
  4759                           ;	Chosen strategy is simple_byte
  4760  00005E  0A30               	xorlw	48	; case 48
  4761  000060  B4D8               	btfsc	status,2,c
  4762  000062  D7F1               	goto	l4201
  4763                           
  4764                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4765                           
  4766                           ;doprnt.c: 586: }
  4767                           
  4768                           ;doprnt.c: 585: break;
  4769  000064  C08E  FFF6         	movff	printf@f,tblptrl
  4770  000068  C08F  FFF7         	movff	printf@f+1,tblptrh
  4771  00006C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4772  00006C  6AF8               	clrf	tblptru,c
  4773  00006E                     	endif
  4774  00006E                     	if	0	;tblptru may be non-zero
  4775  00006E                     	endif
  4776  00006E  0008               	tblrd		*
  4777  000070  50F5               	movf	tablat,w,c
  4778  000072  EC23  F00D         	call	_isdigit
  4779  000076  A0D8               	btfss	status,0,c
  4780  000078  D046               	goto	l4223
  4781                           
  4782                           ;doprnt.c: 598: width = 0;
  4783  00007A  0E00               	movlw	0
  4784  00007C  0100               	movlb	0	; () banked
  4785  00007E  6FA2               	movwf	(printf@width+1)& (0+255),b
  4786  000080  0E00               	movlw	0
  4787  000082  6FA1               	movwf	printf@width& (0+255),b
  4788  000084                     l4211:
  4789                           
  4790                           ;doprnt.c: 600: width *= 10;
  4791  000084  C0A1  F088         	movff	printf@width,___wmul@multiplier
  4792  000088  C0A2  F089         	movff	printf@width+1,___wmul@multiplier+1
  4793  00008C  0E00               	movlw	0
  4794  00008E  0100               	movlb	0	; () banked
  4795  000090  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4796  000092  0E0A               	movlw	10
  4797  000094  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  4798  000096  ECC2  F00C         	call	___wmul	;wreg free
  4799  00009A  C088  F0A1         	movff	?___wmul,printf@width
  4800  00009E  C089  F0A2         	movff	?___wmul+1,printf@width+1
  4801                           
  4802                           ;doprnt.c: 601: width += *f++ - '0';
  4803  0000A2  0ED0               	movlw	208
  4804  0000A4  0100               	movlb	0	; () banked
  4805  0000A6  6F96               	movwf	??_printf& (0+255),b
  4806  0000A8  0EFF               	movlw	255
  4807  0000AA  0100               	movlb	0	; () banked
  4808  0000AC  6F97               	movwf	(??_printf+1)& (0+255),b
  4809  0000AE  C08E  FFF6         	movff	printf@f,tblptrl
  4810  0000B2  C08F  FFF7         	movff	printf@f+1,tblptrh
  4811  0000B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4812  0000B6  6AF8               	clrf	tblptru,c
  4813  0000B8                     	endif
  4814  0000B8                     	if	0	;tblptru may be non-zero
  4815  0000B8                     	endif
  4816  0000B8  0008               	tblrd		*
  4817  0000BA  50F5               	movf	tablat,w,c
  4818  0000BC  0100               	movlb	0	; () banked
  4819  0000BE  6F98               	movwf	(??_printf+2)& (0+255),b
  4820  0000C0  6B99               	clrf	(??_printf+3)& (0+255),b
  4821  0000C2  0100               	movlb	0	; () banked
  4822  0000C4  5196               	movf	??_printf& (0+255),w,b
  4823  0000C6  0100               	movlb	0	; () banked
  4824  0000C8  2798               	addwf	(??_printf+2)& (0+255),f,b
  4825  0000CA  0100               	movlb	0	; () banked
  4826  0000CC  5197               	movf	(??_printf+1)& (0+255),w,b
  4827  0000CE  0100               	movlb	0	; () banked
  4828  0000D0  2399               	addwfc	(??_printf+3)& (0+255),f,b
  4829  0000D2  0100               	movlb	0	; () banked
  4830  0000D4  5198               	movf	(??_printf+2)& (0+255),w,b
  4831  0000D6  0100               	movlb	0	; () banked
  4832  0000D8  27A1               	addwf	printf@width& (0+255),f,b
  4833  0000DA  0100               	movlb	0	; () banked
  4834  0000DC  5199               	movf	(??_printf+3)& (0+255),w,b
  4835  0000DE  0100               	movlb	0	; () banked
  4836  0000E0  23A2               	addwfc	(printf@width+1)& (0+255),f,b
  4837                           
  4838                           ; BSR set to: 0
  4839  0000E2  0100               	movlb	0	; () banked
  4840  0000E4  4B8E               	infsnz	printf@f& (0+255),f,b
  4841  0000E6  2B8F               	incf	(printf@f+1)& (0+255),f,b
  4842                           
  4843                           ; BSR set to: 0
  4844                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4845  0000E8  C08E  FFF6         	movff	printf@f,tblptrl
  4846  0000EC  C08F  FFF7         	movff	printf@f+1,tblptrh
  4847  0000F0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4848  0000F0  6AF8               	clrf	tblptru,c
  4849  0000F2                     	endif
  4850  0000F2                     	if	0	;tblptru may be non-zero
  4851  0000F2                     	endif
  4852  0000F2  0008               	tblrd		*
  4853  0000F4  50F5               	movf	tablat,w,c
  4854  0000F6  EC23  F00D         	call	_isdigit
  4855  0000FA  A0D8               	btfss	status,0,c
  4856  0000FC  D004               	goto	l4223
  4857  0000FE  D7C2               	goto	l4211
  4858  000100                     l4219:
  4859                           
  4860                           ;doprnt.c: 721: flag |= 0x80;
  4861  000100  0100               	movlb	0	; () banked
  4862  000102  8FA0               	bsf	printf@flag& (0+255),7,b
  4863                           
  4864                           ;doprnt.c: 723: break;
  4865  000104  D01A               	goto	l661
  4866  000106                     l4223:
  4867  000106  C08E  FFF6         	movff	printf@f,tblptrl
  4868  00010A  C08F  FFF7         	movff	printf@f+1,tblptrh
  4869  00010E  0100               	movlb	0	; () banked
  4870  000110  4B8E               	infsnz	printf@f& (0+255),f,b
  4871  000112  2B8F               	incf	(printf@f+1)& (0+255),f,b
  4872  000114                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4873  000114  6AF8               	clrf	tblptru,c
  4874  000116                     	endif
  4875  000116                     	if	0	;tblptru may be non-zero
  4876  000116                     	endif
  4877  000116  0008               	tblrd		*
  4878  000118  CFF5 F0A3          	movff	tablat,printf@c
  4879  00011C  0100               	movlb	0	; () banked
  4880  00011E  51A3               	movf	printf@c& (0+255),w,b
  4881                           
  4882                           ; Switch size 1, requested type "space"
  4883                           ; Number of cases is 4, Range of values is 0 to 120
  4884                           ; switch strategies available:
  4885                           ; Name         Instructions Cycles
  4886                           ; simple_byte           13     7 (average)
  4887                           ;	Chosen strategy is simple_byte
  4888  000120  0A00               	xorlw	0	; case 0
  4889  000122  B4D8               	btfsc	status,2,c
  4890  000124  0012               	return	
  4891  000126  0A64               	xorlw	100	; case 100
  4892  000128  B4D8               	btfsc	status,2,c
  4893  00012A  D007               	goto	l661
  4894  00012C  0A0D               	xorlw	13	; case 105
  4895  00012E  B4D8               	btfsc	status,2,c
  4896  000130  D004               	goto	l661
  4897  000132  0A11               	xorlw	17	; case 120
  4898  000134  B4D8               	btfsc	status,2,c
  4899  000136  D7E4               	goto	l4219
  4900  000138  D14B               	goto	l4321
  4901  00013A                     l661:
  4902                           
  4903                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4904  00013A  0100               	movlb	0	; () banked
  4905  00013C  BFA0               	btfsc	printf@flag& (0+255),7,b
  4906  00013E  D019               	goto	l4235
  4907                           
  4908                           ; BSR set to: 0
  4909                           ;doprnt.c: 1253: {
  4910                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4911  000140  C09B  FFD9         	movff	printf@ap,fsr2l
  4912  000144  C09C  FFDA         	movff	printf@ap+1,fsr2h
  4913  000148  CFDE F09E          	movff	postinc2,printf@val
  4914  00014C  CFDD F09F          	movff	postdec2,printf@val+1
  4915                           
  4916                           ; BSR set to: 0
  4917  000150  0E02               	movlw	2
  4918  000152  0100               	movlb	0	; () banked
  4919  000154  279B               	addwf	printf@ap& (0+255),f,b
  4920  000156  0E00               	movlw	0
  4921  000158  239C               	addwfc	(printf@ap+1)& (0+255),f,b
  4922                           
  4923                           ; BSR set to: 0
  4924                           ;doprnt.c: 1261: if((int)val < 0) {
  4925  00015A  0100               	movlb	0	; () banked
  4926  00015C  AF9F               	btfss	(printf@val+1)& (0+255),7,b
  4927  00015E  D059               	goto	l4269
  4928                           
  4929                           ; BSR set to: 0
  4930                           ;doprnt.c: 1262: flag |= 0x03;
  4931  000160  0E03               	movlw	3
  4932  000162  0100               	movlb	0	; () banked
  4933  000164  13A0               	iorwf	printf@flag& (0+255),f,b
  4934                           
  4935                           ; BSR set to: 0
  4936                           ;doprnt.c: 1263: val = -val;
  4937  000166  0100               	movlb	0	; () banked
  4938  000168  6D9E               	negf	printf@val& (0+255),b
  4939  00016A  1F9F               	comf	(printf@val+1)& (0+255),f,b
  4940  00016C  B0D8               	btfsc	status,0,c
  4941  00016E  2B9F               	incf	(printf@val+1)& (0+255),f,b
  4942                           
  4943                           ; BSR set to: 0
  4944                           ;doprnt.c: 1264: }
  4945                           ;doprnt.c: 1266: }
  4946  000170  D050               	goto	l4269
  4947  000172                     l4235:
  4948                           
  4949                           ; BSR set to: 0
  4950                           ;doprnt.c: 1268: else
  4951                           ;doprnt.c: 1273: {
  4952                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4953  000172  C09B  FFD9         	movff	printf@ap,fsr2l
  4954  000176  C09C  FFDA         	movff	printf@ap+1,fsr2h
  4955  00017A  CFDE F09E          	movff	postinc2,printf@val
  4956  00017E  CFDD F09F          	movff	postdec2,printf@val+1
  4957                           
  4958                           ; BSR set to: 0
  4959  000182  0E02               	movlw	2
  4960  000184  0100               	movlb	0	; () banked
  4961  000186  279B               	addwf	printf@ap& (0+255),f,b
  4962  000188  0E00               	movlw	0
  4963  00018A  239C               	addwfc	(printf@ap+1)& (0+255),f,b
  4964                           
  4965                           ; BSR set to: 0
  4966                           ;doprnt.c: 1287: }
  4967                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4968  00018C  D042               	goto	l4269
  4969  00018E                     l4239:
  4970                           
  4971                           ; BSR set to: 0
  4972                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4973  00018E  0E01               	movlw	1
  4974  000190  0100               	movlb	0	; () banked
  4975  000192  6FA3               	movwf	printf@c& (0+255),b
  4976  000194                     l4241:
  4977                           
  4978                           ; BSR set to: 0
  4979  000194  0E05               	movlw	5
  4980  000196  0100               	movlb	0	; () banked
  4981  000198  19A3               	xorwf	printf@c& (0+255),w,b
  4982  00019A  B4D8               	btfsc	status,2,c
  4983  00019C  D043               	goto	l4271
  4984                           
  4985                           ; BSR set to: 0
  4986                           ;doprnt.c: 1306: if(val < dpowers[c])
  4987                           
  4988                           ; BSR set to: 0
  4989                           
  4990                           ; BSR set to: 0
  4991  00019E  0100               	movlb	0	; () banked
  4992  0001A0  51A3               	movf	printf@c& (0+255),w,b
  4993  0001A2  0D02               	mullw	2
  4994  0001A4  0EFA               	movlw	low _dpowers
  4995  0001A6  24F3               	addwf	prodl,w,c
  4996  0001A8  6EF6               	movwf	tblptrl,c
  4997  0001AA  0EFE               	movlw	high _dpowers
  4998  0001AC  20F4               	addwfc	prodh,w,c
  4999  0001AE  6EF7               	movwf	tblptrh,c
  5000  0001B0                     	if	1	;There are 3 active tblptr bytes
  5001  0001B0  6AF8               	clrf	tblptru,c
  5002  0001B2  0E00               	movlw	low (__mediumconst shr (0+16))
  5003  0001B4  22F8               	addwfc	tblptru,f,c
  5004  0001B6                     	endif
  5005  0001B6  0009               	tblrd		*+
  5006  0001B8  50F5               	movf	tablat,w,c
  5007  0001BA  0100               	movlb	0	; () banked
  5008  0001BC  5D9E               	subwf	printf@val& (0+255),w,b
  5009  0001BE  0009               	tblrd		*+
  5010  0001C0  50F5               	movf	tablat,w,c
  5011  0001C2  0100               	movlb	0	; () banked
  5012  0001C4  599F               	subwfb	(printf@val+1)& (0+255),w,b
  5013  0001C6  A0D8               	btfss	status,0,c
  5014  0001C8  D02D               	goto	l4271
  5015                           
  5016                           ; BSR set to: 0
  5017                           
  5018                           ; BSR set to: 0
  5019                           
  5020                           ; BSR set to: 0
  5021                           ;doprnt.c: 1307: break;
  5022  0001CA  0100               	movlb	0	; () banked
  5023  0001CC  2BA3               	incf	printf@c& (0+255),f,b
  5024  0001CE  D7E2               	goto	l4241
  5025  0001D0                     l4253:
  5026                           
  5027                           ; BSR set to: 0
  5028                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5029  0001D0  0E01               	movlw	1
  5030  0001D2  0100               	movlb	0	; () banked
  5031  0001D4  6FA3               	movwf	printf@c& (0+255),b
  5032  0001D6                     l4255:
  5033                           
  5034                           ; BSR set to: 0
  5035  0001D6  0E04               	movlw	4
  5036  0001D8  0100               	movlb	0	; () banked
  5037  0001DA  19A3               	xorwf	printf@c& (0+255),w,b
  5038  0001DC  B4D8               	btfsc	status,2,c
  5039  0001DE  D022               	goto	l4271
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5043                           
  5044                           ; BSR set to: 0
  5045                           
  5046                           ; BSR set to: 0
  5047  0001E0  0100               	movlb	0	; () banked
  5048  0001E2  51A3               	movf	printf@c& (0+255),w,b
  5049  0001E4  0D02               	mullw	2
  5050  0001E6  0E04               	movlw	low _hexpowers
  5051  0001E8  24F3               	addwf	prodl,w,c
  5052  0001EA  6EF6               	movwf	tblptrl,c
  5053  0001EC  0EFF               	movlw	high _hexpowers
  5054  0001EE  20F4               	addwfc	prodh,w,c
  5055  0001F0  6EF7               	movwf	tblptrh,c
  5056  0001F2                     	if	1	;There are 3 active tblptr bytes
  5057  0001F2  6AF8               	clrf	tblptru,c
  5058  0001F4  0E00               	movlw	low (__mediumconst shr (0+16))
  5059  0001F6  22F8               	addwfc	tblptru,f,c
  5060  0001F8                     	endif
  5061  0001F8  0009               	tblrd		*+
  5062  0001FA  50F5               	movf	tablat,w,c
  5063  0001FC  0100               	movlb	0	; () banked
  5064  0001FE  5D9E               	subwf	printf@val& (0+255),w,b
  5065  000200  0009               	tblrd		*+
  5066  000202  50F5               	movf	tablat,w,c
  5067  000204  0100               	movlb	0	; () banked
  5068  000206  599F               	subwfb	(printf@val+1)& (0+255),w,b
  5069  000208  A0D8               	btfss	status,0,c
  5070  00020A  D00C               	goto	l4271
  5071                           
  5072                           ; BSR set to: 0
  5073                           
  5074                           ; BSR set to: 0
  5075                           
  5076                           ; BSR set to: 0
  5077                           ;doprnt.c: 1318: break;
  5078  00020C  0100               	movlb	0	; () banked
  5079  00020E  2BA3               	incf	printf@c& (0+255),f,b
  5080  000210  D7E2               	goto	l4255
  5081  000212                     l4269:
  5082                           
  5083                           ; BSR set to: 0
  5084  000212  0100               	movlb	0	; () banked
  5085  000214  51A0               	movf	printf@flag& (0+255),w,b
  5086  000216  0B80               	andlw	128
  5087                           
  5088                           ; Switch size 1, requested type "space"
  5089                           ; Number of cases is 2, Range of values is 0 to 128
  5090                           ; switch strategies available:
  5091                           ; Name         Instructions Cycles
  5092                           ; simple_byte            7     4 (average)
  5093                           ;	Chosen strategy is simple_byte
  5094  000218  0A00               	xorlw	0	; case 0
  5095  00021A  B4D8               	btfsc	status,2,c
  5096  00021C  D7B8               	goto	l4239
  5097  00021E  0A80               	xorlw	128	; case 128
  5098  000220  B4D8               	btfsc	status,2,c
  5099  000222  D7D6               	goto	l4253
  5100  000224                     l4271:
  5101                           
  5102                           ; BSR set to: 0
  5103                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5104  000224  0100               	movlb	0	; () banked
  5105  000226  51A1               	movf	printf@width& (0+255),w,b
  5106  000228  0100               	movlb	0	; () banked
  5107  00022A  11A2               	iorwf	(printf@width+1)& (0+255),w,b
  5108  00022C  B4D8               	btfsc	status,2,c
  5109  00022E  D00B               	goto	l4277
  5110                           
  5111                           ; BSR set to: 0
  5112  000230  C0A0  F096         	movff	printf@flag,??_printf
  5113  000234  0E03               	movlw	3
  5114  000236  0100               	movlb	0	; () banked
  5115  000238  1796               	andwf	??_printf& (0+255),f,b
  5116  00023A  B4D8               	btfsc	status,2,c
  5117  00023C  D004               	goto	l4277
  5118                           
  5119                           ; BSR set to: 0
  5120                           ;doprnt.c: 1346: width--;
  5121  00023E  0100               	movlb	0	; () banked
  5122  000240  07A1               	decf	printf@width& (0+255),f,b
  5123  000242  A0D8               	btfss	status,0,c
  5124  000244  07A2               	decf	(printf@width+1)& (0+255),f,b
  5125  000246                     l4277:
  5126                           
  5127                           ; BSR set to: 0
  5128                           ;doprnt.c: 1381: if(width > c)
  5129  000246  0E80               	movlw	128
  5130  000248  0100               	movlb	0	; () banked
  5131  00024A  BFA3               	btfsc	printf@c& (0+255),7,b
  5132  00024C  0E7F               	movlw	127
  5133  00024E  0100               	movlb	0	; () banked
  5134  000250  6F96               	movwf	??_printf& (0+255),b
  5135  000252  0100               	movlb	0	; () banked
  5136  000254  51A1               	movf	printf@width& (0+255),w,b
  5137  000256  0100               	movlb	0	; () banked
  5138  000258  5DA3               	subwf	printf@c& (0+255),w,b
  5139  00025A  0100               	movlb	0	; () banked
  5140  00025C  51A2               	movf	(printf@width+1)& (0+255),w,b
  5141  00025E  0A80               	xorlw	128
  5142  000260  0100               	movlb	0	; () banked
  5143  000262  5996               	subwfb	??_printf& (0+255),w,b
  5144  000264  B0D8               	btfsc	status,0,c
  5145  000266  D00B               	goto	l4281
  5146                           
  5147                           ; BSR set to: 0
  5148                           ;doprnt.c: 1382: width -= c;
  5149  000268  0100               	movlb	0	; () banked
  5150  00026A  51A3               	movf	printf@c& (0+255),w,b
  5151  00026C  0100               	movlb	0	; () banked
  5152  00026E  5FA1               	subwf	printf@width& (0+255),f,b
  5153  000270  0E00               	movlw	0
  5154  000272  0100               	movlb	0	; () banked
  5155  000274  BFA3               	btfsc	printf@c& (0+255),7,b
  5156  000276  0EFF               	movlw	255
  5157  000278  0100               	movlb	0	; () banked
  5158  00027A  5BA2               	subwfb	(printf@width+1)& (0+255),f,b
  5159  00027C  D005               	goto	l4283
  5160  00027E                     l4281:
  5161                           
  5162                           ; BSR set to: 0
  5163                           ;doprnt.c: 1383: else
  5164                           ;doprnt.c: 1384: width = 0;
  5165  00027E  0E00               	movlw	0
  5166  000280  0100               	movlb	0	; () banked
  5167  000282  6FA2               	movwf	(printf@width+1)& (0+255),b
  5168  000284  0E00               	movlw	0
  5169  000286  6FA1               	movwf	printf@width& (0+255),b
  5170  000288                     l4283:
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;doprnt.c: 1387: if(flag & 0x04) {
  5174  000288  0100               	movlb	0	; () banked
  5175  00028A  A5A0               	btfss	printf@flag& (0+255),2,b
  5176  00028C  D018               	goto	l4295
  5177                           
  5178                           ; BSR set to: 0
  5179                           ;doprnt.c: 1392: if(flag & 0x03)
  5180  00028E  C0A0  F096         	movff	printf@flag,??_printf
  5181  000292  0E03               	movlw	3
  5182  000294  0100               	movlb	0	; () banked
  5183  000296  1796               	andwf	??_printf& (0+255),f,b
  5184  000298  B4D8               	btfsc	status,2,c
  5185  00029A  D003               	goto	l4289
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;doprnt.c: 1393: (putch('-') );
  5189  00029C  0E2D               	movlw	45
  5190  00029E  EC9D  F00E         	call	_putch
  5191  0002A2                     l4289:
  5192                           
  5193                           ;doprnt.c: 1415: if(width)
  5194  0002A2  0100               	movlb	0	; () banked
  5195  0002A4  51A1               	movf	printf@width& (0+255),w,b
  5196  0002A6  0100               	movlb	0	; () banked
  5197  0002A8  11A2               	iorwf	(printf@width+1)& (0+255),w,b
  5198  0002AA  B4D8               	btfsc	status,2,c
  5199  0002AC  D025               	goto	l4305
  5200                           
  5201                           ; BSR set to: 0
  5202                           ;doprnt.c: 1417: (putch('0') );
  5203                           
  5204                           ; BSR set to: 0
  5205                           
  5206                           ;doprnt.c: 1416: do
  5207  0002AE  0E30               	movlw	48
  5208  0002B0  EC9D  F00E         	call	_putch
  5209                           
  5210                           ;doprnt.c: 1418: while(--width);
  5211  0002B4  0100               	movlb	0	; () banked
  5212  0002B6  07A1               	decf	printf@width& (0+255),f,b
  5213  0002B8  A0D8               	btfss	status,0,c
  5214  0002BA  07A2               	decf	(printf@width+1)& (0+255),f,b
  5215  0002BC  D7F2               	goto	l4289
  5216  0002BE                     l4295:
  5217                           
  5218                           ; BSR set to: 0
  5219                           ;doprnt.c: 1422: {
  5220                           ;doprnt.c: 1424: if(width
  5221                           ;doprnt.c: 1428: )
  5222  0002BE  0100               	movlb	0	; () banked
  5223  0002C0  51A1               	movf	printf@width& (0+255),w,b
  5224  0002C2  0100               	movlb	0	; () banked
  5225  0002C4  11A2               	iorwf	(printf@width+1)& (0+255),w,b
  5226  0002C6  B4D8               	btfsc	status,2,c
  5227  0002C8  D00D               	goto	l4301
  5228  0002CA                     l4297:
  5229                           
  5230                           ; BSR set to: 0
  5231                           ;doprnt.c: 1430: (putch(' ') );
  5232  0002CA  0E20               	movlw	32
  5233  0002CC  EC9D  F00E         	call	_putch
  5234                           
  5235                           ;doprnt.c: 1431: while(--width);
  5236  0002D0  0100               	movlb	0	; () banked
  5237  0002D2  07A1               	decf	printf@width& (0+255),f,b
  5238  0002D4  A0D8               	btfss	status,0,c
  5239  0002D6  07A2               	decf	(printf@width+1)& (0+255),f,b
  5240  0002D8  0100               	movlb	0	; () banked
  5241  0002DA  51A1               	movf	printf@width& (0+255),w,b
  5242  0002DC  0100               	movlb	0	; () banked
  5243  0002DE  11A2               	iorwf	(printf@width+1)& (0+255),w,b
  5244  0002E0  A4D8               	btfss	status,2,c
  5245  0002E2  D7F3               	goto	l4297
  5246  0002E4                     l4301:
  5247                           
  5248                           ; BSR set to: 0
  5249                           ;doprnt.c: 1438: if(flag & 0x03)
  5250  0002E4  C0A0  F096         	movff	printf@flag,??_printf
  5251  0002E8  0E03               	movlw	3
  5252  0002EA  0100               	movlb	0	; () banked
  5253  0002EC  1796               	andwf	??_printf& (0+255),f,b
  5254  0002EE  B4D8               	btfsc	status,2,c
  5255  0002F0  D003               	goto	l4305
  5256                           
  5257                           ; BSR set to: 0
  5258                           ;doprnt.c: 1439: (putch('-') );
  5259  0002F2  0E2D               	movlw	45
  5260  0002F4  EC9D  F00E         	call	_putch
  5261  0002F8                     l4305:
  5262                           
  5263                           ;doprnt.c: 1469: }
  5264                           ;doprnt.c: 1472: prec = c;
  5265  0002F8  C0A3  F09D         	movff	printf@c,printf@prec
  5266                           
  5267                           ;doprnt.c: 1474: while(prec--) {
  5268  0002FC  D063               	goto	l4319
  5269  0002FE                     l4307:
  5270                           
  5271                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5272  0002FE  0100               	movlb	0	; () banked
  5273  000300  519D               	movf	printf@prec& (0+255),w,b
  5274  000302  0D02               	mullw	2
  5275  000304  0EFA               	movlw	low _dpowers
  5276  000306  24F3               	addwf	prodl,w,c
  5277  000308  6EF6               	movwf	tblptrl,c
  5278  00030A  0EFE               	movlw	high _dpowers
  5279  00030C  20F4               	addwfc	prodh,w,c
  5280  00030E  6EF7               	movwf	tblptrh,c
  5281  000310                     	if	1	;There are 3 active tblptr bytes
  5282  000310  6AF8               	clrf	tblptru,c
  5283  000312  0E00               	movlw	low (__mediumconst shr (0+16))
  5284  000314  22F8               	addwfc	tblptru,f,c
  5285  000316                     	endif
  5286  000316  0009               	tblrd		*+
  5287  000318  CFF5 F082          	movff	tablat,___lwdiv@divisor
  5288  00031C  000A               	tblrd		*-
  5289  00031E  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  5290  000322  C09E  F080         	movff	printf@val,___lwdiv@dividend
  5291  000326  C09F  F081         	movff	printf@val+1,___lwdiv@dividend+1
  5292  00032A  EC68  F009         	call	___lwdiv	;wreg free
  5293  00032E  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  5294  000332  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  5295  000336  0E00               	movlw	0
  5296  000338  0100               	movlb	0	; () banked
  5297  00033A  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  5298  00033C  0E0A               	movlw	10
  5299  00033E  6F89               	movwf	___lwmod@divisor& (0+255),b
  5300  000340  EC1A  F00B         	call	___lwmod	;wreg free
  5301  000344  0100               	movlb	0	; () banked
  5302  000346  5187               	movf	?___lwmod& (0+255),w,b
  5303  000348  0F30               	addlw	48
  5304  00034A  0100               	movlb	0	; () banked
  5305  00034C  6FA3               	movwf	printf@c& (0+255),b
  5306                           
  5307                           ;doprnt.c: 1491: break;
  5308  00034E  D036               	goto	l4317
  5309  000350                     l4309:
  5310                           
  5311                           ; BSR set to: 0
  5312                           ;doprnt.c: 1499: {
  5313                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5314  000350  C09E  F080         	movff	printf@val,___lwdiv@dividend
  5315  000354  C09F  F081         	movff	printf@val+1,___lwdiv@dividend+1
  5316  000358  0100               	movlb	0	; () banked
  5317  00035A  519D               	movf	printf@prec& (0+255),w,b
  5318  00035C  0D02               	mullw	2
  5319  00035E  0E04               	movlw	low _hexpowers
  5320  000360  24F3               	addwf	prodl,w,c
  5321  000362  6EF6               	movwf	tblptrl,c
  5322  000364  0EFF               	movlw	high _hexpowers
  5323  000366  20F4               	addwfc	prodh,w,c
  5324  000368  6EF7               	movwf	tblptrh,c
  5325  00036A                     	if	1	;There are 3 active tblptr bytes
  5326  00036A  6AF8               	clrf	tblptru,c
  5327  00036C  0E00               	movlw	low (__mediumconst shr (0+16))
  5328  00036E  22F8               	addwfc	tblptru,f,c
  5329  000370                     	endif
  5330  000370  0009               	tblrd		*+
  5331  000372  CFF5 F082          	movff	tablat,___lwdiv@divisor
  5332  000376  000A               	tblrd		*-
  5333  000378  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  5334  00037C  EC68  F009         	call	___lwdiv	;wreg free
  5335  000380  0100               	movlb	0	; () banked
  5336  000382  5180               	movf	?___lwdiv& (0+255),w,b
  5337  000384  0B0F               	andlw	15
  5338  000386  0100               	movlb	0	; () banked
  5339  000388  6F9A               	movwf	printf@idx& (0+255),b
  5340                           
  5341                           ; BSR set to: 0
  5342                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5343  00038A  0100               	movlb	0	; () banked
  5344  00038C  519A               	movf	printf@idx& (0+255),w,b
  5345  00038E  0D01               	mullw	1
  5346  000390  0E3C               	movlw	low STR_16
  5347  000392  24F3               	addwf	prodl,w,c
  5348  000394  6EF6               	movwf	tblptrl,c
  5349  000396  0EFF               	movlw	high STR_16
  5350  000398  20F4               	addwfc	prodh,w,c
  5351  00039A  6EF7               	movwf	tblptrh,c
  5352  00039C                     	if	1	;There are 3 active tblptr bytes
  5353  00039C  6AF8               	clrf	tblptru,c
  5354  00039E  0E00               	movlw	low (__mediumconst shr (0+16))
  5355  0003A0  22F8               	addwfc	tblptru,f,c
  5356  0003A2                     	endif
  5357  0003A2  0008               	tblrd		*
  5358  0003A4  CFF5 F0A3          	movff	tablat,printf@c
  5359                           
  5360                           ; BSR set to: 0
  5361                           ;doprnt.c: 1523: }
  5362                           
  5363                           ;doprnt.c: 1508: }
  5364                           ;doprnt.c: 1510: break;
  5365  0003A8  D009               	goto	l4317
  5366  0003AA                     l4315:
  5367  0003AA  0100               	movlb	0	; () banked
  5368  0003AC  51A0               	movf	printf@flag& (0+255),w,b
  5369  0003AE  0B80               	andlw	128
  5370                           
  5371                           ; Switch size 1, requested type "space"
  5372                           ; Number of cases is 2, Range of values is 0 to 128
  5373                           ; switch strategies available:
  5374                           ; Name         Instructions Cycles
  5375                           ; simple_byte            7     4 (average)
  5376                           ;	Chosen strategy is simple_byte
  5377  0003B0  0A00               	xorlw	0	; case 0
  5378  0003B2  B4D8               	btfsc	status,2,c
  5379  0003B4  D7A4               	goto	l4307
  5380  0003B6  0A80               	xorlw	128	; case 128
  5381  0003B8  B4D8               	btfsc	status,2,c
  5382  0003BA  D7CA               	goto	l4309
  5383  0003BC                     l4317:
  5384                           
  5385                           ; BSR set to: 0
  5386                           ;doprnt.c: 1524: (putch(c) );
  5387  0003BC  0100               	movlb	0	; () banked
  5388  0003BE  51A3               	movf	printf@c& (0+255),w,b
  5389  0003C0  EC9D  F00E         	call	_putch
  5390  0003C4                     l4319:
  5391  0003C4  0100               	movlb	0	; () banked
  5392  0003C6  079D               	decf	printf@prec& (0+255),f,b
  5393  0003C8  0100               	movlb	0	; () banked
  5394  0003CA  299D               	incf	printf@prec& (0+255),w,b
  5395  0003CC  A4D8               	btfss	status,2,c
  5396  0003CE  D7ED               	goto	l4315
  5397  0003D0                     l4321:
  5398  0003D0  C08E  FFF6         	movff	printf@f,tblptrl
  5399  0003D4  C08F  FFF7         	movff	printf@f+1,tblptrh
  5400  0003D8  0100               	movlb	0	; () banked
  5401  0003DA  4B8E               	infsnz	printf@f& (0+255),f,b
  5402  0003DC  2B8F               	incf	(printf@f+1)& (0+255),f,b
  5403  0003DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5404  0003DE  6AF8               	clrf	tblptru,c
  5405  0003E0                     	endif
  5406  0003E0                     	if	0	;tblptru may be non-zero
  5407  0003E0                     	endif
  5408  0003E0  0008               	tblrd		*
  5409  0003E2  CFF5 F0A3          	movff	tablat,printf@c
  5410  0003E6  0100               	movlb	0	; () banked
  5411  0003E8  51A3               	movf	printf@c& (0+255),w,b
  5412  0003EA  B4D8               	btfsc	status,2,c
  5413  0003EC  0012               	return	
  5414  0003EE  D618               	goto	l4195
  5415  0003F0                     __end_of_printf:
  5416                           	opt stack 0
  5417                           tosu	equ	0xFFF
  5418                           tosh	equ	0xFFE
  5419                           tosl	equ	0xFFD
  5420                           pclath	equ	0xFFA
  5421                           tblptru	equ	0xFF8
  5422                           tblptrh	equ	0xFF7
  5423                           tblptrl	equ	0xFF6
  5424                           tablat	equ	0xFF5
  5425                           prodh	equ	0xFF4
  5426                           prodl	equ	0xFF3
  5427                           intcon	equ	0xFF2
  5428                           intcon3	equ	0xFF0
  5429                           postinc0	equ	0xFEE
  5430                           wreg	equ	0xFE8
  5431                           indf2	equ	0xFDF
  5432                           postinc2	equ	0xFDE
  5433                           postdec2	equ	0xFDD
  5434                           fsr2h	equ	0xFDA
  5435                           fsr2l	equ	0xFD9
  5436                           status	equ	0xFD8
  5437                           
  5438 ;; *************** function _putch *****************
  5439 ;; Defined at:
  5440 ;;		line 38 in file "lcd.c"
  5441 ;; Parameters:    Size  Location     Type
  5442 ;;  data            1    wreg     unsigned char 
  5443 ;; Auto vars:     Size  Location     Type
  5444 ;;  data            1    2[BANK0 ] unsigned char 
  5445 ;; Return value:  Size  Location     Type
  5446 ;;                  1    wreg      void 
  5447 ;; Registers used:
  5448 ;;		wreg, status,2, status,0, cstack
  5449 ;; Tracked objects:
  5450 ;;		On entry : 0/0
  5451 ;;		On exit  : 0/0
  5452 ;;		Unchanged: 0/0
  5453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5455 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5457 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5458 ;;Total ram usage:        1 bytes
  5459 ;; Hardware stack levels used:    1
  5460 ;; Hardware stack levels required when called:    6
  5461 ;; This function calls:
  5462 ;;		_lcdNibble
  5463 ;; This function is called by:
  5464 ;;		_printf
  5465 ;; This function uses a non-reentrant model
  5466 ;;
  5467                           
  5468                           	psect	text35
  5469  001D3A                     __ptext35:
  5470                           	opt stack 0
  5471  001D3A                     _putch:
  5472                           	opt stack 22
  5473                           
  5474                           ;incstack = 0
  5475                           ;putch@data stored from wreg
  5476  001D3A  0100               	movlb	0	; () banked
  5477  001D3C  6F82               	movwf	putch@data& (0+255),b
  5478                           
  5479                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  5480  001D3E  848C               	bsf	3980,2,c	;volatile
  5481                           
  5482                           ;lcd.c: 40: lcdNibble(data);
  5483  001D40  0100               	movlb	0	; () banked
  5484  001D42  5182               	movf	putch@data& (0+255),w,b
  5485  001D44  ECB5  F00A         	call	_lcdNibble
  5486  001D48  0012               	return		;funcret
  5487  001D4A                     __end_of_putch:
  5488                           	opt stack 0
  5489                           tosu	equ	0xFFF
  5490                           tosh	equ	0xFFE
  5491                           tosl	equ	0xFFD
  5492                           pclath	equ	0xFFA
  5493                           tblptru	equ	0xFF8
  5494                           tblptrh	equ	0xFF7
  5495                           tblptrl	equ	0xFF6
  5496                           tablat	equ	0xFF5
  5497                           prodh	equ	0xFF4
  5498                           prodl	equ	0xFF3
  5499                           intcon	equ	0xFF2
  5500                           intcon3	equ	0xFF0
  5501                           postinc0	equ	0xFEE
  5502                           wreg	equ	0xFE8
  5503                           indf2	equ	0xFDF
  5504                           postinc2	equ	0xFDE
  5505                           postdec2	equ	0xFDD
  5506                           fsr2h	equ	0xFDA
  5507                           fsr2l	equ	0xFD9
  5508                           status	equ	0xFD8
  5509                           
  5510 ;; *************** function _isdigit *****************
  5511 ;; Defined at:
  5512 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/isdigit.c"
  5513 ;; Parameters:    Size  Location     Type
  5514 ;;  c               1    wreg     unsigned char 
  5515 ;; Auto vars:     Size  Location     Type
  5516 ;;  c               1    2[BANK0 ] unsigned char 
  5517 ;; Return value:  Size  Location     Type
  5518 ;;		None               void
  5519 ;; Registers used:
  5520 ;;		wreg, status,2, status,0
  5521 ;; Tracked objects:
  5522 ;;		On entry : 0/0
  5523 ;;		On exit  : 0/0
  5524 ;;		Unchanged: 0/0
  5525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5527 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5528 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5529 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5530 ;;Total ram usage:        3 bytes
  5531 ;; Hardware stack levels used:    1
  5532 ;; Hardware stack levels required when called:    5
  5533 ;; This function calls:
  5534 ;;		Nothing
  5535 ;; This function is called by:
  5536 ;;		_printf
  5537 ;; This function uses a non-reentrant model
  5538 ;;
  5539                           
  5540                           	psect	text36
  5541  001A46                     __ptext36:
  5542                           	opt stack 0
  5543  001A46                     _isdigit:
  5544                           	opt stack 23
  5545                           
  5546                           ;incstack = 0
  5547                           ;isdigit@c stored from wreg
  5548  001A46  0100               	movlb	0	; () banked
  5549  001A48  6F82               	movwf	isdigit@c& (0+255),b
  5550  001A4A  0E00               	movlw	0
  5551  001A4C  0100               	movlb	0	; () banked
  5552  001A4E  6F81               	movwf	_isdigit$1388& (0+255),b
  5553                           
  5554                           ; BSR set to: 0
  5555  001A50  0E3A               	movlw	58
  5556  001A52  0100               	movlb	0	; () banked
  5557  001A54  6182               	cpfslt	isdigit@c& (0+255),b
  5558  001A56  D007               	goto	l4075
  5559                           
  5560                           ; BSR set to: 0
  5561  001A58  0E2F               	movlw	47
  5562  001A5A  0100               	movlb	0	; () banked
  5563  001A5C  6582               	cpfsgt	isdigit@c& (0+255),b
  5564  001A5E  D003               	goto	l4075
  5565                           
  5566                           ; BSR set to: 0
  5567  001A60  0E01               	movlw	1
  5568  001A62  0100               	movlb	0	; () banked
  5569  001A64  6F81               	movwf	_isdigit$1388& (0+255),b
  5570  001A66                     l4075:
  5571                           
  5572                           ; BSR set to: 0
  5573  001A66  C081  F080         	movff	_isdigit$1388,??_isdigit
  5574  001A6A  0100               	movlb	0	; () banked
  5575  001A6C  3180               	rrcf	??_isdigit& (0+255),w,b
  5576  001A6E  0012               	return	
  5577  001A70                     __end_of_isdigit:
  5578                           	opt stack 0
  5579                           tosu	equ	0xFFF
  5580                           tosh	equ	0xFFE
  5581                           tosl	equ	0xFFD
  5582                           pclath	equ	0xFFA
  5583                           tblptru	equ	0xFF8
  5584                           tblptrh	equ	0xFF7
  5585                           tblptrl	equ	0xFF6
  5586                           tablat	equ	0xFF5
  5587                           prodh	equ	0xFF4
  5588                           prodl	equ	0xFF3
  5589                           intcon	equ	0xFF2
  5590                           intcon3	equ	0xFF0
  5591                           postinc0	equ	0xFEE
  5592                           wreg	equ	0xFE8
  5593                           indf2	equ	0xFDF
  5594                           postinc2	equ	0xFDE
  5595                           postdec2	equ	0xFDD
  5596                           fsr2h	equ	0xFDA
  5597                           fsr2l	equ	0xFD9
  5598                           status	equ	0xFD8
  5599                           
  5600 ;; *************** function ___lwmod *****************
  5601 ;; Defined at:
  5602 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
  5603 ;; Parameters:    Size  Location     Type
  5604 ;;  dividend        2    7[BANK0 ] unsigned int 
  5605 ;;  divisor         2    9[BANK0 ] unsigned int 
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;  counter         1   11[BANK0 ] unsigned char 
  5608 ;; Return value:  Size  Location     Type
  5609 ;;                  2    7[BANK0 ] unsigned int 
  5610 ;; Registers used:
  5611 ;;		wreg, status,2, status,0
  5612 ;; Tracked objects:
  5613 ;;		On entry : 0/0
  5614 ;;		On exit  : 0/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5617 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5618 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5620 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5621 ;;Total ram usage:        5 bytes
  5622 ;; Hardware stack levels used:    1
  5623 ;; Hardware stack levels required when called:    5
  5624 ;; This function calls:
  5625 ;;		Nothing
  5626 ;; This function is called by:
  5627 ;;		_printf
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           	psect	text37
  5632  001634                     __ptext37:
  5633                           	opt stack 0
  5634  001634                     ___lwmod:
  5635                           	opt stack 23
  5636                           
  5637                           ; BSR set to: 0
  5638                           ;incstack = 0
  5639  001634  0100               	movlb	0	; () banked
  5640  001636  5189               	movf	___lwmod@divisor& (0+255),w,b
  5641  001638  0100               	movlb	0	; () banked
  5642  00163A  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5643  00163C  B4D8               	btfsc	status,2,c
  5644  00163E  D026               	goto	l1116
  5645                           
  5646                           ; BSR set to: 0
  5647  001640  0E01               	movlw	1
  5648  001642  0100               	movlb	0	; () banked
  5649  001644  6F8B               	movwf	___lwmod@counter& (0+255),b
  5650  001646  D006               	goto	l4113
  5651  001648                     l4111:
  5652                           
  5653                           ; BSR set to: 0
  5654  001648  0100               	movlb	0	; () banked
  5655  00164A  90D8               	bcf	status,0,c
  5656  00164C  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  5657  00164E  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  5658  001650  0100               	movlb	0	; () banked
  5659  001652  2B8B               	incf	___lwmod@counter& (0+255),f,b
  5660  001654                     l4113:
  5661                           
  5662                           ; BSR set to: 0
  5663  001654  0100               	movlb	0	; () banked
  5664  001656  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  5665  001658  D7F7               	goto	l4111
  5666  00165A                     l4115:
  5667                           
  5668                           ; BSR set to: 0
  5669  00165A  0100               	movlb	0	; () banked
  5670  00165C  5189               	movf	___lwmod@divisor& (0+255),w,b
  5671  00165E  0100               	movlb	0	; () banked
  5672  001660  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  5673  001662  0100               	movlb	0	; () banked
  5674  001664  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5675  001666  0100               	movlb	0	; () banked
  5676  001668  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  5677  00166A  A0D8               	btfss	status,0,c
  5678  00166C  D008               	goto	l4119
  5679                           
  5680                           ; BSR set to: 0
  5681  00166E  0100               	movlb	0	; () banked
  5682  001670  5189               	movf	___lwmod@divisor& (0+255),w,b
  5683  001672  0100               	movlb	0	; () banked
  5684  001674  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  5685  001676  0100               	movlb	0	; () banked
  5686  001678  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5687  00167A  0100               	movlb	0	; () banked
  5688  00167C  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  5689  00167E                     l4119:
  5690                           
  5691                           ; BSR set to: 0
  5692  00167E  0100               	movlb	0	; () banked
  5693  001680  90D8               	bcf	status,0,c
  5694  001682  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  5695  001684  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  5696                           
  5697                           ; BSR set to: 0
  5698  001686  0100               	movlb	0	; () banked
  5699  001688  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  5700  00168A  D7E7               	goto	l4115
  5701  00168C                     l1116:
  5702                           
  5703                           ; BSR set to: 0
  5704  00168C  C087  F087         	movff	___lwmod@dividend,?___lwmod
  5705  001690  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  5706                           
  5707                           ; BSR set to: 0
  5708  001694  0012               	return		;funcret
  5709  001696                     __end_of___lwmod:
  5710                           	opt stack 0
  5711                           tosu	equ	0xFFF
  5712                           tosh	equ	0xFFE
  5713                           tosl	equ	0xFFD
  5714                           pclath	equ	0xFFA
  5715                           tblptru	equ	0xFF8
  5716                           tblptrh	equ	0xFF7
  5717                           tblptrl	equ	0xFF6
  5718                           tablat	equ	0xFF5
  5719                           prodh	equ	0xFF4
  5720                           prodl	equ	0xFF3
  5721                           intcon	equ	0xFF2
  5722                           intcon3	equ	0xFF0
  5723                           postinc0	equ	0xFEE
  5724                           wreg	equ	0xFE8
  5725                           indf2	equ	0xFDF
  5726                           postinc2	equ	0xFDE
  5727                           postdec2	equ	0xFDD
  5728                           fsr2h	equ	0xFDA
  5729                           fsr2l	equ	0xFD9
  5730                           status	equ	0xFD8
  5731                           
  5732 ;; *************** function ___lwdiv *****************
  5733 ;; Defined at:
  5734 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  5735 ;; Parameters:    Size  Location     Type
  5736 ;;  dividend        2    0[BANK0 ] unsigned int 
  5737 ;;  divisor         2    2[BANK0 ] unsigned int 
  5738 ;; Auto vars:     Size  Location     Type
  5739 ;;  quotient        2    5[BANK0 ] unsigned int 
  5740 ;;  counter         1    4[BANK0 ] unsigned char 
  5741 ;; Return value:  Size  Location     Type
  5742 ;;                  2    0[BANK0 ] unsigned int 
  5743 ;; Registers used:
  5744 ;;		wreg, status,2, status,0
  5745 ;; Tracked objects:
  5746 ;;		On entry : 0/0
  5747 ;;		On exit  : 0/0
  5748 ;;		Unchanged: 0/0
  5749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5750 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5751 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5753 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5754 ;;Total ram usage:        7 bytes
  5755 ;; Hardware stack levels used:    1
  5756 ;; Hardware stack levels required when called:    5
  5757 ;; This function calls:
  5758 ;;		Nothing
  5759 ;; This function is called by:
  5760 ;;		_printf
  5761 ;; This function uses a non-reentrant model
  5762 ;;
  5763                           
  5764                           	psect	text38
  5765  0012D0                     __ptext38:
  5766                           	opt stack 0
  5767  0012D0                     ___lwdiv:
  5768                           	opt stack 23
  5769                           
  5770                           ; BSR set to: 0
  5771                           ;incstack = 0
  5772  0012D0  0E00               	movlw	0
  5773  0012D2  0100               	movlb	0	; () banked
  5774  0012D4  6F86               	movwf	(___lwdiv@quotient+1)& (0+255),b
  5775  0012D6  0E00               	movlw	0
  5776  0012D8  6F85               	movwf	___lwdiv@quotient& (0+255),b
  5777                           
  5778                           ; BSR set to: 0
  5779  0012DA  0100               	movlb	0	; () banked
  5780  0012DC  5182               	movf	___lwdiv@divisor& (0+255),w,b
  5781  0012DE  0100               	movlb	0	; () banked
  5782  0012E0  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  5783  0012E2  B4D8               	btfsc	status,2,c
  5784  0012E4  D02C               	goto	l1106
  5785                           
  5786                           ; BSR set to: 0
  5787  0012E6  0E01               	movlw	1
  5788  0012E8  0100               	movlb	0	; () banked
  5789  0012EA  6F84               	movwf	___lwdiv@counter& (0+255),b
  5790  0012EC  D006               	goto	l4093
  5791  0012EE                     l4091:
  5792                           
  5793                           ; BSR set to: 0
  5794  0012EE  0100               	movlb	0	; () banked
  5795  0012F0  90D8               	bcf	status,0,c
  5796  0012F2  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  5797  0012F4  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  5798  0012F6  0100               	movlb	0	; () banked
  5799  0012F8  2B84               	incf	___lwdiv@counter& (0+255),f,b
  5800  0012FA                     l4093:
  5801                           
  5802                           ; BSR set to: 0
  5803  0012FA  0100               	movlb	0	; () banked
  5804  0012FC  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  5805  0012FE  D7F7               	goto	l4091
  5806  001300                     l4095:
  5807                           
  5808                           ; BSR set to: 0
  5809  001300  0100               	movlb	0	; () banked
  5810  001302  90D8               	bcf	status,0,c
  5811  001304  3785               	rlcf	___lwdiv@quotient& (0+255),f,b
  5812  001306  3786               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  5813                           
  5814                           ; BSR set to: 0
  5815  001308  0100               	movlb	0	; () banked
  5816  00130A  5182               	movf	___lwdiv@divisor& (0+255),w,b
  5817  00130C  0100               	movlb	0	; () banked
  5818  00130E  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  5819  001310  0100               	movlb	0	; () banked
  5820  001312  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5821  001314  0100               	movlb	0	; () banked
  5822  001316  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  5823  001318  A0D8               	btfss	status,0,c
  5824  00131A  D00A               	goto	l4103
  5825                           
  5826                           ; BSR set to: 0
  5827  00131C  0100               	movlb	0	; () banked
  5828  00131E  5182               	movf	___lwdiv@divisor& (0+255),w,b
  5829  001320  0100               	movlb	0	; () banked
  5830  001322  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  5831  001324  0100               	movlb	0	; () banked
  5832  001326  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5833  001328  0100               	movlb	0	; () banked
  5834  00132A  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  5835                           
  5836                           ; BSR set to: 0
  5837  00132C  0100               	movlb	0	; () banked
  5838  00132E  8185               	bsf	___lwdiv@quotient& (0+255),0,b
  5839  001330                     l4103:
  5840                           
  5841                           ; BSR set to: 0
  5842  001330  0100               	movlb	0	; () banked
  5843  001332  90D8               	bcf	status,0,c
  5844  001334  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  5845  001336  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  5846                           
  5847                           ; BSR set to: 0
  5848  001338  0100               	movlb	0	; () banked
  5849  00133A  2F84               	decfsz	___lwdiv@counter& (0+255),f,b
  5850  00133C  D7E1               	goto	l4095
  5851  00133E                     l1106:
  5852                           
  5853                           ; BSR set to: 0
  5854  00133E  C085  F080         	movff	___lwdiv@quotient,?___lwdiv
  5855  001342  C086  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5856                           
  5857                           ; BSR set to: 0
  5858  001346  0012               	return		;funcret
  5859  001348                     __end_of___lwdiv:
  5860                           	opt stack 0
  5861                           tosu	equ	0xFFF
  5862                           tosh	equ	0xFFE
  5863                           tosl	equ	0xFFD
  5864                           pclath	equ	0xFFA
  5865                           tblptru	equ	0xFF8
  5866                           tblptrh	equ	0xFF7
  5867                           tblptrl	equ	0xFF6
  5868                           tablat	equ	0xFF5
  5869                           prodh	equ	0xFF4
  5870                           prodl	equ	0xFF3
  5871                           intcon	equ	0xFF2
  5872                           intcon3	equ	0xFF0
  5873                           postinc0	equ	0xFEE
  5874                           wreg	equ	0xFE8
  5875                           indf2	equ	0xFDF
  5876                           postinc2	equ	0xFDE
  5877                           postdec2	equ	0xFDD
  5878                           fsr2h	equ	0xFDA
  5879                           fsr2l	equ	0xFD9
  5880                           status	equ	0xFD8
  5881                           
  5882 ;; *************** function _initLCD *****************
  5883 ;; Defined at:
  5884 ;;		line 22 in file "lcd.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;		None
  5887 ;; Auto vars:     Size  Location     Type
  5888 ;;		None
  5889 ;; Return value:  Size  Location     Type
  5890 ;;                  1    wreg      void 
  5891 ;; Registers used:
  5892 ;;		wreg, status,2, status,0, cstack
  5893 ;; Tracked objects:
  5894 ;;		On entry : 0/0
  5895 ;;		On exit  : 0/0
  5896 ;;		Unchanged: 0/0
  5897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5900 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5901 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5902 ;;Total ram usage:        1 bytes
  5903 ;; Hardware stack levels used:    1
  5904 ;; Hardware stack levels required when called:    7
  5905 ;; This function calls:
  5906 ;;		_lcdInst
  5907 ;; This function is called by:
  5908 ;;		_main
  5909 ;;		_standby
  5910 ;;		_startSorting
  5911 ;;		_initialization
  5912 ;;		_results
  5913 ;;		_top_rocker_idle
  5914 ;; This function uses a non-reentrant model
  5915 ;;
  5916                           
  5917                           	psect	text39
  5918  00183E                     __ptext39:
  5919                           	opt stack 0
  5920  00183E                     _initLCD:
  5921                           	opt stack 21
  5922                           
  5923                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  5924                           
  5925                           ; BSR set to: 0
  5926                           ;incstack = 0
  5927  00183E  0E31               	movlw	49
  5928  001840  0100               	movlb	0	; () banked
  5929  001842  6F83               	movwf	??_initLCD& (0+255),b
  5930  001844  0EB2               	movlw	178
  5931  001846                     u4307:
  5932  001846  2EE8               	decfsz	wreg,f,c
  5933  001848  D7FE               	bra	u4307
  5934  00184A  2F83               	decfsz	??_initLCD& (0+255),f,b
  5935  00184C  D7FC               	bra	u4307
  5936  00184E  F000               	nop	
  5937                           
  5938                           ;lcd.c: 24: lcdInst(0b00110011);
  5939  001850  0E33               	movlw	51
  5940  001852  ECA5  F00E         	call	_lcdInst
  5941                           
  5942                           ;lcd.c: 25: lcdInst(0b00110010);
  5943  001856  0E32               	movlw	50
  5944  001858  ECA5  F00E         	call	_lcdInst
  5945                           
  5946                           ;lcd.c: 26: lcdInst(0b00101000);
  5947  00185C  0E28               	movlw	40
  5948  00185E  ECA5  F00E         	call	_lcdInst
  5949                           
  5950                           ;lcd.c: 27: lcdInst(0b00001111);
  5951  001862  0E0F               	movlw	15
  5952  001864  ECA5  F00E         	call	_lcdInst
  5953                           
  5954                           ;lcd.c: 28: lcdInst(0b00000110);
  5955  001868  0E06               	movlw	6
  5956  00186A  ECA5  F00E         	call	_lcdInst
  5957                           
  5958                           ;lcd.c: 29: lcdInst(0b00000001);
  5959  00186E  0E01               	movlw	1
  5960  001870  ECA5  F00E         	call	_lcdInst
  5961                           
  5962                           ;lcd.c: 30: _delay((unsigned long)((15)*(10000000/4000.0)));
  5963  001874  0E31               	movlw	49
  5964  001876  0100               	movlb	0	; () banked
  5965  001878  6F83               	movwf	??_initLCD& (0+255),b
  5966  00187A  0EB2               	movlw	178
  5967  00187C                     u4317:
  5968  00187C  2EE8               	decfsz	wreg,f,c
  5969  00187E  D7FE               	bra	u4317
  5970  001880  2F83               	decfsz	??_initLCD& (0+255),f,b
  5971  001882  D7FC               	bra	u4317
  5972  001884  F000               	nop	
  5973  001886  0012               	return		;funcret
  5974  001888                     __end_of_initLCD:
  5975                           	opt stack 0
  5976                           tosu	equ	0xFFF
  5977                           tosh	equ	0xFFE
  5978                           tosl	equ	0xFFD
  5979                           pclath	equ	0xFFA
  5980                           tblptru	equ	0xFF8
  5981                           tblptrh	equ	0xFF7
  5982                           tblptrl	equ	0xFF6
  5983                           tablat	equ	0xFF5
  5984                           prodh	equ	0xFF4
  5985                           prodl	equ	0xFF3
  5986                           intcon	equ	0xFF2
  5987                           intcon3	equ	0xFF0
  5988                           postinc0	equ	0xFEE
  5989                           wreg	equ	0xFE8
  5990                           indf2	equ	0xFDF
  5991                           postinc2	equ	0xFDE
  5992                           postdec2	equ	0xFDD
  5993                           fsr2h	equ	0xFDA
  5994                           fsr2l	equ	0xFD9
  5995                           status	equ	0xFD8
  5996                           
  5997 ;; *************** function _lcdInst *****************
  5998 ;; Defined at:
  5999 ;;		line 33 in file "lcd.c"
  6000 ;; Parameters:    Size  Location     Type
  6001 ;;  data            1    wreg     unsigned char 
  6002 ;; Auto vars:     Size  Location     Type
  6003 ;;  data            1    2[BANK0 ] unsigned char 
  6004 ;; Return value:  Size  Location     Type
  6005 ;;                  1    wreg      void 
  6006 ;; Registers used:
  6007 ;;		wreg, status,2, status,0, cstack
  6008 ;; Tracked objects:
  6009 ;;		On entry : 0/0
  6010 ;;		On exit  : 0/0
  6011 ;;		Unchanged: 0/0
  6012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6014 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6016 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6017 ;;Total ram usage:        1 bytes
  6018 ;; Hardware stack levels used:    1
  6019 ;; Hardware stack levels required when called:    6
  6020 ;; This function calls:
  6021 ;;		_lcdNibble
  6022 ;; This function is called by:
  6023 ;;		_initLCD
  6024 ;;		_standby
  6025 ;;		_startSorting
  6026 ;;		_initialization
  6027 ;;		_results
  6028 ;; This function uses a non-reentrant model
  6029 ;;
  6030                           
  6031                           	psect	text40
  6032  001D4A                     __ptext40:
  6033                           	opt stack 0
  6034  001D4A                     _lcdInst:
  6035                           	opt stack 21
  6036                           
  6037                           ;incstack = 0
  6038                           ;lcdInst@data stored from wreg
  6039  001D4A  0100               	movlb	0	; () banked
  6040  001D4C  6F82               	movwf	lcdInst@data& (0+255),b
  6041                           
  6042                           ;lcd.c: 34: LATDbits.LATD2 = 0;
  6043  001D4E  948C               	bcf	3980,2,c	;volatile
  6044                           
  6045                           ;lcd.c: 35: lcdNibble(data);
  6046  001D50  0100               	movlb	0	; () banked
  6047  001D52  5182               	movf	lcdInst@data& (0+255),w,b
  6048  001D54  ECB5  F00A         	call	_lcdNibble
  6049  001D58  0012               	return		;funcret
  6050  001D5A                     __end_of_lcdInst:
  6051                           	opt stack 0
  6052                           tosu	equ	0xFFF
  6053                           tosh	equ	0xFFE
  6054                           tosl	equ	0xFFD
  6055                           pclath	equ	0xFFA
  6056                           tblptru	equ	0xFF8
  6057                           tblptrh	equ	0xFF7
  6058                           tblptrl	equ	0xFF6
  6059                           tablat	equ	0xFF5
  6060                           prodh	equ	0xFF4
  6061                           prodl	equ	0xFF3
  6062                           intcon	equ	0xFF2
  6063                           intcon3	equ	0xFF0
  6064                           postinc0	equ	0xFEE
  6065                           wreg	equ	0xFE8
  6066                           indf2	equ	0xFDF
  6067                           postinc2	equ	0xFDE
  6068                           postdec2	equ	0xFDD
  6069                           fsr2h	equ	0xFDA
  6070                           fsr2l	equ	0xFD9
  6071                           status	equ	0xFD8
  6072                           
  6073 ;; *************** function _lcdNibble *****************
  6074 ;; Defined at:
  6075 ;;		line 43 in file "lcd.c"
  6076 ;; Parameters:    Size  Location     Type
  6077 ;;  data            1    wreg     unsigned char 
  6078 ;; Auto vars:     Size  Location     Type
  6079 ;;  data            1    1[BANK0 ] unsigned char 
  6080 ;;  temp            1    0[BANK0 ] unsigned char 
  6081 ;; Return value:  Size  Location     Type
  6082 ;;                  1    wreg      void 
  6083 ;; Registers used:
  6084 ;;		wreg, status,2, status,0
  6085 ;; Tracked objects:
  6086 ;;		On entry : 0/0
  6087 ;;		On exit  : 0/0
  6088 ;;		Unchanged: 0/0
  6089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6091 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6093 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6094 ;;Total ram usage:        2 bytes
  6095 ;; Hardware stack levels used:    1
  6096 ;; Hardware stack levels required when called:    5
  6097 ;; This function calls:
  6098 ;;		Nothing
  6099 ;; This function is called by:
  6100 ;;		_lcdInst
  6101 ;;		_putch
  6102 ;; This function uses a non-reentrant model
  6103 ;;
  6104                           
  6105                           	psect	text41
  6106  00156A                     __ptext41:
  6107                           	opt stack 0
  6108  00156A                     _lcdNibble:
  6109                           	opt stack 21
  6110                           
  6111                           ;incstack = 0
  6112                           ;lcdNibble@data stored from wreg
  6113  00156A  0100               	movlb	0	; () banked
  6114  00156C  6F81               	movwf	lcdNibble@data& (0+255),b
  6115                           
  6116                           ;lcd.c: 45: char temp = data & 0xF0;
  6117  00156E  0100               	movlb	0	; () banked
  6118  001570  5181               	movf	lcdNibble@data& (0+255),w,b
  6119  001572  0BF0               	andlw	240
  6120  001574  0100               	movlb	0	; () banked
  6121  001576  6F80               	movwf	lcdNibble@temp& (0+255),b
  6122                           
  6123                           ;lcd.c: 46: LATD = LATD & 0x0F;
  6124  001578  508C               	movf	3980,w,c	;volatile
  6125  00157A  0B0F               	andlw	15
  6126  00157C  6E8C               	movwf	3980,c	;volatile
  6127                           
  6128                           ;lcd.c: 47: LATD = temp | LATD;
  6129  00157E  0100               	movlb	0	; () banked
  6130  001580  5180               	movf	lcdNibble@temp& (0+255),w,b
  6131  001582  108C               	iorwf	3980,w,c	;volatile
  6132  001584  6E8C               	movwf	3980,c	;volatile
  6133                           
  6134                           ; BSR set to: 0
  6135                           ;lcd.c: 49: LATDbits.LATD3 = 0;
  6136  001586  968C               	bcf	3980,3,c	;volatile
  6137                           
  6138                           ; BSR set to: 0
  6139                           ;lcd.c: 50: _delay((unsigned long)((25)*(10000000/4000000.0)));
  6140  001588  0E14               	movlw	20
  6141  00158A                     u4327:
  6142  00158A  2EE8               	decfsz	wreg,f,c
  6143  00158C  D7FE               	bra	u4327
  6144  00158E  D000               	nop2	
  6145                           
  6146                           ;lcd.c: 51: LATDbits.LATD3 = 1;
  6147  001590  868C               	bsf	3980,3,c	;volatile
  6148                           
  6149                           ;lcd.c: 52: _delay((unsigned long)((25)*(10000000/4000000.0)));
  6150  001592  0E14               	movlw	20
  6151  001594                     u4337:
  6152  001594  2EE8               	decfsz	wreg,f,c
  6153  001596  D7FE               	bra	u4337
  6154  001598  D000               	nop2	
  6155                           
  6156                           ;lcd.c: 54: data = data << 4;
  6157  00159A  0100               	movlb	0	; () banked
  6158  00159C  3981               	swapf	lcdNibble@data& (0+255),w,b
  6159  00159E  0BF0               	andlw	240
  6160  0015A0  0100               	movlb	0	; () banked
  6161  0015A2  6F81               	movwf	lcdNibble@data& (0+255),b
  6162                           
  6163                           ;lcd.c: 56: temp = data & 0xF0;
  6164  0015A4  0100               	movlb	0	; () banked
  6165  0015A6  5181               	movf	lcdNibble@data& (0+255),w,b
  6166  0015A8  0BF0               	andlw	240
  6167  0015AA  0100               	movlb	0	; () banked
  6168  0015AC  6F80               	movwf	lcdNibble@temp& (0+255),b
  6169                           
  6170                           ;lcd.c: 57: LATD = LATD & 0x0F;
  6171  0015AE  508C               	movf	3980,w,c	;volatile
  6172  0015B0  0B0F               	andlw	15
  6173  0015B2  6E8C               	movwf	3980,c	;volatile
  6174                           
  6175                           ;lcd.c: 58: LATD = temp | LATD;
  6176  0015B4  0100               	movlb	0	; () banked
  6177  0015B6  5180               	movf	lcdNibble@temp& (0+255),w,b
  6178  0015B8  108C               	iorwf	3980,w,c	;volatile
  6179  0015BA  6E8C               	movwf	3980,c	;volatile
  6180                           
  6181                           ; BSR set to: 0
  6182                           ;lcd.c: 60: LATDbits.LATD3 = 0;
  6183  0015BC  968C               	bcf	3980,3,c	;volatile
  6184                           
  6185                           ; BSR set to: 0
  6186                           ;lcd.c: 61: _delay((unsigned long)((25)*(10000000/4000000.0)));
  6187  0015BE  0E14               	movlw	20
  6188  0015C0                     u4347:
  6189  0015C0  2EE8               	decfsz	wreg,f,c
  6190  0015C2  D7FE               	bra	u4347
  6191  0015C4  D000               	nop2	
  6192                           
  6193                           ;lcd.c: 62: LATDbits.LATD3 = 1;
  6194  0015C6  868C               	bsf	3980,3,c	;volatile
  6195                           
  6196                           ;lcd.c: 63: _delay((unsigned long)((25)*(10000000/4000000.0)));
  6197  0015C8  0E14               	movlw	20
  6198  0015CA                     u4357:
  6199  0015CA  2EE8               	decfsz	wreg,f,c
  6200  0015CC  D7FE               	bra	u4357
  6201  0015CE  D000               	nop2	
  6202  0015D0  0012               	return		;funcret
  6203  0015D2                     __end_of_lcdNibble:
  6204                           	opt stack 0
  6205                           tosu	equ	0xFFF
  6206                           tosh	equ	0xFFE
  6207                           tosl	equ	0xFFD
  6208                           pclath	equ	0xFFA
  6209                           tblptru	equ	0xFF8
  6210                           tblptrh	equ	0xFF7
  6211                           tblptrl	equ	0xFF6
  6212                           tablat	equ	0xFF5
  6213                           prodh	equ	0xFF4
  6214                           prodl	equ	0xFF3
  6215                           intcon	equ	0xFF2
  6216                           intcon3	equ	0xFF0
  6217                           postinc0	equ	0xFEE
  6218                           wreg	equ	0xFE8
  6219                           indf2	equ	0xFDF
  6220                           postinc2	equ	0xFDE
  6221                           postdec2	equ	0xFDD
  6222                           fsr2h	equ	0xFDA
  6223                           fsr2l	equ	0xFD9
  6224                           status	equ	0xFD8
  6225                           
  6226 ;; *************** function _done_sorting *****************
  6227 ;; Defined at:
  6228 ;;		line 183 in file "operation.c"
  6229 ;; Parameters:    Size  Location     Type
  6230 ;;		None
  6231 ;; Auto vars:     Size  Location     Type
  6232 ;;  i               1   23[BANK0 ] unsigned char 
  6233 ;;  End_time        2   24[BANK0 ] unsigned char [2]
  6234 ;;  total_second    2   21[BANK0 ] int 
  6235 ;; Return value:  Size  Location     Type
  6236 ;;                  2   14[BANK0 ] int 
  6237 ;; Registers used:
  6238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6239 ;; Tracked objects:
  6240 ;;		On entry : 0/0
  6241 ;;		On exit  : 0/0
  6242 ;;		Unchanged: 0/0
  6243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6244 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6245 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6246 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6247 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6248 ;;Total ram usage:       12 bytes
  6249 ;; Hardware stack levels used:    1
  6250 ;; Hardware stack levels required when called:    7
  6251 ;; This function calls:
  6252 ;;		_I2C_Master_Read
  6253 ;;		_I2C_Master_Start
  6254 ;;		_I2C_Master_Stop
  6255 ;;		_I2C_Master_Write
  6256 ;;		___awdiv
  6257 ;;		___wmul
  6258 ;; This function is called by:
  6259 ;;		_main
  6260 ;; This function uses a non-reentrant model
  6261 ;;
  6262                           
  6263                           	psect	text42
  6264  0009FE                     __ptext42:
  6265                           	opt stack 0
  6266  0009FE                     _done_sorting:
  6267                           	opt stack 23
  6268                           
  6269                           ;operation.c: 185: fsm1 = 0;
  6270                           
  6271                           ;incstack = 0
  6272  0009FE  0E00               	movlw	0
  6273  000A00  0100               	movlb	0	; () banked
  6274  000A02  6FBD               	movwf	(_fsm1+1)& (0+255),b
  6275  000A04  0E00               	movlw	0
  6276  000A06  6FBC               	movwf	_fsm1& (0+255),b
  6277                           
  6278                           ;operation.c: 186: fsm2 = 0;
  6279  000A08  0E00               	movlw	0
  6280  000A0A  0100               	movlb	0	; () banked
  6281  000A0C  6FC9               	movwf	(_fsm2+1)& (0+255),b
  6282  000A0E  0E00               	movlw	0
  6283  000A10  6FC8               	movwf	_fsm2& (0+255),b
  6284                           
  6285                           ; BSR set to: 0
  6286                           ;operation.c: 188: signed int total_second;
  6287                           ;operation.c: 189: unsigned char End_time[2];
  6288                           ;operation.c: 192: I2C_Master_Start();
  6289  000A12  ECDE  F00E         	call	_I2C_Master_Start	;wreg free
  6290                           
  6291                           ;operation.c: 193: I2C_Master_Write(0b11010000);
  6292  000A16  0E00               	movlw	0
  6293  000A18  0100               	movlb	0	; () banked
  6294  000A1A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6295  000A1C  0ED0               	movlw	208
  6296  000A1E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6297  000A20  ECD5  F00E         	call	_I2C_Master_Write	;wreg free
  6298                           
  6299                           ;operation.c: 194: I2C_Master_Write(0x00);
  6300  000A24  0E00               	movlw	0
  6301  000A26  0100               	movlb	0	; () banked
  6302  000A28  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6303  000A2A  0E00               	movlw	0
  6304  000A2C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6305  000A2E  ECD5  F00E         	call	_I2C_Master_Write	;wreg free
  6306                           
  6307                           ;operation.c: 195: I2C_Master_Stop();
  6308  000A32  ECDA  F00E         	call	_I2C_Master_Stop	;wreg free
  6309                           
  6310                           ;operation.c: 198: I2C_Master_Start();
  6311  000A36  ECDE  F00E         	call	_I2C_Master_Start	;wreg free
  6312                           
  6313                           ;operation.c: 199: I2C_Master_Write(0b11010001);
  6314  000A3A  0E00               	movlw	0
  6315  000A3C  0100               	movlb	0	; () banked
  6316  000A3E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6317  000A40  0ED1               	movlw	209
  6318  000A42  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6319  000A44  ECD5  F00E         	call	_I2C_Master_Write	;wreg free
  6320                           
  6321                           ;operation.c: 200: for(unsigned char i=0;i<0x06;i++){
  6322  000A48  0E00               	movlw	0
  6323  000A4A  0100               	movlb	0	; () banked
  6324  000A4C  6F97               	movwf	done_sorting@i& (0+255),b
  6325  000A4E                     l4761:
  6326                           
  6327                           ; BSR set to: 0
  6328  000A4E  0E05               	movlw	5
  6329  000A50  0100               	movlb	0	; () banked
  6330  000A52  6597               	cpfsgt	done_sorting@i& (0+255),b
  6331  000A54  D001               	goto	l4765
  6332  000A56  D010               	goto	l4771
  6333  000A58                     l4765:
  6334                           
  6335                           ; BSR set to: 0
  6336                           ;operation.c: 201: time[i] = I2C_Master_Read(1);
  6337  000A58  0100               	movlb	0	; () banked
  6338  000A5A  5197               	movf	done_sorting@i& (0+255),w,b
  6339  000A5C  0D01               	mullw	1
  6340  000A5E  0EAB               	movlw	low _time
  6341  000A60  24F3               	addwf	prodl,w,c
  6342  000A62  6ED9               	movwf	fsr2l,c
  6343  000A64  0E00               	movlw	high _time
  6344  000A66  20F4               	addwfc	prodh,w,c
  6345  000A68  6EDA               	movwf	fsr2h,c
  6346  000A6A  0E01               	movlw	1
  6347  000A6C  ECF6  F00C         	call	_I2C_Master_Read
  6348  000A70  6EDF               	movwf	indf2,c
  6349  000A72  0100               	movlb	0	; () banked
  6350  000A74  2B97               	incf	done_sorting@i& (0+255),f,b
  6351  000A76  D7EB               	goto	l4761
  6352  000A78                     l4771:
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;operation.c: 202: }
  6356                           ;operation.c: 203: time[6] = I2C_Master_Read(0);
  6357  000A78  0E00               	movlw	0
  6358  000A7A  ECF6  F00C         	call	_I2C_Master_Read
  6359  000A7E  0100               	movlb	0	; () banked
  6360  000A80  6FB1               	movwf	(_time+6)& (0+255),b
  6361                           
  6362                           ;operation.c: 204: I2C_Master_Stop();
  6363  000A82  ECDA  F00E         	call	_I2C_Master_Stop	;wreg free
  6364                           
  6365                           ;operation.c: 206: End_time[2] = time[2];
  6366  000A86  C0AD  F09A         	movff	_time+2,done_sorting@End_time+2
  6367                           
  6368                           ;operation.c: 207: End_time[1] = time[1];
  6369  000A8A  C0AC  F099         	movff	_time+1,done_sorting@End_time+1
  6370                           
  6371                           ;operation.c: 208: End_time[0] = time[0];
  6372  000A8E  C0AB  F098         	movff	_time,done_sorting@End_time
  6373                           
  6374                           ;operation.c: 210: total_start = (Start_time[1]/16*10 + Start_time[1]%16)*60 + (Start_ti
      +                          me[0]/16*10 + Start_time[0]%16);
  6375  000A92  C0BB  F090         	movff	_Start_time+1,??_done_sorting
  6376  000A96  0E0F               	movlw	15
  6377  000A98  0100               	movlb	0	; () banked
  6378  000A9A  1790               	andwf	??_done_sorting& (0+255),f,b
  6379  000A9C  0E00               	movlw	0
  6380  000A9E  0100               	movlb	0	; () banked
  6381  000AA0  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  6382  000AA2  0E10               	movlw	16
  6383  000AA4  6F82               	movwf	___awdiv@divisor& (0+255),b
  6384  000AA6  C0BB  F080         	movff	_Start_time+1,___awdiv@dividend
  6385  000AAA  0100               	movlb	0	; () banked
  6386  000AAC  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  6387  000AAE  EC21  F008         	call	___awdiv	;wreg free
  6388  000AB2  C080  F088         	movff	?___awdiv,___wmul@multiplier
  6389  000AB6  C081  F089         	movff	?___awdiv+1,___wmul@multiplier+1
  6390  000ABA  0E00               	movlw	0
  6391  000ABC  0100               	movlb	0	; () banked
  6392  000ABE  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6393  000AC0  0E0A               	movlw	10
  6394  000AC2  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  6395  000AC4  ECC2  F00C         	call	___wmul	;wreg free
  6396  000AC8  0100               	movlb	0	; () banked
  6397  000ACA  5190               	movf	??_done_sorting& (0+255),w,b
  6398  000ACC  0100               	movlb	0	; () banked
  6399  000ACE  2588               	addwf	?___wmul& (0+255),w,b
  6400  000AD0  0100               	movlb	0	; () banked
  6401  000AD2  6F93               	movwf	_done_sorting$1733& (0+255),b
  6402  000AD4  0100               	movlb	0	; () banked
  6403  000AD6  0E00               	movlw	0
  6404  000AD8  0100               	movlb	0	; () banked
  6405  000ADA  2189               	addwfc	(?___wmul+1)& (0+255),w,b
  6406  000ADC  0100               	movlb	0	; () banked
  6407  000ADE  6F94               	movwf	(_done_sorting$1733+1)& (0+255),b
  6408                           
  6409                           ; BSR set to: 0
  6410                           ;operation.c: 210: total_start = (Start_time[1]/16*10 + Start_time[1]%16)*60 + (Start_ti
      +                          me[0]/16*10 + Start_time[0]%16);
  6411  000AE0  0E00               	movlw	0
  6412  000AE2  0100               	movlb	0	; () banked
  6413  000AE4  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  6414  000AE6  0E10               	movlw	16
  6415  000AE8  6F82               	movwf	___awdiv@divisor& (0+255),b
  6416  000AEA  C0BA  F080         	movff	_Start_time,___awdiv@dividend
  6417  000AEE  0100               	movlb	0	; () banked
  6418  000AF0  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  6419  000AF2  EC21  F008         	call	___awdiv	;wreg free
  6420  000AF6  C080  F088         	movff	?___awdiv,___wmul@multiplier
  6421  000AFA  C081  F089         	movff	?___awdiv+1,___wmul@multiplier+1
  6422  000AFE  0E00               	movlw	0
  6423  000B00  0100               	movlb	0	; () banked
  6424  000B02  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6425  000B04  0E0A               	movlw	10
  6426  000B06  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  6427  000B08  ECC2  F00C         	call	___wmul	;wreg free
  6428  000B0C  C088  F090         	movff	?___wmul,??_done_sorting
  6429  000B10  C089  F091         	movff	?___wmul+1,??_done_sorting+1
  6430  000B14  C0BA  F092         	movff	_Start_time,??_done_sorting+2
  6431  000B18  0E0F               	movlw	15
  6432  000B1A  0100               	movlb	0	; () banked
  6433  000B1C  1792               	andwf	(??_done_sorting+2)& (0+255),f,b
  6434  000B1E  0100               	movlb	0	; () banked
  6435  000B20  5192               	movf	(??_done_sorting+2)& (0+255),w,b
  6436  000B22  0100               	movlb	0	; () banked
  6437  000B24  2790               	addwf	??_done_sorting& (0+255),f,b
  6438  000B26  0E00               	movlw	0
  6439  000B28  2391               	addwfc	(??_done_sorting+1)& (0+255),f,b
  6440  000B2A  C093  F088         	movff	_done_sorting$1733,___wmul@multiplier
  6441  000B2E  C094  F089         	movff	_done_sorting$1733+1,___wmul@multiplier+1
  6442  000B32  0E00               	movlw	0
  6443  000B34  0100               	movlb	0	; () banked
  6444  000B36  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6445  000B38  0E3C               	movlw	60
  6446  000B3A  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  6447  000B3C  ECC2  F00C         	call	___wmul	;wreg free
  6448  000B40  0100               	movlb	0	; () banked
  6449  000B42  5188               	movf	?___wmul& (0+255),w,b
  6450  000B44  0100               	movlb	0	; () banked
  6451  000B46  2790               	addwf	??_done_sorting& (0+255),f,b
  6452  000B48  0100               	movlb	0	; () banked
  6453  000B4A  5189               	movf	(?___wmul+1)& (0+255),w,b
  6454  000B4C  0100               	movlb	0	; () banked
  6455  000B4E  2391               	addwfc	(??_done_sorting+1)& (0+255),f,b
  6456  000B50  C090  F0B6         	movff	??_done_sorting,_total_start
  6457  000B54  C091  F0B7         	movff	??_done_sorting+1,_total_start+1
  6458  000B58  0100               	movlb	0	; () banked
  6459  000B5A  0E00               	movlw	0
  6460  000B5C  BFB7               	btfsc	(_total_start+1)& (0+255),7,b
  6461  000B5E  0EFF               	movlw	-1
  6462  000B60  6FB8               	movwf	(_total_start+2)& (0+255),b
  6463  000B62  6FB9               	movwf	(_total_start+3)& (0+255),b
  6464                           
  6465                           ; BSR set to: 0
  6466                           ;operation.c: 211: total_end = (End_time[1]/16*10 + End_time[1]%16)*60 + (End_time[0]/16
      +                          *10 + End_time[0]%16);
  6467  000B64  C099  F090         	movff	done_sorting@End_time+1,??_done_sorting
  6468  000B68  0E0F               	movlw	15
  6469  000B6A  0100               	movlb	0	; () banked
  6470  000B6C  1790               	andwf	??_done_sorting& (0+255),f,b
  6471  000B6E  0E00               	movlw	0
  6472  000B70  0100               	movlb	0	; () banked
  6473  000B72  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  6474  000B74  0E10               	movlw	16
  6475  000B76  6F82               	movwf	___awdiv@divisor& (0+255),b
  6476  000B78  C099  F080         	movff	done_sorting@End_time+1,___awdiv@dividend
  6477  000B7C  0100               	movlb	0	; () banked
  6478  000B7E  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  6479  000B80  EC21  F008         	call	___awdiv	;wreg free
  6480  000B84  C080  F088         	movff	?___awdiv,___wmul@multiplier
  6481  000B88  C081  F089         	movff	?___awdiv+1,___wmul@multiplier+1
  6482  000B8C  0E00               	movlw	0
  6483  000B8E  0100               	movlb	0	; () banked
  6484  000B90  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6485  000B92  0E0A               	movlw	10
  6486  000B94  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  6487  000B96  ECC2  F00C         	call	___wmul	;wreg free
  6488  000B9A  0100               	movlb	0	; () banked
  6489  000B9C  5190               	movf	??_done_sorting& (0+255),w,b
  6490  000B9E  0100               	movlb	0	; () banked
  6491  000BA0  2588               	addwf	?___wmul& (0+255),w,b
  6492  000BA2  0100               	movlb	0	; () banked
  6493  000BA4  6F93               	movwf	_done_sorting$1733& (0+255),b
  6494  000BA6  0100               	movlb	0	; () banked
  6495  000BA8  0E00               	movlw	0
  6496  000BAA  0100               	movlb	0	; () banked
  6497  000BAC  2189               	addwfc	(?___wmul+1)& (0+255),w,b
  6498  000BAE  0100               	movlb	0	; () banked
  6499  000BB0  6F94               	movwf	(_done_sorting$1733+1)& (0+255),b
  6500                           
  6501                           ; BSR set to: 0
  6502                           ;operation.c: 211: total_end = (End_time[1]/16*10 + End_time[1]%16)*60 + (End_time[0]/16
      +                          *10 + End_time[0]%16);
  6503  000BB2  0E00               	movlw	0
  6504  000BB4  0100               	movlb	0	; () banked
  6505  000BB6  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  6506  000BB8  0E10               	movlw	16
  6507  000BBA  6F82               	movwf	___awdiv@divisor& (0+255),b
  6508  000BBC  C098  F080         	movff	done_sorting@End_time,___awdiv@dividend
  6509  000BC0  0100               	movlb	0	; () banked
  6510  000BC2  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  6511  000BC4  EC21  F008         	call	___awdiv	;wreg free
  6512  000BC8  C080  F088         	movff	?___awdiv,___wmul@multiplier
  6513  000BCC  C081  F089         	movff	?___awdiv+1,___wmul@multiplier+1
  6514  000BD0  0E00               	movlw	0
  6515  000BD2  0100               	movlb	0	; () banked
  6516  000BD4  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6517  000BD6  0E0A               	movlw	10
  6518  000BD8  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  6519  000BDA  ECC2  F00C         	call	___wmul	;wreg free
  6520  000BDE  C088  F090         	movff	?___wmul,??_done_sorting
  6521  000BE2  C089  F091         	movff	?___wmul+1,??_done_sorting+1
  6522  000BE6  C098  F092         	movff	done_sorting@End_time,??_done_sorting+2
  6523  000BEA  0E0F               	movlw	15
  6524  000BEC  0100               	movlb	0	; () banked
  6525  000BEE  1792               	andwf	(??_done_sorting+2)& (0+255),f,b
  6526  000BF0  0100               	movlb	0	; () banked
  6527  000BF2  5192               	movf	(??_done_sorting+2)& (0+255),w,b
  6528  000BF4  0100               	movlb	0	; () banked
  6529  000BF6  2790               	addwf	??_done_sorting& (0+255),f,b
  6530  000BF8  0E00               	movlw	0
  6531  000BFA  2391               	addwfc	(??_done_sorting+1)& (0+255),f,b
  6532  000BFC  C093  F088         	movff	_done_sorting$1733,___wmul@multiplier
  6533  000C00  C094  F089         	movff	_done_sorting$1733+1,___wmul@multiplier+1
  6534  000C04  0E00               	movlw	0
  6535  000C06  0100               	movlb	0	; () banked
  6536  000C08  6F8B               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6537  000C0A  0E3C               	movlw	60
  6538  000C0C  6F8A               	movwf	___wmul@multiplicand& (0+255),b
  6539  000C0E  ECC2  F00C         	call	___wmul	;wreg free
  6540  000C12  0100               	movlb	0	; () banked
  6541  000C14  5188               	movf	?___wmul& (0+255),w,b
  6542  000C16  0100               	movlb	0	; () banked
  6543  000C18  2790               	addwf	??_done_sorting& (0+255),f,b
  6544  000C1A  0100               	movlb	0	; () banked
  6545  000C1C  5189               	movf	(?___wmul+1)& (0+255),w,b
  6546  000C1E  0100               	movlb	0	; () banked
  6547  000C20  2391               	addwfc	(??_done_sorting+1)& (0+255),f,b
  6548  000C22  C090  F0B2         	movff	??_done_sorting,_total_end
  6549  000C26  C091  F0B3         	movff	??_done_sorting+1,_total_end+1
  6550  000C2A  0100               	movlb	0	; () banked
  6551  000C2C  0E00               	movlw	0
  6552  000C2E  BFB3               	btfsc	(_total_end+1)& (0+255),7,b
  6553  000C30  0EFF               	movlw	-1
  6554  000C32  6FB4               	movwf	(_total_end+2)& (0+255),b
  6555  000C34  6FB5               	movwf	(_total_end+3)& (0+255),b
  6556                           
  6557                           ; BSR set to: 0
  6558                           ;operation.c: 212: total_second = total_end - total_start;
  6559  000C36  C0B6  F090         	movff	_total_start,??_done_sorting
  6560  000C3A  C0B7  F091         	movff	_total_start+1,??_done_sorting+1
  6561  000C3E  0100               	movlb	0	; () banked
  6562  000C40  1F90               	comf	??_done_sorting& (0+255),f,b
  6563  000C42  1F91               	comf	(??_done_sorting+1)& (0+255),f,b
  6564  000C44  4B90               	infsnz	??_done_sorting& (0+255),f,b
  6565  000C46  2B91               	incf	(??_done_sorting+1)& (0+255),f,b
  6566  000C48  0100               	movlb	0	; () banked
  6567  000C4A  51B2               	movf	_total_end& (0+255),w,b
  6568  000C4C  0100               	movlb	0	; () banked
  6569  000C4E  2590               	addwf	??_done_sorting& (0+255),w,b
  6570  000C50  0100               	movlb	0	; () banked
  6571  000C52  6F95               	movwf	done_sorting@total_second& (0+255),b
  6572  000C54  0100               	movlb	0	; () banked
  6573  000C56  51B3               	movf	(_total_end+1)& (0+255),w,b
  6574  000C58  0100               	movlb	0	; () banked
  6575  000C5A  2191               	addwfc	(??_done_sorting+1)& (0+255),w,b
  6576  000C5C  0100               	movlb	0	; () banked
  6577  000C5E  6F96               	movwf	(done_sorting@total_second+1)& (0+255),b
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;operation.c: 214: if(total_second <= 0){
  6581  000C60  0100               	movlb	0	; () banked
  6582  000C62  BF96               	btfsc	(done_sorting@total_second+1)& (0+255),7,b
  6583  000C64  D007               	goto	l4791
  6584  000C66  0100               	movlb	0	; () banked
  6585  000C68  5196               	movf	(done_sorting@total_second+1)& (0+255),w,b
  6586  000C6A  E10E               	bnz	l4793
  6587  000C6C  0100               	movlb	0	; () banked
  6588  000C6E  0595               	decf	done_sorting@total_second& (0+255),w,b
  6589  000C70  B0D8               	btfsc	status,0,c
  6590  000C72  D00A               	goto	l4793
  6591  000C74                     l4791:
  6592                           
  6593                           ; BSR set to: 0
  6594                           ;operation.c: 215: total_second = 3600 + total_second;
  6595  000C74  0E10               	movlw	16
  6596  000C76  0100               	movlb	0	; () banked
  6597  000C78  2595               	addwf	done_sorting@total_second& (0+255),w,b
  6598  000C7A  0100               	movlb	0	; () banked
  6599  000C7C  6F95               	movwf	done_sorting@total_second& (0+255),b
  6600  000C7E  0E0E               	movlw	14
  6601  000C80  0100               	movlb	0	; () banked
  6602  000C82  2196               	addwfc	(done_sorting@total_second+1)& (0+255),w,b
  6603  000C84  0100               	movlb	0	; () banked
  6604  000C86  6F96               	movwf	(done_sorting@total_second+1)& (0+255),b
  6605  000C88                     l4793:
  6606                           
  6607                           ; BSR set to: 0
  6608                           ;operation.c: 216: }
  6609                           ;operation.c: 217: return total_second;
  6610  000C88  C095  F08E         	movff	done_sorting@total_second,?_done_sorting
  6611  000C8C  C096  F08F         	movff	done_sorting@total_second+1,?_done_sorting+1
  6612  000C90  0012               	return	
  6613  000C92                     __end_of_done_sorting:
  6614                           	opt stack 0
  6615                           tosu	equ	0xFFF
  6616                           tosh	equ	0xFFE
  6617                           tosl	equ	0xFFD
  6618                           pclath	equ	0xFFA
  6619                           tblptru	equ	0xFF8
  6620                           tblptrh	equ	0xFF7
  6621                           tblptrl	equ	0xFF6
  6622                           tablat	equ	0xFF5
  6623                           prodh	equ	0xFF4
  6624                           prodl	equ	0xFF3
  6625                           intcon	equ	0xFF2
  6626                           intcon3	equ	0xFF0
  6627                           postinc0	equ	0xFEE
  6628                           wreg	equ	0xFE8
  6629                           indf2	equ	0xFDF
  6630                           postinc2	equ	0xFDE
  6631                           postdec2	equ	0xFDD
  6632                           fsr2h	equ	0xFDA
  6633                           fsr2l	equ	0xFD9
  6634                           status	equ	0xFD8
  6635                           
  6636 ;; *************** function ___wmul *****************
  6637 ;; Defined at:
  6638 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/Umul16.c"
  6639 ;; Parameters:    Size  Location     Type
  6640 ;;  multiplier      2    8[BANK0 ] unsigned int 
  6641 ;;  multiplicand    2   10[BANK0 ] unsigned int 
  6642 ;; Auto vars:     Size  Location     Type
  6643 ;;  product         2   12[BANK0 ] unsigned int 
  6644 ;; Return value:  Size  Location     Type
  6645 ;;                  2    8[BANK0 ] unsigned int 
  6646 ;; Registers used:
  6647 ;;		wreg, status,2, status,0, prodl, prodh
  6648 ;; Tracked objects:
  6649 ;;		On entry : 0/0
  6650 ;;		On exit  : 0/0
  6651 ;;		Unchanged: 0/0
  6652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6653 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6654 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6656 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6657 ;;Total ram usage:        6 bytes
  6658 ;; Hardware stack levels used:    1
  6659 ;; Hardware stack levels required when called:    5
  6660 ;; This function calls:
  6661 ;;		Nothing
  6662 ;; This function is called by:
  6663 ;;		_done_sorting
  6664 ;;		_printf
  6665 ;; This function uses a non-reentrant model
  6666 ;;
  6667                           
  6668                           	psect	text43
  6669  001984                     __ptext43:
  6670                           	opt stack 0
  6671  001984                     ___wmul:
  6672                           	opt stack 23
  6673                           
  6674                           ; BSR set to: 0
  6675                           ;incstack = 0
  6676  001984  0100               	movlb	0	; () banked
  6677  001986  5188               	movf	___wmul@multiplier& (0+255),w,b
  6678  001988  0100               	movlb	0	; () banked
  6679  00198A  038A               	mulwf	___wmul@multiplicand& (0+255),b
  6680  00198C  CFF3 F08C          	movff	prodl,___wmul@product
  6681  001990  CFF4 F08D          	movff	prodh,___wmul@product+1
  6682  001994  0100               	movlb	0	; () banked
  6683  001996  5188               	movf	___wmul@multiplier& (0+255),w,b
  6684  001998  0100               	movlb	0	; () banked
  6685  00199A  038B               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  6686  00199C  50F3               	movf	prodl,w,c
  6687  00199E  0100               	movlb	0	; () banked
  6688  0019A0  278D               	addwf	(___wmul@product+1)& (0+255),f,b
  6689  0019A2  0100               	movlb	0	; () banked
  6690  0019A4  5189               	movf	(___wmul@multiplier+1)& (0+255),w,b
  6691  0019A6  0100               	movlb	0	; () banked
  6692  0019A8  038A               	mulwf	___wmul@multiplicand& (0+255),b
  6693  0019AA  50F3               	movf	prodl,w,c
  6694  0019AC  0100               	movlb	0	; () banked
  6695  0019AE  278D               	addwf	(___wmul@product+1)& (0+255),f,b
  6696                           
  6697                           ; BSR set to: 0
  6698  0019B0  C08C  F088         	movff	___wmul@product,?___wmul
  6699  0019B4  C08D  F089         	movff	___wmul@product+1,?___wmul+1
  6700  0019B8  0012               	return	
  6701  0019BA                     __end_of___wmul:
  6702                           	opt stack 0
  6703                           tosu	equ	0xFFF
  6704                           tosh	equ	0xFFE
  6705                           tosl	equ	0xFFD
  6706                           pclath	equ	0xFFA
  6707                           tblptru	equ	0xFF8
  6708                           tblptrh	equ	0xFF7
  6709                           tblptrl	equ	0xFF6
  6710                           tablat	equ	0xFF5
  6711                           prodh	equ	0xFF4
  6712                           prodl	equ	0xFF3
  6713                           intcon	equ	0xFF2
  6714                           intcon3	equ	0xFF0
  6715                           postinc0	equ	0xFEE
  6716                           wreg	equ	0xFE8
  6717                           indf2	equ	0xFDF
  6718                           postinc2	equ	0xFDE
  6719                           postdec2	equ	0xFDD
  6720                           fsr2h	equ	0xFDA
  6721                           fsr2l	equ	0xFD9
  6722                           status	equ	0xFD8
  6723                           
  6724 ;; *************** function ___awdiv *****************
  6725 ;; Defined at:
  6726 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awdiv.c"
  6727 ;; Parameters:    Size  Location     Type
  6728 ;;  dividend        2    0[BANK0 ] int 
  6729 ;;  divisor         2    2[BANK0 ] int 
  6730 ;; Auto vars:     Size  Location     Type
  6731 ;;  quotient        2    6[BANK0 ] int 
  6732 ;;  sign            1    5[BANK0 ] unsigned char 
  6733 ;;  counter         1    4[BANK0 ] unsigned char 
  6734 ;; Return value:  Size  Location     Type
  6735 ;;                  2    0[BANK0 ] int 
  6736 ;; Registers used:
  6737 ;;		wreg, status,2, status,0
  6738 ;; Tracked objects:
  6739 ;;		On entry : 0/0
  6740 ;;		On exit  : 0/0
  6741 ;;		Unchanged: 0/0
  6742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6743 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6744 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6746 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6747 ;;Total ram usage:        8 bytes
  6748 ;; Hardware stack levels used:    1
  6749 ;; Hardware stack levels required when called:    5
  6750 ;; This function calls:
  6751 ;;		Nothing
  6752 ;; This function is called by:
  6753 ;;		_done_sorting
  6754 ;; This function uses a non-reentrant model
  6755 ;;
  6756                           
  6757                           	psect	text44
  6758  001042                     __ptext44:
  6759                           	opt stack 0
  6760  001042                     ___awdiv:
  6761                           	opt stack 24
  6762                           
  6763                           ; BSR set to: 0
  6764                           ;incstack = 0
  6765  001042  0E00               	movlw	0
  6766  001044  0100               	movlb	0	; () banked
  6767  001046  6F85               	movwf	___awdiv@sign& (0+255),b
  6768                           
  6769                           ; BSR set to: 0
  6770  001048  0100               	movlb	0	; () banked
  6771  00104A  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6772  00104C  D008               	goto	l4585
  6773                           
  6774                           ; BSR set to: 0
  6775  00104E  0100               	movlb	0	; () banked
  6776  001050  6D82               	negf	___awdiv@divisor& (0+255),b
  6777  001052  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6778  001054  B0D8               	btfsc	status,0,c
  6779  001056  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6780                           
  6781                           ; BSR set to: 0
  6782  001058  0E01               	movlw	1
  6783  00105A  0100               	movlb	0	; () banked
  6784  00105C  6F85               	movwf	___awdiv@sign& (0+255),b
  6785  00105E                     l4585:
  6786                           
  6787                           ; BSR set to: 0
  6788  00105E  0100               	movlb	0	; () banked
  6789  001060  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6790  001062  D008               	goto	l4591
  6791                           
  6792                           ; BSR set to: 0
  6793  001064  0100               	movlb	0	; () banked
  6794  001066  6D80               	negf	___awdiv@dividend& (0+255),b
  6795  001068  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6796  00106A  B0D8               	btfsc	status,0,c
  6797  00106C  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6798                           
  6799                           ; BSR set to: 0
  6800  00106E  0E01               	movlw	1
  6801  001070  0100               	movlb	0	; () banked
  6802  001072  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  6803  001074                     l4591:
  6804                           
  6805                           ; BSR set to: 0
  6806  001074  0E00               	movlw	0
  6807  001076  0100               	movlb	0	; () banked
  6808  001078  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  6809  00107A  0E00               	movlw	0
  6810  00107C  6F86               	movwf	___awdiv@quotient& (0+255),b
  6811                           
  6812                           ; BSR set to: 0
  6813  00107E  0100               	movlb	0	; () banked
  6814  001080  5182               	movf	___awdiv@divisor& (0+255),w,b
  6815  001082  0100               	movlb	0	; () banked
  6816  001084  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6817  001086  B4D8               	btfsc	status,2,c
  6818  001088  D02C               	goto	l4613
  6819                           
  6820                           ; BSR set to: 0
  6821  00108A  0E01               	movlw	1
  6822  00108C  0100               	movlb	0	; () banked
  6823  00108E  6F84               	movwf	___awdiv@counter& (0+255),b
  6824  001090  D006               	goto	l4599
  6825  001092                     l4597:
  6826                           
  6827                           ; BSR set to: 0
  6828  001092  0100               	movlb	0	; () banked
  6829  001094  90D8               	bcf	status,0,c
  6830  001096  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  6831  001098  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6832  00109A  0100               	movlb	0	; () banked
  6833  00109C  2B84               	incf	___awdiv@counter& (0+255),f,b
  6834  00109E                     l4599:
  6835                           
  6836                           ; BSR set to: 0
  6837  00109E  0100               	movlb	0	; () banked
  6838  0010A0  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6839  0010A2  D7F7               	goto	l4597
  6840  0010A4                     l4601:
  6841                           
  6842                           ; BSR set to: 0
  6843  0010A4  0100               	movlb	0	; () banked
  6844  0010A6  90D8               	bcf	status,0,c
  6845  0010A8  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  6846  0010AA  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6847                           
  6848                           ; BSR set to: 0
  6849  0010AC  0100               	movlb	0	; () banked
  6850  0010AE  5182               	movf	___awdiv@divisor& (0+255),w,b
  6851  0010B0  0100               	movlb	0	; () banked
  6852  0010B2  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  6853  0010B4  0100               	movlb	0	; () banked
  6854  0010B6  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6855  0010B8  0100               	movlb	0	; () banked
  6856  0010BA  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6857  0010BC  A0D8               	btfss	status,0,c
  6858  0010BE  D00A               	goto	l4609
  6859                           
  6860                           ; BSR set to: 0
  6861  0010C0  0100               	movlb	0	; () banked
  6862  0010C2  5182               	movf	___awdiv@divisor& (0+255),w,b
  6863  0010C4  0100               	movlb	0	; () banked
  6864  0010C6  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  6865  0010C8  0100               	movlb	0	; () banked
  6866  0010CA  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6867  0010CC  0100               	movlb	0	; () banked
  6868  0010CE  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6869                           
  6870                           ; BSR set to: 0
  6871  0010D0  0100               	movlb	0	; () banked
  6872  0010D2  8186               	bsf	___awdiv@quotient& (0+255),0,b
  6873  0010D4                     l4609:
  6874                           
  6875                           ; BSR set to: 0
  6876  0010D4  0100               	movlb	0	; () banked
  6877  0010D6  90D8               	bcf	status,0,c
  6878  0010D8  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6879  0010DA  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  6880                           
  6881                           ; BSR set to: 0
  6882  0010DC  0100               	movlb	0	; () banked
  6883  0010DE  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  6884  0010E0  D7E1               	goto	l4601
  6885  0010E2                     l4613:
  6886                           
  6887                           ; BSR set to: 0
  6888  0010E2  0100               	movlb	0	; () banked
  6889  0010E4  5185               	movf	___awdiv@sign& (0+255),w,b
  6890  0010E6  0100               	movlb	0	; () banked
  6891  0010E8  B4D8               	btfsc	status,2,c
  6892  0010EA  D005               	goto	l4617
  6893                           
  6894                           ; BSR set to: 0
  6895  0010EC  0100               	movlb	0	; () banked
  6896  0010EE  6D86               	negf	___awdiv@quotient& (0+255),b
  6897  0010F0  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6898  0010F2  B0D8               	btfsc	status,0,c
  6899  0010F4  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6900  0010F6                     l4617:
  6901                           
  6902                           ; BSR set to: 0
  6903  0010F6  C086  F080         	movff	___awdiv@quotient,?___awdiv
  6904  0010FA  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  6905  0010FE  0012               	return	
  6906  001100                     __end_of___awdiv:
  6907                           	opt stack 0
  6908                           tosu	equ	0xFFF
  6909                           tosh	equ	0xFFE
  6910                           tosl	equ	0xFFD
  6911                           pclath	equ	0xFFA
  6912                           tblptru	equ	0xFF8
  6913                           tblptrh	equ	0xFF7
  6914                           tblptrl	equ	0xFF6
  6915                           tablat	equ	0xFF5
  6916                           prodh	equ	0xFF4
  6917                           prodl	equ	0xFF3
  6918                           intcon	equ	0xFF2
  6919                           intcon3	equ	0xFF0
  6920                           postinc0	equ	0xFEE
  6921                           wreg	equ	0xFE8
  6922                           indf2	equ	0xFDF
  6923                           postinc2	equ	0xFDE
  6924                           postdec2	equ	0xFDD
  6925                           fsr2h	equ	0xFDA
  6926                           fsr2l	equ	0xFD9
  6927                           status	equ	0xFD8
  6928                           
  6929 ;; *************** function _I2C_Master_Write *****************
  6930 ;; Defined at:
  6931 ;;		line 57 in file "I2C.c"
  6932 ;; Parameters:    Size  Location     Type
  6933 ;;  d               2    1[BANK0 ] unsigned int 
  6934 ;; Auto vars:     Size  Location     Type
  6935 ;;		None
  6936 ;; Return value:  Size  Location     Type
  6937 ;;                  1    wreg      void 
  6938 ;; Registers used:
  6939 ;;		wreg, status,2, status,0, cstack
  6940 ;; Tracked objects:
  6941 ;;		On entry : 0/0
  6942 ;;		On exit  : 0/0
  6943 ;;		Unchanged: 0/0
  6944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6945 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6948 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6949 ;;Total ram usage:        2 bytes
  6950 ;; Hardware stack levels used:    1
  6951 ;; Hardware stack levels required when called:    6
  6952 ;; This function calls:
  6953 ;;		_I2C_Master_Wait
  6954 ;; This function is called by:
  6955 ;;		_set_time
  6956 ;;		_standby
  6957 ;;		_done_sorting
  6958 ;; This function uses a non-reentrant model
  6959 ;;
  6960                           
  6961                           	psect	text45
  6962  001DAA                     __ptext45:
  6963                           	opt stack 0
  6964  001DAA                     _I2C_Master_Write:
  6965                           	opt stack 23
  6966                           
  6967                           ;I2C.c: 59: I2C_Master_Wait();
  6968                           
  6969                           ; BSR set to: 0
  6970                           ;incstack = 0
  6971  001DAA  EC6F  F00E         	call	_I2C_Master_Wait	;wreg free
  6972                           
  6973                           ;I2C.c: 60: SSPBUF = d;
  6974  001DAE  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  6975  001DB2  0012               	return		;funcret
  6976  001DB4                     __end_of_I2C_Master_Write:
  6977                           	opt stack 0
  6978                           tosu	equ	0xFFF
  6979                           tosh	equ	0xFFE
  6980                           tosl	equ	0xFFD
  6981                           pclath	equ	0xFFA
  6982                           tblptru	equ	0xFF8
  6983                           tblptrh	equ	0xFF7
  6984                           tblptrl	equ	0xFF6
  6985                           tablat	equ	0xFF5
  6986                           prodh	equ	0xFF4
  6987                           prodl	equ	0xFF3
  6988                           intcon	equ	0xFF2
  6989                           intcon3	equ	0xFF0
  6990                           postinc0	equ	0xFEE
  6991                           wreg	equ	0xFE8
  6992                           indf2	equ	0xFDF
  6993                           postinc2	equ	0xFDE
  6994                           postdec2	equ	0xFDD
  6995                           fsr2h	equ	0xFDA
  6996                           fsr2l	equ	0xFD9
  6997                           status	equ	0xFD8
  6998                           
  6999 ;; *************** function _I2C_Master_Stop *****************
  7000 ;; Defined at:
  7001 ;;		line 51 in file "I2C.c"
  7002 ;; Parameters:    Size  Location     Type
  7003 ;;		None
  7004 ;; Auto vars:     Size  Location     Type
  7005 ;;		None
  7006 ;; Return value:  Size  Location     Type
  7007 ;;                  1    wreg      void 
  7008 ;; Registers used:
  7009 ;;		wreg, status,2, status,0, cstack
  7010 ;; Tracked objects:
  7011 ;;		On entry : 0/0
  7012 ;;		On exit  : 0/0
  7013 ;;		Unchanged: 0/0
  7014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7019 ;;Total ram usage:        0 bytes
  7020 ;; Hardware stack levels used:    1
  7021 ;; Hardware stack levels required when called:    6
  7022 ;; This function calls:
  7023 ;;		_I2C_Master_Wait
  7024 ;; This function is called by:
  7025 ;;		_set_time
  7026 ;;		_standby
  7027 ;;		_done_sorting
  7028 ;; This function uses a non-reentrant model
  7029 ;;
  7030                           
  7031                           	psect	text46
  7032  001DB4                     __ptext46:
  7033                           	opt stack 0
  7034  001DB4                     _I2C_Master_Stop:
  7035                           	opt stack 23
  7036                           
  7037                           ;I2C.c: 53: I2C_Master_Wait();
  7038                           
  7039                           ;incstack = 0
  7040  001DB4  EC6F  F00E         	call	_I2C_Master_Wait	;wreg free
  7041                           
  7042                           ;I2C.c: 54: PEN = 1;
  7043  001DB8  84C5               	bsf	4037,2,c	;volatile
  7044  001DBA  0012               	return		;funcret
  7045  001DBC                     __end_of_I2C_Master_Stop:
  7046                           	opt stack 0
  7047                           tosu	equ	0xFFF
  7048                           tosh	equ	0xFFE
  7049                           tosl	equ	0xFFD
  7050                           pclath	equ	0xFFA
  7051                           tblptru	equ	0xFF8
  7052                           tblptrh	equ	0xFF7
  7053                           tblptrl	equ	0xFF6
  7054                           tablat	equ	0xFF5
  7055                           prodh	equ	0xFF4
  7056                           prodl	equ	0xFF3
  7057                           intcon	equ	0xFF2
  7058                           intcon3	equ	0xFF0
  7059                           postinc0	equ	0xFEE
  7060                           wreg	equ	0xFE8
  7061                           indf2	equ	0xFDF
  7062                           postinc2	equ	0xFDE
  7063                           postdec2	equ	0xFDD
  7064                           fsr2h	equ	0xFDA
  7065                           fsr2l	equ	0xFD9
  7066                           status	equ	0xFD8
  7067                           
  7068 ;; *************** function _I2C_Master_Start *****************
  7069 ;; Defined at:
  7070 ;;		line 39 in file "I2C.c"
  7071 ;; Parameters:    Size  Location     Type
  7072 ;;		None
  7073 ;; Auto vars:     Size  Location     Type
  7074 ;;		None
  7075 ;; Return value:  Size  Location     Type
  7076 ;;                  1    wreg      void 
  7077 ;; Registers used:
  7078 ;;		wreg, status,2, status,0, cstack
  7079 ;; Tracked objects:
  7080 ;;		On entry : 0/0
  7081 ;;		On exit  : 0/0
  7082 ;;		Unchanged: 0/0
  7083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7088 ;;Total ram usage:        0 bytes
  7089 ;; Hardware stack levels used:    1
  7090 ;; Hardware stack levels required when called:    6
  7091 ;; This function calls:
  7092 ;;		_I2C_Master_Wait
  7093 ;; This function is called by:
  7094 ;;		_set_time
  7095 ;;		_standby
  7096 ;;		_done_sorting
  7097 ;; This function uses a non-reentrant model
  7098 ;;
  7099                           
  7100                           	psect	text47
  7101  001DBC                     __ptext47:
  7102                           	opt stack 0
  7103  001DBC                     _I2C_Master_Start:
  7104                           	opt stack 23
  7105                           
  7106                           ;I2C.c: 41: I2C_Master_Wait();
  7107                           
  7108                           ;incstack = 0
  7109  001DBC  EC6F  F00E         	call	_I2C_Master_Wait	;wreg free
  7110                           
  7111                           ;I2C.c: 42: SEN = 1;
  7112  001DC0  80C5               	bsf	4037,0,c	;volatile
  7113  001DC2  0012               	return		;funcret
  7114  001DC4                     __end_of_I2C_Master_Start:
  7115                           	opt stack 0
  7116                           tosu	equ	0xFFF
  7117                           tosh	equ	0xFFE
  7118                           tosl	equ	0xFFD
  7119                           pclath	equ	0xFFA
  7120                           tblptru	equ	0xFF8
  7121                           tblptrh	equ	0xFF7
  7122                           tblptrl	equ	0xFF6
  7123                           tablat	equ	0xFF5
  7124                           prodh	equ	0xFF4
  7125                           prodl	equ	0xFF3
  7126                           intcon	equ	0xFF2
  7127                           intcon3	equ	0xFF0
  7128                           postinc0	equ	0xFEE
  7129                           wreg	equ	0xFE8
  7130                           indf2	equ	0xFDF
  7131                           postinc2	equ	0xFDE
  7132                           postdec2	equ	0xFDD
  7133                           fsr2h	equ	0xFDA
  7134                           fsr2l	equ	0xFD9
  7135                           status	equ	0xFD8
  7136                           
  7137 ;; *************** function _I2C_Master_Read *****************
  7138 ;; Defined at:
  7139 ;;		line 63 in file "I2C.c"
  7140 ;; Parameters:    Size  Location     Type
  7141 ;;  a               1    wreg     unsigned char 
  7142 ;; Auto vars:     Size  Location     Type
  7143 ;;  a               1    1[BANK0 ] unsigned char 
  7144 ;;  temp            1    2[BANK0 ] unsigned char 
  7145 ;; Return value:  Size  Location     Type
  7146 ;;                  1    wreg      unsigned char 
  7147 ;; Registers used:
  7148 ;;		wreg, status,2, status,0, cstack
  7149 ;; Tracked objects:
  7150 ;;		On entry : 0/0
  7151 ;;		On exit  : 0/0
  7152 ;;		Unchanged: 0/0
  7153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7155 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7157 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7158 ;;Total ram usage:        2 bytes
  7159 ;; Hardware stack levels used:    1
  7160 ;; Hardware stack levels required when called:    6
  7161 ;; This function calls:
  7162 ;;		_I2C_Master_Wait
  7163 ;; This function is called by:
  7164 ;;		_standby
  7165 ;;		_done_sorting
  7166 ;; This function uses a non-reentrant model
  7167 ;;
  7168                           
  7169                           	psect	text48
  7170  0019EC                     __ptext48:
  7171                           	opt stack 0
  7172  0019EC                     _I2C_Master_Read:
  7173                           	opt stack 23
  7174                           
  7175                           ;incstack = 0
  7176                           ;I2C_Master_Read@a stored from wreg
  7177  0019EC  0100               	movlb	0	; () banked
  7178  0019EE  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  7179                           
  7180                           ;I2C.c: 65: unsigned char temp;
  7181                           ;I2C.c: 66: I2C_Master_Wait();
  7182  0019F0  EC6F  F00E         	call	_I2C_Master_Wait	;wreg free
  7183                           
  7184                           ;I2C.c: 67: RCEN = 1;
  7185  0019F4  86C5               	bsf	4037,3,c	;volatile
  7186                           
  7187                           ;I2C.c: 68: I2C_Master_Wait();
  7188  0019F6  EC6F  F00E         	call	_I2C_Master_Wait	;wreg free
  7189                           
  7190                           ;I2C.c: 69: temp = SSPBUF;
  7191  0019FA  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  7192                           
  7193                           ;I2C.c: 70: I2C_Master_Wait();
  7194  0019FE  EC6F  F00E         	call	_I2C_Master_Wait	;wreg free
  7195                           
  7196                           ;I2C.c: 71: ACKDT = (a)?0:1;
  7197  001A02  0100               	movlb	0	; () banked
  7198  001A04  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  7199  001A06  0100               	movlb	0	; () banked
  7200  001A08  A4D8               	btfss	status,2,c
  7201  001A0A  D002               	goto	u3660
  7202  001A0C  8AC5               	bsf	4037,5,c	;volatile
  7203  001A0E  D001               	goto	l4471
  7204  001A10                     u3660:
  7205  001A10  9AC5               	bcf	4037,5,c	;volatile
  7206  001A12                     l4471:
  7207                           
  7208                           ;I2C.c: 72: ACKEN = 1;
  7209  001A12  88C5               	bsf	4037,4,c	;volatile
  7210                           
  7211                           ;I2C.c: 73: return temp;
  7212  001A14  0100               	movlb	0	; () banked
  7213  001A16  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  7214  001A18  0012               	return	
  7215  001A1A                     __end_of_I2C_Master_Read:
  7216                           	opt stack 0
  7217                           tosu	equ	0xFFF
  7218                           tosh	equ	0xFFE
  7219                           tosl	equ	0xFFD
  7220                           pclath	equ	0xFFA
  7221                           tblptru	equ	0xFF8
  7222                           tblptrh	equ	0xFF7
  7223                           tblptrl	equ	0xFF6
  7224                           tablat	equ	0xFF5
  7225                           prodh	equ	0xFF4
  7226                           prodl	equ	0xFF3
  7227                           intcon	equ	0xFF2
  7228                           intcon3	equ	0xFF0
  7229                           postinc0	equ	0xFEE
  7230                           wreg	equ	0xFE8
  7231                           indf2	equ	0xFDF
  7232                           postinc2	equ	0xFDE
  7233                           postdec2	equ	0xFDD
  7234                           fsr2h	equ	0xFDA
  7235                           fsr2l	equ	0xFD9
  7236                           status	equ	0xFD8
  7237                           
  7238 ;; *************** function _I2C_Master_Wait *****************
  7239 ;; Defined at:
  7240 ;;		line 34 in file "I2C.c"
  7241 ;; Parameters:    Size  Location     Type
  7242 ;;		None
  7243 ;; Auto vars:     Size  Location     Type
  7244 ;;		None
  7245 ;; Return value:  Size  Location     Type
  7246 ;;                  1    wreg      void 
  7247 ;; Registers used:
  7248 ;;		wreg, status,2, status,0
  7249 ;; Tracked objects:
  7250 ;;		On entry : 0/0
  7251 ;;		On exit  : 0/0
  7252 ;;		Unchanged: 0/0
  7253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7256 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7257 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7258 ;;Total ram usage:        1 bytes
  7259 ;; Hardware stack levels used:    1
  7260 ;; Hardware stack levels required when called:    5
  7261 ;; This function calls:
  7262 ;;		Nothing
  7263 ;; This function is called by:
  7264 ;;		_I2C_Master_Start
  7265 ;;		_I2C_Master_Stop
  7266 ;;		_I2C_Master_Write
  7267 ;;		_I2C_Master_Read
  7268 ;;		_I2C_Master_RepeatedStart
  7269 ;; This function uses a non-reentrant model
  7270 ;;
  7271                           
  7272                           	psect	text49
  7273  001CDE                     __ptext49:
  7274                           	opt stack 0
  7275  001CDE                     _I2C_Master_Wait:
  7276                           	opt stack 23
  7277  001CDE                     l126:
  7278  001CDE  B4C7               	btfsc	4039,2,c	;volatile
  7279  001CE0  D7FE               	goto	l126
  7280  001CE2  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  7281  001CE6  0E1F               	movlw	31
  7282  001CE8  0100               	movlb	0	; () banked
  7283  001CEA  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  7284  001CEC  B4D8               	btfsc	status,2,c
  7285  001CEE  0012               	return	
  7286  001CF0  D7F6               	goto	l126
  7287  001CF2                     __end_of_I2C_Master_Wait:
  7288                           	opt stack 0
  7289                           tosu	equ	0xFFF
  7290                           tosh	equ	0xFFE
  7291                           tosl	equ	0xFFD
  7292                           pclath	equ	0xFFA
  7293                           tblptru	equ	0xFF8
  7294                           tblptrh	equ	0xFF7
  7295                           tblptrl	equ	0xFF6
  7296                           tablat	equ	0xFF5
  7297                           prodh	equ	0xFF4
  7298                           prodl	equ	0xFF3
  7299                           intcon	equ	0xFF2
  7300                           intcon3	equ	0xFF0
  7301                           postinc0	equ	0xFEE
  7302                           wreg	equ	0xFE8
  7303                           indf2	equ	0xFDF
  7304                           postinc2	equ	0xFDE
  7305                           postdec2	equ	0xFDD
  7306                           fsr2h	equ	0xFDA
  7307                           fsr2l	equ	0xFD9
  7308                           status	equ	0xFD8
  7309                           
  7310 ;; *************** function _I2C_Master_Init *****************
  7311 ;; Defined at:
  7312 ;;		line 23 in file "I2C.c"
  7313 ;; Parameters:    Size  Location     Type
  7314 ;;  c               4   13[BANK0 ] const unsigned long 
  7315 ;; Auto vars:     Size  Location     Type
  7316 ;;		None
  7317 ;; Return value:  Size  Location     Type
  7318 ;;                  1    wreg      void 
  7319 ;; Registers used:
  7320 ;;		wreg, status,2, status,0, cstack
  7321 ;; Tracked objects:
  7322 ;;		On entry : 0/0
  7323 ;;		On exit  : 0/0
  7324 ;;		Unchanged: 0/0
  7325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7326 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7328 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7329 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7330 ;;Total ram usage:        8 bytes
  7331 ;; Hardware stack levels used:    1
  7332 ;; Hardware stack levels required when called:    6
  7333 ;; This function calls:
  7334 ;;		___lldiv
  7335 ;; This function is called by:
  7336 ;;		_main
  7337 ;; This function uses a non-reentrant model
  7338 ;;
  7339                           
  7340                           	psect	text50
  7341  001696                     __ptext50:
  7342                           	opt stack 0
  7343  001696                     _I2C_Master_Init:
  7344                           	opt stack 24
  7345                           
  7346                           ;I2C.c: 26: SSPSTAT = 0b00000000;
  7347                           
  7348                           ; BSR set to: 0
  7349                           ;incstack = 0
  7350  001696  0E00               	movlw	0
  7351  001698  6EC7               	movwf	4039,c	;volatile
  7352                           
  7353                           ;I2C.c: 27: SSPCON1 = 0b00101000;
  7354  00169A  0E28               	movlw	40
  7355  00169C  6EC6               	movwf	4038,c	;volatile
  7356                           
  7357                           ;I2C.c: 28: SSPCON2 = 0b00000000;
  7358  00169E  0E00               	movlw	0
  7359  0016A0  6EC5               	movwf	4037,c	;volatile
  7360                           
  7361                           ;I2C.c: 29: SSPADD = (10000000/(4*c))-1;
  7362  0016A2  0E80               	movlw	128
  7363  0016A4  0100               	movlb	0	; () banked
  7364  0016A6  6F80               	movwf	___lldiv@dividend& (0+255),b
  7365  0016A8  0E96               	movlw	150
  7366  0016AA  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  7367  0016AC  0E98               	movlw	152
  7368  0016AE  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  7369  0016B0  0E00               	movlw	0
  7370  0016B2  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  7371  0016B4  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  7372  0016B8  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  7373  0016BC  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  7374  0016C0  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  7375  0016C4  0E02               	movlw	2
  7376  0016C6                     u3855:
  7377  0016C6  90D8               	bcf	status,0,c
  7378  0016C8  0100               	movlb	0	; () banked
  7379  0016CA  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  7380  0016CC  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  7381  0016CE  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  7382  0016D0  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  7383  0016D2  2EE8               	decfsz	wreg,f,c
  7384  0016D4  D7F8               	goto	u3855
  7385  0016D6  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  7386  0016DA  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  7387  0016DE  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  7388  0016E2  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  7389  0016E6  EC80  F008         	call	___lldiv	;wreg free
  7390  0016EA  0100               	movlb	0	; () banked
  7391  0016EC  0580               	decf	?___lldiv& (0+255),w,b
  7392  0016EE  6EC8               	movwf	4040,c	;volatile
  7393                           
  7394                           ; BSR set to: 0
  7395                           ;I2C.c: 30: TRISC3 = 1;
  7396  0016F0  8694               	bsf	3988,3,c	;volatile
  7397                           
  7398                           ; BSR set to: 0
  7399                           ;I2C.c: 31: TRISC4 = 1;
  7400  0016F2  8894               	bsf	3988,4,c	;volatile
  7401                           
  7402                           ; BSR set to: 0
  7403  0016F4  0012               	return		;funcret
  7404  0016F6                     __end_of_I2C_Master_Init:
  7405                           	opt stack 0
  7406                           tosu	equ	0xFFF
  7407                           tosh	equ	0xFFE
  7408                           tosl	equ	0xFFD
  7409                           pclath	equ	0xFFA
  7410                           tblptru	equ	0xFF8
  7411                           tblptrh	equ	0xFF7
  7412                           tblptrl	equ	0xFF6
  7413                           tablat	equ	0xFF5
  7414                           prodh	equ	0xFF4
  7415                           prodl	equ	0xFF3
  7416                           intcon	equ	0xFF2
  7417                           intcon3	equ	0xFF0
  7418                           postinc0	equ	0xFEE
  7419                           wreg	equ	0xFE8
  7420                           indf2	equ	0xFDF
  7421                           postinc2	equ	0xFDE
  7422                           postdec2	equ	0xFDD
  7423                           fsr2h	equ	0xFDA
  7424                           fsr2l	equ	0xFD9
  7425                           status	equ	0xFD8
  7426                           
  7427 ;; *************** function ___lldiv *****************
  7428 ;; Defined at:
  7429 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lldiv.c"
  7430 ;; Parameters:    Size  Location     Type
  7431 ;;  dividend        4    0[BANK0 ] unsigned long 
  7432 ;;  divisor         4    4[BANK0 ] unsigned long 
  7433 ;; Auto vars:     Size  Location     Type
  7434 ;;  quotient        4    8[BANK0 ] unsigned long 
  7435 ;;  counter         1   12[BANK0 ] unsigned char 
  7436 ;; Return value:  Size  Location     Type
  7437 ;;                  4    0[BANK0 ] unsigned long 
  7438 ;; Registers used:
  7439 ;;		wreg, status,2, status,0
  7440 ;; Tracked objects:
  7441 ;;		On entry : 0/0
  7442 ;;		On exit  : 0/0
  7443 ;;		Unchanged: 0/0
  7444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7445 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7446 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7448 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7449 ;;Total ram usage:       13 bytes
  7450 ;; Hardware stack levels used:    1
  7451 ;; Hardware stack levels required when called:    5
  7452 ;; This function calls:
  7453 ;;		Nothing
  7454 ;; This function is called by:
  7455 ;;		_I2C_Master_Init
  7456 ;; This function uses a non-reentrant model
  7457 ;;
  7458                           
  7459                           	psect	text51
  7460  001100                     __ptext51:
  7461                           	opt stack 0
  7462  001100                     ___lldiv:
  7463                           	opt stack 24
  7464                           
  7465                           ; BSR set to: 0
  7466                           ;incstack = 0
  7467  001100  0E00               	movlw	0
  7468  001102  0100               	movlb	0	; () banked
  7469  001104  6F88               	movwf	___lldiv@quotient& (0+255),b
  7470  001106  0E00               	movlw	0
  7471  001108  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  7472  00110A  0E00               	movlw	0
  7473  00110C  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7474  00110E  0E00               	movlw	0
  7475  001110  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7476                           
  7477                           ; BSR set to: 0
  7478  001112  0100               	movlb	0	; () banked
  7479  001114  5184               	movf	___lldiv@divisor& (0+255),w,b
  7480  001116  0100               	movlb	0	; () banked
  7481  001118  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7482  00111A  0100               	movlb	0	; () banked
  7483  00111C  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7484  00111E  0100               	movlb	0	; () banked
  7485  001120  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7486  001122  B4D8               	btfsc	status,2,c
  7487  001124  D042               	goto	l1053
  7488                           
  7489                           ; BSR set to: 0
  7490  001126  0E01               	movlw	1
  7491  001128  0100               	movlb	0	; () banked
  7492  00112A  6F8C               	movwf	___lldiv@counter& (0+255),b
  7493  00112C  D008               	goto	l4629
  7494  00112E                     l4627:
  7495                           
  7496                           ; BSR set to: 0
  7497  00112E  0100               	movlb	0	; () banked
  7498  001130  90D8               	bcf	status,0,c
  7499  001132  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  7500  001134  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7501  001136  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7502  001138  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7503  00113A  0100               	movlb	0	; () banked
  7504  00113C  2B8C               	incf	___lldiv@counter& (0+255),f,b
  7505  00113E                     l4629:
  7506                           
  7507                           ; BSR set to: 0
  7508  00113E  0100               	movlb	0	; () banked
  7509  001140  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7510  001142  D7F5               	goto	l4627
  7511  001144                     l4631:
  7512                           
  7513                           ; BSR set to: 0
  7514  001144  0100               	movlb	0	; () banked
  7515  001146  90D8               	bcf	status,0,c
  7516  001148  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  7517  00114A  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7518  00114C  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7519  00114E  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7520                           
  7521                           ; BSR set to: 0
  7522  001150  0100               	movlb	0	; () banked
  7523  001152  5184               	movf	___lldiv@divisor& (0+255),w,b
  7524  001154  0100               	movlb	0	; () banked
  7525  001156  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  7526  001158  0100               	movlb	0	; () banked
  7527  00115A  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7528  00115C  0100               	movlb	0	; () banked
  7529  00115E  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7530  001160  0100               	movlb	0	; () banked
  7531  001162  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7532  001164  0100               	movlb	0	; () banked
  7533  001166  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7534  001168  0100               	movlb	0	; () banked
  7535  00116A  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7536  00116C  0100               	movlb	0	; () banked
  7537  00116E  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7538  001170  A0D8               	btfss	status,0,c
  7539  001172  D012               	goto	l4639
  7540                           
  7541                           ; BSR set to: 0
  7542  001174  0100               	movlb	0	; () banked
  7543  001176  5184               	movf	___lldiv@divisor& (0+255),w,b
  7544  001178  0100               	movlb	0	; () banked
  7545  00117A  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  7546  00117C  0100               	movlb	0	; () banked
  7547  00117E  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7548  001180  0100               	movlb	0	; () banked
  7549  001182  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7550  001184  0100               	movlb	0	; () banked
  7551  001186  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7552  001188  0100               	movlb	0	; () banked
  7553  00118A  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7554  00118C  0100               	movlb	0	; () banked
  7555  00118E  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7556  001190  0100               	movlb	0	; () banked
  7557  001192  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7558                           
  7559                           ; BSR set to: 0
  7560  001194  0100               	movlb	0	; () banked
  7561  001196  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7562  001198                     l4639:
  7563                           
  7564                           ; BSR set to: 0
  7565  001198  0100               	movlb	0	; () banked
  7566  00119A  90D8               	bcf	status,0,c
  7567  00119C  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7568  00119E  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7569  0011A0  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7570  0011A2  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7571                           
  7572                           ; BSR set to: 0
  7573  0011A4  0100               	movlb	0	; () banked
  7574  0011A6  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7575  0011A8  D7CD               	goto	l4631
  7576  0011AA                     l1053:
  7577                           
  7578                           ; BSR set to: 0
  7579  0011AA  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7580  0011AE  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7581  0011B2  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7582  0011B6  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7583                           
  7584                           ; BSR set to: 0
  7585  0011BA  0012               	return		;funcret
  7586  0011BC                     __end_of___lldiv:
  7587                           	opt stack 0
  7588                           tosu	equ	0xFFF
  7589                           tosh	equ	0xFFE
  7590                           tosl	equ	0xFFD
  7591                           pclath	equ	0xFFA
  7592                           tblptru	equ	0xFF8
  7593                           tblptrh	equ	0xFF7
  7594                           tblptrl	equ	0xFF6
  7595                           tablat	equ	0xFF5
  7596                           prodh	equ	0xFF4
  7597                           prodl	equ	0xFF3
  7598                           intcon	equ	0xFF2
  7599                           intcon3	equ	0xFF0
  7600                           postinc0	equ	0xFEE
  7601                           wreg	equ	0xFE8
  7602                           indf2	equ	0xFDF
  7603                           postinc2	equ	0xFDE
  7604                           postdec2	equ	0xFDD
  7605                           fsr2h	equ	0xFDA
  7606                           fsr2l	equ	0xFD9
  7607                           status	equ	0xFD8
  7608                           
  7609 ;; *************** function _keypressed *****************
  7610 ;; Defined at:
  7611 ;;		line 23 in file "Interrupt_ISR.c"
  7612 ;; Parameters:    Size  Location     Type
  7613 ;;		None
  7614 ;; Auto vars:     Size  Location     Type
  7615 ;;  i               1   60[COMRAM] unsigned char 
  7616 ;;  i               1   59[COMRAM] unsigned char 
  7617 ;;  i               1   58[COMRAM] unsigned char 
  7618 ;;  i               1   57[COMRAM] unsigned char 
  7619 ;;  i               1   56[COMRAM] unsigned char 
  7620 ;;  i               1   55[COMRAM] unsigned char 
  7621 ;;  i               1   54[COMRAM] unsigned char 
  7622 ;;  i               1   53[COMRAM] unsigned char 
  7623 ;;  i               1   52[COMRAM] unsigned char 
  7624 ;;  i               1   51[COMRAM] unsigned char 
  7625 ;;  i               1   50[COMRAM] unsigned char 
  7626 ;;  i               1   49[COMRAM] unsigned char 
  7627 ;;  keypress_tem    1   61[COMRAM] unsigned char 
  7628 ;;  keypress        1   48[COMRAM] unsigned char 
  7629 ;; Return value:  Size  Location     Type
  7630 ;;                  1    wreg      void 
  7631 ;; Registers used:
  7632 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7633 ;; Tracked objects:
  7634 ;;		On entry : 0/0
  7635 ;;		On exit  : 0/0
  7636 ;;		Unchanged: 0/0
  7637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7639 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7640 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7641 ;;      Totals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7642 ;;Total ram usage:       30 bytes
  7643 ;; Hardware stack levels used:    1
  7644 ;; Hardware stack levels required when called:    4
  7645 ;; This function calls:
  7646 ;;		_op_time
  7647 ;;		_pop_results
  7648 ;;		_tin_results
  7649 ;;		_tot_sorted
  7650 ;;		i2_initLCD
  7651 ;;		i2_lcdInst
  7652 ;;		i2_printf
  7653 ;; This function is called by:
  7654 ;;		Interrupt level 2
  7655 ;; This function uses a non-reentrant model
  7656 ;;
  7657                           
  7658                           	psect	intcode
  7659  000008                     __pintcode:
  7660                           	opt stack 0
  7661  000008                     _keypressed:
  7662                           	opt stack 21
  7663                           
  7664                           ; BSR set to: 0
  7665                           ;incstack = 0
  7666  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7667  00000A  ED93  F003         	call	int_func,f	;refresh shadow registers
  7668                           tosu	equ	0xFFF
  7669                           tosh	equ	0xFFE
  7670                           tosl	equ	0xFFD
  7671                           pclath	equ	0xFFA
  7672                           tblptru	equ	0xFF8
  7673                           tblptrh	equ	0xFF7
  7674                           tblptrl	equ	0xFF6
  7675                           tablat	equ	0xFF5
  7676                           prodh	equ	0xFF4
  7677                           prodl	equ	0xFF3
  7678                           intcon	equ	0xFF2
  7679                           intcon3	equ	0xFF0
  7680                           postinc0	equ	0xFEE
  7681                           wreg	equ	0xFE8
  7682                           indf2	equ	0xFDF
  7683                           postinc2	equ	0xFDE
  7684                           postdec2	equ	0xFDD
  7685                           fsr2h	equ	0xFDA
  7686                           fsr2l	equ	0xFD9
  7687                           status	equ	0xFD8
  7688                           
  7689                           	psect	intcode_body
  7690  000726                     __pintcode_body:
  7691                           	opt stack 21
  7692  000726                     int_func:
  7693                           	opt stack 21
  7694  000726  0006               	pop		; remove dummy address from shadow register refresh
  7695  000728  CFFA F023          	movff	pclath,??_keypressed+2
  7696  00072C  CFFB F024          	movff	pclatu,??_keypressed+3
  7697  000730  CFE9 F025          	movff	fsr0l,??_keypressed+4
  7698  000734  CFEA F026          	movff	fsr0h,??_keypressed+5
  7699  000738  CFE1 F027          	movff	fsr1l,??_keypressed+6
  7700  00073C  CFE2 F028          	movff	fsr1h,??_keypressed+7
  7701  000740  CFD9 F029          	movff	fsr2l,??_keypressed+8
  7702  000744  CFDA F02A          	movff	fsr2h,??_keypressed+9
  7703  000748  CFF3 F02B          	movff	prodl,??_keypressed+10
  7704  00074C  CFF4 F02C          	movff	prodh,??_keypressed+11
  7705  000750  CFF6 F02D          	movff	tblptrl,??_keypressed+12
  7706  000754  CFF7 F02E          	movff	tblptrh,??_keypressed+13
  7707  000758  CFF8 F02F          	movff	tblptru,??_keypressed+14
  7708  00075C  CFF5 F030          	movff	tablat,??_keypressed+15
  7709                           
  7710                           ;Interrupt_ISR.c: 25: if(INT1IF){
  7711  000760  A0F0               	btfss	intcon3,0,c	;volatile
  7712  000762  D12F               	goto	i2l208
  7713                           
  7714                           ;Interrupt_ISR.c: 26: lcdInst(0b11000000);;
  7715  000764  0EC0               	movlw	192
  7716  000766  ECCF  F00E         	call	i2_lcdInst
  7717                           
  7718                           ;Interrupt_ISR.c: 27: unsigned char keypress = (PORTB & 0xF0) >> 4;
  7719  00076A  3881               	swapf	3969,w,c	;volatile
  7720  00076C  0B0F               	andlw	15
  7721  00076E  0B0F               	andlw	15
  7722  000770  6E31               	movwf	keypressed@keypress,c
  7723                           
  7724                           ;Interrupt_ISR.c: 29: unsigned char keypress_temp = keys[keypress];
  7725  000772  5031               	movf	keypressed@keypress,w,c
  7726  000774  0D01               	mullw	1
  7727  000776  0EE9               	movlw	low _keys
  7728  000778  24F3               	addwf	prodl,w,c
  7729  00077A  6EF6               	movwf	tblptrl,c
  7730  00077C  0EFE               	movlw	high _keys
  7731  00077E  20F4               	addwfc	prodh,w,c
  7732  000780  6EF7               	movwf	tblptrh,c
  7733  000782                     	if	1	;There are 3 active tblptr bytes
  7734  000782  6AF8               	clrf	tblptru,c
  7735  000784  0E00               	movlw	low (__mediumconst shr (0+16))
  7736  000786  22F8               	addwfc	tblptru,f,c
  7737  000788                     	endif
  7738  000788  0008               	tblrd		*
  7739  00078A  CFF5 F03E          	movff	tablat,keypressed@keypress_temp
  7740                           
  7741                           ;Interrupt_ISR.c: 30: if (keypress_temp == 0b01000001){
  7742  00078E  0E41               	movlw	65
  7743  000790  183E               	xorwf	keypressed@keypress_temp,w,c
  7744  000792  A4D8               	btfss	status,2,c
  7745  000794  D03E               	goto	i2l3881
  7746                           
  7747                           ;Interrupt_ISR.c: 31: tot_sorted();
  7748  000796  EC42  F00E         	call	_tot_sorted	;wreg free
  7749                           
  7750                           ;Interrupt_ISR.c: 33: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  7751  00079A  0E00               	movlw	0
  7752  00079C  6E32               	movwf	keypressed@i,c
  7753  00079E                     i2l3853:
  7754  00079E  0E09               	movlw	9
  7755  0007A0  6432               	cpfsgt	keypressed@i,c
  7756  0007A2  D001               	goto	i2l3857
  7757  0007A4  D00E               	goto	i2l3861
  7758  0007A6                     i2l3857:
  7759  0007A6  0E02               	movlw	2
  7760  0007A8  6E22               	movwf	(??_keypressed+1)& (0+255),c
  7761  0007AA  0E3F               	movlw	63
  7762  0007AC  6E21               	movwf	??_keypressed& (0+255),c
  7763  0007AE  0E2B               	movlw	43
  7764  0007B0                     i2u436_47:
  7765  0007B0  2EE8               	decfsz	wreg,f,c
  7766  0007B2  D7FE               	bra	i2u436_47
  7767  0007B4  2E21               	decfsz	??_keypressed& (0+255),f,c
  7768  0007B6  D7FC               	bra	i2u436_47
  7769  0007B8  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  7770  0007BA  D7FA               	bra	i2u436_47
  7771  0007BC  F000               	nop	
  7772  0007BE  2A32               	incf	keypressed@i,f,c
  7773  0007C0  D7EE               	goto	i2l3853
  7774  0007C2                     i2l3861:
  7775                           
  7776                           ;Interrupt_ISR.c: 34: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  7777  0007C2  0E00               	movlw	0
  7778  0007C4  6E33               	movwf	keypressed@i_333,c
  7779  0007C6                     i2l3863:
  7780  0007C6  0E09               	movlw	9
  7781  0007C8  6433               	cpfsgt	keypressed@i_333,c
  7782  0007CA  D001               	goto	i2l3867
  7783  0007CC  D00E               	goto	i2l3871
  7784  0007CE                     i2l3867:
  7785  0007CE  0E02               	movlw	2
  7786  0007D0  6E22               	movwf	(??_keypressed+1)& (0+255),c
  7787  0007D2  0E3F               	movlw	63
  7788  0007D4  6E21               	movwf	??_keypressed& (0+255),c
  7789  0007D6  0E2B               	movlw	43
  7790  0007D8                     i2u437_47:
  7791  0007D8  2EE8               	decfsz	wreg,f,c
  7792  0007DA  D7FE               	bra	i2u437_47
  7793  0007DC  2E21               	decfsz	??_keypressed& (0+255),f,c
  7794  0007DE  D7FC               	bra	i2u437_47
  7795  0007E0  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  7796  0007E2  D7FA               	bra	i2u437_47
  7797  0007E4  F000               	nop	
  7798  0007E6  2A33               	incf	keypressed@i_333,f,c
  7799  0007E8  D7EE               	goto	i2l3863
  7800  0007EA                     i2l3871:
  7801                           
  7802                           ;Interrupt_ISR.c: 35: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  7803  0007EA  0E00               	movlw	0
  7804  0007EC  6E34               	movwf	keypressed@i_334,c
  7805  0007EE                     i2l3873:
  7806  0007EE  0E09               	movlw	9
  7807  0007F0  6434               	cpfsgt	keypressed@i_334,c
  7808  0007F2  D001               	goto	i2l3877
  7809  0007F4  D0E2               	goto	i2l3991
  7810  0007F6                     i2l3877:
  7811  0007F6  0E02               	movlw	2
  7812  0007F8  6E22               	movwf	(??_keypressed+1)& (0+255),c
  7813  0007FA  0E3F               	movlw	63
  7814  0007FC  6E21               	movwf	??_keypressed& (0+255),c
  7815  0007FE  0E2B               	movlw	43
  7816  000800                     i2u438_47:
  7817  000800  2EE8               	decfsz	wreg,f,c
  7818  000802  D7FE               	bra	i2u438_47
  7819  000804  2E21               	decfsz	??_keypressed& (0+255),f,c
  7820  000806  D7FC               	bra	i2u438_47
  7821  000808  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  7822  00080A  D7FA               	bra	i2u438_47
  7823  00080C  F000               	nop	
  7824  00080E  2A34               	incf	keypressed@i_334,f,c
  7825  000810  D7EE               	goto	i2l3873
  7826  000812                     i2l3881:
  7827                           
  7828                           ;Interrupt_ISR.c: 37: else if(keypress_temp == 0b01000010){
  7829  000812  0E42               	movlw	66
  7830  000814  183E               	xorwf	keypressed@keypress_temp,w,c
  7831  000816  A4D8               	btfss	status,2,c
  7832  000818  D03E               	goto	i2l3915
  7833                           
  7834                           ;Interrupt_ISR.c: 38: pop_results();
  7835  00081A  ECA5  F00C         	call	_pop_results	;wreg free
  7836                           
  7837                           ;Interrupt_ISR.c: 40: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  7838  00081E  0E00               	movlw	0
  7839  000820  6E35               	movwf	keypressed@i_335,c
  7840  000822                     i2l3887:
  7841  000822  0E09               	movlw	9
  7842  000824  6435               	cpfsgt	keypressed@i_335,c
  7843  000826  D001               	goto	i2l3891
  7844  000828  D00E               	goto	i2l3895
  7845  00082A                     i2l3891:
  7846  00082A  0E02               	movlw	2
  7847  00082C  6E22               	movwf	(??_keypressed+1)& (0+255),c
  7848  00082E  0E3F               	movlw	63
  7849  000830  6E21               	movwf	??_keypressed& (0+255),c
  7850  000832  0E2B               	movlw	43
  7851  000834                     i2u439_47:
  7852  000834  2EE8               	decfsz	wreg,f,c
  7853  000836  D7FE               	bra	i2u439_47
  7854  000838  2E21               	decfsz	??_keypressed& (0+255),f,c
  7855  00083A  D7FC               	bra	i2u439_47
  7856  00083C  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  7857  00083E  D7FA               	bra	i2u439_47
  7858  000840  F000               	nop	
  7859  000842  2A35               	incf	keypressed@i_335,f,c
  7860  000844  D7EE               	goto	i2l3887
  7861  000846                     i2l3895:
  7862                           
  7863                           ;Interrupt_ISR.c: 41: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  7864  000846  0E00               	movlw	0
  7865  000848  6E36               	movwf	keypressed@i_336,c
  7866  00084A                     i2l3897:
  7867  00084A  0E09               	movlw	9
  7868  00084C  6436               	cpfsgt	keypressed@i_336,c
  7869  00084E  D001               	goto	i2l3901
  7870  000850  D00E               	goto	i2l3905
  7871  000852                     i2l3901:
  7872  000852  0E02               	movlw	2
  7873  000854  6E22               	movwf	(??_keypressed+1)& (0+255),c
  7874  000856  0E3F               	movlw	63
  7875  000858  6E21               	movwf	??_keypressed& (0+255),c
  7876  00085A  0E2B               	movlw	43
  7877  00085C                     i2u440_47:
  7878  00085C  2EE8               	decfsz	wreg,f,c
  7879  00085E  D7FE               	bra	i2u440_47
  7880  000860  2E21               	decfsz	??_keypressed& (0+255),f,c
  7881  000862  D7FC               	bra	i2u440_47
  7882  000864  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  7883  000866  D7FA               	bra	i2u440_47
  7884  000868  F000               	nop	
  7885  00086A  2A36               	incf	keypressed@i_336,f,c
  7886  00086C  D7EE               	goto	i2l3897
  7887  00086E                     i2l3905:
  7888                           
  7889                           ;Interrupt_ISR.c: 42: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  7890  00086E  0E00               	movlw	0
  7891  000870  6E37               	movwf	keypressed@i_337,c
  7892  000872                     i2l3907:
  7893  000872  0E09               	movlw	9
  7894  000874  6437               	cpfsgt	keypressed@i_337,c
  7895  000876  D001               	goto	i2l3911
  7896  000878  D0A0               	goto	i2l3991
  7897  00087A                     i2l3911:
  7898  00087A  0E02               	movlw	2
  7899  00087C  6E22               	movwf	(??_keypressed+1)& (0+255),c
  7900  00087E  0E3F               	movlw	63
  7901  000880  6E21               	movwf	??_keypressed& (0+255),c
  7902  000882  0E2B               	movlw	43
  7903  000884                     i2u441_47:
  7904  000884  2EE8               	decfsz	wreg,f,c
  7905  000886  D7FE               	bra	i2u441_47
  7906  000888  2E21               	decfsz	??_keypressed& (0+255),f,c
  7907  00088A  D7FC               	bra	i2u441_47
  7908  00088C  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  7909  00088E  D7FA               	bra	i2u441_47
  7910  000890  F000               	nop	
  7911  000892  2A37               	incf	keypressed@i_337,f,c
  7912  000894  D7EE               	goto	i2l3907
  7913  000896                     i2l3915:
  7914                           
  7915                           ;Interrupt_ISR.c: 44: else if(keypress_temp == 0b01000011){
  7916  000896  0E43               	movlw	67
  7917  000898  183E               	xorwf	keypressed@keypress_temp,w,c
  7918  00089A  A4D8               	btfss	status,2,c
  7919  00089C  D03E               	goto	i2l3949
  7920                           
  7921                           ;Interrupt_ISR.c: 45: tin_results();
  7922  00089E  EC88  F00C         	call	_tin_results	;wreg free
  7923                           
  7924                           ;Interrupt_ISR.c: 47: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  7925  0008A2  0E00               	movlw	0
  7926  0008A4  6E38               	movwf	keypressed@i_338,c
  7927  0008A6                     i2l3921:
  7928  0008A6  0E09               	movlw	9
  7929  0008A8  6438               	cpfsgt	keypressed@i_338,c
  7930  0008AA  D001               	goto	i2l3925
  7931  0008AC  D00E               	goto	i2l3929
  7932  0008AE                     i2l3925:
  7933  0008AE  0E02               	movlw	2
  7934  0008B0  6E22               	movwf	(??_keypressed+1)& (0+255),c
  7935  0008B2  0E3F               	movlw	63
  7936  0008B4  6E21               	movwf	??_keypressed& (0+255),c
  7937  0008B6  0E2B               	movlw	43
  7938  0008B8                     i2u442_47:
  7939  0008B8  2EE8               	decfsz	wreg,f,c
  7940  0008BA  D7FE               	bra	i2u442_47
  7941  0008BC  2E21               	decfsz	??_keypressed& (0+255),f,c
  7942  0008BE  D7FC               	bra	i2u442_47
  7943  0008C0  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  7944  0008C2  D7FA               	bra	i2u442_47
  7945  0008C4  F000               	nop	
  7946  0008C6  2A38               	incf	keypressed@i_338,f,c
  7947  0008C8  D7EE               	goto	i2l3921
  7948  0008CA                     i2l3929:
  7949                           
  7950                           ;Interrupt_ISR.c: 48: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  7951  0008CA  0E00               	movlw	0
  7952  0008CC  6E39               	movwf	keypressed@i_339,c
  7953  0008CE                     i2l3931:
  7954  0008CE  0E09               	movlw	9
  7955  0008D0  6439               	cpfsgt	keypressed@i_339,c
  7956  0008D2  D001               	goto	i2l3935
  7957  0008D4  D00E               	goto	i2l3939
  7958  0008D6                     i2l3935:
  7959  0008D6  0E02               	movlw	2
  7960  0008D8  6E22               	movwf	(??_keypressed+1)& (0+255),c
  7961  0008DA  0E3F               	movlw	63
  7962  0008DC  6E21               	movwf	??_keypressed& (0+255),c
  7963  0008DE  0E2B               	movlw	43
  7964  0008E0                     i2u443_47:
  7965  0008E0  2EE8               	decfsz	wreg,f,c
  7966  0008E2  D7FE               	bra	i2u443_47
  7967  0008E4  2E21               	decfsz	??_keypressed& (0+255),f,c
  7968  0008E6  D7FC               	bra	i2u443_47
  7969  0008E8  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  7970  0008EA  D7FA               	bra	i2u443_47
  7971  0008EC  F000               	nop	
  7972  0008EE  2A39               	incf	keypressed@i_339,f,c
  7973  0008F0  D7EE               	goto	i2l3931
  7974  0008F2                     i2l3939:
  7975                           
  7976                           ;Interrupt_ISR.c: 49: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  7977  0008F2  0E00               	movlw	0
  7978  0008F4  6E3A               	movwf	keypressed@i_340,c
  7979  0008F6                     i2l3941:
  7980  0008F6  0E09               	movlw	9
  7981  0008F8  643A               	cpfsgt	keypressed@i_340,c
  7982  0008FA  D001               	goto	i2l3945
  7983  0008FC  D05E               	goto	i2l3991
  7984  0008FE                     i2l3945:
  7985  0008FE  0E02               	movlw	2
  7986  000900  6E22               	movwf	(??_keypressed+1)& (0+255),c
  7987  000902  0E3F               	movlw	63
  7988  000904  6E21               	movwf	??_keypressed& (0+255),c
  7989  000906  0E2B               	movlw	43
  7990  000908                     i2u444_47:
  7991  000908  2EE8               	decfsz	wreg,f,c
  7992  00090A  D7FE               	bra	i2u444_47
  7993  00090C  2E21               	decfsz	??_keypressed& (0+255),f,c
  7994  00090E  D7FC               	bra	i2u444_47
  7995  000910  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  7996  000912  D7FA               	bra	i2u444_47
  7997  000914  F000               	nop	
  7998  000916  2A3A               	incf	keypressed@i_340,f,c
  7999  000918  D7EE               	goto	i2l3941
  8000  00091A                     i2l3949:
  8001                           
  8002                           ;Interrupt_ISR.c: 51: else if(keypress_temp == 0b01000100){
  8003  00091A  0E44               	movlw	68
  8004  00091C  183E               	xorwf	keypressed@keypress_temp,w,c
  8005  00091E  A4D8               	btfss	status,2,c
  8006  000920  D03E               	goto	i2l3983
  8007                           
  8008                           ;Interrupt_ISR.c: 52: op_time();
  8009  000922  ECF7  F00B         	call	_op_time	;wreg free
  8010                           
  8011                           ;Interrupt_ISR.c: 54: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  8012  000926  0E00               	movlw	0
  8013  000928  6E3B               	movwf	keypressed@i_341,c
  8014  00092A                     i2l3955:
  8015  00092A  0E09               	movlw	9
  8016  00092C  643B               	cpfsgt	keypressed@i_341,c
  8017  00092E  D001               	goto	i2l3959
  8018  000930  D00E               	goto	i2l3963
  8019  000932                     i2l3959:
  8020  000932  0E02               	movlw	2
  8021  000934  6E22               	movwf	(??_keypressed+1)& (0+255),c
  8022  000936  0E3F               	movlw	63
  8023  000938  6E21               	movwf	??_keypressed& (0+255),c
  8024  00093A  0E2B               	movlw	43
  8025  00093C                     i2u445_47:
  8026  00093C  2EE8               	decfsz	wreg,f,c
  8027  00093E  D7FE               	bra	i2u445_47
  8028  000940  2E21               	decfsz	??_keypressed& (0+255),f,c
  8029  000942  D7FC               	bra	i2u445_47
  8030  000944  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  8031  000946  D7FA               	bra	i2u445_47
  8032  000948  F000               	nop	
  8033  00094A  2A3B               	incf	keypressed@i_341,f,c
  8034  00094C  D7EE               	goto	i2l3955
  8035  00094E                     i2l3963:
  8036                           
  8037                           ;Interrupt_ISR.c: 55: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  8038  00094E  0E00               	movlw	0
  8039  000950  6E3C               	movwf	keypressed@i_342,c
  8040  000952                     i2l3965:
  8041  000952  0E09               	movlw	9
  8042  000954  643C               	cpfsgt	keypressed@i_342,c
  8043  000956  D001               	goto	i2l3969
  8044  000958  D00E               	goto	i2l3973
  8045  00095A                     i2l3969:
  8046  00095A  0E02               	movlw	2
  8047  00095C  6E22               	movwf	(??_keypressed+1)& (0+255),c
  8048  00095E  0E3F               	movlw	63
  8049  000960  6E21               	movwf	??_keypressed& (0+255),c
  8050  000962  0E2B               	movlw	43
  8051  000964                     i2u446_47:
  8052  000964  2EE8               	decfsz	wreg,f,c
  8053  000966  D7FE               	bra	i2u446_47
  8054  000968  2E21               	decfsz	??_keypressed& (0+255),f,c
  8055  00096A  D7FC               	bra	i2u446_47
  8056  00096C  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  8057  00096E  D7FA               	bra	i2u446_47
  8058  000970  F000               	nop	
  8059  000972  2A3C               	incf	keypressed@i_342,f,c
  8060  000974  D7EE               	goto	i2l3965
  8061  000976                     i2l3973:
  8062                           
  8063                           ;Interrupt_ISR.c: 56: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  8064  000976  0E00               	movlw	0
  8065  000978  6E3D               	movwf	keypressed@i_343,c
  8066  00097A                     i2l3975:
  8067  00097A  0E09               	movlw	9
  8068  00097C  643D               	cpfsgt	keypressed@i_343,c
  8069  00097E  D001               	goto	i2l3979
  8070  000980  D01C               	goto	i2l3991
  8071  000982                     i2l3979:
  8072  000982  0E02               	movlw	2
  8073  000984  6E22               	movwf	(??_keypressed+1)& (0+255),c
  8074  000986  0E3F               	movlw	63
  8075  000988  6E21               	movwf	??_keypressed& (0+255),c
  8076  00098A  0E2B               	movlw	43
  8077  00098C                     i2u447_47:
  8078  00098C  2EE8               	decfsz	wreg,f,c
  8079  00098E  D7FE               	bra	i2u447_47
  8080  000990  2E21               	decfsz	??_keypressed& (0+255),f,c
  8081  000992  D7FC               	bra	i2u447_47
  8082  000994  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  8083  000996  D7FA               	bra	i2u447_47
  8084  000998  F000               	nop	
  8085  00099A  2A3D               	incf	keypressed@i_343,f,c
  8086  00099C  D7EE               	goto	i2l3975
  8087  00099E                     i2l3983:
  8088                           
  8089                           ;Interrupt_ISR.c: 58: else if(keypress_temp == '*'){
  8090  00099E  0E2A               	movlw	42
  8091  0009A0  183E               	xorwf	keypressed@keypress_temp,w,c
  8092  0009A2  A4D8               	btfss	status,2,c
  8093  0009A4  D002               	goto	i2l3987
  8094  0009A6  00FF               	reset		;# 
  8095                           
  8096                           ;Interrupt_ISR.c: 60: }
  8097  0009A8  D008               	goto	i2l3991
  8098  0009AA                     i2l3987:
  8099                           
  8100                           ;Interrupt_ISR.c: 61: else{
  8101                           ;Interrupt_ISR.c: 62: initLCD();
  8102  0009AA  EC44  F00C         	call	i2_initLCD	;wreg free
  8103                           
  8104                           ;Interrupt_ISR.c: 63: printf(" ");
  8105  0009AE  0EDA               	movlw	low (STR_2+11)
  8106  0009B0  6E0D               	movwf	i2printf@f,c
  8107  0009B2  0EFF               	movlw	high (STR_2+11)
  8108  0009B4  6E0E               	movwf	i2printf@f+1,c
  8109  0009B6  ECF8  F001         	call	i2_printf	;wreg free
  8110  0009BA                     i2l3991:
  8111                           
  8112                           ;Interrupt_ISR.c: 64: }
  8113                           ;Interrupt_ISR.c: 65: lcdInst(0b10000000);;
  8114  0009BA  0E80               	movlw	128
  8115  0009BC  ECCF  F00E         	call	i2_lcdInst
  8116                           
  8117                           ;Interrupt_ISR.c: 66: INT1IF = 0;
  8118  0009C0  90F0               	bcf	intcon3,0,c	;volatile
  8119  0009C2                     i2l208:
  8120  0009C2  C030  FFF5         	movff	??_keypressed+15,tablat
  8121  0009C6  C02F  FFF8         	movff	??_keypressed+14,tblptru
  8122  0009CA  C02E  FFF7         	movff	??_keypressed+13,tblptrh
  8123  0009CE  C02D  FFF6         	movff	??_keypressed+12,tblptrl
  8124  0009D2  C02C  FFF4         	movff	??_keypressed+11,prodh
  8125  0009D6  C02B  FFF3         	movff	??_keypressed+10,prodl
  8126  0009DA  C02A  FFDA         	movff	??_keypressed+9,fsr2h
  8127  0009DE  C029  FFD9         	movff	??_keypressed+8,fsr2l
  8128  0009E2  C028  FFE2         	movff	??_keypressed+7,fsr1h
  8129  0009E6  C027  FFE1         	movff	??_keypressed+6,fsr1l
  8130  0009EA  C026  FFEA         	movff	??_keypressed+5,fsr0h
  8131  0009EE  C025  FFE9         	movff	??_keypressed+4,fsr0l
  8132  0009F2  C024  FFFB         	movff	??_keypressed+3,pclatu
  8133  0009F6  C023  FFFA         	movff	??_keypressed+2,pclath
  8134  0009FA  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8135  0009FC  0011               	retfie		f
  8136  0009FE                     __end_of_keypressed:
  8137                           	opt stack 0
  8138                           tosu	equ	0xFFF
  8139                           tosh	equ	0xFFE
  8140                           tosl	equ	0xFFD
  8141                           pclatu	equ	0xFFB
  8142                           pclath	equ	0xFFA
  8143                           tblptru	equ	0xFF8
  8144                           tblptrh	equ	0xFF7
  8145                           tblptrl	equ	0xFF6
  8146                           tablat	equ	0xFF5
  8147                           prodh	equ	0xFF4
  8148                           prodl	equ	0xFF3
  8149                           intcon	equ	0xFF2
  8150                           intcon3	equ	0xFF0
  8151                           postinc0	equ	0xFEE
  8152                           fsr0h	equ	0xFEA
  8153                           fsr0l	equ	0xFE9
  8154                           wreg	equ	0xFE8
  8155                           fsr1h	equ	0xFE2
  8156                           fsr1l	equ	0xFE1
  8157                           indf2	equ	0xFDF
  8158                           postinc2	equ	0xFDE
  8159                           postdec2	equ	0xFDD
  8160                           fsr2h	equ	0xFDA
  8161                           fsr2l	equ	0xFD9
  8162                           status	equ	0xFD8
  8163                           
  8164 ;; *************** function _tot_sorted *****************
  8165 ;; Defined at:
  8166 ;;		line 259 in file "operation.c"
  8167 ;; Parameters:    Size  Location     Type
  8168 ;;		None
  8169 ;; Auto vars:     Size  Location     Type
  8170 ;;		None
  8171 ;; Return value:  Size  Location     Type
  8172 ;;                  1    wreg      void 
  8173 ;; Registers used:
  8174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8175 ;; Tracked objects:
  8176 ;;		On entry : 0/0
  8177 ;;		On exit  : 0/0
  8178 ;;		Unchanged: 0/0
  8179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8184 ;;Total ram usage:        0 bytes
  8185 ;; Hardware stack levels used:    1
  8186 ;; Hardware stack levels required when called:    3
  8187 ;; This function calls:
  8188 ;;		i2_initLCD
  8189 ;;		i2_lcdInst
  8190 ;;		i2_printf
  8191 ;; This function is called by:
  8192 ;;		_keypressed
  8193 ;; This function uses a non-reentrant model
  8194 ;;
  8195                           
  8196                           	psect	text53
  8197  001C84                     __ptext53:
  8198                           	opt stack 0
  8199  001C84                     _tot_sorted:
  8200                           	opt stack 21
  8201                           
  8202                           ;operation.c: 260: lcdInst(0b10000000);;
  8203                           
  8204                           ;incstack = 0
  8205  001C84  0E80               	movlw	128
  8206  001C86  ECCF  F00E         	call	i2_lcdInst
  8207                           
  8208                           ;operation.c: 261: initLCD();
  8209  001C8A  EC44  F00C         	call	i2_initLCD	;wreg free
  8210                           
  8211                           ;operation.c: 262: printf("Total Sorted: %02x", tot);
  8212  001C8E  0E29               	movlw	low STR_10
  8213  001C90  6E0D               	movwf	i2printf@f,c
  8214  001C92  0EFF               	movlw	high STR_10
  8215  001C94  6E0E               	movwf	i2printf@f+1,c
  8216  001C96  C043  F00F         	movff	_tot,?i2_printf+2
  8217  001C9A  C044  F010         	movff	_tot+1,?i2_printf+3
  8218  001C9E  ECF8  F001         	call	i2_printf	;wreg free
  8219  001CA2  0012               	return	
  8220  001CA4                     __end_of_tot_sorted:
  8221                           	opt stack 0
  8222                           tosu	equ	0xFFF
  8223                           tosh	equ	0xFFE
  8224                           tosl	equ	0xFFD
  8225                           pclatu	equ	0xFFB
  8226                           pclath	equ	0xFFA
  8227                           tblptru	equ	0xFF8
  8228                           tblptrh	equ	0xFF7
  8229                           tblptrl	equ	0xFF6
  8230                           tablat	equ	0xFF5
  8231                           prodh	equ	0xFF4
  8232                           prodl	equ	0xFF3
  8233                           intcon	equ	0xFF2
  8234                           intcon3	equ	0xFF0
  8235                           postinc0	equ	0xFEE
  8236                           fsr0h	equ	0xFEA
  8237                           fsr0l	equ	0xFE9
  8238                           wreg	equ	0xFE8
  8239                           fsr1h	equ	0xFE2
  8240                           fsr1l	equ	0xFE1
  8241                           indf2	equ	0xFDF
  8242                           postinc2	equ	0xFDE
  8243                           postdec2	equ	0xFDD
  8244                           fsr2h	equ	0xFDA
  8245                           fsr2l	equ	0xFD9
  8246                           status	equ	0xFD8
  8247                           
  8248 ;; *************** function _tin_results *****************
  8249 ;; Defined at:
  8250 ;;		line 273 in file "operation.c"
  8251 ;; Parameters:    Size  Location     Type
  8252 ;;		None
  8253 ;; Auto vars:     Size  Location     Type
  8254 ;;		None
  8255 ;; Return value:  Size  Location     Type
  8256 ;;                  1    wreg      void 
  8257 ;; Registers used:
  8258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8259 ;; Tracked objects:
  8260 ;;		On entry : 0/0
  8261 ;;		On exit  : 0/0
  8262 ;;		Unchanged: 0/0
  8263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8268 ;;Total ram usage:        0 bytes
  8269 ;; Hardware stack levels used:    1
  8270 ;; Hardware stack levels required when called:    3
  8271 ;; This function calls:
  8272 ;;		i2_initLCD
  8273 ;;		i2_lcdInst
  8274 ;;		i2_printf
  8275 ;; This function is called by:
  8276 ;;		_keypressed
  8277 ;; This function uses a non-reentrant model
  8278 ;;
  8279                           
  8280                           	psect	text54
  8281  001910                     __ptext54:
  8282                           	opt stack 0
  8283  001910                     _tin_results:
  8284                           	opt stack 21
  8285                           
  8286                           ;operation.c: 274: lcdInst(0b10000000);;
  8287                           
  8288                           ;incstack = 0
  8289  001910  0E80               	movlw	128
  8290  001912  ECCF  F00E         	call	i2_lcdInst
  8291                           
  8292                           ;operation.c: 275: initLCD();
  8293  001916  EC44  F00C         	call	i2_initLCD	;wreg free
  8294                           
  8295                           ;operation.c: 276: printf("With Label: %02x",tin_can);
  8296  00191A  0E91               	movlw	low STR_12
  8297  00191C  6E0D               	movwf	i2printf@f,c
  8298  00191E  0EFF               	movlw	high STR_12
  8299  001920  6E0E               	movwf	i2printf@f+1,c
  8300  001922  C0C4  F00F         	movff	_tin_can,?i2_printf+2
  8301  001926  C0C5  F010         	movff	_tin_can+1,?i2_printf+3
  8302  00192A  ECF8  F001         	call	i2_printf	;wreg free
  8303                           
  8304                           ;operation.c: 277: lcdInst(0b11000000);;
  8305  00192E  0EC0               	movlw	192
  8306  001930  ECCF  F00E         	call	i2_lcdInst
  8307                           
  8308                           ;operation.c: 278: printf("No Label: %02x",tin_can_label);
  8309  001934  0EB1               	movlw	low STR_13
  8310  001936  6E0D               	movwf	i2printf@f,c
  8311  001938  0EFF               	movlw	high STR_13
  8312  00193A  6E0E               	movwf	i2printf@f+1,c
  8313  00193C  C0C6  F00F         	movff	_tin_can_label,?i2_printf+2
  8314  001940  C0C7  F010         	movff	_tin_can_label+1,?i2_printf+3
  8315  001944  ECF8  F001         	call	i2_printf	;wreg free
  8316  001948  0012               	return	
  8317  00194A                     __end_of_tin_results:
  8318                           	opt stack 0
  8319                           tosu	equ	0xFFF
  8320                           tosh	equ	0xFFE
  8321                           tosl	equ	0xFFD
  8322                           pclatu	equ	0xFFB
  8323                           pclath	equ	0xFFA
  8324                           tblptru	equ	0xFF8
  8325                           tblptrh	equ	0xFF7
  8326                           tblptrl	equ	0xFF6
  8327                           tablat	equ	0xFF5
  8328                           prodh	equ	0xFF4
  8329                           prodl	equ	0xFF3
  8330                           intcon	equ	0xFF2
  8331                           intcon3	equ	0xFF0
  8332                           postinc0	equ	0xFEE
  8333                           fsr0h	equ	0xFEA
  8334                           fsr0l	equ	0xFE9
  8335                           wreg	equ	0xFE8
  8336                           fsr1h	equ	0xFE2
  8337                           fsr1l	equ	0xFE1
  8338                           indf2	equ	0xFDF
  8339                           postinc2	equ	0xFDE
  8340                           postdec2	equ	0xFDD
  8341                           fsr2h	equ	0xFDA
  8342                           fsr2l	equ	0xFD9
  8343                           status	equ	0xFD8
  8344                           
  8345 ;; *************** function _pop_results *****************
  8346 ;; Defined at:
  8347 ;;		line 282 in file "operation.c"
  8348 ;; Parameters:    Size  Location     Type
  8349 ;;		None
  8350 ;; Auto vars:     Size  Location     Type
  8351 ;;		None
  8352 ;; Return value:  Size  Location     Type
  8353 ;;                  1    wreg      void 
  8354 ;; Registers used:
  8355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8356 ;; Tracked objects:
  8357 ;;		On entry : 0/0
  8358 ;;		On exit  : 0/0
  8359 ;;		Unchanged: 0/0
  8360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8365 ;;Total ram usage:        0 bytes
  8366 ;; Hardware stack levels used:    1
  8367 ;; Hardware stack levels required when called:    3
  8368 ;; This function calls:
  8369 ;;		i2_initLCD
  8370 ;;		i2_lcdInst
  8371 ;;		i2_printf
  8372 ;; This function is called by:
  8373 ;;		_keypressed
  8374 ;; This function uses a non-reentrant model
  8375 ;;
  8376                           
  8377                           	psect	text55
  8378  00194A                     __ptext55:
  8379                           	opt stack 0
  8380  00194A                     _pop_results:
  8381                           	opt stack 21
  8382                           
  8383                           ;operation.c: 283: lcdInst(0b10000000);;
  8384                           
  8385                           ;incstack = 0
  8386  00194A  0E80               	movlw	128
  8387  00194C  ECCF  F00E         	call	i2_lcdInst
  8388                           
  8389                           ;operation.c: 284: initLCD();
  8390  001950  EC44  F00C         	call	i2_initLCD	;wreg free
  8391                           
  8392                           ;operation.c: 285: printf("With Tab: %02x",pop_can_tab);
  8393  001954  0EA2               	movlw	low STR_14
  8394  001956  6E0D               	movwf	i2printf@f,c
  8395  001958  0EFF               	movlw	high STR_14
  8396  00195A  6E0E               	movwf	i2printf@f+1,c
  8397  00195C  C0C0  F00F         	movff	_pop_can_tab,?i2_printf+2
  8398  001960  C0C1  F010         	movff	_pop_can_tab+1,?i2_printf+3
  8399  001964  ECF8  F001         	call	i2_printf	;wreg free
  8400                           
  8401                           ;operation.c: 286: lcdInst(0b11000000);;
  8402  001968  0EC0               	movlw	192
  8403  00196A  ECCF  F00E         	call	i2_lcdInst
  8404                           
  8405                           ;operation.c: 287: printf("No Tab: %02x",pop_can);
  8406  00196E  0EE9               	movlw	low STR_15
  8407  001970  6E0D               	movwf	i2printf@f,c
  8408  001972  0EFF               	movlw	high STR_15
  8409  001974  6E0E               	movwf	i2printf@f+1,c
  8410  001976  C0C2  F00F         	movff	_pop_can,?i2_printf+2
  8411  00197A  C0C3  F010         	movff	_pop_can+1,?i2_printf+3
  8412  00197E  ECF8  F001         	call	i2_printf	;wreg free
  8413  001982  0012               	return	
  8414  001984                     __end_of_pop_results:
  8415                           	opt stack 0
  8416                           tosu	equ	0xFFF
  8417                           tosh	equ	0xFFE
  8418                           tosl	equ	0xFFD
  8419                           pclatu	equ	0xFFB
  8420                           pclath	equ	0xFFA
  8421                           tblptru	equ	0xFF8
  8422                           tblptrh	equ	0xFF7
  8423                           tblptrl	equ	0xFF6
  8424                           tablat	equ	0xFF5
  8425                           prodh	equ	0xFF4
  8426                           prodl	equ	0xFF3
  8427                           intcon	equ	0xFF2
  8428                           intcon3	equ	0xFF0
  8429                           postinc0	equ	0xFEE
  8430                           fsr0h	equ	0xFEA
  8431                           fsr0l	equ	0xFE9
  8432                           wreg	equ	0xFE8
  8433                           fsr1h	equ	0xFE2
  8434                           fsr1l	equ	0xFE1
  8435                           indf2	equ	0xFDF
  8436                           postinc2	equ	0xFDE
  8437                           postdec2	equ	0xFDD
  8438                           fsr2h	equ	0xFDA
  8439                           fsr2l	equ	0xFD9
  8440                           status	equ	0xFD8
  8441                           
  8442 ;; *************** function _op_time *****************
  8443 ;; Defined at:
  8444 ;;		line 266 in file "operation.c"
  8445 ;; Parameters:    Size  Location     Type
  8446 ;;		None
  8447 ;; Auto vars:     Size  Location     Type
  8448 ;;		None
  8449 ;; Return value:  Size  Location     Type
  8450 ;;                  1    wreg      void 
  8451 ;; Registers used:
  8452 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8453 ;; Tracked objects:
  8454 ;;		On entry : 0/0
  8455 ;;		On exit  : 0/0
  8456 ;;		Unchanged: 0/0
  8457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8462 ;;Total ram usage:        0 bytes
  8463 ;; Hardware stack levels used:    1
  8464 ;; Hardware stack levels required when called:    3
  8465 ;; This function calls:
  8466 ;;		___awmod
  8467 ;;		i2___awdiv
  8468 ;;		i2_initLCD
  8469 ;;		i2_lcdInst
  8470 ;;		i2_printf
  8471 ;; This function is called by:
  8472 ;;		_keypressed
  8473 ;; This function uses a non-reentrant model
  8474 ;;
  8475                           
  8476                           	psect	text56
  8477  0017EE                     __ptext56:
  8478                           	opt stack 0
  8479  0017EE                     _op_time:
  8480                           	opt stack 21
  8481                           
  8482                           ;operation.c: 267: lcdInst(0b10000000);;
  8483                           
  8484                           ;incstack = 0
  8485  0017EE  0E80               	movlw	128
  8486  0017F0  ECCF  F00E         	call	i2_lcdInst
  8487                           
  8488                           ;operation.c: 268: initLCD();
  8489  0017F4  EC44  F00C         	call	i2_initLCD	;wreg free
  8490                           
  8491                           ;operation.c: 269: printf("Time: %01d min %02d s", operation_time/60, operation_time%60 
      +                          );
  8492  0017F8  0E13               	movlw	low STR_11
  8493  0017FA  6E0D               	movwf	i2printf@f,c
  8494  0017FC  0EFF               	movlw	high STR_11
  8495  0017FE  6E0E               	movwf	i2printf@f+1,c
  8496  001800  C045  F001         	movff	_operation_time,i2___awdiv@dividend
  8497  001804  C046  F002         	movff	_operation_time+1,i2___awdiv@dividend+1
  8498  001808  0E00               	movlw	0
  8499  00180A  6E04               	movwf	i2___awdiv@divisor+1,c
  8500  00180C  0E3C               	movlw	60
  8501  00180E  6E03               	movwf	i2___awdiv@divisor,c
  8502  001810  EC26  F009         	call	i2___awdiv	;wreg free
  8503  001814  C001  F00F         	movff	?i2___awdiv,?i2_printf+2
  8504  001818  C002  F010         	movff	?i2___awdiv+1,?i2_printf+3
  8505  00181C  C045  F001         	movff	_operation_time,___awmod@dividend
  8506  001820  C046  F002         	movff	_operation_time+1,___awmod@dividend+1
  8507  001824  0E00               	movlw	0
  8508  001826  6E04               	movwf	___awmod@divisor+1,c
  8509  001828  0E3C               	movlw	60
  8510  00182A  6E03               	movwf	___awmod@divisor,c
  8511  00182C  EC14  F00A         	call	___awmod	;wreg free
  8512  001830  C001  F011         	movff	?___awmod,?i2_printf+4
  8513  001834  C002  F012         	movff	?___awmod+1,?i2_printf+5
  8514  001838  ECF8  F001         	call	i2_printf	;wreg free
  8515  00183C  0012               	return	
  8516  00183E                     __end_of_op_time:
  8517                           	opt stack 0
  8518                           tosu	equ	0xFFF
  8519                           tosh	equ	0xFFE
  8520                           tosl	equ	0xFFD
  8521                           pclatu	equ	0xFFB
  8522                           pclath	equ	0xFFA
  8523                           tblptru	equ	0xFF8
  8524                           tblptrh	equ	0xFF7
  8525                           tblptrl	equ	0xFF6
  8526                           tablat	equ	0xFF5
  8527                           prodh	equ	0xFF4
  8528                           prodl	equ	0xFF3
  8529                           intcon	equ	0xFF2
  8530                           intcon3	equ	0xFF0
  8531                           postinc0	equ	0xFEE
  8532                           fsr0h	equ	0xFEA
  8533                           fsr0l	equ	0xFE9
  8534                           wreg	equ	0xFE8
  8535                           fsr1h	equ	0xFE2
  8536                           fsr1l	equ	0xFE1
  8537                           indf2	equ	0xFDF
  8538                           postinc2	equ	0xFDE
  8539                           postdec2	equ	0xFDD
  8540                           fsr2h	equ	0xFDA
  8541                           fsr2l	equ	0xFD9
  8542                           status	equ	0xFD8
  8543                           
  8544 ;; *************** function i2_printf *****************
  8545 ;; Defined at:
  8546 ;;		line 464 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
  8547 ;; Parameters:    Size  Location     Type
  8548 ;;  f               2   12[COMRAM] PTR const unsigned char 
  8549 ;;		 -> STR_15(13), STR_14(15), STR_13(15), STR_12(17), 
  8550 ;;		 -> STR_11(22), STR_10(19), STR_9(17), STR_8(17), 
  8551 ;;		 -> STR_7(17), STR_6(13), STR_5(9), STR_4(17), 
  8552 ;;		 -> STR_3(15), STR_2(13), STR_1(2), 
  8553 ;; Auto vars:     Size  Location     Type
  8554 ;;  printf          4    0        struct .
  8555 ;;  printf          3    0        PTR const unsigned char 
  8556 ;;  printf          2   29[COMRAM] int 
  8557 ;;  printf          2   26[COMRAM] unsigned int 
  8558 ;;  printf          2   23[COMRAM] PTR void [1]
  8559 ;;		 -> ?i2_printf(2), ?_printf(2), 
  8560 ;;  printf          2    0        unsigned int 
  8561 ;;  printf          1   31[COMRAM] char 
  8562 ;;  printf          1   28[COMRAM] unsigned char 
  8563 ;;  printf          1   25[COMRAM] char 
  8564 ;;  printf          1   22[COMRAM] unsigned char 
  8565 ;; Return value:  Size  Location     Type
  8566 ;;                  2   12[COMRAM] int 
  8567 ;; Registers used:
  8568 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8569 ;; Tracked objects:
  8570 ;;		On entry : 0/0
  8571 ;;		On exit  : 0/0
  8572 ;;		Unchanged: 0/0
  8573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8574 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8575 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8576 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8577 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8578 ;;Total ram usage:       20 bytes
  8579 ;; Hardware stack levels used:    1
  8580 ;; Hardware stack levels required when called:    2
  8581 ;; This function calls:
  8582 ;;		i2___lwdiv
  8583 ;;		i2___lwmod
  8584 ;;		i2___wmul
  8585 ;;		i2_isdigit
  8586 ;;		i2_putch
  8587 ;; This function is called by:
  8588 ;;		_keypressed
  8589 ;;		_tot_sorted
  8590 ;;		_op_time
  8591 ;;		_tin_results
  8592 ;;		_pop_results
  8593 ;; This function uses a non-reentrant model
  8594 ;;
  8595                           
  8596                           	psect	text57
  8597  0003F0                     __ptext57:
  8598                           	opt stack 0
  8599  0003F0                     i2_printf:
  8600                           	opt stack 22
  8601                           
  8602                           ;doprnt.c: 466: va_list ap;
  8603                           ;doprnt.c: 499: signed char c;
  8604                           ;doprnt.c: 501: int width;
  8605                           ;doprnt.c: 506: signed char prec;
  8606                           ;doprnt.c: 508: unsigned char flag;
  8607                           ;doprnt.c: 523: union {
  8608                           ;doprnt.c: 524: unsigned long vd;
  8609                           ;doprnt.c: 525: double integ;
  8610                           ;doprnt.c: 526: } tmpval;
  8611                           ;doprnt.c: 528: unsigned int val;
  8612                           ;doprnt.c: 529: unsigned len;
  8613                           ;doprnt.c: 530: const char * cp;
  8614                           ;doprnt.c: 533: *ap = __va_start();
  8615                           
  8616                           ;incstack = 0
  8617  0003F0  0E0F               	movlw	low (?i2_printf+2)
  8618  0003F2  6E18               	movwf	i2printf@ap,c
  8619  0003F4  0E00               	movlw	high (?i2_printf+2)
  8620  0003F6  6E19               	movwf	i2printf@ap+1,c
  8621                           
  8622                           ;doprnt.c: 536: while(c = *f++) {
  8623  0003F8  D188               	goto	i2l3541
  8624  0003FA                     i2l3415:
  8625                           
  8626                           ;doprnt.c: 538: if(c != '%')
  8627  0003FA  0E25               	movlw	37
  8628  0003FC  1820               	xorwf	i2printf@c,w,c
  8629  0003FE  B4D8               	btfsc	status,2,c
  8630  000400  D004               	goto	i2l3419
  8631                           
  8632                           ;doprnt.c: 540: {
  8633                           ;doprnt.c: 541: (putch(c) );
  8634  000402  5020               	movf	i2printf@c,w,c
  8635  000404  ECC9  F00E         	call	i2_putch
  8636                           
  8637                           ;doprnt.c: 542: continue;
  8638  000408  D180               	goto	i2l3541
  8639  00040A                     i2l3419:
  8640                           
  8641                           ;doprnt.c: 543: }
  8642                           ;doprnt.c: 546: width = 0;
  8643  00040A  0E00               	movlw	0
  8644  00040C  6E1F               	movwf	i2printf@width+1,c
  8645  00040E  0E00               	movlw	0
  8646  000410  6E1E               	movwf	i2printf@width,c
  8647                           
  8648                           ;doprnt.c: 548: flag = 0;
  8649  000412  0E00               	movlw	0
  8650  000414  6E1D               	movwf	i2printf@flag,c
  8651                           
  8652                           ;doprnt.c: 551: switch(*f) {
  8653                           
  8654                           ;doprnt.c: 550: for(;;) {
  8655  000416  D003               	goto	i2l3425
  8656  000418                     i2l3421:
  8657                           
  8658                           ;doprnt.c: 580: flag |= 0x04;
  8659  000418  841D               	bsf	i2printf@flag,2,c
  8660                           
  8661                           ;doprnt.c: 581: f++;
  8662  00041A  4A0D               	infsnz	i2printf@f,f,c
  8663  00041C  2A0E               	incf	i2printf@f+1,f,c
  8664  00041E                     i2l3425:
  8665  00041E  C00D  FFF6         	movff	i2printf@f,tblptrl
  8666  000422  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8667  000426                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8668  000426  6AF8               	clrf	tblptru,c
  8669  000428                     	endif
  8670  000428                     	if	0	;tblptru may be non-zero
  8671  000428                     	endif
  8672  000428  0008               	tblrd		*
  8673  00042A  50F5               	movf	tablat,w,c
  8674                           
  8675                           ; Switch size 1, requested type "space"
  8676                           ; Number of cases is 1, Range of values is 48 to 48
  8677                           ; switch strategies available:
  8678                           ; Name         Instructions Cycles
  8679                           ; simple_byte            4     3 (average)
  8680                           ;	Chosen strategy is simple_byte
  8681  00042C  0A30               	xorlw	48	; case 48
  8682  00042E  B4D8               	btfsc	status,2,c
  8683  000430  D7F3               	goto	i2l3421
  8684                           
  8685                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8686                           
  8687                           ;doprnt.c: 586: }
  8688                           
  8689                           ;doprnt.c: 585: break;
  8690  000432  C00D  FFF6         	movff	i2printf@f,tblptrl
  8691  000436  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8692  00043A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8693  00043A  6AF8               	clrf	tblptru,c
  8694  00043C                     	endif
  8695  00043C                     	if	0	;tblptru may be non-zero
  8696  00043C                     	endif
  8697  00043C  0008               	tblrd		*
  8698  00043E  50F5               	movf	tablat,w,c
  8699  000440  EC52  F00E         	call	i2_isdigit
  8700  000444  A0D8               	btfss	status,0,c
  8701  000446  D037               	goto	i2l3443
  8702                           
  8703                           ;doprnt.c: 598: width = 0;
  8704  000448  0E00               	movlw	0
  8705  00044A  6E1F               	movwf	i2printf@width+1,c
  8706  00044C  0E00               	movlw	0
  8707  00044E  6E1E               	movwf	i2printf@width,c
  8708  000450                     i2l3431:
  8709                           
  8710                           ;doprnt.c: 600: width *= 10;
  8711  000450  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
  8712  000454  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  8713  000458  0E00               	movlw	0
  8714  00045A  6E04               	movwf	i2___wmul@multiplicand+1,c
  8715  00045C  0E0A               	movlw	10
  8716  00045E  6E03               	movwf	i2___wmul@multiplicand,c
  8717  000460  ECBE  F00D         	call	i2___wmul	;wreg free
  8718  000464  C001  F01E         	movff	?i2___wmul,i2printf@width
  8719  000468  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
  8720                           
  8721                           ;doprnt.c: 601: width += *f++ - '0';
  8722  00046C  0ED0               	movlw	208
  8723  00046E  6E13               	movwf	??i2_printf& (0+255),c
  8724  000470  0EFF               	movlw	255
  8725  000472  6E14               	movwf	(??i2_printf+1)& (0+255),c
  8726  000474  C00D  FFF6         	movff	i2printf@f,tblptrl
  8727  000478  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8728  00047C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8729  00047C  6AF8               	clrf	tblptru,c
  8730  00047E                     	endif
  8731  00047E                     	if	0	;tblptru may be non-zero
  8732  00047E                     	endif
  8733  00047E  0008               	tblrd		*
  8734  000480  50F5               	movf	tablat,w,c
  8735  000482  6E15               	movwf	(??i2_printf+2)& (0+255),c
  8736  000484  6A16               	clrf	(??i2_printf+3)& (0+255),c
  8737  000486  5013               	movf	??i2_printf,w,c
  8738  000488  2615               	addwf	??i2_printf+2,f,c
  8739  00048A  5014               	movf	??i2_printf+1,w,c
  8740  00048C  2216               	addwfc	??i2_printf+3,f,c
  8741  00048E  5015               	movf	??i2_printf+2,w,c
  8742  000490  261E               	addwf	i2printf@width,f,c
  8743  000492  5016               	movf	??i2_printf+3,w,c
  8744  000494  221F               	addwfc	i2printf@width+1,f,c
  8745  000496  4A0D               	infsnz	i2printf@f,f,c
  8746  000498  2A0E               	incf	i2printf@f+1,f,c
  8747                           
  8748                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8749  00049A  C00D  FFF6         	movff	i2printf@f,tblptrl
  8750  00049E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8751  0004A2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8752  0004A2  6AF8               	clrf	tblptru,c
  8753  0004A4                     	endif
  8754  0004A4                     	if	0	;tblptru may be non-zero
  8755  0004A4                     	endif
  8756  0004A4  0008               	tblrd		*
  8757  0004A6  50F5               	movf	tablat,w,c
  8758  0004A8  EC52  F00E         	call	i2_isdigit
  8759  0004AC  A0D8               	btfss	status,0,c
  8760  0004AE  D003               	goto	i2l3443
  8761  0004B0  D7CF               	goto	i2l3431
  8762  0004B2                     i2l3439:
  8763                           
  8764                           ;doprnt.c: 721: flag |= 0x80;
  8765  0004B2  8E1D               	bsf	i2printf@flag,7,c
  8766                           
  8767                           ;doprnt.c: 723: break;
  8768  0004B4  D018               	goto	i2l661
  8769  0004B6                     i2l3443:
  8770  0004B6  C00D  FFF6         	movff	i2printf@f,tblptrl
  8771  0004BA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8772  0004BE  4A0D               	infsnz	i2printf@f,f,c
  8773  0004C0  2A0E               	incf	i2printf@f+1,f,c
  8774  0004C2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8775  0004C2  6AF8               	clrf	tblptru,c
  8776  0004C4                     	endif
  8777  0004C4                     	if	0	;tblptru may be non-zero
  8778  0004C4                     	endif
  8779  0004C4  0008               	tblrd		*
  8780  0004C6  CFF5 F020          	movff	tablat,i2printf@c
  8781  0004CA  5020               	movf	i2printf@c,w,c
  8782                           
  8783                           ; Switch size 1, requested type "space"
  8784                           ; Number of cases is 4, Range of values is 0 to 120
  8785                           ; switch strategies available:
  8786                           ; Name         Instructions Cycles
  8787                           ; simple_byte           13     7 (average)
  8788                           ;	Chosen strategy is simple_byte
  8789  0004CC  0A00               	xorlw	0	; case 0
  8790  0004CE  B4D8               	btfsc	status,2,c
  8791  0004D0  0012               	return	
  8792  0004D2  0A64               	xorlw	100	; case 100
  8793  0004D4  B4D8               	btfsc	status,2,c
  8794  0004D6  D007               	goto	i2l661
  8795  0004D8  0A0D               	xorlw	13	; case 105
  8796  0004DA  B4D8               	btfsc	status,2,c
  8797  0004DC  D004               	goto	i2l661
  8798  0004DE  0A11               	xorlw	17	; case 120
  8799  0004E0  B4D8               	btfsc	status,2,c
  8800  0004E2  D7E7               	goto	i2l3439
  8801  0004E4  D112               	goto	i2l3541
  8802  0004E6                     i2l661:
  8803                           
  8804                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  8805  0004E6  BE1D               	btfsc	i2printf@flag,7,c
  8806  0004E8  D015               	goto	i2l3455
  8807                           
  8808                           ;doprnt.c: 1253: {
  8809                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8810  0004EA  C018  FFD9         	movff	i2printf@ap,fsr2l
  8811  0004EE  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  8812  0004F2  CFDE F01B          	movff	postinc2,i2printf@val
  8813  0004F6  CFDD F01C          	movff	postdec2,i2printf@val+1
  8814  0004FA  0E02               	movlw	2
  8815  0004FC  2618               	addwf	i2printf@ap,f,c
  8816  0004FE  0E00               	movlw	0
  8817  000500  2219               	addwfc	i2printf@ap+1,f,c
  8818                           
  8819                           ;doprnt.c: 1261: if((int)val < 0) {
  8820  000502  AE1C               	btfss	i2printf@val+1,7,c
  8821  000504  D04A               	goto	i2l3489
  8822                           
  8823                           ;doprnt.c: 1262: flag |= 0x03;
  8824  000506  0E03               	movlw	3
  8825  000508  121D               	iorwf	i2printf@flag,f,c
  8826                           
  8827                           ;doprnt.c: 1263: val = -val;
  8828  00050A  6C1B               	negf	i2printf@val,c
  8829  00050C  1E1C               	comf	i2printf@val+1,f,c
  8830  00050E  B0D8               	btfsc	status,0,c
  8831  000510  2A1C               	incf	i2printf@val+1,f,c
  8832                           
  8833                           ;doprnt.c: 1264: }
  8834                           ;doprnt.c: 1266: }
  8835  000512  D043               	goto	i2l3489
  8836  000514                     i2l3455:
  8837                           
  8838                           ;doprnt.c: 1268: else
  8839                           ;doprnt.c: 1273: {
  8840                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8841  000514  C018  FFD9         	movff	i2printf@ap,fsr2l
  8842  000518  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  8843  00051C  CFDE F01B          	movff	postinc2,i2printf@val
  8844  000520  CFDD F01C          	movff	postdec2,i2printf@val+1
  8845  000524  0E02               	movlw	2
  8846  000526  2618               	addwf	i2printf@ap,f,c
  8847  000528  0E00               	movlw	0
  8848  00052A  2219               	addwfc	i2printf@ap+1,f,c
  8849                           
  8850                           ;doprnt.c: 1287: }
  8851                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  8852  00052C  D036               	goto	i2l3489
  8853  00052E                     i2l3459:
  8854                           
  8855                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8856  00052E  0E01               	movlw	1
  8857  000530  6E20               	movwf	i2printf@c,c
  8858  000532                     i2l3461:
  8859  000532  0E05               	movlw	5
  8860  000534  1820               	xorwf	i2printf@c,w,c
  8861  000536  B4D8               	btfsc	status,2,c
  8862  000538  D038               	goto	i2l3491
  8863                           
  8864                           ;doprnt.c: 1306: if(val < dpowers[c])
  8865  00053A  5020               	movf	i2printf@c,w,c
  8866  00053C  0D02               	mullw	2
  8867  00053E  0EFA               	movlw	low _dpowers
  8868  000540  24F3               	addwf	prodl,w,c
  8869  000542  6EF6               	movwf	tblptrl,c
  8870  000544  0EFE               	movlw	high _dpowers
  8871  000546  20F4               	addwfc	prodh,w,c
  8872  000548  6EF7               	movwf	tblptrh,c
  8873  00054A                     	if	1	;There are 3 active tblptr bytes
  8874  00054A  6AF8               	clrf	tblptru,c
  8875  00054C  0E00               	movlw	low (__mediumconst shr (0+16))
  8876  00054E  22F8               	addwfc	tblptru,f,c
  8877  000550                     	endif
  8878  000550  0009               	tblrd		*+
  8879  000552  50F5               	movf	tablat,w,c
  8880  000554  5C1B               	subwf	i2printf@val,w,c
  8881  000556  0009               	tblrd		*+
  8882  000558  50F5               	movf	tablat,w,c
  8883  00055A  581C               	subwfb	i2printf@val+1,w,c
  8884  00055C  A0D8               	btfss	status,0,c
  8885  00055E  D025               	goto	i2l3491
  8886                           
  8887                           ;doprnt.c: 1307: break;
  8888  000560  2A20               	incf	i2printf@c,f,c
  8889  000562  D7E7               	goto	i2l3461
  8890  000564                     i2l3473:
  8891                           
  8892                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8893  000564  0E01               	movlw	1
  8894  000566  6E20               	movwf	i2printf@c,c
  8895  000568                     i2l3475:
  8896  000568  0E04               	movlw	4
  8897  00056A  1820               	xorwf	i2printf@c,w,c
  8898  00056C  B4D8               	btfsc	status,2,c
  8899  00056E  D01D               	goto	i2l3491
  8900                           
  8901                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8902  000570  5020               	movf	i2printf@c,w,c
  8903  000572  0D02               	mullw	2
  8904  000574  0E04               	movlw	low _hexpowers
  8905  000576  24F3               	addwf	prodl,w,c
  8906  000578  6EF6               	movwf	tblptrl,c
  8907  00057A  0EFF               	movlw	high _hexpowers
  8908  00057C  20F4               	addwfc	prodh,w,c
  8909  00057E  6EF7               	movwf	tblptrh,c
  8910  000580                     	if	1	;There are 3 active tblptr bytes
  8911  000580  6AF8               	clrf	tblptru,c
  8912  000582  0E00               	movlw	low (__mediumconst shr (0+16))
  8913  000584  22F8               	addwfc	tblptru,f,c
  8914  000586                     	endif
  8915  000586  0009               	tblrd		*+
  8916  000588  50F5               	movf	tablat,w,c
  8917  00058A  5C1B               	subwf	i2printf@val,w,c
  8918  00058C  0009               	tblrd		*+
  8919  00058E  50F5               	movf	tablat,w,c
  8920  000590  581C               	subwfb	i2printf@val+1,w,c
  8921  000592  A0D8               	btfss	status,0,c
  8922  000594  D00A               	goto	i2l3491
  8923                           
  8924                           ;doprnt.c: 1318: break;
  8925  000596  2A20               	incf	i2printf@c,f,c
  8926  000598  D7E7               	goto	i2l3475
  8927  00059A                     i2l3489:
  8928  00059A  501D               	movf	i2printf@flag,w,c
  8929  00059C  0B80               	andlw	128
  8930                           
  8931                           ; Switch size 1, requested type "space"
  8932                           ; Number of cases is 2, Range of values is 0 to 128
  8933                           ; switch strategies available:
  8934                           ; Name         Instructions Cycles
  8935                           ; simple_byte            7     4 (average)
  8936                           ;	Chosen strategy is simple_byte
  8937  00059E  0A00               	xorlw	0	; case 0
  8938  0005A0  B4D8               	btfsc	status,2,c
  8939  0005A2  D7C5               	goto	i2l3459
  8940  0005A4  0A80               	xorlw	128	; case 128
  8941  0005A6  B4D8               	btfsc	status,2,c
  8942  0005A8  D7DD               	goto	i2l3473
  8943  0005AA                     i2l3491:
  8944                           
  8945                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8946  0005AA  501E               	movf	i2printf@width,w,c
  8947  0005AC  101F               	iorwf	i2printf@width+1,w,c
  8948  0005AE  B4D8               	btfsc	status,2,c
  8949  0005B0  D009               	goto	i2l3497
  8950  0005B2  C01D  F013         	movff	i2printf@flag,??i2_printf
  8951  0005B6  0E03               	movlw	3
  8952  0005B8  1613               	andwf	??i2_printf,f,c
  8953  0005BA  B4D8               	btfsc	status,2,c
  8954  0005BC  D003               	goto	i2l3497
  8955                           
  8956                           ;doprnt.c: 1346: width--;
  8957  0005BE  061E               	decf	i2printf@width,f,c
  8958  0005C0  A0D8               	btfss	status,0,c
  8959  0005C2  061F               	decf	i2printf@width+1,f,c
  8960  0005C4                     i2l3497:
  8961                           
  8962                           ;doprnt.c: 1381: if(width > c)
  8963  0005C4  0E80               	movlw	128
  8964  0005C6  BE20               	btfsc	i2printf@c,7,c
  8965  0005C8  0E7F               	movlw	127
  8966  0005CA  6E13               	movwf	??i2_printf& (0+255),c
  8967  0005CC  501E               	movf	i2printf@width,w,c
  8968  0005CE  5C20               	subwf	i2printf@c,w,c
  8969  0005D0  501F               	movf	i2printf@width+1,w,c
  8970  0005D2  0A80               	xorlw	128
  8971  0005D4  5813               	subwfb	??i2_printf& (0+255),w,c
  8972  0005D6  B0D8               	btfsc	status,0,c
  8973  0005D8  D007               	goto	i2l3501
  8974                           
  8975                           ;doprnt.c: 1382: width -= c;
  8976  0005DA  5020               	movf	i2printf@c,w,c
  8977  0005DC  5E1E               	subwf	i2printf@width,f,c
  8978  0005DE  0E00               	movlw	0
  8979  0005E0  BE20               	btfsc	i2printf@c,7,c
  8980  0005E2  0EFF               	movlw	255
  8981  0005E4  5A1F               	subwfb	i2printf@width+1,f,c
  8982  0005E6  D004               	goto	i2l3503
  8983  0005E8                     i2l3501:
  8984                           
  8985                           ;doprnt.c: 1383: else
  8986                           ;doprnt.c: 1384: width = 0;
  8987  0005E8  0E00               	movlw	0
  8988  0005EA  6E1F               	movwf	i2printf@width+1,c
  8989  0005EC  0E00               	movlw	0
  8990  0005EE  6E1E               	movwf	i2printf@width,c
  8991  0005F0                     i2l3503:
  8992                           
  8993                           ;doprnt.c: 1387: if(flag & 0x04) {
  8994  0005F0  A41D               	btfss	i2printf@flag,2,c
  8995  0005F2  D014               	goto	i2l3515
  8996                           
  8997                           ;doprnt.c: 1392: if(flag & 0x03)
  8998  0005F4  C01D  F013         	movff	i2printf@flag,??i2_printf
  8999  0005F8  0E03               	movlw	3
  9000  0005FA  1613               	andwf	??i2_printf,f,c
  9001  0005FC  B4D8               	btfsc	status,2,c
  9002  0005FE  D003               	goto	i2l3509
  9003                           
  9004                           ;doprnt.c: 1393: (putch('-') );
  9005  000600  0E2D               	movlw	45
  9006  000602  ECC9  F00E         	call	i2_putch
  9007  000606                     i2l3509:
  9008                           
  9009                           ;doprnt.c: 1415: if(width)
  9010  000606  501E               	movf	i2printf@width,w,c
  9011  000608  101F               	iorwf	i2printf@width+1,w,c
  9012  00060A  B4D8               	btfsc	status,2,c
  9013  00060C  D01E               	goto	i2l3525
  9014                           
  9015                           ;doprnt.c: 1417: (putch('0') );
  9016                           
  9017                           ;doprnt.c: 1416: do
  9018  00060E  0E30               	movlw	48
  9019  000610  ECC9  F00E         	call	i2_putch
  9020                           
  9021                           ;doprnt.c: 1418: while(--width);
  9022  000614  061E               	decf	i2printf@width,f,c
  9023  000616  A0D8               	btfss	status,0,c
  9024  000618  061F               	decf	i2printf@width+1,f,c
  9025  00061A  D7F5               	goto	i2l3509
  9026  00061C                     i2l3515:
  9027                           
  9028                           ;doprnt.c: 1422: {
  9029                           ;doprnt.c: 1424: if(width
  9030                           ;doprnt.c: 1428: )
  9031  00061C  501E               	movf	i2printf@width,w,c
  9032  00061E  101F               	iorwf	i2printf@width+1,w,c
  9033  000620  B4D8               	btfsc	status,2,c
  9034  000622  D00A               	goto	i2l3521
  9035  000624                     i2l3517:
  9036                           
  9037                           ;doprnt.c: 1430: (putch(' ') );
  9038  000624  0E20               	movlw	32
  9039  000626  ECC9  F00E         	call	i2_putch
  9040                           
  9041                           ;doprnt.c: 1431: while(--width);
  9042  00062A  061E               	decf	i2printf@width,f,c
  9043  00062C  A0D8               	btfss	status,0,c
  9044  00062E  061F               	decf	i2printf@width+1,f,c
  9045  000630  501E               	movf	i2printf@width,w,c
  9046  000632  101F               	iorwf	i2printf@width+1,w,c
  9047  000634  A4D8               	btfss	status,2,c
  9048  000636  D7F6               	goto	i2l3517
  9049  000638                     i2l3521:
  9050                           
  9051                           ;doprnt.c: 1438: if(flag & 0x03)
  9052  000638  C01D  F013         	movff	i2printf@flag,??i2_printf
  9053  00063C  0E03               	movlw	3
  9054  00063E  1613               	andwf	??i2_printf,f,c
  9055  000640  B4D8               	btfsc	status,2,c
  9056  000642  D003               	goto	i2l3525
  9057                           
  9058                           ;doprnt.c: 1439: (putch('-') );
  9059  000644  0E2D               	movlw	45
  9060  000646  ECC9  F00E         	call	i2_putch
  9061  00064A                     i2l3525:
  9062                           
  9063                           ;doprnt.c: 1469: }
  9064                           ;doprnt.c: 1472: prec = c;
  9065  00064A  C020  F01A         	movff	i2printf@c,i2printf@prec
  9066                           
  9067                           ;doprnt.c: 1474: while(prec--) {
  9068  00064E  D059               	goto	i2l3539
  9069  000650                     i2l3527:
  9070                           
  9071                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9072  000650  501A               	movf	i2printf@prec,w,c
  9073  000652  0D02               	mullw	2
  9074  000654  0EFA               	movlw	low _dpowers
  9075  000656  24F3               	addwf	prodl,w,c
  9076  000658  6EF6               	movwf	tblptrl,c
  9077  00065A  0EFE               	movlw	high _dpowers
  9078  00065C  20F4               	addwfc	prodh,w,c
  9079  00065E  6EF7               	movwf	tblptrh,c
  9080  000660                     	if	1	;There are 3 active tblptr bytes
  9081  000660  6AF8               	clrf	tblptru,c
  9082  000662  0E00               	movlw	low (__mediumconst shr (0+16))
  9083  000664  22F8               	addwfc	tblptru,f,c
  9084  000666                     	endif
  9085  000666  0009               	tblrd		*+
  9086  000668  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  9087  00066C  000A               	tblrd		*-
  9088  00066E  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  9089  000672  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  9090  000676  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  9091  00067A  ECA6  F00B         	call	i2___lwdiv	;wreg free
  9092  00067E  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  9093  000682  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  9094  000686  0E00               	movlw	0
  9095  000688  6E0B               	movwf	i2___lwmod@divisor+1,c
  9096  00068A  0E0A               	movlw	10
  9097  00068C  6E0A               	movwf	i2___lwmod@divisor,c
  9098  00068E  EC67  F00C         	call	i2___lwmod	;wreg free
  9099  000692  5008               	movf	?i2___lwmod,w,c
  9100  000694  0F30               	addlw	48
  9101  000696  6E20               	movwf	i2printf@c,c
  9102                           
  9103                           ;doprnt.c: 1491: break;
  9104  000698  D031               	goto	i2l3537
  9105  00069A                     i2l3529:
  9106                           
  9107                           ;doprnt.c: 1499: {
  9108                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  9109  00069A  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  9110  00069E  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  9111  0006A2  501A               	movf	i2printf@prec,w,c
  9112  0006A4  0D02               	mullw	2
  9113  0006A6  0E04               	movlw	low _hexpowers
  9114  0006A8  24F3               	addwf	prodl,w,c
  9115  0006AA  6EF6               	movwf	tblptrl,c
  9116  0006AC  0EFF               	movlw	high _hexpowers
  9117  0006AE  20F4               	addwfc	prodh,w,c
  9118  0006B0  6EF7               	movwf	tblptrh,c
  9119  0006B2                     	if	1	;There are 3 active tblptr bytes
  9120  0006B2  6AF8               	clrf	tblptru,c
  9121  0006B4  0E00               	movlw	low (__mediumconst shr (0+16))
  9122  0006B6  22F8               	addwfc	tblptru,f,c
  9123  0006B8                     	endif
  9124  0006B8  0009               	tblrd		*+
  9125  0006BA  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  9126  0006BE  000A               	tblrd		*-
  9127  0006C0  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  9128  0006C4  ECA6  F00B         	call	i2___lwdiv	;wreg free
  9129  0006C8  5001               	movf	?i2___lwdiv,w,c
  9130  0006CA  0B0F               	andlw	15
  9131  0006CC  6E17               	movwf	i2printf@idx,c
  9132                           
  9133                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  9134  0006CE  5017               	movf	i2printf@idx,w,c
  9135  0006D0  0D01               	mullw	1
  9136  0006D2  0E3C               	movlw	low STR_16
  9137  0006D4  24F3               	addwf	prodl,w,c
  9138  0006D6  6EF6               	movwf	tblptrl,c
  9139  0006D8  0EFF               	movlw	high STR_16
  9140  0006DA  20F4               	addwfc	prodh,w,c
  9141  0006DC  6EF7               	movwf	tblptrh,c
  9142  0006DE                     	if	1	;There are 3 active tblptr bytes
  9143  0006DE  6AF8               	clrf	tblptru,c
  9144  0006E0  0E00               	movlw	low (__mediumconst shr (0+16))
  9145  0006E2  22F8               	addwfc	tblptru,f,c
  9146  0006E4                     	endif
  9147  0006E4  0008               	tblrd		*
  9148  0006E6  CFF5 F020          	movff	tablat,i2printf@c
  9149                           
  9150                           ;doprnt.c: 1523: }
  9151                           
  9152                           ;doprnt.c: 1508: }
  9153                           ;doprnt.c: 1510: break;
  9154  0006EA  D008               	goto	i2l3537
  9155  0006EC                     i2l3535:
  9156  0006EC  501D               	movf	i2printf@flag,w,c
  9157  0006EE  0B80               	andlw	128
  9158                           
  9159                           ; Switch size 1, requested type "space"
  9160                           ; Number of cases is 2, Range of values is 0 to 128
  9161                           ; switch strategies available:
  9162                           ; Name         Instructions Cycles
  9163                           ; simple_byte            7     4 (average)
  9164                           ;	Chosen strategy is simple_byte
  9165  0006F0  0A00               	xorlw	0	; case 0
  9166  0006F2  B4D8               	btfsc	status,2,c
  9167  0006F4  D7AD               	goto	i2l3527
  9168  0006F6  0A80               	xorlw	128	; case 128
  9169  0006F8  B4D8               	btfsc	status,2,c
  9170  0006FA  D7CF               	goto	i2l3529
  9171  0006FC                     i2l3537:
  9172                           
  9173                           ;doprnt.c: 1524: (putch(c) );
  9174  0006FC  5020               	movf	i2printf@c,w,c
  9175  0006FE  ECC9  F00E         	call	i2_putch
  9176  000702                     i2l3539:
  9177  000702  061A               	decf	i2printf@prec,f,c
  9178  000704  281A               	incf	i2printf@prec,w,c
  9179  000706  A4D8               	btfss	status,2,c
  9180  000708  D7F1               	goto	i2l3535
  9181  00070A                     i2l3541:
  9182  00070A  C00D  FFF6         	movff	i2printf@f,tblptrl
  9183  00070E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9184  000712  4A0D               	infsnz	i2printf@f,f,c
  9185  000714  2A0E               	incf	i2printf@f+1,f,c
  9186  000716                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9187  000716  6AF8               	clrf	tblptru,c
  9188  000718                     	endif
  9189  000718                     	if	0	;tblptru may be non-zero
  9190  000718                     	endif
  9191  000718  0008               	tblrd		*
  9192  00071A  CFF5 F020          	movff	tablat,i2printf@c
  9193  00071E  5020               	movf	i2printf@c,w,c
  9194  000720  B4D8               	btfsc	status,2,c
  9195  000722  0012               	return	
  9196  000724  D66A               	goto	i2l3415
  9197  000726                     __end_ofi2_printf:
  9198                           	opt stack 0
  9199                           tosu	equ	0xFFF
  9200                           tosh	equ	0xFFE
  9201                           tosl	equ	0xFFD
  9202                           pclatu	equ	0xFFB
  9203                           pclath	equ	0xFFA
  9204                           tblptru	equ	0xFF8
  9205                           tblptrh	equ	0xFF7
  9206                           tblptrl	equ	0xFF6
  9207                           tablat	equ	0xFF5
  9208                           prodh	equ	0xFF4
  9209                           prodl	equ	0xFF3
  9210                           intcon	equ	0xFF2
  9211                           intcon3	equ	0xFF0
  9212                           postinc0	equ	0xFEE
  9213                           fsr0h	equ	0xFEA
  9214                           fsr0l	equ	0xFE9
  9215                           wreg	equ	0xFE8
  9216                           fsr1h	equ	0xFE2
  9217                           fsr1l	equ	0xFE1
  9218                           indf2	equ	0xFDF
  9219                           postinc2	equ	0xFDE
  9220                           postdec2	equ	0xFDD
  9221                           fsr2h	equ	0xFDA
  9222                           fsr2l	equ	0xFD9
  9223                           status	equ	0xFD8
  9224                           
  9225 ;; *************** function i2_putch *****************
  9226 ;; Defined at:
  9227 ;;		line 38 in file "lcd.c"
  9228 ;; Parameters:    Size  Location     Type
  9229 ;;  data            1    wreg     unsigned char 
  9230 ;; Auto vars:     Size  Location     Type
  9231 ;;  data            1    2[COMRAM] unsigned char 
  9232 ;; Return value:  Size  Location     Type
  9233 ;;                  1    wreg      void 
  9234 ;; Registers used:
  9235 ;;		wreg, status,2, status,0, cstack
  9236 ;; Tracked objects:
  9237 ;;		On entry : 0/0
  9238 ;;		On exit  : 0/0
  9239 ;;		Unchanged: 0/0
  9240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9242 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9244 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9245 ;;Total ram usage:        1 bytes
  9246 ;; Hardware stack levels used:    1
  9247 ;; Hardware stack levels required when called:    1
  9248 ;; This function calls:
  9249 ;;		i2_lcdNibble
  9250 ;; This function is called by:
  9251 ;;		i2_printf
  9252 ;; This function uses a non-reentrant model
  9253 ;;
  9254                           
  9255                           	psect	text58
  9256  001D92                     __ptext58:
  9257                           	opt stack 0
  9258  001D92                     i2_putch:
  9259                           	opt stack 22
  9260                           
  9261                           ;incstack = 0
  9262                           ;i2putch@data stored from wreg
  9263  001D92  6E03               	movwf	i2putch@data,c
  9264                           
  9265                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  9266  001D94  848C               	bsf	3980,2,c	;volatile
  9267                           
  9268                           ;lcd.c: 40: lcdNibble(data);
  9269  001D96  5003               	movf	i2putch@data,w,c
  9270  001D98  EC7B  F00B         	call	i2_lcdNibble
  9271  001D9C  0012               	return		;funcret
  9272  001D9E                     __end_ofi2_putch:
  9273                           	opt stack 0
  9274                           tosu	equ	0xFFF
  9275                           tosh	equ	0xFFE
  9276                           tosl	equ	0xFFD
  9277                           pclatu	equ	0xFFB
  9278                           pclath	equ	0xFFA
  9279                           tblptru	equ	0xFF8
  9280                           tblptrh	equ	0xFF7
  9281                           tblptrl	equ	0xFF6
  9282                           tablat	equ	0xFF5
  9283                           prodh	equ	0xFF4
  9284                           prodl	equ	0xFF3
  9285                           intcon	equ	0xFF2
  9286                           intcon3	equ	0xFF0
  9287                           postinc0	equ	0xFEE
  9288                           fsr0h	equ	0xFEA
  9289                           fsr0l	equ	0xFE9
  9290                           wreg	equ	0xFE8
  9291                           fsr1h	equ	0xFE2
  9292                           fsr1l	equ	0xFE1
  9293                           indf2	equ	0xFDF
  9294                           postinc2	equ	0xFDE
  9295                           postdec2	equ	0xFDD
  9296                           fsr2h	equ	0xFDA
  9297                           fsr2l	equ	0xFD9
  9298                           status	equ	0xFD8
  9299                           
  9300 ;; *************** function i2_isdigit *****************
  9301 ;; Defined at:
  9302 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/isdigit.c"
  9303 ;; Parameters:    Size  Location     Type
  9304 ;;  c               1    wreg     unsigned char 
  9305 ;; Auto vars:     Size  Location     Type
  9306 ;;  c               1    2[COMRAM] unsigned char 
  9307 ;; Return value:  Size  Location     Type
  9308 ;;		None               void
  9309 ;; Registers used:
  9310 ;;		wreg, status,2, status,0
  9311 ;; Tracked objects:
  9312 ;;		On entry : 0/0
  9313 ;;		On exit  : 0/0
  9314 ;;		Unchanged: 0/0
  9315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9317 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9318 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9319 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9320 ;;Total ram usage:        3 bytes
  9321 ;; Hardware stack levels used:    1
  9322 ;; This function calls:
  9323 ;;		Nothing
  9324 ;; This function is called by:
  9325 ;;		i2_printf
  9326 ;; This function uses a non-reentrant model
  9327 ;;
  9328                           
  9329                           	psect	text59
  9330  001CA4                     __ptext59:
  9331                           	opt stack 0
  9332  001CA4                     i2_isdigit:
  9333                           	opt stack 23
  9334                           
  9335                           ;incstack = 0
  9336                           ;i2isdigit@c stored from wreg
  9337  001CA4  6E03               	movwf	i2isdigit@c,c
  9338  001CA6  0E00               	movlw	0
  9339  001CA8  6E02               	movwf	i2_isdigit$1388,c
  9340  001CAA  0E3A               	movlw	58
  9341  001CAC  6003               	cpfslt	i2isdigit@c,c
  9342  001CAE  D005               	goto	i2l3065
  9343  001CB0  0E2F               	movlw	47
  9344  001CB2  6403               	cpfsgt	i2isdigit@c,c
  9345  001CB4  D002               	goto	i2l3065
  9346  001CB6  0E01               	movlw	1
  9347  001CB8  6E02               	movwf	i2_isdigit$1388,c
  9348  001CBA                     i2l3065:
  9349  001CBA  C002  F001         	movff	i2_isdigit$1388,??i2_isdigit
  9350  001CBE  3001               	rrcf	??i2_isdigit,w,c
  9351  001CC0  0012               	return	
  9352  001CC2                     __end_ofi2_isdigit:
  9353                           	opt stack 0
  9354                           tosu	equ	0xFFF
  9355                           tosh	equ	0xFFE
  9356                           tosl	equ	0xFFD
  9357                           pclatu	equ	0xFFB
  9358                           pclath	equ	0xFFA
  9359                           tblptru	equ	0xFF8
  9360                           tblptrh	equ	0xFF7
  9361                           tblptrl	equ	0xFF6
  9362                           tablat	equ	0xFF5
  9363                           prodh	equ	0xFF4
  9364                           prodl	equ	0xFF3
  9365                           intcon	equ	0xFF2
  9366                           intcon3	equ	0xFF0
  9367                           postinc0	equ	0xFEE
  9368                           fsr0h	equ	0xFEA
  9369                           fsr0l	equ	0xFE9
  9370                           wreg	equ	0xFE8
  9371                           fsr1h	equ	0xFE2
  9372                           fsr1l	equ	0xFE1
  9373                           indf2	equ	0xFDF
  9374                           postinc2	equ	0xFDE
  9375                           postdec2	equ	0xFDD
  9376                           fsr2h	equ	0xFDA
  9377                           fsr2l	equ	0xFD9
  9378                           status	equ	0xFD8
  9379                           
  9380 ;; *************** function i2___wmul *****************
  9381 ;; Defined at:
  9382 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/Umul16.c"
  9383 ;; Parameters:    Size  Location     Type
  9384 ;;  multiplier      2    0[COMRAM] unsigned int 
  9385 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9386 ;; Auto vars:     Size  Location     Type
  9387 ;;  __wmul          2    4[COMRAM] unsigned int 
  9388 ;; Return value:  Size  Location     Type
  9389 ;;                  2    0[COMRAM] unsigned int 
  9390 ;; Registers used:
  9391 ;;		wreg, status,2, status,0, prodl, prodh
  9392 ;; Tracked objects:
  9393 ;;		On entry : 0/0
  9394 ;;		On exit  : 0/0
  9395 ;;		Unchanged: 0/0
  9396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9397 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9398 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9400 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9401 ;;Total ram usage:        6 bytes
  9402 ;; Hardware stack levels used:    1
  9403 ;; This function calls:
  9404 ;;		Nothing
  9405 ;; This function is called by:
  9406 ;;		i2_printf
  9407 ;; This function uses a non-reentrant model
  9408 ;;
  9409                           
  9410                           	psect	text60
  9411  001B7C                     __ptext60:
  9412                           	opt stack 0
  9413  001B7C                     i2___wmul:
  9414                           	opt stack 23
  9415                           
  9416                           ;incstack = 0
  9417  001B7C  5001               	movf	i2___wmul@multiplier,w,c
  9418  001B7E  0203               	mulwf	i2___wmul@multiplicand,c
  9419  001B80  CFF3 F005          	movff	prodl,i2___wmul@product
  9420  001B84  CFF4 F006          	movff	prodh,i2___wmul@product+1
  9421  001B88  5001               	movf	i2___wmul@multiplier,w,c
  9422  001B8A  0204               	mulwf	i2___wmul@multiplicand+1,c
  9423  001B8C  50F3               	movf	prodl,w,c
  9424  001B8E  2606               	addwf	i2___wmul@product+1,f,c
  9425  001B90  5002               	movf	i2___wmul@multiplier+1,w,c
  9426  001B92  0203               	mulwf	i2___wmul@multiplicand,c
  9427  001B94  50F3               	movf	prodl,w,c
  9428  001B96  2606               	addwf	i2___wmul@product+1,f,c
  9429  001B98  C005  F001         	movff	i2___wmul@product,?i2___wmul
  9430  001B9C  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  9431  001BA0  0012               	return	
  9432  001BA2                     __end_ofi2___wmul:
  9433                           	opt stack 0
  9434                           tosu	equ	0xFFF
  9435                           tosh	equ	0xFFE
  9436                           tosl	equ	0xFFD
  9437                           pclatu	equ	0xFFB
  9438                           pclath	equ	0xFFA
  9439                           tblptru	equ	0xFF8
  9440                           tblptrh	equ	0xFF7
  9441                           tblptrl	equ	0xFF6
  9442                           tablat	equ	0xFF5
  9443                           prodh	equ	0xFF4
  9444                           prodl	equ	0xFF3
  9445                           intcon	equ	0xFF2
  9446                           intcon3	equ	0xFF0
  9447                           postinc0	equ	0xFEE
  9448                           fsr0h	equ	0xFEA
  9449                           fsr0l	equ	0xFE9
  9450                           wreg	equ	0xFE8
  9451                           fsr1h	equ	0xFE2
  9452                           fsr1l	equ	0xFE1
  9453                           indf2	equ	0xFDF
  9454                           postinc2	equ	0xFDE
  9455                           postdec2	equ	0xFDD
  9456                           fsr2h	equ	0xFDA
  9457                           fsr2l	equ	0xFD9
  9458                           status	equ	0xFD8
  9459                           
  9460 ;; *************** function i2___lwmod *****************
  9461 ;; Defined at:
  9462 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
  9463 ;; Parameters:    Size  Location     Type
  9464 ;;  dividend        2    7[COMRAM] unsigned int 
  9465 ;;  divisor         2    9[COMRAM] unsigned int 
  9466 ;; Auto vars:     Size  Location     Type
  9467 ;;  __lwmod         1   11[COMRAM] unsigned char 
  9468 ;; Return value:  Size  Location     Type
  9469 ;;                  2    7[COMRAM] unsigned int 
  9470 ;; Registers used:
  9471 ;;		wreg, status,2, status,0
  9472 ;; Tracked objects:
  9473 ;;		On entry : 0/0
  9474 ;;		On exit  : 0/0
  9475 ;;		Unchanged: 0/0
  9476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9477 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9478 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9480 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9481 ;;Total ram usage:        5 bytes
  9482 ;; Hardware stack levels used:    1
  9483 ;; This function calls:
  9484 ;;		Nothing
  9485 ;; This function is called by:
  9486 ;;		i2_printf
  9487 ;; This function uses a non-reentrant model
  9488 ;;
  9489                           
  9490                           	psect	text61
  9491  0018CE                     __ptext61:
  9492                           	opt stack 0
  9493  0018CE                     i2___lwmod:
  9494                           	opt stack 23
  9495                           
  9496                           ;incstack = 0
  9497  0018CE  500A               	movf	i2___lwmod@divisor,w,c
  9498  0018D0  100B               	iorwf	i2___lwmod@divisor+1,w,c
  9499  0018D2  B4D8               	btfsc	status,2,c
  9500  0018D4  D018               	goto	i2l1116
  9501  0018D6  0E01               	movlw	1
  9502  0018D8  6E0C               	movwf	i2___lwmod@counter,c
  9503  0018DA  D004               	goto	i2l3097
  9504  0018DC                     i2l3095:
  9505  0018DC  90D8               	bcf	status,0,c
  9506  0018DE  360A               	rlcf	i2___lwmod@divisor,f,c
  9507  0018E0  360B               	rlcf	i2___lwmod@divisor+1,f,c
  9508  0018E2  2A0C               	incf	i2___lwmod@counter,f,c
  9509  0018E4                     i2l3097:
  9510  0018E4  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  9511  0018E6  D7FA               	goto	i2l3095
  9512  0018E8                     i2l3099:
  9513  0018E8  500A               	movf	i2___lwmod@divisor,w,c
  9514  0018EA  5C08               	subwf	i2___lwmod@dividend,w,c
  9515  0018EC  500B               	movf	i2___lwmod@divisor+1,w,c
  9516  0018EE  5809               	subwfb	i2___lwmod@dividend+1,w,c
  9517  0018F0  A0D8               	btfss	status,0,c
  9518  0018F2  D004               	goto	i2l3103
  9519  0018F4  500A               	movf	i2___lwmod@divisor,w,c
  9520  0018F6  5E08               	subwf	i2___lwmod@dividend,f,c
  9521  0018F8  500B               	movf	i2___lwmod@divisor+1,w,c
  9522  0018FA  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  9523  0018FC                     i2l3103:
  9524  0018FC  90D8               	bcf	status,0,c
  9525  0018FE  320B               	rrcf	i2___lwmod@divisor+1,f,c
  9526  001900  320A               	rrcf	i2___lwmod@divisor,f,c
  9527  001902  2E0C               	decfsz	i2___lwmod@counter,f,c
  9528  001904  D7F1               	goto	i2l3099
  9529  001906                     i2l1116:
  9530  001906  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  9531  00190A  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  9532  00190E  0012               	return		;funcret
  9533  001910                     __end_ofi2___lwmod:
  9534                           	opt stack 0
  9535                           tosu	equ	0xFFF
  9536                           tosh	equ	0xFFE
  9537                           tosl	equ	0xFFD
  9538                           pclatu	equ	0xFFB
  9539                           pclath	equ	0xFFA
  9540                           tblptru	equ	0xFF8
  9541                           tblptrh	equ	0xFF7
  9542                           tblptrl	equ	0xFF6
  9543                           tablat	equ	0xFF5
  9544                           prodh	equ	0xFF4
  9545                           prodl	equ	0xFF3
  9546                           intcon	equ	0xFF2
  9547                           intcon3	equ	0xFF0
  9548                           postinc0	equ	0xFEE
  9549                           fsr0h	equ	0xFEA
  9550                           fsr0l	equ	0xFE9
  9551                           wreg	equ	0xFE8
  9552                           fsr1h	equ	0xFE2
  9553                           fsr1l	equ	0xFE1
  9554                           indf2	equ	0xFDF
  9555                           postinc2	equ	0xFDE
  9556                           postdec2	equ	0xFDD
  9557                           fsr2h	equ	0xFDA
  9558                           fsr2l	equ	0xFD9
  9559                           status	equ	0xFD8
  9560                           
  9561 ;; *************** function i2___lwdiv *****************
  9562 ;; Defined at:
  9563 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  9564 ;; Parameters:    Size  Location     Type
  9565 ;;  dividend        2    0[COMRAM] unsigned int 
  9566 ;;  divisor         2    2[COMRAM] unsigned int 
  9567 ;; Auto vars:     Size  Location     Type
  9568 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  9569 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  9570 ;; Return value:  Size  Location     Type
  9571 ;;                  2    0[COMRAM] unsigned int 
  9572 ;; Registers used:
  9573 ;;		wreg, status,2, status,0
  9574 ;; Tracked objects:
  9575 ;;		On entry : 0/0
  9576 ;;		On exit  : 0/0
  9577 ;;		Unchanged: 0/0
  9578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9579 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9580 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9582 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9583 ;;Total ram usage:        7 bytes
  9584 ;; Hardware stack levels used:    1
  9585 ;; This function calls:
  9586 ;;		Nothing
  9587 ;; This function is called by:
  9588 ;;		i2_printf
  9589 ;; This function uses a non-reentrant model
  9590 ;;
  9591                           
  9592                           	psect	text62
  9593  00174C                     __ptext62:
  9594                           	opt stack 0
  9595  00174C                     i2___lwdiv:
  9596                           	opt stack 23
  9597                           
  9598                           ;incstack = 0
  9599  00174C  0E00               	movlw	0
  9600  00174E  6E06               	movwf	i2___lwdiv@quotient+1,c
  9601  001750  0E00               	movlw	0
  9602  001752  6E05               	movwf	i2___lwdiv@quotient,c
  9603  001754  5003               	movf	i2___lwdiv@divisor,w,c
  9604  001756  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  9605  001758  B4D8               	btfsc	status,2,c
  9606  00175A  D01C               	goto	i2l1106
  9607  00175C  0E01               	movlw	1
  9608  00175E  6E07               	movwf	i2___lwdiv@counter,c
  9609  001760  D004               	goto	i2l3077
  9610  001762                     i2l3075:
  9611  001762  90D8               	bcf	status,0,c
  9612  001764  3603               	rlcf	i2___lwdiv@divisor,f,c
  9613  001766  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  9614  001768  2A07               	incf	i2___lwdiv@counter,f,c
  9615  00176A                     i2l3077:
  9616  00176A  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  9617  00176C  D7FA               	goto	i2l3075
  9618  00176E                     i2l3079:
  9619  00176E  90D8               	bcf	status,0,c
  9620  001770  3605               	rlcf	i2___lwdiv@quotient,f,c
  9621  001772  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  9622  001774  5003               	movf	i2___lwdiv@divisor,w,c
  9623  001776  5C01               	subwf	i2___lwdiv@dividend,w,c
  9624  001778  5004               	movf	i2___lwdiv@divisor+1,w,c
  9625  00177A  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  9626  00177C  A0D8               	btfss	status,0,c
  9627  00177E  D005               	goto	i2l3087
  9628  001780  5003               	movf	i2___lwdiv@divisor,w,c
  9629  001782  5E01               	subwf	i2___lwdiv@dividend,f,c
  9630  001784  5004               	movf	i2___lwdiv@divisor+1,w,c
  9631  001786  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  9632  001788  8005               	bsf	i2___lwdiv@quotient,0,c
  9633  00178A                     i2l3087:
  9634  00178A  90D8               	bcf	status,0,c
  9635  00178C  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  9636  00178E  3203               	rrcf	i2___lwdiv@divisor,f,c
  9637  001790  2E07               	decfsz	i2___lwdiv@counter,f,c
  9638  001792  D7ED               	goto	i2l3079
  9639  001794                     i2l1106:
  9640  001794  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  9641  001798  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  9642  00179C  0012               	return		;funcret
  9643  00179E                     __end_ofi2___lwdiv:
  9644                           	opt stack 0
  9645                           tosu	equ	0xFFF
  9646                           tosh	equ	0xFFE
  9647                           tosl	equ	0xFFD
  9648                           pclatu	equ	0xFFB
  9649                           pclath	equ	0xFFA
  9650                           tblptru	equ	0xFF8
  9651                           tblptrh	equ	0xFF7
  9652                           tblptrl	equ	0xFF6
  9653                           tablat	equ	0xFF5
  9654                           prodh	equ	0xFF4
  9655                           prodl	equ	0xFF3
  9656                           intcon	equ	0xFF2
  9657                           intcon3	equ	0xFF0
  9658                           postinc0	equ	0xFEE
  9659                           fsr0h	equ	0xFEA
  9660                           fsr0l	equ	0xFE9
  9661                           wreg	equ	0xFE8
  9662                           fsr1h	equ	0xFE2
  9663                           fsr1l	equ	0xFE1
  9664                           indf2	equ	0xFDF
  9665                           postinc2	equ	0xFDE
  9666                           postdec2	equ	0xFDD
  9667                           fsr2h	equ	0xFDA
  9668                           fsr2l	equ	0xFD9
  9669                           status	equ	0xFD8
  9670                           
  9671 ;; *************** function i2_initLCD *****************
  9672 ;; Defined at:
  9673 ;;		line 22 in file "lcd.c"
  9674 ;; Parameters:    Size  Location     Type
  9675 ;;		None
  9676 ;; Auto vars:     Size  Location     Type
  9677 ;;		None
  9678 ;; Return value:  Size  Location     Type
  9679 ;;                  1    wreg      void 
  9680 ;; Registers used:
  9681 ;;		wreg, status,2, status,0, cstack
  9682 ;; Tracked objects:
  9683 ;;		On entry : 0/0
  9684 ;;		On exit  : 0/0
  9685 ;;		Unchanged: 0/0
  9686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9689 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9690 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9691 ;;Total ram usage:        1 bytes
  9692 ;; Hardware stack levels used:    1
  9693 ;; Hardware stack levels required when called:    2
  9694 ;; This function calls:
  9695 ;;		i2_lcdInst
  9696 ;; This function is called by:
  9697 ;;		_keypressed
  9698 ;;		_tot_sorted
  9699 ;;		_op_time
  9700 ;;		_tin_results
  9701 ;;		_pop_results
  9702 ;; This function uses a non-reentrant model
  9703 ;;
  9704                           
  9705                           	psect	text63
  9706  001888                     __ptext63:
  9707                           	opt stack 0
  9708  001888                     i2_initLCD:
  9709                           	opt stack 22
  9710                           
  9711                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  9712                           
  9713                           ;incstack = 0
  9714  001888  0E31               	movlw	49
  9715  00188A  6E04               	movwf	??i2_initLCD& (0+255),c
  9716  00188C  0EB2               	movlw	178
  9717  00188E                     i2u448_47:
  9718  00188E  2EE8               	decfsz	wreg,f,c
  9719  001890  D7FE               	bra	i2u448_47
  9720  001892  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  9721  001894  D7FC               	bra	i2u448_47
  9722  001896  D000               	nop2	
  9723                           
  9724                           ;lcd.c: 24: lcdInst(0b00110011);
  9725  001898  0E33               	movlw	51
  9726  00189A  ECCF  F00E         	call	i2_lcdInst
  9727                           
  9728                           ;lcd.c: 25: lcdInst(0b00110010);
  9729  00189E  0E32               	movlw	50
  9730  0018A0  ECCF  F00E         	call	i2_lcdInst
  9731                           
  9732                           ;lcd.c: 26: lcdInst(0b00101000);
  9733  0018A4  0E28               	movlw	40
  9734  0018A6  ECCF  F00E         	call	i2_lcdInst
  9735                           
  9736                           ;lcd.c: 27: lcdInst(0b00001111);
  9737  0018AA  0E0F               	movlw	15
  9738  0018AC  ECCF  F00E         	call	i2_lcdInst
  9739                           
  9740                           ;lcd.c: 28: lcdInst(0b00000110);
  9741  0018B0  0E06               	movlw	6
  9742  0018B2  ECCF  F00E         	call	i2_lcdInst
  9743                           
  9744                           ;lcd.c: 29: lcdInst(0b00000001);
  9745  0018B6  0E01               	movlw	1
  9746  0018B8  ECCF  F00E         	call	i2_lcdInst
  9747                           
  9748                           ;lcd.c: 30: _delay((unsigned long)((15)*(10000000/4000.0)));
  9749  0018BC  0E31               	movlw	49
  9750  0018BE  6E04               	movwf	??i2_initLCD& (0+255),c
  9751  0018C0  0EB2               	movlw	178
  9752  0018C2                     i2u449_47:
  9753  0018C2  2EE8               	decfsz	wreg,f,c
  9754  0018C4  D7FE               	bra	i2u449_47
  9755  0018C6  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  9756  0018C8  D7FC               	bra	i2u449_47
  9757  0018CA  D000               	nop2	
  9758  0018CC  0012               	return		;funcret
  9759  0018CE                     __end_ofi2_initLCD:
  9760                           	opt stack 0
  9761                           tosu	equ	0xFFF
  9762                           tosh	equ	0xFFE
  9763                           tosl	equ	0xFFD
  9764                           pclatu	equ	0xFFB
  9765                           pclath	equ	0xFFA
  9766                           tblptru	equ	0xFF8
  9767                           tblptrh	equ	0xFF7
  9768                           tblptrl	equ	0xFF6
  9769                           tablat	equ	0xFF5
  9770                           prodh	equ	0xFF4
  9771                           prodl	equ	0xFF3
  9772                           intcon	equ	0xFF2
  9773                           intcon3	equ	0xFF0
  9774                           postinc0	equ	0xFEE
  9775                           fsr0h	equ	0xFEA
  9776                           fsr0l	equ	0xFE9
  9777                           wreg	equ	0xFE8
  9778                           fsr1h	equ	0xFE2
  9779                           fsr1l	equ	0xFE1
  9780                           indf2	equ	0xFDF
  9781                           postinc2	equ	0xFDE
  9782                           postdec2	equ	0xFDD
  9783                           fsr2h	equ	0xFDA
  9784                           fsr2l	equ	0xFD9
  9785                           status	equ	0xFD8
  9786                           
  9787 ;; *************** function i2_lcdInst *****************
  9788 ;; Defined at:
  9789 ;;		line 33 in file "lcd.c"
  9790 ;; Parameters:    Size  Location     Type
  9791 ;;  data            1    wreg     unsigned char 
  9792 ;; Auto vars:     Size  Location     Type
  9793 ;;  data            1    2[COMRAM] unsigned char 
  9794 ;; Return value:  Size  Location     Type
  9795 ;;                  1    wreg      void 
  9796 ;; Registers used:
  9797 ;;		wreg, status,2, status,0, cstack
  9798 ;; Tracked objects:
  9799 ;;		On entry : 0/0
  9800 ;;		On exit  : 0/0
  9801 ;;		Unchanged: 0/0
  9802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9804 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9806 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9807 ;;Total ram usage:        1 bytes
  9808 ;; Hardware stack levels used:    1
  9809 ;; Hardware stack levels required when called:    1
  9810 ;; This function calls:
  9811 ;;		i2_lcdNibble
  9812 ;; This function is called by:
  9813 ;;		_keypressed
  9814 ;;		_tot_sorted
  9815 ;;		_op_time
  9816 ;;		_tin_results
  9817 ;;		_pop_results
  9818 ;;		i2_initLCD
  9819 ;; This function uses a non-reentrant model
  9820 ;;
  9821                           
  9822                           	psect	text64
  9823  001D9E                     __ptext64:
  9824                           	opt stack 0
  9825  001D9E                     i2_lcdInst:
  9826                           	opt stack 23
  9827                           
  9828                           ;incstack = 0
  9829                           ;i2lcdInst@data stored from wreg
  9830  001D9E  6E03               	movwf	i2lcdInst@data,c
  9831                           
  9832                           ;lcd.c: 34: LATDbits.LATD2 = 0;
  9833  001DA0  948C               	bcf	3980,2,c	;volatile
  9834                           
  9835                           ;lcd.c: 35: lcdNibble(data);
  9836  001DA2  5003               	movf	i2lcdInst@data,w,c
  9837  001DA4  EC7B  F00B         	call	i2_lcdNibble
  9838  001DA8  0012               	return		;funcret
  9839  001DAA                     __end_ofi2_lcdInst:
  9840                           	opt stack 0
  9841                           tosu	equ	0xFFF
  9842                           tosh	equ	0xFFE
  9843                           tosl	equ	0xFFD
  9844                           pclatu	equ	0xFFB
  9845                           pclath	equ	0xFFA
  9846                           tblptru	equ	0xFF8
  9847                           tblptrh	equ	0xFF7
  9848                           tblptrl	equ	0xFF6
  9849                           tablat	equ	0xFF5
  9850                           prodh	equ	0xFF4
  9851                           prodl	equ	0xFF3
  9852                           intcon	equ	0xFF2
  9853                           intcon3	equ	0xFF0
  9854                           postinc0	equ	0xFEE
  9855                           fsr0h	equ	0xFEA
  9856                           fsr0l	equ	0xFE9
  9857                           wreg	equ	0xFE8
  9858                           fsr1h	equ	0xFE2
  9859                           fsr1l	equ	0xFE1
  9860                           indf2	equ	0xFDF
  9861                           postinc2	equ	0xFDE
  9862                           postdec2	equ	0xFDD
  9863                           fsr2h	equ	0xFDA
  9864                           fsr2l	equ	0xFD9
  9865                           status	equ	0xFD8
  9866                           
  9867 ;; *************** function i2_lcdNibble *****************
  9868 ;; Defined at:
  9869 ;;		line 43 in file "lcd.c"
  9870 ;; Parameters:    Size  Location     Type
  9871 ;;  data            1    wreg     unsigned char 
  9872 ;; Auto vars:     Size  Location     Type
  9873 ;;  data            1    1[COMRAM] unsigned char 
  9874 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  9875 ;; Return value:  Size  Location     Type
  9876 ;;                  1    wreg      void 
  9877 ;; Registers used:
  9878 ;;		wreg, status,2, status,0
  9879 ;; Tracked objects:
  9880 ;;		On entry : 0/0
  9881 ;;		On exit  : 0/0
  9882 ;;		Unchanged: 0/0
  9883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9885 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9887 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9888 ;;Total ram usage:        2 bytes
  9889 ;; Hardware stack levels used:    1
  9890 ;; This function calls:
  9891 ;;		Nothing
  9892 ;; This function is called by:
  9893 ;;		i2_lcdInst
  9894 ;;		i2_putch
  9895 ;; This function uses a non-reentrant model
  9896 ;;
  9897                           
  9898                           	psect	text65
  9899  0016F6                     __ptext65:
  9900                           	opt stack 0
  9901  0016F6                     i2_lcdNibble:
  9902                           	opt stack 22
  9903                           
  9904                           ;incstack = 0
  9905                           ;i2lcdNibble@data stored from wreg
  9906  0016F6  6E02               	movwf	i2lcdNibble@data,c
  9907                           
  9908                           ;lcd.c: 45: char temp = data & 0xF0;
  9909  0016F8  5002               	movf	i2lcdNibble@data,w,c
  9910  0016FA  0BF0               	andlw	240
  9911  0016FC  6E01               	movwf	i2lcdNibble@temp,c
  9912                           
  9913                           ;lcd.c: 46: LATD = LATD & 0x0F;
  9914  0016FE  508C               	movf	3980,w,c	;volatile
  9915  001700  0B0F               	andlw	15
  9916  001702  6E8C               	movwf	3980,c	;volatile
  9917                           
  9918                           ;lcd.c: 47: LATD = temp | LATD;
  9919  001704  5001               	movf	i2lcdNibble@temp,w,c
  9920  001706  108C               	iorwf	3980,w,c	;volatile
  9921  001708  6E8C               	movwf	3980,c	;volatile
  9922                           
  9923                           ;lcd.c: 49: LATDbits.LATD3 = 0;
  9924  00170A  968C               	bcf	3980,3,c	;volatile
  9925                           
  9926                           ;lcd.c: 50: _delay((unsigned long)((25)*(10000000/4000000.0)));
  9927  00170C  0E14               	movlw	20
  9928  00170E                     i2u450_47:
  9929  00170E  2EE8               	decfsz	wreg,f,c
  9930  001710  D7FE               	bra	i2u450_47
  9931  001712  D000               	nop2	
  9932                           
  9933                           ;lcd.c: 51: LATDbits.LATD3 = 1;
  9934  001714  868C               	bsf	3980,3,c	;volatile
  9935                           
  9936                           ;lcd.c: 52: _delay((unsigned long)((25)*(10000000/4000000.0)));
  9937  001716  0E14               	movlw	20
  9938  001718                     i2u451_47:
  9939  001718  2EE8               	decfsz	wreg,f,c
  9940  00171A  D7FE               	bra	i2u451_47
  9941  00171C  D000               	nop2	
  9942                           
  9943                           ;lcd.c: 54: data = data << 4;
  9944  00171E  3802               	swapf	i2lcdNibble@data,w,c
  9945  001720  0BF0               	andlw	240
  9946  001722  6E02               	movwf	i2lcdNibble@data,c
  9947                           
  9948                           ;lcd.c: 56: temp = data & 0xF0;
  9949  001724  5002               	movf	i2lcdNibble@data,w,c
  9950  001726  0BF0               	andlw	240
  9951  001728  6E01               	movwf	i2lcdNibble@temp,c
  9952                           
  9953                           ;lcd.c: 57: LATD = LATD & 0x0F;
  9954  00172A  508C               	movf	3980,w,c	;volatile
  9955  00172C  0B0F               	andlw	15
  9956  00172E  6E8C               	movwf	3980,c	;volatile
  9957                           
  9958                           ;lcd.c: 58: LATD = temp | LATD;
  9959  001730  5001               	movf	i2lcdNibble@temp,w,c
  9960  001732  108C               	iorwf	3980,w,c	;volatile
  9961  001734  6E8C               	movwf	3980,c	;volatile
  9962                           
  9963                           ;lcd.c: 60: LATDbits.LATD3 = 0;
  9964  001736  968C               	bcf	3980,3,c	;volatile
  9965                           
  9966                           ;lcd.c: 61: _delay((unsigned long)((25)*(10000000/4000000.0)));
  9967  001738  0E14               	movlw	20
  9968  00173A                     i2u452_47:
  9969  00173A  2EE8               	decfsz	wreg,f,c
  9970  00173C  D7FE               	bra	i2u452_47
  9971  00173E  D000               	nop2	
  9972                           
  9973                           ;lcd.c: 62: LATDbits.LATD3 = 1;
  9974  001740  868C               	bsf	3980,3,c	;volatile
  9975                           
  9976                           ;lcd.c: 63: _delay((unsigned long)((25)*(10000000/4000000.0)));
  9977  001742  0E14               	movlw	20
  9978  001744                     i2u453_47:
  9979  001744  2EE8               	decfsz	wreg,f,c
  9980  001746  D7FE               	bra	i2u453_47
  9981  001748  D000               	nop2	
  9982  00174A  0012               	return		;funcret
  9983  00174C                     __end_ofi2_lcdNibble:
  9984                           	opt stack 0
  9985                           tosu	equ	0xFFF
  9986                           tosh	equ	0xFFE
  9987                           tosl	equ	0xFFD
  9988                           pclatu	equ	0xFFB
  9989                           pclath	equ	0xFFA
  9990                           tblptru	equ	0xFF8
  9991                           tblptrh	equ	0xFF7
  9992                           tblptrl	equ	0xFF6
  9993                           tablat	equ	0xFF5
  9994                           prodh	equ	0xFF4
  9995                           prodl	equ	0xFF3
  9996                           intcon	equ	0xFF2
  9997                           intcon3	equ	0xFF0
  9998                           postinc0	equ	0xFEE
  9999                           fsr0h	equ	0xFEA
 10000                           fsr0l	equ	0xFE9
 10001                           wreg	equ	0xFE8
 10002                           fsr1h	equ	0xFE2
 10003                           fsr1l	equ	0xFE1
 10004                           indf2	equ	0xFDF
 10005                           postinc2	equ	0xFDE
 10006                           postdec2	equ	0xFDD
 10007                           fsr2h	equ	0xFDA
 10008                           fsr2l	equ	0xFD9
 10009                           status	equ	0xFD8
 10010                           
 10011 ;; *************** function i2___awdiv *****************
 10012 ;; Defined at:
 10013 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awdiv.c"
 10014 ;; Parameters:    Size  Location     Type
 10015 ;;  dividend        2    0[COMRAM] int 
 10016 ;;  divisor         2    2[COMRAM] int 
 10017 ;; Auto vars:     Size  Location     Type
 10018 ;;  __awdiv         2    6[COMRAM] int 
 10019 ;;  __awdiv         1    5[COMRAM] unsigned char 
 10020 ;;  __awdiv         1    4[COMRAM] unsigned char 
 10021 ;; Return value:  Size  Location     Type
 10022 ;;                  2    0[COMRAM] int 
 10023 ;; Registers used:
 10024 ;;		wreg, status,2, status,0
 10025 ;; Tracked objects:
 10026 ;;		On entry : 0/0
 10027 ;;		On exit  : 0/0
 10028 ;;		Unchanged: 0/0
 10029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10030 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10031 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10033 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10034 ;;Total ram usage:        8 bytes
 10035 ;; Hardware stack levels used:    1
 10036 ;; This function calls:
 10037 ;;		Nothing
 10038 ;; This function is called by:
 10039 ;;		_op_time
 10040 ;; This function uses a non-reentrant model
 10041 ;;
 10042                           
 10043                           	psect	text66
 10044  00124C                     __ptext66:
 10045                           	opt stack 0
 10046  00124C                     i2___awdiv:
 10047                           	opt stack 23
 10048                           
 10049                           ;incstack = 0
 10050  00124C  0E00               	movlw	0
 10051  00124E  6E06               	movwf	i2___awdiv@sign,c
 10052  001250  AE04               	btfss	i2___awdiv@divisor+1,7,c
 10053  001252  D006               	goto	i2l3551
 10054  001254  6C03               	negf	i2___awdiv@divisor,c
 10055  001256  1E04               	comf	i2___awdiv@divisor+1,f,c
 10056  001258  B0D8               	btfsc	status,0,c
 10057  00125A  2A04               	incf	i2___awdiv@divisor+1,f,c
 10058  00125C  0E01               	movlw	1
 10059  00125E  6E06               	movwf	i2___awdiv@sign,c
 10060  001260                     i2l3551:
 10061  001260  AE02               	btfss	i2___awdiv@dividend+1,7,c
 10062  001262  D006               	goto	i2l3557
 10063  001264  6C01               	negf	i2___awdiv@dividend,c
 10064  001266  1E02               	comf	i2___awdiv@dividend+1,f,c
 10065  001268  B0D8               	btfsc	status,0,c
 10066  00126A  2A02               	incf	i2___awdiv@dividend+1,f,c
 10067  00126C  0E01               	movlw	1
 10068  00126E  1A06               	xorwf	i2___awdiv@sign,f,c
 10069  001270                     i2l3557:
 10070  001270  0E00               	movlw	0
 10071  001272  6E08               	movwf	i2___awdiv@quotient+1,c
 10072  001274  0E00               	movlw	0
 10073  001276  6E07               	movwf	i2___awdiv@quotient,c
 10074  001278  5003               	movf	i2___awdiv@divisor,w,c
 10075  00127A  1004               	iorwf	i2___awdiv@divisor+1,w,c
 10076  00127C  B4D8               	btfsc	status,2,c
 10077  00127E  D01C               	goto	i2l3579
 10078  001280  0E01               	movlw	1
 10079  001282  6E05               	movwf	i2___awdiv@counter,c
 10080  001284  D004               	goto	i2l3565
 10081  001286                     i2l3563:
 10082  001286  90D8               	bcf	status,0,c
 10083  001288  3603               	rlcf	i2___awdiv@divisor,f,c
 10084  00128A  3604               	rlcf	i2___awdiv@divisor+1,f,c
 10085  00128C  2A05               	incf	i2___awdiv@counter,f,c
 10086  00128E                     i2l3565:
 10087  00128E  AE04               	btfss	i2___awdiv@divisor+1,7,c
 10088  001290  D7FA               	goto	i2l3563
 10089  001292                     i2l3567:
 10090  001292  90D8               	bcf	status,0,c
 10091  001294  3607               	rlcf	i2___awdiv@quotient,f,c
 10092  001296  3608               	rlcf	i2___awdiv@quotient+1,f,c
 10093  001298  5003               	movf	i2___awdiv@divisor,w,c
 10094  00129A  5C01               	subwf	i2___awdiv@dividend,w,c
 10095  00129C  5004               	movf	i2___awdiv@divisor+1,w,c
 10096  00129E  5802               	subwfb	i2___awdiv@dividend+1,w,c
 10097  0012A0  A0D8               	btfss	status,0,c
 10098  0012A2  D005               	goto	i2l3575
 10099  0012A4  5003               	movf	i2___awdiv@divisor,w,c
 10100  0012A6  5E01               	subwf	i2___awdiv@dividend,f,c
 10101  0012A8  5004               	movf	i2___awdiv@divisor+1,w,c
 10102  0012AA  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 10103  0012AC  8007               	bsf	i2___awdiv@quotient,0,c
 10104  0012AE                     i2l3575:
 10105  0012AE  90D8               	bcf	status,0,c
 10106  0012B0  3204               	rrcf	i2___awdiv@divisor+1,f,c
 10107  0012B2  3203               	rrcf	i2___awdiv@divisor,f,c
 10108  0012B4  2E05               	decfsz	i2___awdiv@counter,f,c
 10109  0012B6  D7ED               	goto	i2l3567
 10110  0012B8                     i2l3579:
 10111  0012B8  5006               	movf	i2___awdiv@sign,w,c
 10112  0012BA  B4D8               	btfsc	status,2,c
 10113  0012BC  D004               	goto	i2l3583
 10114  0012BE  6C07               	negf	i2___awdiv@quotient,c
 10115  0012C0  1E08               	comf	i2___awdiv@quotient+1,f,c
 10116  0012C2  B0D8               	btfsc	status,0,c
 10117  0012C4  2A08               	incf	i2___awdiv@quotient+1,f,c
 10118  0012C6                     i2l3583:
 10119  0012C6  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 10120  0012CA  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 10121  0012CE  0012               	return	
 10122  0012D0                     __end_ofi2___awdiv:
 10123                           	opt stack 0
 10124                           tosu	equ	0xFFF
 10125                           tosh	equ	0xFFE
 10126                           tosl	equ	0xFFD
 10127                           pclatu	equ	0xFFB
 10128                           pclath	equ	0xFFA
 10129                           tblptru	equ	0xFF8
 10130                           tblptrh	equ	0xFF7
 10131                           tblptrl	equ	0xFF6
 10132                           tablat	equ	0xFF5
 10133                           prodh	equ	0xFF4
 10134                           prodl	equ	0xFF3
 10135                           intcon	equ	0xFF2
 10136                           intcon3	equ	0xFF0
 10137                           postinc0	equ	0xFEE
 10138                           fsr0h	equ	0xFEA
 10139                           fsr0l	equ	0xFE9
 10140                           wreg	equ	0xFE8
 10141                           fsr1h	equ	0xFE2
 10142                           fsr1l	equ	0xFE1
 10143                           indf2	equ	0xFDF
 10144                           postinc2	equ	0xFDE
 10145                           postdec2	equ	0xFDD
 10146                           fsr2h	equ	0xFDA
 10147                           fsr2l	equ	0xFD9
 10148                           status	equ	0xFD8
 10149                           
 10150 ;; *************** function ___awmod *****************
 10151 ;; Defined at:
 10152 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awmod.c"
 10153 ;; Parameters:    Size  Location     Type
 10154 ;;  dividend        2    0[COMRAM] int 
 10155 ;;  divisor         2    2[COMRAM] int 
 10156 ;; Auto vars:     Size  Location     Type
 10157 ;;  sign            1    5[COMRAM] unsigned char 
 10158 ;;  counter         1    4[COMRAM] unsigned char 
 10159 ;; Return value:  Size  Location     Type
 10160 ;;                  2    0[COMRAM] int 
 10161 ;; Registers used:
 10162 ;;		wreg, status,2, status,0
 10163 ;; Tracked objects:
 10164 ;;		On entry : 0/0
 10165 ;;		On exit  : 0/0
 10166 ;;		Unchanged: 0/0
 10167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10168 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10169 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10171 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10172 ;;Total ram usage:        6 bytes
 10173 ;; Hardware stack levels used:    1
 10174 ;; This function calls:
 10175 ;;		Nothing
 10176 ;; This function is called by:
 10177 ;;		_op_time
 10178 ;; This function uses a non-reentrant model
 10179 ;;
 10180                           
 10181                           	psect	text67
 10182  001428                     __ptext67:
 10183                           	opt stack 0
 10184  001428                     ___awmod:
 10185                           	opt stack 23
 10186                           
 10187                           ;incstack = 0
 10188  001428  0E00               	movlw	0
 10189  00142A  6E06               	movwf	___awmod@sign,c
 10190  00142C  AE02               	btfss	___awmod@dividend+1,7,c
 10191  00142E  D006               	goto	i2l3349
 10192  001430  6C01               	negf	___awmod@dividend,c
 10193  001432  1E02               	comf	___awmod@dividend+1,f,c
 10194  001434  B0D8               	btfsc	status,0,c
 10195  001436  2A02               	incf	___awmod@dividend+1,f,c
 10196  001438  0E01               	movlw	1
 10197  00143A  6E06               	movwf	___awmod@sign,c
 10198  00143C                     i2l3349:
 10199  00143C  AE04               	btfss	___awmod@divisor+1,7,c
 10200  00143E  D004               	goto	i2l3353
 10201  001440  6C03               	negf	___awmod@divisor,c
 10202  001442  1E04               	comf	___awmod@divisor+1,f,c
 10203  001444  B0D8               	btfsc	status,0,c
 10204  001446  2A04               	incf	___awmod@divisor+1,f,c
 10205  001448                     i2l3353:
 10206  001448  5003               	movf	___awmod@divisor,w,c
 10207  00144A  1004               	iorwf	___awmod@divisor+1,w,c
 10208  00144C  B4D8               	btfsc	status,2,c
 10209  00144E  D018               	goto	i2l3369
 10210  001450  0E01               	movlw	1
 10211  001452  6E05               	movwf	___awmod@counter,c
 10212  001454  D004               	goto	i2l3359
 10213  001456                     i2l3357:
 10214  001456  90D8               	bcf	status,0,c
 10215  001458  3603               	rlcf	___awmod@divisor,f,c
 10216  00145A  3604               	rlcf	___awmod@divisor+1,f,c
 10217  00145C  2A05               	incf	___awmod@counter,f,c
 10218  00145E                     i2l3359:
 10219  00145E  AE04               	btfss	___awmod@divisor+1,7,c
 10220  001460  D7FA               	goto	i2l3357
 10221  001462                     i2l3361:
 10222  001462  5003               	movf	___awmod@divisor,w,c
 10223  001464  5C01               	subwf	___awmod@dividend,w,c
 10224  001466  5004               	movf	___awmod@divisor+1,w,c
 10225  001468  5802               	subwfb	___awmod@dividend+1,w,c
 10226  00146A  A0D8               	btfss	status,0,c
 10227  00146C  D004               	goto	i2l3365
 10228  00146E  5003               	movf	___awmod@divisor,w,c
 10229  001470  5E01               	subwf	___awmod@dividend,f,c
 10230  001472  5004               	movf	___awmod@divisor+1,w,c
 10231  001474  5A02               	subwfb	___awmod@dividend+1,f,c
 10232  001476                     i2l3365:
 10233  001476  90D8               	bcf	status,0,c
 10234  001478  3204               	rrcf	___awmod@divisor+1,f,c
 10235  00147A  3203               	rrcf	___awmod@divisor,f,c
 10236  00147C  2E05               	decfsz	___awmod@counter,f,c
 10237  00147E  D7F1               	goto	i2l3361
 10238  001480                     i2l3369:
 10239  001480  5006               	movf	___awmod@sign,w,c
 10240  001482  B4D8               	btfsc	status,2,c
 10241  001484  D004               	goto	i2l3373
 10242  001486  6C01               	negf	___awmod@dividend,c
 10243  001488  1E02               	comf	___awmod@dividend+1,f,c
 10244  00148A  B0D8               	btfsc	status,0,c
 10245  00148C  2A02               	incf	___awmod@dividend+1,f,c
 10246  00148E                     i2l3373:
 10247  00148E  C001  F001         	movff	___awmod@dividend,?___awmod
 10248  001492  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 10249  001496  0012               	return	
 10250  001498                     __end_of___awmod:
 10251                           	opt stack 0
 10252                           tosu	equ	0xFFF
 10253                           tosh	equ	0xFFE
 10254                           tosl	equ	0xFFD
 10255                           pclatu	equ	0xFFB
 10256                           pclath	equ	0xFFA
 10257                           tblptru	equ	0xFF8
 10258                           tblptrh	equ	0xFF7
 10259                           tblptrl	equ	0xFF6
 10260                           tablat	equ	0xFF5
 10261                           prodh	equ	0xFF4
 10262                           prodl	equ	0xFF3
 10263                           intcon	equ	0xFF2
 10264                           intcon3	equ	0xFF0
 10265                           postinc0	equ	0xFEE
 10266                           fsr0h	equ	0xFEA
 10267                           fsr0l	equ	0xFE9
 10268                           wreg	equ	0xFE8
 10269                           fsr1h	equ	0xFE2
 10270                           fsr1l	equ	0xFE1
 10271                           indf2	equ	0xFDF
 10272                           postinc2	equ	0xFDE
 10273                           postdec2	equ	0xFDD
 10274                           fsr2h	equ	0xFDA
 10275                           fsr2l	equ	0xFD9
 10276                           status	equ	0xFD8
 10277                           tosu	equ	0xFFF
 10278                           tosh	equ	0xFFE
 10279                           tosl	equ	0xFFD
 10280                           pclatu	equ	0xFFB
 10281                           pclath	equ	0xFFA
 10282                           tblptru	equ	0xFF8
 10283                           tblptrh	equ	0xFF7
 10284                           tblptrl	equ	0xFF6
 10285                           tablat	equ	0xFF5
 10286                           prodh	equ	0xFF4
 10287                           prodl	equ	0xFF3
 10288                           intcon	equ	0xFF2
 10289                           intcon3	equ	0xFF0
 10290                           postinc0	equ	0xFEE
 10291                           fsr0h	equ	0xFEA
 10292                           fsr0l	equ	0xFE9
 10293                           wreg	equ	0xFE8
 10294                           fsr1h	equ	0xFE2
 10295                           fsr1l	equ	0xFE1
 10296                           indf2	equ	0xFDF
 10297                           postinc2	equ	0xFDE
 10298                           postdec2	equ	0xFDD
 10299                           fsr2h	equ	0xFDA
 10300                           fsr2l	equ	0xFD9
 10301                           status	equ	0xFD8
 10302                           
 10303                           	psect	text68
 10304  000000                     __ptext68:
 10305                           	opt stack 0
 10306                           tosu	equ	0xFFF
 10307                           tosh	equ	0xFFE
 10308                           tosl	equ	0xFFD
 10309                           pclatu	equ	0xFFB
 10310                           pclath	equ	0xFFA
 10311                           tblptru	equ	0xFF8
 10312                           tblptrh	equ	0xFF7
 10313                           tblptrl	equ	0xFF6
 10314                           tablat	equ	0xFF5
 10315                           prodh	equ	0xFF4
 10316                           prodl	equ	0xFF3
 10317                           intcon	equ	0xFF2
 10318                           intcon3	equ	0xFF0
 10319                           postinc0	equ	0xFEE
 10320                           fsr0h	equ	0xFEA
 10321                           fsr0l	equ	0xFE9
 10322                           wreg	equ	0xFE8
 10323                           fsr1h	equ	0xFE2
 10324                           fsr1l	equ	0xFE1
 10325                           indf2	equ	0xFDF
 10326                           postinc2	equ	0xFDE
 10327                           postdec2	equ	0xFDD
 10328                           fsr2h	equ	0xFDA
 10329                           fsr2l	equ	0xFD9
 10330                           status	equ	0xFD8
 10331                           
 10332                           	psect	rparam
 10333  0000                     tosu	equ	0xFFF
 10334                           tosh	equ	0xFFE
 10335                           tosl	equ	0xFFD
 10336                           pclatu	equ	0xFFB
 10337                           pclath	equ	0xFFA
 10338                           tblptru	equ	0xFF8
 10339                           tblptrh	equ	0xFF7
 10340                           tblptrl	equ	0xFF6
 10341                           tablat	equ	0xFF5
 10342                           prodh	equ	0xFF4
 10343                           prodl	equ	0xFF3
 10344                           intcon	equ	0xFF2
 10345                           intcon3	equ	0xFF0
 10346                           postinc0	equ	0xFEE
 10347                           fsr0h	equ	0xFEA
 10348                           fsr0l	equ	0xFE9
 10349                           wreg	equ	0xFE8
 10350                           fsr1h	equ	0xFE2
 10351                           fsr1l	equ	0xFE1
 10352                           indf2	equ	0xFDF
 10353                           postinc2	equ	0xFDE
 10354                           postdec2	equ	0xFDD
 10355                           fsr2h	equ	0xFDA
 10356                           fsr2l	equ	0xFD9
 10357                           status	equ	0xFD8
 10358                           
 10359                           	psect	temp
 10360  00004D                     btemp:
 10361                           	opt stack 0
 10362  00004D                     	ds	1
 10363  0000                     int$flags	set	btemp
 10364                           tosu	equ	0xFFF
 10365                           tosh	equ	0xFFE
 10366                           tosl	equ	0xFFD
 10367                           pclatu	equ	0xFFB
 10368                           pclath	equ	0xFFA
 10369                           tblptru	equ	0xFF8
 10370                           tblptrh	equ	0xFF7
 10371                           tblptrl	equ	0xFF6
 10372                           tablat	equ	0xFF5
 10373                           prodh	equ	0xFF4
 10374                           prodl	equ	0xFF3
 10375                           intcon	equ	0xFF2
 10376                           intcon3	equ	0xFF0
 10377                           postinc0	equ	0xFEE
 10378                           fsr0h	equ	0xFEA
 10379                           fsr0l	equ	0xFE9
 10380                           wreg	equ	0xFE8
 10381                           fsr1h	equ	0xFE2
 10382                           fsr1l	equ	0xFE1
 10383                           indf2	equ	0xFDF
 10384                           postinc2	equ	0xFDE
 10385                           postdec2	equ	0xFDD
 10386                           fsr2h	equ	0xFDA
 10387                           fsr2l	equ	0xFD9
 10388                           status	equ	0xFD8


Data Sizes:
    Strings     236
    Constant    42
    Data        0
    BSS         53
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     62      76
    BANK0           128     43      82
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_15(CODE[13]), STR_14(CODE[15]), STR_13(CODE[15]), STR_12(CODE[17]), 
		 -> STR_11(CODE[22]), STR_10(CODE[19]), STR_9(CODE[17]), STR_8(CODE[17]), 
		 -> STR_7(CODE[17]), STR_6(CODE[13]), STR_5(CODE[9]), STR_4(CODE[17]), 
		 -> STR_3(CODE[15]), STR_2(CODE[13]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    topDistributionState	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), top_distribution_move(), top_distribution_prepare(), top_distribution_idle(), 

    topRockerState	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), top_rocker_restore(), top_rocker_release(), solenoids_back(), 
		 -> solenoids_out(), top_rocker_idle(), 

    bottomRockerState	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), bottom_rocker_restore(), bottom_rocker_release(), bottom_rocker_idle(), 

    bottomDistributionState	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), bottom_distribution_move(), bottom_distribution_prepare(), bottom_distribution_idle(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _keypressed in COMRAM

    _keypressed->i2_printf
    _tot_sorted->i2_printf
    _tin_results->i2_printf
    _pop_results->i2_printf
    _op_time->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _main->_results
    _startSorting->_initialization
    _top_rocker_restore->_top_rocker_motor_cw
    _top_rocker_release->_top_rocker_motor_ccw
    _top_rocker_idle->_initLCD
    _top_distribution_prepare->_top_distribution_motor_ccw
    _top_distribution_prepare->_top_distribution_motor_cw
    _top_distribution_move->_top_distribution_motor_ccw
    _top_distribution_move->_top_distribution_motor_cw
    _solenoids_out->_pop_out
    _solenoids_back->_go_back
    _initialization->_printf
    _bottom_rocker_restore->_bottom_rocker_motor_cw
    _bottom_rocker_release->_bottom_rocker_motor_ccw
    _bottom_distribution_prepare->_bottom_distribution_motor_ccw
    _bottom_distribution_prepare->_bottom_distribution_motor_cw
    _bottom_distribution_move->_bottom_distribution_motor_ccw
    _bottom_distribution_move->_bottom_distribution_motor_cw
    _standby->_printf
    _set_time->_I2C_Master_Write
    _results->_printf
    _printf->___wmul
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _done_sorting->___wmul
    ___wmul->___awdiv
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   28259
                    _I2C_Master_Init
                       _done_sorting
                            _initLCD
                            _results
                           _set_time
                            _standby
                       _startSorting
 ---------------------------------------------------------------------------------
 (1) _startSorting                                         3     3      0   11059
                                             39 BANK0      3     3      0
                   Absolute function *
           _bottom_distribution_idle *
           _bottom_distribution_move *
        _bottom_distribution_prepare *
                 _bottom_rocker_idle *
              _bottom_rocker_release *
              _bottom_rocker_restore *
                            _initLCD
                     _initialization
                            _lcdInst
                             _printf
                     _solenoids_back *
                      _solenoids_out *
              _top_distribution_idle *
              _top_distribution_move *
           _top_distribution_prepare *
                    _top_rocker_idle *
                 _top_rocker_release *
                 _top_rocker_restore *
 ---------------------------------------------------------------------------------
 (2) _top_rocker_restore                                   0     0      0       0
                _top_rocker_motor_cw
 ---------------------------------------------------------------------------------
 (3) _top_rocker_motor_cw                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _top_rocker_release                                   0     0      0      68
               _top_rocker_motor_ccw
 ---------------------------------------------------------------------------------
 (3) _top_rocker_motor_ccw                                 4     4      0      68
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _top_rocker_idle                                      0     0      0     195
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _top_distribution_prepare                             0     0      0       0
         _top_distribution_motor_ccw
          _top_distribution_motor_cw
 ---------------------------------------------------------------------------------
 (2) _top_distribution_move                                0     0      0       0
         _top_distribution_motor_ccw
          _top_distribution_motor_cw
 ---------------------------------------------------------------------------------
 (3) _top_distribution_motor_cw                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _top_distribution_motor_ccw                           2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _top_distribution_idle                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _solenoids_out                                        0     0      0       0
                            _pop_out
 ---------------------------------------------------------------------------------
 (3) _pop_out                                              2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _solenoids_back                                       1     1      0       0
                                              2 BANK0      1     1      0
                            _go_back
 ---------------------------------------------------------------------------------
 (3) _go_back                                              2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _initialization                                       3     3      0    5364
                                             36 BANK0      3     3      0
        _bottom_distribution_initial
              _bottom_rocker_initial
                            _initLCD
                            _lcdInst
                             _printf
           _top_distribution_initial
                 _top_rocker_initial
 ---------------------------------------------------------------------------------
 (3) _top_rocker_initial                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _top_distribution_initial                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _bottom_rocker_initial                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _bottom_distribution_initial                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _bottom_rocker_restore                                0     0      0       0
             _bottom_rocker_motor_cw
 ---------------------------------------------------------------------------------
 (3) _bottom_rocker_motor_cw                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _bottom_rocker_release                                0     0      0      68
            _bottom_rocker_motor_ccw
 ---------------------------------------------------------------------------------
 (3) _bottom_rocker_motor_ccw                              4     4      0      68
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _bottom_rocker_idle                                   1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _bottom_distribution_prepare                          0     0      0       0
      _bottom_distribution_motor_ccw
       _bottom_distribution_motor_cw
 ---------------------------------------------------------------------------------
 (2) _bottom_distribution_move                             0     0      0       0
      _bottom_distribution_motor_ccw
       _bottom_distribution_motor_cw
 ---------------------------------------------------------------------------------
 (3) _bottom_distribution_motor_cw                         2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _bottom_distribution_motor_ccw                        2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _bottom_distribution_idle                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _standby                                              6     6      0    6320
                                             36 BANK0      6     6      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _set_time                                             1     1      0     823
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _results                                              7     7      0    5568
                                             36 BANK0      7     7      0
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    4906
                                             14 BANK0     22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _done_sorting                                        14    12      2    3791
                                             14 BANK0     12    10      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1316
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1145
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     724
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      65
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     503
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     395
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _keypressed                                          30    30      0   13152
                                             32 COMRAM    30    30      0
                            _op_time
                        _pop_results
                        _tin_results
                         _tot_sorted
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _tot_sorted                                           0     0      0    2338
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _tin_results                                          0     0      0    2338
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _pop_results                                          0     0      0    2338
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _op_time                                              0     0      0    3114
                            ___awmod
                          i2___awdiv
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) i2_printf                                            29    23      6    2068
                                             12 COMRAM    20    14      6
                            ___awmod (ARG)
                          i2___awdiv (ARG)
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (7) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) i2___awdiv                                            8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) ___awmod                                              6     2      4     424
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _done_sorting
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _initLCD
     _lcdInst
       _lcdNibble
   _results
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _set_time
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _standby
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _startSorting
     Absolute function(Fake) *
     _bottom_distribution_idle *
     _bottom_distribution_move *
       _bottom_distribution_motor_ccw
       _bottom_distribution_motor_cw
     _bottom_distribution_prepare *
       _bottom_distribution_motor_ccw
       _bottom_distribution_motor_cw
     _bottom_rocker_idle *
     _bottom_rocker_release *
       _bottom_rocker_motor_ccw
     _bottom_rocker_restore *
       _bottom_rocker_motor_cw
     _initLCD *
       _lcdInst
         _lcdNibble
     _initialization *
       _bottom_distribution_initial
       _bottom_rocker_initial
       _initLCD
         _lcdInst
           _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
           ___awdiv (ARG)
         _isdigit
         _putch
           _lcdNibble
       _top_distribution_initial
       _top_rocker_initial
     _lcdInst *
       _lcdNibble
     _printf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
     _solenoids_back *
       _go_back
     _solenoids_out *
       _pop_out
     _top_distribution_idle *
     _top_distribution_move *
       _top_distribution_motor_ccw
       _top_distribution_motor_cw
     _top_distribution_prepare *
       _top_distribution_motor_ccw
       _top_distribution_motor_cw
     _top_rocker_idle *
       _initLCD
         _lcdInst
           _lcdNibble
     _top_rocker_release *
       _top_rocker_motor_ccw
     _top_rocker_restore *
       _top_rocker_motor_cw

 _keypressed (ROOT)
   _op_time
     ___awmod
     i2___awdiv
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   _pop_results
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   _tin_results
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   _tot_sorted
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     ___awmod (ARG)
     i2___awdiv (ARG)
     i2___lwdiv (ARG)
     i2___lwmod (ARG)
       i2___lwdiv (ARG)
     i2___wmul (ARG)
     i2_isdigit (ARG)
     i2_putch (ARG)
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2B      52       5       64.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3E      4C       1       60.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9E      34        0.0%
DATA                 0      0      9E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Mar 15 16:19:23 2017

                          ___awdiv@sign 0085                     ___wmul@multiplicand 008A  
                    i2___lwdiv@dividend 0001                             __CFG_BORV$3 000000  
                         _solenoids_out 1CF2                            __CFG_CP0$OFF 000000  
                          __CFG_CP1$OFF 000000                            __CFG_CP2$OFF 000000  
                          __CFG_CP3$OFF 000000                             __CFG_OSC$HS 000000  
                                   l126 1CDE                                     l414 0E18  
                                   l417 0EFA                                     l453 0D64  
                                   l455 0DB0                                     l615 13D8  
                                   l439 1556                                     l607 1368  
                                   l616 1422                                     l608 13B2  
                                   l661 013A                            __CFG_CPB$OFF 000000  
                                   _PEN 007E2A                            __CFG_CPD$OFF 000000  
                                   _SEN 007E28                          _solenoids_back 179E  
                                   _tot 0043                           ?_done_sorting 008E  
                          ___awmod@sign 0006                    _topDistributionState 00CE  
                                   prod 000FF3                                     tosl 000FFD  
                                   wreg 000FE8                            __CFG_LVP$OFF 000000  
                           _total_start 00B6       __size_of_top_distribution_initial 000E  
                          __CFG_WDT$OFF 000000                                    l1106 133E  
                                  l1116 168C                                    l1053 11AA  
                                  l4103 1330                                    l4111 1648  
                                  l4113 1654                                    l4201 0046  
                                  l4115 165A                                    l4211 0084  
                                  l4301 02E4                                    l4205 0050  
                                  l4119 167E                                    l4223 0106  
                                  l4305 02F8                                    l4241 0194  
                                  l4321 03D0                                    l4401 1C72  
                                  l4091 12EE                                    l4075 1A66  
                                  l4307 02FE                                    l4315 03AA  
                                  l4235 0172                                    l4219 0100  
                                  l4403 1C76                                    l4411 1C52  
                                  l4093 12FA                                    l4309 0350  
                                  l4317 03BC                                    l4253 01D0  
                                  l4413 1C56                                    l4421 14A4  
             ?_top_distribution_initial 0001                                    l4095 1300  
                                  l4319 03C4                                    l4255 01D6  
                                  l4271 0224                                    l4239 018E  
                                  l4511 1BF2                                    l4503 19DE  
                                  l4601 10A4                                    l4281 027E  
                                  l4433 14EC                                    l4513 1BF6  
                                  l4521 1BD2                                    l4283 0288  
                                  l4195 0020                                    l4523 1BD6  
                                  l4613 10E2                                    l4277 0246  
                                  l4269 0212                                    l4429 14DE  
                                  l4533 1A80                                    l4631 1144  
                                  l4471 1A12                                    l4295 02BE  
                                  l4199 0034                                    l4703 0F34  
                                  l4617 10F6                                    l4609 10D4  
                                  l4297 02CA                                    l4289 02A2  
                                  l4705 0F3A                                    l4393 1A38  
                                  l4553 17CE                                    l4721 0FB0  
                                  l4627 112E                                    l4491 1536  
                                  l4723 0FC8                                    l4715 0F68  
                                  l4629 113E                                    l4821 0D14  
                                  l4709 0F44                                    l4557 17DC  
                                  l4741 1022                                    l4717 0F80  
                                  l4639 1198                                    l4591 1074  
                                  l4831 0D44                                    l4655 15F8  
                                  l4487 152C                                    l4719 0F98  
                                  l4585 105E                                    l4761 0A4E  
                                  l4825 0D34                                    l4817 0D0A  
                                  l4665 162E                                    l4681 0E5E  
                                  l4737 1018                                    l4771 0A78  
                                  l4851 0D90                                    l4827 0D3A  
                                  l4659 1602                                    l4597 1092  
                                  l4765 0A58                                    l4677 0E54  
                                  l4599 109E                                    l4791 0C74  
                                  l4847 0D86                                    l4687 0E7E  
                                  l4793 0C88                                    l4799 0CCE  
                                  l4887 1212                                    STR_1 FFDA  
                                  STR_2 FFCF                                    STR_3 FFC0  
                                  STR_4 FF80                                    STR_5 FFF6  
                                  STR_6 FFDC                                    STR_7 FF4D  
                                  STR_8 FF5E                                    STR_9 FF6F  
                          _startSorting 0F64                                    _LATA 000F89  
                                  _LATB 000F8A                                    _LATC 000F8B  
                                  _LATD 000F8C                                    _LATE 000F8D  
                                  u3320 1422                                    u4117 0FD8  
                                  u4207 1544                                    u4127 1030  
                                  u4217 1B1C                                    u4137 1AAA  
                                  u4307 1846                                    u4227 13EA  
                                  u4147 137A                                    u4317 187C  
                                  u4237 1404                                    u4157 1394  
                                  u4327 158A                                    u4247 1B42  
                                  u4167 1AD0                                    u3640 14BA  
                                  u4337 1594                                    u4257 1B68  
                                  u4177 1AF6                                    u4347 15C0  
                                  u4267 0F52                                    u4187 1C14  
                                  u3660 1A10                                    u3740 17AA  
                                  u4357 15CA                                    u4277 0D22  
                                  u4197 1C34                                    u3590 13B2  
                                  u4287 0D52                                    u3648 14BE  
                                  u4297 0D9E                                    u3748 17AE  
                                  _RCEN 007E2B                                    u3855 16C6  
                                  u3980 0FF8                                    u3948 0F6C  
                                  u3958 0F84                                    u3968 0F9C  
                                  u3978 0FB4                                    _RSEN 007E29  
              __size_of_top_rocker_idle 0028       __size_of_top_distribution_prepare 0020  
             ?_top_distribution_prepare 0001                        ??_initialization 00A4  
                                  _fsm1 00BC                                    _fsm2 00C8  
                                  _main 11BC                                    _keys FEE9  
                                  _time 00AB                                    fsr0h 000FEA  
                                  fsr1h 000FE2                      i2___lwdiv@quotient 0005  
                                  fsr2h 000FDA                                    fsr0l 000FE9  
                                  indf2 000FDF                                    fsr1l 000FE1  
                                  fsr2l 000FD9                                    btemp 004D  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 000E                           __CFG_IESO$OFF 000000  
                       __end_ofi2_putch 1D9E                           __CFG_MCLRE$ON 000000  
          __end_of_top_rocker_motor_ccw 13B8                            ___param_bank 000000  
                           i2_lcdNibble 16F6                          ?_solenoids_out 0001  
                      ?_I2C_Master_Init 008D                        ?_I2C_Master_Read 0001  
                      ?_I2C_Master_Wait 0001                        ?_I2C_Master_Stop 0001  
                __end_of_solenoids_back 17EE                                   ?_main 0001  
                                 _ACKEN 007E2C                                   _ACKDT 007E2D  
                       __end_of___awdiv 1100                                   STR_10 FF29  
                                 STR_11 FF13                                   STR_12 FF91  
                                 STR_13 FFB1                                   STR_14 FFA2  
                                 STR_15 FFE9                                   STR_16 FF3C  
                       __end_of___awmod 1498                         __end_of___lldiv 11BC  
                       ___awdiv@divisor 0082                         __end_of___lwdiv 1348  
                       standby@keypress 00A6                         __end_of___lwmod 1696  
                                 i2l208 09C2                          ??_done_sorting 0090  
                                 i2l661 04E6                         ___awdiv@counter 0084  
                                 _PORTB 000F81                                   _TRISA 000F92  
                                 _TRISB 000F93                                   _TRISC 000F94  
                                 _TRISD 000F95                                   _TRISE 000F96  
                 top_rocker_motor_ccw@j 0082                           __CFG_PWRT$OFF 000000  
                         __CFG_WRT0$OFF 000000                           __CFG_WRT1$OFF 000000  
                         __CFG_WRT2$OFF 000000                           __CFG_WRT3$OFF 000000  
                       __end_of_lcdInst 1D5A                          __CFG_EBTR0$OFF 000000  
                        __CFG_FCMEN$OFF 000000                          __CFG_EBTR1$OFF 000000  
                        __CFG_EBTR2$OFF 000000                          __CFG_EBTR3$OFF 000000  
                       __end_of_go_back 1C44              ?_top_distribution_motor_cw 0001  
                         __CFG_WRTB$OFF 000000                           __CFG_WRTC$OFF 000000  
                         __CFG_WRTD$OFF 000000                         __end_of_initLCD 1888  
                        __CFG_EBTRB$OFF 000000                              i2isdigit@c 0003  
                 _bottom_rocker_initial 1D76                         __end_of_dpowers FF04  
                                 _tabed 0041                         __end_of_isdigit 1A70  
                 _bottom_rocker_release 1D16                                   _putch 1D3A  
                       __end_of_op_time 183E                   _bottom_rocker_restore 1D28  
                                 pclath 000FFA                                   tablat 000FF5  
                       __end_of_pop_out 1C24                         __end_of_results 0E08  
                      __end_ofi2___wmul 1BA2                         __end_of_standby 0F64  
                                 status 000FD8                     _top_rocker_motor_cw 1A98  
       __size_of_bottom_rocker_motor_cw 0026                      __size_ofi2___awdiv 0084  
                        __CFG_PBADEN$ON 000000                           i2printf@width 001E  
                          standby@i_741 00A8                        __end_ofi2_printf 0726  
                    __size_ofi2___lwdiv 0052                      __size_ofi2___lwmod 0042  
                       __initialization 1BA2                      __size_ofi2_lcdInst 000C  
                          __end_of_main 124C                            __end_of_keys FEFA  
                            i2printf@ap 0018                      __size_ofi2_initLCD 0046  
                    __size_ofi2_isdigit 001E                    ?_top_rocker_motor_cw 0001  
                       ?_solenoids_back 0001                                  ??_main 00AB  
                         __activetblptr 000003        __end_of_bottom_distribution_idle 1A46  
      __end_of_bottom_distribution_move 1C64                       ?_I2C_Master_Start 0001  
                     ?_I2C_Master_Write 0081                      ??_I2C_Master_Start 0081  
                                _ADCON0 000FC2                                  _ADCON1 000FC1  
                    ??_I2C_Master_Write 0083                        ___awdiv@dividend 0080  
                       i2lcdNibble@data 0002                                  ?_putch 0001  
                       i2lcdNibble@temp 0001                                  _INT1IE 007F83  
                                _INT1IF 007F80                                  i2l1106 1794  
                                i2l1116 1906                                  i2l3103 18FC  
                                i2l3065 1CBA                                  i2l3075 1762  
                                i2l3077 176A                                  i2l3501 05E8  
                                i2l3421 0418                                  i2l3087 178A  
                                i2l3079 176E                                  i2l3095 18DC  
                                i2l3503 05F0                                  i2l3431 0450  
                                i2l3415 03FA                                  i2l3361 1462  
                                i2l3353 1448                                  i2l3097 18E4  
                                i2l3521 0638                                  i2l3425 041E  
                                i2l3099 18E8                                  i2l3515 061C  
                                i2l3443 04B6                                  i2l3419 040A  
                                i2l3373 148E                                  i2l3365 1476  
                                i2l3357 1456                                  i2l3349 143C  
                                i2l3517 0624                                  i2l3525 064A  
                                i2l3509 0606                                  i2l3461 0532  
                                i2l3541 070A                                  i2l3359 145E  
                                i2l3551 1260                                  i2l3527 0650  
                                i2l3535 06EC                                  i2l3455 0514  
                                i2l3439 04B2                                  i2l3369 1480  
                                i2l3529 069A                                  i2l3537 06FC  
                                i2l3473 0564                                  i2l3563 1286  
                                i2l3539 0702                                  i2l3475 0568  
                                i2l3491 05AA                                  i2l3459 052E  
                                i2l3565 128E                                  i2l3557 1270  
                                i2l3901 0852                                  i2l3583 12C6  
                                i2l3575 12AE                                  i2l3567 1292  
                                i2l3911 087A                                  i2l3497 05C4  
                                i2l3489 059A                                  i2l3921 08A6  
                                i2l3905 086E                                  i2l3579 12B8  
                                i2l3931 08CE                                  i2l3907 0872  
                                i2l3915 0896                                  i2l3941 08F6  
                                i2l3925 08AE                                  i2l3861 07C2  
                                i2l3853 079E                                  i2l3935 08D6  
                                i2l3871 07EA                                  i2l3863 07C6  
                                i2l3945 08FE                                  i2l3929 08CA  
                                i2l3873 07EE                                  i2l3857 07A6  
                                i2l3881 0812                                  i2l3963 094E  
                                i2l3955 092A                                  i2l3939 08F2  
                                i2l3891 082A                                  i2l3867 07CE  
                                i2l3973 0976                                  i2l3965 0952  
                                i2l3949 091A                                  i2l3877 07F6  
                                i2l3975 097A                                  i2l3959 0932  
                                i2l3983 099E                                  i2l3895 0846  
                                i2l3887 0822                                  i2l3991 09BA  
                                i2l3969 095A                                  i2l3897 084A  
                                i2l3987 09AA                                  i2l3979 0982  
                             ??i2_putch 0003                                  _SSPADD 000FC8  
                                _TRISC3 007CA3                                  _TRISC4 007CA4  
                                _SSPBUF 000FC9                          __CFG_XINST$OFF 000000  
                     ??_top_rocker_idle 0084                         ??_solenoids_out 0082  
                                ___wmul 1984                               ??___awdiv 0084  
                        __CFG_STVREN$ON 000000                               ??___awmod 0005  
                             ??___lldiv 0088                               ??___lwdiv 0084  
                             ??___lwmod 008B                                  clear_0 1BA8  
                                clear_1 1BB4                        ___awdiv@quotient 0086  
                 ??_top_rocker_motor_cw 0080                         ___awmod@divisor 0003  
                       ___awmod@counter 0005                               ??_lcdInst 0082  
                                _printf 0012                               ??_go_back 0080  
                        i2___awdiv@sign 0006                  _bottom_rocker_motor_cw 1B0A  
                             ??_initLCD 0083                            ?_pop_results 0001  
                             ??_isdigit 0080                       __end_ofi2___awdiv 12D0  
                      __end_of_set_time 1634                       __end_ofi2___lwdiv 179E  
                          __mediumconst FEE8                       __end_ofi2___lwmod 1910  
                ?_bottom_rocker_initial 0001                               ??_op_time 0021  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                               ??_pop_out 0080  
                          ?_tin_results 0001                  ?_bottom_rocker_release 0001  
                             ??_results 00A4                 _bottomDistributionState 00CC  
                             ??_standby 00A4                    _top_rocker_motor_ccw 1348  
                     __end_ofi2_lcdInst 1DAA                  ?_bottom_rocker_restore 0001  
                            _Start_time 00BA                       __end_ofi2_initLCD 18CE  
                     __end_ofi2_isdigit 1CC2                              __accesstop 0080  
               __end_of__initialization 1BBA        __size_of_bottom_rocker_motor_ccw 0070  
                         done_sorting@i 0097                           ___rparam_used 000001  
            __end_of_top_rocker_initial 1D68                    __end_of_done_sorting 0C92  
            __end_of_top_rocker_release 1CDE              __end_of_top_rocker_restore 1D16  
                    i2___lwmod@dividend 0008                          __pcstackCOMRAM 0001  
           __size_of_bottom_rocker_idle 006A                           __end_of_putch 1D4A  
                           i2printf@idx 0017                             i2printf@val 001B  
   __end_of_bottom_distribution_initial 1D92             _bottom_distribution_initial 1D84  
                             ?i2___wmul 0001                      __size_of_lcdNibble 0068  
   __end_of_bottom_distribution_prepare 1C84             _bottom_distribution_prepare 1C64  
                           i2putch@data 0003                             keypressed@i 0032  
                             ?i2_printf 000D                   ?_top_rocker_motor_ccw 0001  
                 _top_distribution_idle 19BA               _start_bottom_distribution 004B  
                 _top_distribution_move 1BC4                                 ??_putch 0082  
                            __pbssBANK0 00AB          ?_bottom_distribution_motor_ccw 0001  
     __size_of_bottom_distribution_idle 002C            ??_top_distribution_motor_ccw 0080  
             ?_bottom_distribution_idle 0001       __size_of_bottom_distribution_move 0020  
             ?_bottom_distribution_move 0001                            ?i2_lcdNibble 0001  
                               ?___wmul 0088                 keypressed@keypress_temp 003E  
                               ?_printf 008E                              ??i2___wmul 0005  
                            ??i2_printf 0013             ??_top_distribution_motor_cw 0080  
                               _SSPCON1 000FC6                                 _SSPCON2 000FC5  
                               _SSPSTAT 000FC7     __size_of_top_distribution_motor_ccw 0026  
                               i2_putch 1D92                       __end_of_lcdNibble 15D2  
                               __Hparam 0000                                 __Lparam 0000  
                             ?_set_time 0001                        ??_solenoids_back 0082  
                               ___awdiv 1042                                 ___awmod 1428  
                               ___lldiv 1100                         __size_of___wmul 0036  
                               ___lwdiv 12D0                                 ___lwmod 1634  
                               __pcinit 1BA2                                 __ramtop 1000  
                               _lcdInst 1D4A                                 __ptext0 11BC  
                               __ptext1 0F64                                 __ptext2 1CC2  
                               __ptext3 179E                                 __ptext4 1CF2  
                               __ptext5 1A70                                 __ptext6 1D04  
                               __ptext7 1A98                                 __ptext8 1348  
                               __ptext9 1BC4                                 _labeled 0047  
                               _go_back 1C24                         __size_of_printf 03DE  
                               _initLCD 183E                       __end_of_hexpowers FF0C  
                               _dpowers FEFA                                 _isdigit 1A46  
                      ___awmod@dividend 0001                    done_sorting@End_time 0098  
                ??_top_rocker_motor_ccw 0080                  ?_top_distribution_idle 0001  
              _top_distribution_initial 1D68                                 _op_time 17EE  
                            _keypressed 0008                  ?_top_distribution_move 0001  
              __size_of_I2C_Master_Init 0060                __size_of_I2C_Master_Read 002E  
                               _pop_can 00C2                __size_of_I2C_Master_Wait 0014  
                               _tin_can 00C4                       __end_of_real_time FF13  
              __size_of_I2C_Master_Stop 0008                                 _pop_out 1C04  
                               _results 0C92                    __size_of_pop_results 003A  
                               _standby 0E08                _top_distribution_prepare 1BE4  
                        __pintcode_body 0726                         _top_rocker_idle 1A70  
                  end_of_initialization 1BBA                    __size_of_tin_results 003A  
               _bottom_rocker_motor_ccw 13B8                           startSorting@i 00A9  
                 __size_of_done_sorting 0294                                 int_func 0726  
                   i2___wmul@multiplier 0001                          _operation_time 0045  
             __size_of_I2C_Master_Start 0008               __size_of_I2C_Master_Write 000A  
                       ___lldiv@divisor 0084                         ___lldiv@counter 008C  
             _top_distribution_motor_cw 1ABE                              ??_set_time 0083  
                               printf@c 00A3                                 printf@f 008E  
                      I2C_Master_Init@c 008D                        I2C_Master_Read@a 0081  
                               postdec2 000FDD                                 postinc0 000FEE  
                               postinc2 000FDE                 __size_of_initialization 0068  
               ?_bottom_rocker_motor_cw 0001                               _PORTAbits 000F80  
                             _PORTBbits 000F81                               _PORTCbits 000F82  
               ??_bottom_rocker_initial 0080                 ??_bottom_rocker_release 0084  
               ??_bottom_rocker_restore 0082                            _done_sorting 09FE  
                             i2___awdiv 124C                       i2___lwdiv@divisor 0003  
                             i2___lwdiv 174C                               i2___lwmod 18CE  
                     i2___lwdiv@counter 0007                    results@keypress_temp 00A7  
                             i2_lcdInst 1D9E                             printf@width 00A1  
    __end_of_top_distribution_motor_ccw 1B0A              _top_distribution_motor_ccw 1AE4  
                             i2_initLCD 1888                      i2___awdiv@dividend 0001  
                            _tot_sorted 1C84                               i2_isdigit 1CA4  
           __end_of_top_rocker_motor_cw 1ABE          __end_of_bottom_rocker_motor_cw 1B30  
                 __end_of_solenoids_out 1D04                          __end_of___wmul 19BA  
                  __size_ofi2_lcdNibble 0056                           i2lcdInst@data 0003  
                    _top_rocker_initial 1D5A                      _top_rocker_release 1CC2  
                      i2___wmul@product 0005                          __end_of_printf 03F0  
               __end_of_top_rocker_idle 1A98                      _top_rocker_restore 1D04  
                          i2printf@flag 001D                            i2printf@prec 001A  
                   start_initialization 1BA2                             ?_keypressed 0001  
                    i2___awdiv@quotient 0007                       __size_ofi2___wmul 0026  
                   ?_top_rocker_initial 0001               ??_bottom_rocker_motor_ccw 0080  
                             i2printf@c 0020                               i2printf@f 000D  
                   ?_top_rocker_release 0001                              ?i2___awdiv 0001  
                         ?_startSorting 0001                     ?_top_rocker_restore 0001  
                            ?i2___lwdiv 0001                              ?i2___lwmod 0008  
                     __size_ofi2_printf 0336    __end_of_bottom_distribution_motor_cw 1B56  
 __size_of_bottom_distribution_motor_cw 0026            _bottom_distribution_motor_cw 1B30  
                     ??_I2C_Master_Init 0091                       ??_I2C_Master_Read 0081  
                     ??_I2C_Master_Wait 0080                              ?i2_lcdInst 0001  
                     ??_I2C_Master_Stop 0081                              ?i2_initLCD 0001  
                            ?i2_isdigit 0001              __end_of_bottom_rocker_idle 1502  
                  ??_top_rocker_initial 0080                    ??_top_rocker_release 0084  
                              ??___wmul 008C                    ??_top_rocker_restore 0082  
       ??_bottom_distribution_motor_ccw 0080                        __CFG_LPT1OSC$OFF 000000  
              done_sorting@total_second 0095                                ??_printf 0096  
                           __pbssCOMRAM 003F                           __pcstackBANK0 0080  
                     i2___lwmod@divisor 000A                       i2___lwmod@counter 000C  
                        ??_startSorting 00A7                            _isdigit$1388 0081  
                              ?i2_putch 0001           ?_bottom_distribution_motor_cw 0001  
                           ?_tot_sorted 0001                        _I2C_Master_Start 1DBC  
                     _bottomRockerState 00CA                        _I2C_Master_Write 1DAA  
                      ___lwdiv@dividend 0080                       __CFG_CCP2MX$PORTC 000000  
       __end_of_bottom_rocker_motor_ccw 1428                     __size_of_keypressed 09F6  
                             __pintcode 0008                           __pmediumconst FEE8  
                             _lcdNibble 156A                                ?___awdiv 0080  
                              ?___awmod 0001                          _initialization 1502  
                              ?___lldiv 0080                                ?___lwdiv 0080  
                              ?___lwmod 0087              ??_top_distribution_initial 0080  
                     __size_of_set_time 0062                                ?_lcdInst 0001  
            ??_top_distribution_prepare 0082                 ??_top_distribution_idle 0080  
                              ?_go_back 0001                 ??_top_distribution_move 0082  
    __size_of_top_distribution_motor_cw 0026                                ?_initLCD 0001  
                              ?_isdigit 0001                        ?_top_rocker_idle 0001  
                              ?_op_time 0001                                ?_pop_out 0001  
                              ?_results 0001                               _hexpowers FF04  
                              ?_standby 0001                        ___lwdiv@quotient 0085  
                           ??i2___awdiv 0005                             ??i2___lwdiv 0005  
                           ??i2___lwmod 000C                          __size_of_putch 0010  
                             _real_time FF0C                         keypressed@i_340 003A  
                       keypressed@i_341 003B                         keypressed@i_333 0033  
                       keypressed@i_342 003C                         keypressed@i_334 0034  
                       keypressed@i_343 003D                         keypressed@i_335 0035  
                       keypressed@i_336 0036                         keypressed@i_337 0037  
                       keypressed@i_338 0038                         keypressed@i_339 0039  
              _bottom_distribution_idle 1A1A                             ??i2_lcdInst 0003  
              _bottom_distribution_move 1C44                          ___wmul@product 008C  
                              _LATAbits 000F89                                _LATBbits 000F8A  
                              _LATCbits 000F8B                                _LATDbits 000F8C  
                              _LATEbits 000F8D                             ??i2_initLCD 0004  
                           ??i2_isdigit 0001                                i2u440_47 085C  
                              i2u441_47 0884                                i2u450_47 170E  
                              i2u442_47 08B8                                i2u451_47 1718  
                              i2u443_47 08E0                  __end_of_initialization 156A  
                              i2u452_47 173A                                i2u444_47 0908  
                              i2u436_47 07B0                                i2u453_47 1744  
                              i2u445_47 093C                                i2u437_47 07D8  
                              i2u446_47 0964                                i2u438_47 0800  
                              i2u447_47 098C                                i2u439_47 0834  
                              i2u448_47 188E                                i2u449_47 18C2  
                      __CFG_WDTPS$32768 000000                              ?_lcdNibble 0001  
                     ___wmul@multiplier 0088                                i2___wmul 1B7C  
 __end_of_bottom_distribution_motor_ccw 1B7C  __size_of_bottom_distribution_motor_ccw 0026  
         _bottom_distribution_motor_ccw 1B56                           lcdNibble@data 0081  
                         ??_pop_results 0021                               _total_end 00B2  
                            printf@flag 00A0                           lcdNibble@temp 0080  
        __size_of_bottom_rocker_initial 000E                              printf@prec 009D  
         __end_of_bottom_rocker_initial 1D84       __end_of_top_distribution_motor_cw 1AE4  
                   __size_of_tot_sorted 0020          __size_of_bottom_rocker_release 0012  
                     i2___awdiv@divisor 0003           __end_of_bottom_rocker_release 1D28  
                     i2___awdiv@counter 0005                           ??_tin_results 0021  
                              i2_printf 03F0          __size_of_bottom_rocker_restore 0012  
         __end_of_bottom_rocker_restore 1D3A           __size_of_top_rocker_motor_ccw 0070  
                   I2C_Master_Read@temp 0082                         initialization@i 00A6  
                           _bottom_move 0049                           _tin_can_label 00C6  
                      __size_ofi2_putch 000C                      keypressed@keypress 0031  
           ?_top_distribution_motor_ccw 0001                                __Hrparam 0000  
                       ?_initialization 0001                                __Lrparam 0000  
                    __CFG_BOREN$SBORDIS 000000          ??_bottom_distribution_motor_cw 0080  
                  __end_of_startSorting 1042                        __size_of___awdiv 00BE  
                      __size_of___awmod 0070                   i2___wmul@multiplicand 0003  
                      __size_of___lldiv 00BC                        __size_of___lwdiv 0078  
                      __size_of___lwmod 0062            ?_bottom_distribution_initial 0001  
                      __size_of_lcdInst 0010                        __size_of_go_back 0020  
                       _I2C_Master_Init 1696                         _I2C_Master_Read 19EC  
                      __size_of_initLCD 004A                 __size_of_solenoids_back 0050  
          ?_bottom_distribution_prepare 0001                         _I2C_Master_Wait 1CDE  
                       _I2C_Master_Stop 1DB4                            ??_keypressed 0021  
                      __size_of_isdigit 002A                         ___lwdiv@divisor 0082  
                       ___lwdiv@counter 0084                        __size_of_op_time 0050  
                              __ptext10 19BA                                __ptext11 1BE4  
                              __ptext20 1D84                                __ptext12 1ABE  
                              __ptext21 1D16                                __ptext13 1AE4  
                              __ptext30 1B56                                __ptext22 1498  
                              __ptext14 1C04                                __ptext31 0E08  
                              __ptext23 1D28                                __ptext15 1C24  
                              __ptext40 1D4A                                __ptext32 15D2  
                              __ptext24 1B0A                                __ptext16 1502  
                              __ptext41 156A                                __ptext33 0C92  
                              __ptext25 13B8                                __ptext17 1D5A  
                              __ptext50 1696                                __ptext42 09FE  
                              __ptext34 0012                                __ptext26 1C44  
                              __ptext18 1D68                                __ptext51 1100  
                              __ptext43 1984                                __ptext35 1D3A  
                              __ptext27 1A1A                                __ptext19 1D76  
                              __ptext60 1B7C                                __ptext44 1042  
                              __ptext36 1A46                                __ptext28 1C64  
                              __ptext61 18CE                                __ptext53 1C84  
                              __ptext45 1DAA                                __ptext37 1634  
                              __ptext29 1B30                                __ptext62 174C  
                              __ptext54 1910                                __ptext46 1DB4  
                              __ptext38 12D0                                __ptext63 1888  
                              __ptext55 194A                                __ptext47 1DBC  
                              __ptext39 183E                                __ptext64 1D9E  
                              __ptext56 17EE                                __ptext48 19EC  
                              __ptext65 16F6                                __ptext57 03F0  
                              __ptext49 1CDE                                __ptext66 124C  
                              __ptext58 1D92                                __ptext67 1428  
                              __ptext59 1CA4                                __ptext68 0000  
                      __size_of_pop_out 0020                        __size_of_results 0176  
                      __size_of_standby 015C                     __end_of_pop_results 1984  
                        i2_isdigit$1388 0002                       _done_sorting$1733 0093  
                   __end_of_tin_results 194A                           __size_of_main 0090  
                             set_time@i 0083                                _set_time 15D2  
                         ??i2_lcdNibble 0001                             ??_lcdNibble 0080  
                    __end_of_keypressed 09FE        __end_of_top_distribution_initial 1D76  
                              int$flags 004D                                _top_move 003F  
                             printf@idx 009A                               printf@val 009E  
      __end_of_top_distribution_prepare 1C04            __size_of_top_rocker_motor_cw 0026  
                    _bottom_rocker_idle 1498                               putch@data 0082  
              __end_of_I2C_Master_Start 1DC4                    standby@keypress_temp 00A7  
              __end_of_I2C_Master_Write 1DB4                              _INTCONbits 000FF2  
         ??_bottom_distribution_initial 0080           ??_bottom_distribution_prepare 0082  
                   ?_bottom_rocker_idle 0001                                isdigit@c 0082  
              bottom_rocker_motor_ccw@k 0082                                intlevel2 0000  
                __size_of_solenoids_out 0012                        ___lwmod@dividend 0087  
                      ___lldiv@dividend 0080                         results@keypress 00A6  
                          ??_tot_sorted 0021                  _start_top_distribution 00BE  
                  ??_bottom_rocker_idle 0080             __size_of_top_rocker_initial 000E  
                              results@i 00A8                          _topRockerState 00D0  
                           _pop_can_tab 00C0             __size_of_top_rocker_release 001C  
                              printf@ap 009B             __size_of_top_rocker_restore 0012  
               __end_of_I2C_Master_Init 16F6                 __end_of_I2C_Master_Read 1A1A  
                              standby@i 00A9                 __end_of_I2C_Master_Wait 1CF2  
               __end_of_I2C_Master_Stop 1DBC                             lcdInst@data 0082  
                   __end_ofi2_lcdNibble 174C                ?_bottom_rocker_motor_ccw 0001  
        __size_of_top_distribution_idle 0032                        ___lldiv@quotient 0088  
                     I2C_Master_Write@d 0081                         ___lwmod@divisor 0089  
         __end_of_top_distribution_idle 19EC          __size_of_top_distribution_move 0020  
                           _pop_results 194A           __end_of_top_distribution_move 1BE4  
                       ___lwmod@counter 008B              ??_bottom_distribution_idle 0080  
            ??_bottom_distribution_move 0082                      __end_of_tot_sorted 1CA4  
                           _tin_results 1910                            results@i_765 00A9  
                          results@i_767 00AA    __size_of_bottom_distribution_initial 000E  
              ??_bottom_rocker_motor_cw 0080                   __size_of_startSorting 00DE  
  __size_of_bottom_distribution_prepare 0020  

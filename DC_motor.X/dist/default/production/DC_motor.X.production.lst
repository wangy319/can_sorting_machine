

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Apr  9 13:15:59 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16  0000                     
    17                           ; Version 1.41
    18                           ; Generated 25/01/2017 GMT
    19                           ; 
    20                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC18F4620 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     _PORTAbits	set	3968
    52  0000                     _ADCON1	set	4033
    53  0000                     _ADCON0	set	4034
    54  0000                     _LATE	set	3981
    55  0000                     _LATC	set	3979
    56  0000                     _LATB	set	3978
    57  0000                     _LATA	set	3977
    58  0000                     _TRISE	set	3990
    59  0000                     _TRISD	set	3989
    60  0000                     _TRISC	set	3988
    61  0000                     _TRISB	set	3987
    62  0000                     _TRISA	set	3986
    63  0000                     _LATD	set	3980
    64  0000                     _LATDbits	set	3980
    65  0000                     _nRBPU	set	32655
    66                           
    67                           	psect	smallconst
    68  001000                     __psmallconst:
    69                           	opt stack 0
    70  001000  00                 	db	0
    71  001001                     STR_1:
    72  001001  48                 	db	72	;'H'
    73  001002  49                 	db	73	;'I'
    74  001003  47                 	db	71	;'G'
    75  001004  48                 	db	72	;'H'
    76  001005  00                 	db	0
    77  001006                     STR_2:
    78  001006  4C                 	db	76	;'L'
    79  001007  4F                 	db	79	;'O'
    80  001008  57                 	db	87	;'W'
    81  001009  00                 	db	0
    82                           
    83                           ; #config settings
    84  00100A  00                 	db	0	; dummy byte at the end
    85  0000                     
    86                           	psect	cinit
    87  001184                     __pcinit:
    88                           	opt stack 0
    89  001184                     start_initialization:
    90                           	opt stack 0
    91  001184                     __initialization:
    92                           	opt stack 0
    93  001184                     end_of_initialization:
    94                           	opt stack 0
    95  001184                     __end_of__initialization:
    96                           	opt stack 0
    97  001184  0E00               	movlw	low (__Lsmallconst shr (0+16))
    98  001186  6EF8               	movwf	tblptru,c
    99  001188  0E10               	movlw	high __Lsmallconst
   100  00118A  6EF7               	movwf	tblptrh,c
   101  00118C  0100               	movlb	0
   102  00118E  EF06  F008         	goto	_main	;jump to C main() function
   103                           tblptru	equ	0xFF8
   104                           tblptrh	equ	0xFF7
   105                           
   106                           	psect	cstackCOMRAM
   107  000001                     __pcstackCOMRAM:
   108                           	opt stack 0
   109  000001                     lcdNibble@temp:
   110                           	opt stack 0
   111                           
   112                           ; 1 bytes @ 0x0
   113  000001                     	ds	1
   114  000002                     lcdNibble@data:
   115                           	opt stack 0
   116                           
   117                           ; 1 bytes @ 0x1
   118  000002                     	ds	1
   119  000003                     lcdInst@data:
   120                           	opt stack 0
   121  000003                     putch@data:
   122                           	opt stack 0
   123                           
   124                           ; 1 bytes @ 0x2
   125  000003                     	ds	1
   126  000004                     ??_initLCD:
   127  000004                     ?_printf:
   128                           	opt stack 0
   129  000004                     printf@f:
   130                           	opt stack 0
   131                           
   132                           ; 2 bytes @ 0x3
   133  000004                     	ds	2
   134  000006                     printf@ap:
   135                           	opt stack 0
   136                           
   137                           ; 2 bytes @ 0x5
   138  000006                     	ds	2
   139  000008                     printf@c:
   140                           	opt stack 0
   141                           
   142                           ; 1 bytes @ 0x7
   143  000008                     	ds	1
   144  000009                     ??_main:
   145                           
   146                           ; 1 bytes @ 0x8
   147  000009                     	ds	2
   148  00000B                     main@i:
   149                           	opt stack 0
   150                           
   151                           ; 1 bytes @ 0xA
   152  00000B                     	ds	1
   153  00000C                     main@i_203:
   154                           	opt stack 0
   155                           
   156                           ; 1 bytes @ 0xB
   157  00000C                     	ds	1
   158                           tblptru	equ	0xFF8
   159                           tblptrh	equ	0xFF7
   160                           
   161 ;;
   162 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   163 ;;
   164 ;; *************** function _main *****************
   165 ;; Defined at:
   166 ;;		line 9 in file "input_test.c"
   167 ;; Parameters:    Size  Location     Type
   168 ;;		None
   169 ;; Auto vars:     Size  Location     Type
   170 ;;  i               1   11[COMRAM] unsigned char 
   171 ;;  i               1   10[COMRAM] unsigned char 
   172 ;; Return value:  Size  Location     Type
   173 ;;                  1    wreg      void 
   174 ;; Registers used:
   175 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   176 ;; Tracked objects:
   177 ;;		On entry : 0/0
   178 ;;		On exit  : 0/0
   179 ;;		Unchanged: 0/0
   180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   182 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   183 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   184 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   185 ;;Total ram usage:        4 bytes
   186 ;; Hardware stack levels required when called:    3
   187 ;; This function calls:
   188 ;;		_initLCD
   189 ;;		_lcdInst
   190 ;;		_printf
   191 ;; This function is called by:
   192 ;;		Startup code after reset
   193 ;; This function uses a non-reentrant model
   194 ;;
   195                           
   196                           	psect	text0
   197  00100C                     __ptext0:
   198                           	opt stack 0
   199  00100C                     _main:
   200                           	opt stack 28
   201                           
   202                           ;input_test.c: 11: TRISA = 0xFF;
   203                           
   204                           ;incstack = 0
   205  00100C  6892               	setf	3986,c	;volatile
   206                           
   207                           ;input_test.c: 12: TRISB = 0x00;
   208  00100E  0E00               	movlw	0
   209  001010  6E93               	movwf	3987,c	;volatile
   210                           
   211                           ;input_test.c: 13: TRISC = 0x00;
   212  001012  0E00               	movlw	0
   213  001014  6E94               	movwf	3988,c	;volatile
   214                           
   215                           ;input_test.c: 14: TRISD = 0x00;
   216  001016  0E00               	movlw	0
   217  001018  6E95               	movwf	3989,c	;volatile
   218                           
   219                           ;input_test.c: 15: TRISE = 0x00;
   220  00101A  0E00               	movlw	0
   221  00101C  6E96               	movwf	3990,c	;volatile
   222                           
   223                           ;input_test.c: 17: LATA = 0x00;
   224  00101E  0E00               	movlw	0
   225  001020  6E89               	movwf	3977,c	;volatile
   226                           
   227                           ;input_test.c: 18: LATB = 0x00;
   228  001022  0E00               	movlw	0
   229  001024  6E8A               	movwf	3978,c	;volatile
   230                           
   231                           ;input_test.c: 19: LATC = 0x00;
   232  001026  0E00               	movlw	0
   233  001028  6E8B               	movwf	3979,c	;volatile
   234                           
   235                           ;input_test.c: 20: LATD = 0x00;
   236  00102A  0E00               	movlw	0
   237  00102C  6E8C               	movwf	3980,c	;volatile
   238                           
   239                           ;input_test.c: 21: LATE = 0x00;
   240  00102E  0E00               	movlw	0
   241  001030  6E8D               	movwf	3981,c	;volatile
   242                           
   243                           ;input_test.c: 23: ADCON0 = 0x00;
   244  001032  0E00               	movlw	0
   245  001034  6EC2               	movwf	4034,c	;volatile
   246                           
   247                           ;input_test.c: 24: ADCON1 = 0xFF;
   248  001036  68C1               	setf	4033,c	;volatile
   249                           
   250                           ;input_test.c: 26: nRBPU = 0;
   251  001038  9EF1               	bcf	intcon2,7,c	;volatile
   252                           
   253                           ;input_test.c: 29: if( PORTAbits.RA2 == 1){
   254                           
   255                           ;input_test.c: 28: while(1){
   256  00103A  A480               	btfss	3968,2,c	;volatile
   257  00103C  D020               	goto	l808
   258                           
   259                           ;input_test.c: 30: lcdInst(0b10000000);;
   260  00103E  0E80               	movlw	128
   261  001040  ECCF  F008         	call	_lcdInst
   262                           
   263                           ;input_test.c: 31: initLCD();
   264  001044  EC8A  F008         	call	_initLCD	;wreg free
   265                           
   266                           ;input_test.c: 32: printf("HIGH");
   267  001048  0E01               	movlw	low STR_1
   268  00104A  6E04               	movwf	printf@f,c
   269  00104C  0E10               	movlw	high STR_1
   270  00104E  6E05               	movwf	printf@f+1,c
   271  001050  ECAD  F008         	call	_printf	;wreg free
   272                           
   273                           ;input_test.c: 33: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
   274  001054  0E00               	movlw	0
   275  001056  6E0B               	movwf	main@i,c
   276  001058                     l800:
   277  001058  0E09               	movlw	9
   278  00105A  640B               	cpfsgt	main@i,c
   279  00105C  D002               	goto	l804
   280  00105E  EF00  F000         	goto	start
   281  001062                     l804:
   282  001062  0E02               	movlw	2
   283  001064  6E0A               	movwf	(??_main+1)& (0+255),c
   284  001066  0E3F               	movlw	63
   285  001068  6E09               	movwf	??_main& (0+255),c
   286  00106A  0E2B               	movlw	43
   287  00106C                     u137:
   288  00106C  2EE8               	decfsz	wreg,f,c
   289  00106E  D7FE               	bra	u137
   290  001070  2E09               	decfsz	??_main& (0+255),f,c
   291  001072  D7FC               	bra	u137
   292  001074  2E0A               	decfsz	(??_main+1)& (0+255),f,c
   293  001076  D7FA               	bra	u137
   294  001078  F000               	nop	
   295  00107A  2A0B               	incf	main@i,f,c
   296  00107C  D7ED               	goto	l800
   297  00107E                     l808:
   298                           
   299                           ;input_test.c: 35: lcdInst(0b10000000);;
   300  00107E  0E80               	movlw	128
   301  001080  ECCF  F008         	call	_lcdInst
   302                           
   303                           ;input_test.c: 36: initLCD();
   304  001084  EC8A  F008         	call	_initLCD	;wreg free
   305                           
   306                           ;input_test.c: 37: printf("LOW");
   307  001088  0E06               	movlw	low STR_2
   308  00108A  6E04               	movwf	printf@f,c
   309  00108C  0E10               	movlw	high STR_2
   310  00108E  6E05               	movwf	printf@f+1,c
   311  001090  ECAD  F008         	call	_printf	;wreg free
   312                           
   313                           ;input_test.c: 38: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
   314  001094  0E00               	movlw	0
   315  001096  6E0C               	movwf	main@i_203,c
   316  001098                     l814:
   317  001098  0E09               	movlw	9
   318  00109A  640C               	cpfsgt	main@i_203,c
   319  00109C  D002               	goto	l818
   320  00109E  EF00  F000         	goto	start
   321  0010A2                     l818:
   322  0010A2  0E02               	movlw	2
   323  0010A4  6E0A               	movwf	(??_main+1)& (0+255),c
   324  0010A6  0E3F               	movlw	63
   325  0010A8  6E09               	movwf	??_main& (0+255),c
   326  0010AA  0E2B               	movlw	43
   327  0010AC                     u147:
   328  0010AC  2EE8               	decfsz	wreg,f,c
   329  0010AE  D7FE               	bra	u147
   330  0010B0  2E09               	decfsz	??_main& (0+255),f,c
   331  0010B2  D7FC               	bra	u147
   332  0010B4  2E0A               	decfsz	(??_main+1)& (0+255),f,c
   333  0010B6  D7FA               	bra	u147
   334  0010B8  F000               	nop	
   335  0010BA  2A0C               	incf	main@i_203,f,c
   336  0010BC  D7ED               	goto	l814
   337  0010BE                     __end_of_main:
   338                           	opt stack 0
   339                           tblptru	equ	0xFF8
   340                           tblptrh	equ	0xFF7
   341                           intcon2	equ	0xFF1
   342                           wreg	equ	0xFE8
   343                           
   344 ;; *************** function _printf *****************
   345 ;; Defined at:
   346 ;;		line 464 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
   347 ;; Parameters:    Size  Location     Type
   348 ;;  f               2    3[COMRAM] PTR const unsigned char 
   349 ;;		 -> STR_2(4), STR_1(5), 
   350 ;; Auto vars:     Size  Location     Type
   351 ;;  tmpval          4    0        struct .
   352 ;;  cp              3    0        PTR const unsigned char 
   353 ;;  ap              2    5[COMRAM] PTR void [1]
   354 ;;		 -> ?_printf(2), 
   355 ;;  len             2    0        unsigned int 
   356 ;;  val             2    0        unsigned int 
   357 ;;  c               1    7[COMRAM] char 
   358 ;;  flag            1    0        unsigned char 
   359 ;;  prec            1    0        char 
   360 ;; Return value:  Size  Location     Type
   361 ;;                  2    3[COMRAM] int 
   362 ;; Registers used:
   363 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   364 ;; Tracked objects:
   365 ;;		On entry : 0/0
   366 ;;		On exit  : 0/0
   367 ;;		Unchanged: 0/0
   368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   369 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   370 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   372 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   373 ;;Total ram usage:        5 bytes
   374 ;; Hardware stack levels used:    1
   375 ;; Hardware stack levels required when called:    2
   376 ;; This function calls:
   377 ;;		_putch
   378 ;; This function is called by:
   379 ;;		_main
   380 ;; This function uses a non-reentrant model
   381 ;;
   382                           
   383                           	psect	text1
   384  00115A                     __ptext1:
   385                           	opt stack 0
   386  00115A                     _printf:
   387                           	opt stack 28
   388                           
   389                           ;doprnt.c: 466: va_list ap;
   390                           ;doprnt.c: 499: signed char c;
   391                           ;doprnt.c: 506: signed char prec;
   392                           ;doprnt.c: 508: unsigned char flag;
   393                           ;doprnt.c: 523: union {
   394                           ;doprnt.c: 524: unsigned long vd;
   395                           ;doprnt.c: 525: double integ;
   396                           ;doprnt.c: 526: } tmpval;
   397                           ;doprnt.c: 528: unsigned int val;
   398                           ;doprnt.c: 529: unsigned len;
   399                           ;doprnt.c: 530: const char * cp;
   400                           ;doprnt.c: 533: *ap = __va_start();
   401                           
   402                           ;incstack = 0
   403  00115A  0E06               	movlw	low (?_printf+2)
   404  00115C  6E06               	movwf	printf@ap,c
   405  00115E  0E00               	movlw	high (?_printf+2)
   406  001160  6E07               	movwf	printf@ap+1,c
   407                           
   408                           ;doprnt.c: 536: while(c = *f++) {
   409  001162  D003               	goto	l782
   410  001164                     l780:
   411                           
   412                           ;doprnt.c: 540: {
   413                           ;doprnt.c: 541: (putch(c) );
   414  001164  5008               	movf	printf@c,w,c
   415  001166  ECC9  F008         	call	_putch
   416  00116A                     l782:
   417  00116A  C004  FFF6         	movff	printf@f,tblptrl
   418  00116E  C005  FFF7         	movff	printf@f+1,tblptrh
   419  001172  4A04               	infsnz	printf@f,f,c
   420  001174  2A05               	incf	printf@f+1,f,c
   421  001176                     	if	0	;tblptru may be non-zero
   422  001176                     	endif
   423  001176                     	if	0	;tblptru may be non-zero
   424  001176                     	endif
   425  001176  0008               	tblrd		*
   426  001178  CFF5 F008          	movff	tablat,printf@c
   427  00117C  5008               	movf	printf@c,w,c
   428  00117E  B4D8               	btfsc	status,2,c
   429  001180  0012               	return	
   430  001182  D7F0               	goto	l780
   431  001184                     __end_of_printf:
   432                           	opt stack 0
   433                           tblptru	equ	0xFF8
   434                           tblptrh	equ	0xFF7
   435                           tblptrl	equ	0xFF6
   436                           tablat	equ	0xFF5
   437                           intcon2	equ	0xFF1
   438                           wreg	equ	0xFE8
   439                           status	equ	0xFD8
   440                           
   441 ;; *************** function _putch *****************
   442 ;; Defined at:
   443 ;;		line 30 in file "../interface_flow.X/lcd.c"
   444 ;; Parameters:    Size  Location     Type
   445 ;;  data            1    wreg     unsigned char 
   446 ;; Auto vars:     Size  Location     Type
   447 ;;  data            1    2[COMRAM] unsigned char 
   448 ;; Return value:  Size  Location     Type
   449 ;;                  1    wreg      void 
   450 ;; Registers used:
   451 ;;		wreg, status,2, status,0, cstack
   452 ;; Tracked objects:
   453 ;;		On entry : 0/0
   454 ;;		On exit  : 0/0
   455 ;;		Unchanged: 0/0
   456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   458 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   460 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   461 ;;Total ram usage:        1 bytes
   462 ;; Hardware stack levels used:    1
   463 ;; Hardware stack levels required when called:    1
   464 ;; This function calls:
   465 ;;		_lcdNibble
   466 ;; This function is called by:
   467 ;;		_printf
   468 ;; This function uses a non-reentrant model
   469 ;;
   470                           
   471                           	psect	text2
   472  001192                     __ptext2:
   473                           	opt stack 0
   474  001192                     _putch:
   475                           	opt stack 28
   476                           
   477                           ;incstack = 0
   478                           ;putch@data stored from wreg
   479  001192  6E03               	movwf	putch@data,c
   480                           
   481                           ;lcd.c: 31: LATDbits.LATD2 = 1;
   482  001194  848C               	bsf	3980,2,c	;volatile
   483                           
   484                           ;lcd.c: 32: lcdNibble(data);
   485  001196  5003               	movf	putch@data,w,c
   486  001198  EC5F  F008         	call	_lcdNibble
   487  00119C  0012               	return		;funcret
   488  00119E                     __end_of_putch:
   489                           	opt stack 0
   490                           tblptru	equ	0xFF8
   491                           tblptrh	equ	0xFF7
   492                           tblptrl	equ	0xFF6
   493                           tablat	equ	0xFF5
   494                           intcon2	equ	0xFF1
   495                           wreg	equ	0xFE8
   496                           status	equ	0xFD8
   497                           
   498 ;; *************** function _initLCD *****************
   499 ;; Defined at:
   500 ;;		line 14 in file "../interface_flow.X/lcd.c"
   501 ;; Parameters:    Size  Location     Type
   502 ;;		None
   503 ;; Auto vars:     Size  Location     Type
   504 ;;		None
   505 ;; Return value:  Size  Location     Type
   506 ;;                  1    wreg      void 
   507 ;; Registers used:
   508 ;;		wreg, status,2, status,0, cstack
   509 ;; Tracked objects:
   510 ;;		On entry : 0/0
   511 ;;		On exit  : 0/0
   512 ;;		Unchanged: 0/0
   513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   516 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   517 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   518 ;;Total ram usage:        1 bytes
   519 ;; Hardware stack levels used:    1
   520 ;; Hardware stack levels required when called:    2
   521 ;; This function calls:
   522 ;;		_lcdInst
   523 ;; This function is called by:
   524 ;;		_main
   525 ;; This function uses a non-reentrant model
   526 ;;
   527                           
   528                           	psect	text3
   529  001114                     __ptext3:
   530                           	opt stack 0
   531  001114                     _initLCD:
   532                           	opt stack 28
   533                           
   534                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
   535                           
   536                           ;incstack = 0
   537  001114  0E31               	movlw	49
   538  001116  6E04               	movwf	??_initLCD& (0+255),c
   539  001118  0EB2               	movlw	178
   540  00111A                     u157:
   541  00111A  2EE8               	decfsz	wreg,f,c
   542  00111C  D7FE               	bra	u157
   543  00111E  2E04               	decfsz	??_initLCD& (0+255),f,c
   544  001120  D7FC               	bra	u157
   545  001122  D000               	nop2	
   546                           
   547                           ;lcd.c: 16: lcdInst(0b00110011);
   548  001124  0E33               	movlw	51
   549  001126  ECCF  F008         	call	_lcdInst
   550                           
   551                           ;lcd.c: 17: lcdInst(0b00110010);
   552  00112A  0E32               	movlw	50
   553  00112C  ECCF  F008         	call	_lcdInst
   554                           
   555                           ;lcd.c: 18: lcdInst(0b00101000);
   556  001130  0E28               	movlw	40
   557  001132  ECCF  F008         	call	_lcdInst
   558                           
   559                           ;lcd.c: 19: lcdInst(0b00001111);
   560  001136  0E0F               	movlw	15
   561  001138  ECCF  F008         	call	_lcdInst
   562                           
   563                           ;lcd.c: 20: lcdInst(0b00000110);
   564  00113C  0E06               	movlw	6
   565  00113E  ECCF  F008         	call	_lcdInst
   566                           
   567                           ;lcd.c: 21: lcdInst(0b00000001);
   568  001142  0E01               	movlw	1
   569  001144  ECCF  F008         	call	_lcdInst
   570                           
   571                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
   572  001148  0E31               	movlw	49
   573  00114A  6E04               	movwf	??_initLCD& (0+255),c
   574  00114C  0EB2               	movlw	178
   575  00114E                     u167:
   576  00114E  2EE8               	decfsz	wreg,f,c
   577  001150  D7FE               	bra	u167
   578  001152  2E04               	decfsz	??_initLCD& (0+255),f,c
   579  001154  D7FC               	bra	u167
   580  001156  D000               	nop2	
   581  001158  0012               	return		;funcret
   582  00115A                     __end_of_initLCD:
   583                           	opt stack 0
   584                           tblptru	equ	0xFF8
   585                           tblptrh	equ	0xFF7
   586                           tblptrl	equ	0xFF6
   587                           tablat	equ	0xFF5
   588                           intcon2	equ	0xFF1
   589                           wreg	equ	0xFE8
   590                           status	equ	0xFD8
   591                           
   592 ;; *************** function _lcdInst *****************
   593 ;; Defined at:
   594 ;;		line 25 in file "../interface_flow.X/lcd.c"
   595 ;; Parameters:    Size  Location     Type
   596 ;;  data            1    wreg     unsigned char 
   597 ;; Auto vars:     Size  Location     Type
   598 ;;  data            1    2[COMRAM] unsigned char 
   599 ;; Return value:  Size  Location     Type
   600 ;;                  1    wreg      void 
   601 ;; Registers used:
   602 ;;		wreg, status,2, status,0, cstack
   603 ;; Tracked objects:
   604 ;;		On entry : 0/0
   605 ;;		On exit  : 0/0
   606 ;;		Unchanged: 0/0
   607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   609 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   611 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   612 ;;Total ram usage:        1 bytes
   613 ;; Hardware stack levels used:    1
   614 ;; Hardware stack levels required when called:    1
   615 ;; This function calls:
   616 ;;		_lcdNibble
   617 ;; This function is called by:
   618 ;;		_initLCD
   619 ;;		_main
   620 ;; This function uses a non-reentrant model
   621 ;;
   622                           
   623                           	psect	text4
   624  00119E                     __ptext4:
   625                           	opt stack 0
   626  00119E                     _lcdInst:
   627                           	opt stack 29
   628                           
   629                           ;incstack = 0
   630                           ;lcdInst@data stored from wreg
   631  00119E  6E03               	movwf	lcdInst@data,c
   632                           
   633                           ;lcd.c: 26: LATDbits.LATD2 = 0;
   634  0011A0  948C               	bcf	3980,2,c	;volatile
   635                           
   636                           ;lcd.c: 27: lcdNibble(data);
   637  0011A2  5003               	movf	lcdInst@data,w,c
   638  0011A4  EC5F  F008         	call	_lcdNibble
   639  0011A8  0012               	return		;funcret
   640  0011AA                     __end_of_lcdInst:
   641                           	opt stack 0
   642                           tblptru	equ	0xFF8
   643                           tblptrh	equ	0xFF7
   644                           tblptrl	equ	0xFF6
   645                           tablat	equ	0xFF5
   646                           intcon2	equ	0xFF1
   647                           wreg	equ	0xFE8
   648                           status	equ	0xFD8
   649                           
   650 ;; *************** function _lcdNibble *****************
   651 ;; Defined at:
   652 ;;		line 35 in file "../interface_flow.X/lcd.c"
   653 ;; Parameters:    Size  Location     Type
   654 ;;  data            1    wreg     unsigned char 
   655 ;; Auto vars:     Size  Location     Type
   656 ;;  data            1    1[COMRAM] unsigned char 
   657 ;;  temp            1    0[COMRAM] unsigned char 
   658 ;; Return value:  Size  Location     Type
   659 ;;                  1    wreg      void 
   660 ;; Registers used:
   661 ;;		wreg, status,2, status,0
   662 ;; Tracked objects:
   663 ;;		On entry : 0/0
   664 ;;		On exit  : 0/0
   665 ;;		Unchanged: 0/0
   666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   668 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   670 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   671 ;;Total ram usage:        2 bytes
   672 ;; Hardware stack levels used:    1
   673 ;; This function calls:
   674 ;;		Nothing
   675 ;; This function is called by:
   676 ;;		_lcdInst
   677 ;;		_putch
   678 ;; This function uses a non-reentrant model
   679 ;;
   680                           
   681                           	psect	text5
   682  0010BE                     __ptext5:
   683                           	opt stack 0
   684  0010BE                     _lcdNibble:
   685                           	opt stack 28
   686                           
   687                           ;incstack = 0
   688                           ;lcdNibble@data stored from wreg
   689  0010BE  6E02               	movwf	lcdNibble@data,c
   690                           
   691                           ;lcd.c: 37: char temp = data & 0xF0;
   692  0010C0  5002               	movf	lcdNibble@data,w,c
   693  0010C2  0BF0               	andlw	240
   694  0010C4  6E01               	movwf	lcdNibble@temp,c
   695                           
   696                           ;lcd.c: 38: LATD = LATD & 0x0F;
   697  0010C6  508C               	movf	3980,w,c	;volatile
   698  0010C8  0B0F               	andlw	15
   699  0010CA  6E8C               	movwf	3980,c	;volatile
   700                           
   701                           ;lcd.c: 39: LATD = temp | LATD;
   702  0010CC  5001               	movf	lcdNibble@temp,w,c
   703  0010CE  108C               	iorwf	3980,w,c	;volatile
   704  0010D0  6E8C               	movwf	3980,c	;volatile
   705                           
   706                           ;lcd.c: 41: LATDbits.LATD3 = 0;
   707  0010D2  968C               	bcf	3980,3,c	;volatile
   708                           
   709                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
   710  0010D4  0E14               	movlw	20
   711  0010D6                     u177:
   712  0010D6  2EE8               	decfsz	wreg,f,c
   713  0010D8  D7FE               	bra	u177
   714  0010DA  D000               	nop2	
   715                           
   716                           ;lcd.c: 43: LATDbits.LATD3 = 1;
   717  0010DC  868C               	bsf	3980,3,c	;volatile
   718                           
   719                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
   720  0010DE  0E14               	movlw	20
   721  0010E0                     u187:
   722  0010E0  2EE8               	decfsz	wreg,f,c
   723  0010E2  D7FE               	bra	u187
   724  0010E4  D000               	nop2	
   725                           
   726                           ;lcd.c: 46: data = data << 4;
   727  0010E6  3802               	swapf	lcdNibble@data,w,c
   728  0010E8  0BF0               	andlw	240
   729  0010EA  6E02               	movwf	lcdNibble@data,c
   730                           
   731                           ;lcd.c: 48: temp = data & 0xF0;
   732  0010EC  5002               	movf	lcdNibble@data,w,c
   733  0010EE  0BF0               	andlw	240
   734  0010F0  6E01               	movwf	lcdNibble@temp,c
   735                           
   736                           ;lcd.c: 49: LATD = LATD & 0x0F;
   737  0010F2  508C               	movf	3980,w,c	;volatile
   738  0010F4  0B0F               	andlw	15
   739  0010F6  6E8C               	movwf	3980,c	;volatile
   740                           
   741                           ;lcd.c: 50: LATD = temp | LATD;
   742  0010F8  5001               	movf	lcdNibble@temp,w,c
   743  0010FA  108C               	iorwf	3980,w,c	;volatile
   744  0010FC  6E8C               	movwf	3980,c	;volatile
   745                           
   746                           ;lcd.c: 52: LATDbits.LATD3 = 0;
   747  0010FE  968C               	bcf	3980,3,c	;volatile
   748                           
   749                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
   750  001100  0E14               	movlw	20
   751  001102                     u197:
   752  001102  2EE8               	decfsz	wreg,f,c
   753  001104  D7FE               	bra	u197
   754  001106  D000               	nop2	
   755                           
   756                           ;lcd.c: 54: LATDbits.LATD3 = 1;
   757  001108  868C               	bsf	3980,3,c	;volatile
   758                           
   759                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
   760  00110A  0E14               	movlw	20
   761  00110C                     u207:
   762  00110C  2EE8               	decfsz	wreg,f,c
   763  00110E  D7FE               	bra	u207
   764  001110  D000               	nop2	
   765  001112  0012               	return		;funcret
   766  001114                     __end_of_lcdNibble:
   767                           	opt stack 0
   768                           tblptru	equ	0xFF8
   769                           tblptrh	equ	0xFF7
   770                           tblptrl	equ	0xFF6
   771                           tablat	equ	0xFF5
   772                           intcon2	equ	0xFF1
   773                           wreg	equ	0xFE8
   774                           status	equ	0xFD8
   775                           tblptru	equ	0xFF8
   776                           tblptrh	equ	0xFF7
   777                           tblptrl	equ	0xFF6
   778                           tablat	equ	0xFF5
   779                           intcon2	equ	0xFF1
   780                           wreg	equ	0xFE8
   781                           status	equ	0xFD8
   782                           
   783                           	psect	rparam
   784  0000                     tblptru	equ	0xFF8
   785                           tblptrh	equ	0xFF7
   786                           tblptrl	equ	0xFF6
   787                           tablat	equ	0xFF5
   788                           intcon2	equ	0xFF1
   789                           wreg	equ	0xFE8
   790                           status	equ	0xFD8


Data Sizes:
    Strings     9
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     12      12
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[4]), STR_1(CODE[5]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->_putch
    _putch->_lcdNibble
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     536
                                              8 COMRAM     4     4      0
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     264
                                              3 COMRAM     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     _putch
       _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F      C       C       1        9.4%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
ABS                  0      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BIGRAM             F7F      0       0      37        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Apr  9 13:15:59 2017

            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000  
                    l800 1058                      l804 1062                      l814 1098  
                    l808 107E                      l818 10A2                      l780 1164  
                    l782 116A             __CFG_CPB$OFF 000000                      u207 110C  
                    u137 106C                      u147 10AC                      u157 111A  
                    u167 114E                      u177 10D6             __CFG_CPD$OFF 000000  
                    u187 10E0                      u197 1102                      wreg 000FE8  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     STR_1 1001  
                   STR_2 1006                     _LATA 000F89                     _LATB 000F8A  
                   _LATC 000F8B                     _LATD 000F8C                     _LATE 000F8D  
                   _main 100C                     start 0000            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000                    ?_main 0001  
                  _TRISA 000F92                    _TRISB 000F93                    _TRISC 000F94  
                  _TRISD 000F95                    _TRISE 000F96            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000          __end_of_lcdInst 11AA           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000                    _nRBPU 007F8F            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000          __end_of_initLCD 115A  
         __CFG_EBTRB$OFF 000000                    _putch 1192                    main@i 000B  
                  tablat 000FF5                    status 000FD8           __CFG_PBADEN$ON 000000  
        __initialization 1184             __end_of_main 10BE                   ??_main 0009  
          __activetblptr 000001                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 ?_putch 0001           __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000  
              ??_lcdInst 0003                   _printf 115A                ??_initLCD 0004  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0080  __end_of__initialization 1184  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_putch 119E  
     __size_of_lcdNibble 0056                  ??_putch 0003                  ?_printf 0004  
      __end_of_lcdNibble 1114                  __Hparam 0000                  __Lparam 0000  
           __psmallconst 1000                  __pcinit 1184                  __ramtop 1000  
                _lcdInst 119E                  __ptext0 100C                  __ptext1 115A  
                __ptext2 1192                  __ptext3 1114                  __ptext4 119E  
                __ptext5 10BE          __size_of_printf 002A                  _initLCD 1114  
   end_of_initialization 1184                  printf@c 0008                  printf@f 0004  
              _PORTAbits 000F80           __end_of_printf 1184      start_initialization 1184  
       __CFG_LPT1OSC$OFF 000000                 ??_printf 0006        __CFG_CCP2MX$PORTC 000000  
              _lcdNibble 10BE                 ?_lcdInst 0001                 ?_initLCD 0001  
            __smallconst 1000           __size_of_putch 000C                 _LATDbits 000F8C  
       __CFG_WDTPS$32768 000000               ?_lcdNibble 0001                main@i_203 000C  
          lcdNibble@data 0002            lcdNibble@temp 0001                 __Hrparam 0000  
               __Lrparam 0000             __Lsmallconst 1000       __CFG_BOREN$SBORDIS 000000  
       __size_of_lcdInst 000C         __size_of_initLCD 0046            __size_of_main 00B2  
            ??_lcdNibble 0001                putch@data 0003                 printf@ap 0006  
            lcdInst@data 0003  

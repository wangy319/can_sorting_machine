

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Mar  8 14:53:15 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1
    76                           	psect	text64,global,reloc=2,class=CODE,delta=1
    77                           	psect	text65,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    79                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    81                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    82  0000                     
    83                           ; Version 1.41
    84                           ; Generated 25/01/2017 GMT
    85                           ; 
    86                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    87                           ; All rights reserved.
    88                           ; 
    89                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    90                           ; 
    91                           ; Redistribution and use in source and binary forms, with or without modification, are
    92                           ; permitted provided that the following conditions are met:
    93                           ; 
    94                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    95                           ;        conditions and the following disclaimer.
    96                           ; 
    97                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    98                           ;        of conditions and the following disclaimer in the documentation and/or other
    99                           ;        materials provided with the distribution.
   100                           ; 
   101                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   102                           ;        software without specific prior written permission.
   103                           ; 
   104                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   105                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   106                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   107                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   108                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   109                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   110                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   111                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   112                           ; 
   113                           ; 
   114                           ; Code-generator required, PIC18F4620 Definitions
   115                           ; 
   116                           ; SFR Addresses
   117  0000                     
   118                           	psect	mediumconst
   119  00FE0A                     __pmediumconst:
   120                           	opt stack 0
   121  00FE0A  00                 	db	0
   122  00FE0B                     _keys:
   123                           	opt stack 0
   124  00FE0B  31                 	db	49
   125  00FE0C  32                 	db	50
   126  00FE0D  33                 	db	51
   127  00FE0E  41                 	db	65
   128  00FE0F  34                 	db	52
   129  00FE10  35                 	db	53
   130  00FE11  36                 	db	54
   131  00FE12  42                 	db	66
   132  00FE13  37                 	db	55
   133  00FE14  38                 	db	56
   134  00FE15  39                 	db	57
   135  00FE16  43                 	db	67
   136  00FE17  2A                 	db	42
   137  00FE18  30                 	db	48
   138  00FE19  23                 	db	35
   139  00FE1A  44                 	db	68
   140  00FE1B  00                 	db	0
   141  00FE1C                     __end_of_keys:
   142                           	opt stack 0
   143  00FE1C                     _dpowers:
   144                           	opt stack 0
   145  00FE1C  0001               	dw	1
   146  00FE1E  000A               	dw	10
   147  00FE20  0064               	dw	100
   148  00FE22  03E8               	dw	1000
   149  00FE24  2710               	dw	10000
   150  00FE26                     __end_of_dpowers:
   151                           	opt stack 0
   152  00FE26                     _hexpowers:
   153                           	opt stack 0
   154  00FE26  0001               	dw	1
   155  00FE28  0010               	dw	16
   156  00FE2A  0100               	dw	256
   157  00FE2C  1000               	dw	4096
   158  00FE2E                     __end_of_hexpowers:
   159                           	opt stack 0
   160  00FE2E                     _real_time:
   161                           	opt stack 0
   162  00FE2E  45                 	db	69
   163  00FE2F  59                 	db	89
   164  00FE30  17                 	db	23
   165  00FE31  04                 	db	4
   166  00FE32  31                 	db	49
   167  00FE33  02                 	db	2
   168  00FE34  17                 	db	23
   169  00FE35                     __end_of_real_time:
   170                           	opt stack 0
   171  0000                     _PORTBbits	set	3969
   172  0000                     _INTCONbits	set	4082
   173  0000                     _LATEbits	set	3981
   174  0000                     _LATCbits	set	3979
   175  0000                     _LATBbits	set	3978
   176  0000                     _ADCON1	set	4033
   177  0000                     _ADCON0	set	4034
   178  0000                     _LATE	set	3981
   179  0000                     _LATC	set	3979
   180  0000                     _LATB	set	3978
   181  0000                     _LATAbits	set	3977
   182  0000                     _LATA	set	3977
   183  0000                     _TRISE	set	3990
   184  0000                     _TRISD	set	3989
   185  0000                     _TRISC	set	3988
   186  0000                     _TRISB	set	3987
   187  0000                     _TRISA	set	3986
   188  0000                     _LATD	set	3980
   189  0000                     _LATDbits	set	3980
   190  0000                     _PORTB	set	3969
   191  0000                     _SSPBUF	set	4041
   192  0000                     _SSPADD	set	4040
   193  0000                     _SSPCON2	set	4037
   194  0000                     _SSPCON1	set	4038
   195  0000                     _SSPSTAT	set	4039
   196  0000                     _PORTCbits	set	3970
   197  0000                     _PORTAbits	set	3968
   198  0000                     _INT1IE	set	32643
   199  0000                     _INT1IF	set	32640
   200  0000                     _ACKEN	set	32300
   201  0000                     _ACKDT	set	32301
   202  0000                     _RCEN	set	32299
   203  0000                     _PEN	set	32298
   204  0000                     _RSEN	set	32297
   205  0000                     _SEN	set	32296
   206  0000                     _TRISC4	set	31908
   207  0000                     _TRISC3	set	31907
   208  00FE35                     STR_21:
   209  00FE35  54                 	db	84	;'T'
   210  00FE36  69                 	db	105	;'i'
   211  00FE37  6D                 	db	109	;'m'
   212  00FE38  65                 	db	101	;'e'
   213  00FE39  3A                 	db	58	;':'
   214  00FE3A  20                 	db	32
   215  00FE3B  25                 	db	37
   216  00FE3C  30                 	db	48	;'0'
   217  00FE3D  31                 	db	49	;'1'
   218  00FE3E  64                 	db	100	;'d'
   219  00FE3F  20                 	db	32
   220  00FE40  6D                 	db	109	;'m'
   221  00FE41  69                 	db	105	;'i'
   222  00FE42  6E                 	db	110	;'n'
   223  00FE43  20                 	db	32
   224  00FE44  25                 	db	37
   225  00FE45  30                 	db	48	;'0'
   226  00FE46  32                 	db	50	;'2'
   227  00FE47  64                 	db	100	;'d'
   228  00FE48  20                 	db	32
   229  00FE49  73                 	db	115	;'s'
   230  00FE4A  00                 	db	0
   231  00FE4B                     STR_20:
   232  00FE4B  54                 	db	84	;'T'
   233  00FE4C  6F                 	db	111	;'o'
   234  00FE4D  74                 	db	116	;'t'
   235  00FE4E  61                 	db	97	;'a'
   236  00FE4F  6C                 	db	108	;'l'
   237  00FE50  20                 	db	32
   238  00FE51  53                 	db	83	;'S'
   239  00FE52  6F                 	db	111	;'o'
   240  00FE53  72                 	db	114	;'r'
   241  00FE54  74                 	db	116	;'t'
   242  00FE55  65                 	db	101	;'e'
   243  00FE56  64                 	db	100	;'d'
   244  00FE57  3A                 	db	58	;':'
   245  00FE58  20                 	db	32
   246  00FE59  25                 	db	37
   247  00FE5A  30                 	db	48	;'0'
   248  00FE5B  32                 	db	50	;'2'
   249  00FE5C  78                 	db	120	;'x'
   250  00FE5D  00                 	db	0
   251  00FE5E                     STR_35:
   252  00FE5E  30                 	db	48	;'0'
   253  00FE5F  31                 	db	49	;'1'
   254  00FE60  32                 	db	50	;'2'
   255  00FE61  33                 	db	51	;'3'
   256  00FE62  34                 	db	52	;'4'
   257  00FE63  35                 	db	53	;'5'
   258  00FE64  36                 	db	54	;'6'
   259  00FE65  37                 	db	55	;'7'
   260  00FE66  38                 	db	56	;'8'
   261  00FE67  39                 	db	57	;'9'
   262  00FE68  61                 	db	97	;'a'
   263  00FE69  62                 	db	98	;'b'
   264  00FE6A  63                 	db	99	;'c'
   265  00FE6B  64                 	db	100	;'d'
   266  00FE6C  65                 	db	101	;'e'
   267  00FE6D  66                 	db	102	;'f'
   268  00FE6E  00                 	db	0
   269  00FE6F                     STR_17:
   270  00FE6F  41                 	db	65	;'A'
   271  00FE70  3A                 	db	58	;':'
   272  00FE71  54                 	db	84	;'T'
   273  00FE72  6F                 	db	111	;'o'
   274  00FE73  74                 	db	116	;'t'
   275  00FE74  61                 	db	97	;'a'
   276  00FE75  6C                 	db	108	;'l'
   277  00FE76  20                 	db	32
   278  00FE77  20                 	db	32
   279  00FE78  20                 	db	32
   280  00FE79  42                 	db	66	;'B'
   281  00FE7A  3A                 	db	58	;':'
   282  00FE7B  50                 	db	80	;'P'
   283  00FE7C  6F                 	db	111	;'o'
   284  00FE7D  70                 	db	112	;'p'
   285  00FE7E  20                 	db	32
   286  00FE7F  00                 	db	0
   287  00FE80                     STR_18:
   288  00FE80  43                 	db	67	;'C'
   289  00FE81  3A                 	db	58	;':'
   290  00FE82  54                 	db	84	;'T'
   291  00FE83  69                 	db	105	;'i'
   292  00FE84  6E                 	db	110	;'n'
   293  00FE85  20                 	db	32
   294  00FE86  20                 	db	32
   295  00FE87  20                 	db	32
   296  00FE88  20                 	db	32
   297  00FE89  20                 	db	32
   298  00FE8A  44                 	db	68	;'D'
   299  00FE8B  3A                 	db	58	;':'
   300  00FE8C  54                 	db	84	;'T'
   301  00FE8D  69                 	db	105	;'i'
   302  00FE8E  6D                 	db	109	;'m'
   303  00FE8F  65                 	db	101	;'e'
   304  00FE90  00                 	db	0
   305  00FE91                     STR_19:
   306  00FE91  50                 	db	80	;'P'
   307  00FE92  72                 	db	114	;'r'
   308  00FE93  65                 	db	101	;'e'
   309  00FE94  73                 	db	115	;'s'
   310  00FE95  73                 	db	115	;'s'
   311  00FE96  20                 	db	32
   312  00FE97  30                 	db	48	;'0'
   313  00FE98  20                 	db	32
   314  00FE99  74                 	db	116	;'t'
   315  00FE9A  6F                 	db	111	;'o'
   316  00FE9B  20                 	db	32
   317  00FE9C  52                 	db	82	;'R'
   318  00FE9D  65                 	db	101	;'e'
   319  00FE9E  73                 	db	115	;'s'
   320  00FE9F  65                 	db	101	;'e'
   321  00FEA0  74                 	db	116	;'t'
   322  00FEA1  00                 	db	0
   323  00FEA2                     STR_13:
   324  00FEA2  50                 	db	80	;'P'
   325  00FEA3  72                 	db	114	;'r'
   326  00FEA4  65                 	db	101	;'e'
   327  00FEA5  73                 	db	115	;'s'
   328  00FEA6  73                 	db	115	;'s'
   329  00FEA7  20                 	db	32
   330  00FEA8  23                 	db	35
   331  00FEA9  20                 	db	32
   332  00FEAA  74                 	db	116	;'t'
   333  00FEAB  6F                 	db	111	;'o'
   334  00FEAC  20                 	db	32
   335  00FEAD  53                 	db	83	;'S'
   336  00FEAE  74                 	db	116	;'t'
   337  00FEAF  61                 	db	97	;'a'
   338  00FEB0  72                 	db	114	;'r'
   339  00FEB1  74                 	db	116	;'t'
   340  00FEB2  00                 	db	0
   341  00FEB3                     STR_22:
   342  00FEB3  57                 	db	87	;'W'
   343  00FEB4  69                 	db	105	;'i'
   344  00FEB5  74                 	db	116	;'t'
   345  00FEB6  68                 	db	104	;'h'
   346  00FEB7  20                 	db	32
   347  00FEB8  4C                 	db	76	;'L'
   348  00FEB9  61                 	db	97	;'a'
   349  00FEBA  62                 	db	98	;'b'
   350  00FEBB  65                 	db	101	;'e'
   351  00FEBC  6C                 	db	108	;'l'
   352  00FEBD  3A                 	db	58	;':'
   353  00FEBE  20                 	db	32
   354  00FEBF  25                 	db	37
   355  00FEC0  30                 	db	48	;'0'
   356  00FEC1  32                 	db	50	;'2'
   357  00FEC2  78                 	db	120	;'x'
   358  00FEC3  00                 	db	0
   359  00FEC4                     STR_4:
   360  00FEC4  62                 	db	98	;'b'
   361  00FEC5  6F                 	db	111	;'o'
   362  00FEC6  74                 	db	116	;'t'
   363  00FEC7  74                 	db	116	;'t'
   364  00FEC8  6F                 	db	111	;'o'
   365  00FEC9  6D                 	db	109	;'m'
   366  00FECA  20                 	db	32
   367  00FECB  44                 	db	68	;'D'
   368  00FECC  65                 	db	101	;'e'
   369  00FECD  74                 	db	116	;'t'
   370  00FECE  65                 	db	101	;'e'
   371  00FECF  63                 	db	99	;'c'
   372  00FED0  74                 	db	116	;'t'
   373  00FED1  65                 	db	101	;'e'
   374  00FED2  64                 	db	100	;'d'
   375  00FED3  00                 	db	0
   376  00FED4                     STR_24:
   377  00FED4  57                 	db	87	;'W'
   378  00FED5  69                 	db	105	;'i'
   379  00FED6  74                 	db	116	;'t'
   380  00FED7  68                 	db	104	;'h'
   381  00FED8  20                 	db	32
   382  00FED9  54                 	db	84	;'T'
   383  00FEDA  61                 	db	97	;'a'
   384  00FEDB  62                 	db	98	;'b'
   385  00FEDC  3A                 	db	58	;':'
   386  00FEDD  20                 	db	32
   387  00FEDE  25                 	db	37
   388  00FEDF  30                 	db	48	;'0'
   389  00FEE0  32                 	db	50	;'2'
   390  00FEE1  78                 	db	120	;'x'
   391  00FEE2  00                 	db	0
   392  00FEE3                     STR_23:
   393  00FEE3  4E                 	db	78	;'N'
   394  00FEE4  6F                 	db	111	;'o'
   395  00FEE5  20                 	db	32
   396  00FEE6  4C                 	db	76	;'L'
   397  00FEE7  61                 	db	97	;'a'
   398  00FEE8  62                 	db	98	;'b'
   399  00FEE9  65                 	db	101	;'e'
   400  00FEEA  6C                 	db	108	;'l'
   401  00FEEB  3A                 	db	58	;':'
   402  00FEEC  20                 	db	32
   403  00FEED  25                 	db	37
   404  00FEEE  30                 	db	48	;'0'
   405  00FEEF  32                 	db	50	;'2'
   406  00FEF0  78                 	db	120	;'x'
   407  00FEF1  00                 	db	0
   408  00FEF2                     STR_12:
   409  00FEF2  25                 	db	37
   410  00FEF3  30                 	db	48	;'0'
   411  00FEF4  32                 	db	50	;'2'
   412  00FEF5  78                 	db	120	;'x'
   413  00FEF6  3A                 	db	58	;':'
   414  00FEF7  25                 	db	37
   415  00FEF8  30                 	db	48	;'0'
   416  00FEF9  32                 	db	50	;'2'
   417  00FEFA  78                 	db	120	;'x'
   418  00FEFB  3A                 	db	58	;':'
   419  00FEFC  25                 	db	37
   420  00FEFD  30                 	db	48	;'0'
   421  00FEFE  32                 	db	50	;'2'
   422  00FEFF  78                 	db	120	;'x'
   423  00FF00  00                 	db	0
   424  00FF01                     STR_8:
   425  00FF01  62                 	db	98	;'b'
   426  00FF02  6F                 	db	111	;'o'
   427  00FF03  74                 	db	116	;'t'
   428  00FF04  74                 	db	116	;'t'
   429  00FF05  6F                 	db	111	;'o'
   430  00FF06  6D                 	db	109	;'m'
   431  00FF07  20                 	db	32
   432  00FF08  72                 	db	114	;'r'
   433  00FF09  65                 	db	101	;'e'
   434  00FF0A  73                 	db	115	;'s'
   435  00FF0B  74                 	db	116	;'t'
   436  00FF0C  6F                 	db	111	;'o'
   437  00FF0D  72                 	db	114	;'r'
   438  00FF0E  65                 	db	101	;'e'
   439  00FF0F  00                 	db	0
   440  00FF10                     STR_7:
   441  00FF10  62                 	db	98	;'b'
   442  00FF11  6F                 	db	111	;'o'
   443  00FF12  74                 	db	116	;'t'
   444  00FF13  74                 	db	116	;'t'
   445  00FF14  6F                 	db	111	;'o'
   446  00FF15  6D                 	db	109	;'m'
   447  00FF16  20                 	db	32
   448  00FF17  72                 	db	114	;'r'
   449  00FF18  65                 	db	101	;'e'
   450  00FF19  6C                 	db	108	;'l'
   451  00FF1A  65                 	db	101	;'e'
   452  00FF1B  61                 	db	97	;'a'
   453  00FF1C  73                 	db	115	;'s'
   454  00FF1D  65                 	db	101	;'e'
   455  00FF1E  00                 	db	0
   456  00FF1F                     STR_34:
   457  00FF1F  74                 	db	116	;'t'
   458  00FF20  6F                 	db	111	;'o'
   459  00FF21  70                 	db	112	;'p'
   460  00FF22  20                 	db	32
   461  00FF23  72                 	db	114	;'r'
   462  00FF24  65                 	db	101	;'e'
   463  00FF25  73                 	db	115	;'s'
   464  00FF26  74                 	db	116	;'t'
   465  00FF27  6F                 	db	111	;'o'
   466  00FF28  72                 	db	114	;'r'
   467  00FF29  65                 	db	101	;'e'
   468  00FF2A  20                 	db	32
   469  00FF2B  31                 	db	49	;'1'
   470  00FF2C  00                 	db	0
   471  00FF2D                     STR_1:
   472  00FF2D  62                 	db	98	;'b'
   473  00FF2E  6F                 	db	111	;'o'
   474  00FF2F  74                 	db	116	;'t'
   475  00FF30  74                 	db	116	;'t'
   476  00FF31  6F                 	db	111	;'o'
   477  00FF32  6D                 	db	109	;'m'
   478  00FF33  20                 	db	32
   479  00FF34  69                 	db	105	;'i'
   480  00FF35  6E                 	db	110	;'n'
   481  00FF36  69                 	db	105	;'i'
   482  00FF37  74                 	db	116	;'t'
   483  00FF38  20                 	db	32
   484  00FF39  31                 	db	49	;'1'
   485  00FF3A  00                 	db	0
   486  00FF3B                     STR_3:
   487  00FF3B  42                 	db	66	;'B'
   488  00FF3C  6F                 	db	111	;'o'
   489  00FF3D  74                 	db	116	;'t'
   490  00FF3E  74                 	db	116	;'t'
   491  00FF3F  6F                 	db	111	;'o'
   492  00FF40  6D                 	db	109	;'m'
   493  00FF41  20                 	db	32
   494  00FF42  4E                 	db	78	;'N'
   495  00FF43  6F                 	db	111	;'o'
   496  00FF44  20                 	db	32
   497  00FF45  43                 	db	67	;'C'
   498  00FF46  61                 	db	97	;'a'
   499  00FF47  6E                 	db	110	;'n'
   500  00FF48  00                 	db	0
   501  00FF49                     STR_29:
   502  00FF49  54                 	db	84	;'T'
   503  00FF4A  4F                 	db	79	;'O'
   504  00FF4B  50                 	db	80	;'P'
   505  00FF4C  20                 	db	32
   506  00FF4D  44                 	db	68	;'D'
   507  00FF4E  65                 	db	101	;'e'
   508  00FF4F  74                 	db	116	;'t'
   509  00FF50  65                 	db	101	;'e'
   510  00FF51  63                 	db	99	;'c'
   511  00FF52  74                 	db	116	;'t'
   512  00FF53  65                 	db	101	;'e'
   513  00FF54  64                 	db	100	;'d'
   514  00FF55  00                 	db	0
   515  00FF56                     STR_11:
   516  00FF56  25                 	db	37
   517  00FF57  30                 	db	48	;'0'
   518  00FF58  32                 	db	50	;'2'
   519  00FF59  78                 	db	120	;'x'
   520  00FF5A  2F                 	db	47
   521  00FF5B  25                 	db	37
   522  00FF5C  30                 	db	48	;'0'
   523  00FF5D  32                 	db	50	;'2'
   524  00FF5E  78                 	db	120	;'x'
   525  00FF5F  20                 	db	32
   526  00FF60  20                 	db	32
   527  00FF61  20                 	db	32
   528  00FF62  00                 	db	0
   529  00FF63                     STR_16:
   530  00FF63  49                 	db	73	;'I'
   531  00FF64  6E                 	db	110	;'n'
   532  00FF65  69                 	db	105	;'i'
   533  00FF66  74                 	db	116	;'t'
   534  00FF67  69                 	db	105	;'i'
   535  00FF68  61                 	db	97	;'a'
   536  00FF69  6C                 	db	108	;'l'
   537  00FF6A  69                 	db	105	;'i'
   538  00FF6B  7A                 	db	122	;'z'
   539  00FF6C  69                 	db	105	;'i'
   540  00FF6D  6E                 	db	110	;'n'
   541  00FF6E  67                 	db	103	;'g'
   542  00FF6F  00                 	db	0
   543  00FF70                     STR_25:
   544  00FF70  4E                 	db	78	;'N'
   545  00FF71  6F                 	db	111	;'o'
   546  00FF72  20                 	db	32
   547  00FF73  54                 	db	84	;'T'
   548  00FF74  61                 	db	97	;'a'
   549  00FF75  62                 	db	98	;'b'
   550  00FF76  3A                 	db	58	;':'
   551  00FF77  20                 	db	32
   552  00FF78  25                 	db	37
   553  00FF79  30                 	db	48	;'0'
   554  00FF7A  32                 	db	50	;'2'
   555  00FF7B  78                 	db	120	;'x'
   556  00FF7C  00                 	db	0
   557  00FF7D                     STR_30:
   558  00FF7D  54                 	db	84	;'T'
   559  00FF7E  4F                 	db	79	;'O'
   560  00FF7F  50                 	db	80	;'P'
   561  00FF80  20                 	db	32
   562  00FF81  68                 	db	104	;'h'
   563  00FF82  61                 	db	97	;'a'
   564  00FF83  73                 	db	115	;'s'
   565  00FF84  20                 	db	32
   566  00FF85  54                 	db	84	;'T'
   567  00FF86  61                 	db	97	;'a'
   568  00FF87  62                 	db	98	;'b'
   569  00FF88  00                 	db	0
   570  00FF89                     STR_32:
   571  00FF89  74                 	db	116	;'t'
   572  00FF8A  6F                 	db	111	;'o'
   573  00FF8B  70                 	db	112	;'p'
   574  00FF8C  20                 	db	32
   575  00FF8D  72                 	db	114	;'r'
   576  00FF8E  65                 	db	101	;'e'
   577  00FF8F  6C                 	db	108	;'l'
   578  00FF90  65                 	db	101	;'e'
   579  00FF91  61                 	db	97	;'a'
   580  00FF92  73                 	db	115	;'s'
   581  00FF93  65                 	db	101	;'e'
   582  00FF94  00                 	db	0
   583  00FF95                     STR_33:
   584  00FF95  54                 	db	84	;'T'
   585  00FF96  4F                 	db	79	;'O'
   586  00FF97  50                 	db	80	;'P'
   587  00FF98  20                 	db	32
   588  00FF99  70                 	db	112	;'p'
   589  00FF9A  61                 	db	97	;'a'
   590  00FF9B  73                 	db	115	;'s'
   591  00FF9C  73                 	db	115	;'s'
   592  00FF9D  20                 	db	32
   593  00FF9E  6F                 	db	111	;'o'
   594  00FF9F  6E                 	db	110	;'n'
   595  00FFA0  00                 	db	0
   596  00FFA1                     STR_2:
   597  00FFA1  62                 	db	98	;'b'
   598  00FFA2  6F                 	db	111	;'o'
   599  00FFA3  74                 	db	116	;'t'
   600  00FFA4  74                 	db	116	;'t'
   601  00FFA5  6F                 	db	111	;'o'
   602  00FFA6  6D                 	db	109	;'m'
   603  00FFA7  20                 	db	32
   604  00FFA8  69                 	db	105	;'i'
   605  00FFA9  64                 	db	100	;'d'
   606  00FFAA  6C                 	db	108	;'l'
   607  00FFAB  65                 	db	101	;'e'
   608  00FFAC  00                 	db	0
   609  00FFAD                     STR_31:
   610  00FFAD  54                 	db	84	;'T'
   611  00FFAE  4F                 	db	79	;'O'
   612  00FFAF  50                 	db	80	;'P'
   613  00FFB0  20                 	db	32
   614  00FFB1  6E                 	db	110	;'n'
   615  00FFB2  6F                 	db	111	;'o'
   616  00FFB3  20                 	db	32
   617  00FFB4  54                 	db	84	;'T'
   618  00FFB5  61                 	db	97	;'a'
   619  00FFB6  62                 	db	98	;'b'
   620  00FFB7  00                 	db	0
   621  00FFB8                     STR_28:
   622  00FFB8  54                 	db	84	;'T'
   623  00FFB9  4F                 	db	79	;'O'
   624  00FFBA  50                 	db	80	;'P'
   625  00FFBB  20                 	db	32
   626  00FFBC  4E                 	db	78	;'N'
   627  00FFBD  6F                 	db	111	;'o'
   628  00FFBE  20                 	db	32
   629  00FFBF  43                 	db	67	;'C'
   630  00FFC0  61                 	db	97	;'a'
   631  00FFC1  6E                 	db	110	;'n'
   632  00FFC2  00                 	db	0
   633  00FFC3  54                 	db	84	;'T'
   634  00FFC4  4F                 	db	79	;'O'
   635  00FFC5  50                 	db	80	;'P'
   636  00FFC6  20                 	db	32
   637  00FFC7  69                 	db	105	;'i'
   638  00FFC8  6E                 	db	110	;'n'
   639  00FFC9  69                 	db	105	;'i'
   640  00FFCA  74                 	db	116	;'t'
   641  00FFCB  20                 	db	32
   642  00FFCC  32                 	db	50	;'2'
   643  00FFCD  00                 	db	0
   644  00FFCE                     STR_27:
   645  00FFCE  74                 	db	116	;'t'
   646  00FFCF  6F                 	db	111	;'o'
   647  00FFD0  70                 	db	112	;'p'
   648  00FFD1  20                 	db	32
   649  00FFD2  69                 	db	105	;'i'
   650  00FFD3  64                 	db	100	;'d'
   651  00FFD4  6C                 	db	108	;'l'
   652  00FFD5  65                 	db	101	;'e'
   653  00FFD6  00                 	db	0
   654  00FFD7                     STR_15:
   655  00FFD7  43                 	db	67	;'C'
   656  00FFD8  6F                 	db	111	;'o'
   657  00FFD9  6D                 	db	109	;'m'
   658  00FFDA  70                 	db	112	;'p'
   659  00FFDB  6C                 	db	108	;'l'
   660  00FFDC  65                 	db	101	;'e'
   661  00FFDD  74                 	db	116	;'t'
   662  00FFDE  65                 	db	101	;'e'
   663  00FFDF  00                 	db	0
   664  00FFE0                     STR_6:
   665  00FFE0  4E                 	db	78	;'N'
   666  00FFE1  6F                 	db	111	;'o'
   667  00FFE2  20                 	db	32
   668  00FFE3  6C                 	db	108	;'l'
   669  00FFE4  61                 	db	97	;'a'
   670  00FFE5  62                 	db	98	;'b'
   671  00FFE6  65                 	db	101	;'e'
   672  00FFE7  6C                 	db	108	;'l'
   673  00FFE8  00                 	db	0
   674  00FFE9                     STR_5:
   675  00FFE9  6C                 	db	108	;'l'
   676  00FFEA  61                 	db	97	;'a'
   677  00FFEB  62                 	db	98	;'b'
   678  00FFEC  65                 	db	101	;'e'
   679  00FFED  6C                 	db	108	;'l'
   680  00FFEE  65                 	db	101	;'e'
   681  00FFEF  64                 	db	100	;'d'
   682  00FFF0  00                 	db	0
   683  00FFF1                     STR_14:
   684  00FFF1  6C                 	db	108	;'l'
   685  00FFF2  6F                 	db	111	;'o'
   686  00FFF3  6F                 	db	111	;'o'
   687  00FFF4  70                 	db	112	;'p'
   688  00FFF5  2B                 	db	43
   689  00FFF6  2B                 	db	43
   690  00FFF7  00                 	db	0
   691  00FFF8                     STR_10:
   692  00FFF8  74                 	db	116	;'t'
   693  00FFF9  6F                 	db	111	;'o'
   694  00FFFA  70                 	db	112	;'p'
   695  00FFFB  20                 	db	32
   696  00FFFC  63                 	db	99	;'c'
   697  00FFFD  77                 	db	119	;'w'
   698  00FFFE  00                 	db	0
   699  0000                     
   700                           ; #config settings
   701  00FFFF  00                 	db	0	; dummy byte at the end
   702  0000                     
   703                           	psect	cinit
   704  0021B6                     __pcinit:
   705                           	opt stack 0
   706  0021B6                     start_initialization:
   707                           	opt stack 0
   708  0021B6                     __initialization:
   709                           	opt stack 0
   710                           
   711                           ; Clear objects allocated to BANK0 (49 bytes)
   712  0021B6  EE00  F080         	lfsr	0,__pbssBANK0
   713  0021BA  0E31               	movlw	49
   714  0021BC                     clear_0:
   715  0021BC  6AEE               	clrf	postinc0,c
   716  0021BE  06E8               	decf	wreg,f,c
   717  0021C0  E1FD               	bnz	clear_0
   718                           
   719                           ; Clear objects allocated to COMRAM (4 bytes)
   720  0021C2  6A42               	clrf	(__pbssCOMRAM+3)& (0+255),c
   721  0021C4  6A41               	clrf	(__pbssCOMRAM+2)& (0+255),c
   722  0021C6  6A40               	clrf	(__pbssCOMRAM+1)& (0+255),c
   723  0021C8  6A3F               	clrf	__pbssCOMRAM& (0+255),c
   724  0021CA                     end_of_initialization:
   725                           	opt stack 0
   726  0021CA                     __end_of__initialization:
   727                           	opt stack 0
   728  0021CA  9043               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   729  0021CC  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   730  0021CE  0100               	movlb	0
   731  0021D0  EF49  F00B         	goto	_main	;jump to C main() function
   732                           postinc0	equ	0xFEE
   733                           wreg	equ	0xFE8
   734                           
   735                           	psect	bssCOMRAM
   736  00003F                     __pbssCOMRAM:
   737                           	opt stack 0
   738  00003F                     _tot:
   739                           	opt stack 0
   740  00003F                     	ds	2
   741  000041                     _operation_time:
   742                           	opt stack 0
   743  000041                     	ds	2
   744                           postinc0	equ	0xFEE
   745                           wreg	equ	0xFE8
   746                           
   747                           	psect	bssBANK0
   748  000080                     __pbssBANK0:
   749                           	opt stack 0
   750  000080                     _time:
   751                           	opt stack 0
   752  000080                     	ds	7
   753  000087                     _total_end:
   754                           	opt stack 0
   755  000087                     	ds	4
   756  00008B                     _total_start:
   757                           	opt stack 0
   758  00008B                     	ds	4
   759  00008F                     _Start_time:
   760                           	opt stack 0
   761  00008F                     	ds	2
   762  000091                     _fsm1:
   763                           	opt stack 0
   764  000091                     	ds	2
   765  000093                     _start_top_distribution:
   766                           	opt stack 0
   767  000093                     	ds	2
   768  000095                     _top_move:
   769                           	opt stack 0
   770  000095                     	ds	2
   771  000097                     _tabed:
   772                           	opt stack 0
   773  000097                     	ds	2
   774  000099                     _pop_can_tab:
   775                           	opt stack 0
   776  000099                     	ds	2
   777  00009B                     _pop_can:
   778                           	opt stack 0
   779  00009B                     	ds	2
   780  00009D                     _tin_can:
   781                           	opt stack 0
   782  00009D                     	ds	2
   783  00009F                     _tin_can_label:
   784                           	opt stack 0
   785  00009F                     	ds	2
   786  0000A1                     _labeled:
   787                           	opt stack 0
   788  0000A1                     	ds	2
   789  0000A3                     _fsm2:
   790                           	opt stack 0
   791  0000A3                     	ds	2
   792  0000A5                     _bottomRockerState:
   793                           	opt stack 0
   794  0000A5                     	ds	2
   795  0000A7                     _bottomDistributionState:
   796                           	opt stack 0
   797  0000A7                     	ds	2
   798  0000A9                     _topDistributionState:
   799                           	opt stack 0
   800  0000A9                     	ds	2
   801  0000AB                     _topRockerState:
   802                           	opt stack 0
   803  0000AB                     	ds	2
   804  0000AD                     _bottom_move:
   805                           	opt stack 0
   806  0000AD                     	ds	2
   807  0000AF                     _start_bottom_distribution:
   808                           	opt stack 0
   809  0000AF                     	ds	2
   810                           postinc0	equ	0xFEE
   811                           wreg	equ	0xFE8
   812                           
   813                           	psect	cstackBANK0
   814  0000B1                     __pcstackBANK0:
   815                           	opt stack 0
   816  0000B1                     ??_bottom_distribution_motor_cw:
   817  0000B1                     ??_bottom_distribution_motor_ccw:
   818  0000B1                     ??_bottom_rocker_motor_ccw:
   819  0000B1                     ??_bottom_rocker_motor_cw:
   820  0000B1                     ??_isdigit:
   821  0000B1                     ??_I2C_Master_Wait:
   822  0000B1                     ??_top_rocker_motor_ccw:
   823  0000B1                     ??_top_distribution_motor_cw:
   824  0000B1                     ??_top_distribution_motor_ccw:
   825  0000B1                     ??_pop_out:
   826  0000B1                     ??_go_back:
   827  0000B1                     ?___awdiv:
   828                           	opt stack 0
   829  0000B1                     ?___lwdiv:
   830                           	opt stack 0
   831  0000B1                     ?___lldiv:
   832                           	opt stack 0
   833  0000B1                     lcdNibble@temp:
   834                           	opt stack 0
   835  0000B1                     ___awdiv@dividend:
   836                           	opt stack 0
   837  0000B1                     ___lwdiv@dividend:
   838                           	opt stack 0
   839  0000B1                     ___lldiv@dividend:
   840                           	opt stack 0
   841                           
   842                           ; 4 bytes @ 0x0
   843  0000B1                     	ds	1
   844  0000B2                     I2C_Master_Read@a:
   845                           	opt stack 0
   846  0000B2                     lcdNibble@data:
   847                           	opt stack 0
   848  0000B2                     _isdigit$1437:
   849                           	opt stack 0
   850  0000B2                     I2C_Master_Write@d:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x1
   854  0000B2                     	ds	1
   855  0000B3                     I2C_Master_Read@temp:
   856                           	opt stack 0
   857  0000B3                     lcdInst@data:
   858                           	opt stack 0
   859  0000B3                     putch@data:
   860                           	opt stack 0
   861  0000B3                     isdigit@c:
   862                           	opt stack 0
   863  0000B3                     ___awdiv@divisor:
   864                           	opt stack 0
   865  0000B3                     ___lwdiv@divisor:
   866                           	opt stack 0
   867                           
   868                           ; 2 bytes @ 0x2
   869  0000B3                     	ds	1
   870  0000B4                     ??_initLCD:
   871  0000B4                     set_time@i:
   872                           	opt stack 0
   873                           
   874                           ; 1 bytes @ 0x3
   875  0000B4                     	ds	1
   876  0000B5                     ___awdiv@counter:
   877                           	opt stack 0
   878  0000B5                     ___lwdiv@counter:
   879                           	opt stack 0
   880  0000B5                     ___lldiv@divisor:
   881                           	opt stack 0
   882                           
   883                           ; 4 bytes @ 0x4
   884  0000B5                     	ds	1
   885  0000B6                     ___awdiv@sign:
   886                           	opt stack 0
   887  0000B6                     ___lwdiv@quotient:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0x5
   891  0000B6                     	ds	1
   892  0000B7                     ___awdiv@quotient:
   893                           	opt stack 0
   894                           
   895                           ; 2 bytes @ 0x6
   896  0000B7                     	ds	1
   897  0000B8                     ?___lwmod:
   898                           	opt stack 0
   899  0000B8                     ___lwmod@dividend:
   900                           	opt stack 0
   901                           
   902                           ; 2 bytes @ 0x7
   903  0000B8                     	ds	1
   904  0000B9                     ?___wmul:
   905                           	opt stack 0
   906  0000B9                     ___wmul@multiplier:
   907                           	opt stack 0
   908  0000B9                     ___lldiv@quotient:
   909                           	opt stack 0
   910                           
   911                           ; 4 bytes @ 0x8
   912  0000B9                     	ds	1
   913  0000BA                     ___lwmod@divisor:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0x9
   917  0000BA                     	ds	1
   918  0000BB                     ___wmul@multiplicand:
   919                           	opt stack 0
   920                           
   921                           ; 2 bytes @ 0xA
   922  0000BB                     	ds	1
   923  0000BC                     ___lwmod@counter:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0xB
   927  0000BC                     	ds	1
   928  0000BD                     ___lldiv@counter:
   929                           	opt stack 0
   930  0000BD                     ___wmul@product:
   931                           	opt stack 0
   932                           
   933                           ; 2 bytes @ 0xC
   934  0000BD                     	ds	1
   935  0000BE                     I2C_Master_Init@c:
   936                           	opt stack 0
   937                           
   938                           ; 4 bytes @ 0xD
   939  0000BE                     	ds	1
   940  0000BF                     ?_printf:
   941                           	opt stack 0
   942  0000BF                     ?_done_sorting:
   943                           	opt stack 0
   944  0000BF                     printf@f:
   945                           	opt stack 0
   946                           
   947                           ; 2 bytes @ 0xE
   948  0000BF                     	ds	2
   949  0000C1                     ??_done_sorting:
   950                           
   951                           ; 1 bytes @ 0x10
   952  0000C1                     	ds	1
   953  0000C2                     ??_I2C_Master_Init:
   954                           
   955                           ; 1 bytes @ 0x11
   956  0000C2                     	ds	2
   957  0000C4                     _done_sorting$1796:
   958                           	opt stack 0
   959                           
   960                           ; 2 bytes @ 0x13
   961  0000C4                     	ds	2
   962  0000C6                     done_sorting@total_second:
   963                           	opt stack 0
   964                           
   965                           ; 2 bytes @ 0x15
   966  0000C6                     	ds	1
   967  0000C7                     ??_printf:
   968                           
   969                           ; 1 bytes @ 0x16
   970  0000C7                     	ds	1
   971  0000C8                     done_sorting@i:
   972                           	opt stack 0
   973                           
   974                           ; 1 bytes @ 0x17
   975  0000C8                     	ds	1
   976  0000C9                     done_sorting@End_time:
   977                           	opt stack 0
   978                           
   979                           ; 2 bytes @ 0x18
   980  0000C9                     	ds	2
   981  0000CB                     printf@idx:
   982                           	opt stack 0
   983                           
   984                           ; 1 bytes @ 0x1A
   985  0000CB                     	ds	1
   986  0000CC                     printf@ap:
   987                           	opt stack 0
   988                           
   989                           ; 2 bytes @ 0x1B
   990  0000CC                     	ds	2
   991  0000CE                     printf@prec:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x1D
   995  0000CE                     	ds	1
   996  0000CF                     printf@val:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x1E
  1000  0000CF                     	ds	2
  1001  0000D1                     printf@flag:
  1002                           	opt stack 0
  1003                           
  1004                           ; 1 bytes @ 0x20
  1005  0000D1                     	ds	1
  1006  0000D2                     printf@width:
  1007                           	opt stack 0
  1008                           
  1009                           ; 2 bytes @ 0x21
  1010  0000D2                     	ds	2
  1011  0000D4                     printf@c:
  1012                           	opt stack 0
  1013                           
  1014                           ; 1 bytes @ 0x23
  1015  0000D4                     	ds	1
  1016  0000D5                     ??_bottom_rocker_idle:
  1017  0000D5                     ??_bottom_rocker_release:
  1018  0000D5                     ??_bottom_rocker_restore:
  1019  0000D5                     ??_standby:
  1020  0000D5                     ??_results:
  1021  0000D5                     ??_top_rocker_idle:
  1022  0000D5                     ??_solenoids_back:
  1023  0000D5                     ??_top_rocker_release:
  1024  0000D5                     ??_bottom_rocker_initial:
  1025  0000D5                     ??_top_rocker_motor_cw:
  1026                           
  1027                           ; 1 bytes @ 0x24
  1028  0000D5                     	ds	2
  1029  0000D7                     bottom_rocker_initial@i:
  1030                           	opt stack 0
  1031  0000D7                     bottom_rocker_idle@i:
  1032                           	opt stack 0
  1033  0000D7                     bottom_rocker_release@i:
  1034                           	opt stack 0
  1035  0000D7                     bottom_rocker_restore@i:
  1036                           	opt stack 0
  1037  0000D7                     top_rocker_motor_cw@i:
  1038                           	opt stack 0
  1039  0000D7                     standby@keypress:
  1040                           	opt stack 0
  1041  0000D7                     results@keypress:
  1042                           	opt stack 0
  1043  0000D7                     top_rocker_idle@i:
  1044                           	opt stack 0
  1045  0000D7                     solenoids_back@i:
  1046                           	opt stack 0
  1047  0000D7                     top_rocker_release@i:
  1048                           	opt stack 0
  1049                           
  1050                           ; 1 bytes @ 0x26
  1051  0000D7                     	ds	1
  1052  0000D8                     ??_initialization:
  1053  0000D8                     ??_top_rocker_restore:
  1054  0000D8                     bottom_rocker_idle@i_271:
  1055                           	opt stack 0
  1056  0000D8                     standby@keypress_temp:
  1057                           	opt stack 0
  1058  0000D8                     results@keypress_temp:
  1059                           	opt stack 0
  1060  0000D8                     top_rocker_idle@i_1167:
  1061                           	opt stack 0
  1062  0000D8                     solenoids_back@i_1176:
  1063                           	opt stack 0
  1064  0000D8                     top_rocker_release@i_1183:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x27
  1068  0000D8                     	ds	1
  1069  0000D9                     bottom_rocker_idle@i_273:
  1070                           	opt stack 0
  1071  0000D9                     standby@i_936:
  1072                           	opt stack 0
  1073  0000D9                     results@i:
  1074                           	opt stack 0
  1075  0000D9                     top_rocker_idle@i_1169:
  1076                           	opt stack 0
  1077                           
  1078                           ; 1 bytes @ 0x28
  1079  0000D9                     	ds	1
  1080  0000DA                     bottom_rocker_idle@i_283:
  1081                           	opt stack 0
  1082  0000DA                     standby@i:
  1083                           	opt stack 0
  1084  0000DA                     initialization@i:
  1085                           	opt stack 0
  1086  0000DA                     results@i_959:
  1087                           	opt stack 0
  1088  0000DA                     top_rocker_restore@i:
  1089                           	opt stack 0
  1090                           
  1091                           ; 1 bytes @ 0x29
  1092  0000DA                     	ds	1
  1093  0000DB                     bottom_rocker_idle@i_285:
  1094                           	opt stack 0
  1095  0000DB                     results@i_961:
  1096                           	opt stack 0
  1097                           
  1098                           ; 1 bytes @ 0x2A
  1099  0000DB                     	ds	1
  1100  0000DC                     ??_startSorting:
  1101                           
  1102                           ; 1 bytes @ 0x2B
  1103  0000DC                     	ds	2
  1104  0000DE                     startSorting@i:
  1105                           	opt stack 0
  1106                           
  1107                           ; 1 bytes @ 0x2D
  1108  0000DE                     	ds	1
  1109  0000DF                     startSorting@i_945:
  1110                           	opt stack 0
  1111                           
  1112                           ; 1 bytes @ 0x2E
  1113  0000DF                     	ds	1
  1114  0000E0                     postinc0	equ	0xFEE
  1115                           wreg	equ	0xFE8
  1116                           
  1117                           ; 1 bytes @ 0x2F
  1118                           
  1119                           	psect	cstackCOMRAM
  1120  000001                     __pcstackCOMRAM:
  1121                           	opt stack 0
  1122  000001                     ??i2_isdigit:
  1123  000001                     ?___awmod:
  1124                           	opt stack 0
  1125  000001                     ?i2___wmul:
  1126                           	opt stack 0
  1127  000001                     ?i2___awdiv:
  1128                           	opt stack 0
  1129  000001                     ?i2___lwdiv:
  1130                           	opt stack 0
  1131  000001                     i2lcdNibble@temp:
  1132                           	opt stack 0
  1133  000001                     ___awmod@dividend:
  1134                           	opt stack 0
  1135  000001                     i2___wmul@multiplier:
  1136                           	opt stack 0
  1137  000001                     i2___awdiv@dividend:
  1138                           	opt stack 0
  1139  000001                     i2___lwdiv@dividend:
  1140                           	opt stack 0
  1141                           
  1142                           ; 2 bytes @ 0x0
  1143  000001                     	ds	1
  1144  000002                     i2lcdNibble@data:
  1145                           	opt stack 0
  1146  000002                     i2_isdigit$1437:
  1147                           	opt stack 0
  1148                           
  1149                           ; 1 bytes @ 0x1
  1150  000002                     	ds	1
  1151  000003                     i2lcdInst@data:
  1152                           	opt stack 0
  1153  000003                     i2putch@data:
  1154                           	opt stack 0
  1155  000003                     i2isdigit@c:
  1156                           	opt stack 0
  1157  000003                     ___awmod@divisor:
  1158                           	opt stack 0
  1159  000003                     i2___wmul@multiplicand:
  1160                           	opt stack 0
  1161  000003                     i2___awdiv@divisor:
  1162                           	opt stack 0
  1163  000003                     i2___lwdiv@divisor:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0x2
  1167  000003                     	ds	1
  1168  000004                     ??i2_initLCD:
  1169                           
  1170                           ; 1 bytes @ 0x3
  1171  000004                     	ds	1
  1172  000005                     ___awmod@counter:
  1173                           	opt stack 0
  1174  000005                     i2___awdiv@counter:
  1175                           	opt stack 0
  1176  000005                     i2___wmul@product:
  1177                           	opt stack 0
  1178  000005                     i2___lwdiv@quotient:
  1179                           	opt stack 0
  1180                           
  1181                           ; 2 bytes @ 0x4
  1182  000005                     	ds	1
  1183  000006                     ___awmod@sign:
  1184                           	opt stack 0
  1185  000006                     i2___awdiv@sign:
  1186                           	opt stack 0
  1187                           
  1188                           ; 1 bytes @ 0x5
  1189  000006                     	ds	1
  1190  000007                     i2___lwdiv@counter:
  1191                           	opt stack 0
  1192  000007                     i2___awdiv@quotient:
  1193                           	opt stack 0
  1194                           
  1195                           ; 2 bytes @ 0x6
  1196  000007                     	ds	1
  1197  000008                     ?i2___lwmod:
  1198                           	opt stack 0
  1199  000008                     i2___lwmod@dividend:
  1200                           	opt stack 0
  1201                           
  1202                           ; 2 bytes @ 0x7
  1203  000008                     	ds	2
  1204  00000A                     i2___lwmod@divisor:
  1205                           	opt stack 0
  1206                           
  1207                           ; 2 bytes @ 0x9
  1208  00000A                     	ds	2
  1209  00000C                     i2___lwmod@counter:
  1210                           	opt stack 0
  1211                           
  1212                           ; 1 bytes @ 0xB
  1213  00000C                     	ds	1
  1214  00000D                     ?i2_printf:
  1215                           	opt stack 0
  1216  00000D                     i2printf@f:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0xC
  1220  00000D                     	ds	6
  1221  000013                     ??i2_printf:
  1222                           
  1223                           ; 1 bytes @ 0x12
  1224  000013                     	ds	4
  1225  000017                     i2printf@idx:
  1226                           	opt stack 0
  1227                           
  1228                           ; 1 bytes @ 0x16
  1229  000017                     	ds	1
  1230  000018                     i2printf@ap:
  1231                           	opt stack 0
  1232                           
  1233                           ; 2 bytes @ 0x17
  1234  000018                     	ds	2
  1235  00001A                     i2printf@prec:
  1236                           	opt stack 0
  1237                           
  1238                           ; 1 bytes @ 0x19
  1239  00001A                     	ds	1
  1240  00001B                     i2printf@val:
  1241                           	opt stack 0
  1242                           
  1243                           ; 2 bytes @ 0x1A
  1244  00001B                     	ds	2
  1245  00001D                     i2printf@flag:
  1246                           	opt stack 0
  1247                           
  1248                           ; 1 bytes @ 0x1C
  1249  00001D                     	ds	1
  1250  00001E                     i2printf@width:
  1251                           	opt stack 0
  1252                           
  1253                           ; 2 bytes @ 0x1D
  1254  00001E                     	ds	2
  1255  000020                     i2printf@c:
  1256                           	opt stack 0
  1257                           
  1258                           ; 1 bytes @ 0x1F
  1259  000020                     	ds	1
  1260  000021                     ??_keypressed:
  1261                           
  1262                           ; 1 bytes @ 0x20
  1263  000021                     	ds	16
  1264  000031                     keypressed@keypress:
  1265                           	opt stack 0
  1266                           
  1267                           ; 1 bytes @ 0x30
  1268  000031                     	ds	1
  1269  000032                     keypressed@i:
  1270                           	opt stack 0
  1271                           
  1272                           ; 1 bytes @ 0x31
  1273  000032                     	ds	1
  1274  000033                     keypressed@i_354:
  1275                           	opt stack 0
  1276                           
  1277                           ; 1 bytes @ 0x32
  1278  000033                     	ds	1
  1279  000034                     keypressed@i_355:
  1280                           	opt stack 0
  1281                           
  1282                           ; 1 bytes @ 0x33
  1283  000034                     	ds	1
  1284  000035                     keypressed@i_356:
  1285                           	opt stack 0
  1286                           
  1287                           ; 1 bytes @ 0x34
  1288  000035                     	ds	1
  1289  000036                     keypressed@i_357:
  1290                           	opt stack 0
  1291                           
  1292                           ; 1 bytes @ 0x35
  1293  000036                     	ds	1
  1294  000037                     keypressed@i_358:
  1295                           	opt stack 0
  1296                           
  1297                           ; 1 bytes @ 0x36
  1298  000037                     	ds	1
  1299  000038                     keypressed@i_359:
  1300                           	opt stack 0
  1301                           
  1302                           ; 1 bytes @ 0x37
  1303  000038                     	ds	1
  1304  000039                     keypressed@i_360:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0x38
  1308  000039                     	ds	1
  1309  00003A                     keypressed@i_361:
  1310                           	opt stack 0
  1311                           
  1312                           ; 1 bytes @ 0x39
  1313  00003A                     	ds	1
  1314  00003B                     keypressed@i_362:
  1315                           	opt stack 0
  1316                           
  1317                           ; 1 bytes @ 0x3A
  1318  00003B                     	ds	1
  1319  00003C                     keypressed@i_363:
  1320                           	opt stack 0
  1321                           
  1322                           ; 1 bytes @ 0x3B
  1323  00003C                     	ds	1
  1324  00003D                     keypressed@i_364:
  1325                           	opt stack 0
  1326                           
  1327                           ; 1 bytes @ 0x3C
  1328  00003D                     	ds	1
  1329  00003E                     keypressed@keypress_temp:
  1330                           	opt stack 0
  1331                           
  1332                           ; 1 bytes @ 0x3D
  1333  00003E                     	ds	1
  1334                           postinc0	equ	0xFEE
  1335                           wreg	equ	0xFE8
  1336                           
  1337 ;;
  1338 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1339 ;;
  1340 ;; *************** function _main *****************
  1341 ;; Defined at:
  1342 ;;		line 82 in file "main.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;		None
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;		None
  1347 ;; Return value:  Size  Location     Type
  1348 ;;                  1    wreg      void 
  1349 ;; Registers used:
  1350 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1351 ;; Tracked objects:
  1352 ;;		On entry : 0/0
  1353 ;;		On exit  : 0/0
  1354 ;;		Unchanged: 0/0
  1355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1360 ;;Total ram usage:        0 bytes
  1361 ;; Hardware stack levels required when called:   11
  1362 ;; This function calls:
  1363 ;;		_I2C_Master_Init
  1364 ;;		_done_sorting
  1365 ;;		_initLCD
  1366 ;;		_results
  1367 ;;		_set_time
  1368 ;;		_standby
  1369 ;;		_startSorting
  1370 ;; This function is called by:
  1371 ;;		Startup code after reset
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           	psect	text0
  1376  001692                     __ptext0:
  1377                           	opt stack 0
  1378  001692                     _main:
  1379                           	opt stack 20
  1380                           
  1381                           ;main.c: 84: TRISA = 0xF3;
  1382                           
  1383                           ;incstack = 0
  1384  001692  0EF3               	movlw	243
  1385  001694  6E92               	movwf	3986,c	;volatile
  1386                           
  1387                           ;main.c: 86: TRISB = 0xF3;
  1388  001696  0EF3               	movlw	243
  1389  001698  6E93               	movwf	3987,c	;volatile
  1390                           
  1391                           ;main.c: 88: TRISC = 0x1E;
  1392  00169A  0E1E               	movlw	30
  1393  00169C  6E94               	movwf	3988,c	;volatile
  1394                           
  1395                           ;main.c: 89: TRISD = 0x00;
  1396  00169E  0E00               	movlw	0
  1397  0016A0  6E95               	movwf	3989,c	;volatile
  1398                           
  1399                           ;main.c: 90: TRISE = 0x00;
  1400  0016A2  0E00               	movlw	0
  1401  0016A4  6E96               	movwf	3990,c	;volatile
  1402                           
  1403                           ;main.c: 92: LATA = 0xFF;
  1404  0016A6  6889               	setf	3977,c	;volatile
  1405                           
  1406                           ;main.c: 93: LATAbits.LA2 = 0;
  1407  0016A8  9489               	bcf	3977,2,c	;volatile
  1408                           
  1409                           ;main.c: 94: LATAbits.LA3 = 0;
  1410  0016AA  9689               	bcf	3977,3,c	;volatile
  1411                           
  1412                           ;main.c: 95: LATB = 0x00;
  1413  0016AC  0E00               	movlw	0
  1414  0016AE  6E8A               	movwf	3978,c	;volatile
  1415                           
  1416                           ;main.c: 96: LATC = 0x00;
  1417  0016B0  0E00               	movlw	0
  1418  0016B2  6E8B               	movwf	3979,c	;volatile
  1419                           
  1420                           ;main.c: 97: LATD = 0x00;
  1421  0016B4  0E00               	movlw	0
  1422  0016B6  6E8C               	movwf	3980,c	;volatile
  1423                           
  1424                           ;main.c: 98: LATE = 0x08;
  1425  0016B8  0E08               	movlw	8
  1426  0016BA  6E8D               	movwf	3981,c	;volatile
  1427                           
  1428                           ;main.c: 100: ADCON0 = 0x00;
  1429  0016BC  0E00               	movlw	0
  1430  0016BE  6EC2               	movwf	4034,c	;volatile
  1431                           
  1432                           ;main.c: 101: ADCON1 = 0xFF;
  1433  0016C0  68C1               	setf	4033,c	;volatile
  1434                           
  1435                           ;main.c: 103: initLCD();
  1436  0016C2  ECAF  F00E         	call	_initLCD	;wreg free
  1437                           
  1438                           ;main.c: 104: __nop();
  1439  0016C6  F000               	nop	
  1440                           
  1441                           ;main.c: 105: __nop();
  1442  0016C8  F000               	nop	
  1443                           
  1444                           ;main.c: 106: INT1IE = 1;
  1445  0016CA  86F0               	bsf	intcon3,3,c	;volatile
  1446                           
  1447                           ;main.c: 109: I2C_Master_Init(10000);
  1448  0016CC  0E10               	movlw	16
  1449  0016CE  0100               	movlb	0	; () banked
  1450  0016D0  6FBE               	movwf	I2C_Master_Init@c& (0+255),b
  1451  0016D2  0E27               	movlw	39
  1452  0016D4  6FBF               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1453  0016D6  0E00               	movlw	0
  1454  0016D8  6FC0               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1455  0016DA  0E00               	movlw	0
  1456  0016DC  6FC1               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1457  0016DE  EC7B  F00D         	call	_I2C_Master_Init	;wreg free
  1458                           
  1459                           ;main.c: 110: set_time();
  1460  0016E2  EC19  F00D         	call	_set_time	;wreg free
  1461  0016E6                     l5735:
  1462                           
  1463                           ;main.c: 116: standby();
  1464  0016E6  ECF2  F007         	call	_standby	;wreg free
  1465                           
  1466                           ;main.c: 119: startSorting();
  1467  0016EA  ECA0  F008         	call	_startSorting	;wreg free
  1468                           
  1469                           ;main.c: 122: operation_time = done_sorting();
  1470  0016EE  ECFF  F004         	call	_done_sorting	;wreg free
  1471  0016F2  C0BF  F041         	movff	?_done_sorting,_operation_time
  1472  0016F6  C0C0  F042         	movff	?_done_sorting+1,_operation_time+1
  1473                           
  1474                           ;main.c: 124: __nop();
  1475  0016FA  F000               	nop	
  1476                           
  1477                           ;main.c: 125: __nop();
  1478  0016FC  F000               	nop	
  1479                           
  1480                           ;main.c: 127: LATA = 0xFF;
  1481  0016FE  6889               	setf	3977,c	;volatile
  1482                           
  1483                           ;main.c: 128: LATAbits.LA2 = 0;
  1484  001700  9489               	bcf	3977,2,c	;volatile
  1485                           
  1486                           ;main.c: 129: LATAbits.LA3 = 0;
  1487  001702  9689               	bcf	3977,3,c	;volatile
  1488                           
  1489                           ;main.c: 130: LATB = 0x00;
  1490  001704  0E00               	movlw	0
  1491  001706  6E8A               	movwf	3978,c	;volatile
  1492                           
  1493                           ;main.c: 131: LATC = 0x00;
  1494  001708  0E00               	movlw	0
  1495  00170A  6E8B               	movwf	3979,c	;volatile
  1496                           
  1497                           ;main.c: 132: LATD = 0x00;
  1498  00170C  0E00               	movlw	0
  1499  00170E  6E8C               	movwf	3980,c	;volatile
  1500                           
  1501                           ;main.c: 134: LATE = 0x08;
  1502  001710  0E08               	movlw	8
  1503  001712  6E8D               	movwf	3981,c	;volatile
  1504                           
  1505                           ;main.c: 136: results();
  1506  001714  EC36  F007         	call	_results	;wreg free
  1507  001718  D7E6               	goto	l5735
  1508                           
  1509                           ;main.c: 137: }
  1510                           ;main.c: 138: __nop();
  1511  00171A  F000               	nop	
  1512                           
  1513                           ;main.c: 139: __nop();
  1514  00171C  F000               	nop	
  1515  00171E                     __end_of_main:
  1516                           	opt stack 0
  1517                           intcon3	equ	0xFF0
  1518                           postinc0	equ	0xFEE
  1519                           wreg	equ	0xFE8
  1520                           
  1521 ;; *************** function _startSorting *****************
  1522 ;; Defined at:
  1523 ;;		line 81 in file "operation.c"
  1524 ;; Parameters:    Size  Location     Type
  1525 ;;		None
  1526 ;; Auto vars:     Size  Location     Type
  1527 ;;  i               1   46[BANK0 ] unsigned char 
  1528 ;;  i               1   45[BANK0 ] unsigned char 
  1529 ;; Return value:  Size  Location     Type
  1530 ;;                  1    wreg      void 
  1531 ;; Registers used:
  1532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1533 ;; Tracked objects:
  1534 ;;		On entry : 0/0
  1535 ;;		On exit  : 0/0
  1536 ;;		Unchanged: 0/0
  1537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1539 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1540 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1541 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1542 ;;Total ram usage:        4 bytes
  1543 ;; Hardware stack levels used:    1
  1544 ;; Hardware stack levels required when called:   10
  1545 ;; This function calls:
  1546 ;;		Absolute function
  1547 ;;		_bottom_distribution_idle
  1548 ;;		_bottom_distribution_move
  1549 ;;		_bottom_distribution_prepare
  1550 ;;		_bottom_rocker_idle
  1551 ;;		_bottom_rocker_release
  1552 ;;		_bottom_rocker_restore
  1553 ;;		_initLCD
  1554 ;;		_initialization
  1555 ;;		_lcdInst
  1556 ;;		_printf
  1557 ;;		_solenoids_back
  1558 ;;		_solenoids_out
  1559 ;;		_top_distribution_idle
  1560 ;;		_top_distribution_move
  1561 ;;		_top_distribution_prepare
  1562 ;;		_top_rocker_idle
  1563 ;;		_top_rocker_release
  1564 ;;		_top_rocker_restore
  1565 ;; This function is called by:
  1566 ;;		_main
  1567 ;; This function uses a non-reentrant model
  1568 ;;
  1569                           
  1570                           	psect	text1
  1571  001140                     __ptext1:
  1572                           	opt stack 0
  1573  001140                     _startSorting:
  1574                           	opt stack 20
  1575                           
  1576                           ;operation.c: 84: (INTCONbits.GIE = 1);
  1577                           
  1578                           ;incstack = 0
  1579  001140  8EF2               	bsf	intcon,7,c	;volatile
  1580                           
  1581                           ;operation.c: 86: initialization();
  1582  001142  EC7D  F00C         	call	_initialization	;wreg free
  1583  001146                     l5545:
  1584                           
  1585                           ;operation.c: 96: (INTCONbits.GIE = 0);
  1586  001146  9EF2               	bcf	intcon,7,c	;volatile
  1587                           
  1588                           ;operation.c: 98: lcdInst(0b10000000);;
  1589  001148  0E80               	movlw	128
  1590  00114A  EC14  F011         	call	_lcdInst
  1591                           
  1592                           ;operation.c: 99: initLCD();
  1593  00114E  ECAF  F00E         	call	_initLCD	;wreg free
  1594                           
  1595                           ;operation.c: 100: printf("loop++");
  1596  001152  0EF1               	movlw	low STR_14
  1597  001154  0100               	movlb	0	; () banked
  1598  001156  6FBF               	movwf	printf@f& (0+255),b
  1599  001158  0EFF               	movlw	high STR_14
  1600  00115A  0100               	movlb	0	; () banked
  1601  00115C  6FC0               	movwf	(printf@f+1)& (0+255),b
  1602  00115E  EC09  F000         	call	_printf	;wreg free
  1603                           
  1604                           ;operation.c: 101: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  1605  001162  0E00               	movlw	0
  1606  001164  0100               	movlb	0	; () banked
  1607  001166  6FDE               	movwf	startSorting@i& (0+255),b
  1608  001168                     l5553:
  1609                           
  1610                           ; BSR set to: 0
  1611  001168  0E09               	movlw	9
  1612  00116A  0100               	movlb	0	; () banked
  1613  00116C  65DE               	cpfsgt	startSorting@i& (0+255),b
  1614  00116E  D001               	goto	l5557
  1615  001170  D010               	goto	l498
  1616  001172                     l5557:
  1617                           
  1618                           ; BSR set to: 0
  1619  001172  0E02               	movlw	2
  1620  001174  0100               	movlb	0	; () banked
  1621  001176  6FDD               	movwf	(??_startSorting+1)& (0+255),b
  1622  001178  0E3F               	movlw	63
  1623  00117A  0100               	movlb	0	; () banked
  1624  00117C  6FDC               	movwf	??_startSorting& (0+255),b
  1625  00117E  0E2B               	movlw	43
  1626  001180                     u5167:
  1627  001180  2EE8               	decfsz	wreg,f,c
  1628  001182  D7FE               	bra	u5167
  1629  001184  2FDC               	decfsz	??_startSorting& (0+255),f,b
  1630  001186  D7FC               	bra	u5167
  1631  001188  2FDD               	decfsz	(??_startSorting+1)& (0+255),f,b
  1632  00118A  D7FA               	bra	u5167
  1633  00118C  0100               	movlb	0	; () banked
  1634  00118E  2BDE               	incf	startSorting@i& (0+255),f,b
  1635  001190  D7EB               	goto	l5553
  1636  001192                     l498:
  1637                           
  1638                           ; BSR set to: 0
  1639                           ;operation.c: 102: (INTCONbits.GIE = 1);
  1640  001192  8EF2               	bsf	intcon,7,c	;volatile
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;operation.c: 103: (*topRockerState)();
  1644  001194  D801               	call	u4968
  1645  001196  D00A               	goto	u4969
  1646  001198                     u4968:
  1647  001198  0005               	push	
  1648  00119A  6EFA               	movwf	pclath,c
  1649  00119C  0100               	movlb	0	; () banked
  1650  00119E  51AB               	movf	_topRockerState& (0+255),w,b
  1651  0011A0  6EFD               	movwf	tosl,c
  1652  0011A2  51AC               	movf	(_topRockerState+1)& (0+255),w,b
  1653  0011A4  6EFE               	movwf	tosh,c
  1654  0011A6  6AFF               	clrf	tosu,c
  1655  0011A8  50FA               	movf	pclath,w,c
  1656  0011AA  0012               	return		;indir
  1657  0011AC                     u4969:
  1658                           
  1659                           ;operation.c: 104: (*bottomRockerState)();
  1660  0011AC  D801               	call	u4978
  1661  0011AE  D00A               	goto	l5563
  1662  0011B0                     u4978:
  1663  0011B0  0005               	push	
  1664  0011B2  6EFA               	movwf	pclath,c
  1665  0011B4  0100               	movlb	0	; () banked
  1666  0011B6  51A5               	movf	_bottomRockerState& (0+255),w,b
  1667  0011B8  6EFD               	movwf	tosl,c
  1668  0011BA  51A6               	movf	(_bottomRockerState+1)& (0+255),w,b
  1669  0011BC  6EFE               	movwf	tosh,c
  1670  0011BE  6AFF               	clrf	tosu,c
  1671  0011C0  50FA               	movf	pclath,w,c
  1672  0011C2  0012               	return		;indir
  1673  0011C4                     l5563:
  1674                           
  1675                           ;operation.c: 105: (*topDistributionState)();
  1676  0011C4  D801               	call	u4988
  1677  0011C6  D00A               	goto	l5565
  1678  0011C8                     u4988:
  1679  0011C8  0005               	push	
  1680  0011CA  6EFA               	movwf	pclath,c
  1681  0011CC  0100               	movlb	0	; () banked
  1682  0011CE  51A9               	movf	_topDistributionState& (0+255),w,b
  1683  0011D0  6EFD               	movwf	tosl,c
  1684  0011D2  51AA               	movf	(_topDistributionState+1)& (0+255),w,b
  1685  0011D4  6EFE               	movwf	tosh,c
  1686  0011D6  6AFF               	clrf	tosu,c
  1687  0011D8  50FA               	movf	pclath,w,c
  1688  0011DA  0012               	return		;indir
  1689  0011DC                     l5565:
  1690                           
  1691                           ;operation.c: 106: (*bottomDistributionState)();
  1692  0011DC  D801               	call	u4998
  1693  0011DE  D00A               	goto	l5567
  1694  0011E0                     u4998:
  1695  0011E0  0005               	push	
  1696  0011E2  6EFA               	movwf	pclath,c
  1697  0011E4  0100               	movlb	0	; () banked
  1698  0011E6  51A7               	movf	_bottomDistributionState& (0+255),w,b
  1699  0011E8  6EFD               	movwf	tosl,c
  1700  0011EA  51A8               	movf	(_bottomDistributionState+1)& (0+255),w,b
  1701  0011EC  6EFE               	movwf	tosh,c
  1702  0011EE  6AFF               	clrf	tosu,c
  1703  0011F0  50FA               	movf	pclath,w,c
  1704  0011F2  0012               	return		;indir
  1705  0011F4                     l5567:
  1706                           
  1707                           ;operation.c: 108: _delay((unsigned long)((200)*(10000000/4000.0)));
  1708  0011F4  0E03               	movlw	3
  1709  0011F6  0100               	movlb	0	; () banked
  1710  0011F8  6FDD               	movwf	(??_startSorting+1)& (0+255),b
  1711  0011FA  0E8A               	movlw	138
  1712  0011FC  0100               	movlb	0	; () banked
  1713  0011FE  6FDC               	movwf	??_startSorting& (0+255),b
  1714  001200  0E55               	movlw	85
  1715  001202                     u5177:
  1716  001202  2EE8               	decfsz	wreg,f,c
  1717  001204  D7FE               	bra	u5177
  1718  001206  2FDC               	decfsz	??_startSorting& (0+255),f,b
  1719  001208  D7FC               	bra	u5177
  1720  00120A  2FDD               	decfsz	(??_startSorting+1)& (0+255),f,b
  1721  00120C  D7FA               	bra	u5177
  1722  00120E  D000               	nop2	
  1723                           
  1724                           ;operation.c: 111: if((fsm1>=4)&&(fsm2>=4)){
  1725  001210  0100               	movlb	0	; () banked
  1726  001212  5192               	movf	(_fsm1+1)& (0+255),w,b
  1727  001214  E105               	bnz	u5000
  1728  001216  0E04               	movlw	4
  1729  001218  0100               	movlb	0	; () banked
  1730  00121A  5D91               	subwf	_fsm1& (0+255),w,b
  1731  00121C  A0D8               	btfss	status,0,c
  1732  00121E  D793               	goto	l5545
  1733  001220                     u5000:
  1734                           
  1735                           ; BSR set to: 0
  1736  001220  0100               	movlb	0	; () banked
  1737  001222  51A4               	movf	(_fsm2+1)& (0+255),w,b
  1738  001224  E105               	bnz	u5010
  1739  001226  0E04               	movlw	4
  1740  001228  0100               	movlb	0	; () banked
  1741  00122A  5DA3               	subwf	_fsm2& (0+255),w,b
  1742  00122C  A0D8               	btfss	status,0,c
  1743  00122E  D78B               	goto	l5545
  1744  001230                     u5010:
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;operation.c: 115: (INTCONbits.GIE = 0);
  1748  001230  9EF2               	bcf	intcon,7,c	;volatile
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;operation.c: 117: lcdInst(0b10000000);;
  1752  001232  0E80               	movlw	128
  1753  001234  EC14  F011         	call	_lcdInst
  1754                           
  1755                           ;operation.c: 118: initLCD();
  1756  001238  ECAF  F00E         	call	_initLCD	;wreg free
  1757                           
  1758                           ;operation.c: 119: printf("Complete");
  1759  00123C  0ED7               	movlw	low STR_15
  1760  00123E  0100               	movlb	0	; () banked
  1761  001240  6FBF               	movwf	printf@f& (0+255),b
  1762  001242  0EFF               	movlw	high STR_15
  1763  001244  0100               	movlb	0	; () banked
  1764  001246  6FC0               	movwf	(printf@f+1)& (0+255),b
  1765  001248  EC09  F000         	call	_printf	;wreg free
  1766                           
  1767                           ;operation.c: 120: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  1768  00124C  0E00               	movlw	0
  1769  00124E  0100               	movlb	0	; () banked
  1770  001250  6FDF               	movwf	startSorting@i_945& (0+255),b
  1771  001252                     l5581:
  1772                           
  1773                           ; BSR set to: 0
  1774  001252  0E09               	movlw	9
  1775  001254  0100               	movlb	0	; () banked
  1776  001256  65DF               	cpfsgt	startSorting@i_945& (0+255),b
  1777  001258  D001               	goto	l5585
  1778  00125A  D010               	goto	l501
  1779  00125C                     l5585:
  1780                           
  1781                           ; BSR set to: 0
  1782  00125C  0E02               	movlw	2
  1783  00125E  0100               	movlb	0	; () banked
  1784  001260  6FDD               	movwf	(??_startSorting+1)& (0+255),b
  1785  001262  0E3F               	movlw	63
  1786  001264  0100               	movlb	0	; () banked
  1787  001266  6FDC               	movwf	??_startSorting& (0+255),b
  1788  001268  0E2B               	movlw	43
  1789  00126A                     u5187:
  1790  00126A  2EE8               	decfsz	wreg,f,c
  1791  00126C  D7FE               	bra	u5187
  1792  00126E  2FDC               	decfsz	??_startSorting& (0+255),f,b
  1793  001270  D7FC               	bra	u5187
  1794  001272  2FDD               	decfsz	(??_startSorting+1)& (0+255),f,b
  1795  001274  D7FA               	bra	u5187
  1796  001276  0100               	movlb	0	; () banked
  1797  001278  2BDF               	incf	startSorting@i_945& (0+255),f,b
  1798  00127A  D7EB               	goto	l5581
  1799  00127C                     l501:
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;operation.c: 122: (INTCONbits.GIE = 1);
  1803  00127C  8EF2               	bsf	intcon,7,c	;volatile
  1804                           
  1805                           ; BSR set to: 0
  1806                           ;operation.c: 127: }
  1807                           ;operation.c: 128: }
  1808                           ;operation.c: 129: (INTCONbits.GIE = 0);
  1809                           
  1810                           ; BSR set to: 0
  1811                           
  1812                           ; BSR set to: 0
  1813                           
  1814                           ; BSR set to: 0
  1815                           
  1816                           ; BSR set to: 0
  1817                           ;operation.c: 125: }else{
  1818                           
  1819                           ;operation.c: 124: break;
  1820  00127E  9EF2               	bcf	intcon,7,c	;volatile
  1821                           
  1822                           ; BSR set to: 0
  1823                           
  1824                           ;operation.c: 130: return;
  1825  001280  0012               	return		;funcret
  1826  001282                     __end_of_startSorting:
  1827                           	opt stack 0
  1828                           tosu	equ	0xFFF
  1829                           tosh	equ	0xFFE
  1830                           tosl	equ	0xFFD
  1831                           pclath	equ	0xFFA
  1832                           intcon	equ	0xFF2
  1833                           intcon3	equ	0xFF0
  1834                           postinc0	equ	0xFEE
  1835                           wreg	equ	0xFE8
  1836                           status	equ	0xFD8
  1837                           
  1838 ;; *************** function _top_rocker_release *****************
  1839 ;; Defined at:
  1840 ;;		line 156 in file "top_rocker_fsm.c"
  1841 ;; Parameters:    Size  Location     Type
  1842 ;;		None
  1843 ;; Auto vars:     Size  Location     Type
  1844 ;;  i               1   39[BANK0 ] unsigned char 
  1845 ;;  i               1   38[BANK0 ] unsigned char 
  1846 ;; Return value:  Size  Location     Type
  1847 ;;                  1    wreg      void 
  1848 ;; Registers used:
  1849 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1850 ;; Tracked objects:
  1851 ;;		On entry : 0/0
  1852 ;;		On exit  : 0/0
  1853 ;;		Unchanged: 0/0
  1854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1856 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1857 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1858 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1859 ;;Total ram usage:        4 bytes
  1860 ;; Hardware stack levels used:    1
  1861 ;; Hardware stack levels required when called:    8
  1862 ;; This function calls:
  1863 ;;		_initLCD
  1864 ;;		_lcdInst
  1865 ;;		_printf
  1866 ;;		_top_rocker_motor_ccw
  1867 ;; This function is called by:
  1868 ;;		_solenoids_back
  1869 ;;		_startSorting
  1870 ;; This function uses a non-reentrant model
  1871 ;;
  1872                           
  1873                           	psect	text2
  1874  0015E4                     __ptext2:
  1875                           	opt stack 0
  1876  0015E4                     _top_rocker_release:
  1877                           	opt stack 21
  1878                           
  1879                           ;top_rocker_fsm.c: 160: lcdInst(0b10000000);;
  1880                           
  1881                           ; BSR set to: 0
  1882                           ;incstack = 0
  1883  0015E4  0E80               	movlw	128
  1884  0015E6  EC14  F011         	call	_lcdInst
  1885                           
  1886                           ;top_rocker_fsm.c: 161: initLCD();
  1887  0015EA  ECAF  F00E         	call	_initLCD	;wreg free
  1888                           
  1889                           ;top_rocker_fsm.c: 162: printf("top release");
  1890  0015EE  0E89               	movlw	low STR_32
  1891  0015F0  0100               	movlb	0	; () banked
  1892  0015F2  6FBF               	movwf	printf@f& (0+255),b
  1893  0015F4  0EFF               	movlw	high STR_32
  1894  0015F6  0100               	movlb	0	; () banked
  1895  0015F8  6FC0               	movwf	(printf@f+1)& (0+255),b
  1896  0015FA  EC09  F000         	call	_printf	;wreg free
  1897                           
  1898                           ;top_rocker_fsm.c: 163: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/400
      +                          0.0)));};
  1899  0015FE  0E00               	movlw	0
  1900  001600  0100               	movlb	0	; () banked
  1901  001602  6FD7               	movwf	top_rocker_release@i& (0+255),b
  1902  001604                     l5355:
  1903                           
  1904                           ; BSR set to: 0
  1905  001604  0E09               	movlw	9
  1906  001606  0100               	movlb	0	; () banked
  1907  001608  65D7               	cpfsgt	top_rocker_release@i& (0+255),b
  1908  00160A  D001               	goto	l5359
  1909  00160C  D010               	goto	l5363
  1910  00160E                     l5359:
  1911                           
  1912                           ; BSR set to: 0
  1913  00160E  0E02               	movlw	2
  1914  001610  0100               	movlb	0	; () banked
  1915  001612  6FD6               	movwf	(??_top_rocker_release+1)& (0+255),b
  1916  001614  0E3F               	movlw	63
  1917  001616  0100               	movlb	0	; () banked
  1918  001618  6FD5               	movwf	??_top_rocker_release& (0+255),b
  1919  00161A  0E2B               	movlw	43
  1920  00161C                     u5197:
  1921  00161C  2EE8               	decfsz	wreg,f,c
  1922  00161E  D7FE               	bra	u5197
  1923  001620  2FD5               	decfsz	??_top_rocker_release& (0+255),f,b
  1924  001622  D7FC               	bra	u5197
  1925  001624  2FD6               	decfsz	(??_top_rocker_release+1)& (0+255),f,b
  1926  001626  D7FA               	bra	u5197
  1927  001628  0100               	movlb	0	; () banked
  1928  00162A  2BD7               	incf	top_rocker_release@i& (0+255),f,b
  1929  00162C  D7EB               	goto	l5355
  1930  00162E                     l5363:
  1931                           
  1932                           ; BSR set to: 0
  1933                           ;top_rocker_fsm.c: 166: top_rocker_motor_ccw();
  1934  00162E  ECCB  F00F         	call	_top_rocker_motor_ccw	;wreg free
  1935                           
  1936                           ;top_rocker_fsm.c: 171: topRockerState = top_rocker_restore;
  1937  001632  0E56               	movlw	low _top_rocker_restore
  1938  001634  0100               	movlb	0	; () banked
  1939  001636  6FAB               	movwf	_topRockerState& (0+255),b
  1940  001638  0E1B               	movlw	high _top_rocker_restore
  1941  00163A  0100               	movlb	0	; () banked
  1942  00163C  6FAC               	movwf	(_topRockerState+1)& (0+255),b
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;top_rocker_fsm.c: 174: start_top_distribution = 1;
  1946  00163E  0E00               	movlw	0
  1947  001640  0100               	movlb	0	; () banked
  1948  001642  6F94               	movwf	(_start_top_distribution+1)& (0+255),b
  1949  001644  0E01               	movlw	1
  1950  001646  6F93               	movwf	_start_top_distribution& (0+255),b
  1951                           
  1952                           ; BSR set to: 0
  1953                           ;top_rocker_fsm.c: 177: initLCD();
  1954  001648  ECAF  F00E         	call	_initLCD	;wreg free
  1955                           
  1956                           ;top_rocker_fsm.c: 178: lcdInst(0b10000000);;
  1957  00164C  0E80               	movlw	128
  1958  00164E  EC14  F011         	call	_lcdInst
  1959                           
  1960                           ;top_rocker_fsm.c: 179: printf("TOP pass on");
  1961  001652  0E95               	movlw	low STR_33
  1962  001654  0100               	movlb	0	; () banked
  1963  001656  6FBF               	movwf	printf@f& (0+255),b
  1964  001658  0EFF               	movlw	high STR_33
  1965  00165A  0100               	movlb	0	; () banked
  1966  00165C  6FC0               	movwf	(printf@f+1)& (0+255),b
  1967  00165E  EC09  F000         	call	_printf	;wreg free
  1968                           
  1969                           ;top_rocker_fsm.c: 180: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/400
      +                          0.0)));};
  1970  001662  0E00               	movlw	0
  1971  001664  0100               	movlb	0	; () banked
  1972  001666  6FD8               	movwf	top_rocker_release@i_1183& (0+255),b
  1973  001668                     l5377:
  1974                           
  1975                           ; BSR set to: 0
  1976  001668  0E09               	movlw	9
  1977  00166A  0100               	movlb	0	; () banked
  1978  00166C  65D8               	cpfsgt	top_rocker_release@i_1183& (0+255),b
  1979  00166E  D001               	goto	l5381
  1980  001670  0012               	return	
  1981  001672                     l5381:
  1982                           
  1983                           ; BSR set to: 0
  1984  001672  0E02               	movlw	2
  1985  001674  0100               	movlb	0	; () banked
  1986  001676  6FD6               	movwf	(??_top_rocker_release+1)& (0+255),b
  1987  001678  0E3F               	movlw	63
  1988  00167A  0100               	movlb	0	; () banked
  1989  00167C  6FD5               	movwf	??_top_rocker_release& (0+255),b
  1990  00167E  0E2B               	movlw	43
  1991  001680                     u5207:
  1992  001680  2EE8               	decfsz	wreg,f,c
  1993  001682  D7FE               	bra	u5207
  1994  001684  2FD5               	decfsz	??_top_rocker_release& (0+255),f,b
  1995  001686  D7FC               	bra	u5207
  1996  001688  2FD6               	decfsz	(??_top_rocker_release+1)& (0+255),f,b
  1997  00168A  D7FA               	bra	u5207
  1998  00168C  0100               	movlb	0	; () banked
  1999  00168E  2BD8               	incf	top_rocker_release@i_1183& (0+255),f,b
  2000  001690  D7EB               	goto	l5377
  2001  001692                     __end_of_top_rocker_release:
  2002                           	opt stack 0
  2003                           tosu	equ	0xFFF
  2004                           tosh	equ	0xFFE
  2005                           tosl	equ	0xFFD
  2006                           pclath	equ	0xFFA
  2007                           intcon	equ	0xFF2
  2008                           intcon3	equ	0xFF0
  2009                           postinc0	equ	0xFEE
  2010                           wreg	equ	0xFE8
  2011                           status	equ	0xFD8
  2012                           
  2013 ;; *************** function _solenoids_back *****************
  2014 ;; Defined at:
  2015 ;;		line 102 in file "top_rocker_fsm.c"
  2016 ;; Parameters:    Size  Location     Type
  2017 ;;		None
  2018 ;; Auto vars:     Size  Location     Type
  2019 ;;  i               1   39[BANK0 ] unsigned char 
  2020 ;;  i               1   38[BANK0 ] unsigned char 
  2021 ;; Return value:  Size  Location     Type
  2022 ;;                  1    wreg      void 
  2023 ;; Registers used:
  2024 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2025 ;; Tracked objects:
  2026 ;;		On entry : 0/0
  2027 ;;		On exit  : 0/0
  2028 ;;		Unchanged: 0/0
  2029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2031 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2032 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2033 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2034 ;;Total ram usage:        4 bytes
  2035 ;; Hardware stack levels used:    1
  2036 ;; Hardware stack levels required when called:    8
  2037 ;; This function calls:
  2038 ;;		_go_back
  2039 ;;		_initLCD
  2040 ;;		_lcdInst
  2041 ;;		_printf
  2042 ;; This function is called by:
  2043 ;;		_solenoids_out
  2044 ;;		_startSorting
  2045 ;; This function uses a non-reentrant model
  2046 ;;
  2047                           
  2048                           	psect	text3
  2049  00137E                     __ptext3:
  2050                           	opt stack 0
  2051  00137E                     _solenoids_back:
  2052                           	opt stack 21
  2053                           
  2054                           ;top_rocker_fsm.c: 112: tabed = PORTCbits.RC1;
  2055                           
  2056                           ; BSR set to: 0
  2057                           ;incstack = 0
  2058  00137E  A282               	btfss	3970,1,c	;volatile
  2059  001380  D004               	goto	u4640
  2060  001382  0100               	movlb	0	; () banked
  2061  001384  6BD5               	clrf	??_solenoids_back& (0+255),b
  2062  001386  2BD5               	incf	??_solenoids_back& (0+255),f,b
  2063  001388  D002               	goto	u4648
  2064  00138A                     u4640:
  2065  00138A  0100               	movlb	0	; () banked
  2066  00138C  6BD5               	clrf	??_solenoids_back& (0+255),b
  2067  00138E                     u4648:
  2068  00138E  0100               	movlb	0	; () banked
  2069  001390  51D5               	movf	??_solenoids_back& (0+255),w,b
  2070  001392  0100               	movlb	0	; () banked
  2071  001394  6F97               	movwf	_tabed& (0+255),b
  2072  001396  6B98               	clrf	(_tabed+1)& (0+255),b
  2073                           
  2074                           ; BSR set to: 0
  2075                           ;top_rocker_fsm.c: 114: if(tabed){
  2076  001398  0100               	movlb	0	; () banked
  2077  00139A  5197               	movf	_tabed& (0+255),w,b
  2078  00139C  0100               	movlb	0	; () banked
  2079  00139E  1198               	iorwf	(_tabed+1)& (0+255),w,b
  2080  0013A0  B4D8               	btfsc	status,2,c
  2081  0013A2  D02D               	goto	l5325
  2082                           
  2083                           ; BSR set to: 0
  2084                           ;top_rocker_fsm.c: 115: top_move = 1;
  2085  0013A4  0E00               	movlw	0
  2086  0013A6  0100               	movlb	0	; () banked
  2087  0013A8  6F96               	movwf	(_top_move+1)& (0+255),b
  2088  0013AA  0E01               	movlw	1
  2089  0013AC  6F95               	movwf	_top_move& (0+255),b
  2090                           
  2091                           ; BSR set to: 0
  2092                           ;top_rocker_fsm.c: 117: pop_can_tab++;
  2093  0013AE  0100               	movlb	0	; () banked
  2094  0013B0  4B99               	infsnz	_pop_can_tab& (0+255),f,b
  2095  0013B2  2B9A               	incf	(_pop_can_tab+1)& (0+255),f,b
  2096                           
  2097                           ; BSR set to: 0
  2098                           ;top_rocker_fsm.c: 120: initLCD();
  2099  0013B4  ECAF  F00E         	call	_initLCD	;wreg free
  2100                           
  2101                           ;top_rocker_fsm.c: 121: lcdInst(0b10000000);;
  2102  0013B8  0E80               	movlw	128
  2103  0013BA  EC14  F011         	call	_lcdInst
  2104                           
  2105                           ;top_rocker_fsm.c: 122: printf("TOP has Tab");
  2106  0013BE  0E7D               	movlw	low STR_30
  2107  0013C0  0100               	movlb	0	; () banked
  2108  0013C2  6FBF               	movwf	printf@f& (0+255),b
  2109  0013C4  0EFF               	movlw	high STR_30
  2110  0013C6  0100               	movlb	0	; () banked
  2111  0013C8  6FC0               	movwf	(printf@f+1)& (0+255),b
  2112  0013CA  EC09  F000         	call	_printf	;wreg free
  2113                           
  2114                           ;top_rocker_fsm.c: 123: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/400
      +                          0.0)));};
  2115  0013CE  0E00               	movlw	0
  2116  0013D0  0100               	movlb	0	; () banked
  2117  0013D2  6FD7               	movwf	solenoids_back@i& (0+255),b
  2118  0013D4                     l5317:
  2119                           
  2120                           ; BSR set to: 0
  2121  0013D4  0E09               	movlw	9
  2122  0013D6  0100               	movlb	0	; () banked
  2123  0013D8  65D7               	cpfsgt	solenoids_back@i& (0+255),b
  2124  0013DA  D001               	goto	l5321
  2125  0013DC  D03D               	goto	l5343
  2126  0013DE                     l5321:
  2127                           
  2128                           ; BSR set to: 0
  2129  0013DE  0E02               	movlw	2
  2130  0013E0  0100               	movlb	0	; () banked
  2131  0013E2  6FD6               	movwf	(??_solenoids_back+1)& (0+255),b
  2132  0013E4  0E3F               	movlw	63
  2133  0013E6  0100               	movlb	0	; () banked
  2134  0013E8  6FD5               	movwf	??_solenoids_back& (0+255),b
  2135  0013EA  0E2B               	movlw	43
  2136  0013EC                     u5217:
  2137  0013EC  2EE8               	decfsz	wreg,f,c
  2138  0013EE  D7FE               	bra	u5217
  2139  0013F0  2FD5               	decfsz	??_solenoids_back& (0+255),f,b
  2140  0013F2  D7FC               	bra	u5217
  2141  0013F4  2FD6               	decfsz	(??_solenoids_back+1)& (0+255),f,b
  2142  0013F6  D7FA               	bra	u5217
  2143  0013F8  0100               	movlb	0	; () banked
  2144  0013FA  2BD7               	incf	solenoids_back@i& (0+255),f,b
  2145  0013FC  D7EB               	goto	l5317
  2146  0013FE                     l5325:
  2147                           
  2148                           ; BSR set to: 0
  2149                           ;top_rocker_fsm.c: 129: initLCD();
  2150  0013FE  ECAF  F00E         	call	_initLCD	;wreg free
  2151                           
  2152                           ;top_rocker_fsm.c: 130: lcdInst(0b10000000);;
  2153  001402  0E80               	movlw	128
  2154  001404  EC14  F011         	call	_lcdInst
  2155                           
  2156                           ;top_rocker_fsm.c: 131: printf("TOP no Tab");
  2157  001408  0EAD               	movlw	low STR_31
  2158  00140A  0100               	movlb	0	; () banked
  2159  00140C  6FBF               	movwf	printf@f& (0+255),b
  2160  00140E  0EFF               	movlw	high STR_31
  2161  001410  0100               	movlb	0	; () banked
  2162  001412  6FC0               	movwf	(printf@f+1)& (0+255),b
  2163  001414  EC09  F000         	call	_printf	;wreg free
  2164                           
  2165                           ;top_rocker_fsm.c: 132: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/400
      +                          0.0)));};
  2166  001418  0E00               	movlw	0
  2167  00141A  0100               	movlb	0	; () banked
  2168  00141C  6FD8               	movwf	solenoids_back@i_1176& (0+255),b
  2169  00141E                     l5331:
  2170                           
  2171                           ; BSR set to: 0
  2172  00141E  0E09               	movlw	9
  2173  001420  0100               	movlb	0	; () banked
  2174  001422  65D8               	cpfsgt	solenoids_back@i_1176& (0+255),b
  2175  001424  D001               	goto	l5335
  2176  001426  D010               	goto	l5339
  2177  001428                     l5335:
  2178                           
  2179                           ; BSR set to: 0
  2180  001428  0E02               	movlw	2
  2181  00142A  0100               	movlb	0	; () banked
  2182  00142C  6FD6               	movwf	(??_solenoids_back+1)& (0+255),b
  2183  00142E  0E3F               	movlw	63
  2184  001430  0100               	movlb	0	; () banked
  2185  001432  6FD5               	movwf	??_solenoids_back& (0+255),b
  2186  001434  0E2B               	movlw	43
  2187  001436                     u5227:
  2188  001436  2EE8               	decfsz	wreg,f,c
  2189  001438  D7FE               	bra	u5227
  2190  00143A  2FD5               	decfsz	??_solenoids_back& (0+255),f,b
  2191  00143C  D7FC               	bra	u5227
  2192  00143E  2FD6               	decfsz	(??_solenoids_back+1)& (0+255),f,b
  2193  001440  D7FA               	bra	u5227
  2194  001442  0100               	movlb	0	; () banked
  2195  001444  2BD8               	incf	solenoids_back@i_1176& (0+255),f,b
  2196  001446  D7EB               	goto	l5331
  2197  001448                     l5339:
  2198                           
  2199                           ; BSR set to: 0
  2200                           ;top_rocker_fsm.c: 134: pop_can++;
  2201  001448  0100               	movlb	0	; () banked
  2202  00144A  4B9B               	infsnz	_pop_can& (0+255),f,b
  2203  00144C  2B9C               	incf	(_pop_can+1)& (0+255),f,b
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;top_rocker_fsm.c: 135: top_move = 0;
  2207  00144E  0E00               	movlw	0
  2208  001450  0100               	movlb	0	; () banked
  2209  001452  6F96               	movwf	(_top_move+1)& (0+255),b
  2210  001454  0E00               	movlw	0
  2211  001456  6F95               	movwf	_top_move& (0+255),b
  2212  001458                     l5343:
  2213                           
  2214                           ; BSR set to: 0
  2215                           ;top_rocker_fsm.c: 136: }
  2216                           ;top_rocker_fsm.c: 139: go_back();
  2217  001458  ECBB  F010         	call	_go_back	;wreg free
  2218                           
  2219                           ;top_rocker_fsm.c: 150: topRockerState = top_rocker_release;
  2220  00145C  0EE4               	movlw	low _top_rocker_release
  2221  00145E  0100               	movlb	0	; () banked
  2222  001460  6FAB               	movwf	_topRockerState& (0+255),b
  2223  001462  0E15               	movlw	high _top_rocker_release
  2224  001464  0100               	movlb	0	; () banked
  2225  001466  6FAC               	movwf	(_topRockerState+1)& (0+255),b
  2226  001468  0012               	return	
  2227  00146A                     __end_of_solenoids_back:
  2228                           	opt stack 0
  2229                           tosu	equ	0xFFF
  2230                           tosh	equ	0xFFE
  2231                           tosl	equ	0xFFD
  2232                           pclath	equ	0xFFA
  2233                           intcon	equ	0xFF2
  2234                           intcon3	equ	0xFF0
  2235                           postinc0	equ	0xFEE
  2236                           wreg	equ	0xFE8
  2237                           status	equ	0xFD8
  2238                           
  2239 ;; *************** function _solenoids_out *****************
  2240 ;; Defined at:
  2241 ;;		line 84 in file "top_rocker_fsm.c"
  2242 ;; Parameters:    Size  Location     Type
  2243 ;;		None
  2244 ;; Auto vars:     Size  Location     Type
  2245 ;;		None
  2246 ;; Return value:  Size  Location     Type
  2247 ;;                  1    wreg      void 
  2248 ;; Registers used:
  2249 ;;		wreg, status,2, status,0, cstack
  2250 ;; Tracked objects:
  2251 ;;		On entry : 0/0
  2252 ;;		On exit  : 0/0
  2253 ;;		Unchanged: 0/0
  2254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2259 ;;Total ram usage:        0 bytes
  2260 ;; Hardware stack levels used:    1
  2261 ;; Hardware stack levels required when called:    6
  2262 ;; This function calls:
  2263 ;;		_pop_out
  2264 ;; This function is called by:
  2265 ;;		_top_rocker_idle
  2266 ;;		_startSorting
  2267 ;; This function uses a non-reentrant model
  2268 ;;
  2269                           
  2270                           	psect	text4
  2271  002206                     __ptext4:
  2272                           	opt stack 0
  2273  002206                     _solenoids_out:
  2274                           	opt stack 23
  2275                           
  2276                           ;top_rocker_fsm.c: 95: pop_out();
  2277                           
  2278                           ; BSR set to: 0
  2279                           ;incstack = 0
  2280  002206  ECAB  F010         	call	_pop_out	;wreg free
  2281                           
  2282                           ;top_rocker_fsm.c: 97: topRockerState = solenoids_back;
  2283  00220A  0E7E               	movlw	low _solenoids_back
  2284  00220C  0100               	movlb	0	; () banked
  2285  00220E  6FAB               	movwf	_topRockerState& (0+255),b
  2286  002210  0E13               	movlw	high _solenoids_back
  2287  002212  0100               	movlb	0	; () banked
  2288  002214  6FAC               	movwf	(_topRockerState+1)& (0+255),b
  2289  002216  0012               	return	
  2290  002218                     __end_of_solenoids_out:
  2291                           	opt stack 0
  2292                           tosu	equ	0xFFF
  2293                           tosh	equ	0xFFE
  2294                           tosl	equ	0xFFD
  2295                           pclath	equ	0xFFA
  2296                           intcon	equ	0xFF2
  2297                           intcon3	equ	0xFF0
  2298                           postinc0	equ	0xFEE
  2299                           wreg	equ	0xFE8
  2300                           status	equ	0xFD8
  2301                           
  2302 ;; *************** function _top_rocker_idle *****************
  2303 ;; Defined at:
  2304 ;;		line 50 in file "top_rocker_fsm.c"
  2305 ;; Parameters:    Size  Location     Type
  2306 ;;		None
  2307 ;; Auto vars:     Size  Location     Type
  2308 ;;  i               1   40[BANK0 ] unsigned char 
  2309 ;;  i               1   39[BANK0 ] unsigned char 
  2310 ;;  i               1   38[BANK0 ] unsigned char 
  2311 ;; Return value:  Size  Location     Type
  2312 ;;                  1    wreg      void 
  2313 ;; Registers used:
  2314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2315 ;; Tracked objects:
  2316 ;;		On entry : 0/0
  2317 ;;		On exit  : 0/0
  2318 ;;		Unchanged: 0/0
  2319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2321 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2322 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2323 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2324 ;;Total ram usage:        5 bytes
  2325 ;; Hardware stack levels used:    1
  2326 ;; Hardware stack levels required when called:    8
  2327 ;; This function calls:
  2328 ;;		_initLCD
  2329 ;;		_lcdInst
  2330 ;;		_printf
  2331 ;; This function is called by:
  2332 ;;		_top_rocker_restore
  2333 ;;		_top_rocker_initial
  2334 ;;		_startSorting
  2335 ;; This function uses a non-reentrant model
  2336 ;;
  2337                           
  2338                           	psect	text5
  2339  001282                     __ptext5:
  2340                           	opt stack 0
  2341  001282                     _top_rocker_idle:
  2342                           	opt stack 21
  2343                           
  2344                           ;top_rocker_fsm.c: 55: lcdInst(0b10000000);;
  2345                           
  2346                           ; BSR set to: 0
  2347                           ;incstack = 0
  2348  001282  0E80               	movlw	128
  2349  001284  EC14  F011         	call	_lcdInst
  2350                           
  2351                           ;top_rocker_fsm.c: 56: initLCD();
  2352  001288  ECAF  F00E         	call	_initLCD	;wreg free
  2353                           
  2354                           ;top_rocker_fsm.c: 57: printf("top idle");
  2355  00128C  0ECE               	movlw	low STR_27
  2356  00128E  0100               	movlb	0	; () banked
  2357  001290  6FBF               	movwf	printf@f& (0+255),b
  2358  001292  0EFF               	movlw	high STR_27
  2359  001294  0100               	movlb	0	; () banked
  2360  001296  6FC0               	movwf	(printf@f+1)& (0+255),b
  2361  001298  EC09  F000         	call	_printf	;wreg free
  2362                           
  2363                           ;top_rocker_fsm.c: 58: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000
      +                          .0)));};
  2364  00129C  0E00               	movlw	0
  2365  00129E  0100               	movlb	0	; () banked
  2366  0012A0  6FD7               	movwf	top_rocker_idle@i& (0+255),b
  2367  0012A2                     l5247:
  2368                           
  2369                           ; BSR set to: 0
  2370  0012A2  0E09               	movlw	9
  2371  0012A4  0100               	movlb	0	; () banked
  2372  0012A6  65D7               	cpfsgt	top_rocker_idle@i& (0+255),b
  2373  0012A8  D001               	goto	l5251
  2374  0012AA  D010               	goto	l5255
  2375  0012AC                     l5251:
  2376                           
  2377                           ; BSR set to: 0
  2378  0012AC  0E02               	movlw	2
  2379  0012AE  0100               	movlb	0	; () banked
  2380  0012B0  6FD6               	movwf	(??_top_rocker_idle+1)& (0+255),b
  2381  0012B2  0E3F               	movlw	63
  2382  0012B4  0100               	movlb	0	; () banked
  2383  0012B6  6FD5               	movwf	??_top_rocker_idle& (0+255),b
  2384  0012B8  0E2B               	movlw	43
  2385  0012BA                     u5237:
  2386  0012BA  2EE8               	decfsz	wreg,f,c
  2387  0012BC  D7FE               	bra	u5237
  2388  0012BE  2FD5               	decfsz	??_top_rocker_idle& (0+255),f,b
  2389  0012C0  D7FC               	bra	u5237
  2390  0012C2  2FD6               	decfsz	(??_top_rocker_idle+1)& (0+255),f,b
  2391  0012C4  D7FA               	bra	u5237
  2392  0012C6  0100               	movlb	0	; () banked
  2393  0012C8  2BD7               	incf	top_rocker_idle@i& (0+255),f,b
  2394  0012CA  D7EB               	goto	l5247
  2395  0012CC                     l5255:
  2396                           
  2397                           ; BSR set to: 0
  2398                           ;top_rocker_fsm.c: 61: initLCD();
  2399  0012CC  ECAF  F00E         	call	_initLCD	;wreg free
  2400                           
  2401                           ;top_rocker_fsm.c: 62: if( PORTAbits.RA0 == 1){
  2402  0012D0  A080               	btfss	3968,0,c	;volatile
  2403  0012D2  D026               	goto	l5275
  2404                           
  2405                           ;top_rocker_fsm.c: 64: fsm1++;
  2406  0012D4  0100               	movlb	0	; () banked
  2407  0012D6  4B91               	infsnz	_fsm1& (0+255),f,b
  2408  0012D8  2B92               	incf	(_fsm1+1)& (0+255),f,b
  2409                           
  2410                           ; BSR set to: 0
  2411                           ;top_rocker_fsm.c: 66: lcdInst(0b10000000);;
  2412  0012DA  0E80               	movlw	128
  2413  0012DC  EC14  F011         	call	_lcdInst
  2414                           
  2415                           ;top_rocker_fsm.c: 67: printf("TOP No Can");
  2416  0012E0  0EB8               	movlw	low STR_28
  2417  0012E2  0100               	movlb	0	; () banked
  2418  0012E4  6FBF               	movwf	printf@f& (0+255),b
  2419  0012E6  0EFF               	movlw	high STR_28
  2420  0012E8  0100               	movlb	0	; () banked
  2421  0012EA  6FC0               	movwf	(printf@f+1)& (0+255),b
  2422  0012EC  EC09  F000         	call	_printf	;wreg free
  2423                           
  2424                           ;top_rocker_fsm.c: 68: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000
      +                          .0)));};
  2425  0012F0  0E00               	movlw	0
  2426  0012F2  0100               	movlb	0	; () banked
  2427  0012F4  6FD8               	movwf	top_rocker_idle@i_1167& (0+255),b
  2428  0012F6                     l5267:
  2429                           
  2430                           ; BSR set to: 0
  2431  0012F6  0E09               	movlw	9
  2432  0012F8  0100               	movlb	0	; () banked
  2433  0012FA  65D8               	cpfsgt	top_rocker_idle@i_1167& (0+255),b
  2434  0012FC  D001               	goto	l5271
  2435  0012FE  0012               	return	
  2436  001300                     l5271:
  2437                           
  2438                           ; BSR set to: 0
  2439  001300  0E02               	movlw	2
  2440  001302  0100               	movlb	0	; () banked
  2441  001304  6FD6               	movwf	(??_top_rocker_idle+1)& (0+255),b
  2442  001306  0E3F               	movlw	63
  2443  001308  0100               	movlb	0	; () banked
  2444  00130A  6FD5               	movwf	??_top_rocker_idle& (0+255),b
  2445  00130C  0E2B               	movlw	43
  2446  00130E                     u5247:
  2447  00130E  2EE8               	decfsz	wreg,f,c
  2448  001310  D7FE               	bra	u5247
  2449  001312  2FD5               	decfsz	??_top_rocker_idle& (0+255),f,b
  2450  001314  D7FC               	bra	u5247
  2451  001316  2FD6               	decfsz	(??_top_rocker_idle+1)& (0+255),f,b
  2452  001318  D7FA               	bra	u5247
  2453  00131A  0100               	movlb	0	; () banked
  2454  00131C  2BD8               	incf	top_rocker_idle@i_1167& (0+255),f,b
  2455  00131E  D7EB               	goto	l5267
  2456  001320                     l5275:
  2457                           
  2458                           ;top_rocker_fsm.c: 72: lcdInst(0b10000000);;
  2459  001320  0E80               	movlw	128
  2460  001322  EC14  F011         	call	_lcdInst
  2461                           
  2462                           ;top_rocker_fsm.c: 73: printf("TOP Detected");
  2463  001326  0E49               	movlw	low STR_29
  2464  001328  0100               	movlb	0	; () banked
  2465  00132A  6FBF               	movwf	printf@f& (0+255),b
  2466  00132C  0EFF               	movlw	high STR_29
  2467  00132E  0100               	movlb	0	; () banked
  2468  001330  6FC0               	movwf	(printf@f+1)& (0+255),b
  2469  001332  EC09  F000         	call	_printf	;wreg free
  2470                           
  2471                           ;top_rocker_fsm.c: 74: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000
      +                          .0)));};
  2472  001336  0E00               	movlw	0
  2473  001338  0100               	movlb	0	; () banked
  2474  00133A  6FD9               	movwf	top_rocker_idle@i_1169& (0+255),b
  2475  00133C                     l5281:
  2476                           
  2477                           ; BSR set to: 0
  2478  00133C  0E09               	movlw	9
  2479  00133E  0100               	movlb	0	; () banked
  2480  001340  65D9               	cpfsgt	top_rocker_idle@i_1169& (0+255),b
  2481  001342  D001               	goto	l5285
  2482  001344  D010               	goto	l5289
  2483  001346                     l5285:
  2484                           
  2485                           ; BSR set to: 0
  2486  001346  0E02               	movlw	2
  2487  001348  0100               	movlb	0	; () banked
  2488  00134A  6FD6               	movwf	(??_top_rocker_idle+1)& (0+255),b
  2489  00134C  0E3F               	movlw	63
  2490  00134E  0100               	movlb	0	; () banked
  2491  001350  6FD5               	movwf	??_top_rocker_idle& (0+255),b
  2492  001352  0E2B               	movlw	43
  2493  001354                     u5257:
  2494  001354  2EE8               	decfsz	wreg,f,c
  2495  001356  D7FE               	bra	u5257
  2496  001358  2FD5               	decfsz	??_top_rocker_idle& (0+255),f,b
  2497  00135A  D7FC               	bra	u5257
  2498  00135C  2FD6               	decfsz	(??_top_rocker_idle+1)& (0+255),f,b
  2499  00135E  D7FA               	bra	u5257
  2500  001360  0100               	movlb	0	; () banked
  2501  001362  2BD9               	incf	top_rocker_idle@i_1169& (0+255),f,b
  2502  001364  D7EB               	goto	l5281
  2503  001366                     l5289:
  2504                           
  2505                           ; BSR set to: 0
  2506                           ;top_rocker_fsm.c: 77: topRockerState = solenoids_out;
  2507  001366  0E06               	movlw	low _solenoids_out
  2508  001368  0100               	movlb	0	; () banked
  2509  00136A  6FAB               	movwf	_topRockerState& (0+255),b
  2510  00136C  0E22               	movlw	high _solenoids_out
  2511  00136E  0100               	movlb	0	; () banked
  2512  001370  6FAC               	movwf	(_topRockerState+1)& (0+255),b
  2513                           
  2514                           ; BSR set to: 0
  2515                           ;top_rocker_fsm.c: 78: fsm1 = 0;
  2516  001372  0E00               	movlw	0
  2517  001374  0100               	movlb	0	; () banked
  2518  001376  6F92               	movwf	(_fsm1+1)& (0+255),b
  2519  001378  0E00               	movlw	0
  2520  00137A  6F91               	movwf	_fsm1& (0+255),b
  2521                           
  2522                           ; BSR set to: 0
  2523  00137C  0012               	return	
  2524  00137E                     __end_of_top_rocker_idle:
  2525                           	opt stack 0
  2526                           tosu	equ	0xFFF
  2527                           tosh	equ	0xFFE
  2528                           tosl	equ	0xFFD
  2529                           pclath	equ	0xFFA
  2530                           intcon	equ	0xFF2
  2531                           intcon3	equ	0xFF0
  2532                           postinc0	equ	0xFEE
  2533                           wreg	equ	0xFE8
  2534                           status	equ	0xFD8
  2535                           
  2536 ;; *************** function _top_rocker_restore *****************
  2537 ;; Defined at:
  2538 ;;		line 185 in file "top_rocker_fsm.c"
  2539 ;; Parameters:    Size  Location     Type
  2540 ;;		None
  2541 ;; Auto vars:     Size  Location     Type
  2542 ;;  i               1   41[BANK0 ] unsigned char 
  2543 ;; Return value:  Size  Location     Type
  2544 ;;                  1    wreg      void 
  2545 ;; Registers used:
  2546 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2547 ;; Tracked objects:
  2548 ;;		On entry : 0/0
  2549 ;;		On exit  : 0/0
  2550 ;;		Unchanged: 0/0
  2551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2553 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2554 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2555 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2556 ;;Total ram usage:        3 bytes
  2557 ;; Hardware stack levels used:    1
  2558 ;; Hardware stack levels required when called:    9
  2559 ;; This function calls:
  2560 ;;		_initLCD
  2561 ;;		_lcdInst
  2562 ;;		_printf
  2563 ;;		_top_rocker_motor_cw
  2564 ;; This function is called by:
  2565 ;;		_top_rocker_release
  2566 ;;		_startSorting
  2567 ;; This function uses a non-reentrant model
  2568 ;;
  2569                           
  2570                           	psect	text6
  2571  001B56                     __ptext6:
  2572                           	opt stack 0
  2573  001B56                     _top_rocker_restore:
  2574                           	opt stack 20
  2575                           
  2576                           ;top_rocker_fsm.c: 188: lcdInst(0b10000000);;
  2577                           
  2578                           ; BSR set to: 0
  2579                           ;incstack = 0
  2580  001B56  0E80               	movlw	128
  2581  001B58  EC14  F011         	call	_lcdInst
  2582                           
  2583                           ;top_rocker_fsm.c: 189: initLCD();
  2584  001B5C  ECAF  F00E         	call	_initLCD	;wreg free
  2585                           
  2586                           ;top_rocker_fsm.c: 190: printf("top restore 1");
  2587  001B60  0E1F               	movlw	low STR_34
  2588  001B62  0100               	movlb	0	; () banked
  2589  001B64  6FBF               	movwf	printf@f& (0+255),b
  2590  001B66  0EFF               	movlw	high STR_34
  2591  001B68  0100               	movlb	0	; () banked
  2592  001B6A  6FC0               	movwf	(printf@f+1)& (0+255),b
  2593  001B6C  EC09  F000         	call	_printf	;wreg free
  2594                           
  2595                           ;top_rocker_fsm.c: 191: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/400
      +                          0.0)));};
  2596  001B70  0E00               	movlw	0
  2597  001B72  0100               	movlb	0	; () banked
  2598  001B74  6FDA               	movwf	top_rocker_restore@i& (0+255),b
  2599  001B76                     l5391:
  2600                           
  2601                           ; BSR set to: 0
  2602  001B76  0E09               	movlw	9
  2603  001B78  0100               	movlb	0	; () banked
  2604  001B7A  65DA               	cpfsgt	top_rocker_restore@i& (0+255),b
  2605  001B7C  D001               	goto	l5395
  2606  001B7E  D010               	goto	l5399
  2607  001B80                     l5395:
  2608                           
  2609                           ; BSR set to: 0
  2610  001B80  0E02               	movlw	2
  2611  001B82  0100               	movlb	0	; () banked
  2612  001B84  6FD9               	movwf	(??_top_rocker_restore+1)& (0+255),b
  2613  001B86  0E3F               	movlw	63
  2614  001B88  0100               	movlb	0	; () banked
  2615  001B8A  6FD8               	movwf	??_top_rocker_restore& (0+255),b
  2616  001B8C  0E2B               	movlw	43
  2617  001B8E                     u5267:
  2618  001B8E  2EE8               	decfsz	wreg,f,c
  2619  001B90  D7FE               	bra	u5267
  2620  001B92  2FD8               	decfsz	??_top_rocker_restore& (0+255),f,b
  2621  001B94  D7FC               	bra	u5267
  2622  001B96  2FD9               	decfsz	(??_top_rocker_restore+1)& (0+255),f,b
  2623  001B98  D7FA               	bra	u5267
  2624  001B9A  0100               	movlb	0	; () banked
  2625  001B9C  2BDA               	incf	top_rocker_restore@i& (0+255),f,b
  2626  001B9E  D7EB               	goto	l5391
  2627  001BA0                     l5399:
  2628                           
  2629                           ; BSR set to: 0
  2630                           ;top_rocker_fsm.c: 194: top_rocker_motor_cw();
  2631  001BA0  EC0D  F00C         	call	_top_rocker_motor_cw	;wreg free
  2632                           
  2633                           ;top_rocker_fsm.c: 197: topRockerState = top_rocker_idle;
  2634  001BA4  0E82               	movlw	low _top_rocker_idle
  2635  001BA6  0100               	movlb	0	; () banked
  2636  001BA8  6FAB               	movwf	_topRockerState& (0+255),b
  2637  001BAA  0E12               	movlw	high _top_rocker_idle
  2638  001BAC  0100               	movlb	0	; () banked
  2639  001BAE  6FAC               	movwf	(_topRockerState+1)& (0+255),b
  2640  001BB0  0012               	return	
  2641  001BB2                     __end_of_top_rocker_restore:
  2642                           	opt stack 0
  2643                           tosu	equ	0xFFF
  2644                           tosh	equ	0xFFE
  2645                           tosl	equ	0xFFD
  2646                           pclath	equ	0xFFA
  2647                           intcon	equ	0xFF2
  2648                           intcon3	equ	0xFF0
  2649                           postinc0	equ	0xFEE
  2650                           wreg	equ	0xFE8
  2651                           status	equ	0xFD8
  2652                           
  2653 ;; *************** function _top_rocker_motor_cw *****************
  2654 ;; Defined at:
  2655 ;;		line 25 in file "motors.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;		None
  2658 ;; Auto vars:     Size  Location     Type
  2659 ;;  i               1   38[BANK0 ] unsigned char 
  2660 ;; Return value:  Size  Location     Type
  2661 ;;                  1    wreg      void 
  2662 ;; Registers used:
  2663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2664 ;; Tracked objects:
  2665 ;;		On entry : 0/0
  2666 ;;		On exit  : 0/0
  2667 ;;		Unchanged: 0/0
  2668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2672 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2673 ;;Total ram usage:        3 bytes
  2674 ;; Hardware stack levels used:    1
  2675 ;; Hardware stack levels required when called:    8
  2676 ;; This function calls:
  2677 ;;		_initLCD
  2678 ;;		_lcdInst
  2679 ;;		_printf
  2680 ;; This function is called by:
  2681 ;;		_top_rocker_restore
  2682 ;; This function uses a non-reentrant model
  2683 ;;
  2684                           
  2685                           	psect	text7
  2686  00181A                     __ptext7:
  2687                           	opt stack 0
  2688  00181A                     _top_rocker_motor_cw:
  2689                           	opt stack 20
  2690                           
  2691                           ;motors.c: 29: lcdInst(0b10000000);;
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;incstack = 0
  2695  00181A  0E80               	movlw	128
  2696  00181C  EC14  F011         	call	_lcdInst
  2697                           
  2698                           ;motors.c: 30: initLCD();
  2699  001820  ECAF  F00E         	call	_initLCD	;wreg free
  2700                           
  2701                           ;motors.c: 31: printf("top cw");
  2702  001824  0EF8               	movlw	low STR_10
  2703  001826  0100               	movlb	0	; () banked
  2704  001828  6FBF               	movwf	printf@f& (0+255),b
  2705  00182A  0EFF               	movlw	high STR_10
  2706  00182C  0100               	movlb	0	; () banked
  2707  00182E  6FC0               	movwf	(printf@f+1)& (0+255),b
  2708  001830  EC09  F000         	call	_printf	;wreg free
  2709                           
  2710                           ;motors.c: 32: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)));};
  2711  001834  0E00               	movlw	0
  2712  001836  0100               	movlb	0	; () banked
  2713  001838  6FD7               	movwf	top_rocker_motor_cw@i& (0+255),b
  2714  00183A                     l4939:
  2715                           
  2716                           ; BSR set to: 0
  2717  00183A  0E09               	movlw	9
  2718  00183C  0100               	movlb	0	; () banked
  2719  00183E  65D7               	cpfsgt	top_rocker_motor_cw@i& (0+255),b
  2720  001840  D001               	goto	l4943
  2721  001842  D010               	goto	l389
  2722  001844                     l4943:
  2723                           
  2724                           ; BSR set to: 0
  2725  001844  0E02               	movlw	2
  2726  001846  0100               	movlb	0	; () banked
  2727  001848  6FD6               	movwf	(??_top_rocker_motor_cw+1)& (0+255),b
  2728  00184A  0E3F               	movlw	63
  2729  00184C  0100               	movlb	0	; () banked
  2730  00184E  6FD5               	movwf	??_top_rocker_motor_cw& (0+255),b
  2731  001850  0E2B               	movlw	43
  2732  001852                     u5277:
  2733  001852  2EE8               	decfsz	wreg,f,c
  2734  001854  D7FE               	bra	u5277
  2735  001856  2FD5               	decfsz	??_top_rocker_motor_cw& (0+255),f,b
  2736  001858  D7FC               	bra	u5277
  2737  00185A  2FD6               	decfsz	(??_top_rocker_motor_cw+1)& (0+255),f,b
  2738  00185C  D7FA               	bra	u5277
  2739  00185E  0100               	movlb	0	; () banked
  2740  001860  2BD7               	incf	top_rocker_motor_cw@i& (0+255),f,b
  2741  001862  D7EB               	goto	l4939
  2742  001864                     l389:
  2743                           
  2744                           ; BSR set to: 0
  2745                           ;motors.c: 35: LATAbits.LATA2 = 0;
  2746  001864  9489               	bcf	3977,2,c	;volatile
  2747                           
  2748                           ;motors.c: 36: LATAbits.LATA3 = 1;
  2749  001866  8689               	bsf	3977,3,c	;volatile
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;motors.c: 37: _delay((unsigned long)((500)*(10000000/4000.0)));
  2753  001868  0E07               	movlw	7
  2754  00186A  0100               	movlb	0	; () banked
  2755  00186C  6FD6               	movwf	(??_top_rocker_motor_cw+1)& (0+255),b
  2756  00186E  0E58               	movlw	88
  2757  001870  0100               	movlb	0	; () banked
  2758  001872  6FD5               	movwf	??_top_rocker_motor_cw& (0+255),b
  2759  001874  0E59               	movlw	89
  2760  001876                     u5287:
  2761  001876  2EE8               	decfsz	wreg,f,c
  2762  001878  D7FE               	bra	u5287
  2763  00187A  2FD5               	decfsz	??_top_rocker_motor_cw& (0+255),f,b
  2764  00187C  D7FC               	bra	u5287
  2765  00187E  2FD6               	decfsz	(??_top_rocker_motor_cw+1)& (0+255),f,b
  2766  001880  D7FA               	bra	u5287
  2767  001882  D000               	nop2	
  2768                           
  2769                           ;motors.c: 40: LATAbits.LATA2 = 0;
  2770  001884  9489               	bcf	3977,2,c	;volatile
  2771                           
  2772                           ;motors.c: 41: LATAbits.LATA3 = 0;
  2773  001886  9689               	bcf	3977,3,c	;volatile
  2774  001888  0012               	return	
  2775  00188A                     __end_of_top_rocker_motor_cw:
  2776                           	opt stack 0
  2777                           tosu	equ	0xFFF
  2778                           tosh	equ	0xFFE
  2779                           tosl	equ	0xFFD
  2780                           pclath	equ	0xFFA
  2781                           intcon	equ	0xFF2
  2782                           intcon3	equ	0xFF0
  2783                           postinc0	equ	0xFEE
  2784                           wreg	equ	0xFE8
  2785                           status	equ	0xFD8
  2786                           
  2787 ;; *************** function _top_rocker_motor_ccw *****************
  2788 ;; Defined at:
  2789 ;;		line 46 in file "motors.c"
  2790 ;; Parameters:    Size  Location     Type
  2791 ;;		None
  2792 ;; Auto vars:     Size  Location     Type
  2793 ;;		None
  2794 ;; Return value:  Size  Location     Type
  2795 ;;                  1    wreg      void 
  2796 ;; Registers used:
  2797 ;;		wreg
  2798 ;; Tracked objects:
  2799 ;;		On entry : 0/0
  2800 ;;		On exit  : 0/0
  2801 ;;		Unchanged: 0/0
  2802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2805 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2806 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2807 ;;Total ram usage:        2 bytes
  2808 ;; Hardware stack levels used:    1
  2809 ;; Hardware stack levels required when called:    5
  2810 ;; This function calls:
  2811 ;;		Nothing
  2812 ;; This function is called by:
  2813 ;;		_top_rocker_release
  2814 ;; This function uses a non-reentrant model
  2815 ;;
  2816                           
  2817                           	psect	text8
  2818  001F96                     __ptext8:
  2819                           	opt stack 0
  2820  001F96                     _top_rocker_motor_ccw:
  2821                           	opt stack 23
  2822                           
  2823                           ;motors.c: 50: LATAbits.LATA2 = 1;
  2824                           
  2825                           ;incstack = 0
  2826  001F96  8489               	bsf	3977,2,c	;volatile
  2827                           
  2828                           ;motors.c: 51: LATAbits.LATA3 = 0;
  2829  001F98  9689               	bcf	3977,3,c	;volatile
  2830                           
  2831                           ;motors.c: 52: _delay((unsigned long)((500)*(10000000/4000.0)));
  2832  001F9A  0E07               	movlw	7
  2833  001F9C  0100               	movlb	0	; () banked
  2834  001F9E  6FB2               	movwf	(??_top_rocker_motor_ccw+1)& (0+255),b
  2835  001FA0  0E58               	movlw	88
  2836  001FA2  0100               	movlb	0	; () banked
  2837  001FA4  6FB1               	movwf	??_top_rocker_motor_ccw& (0+255),b
  2838  001FA6  0E59               	movlw	89
  2839  001FA8                     u5297:
  2840  001FA8  2EE8               	decfsz	wreg,f,c
  2841  001FAA  D7FE               	bra	u5297
  2842  001FAC  2FB1               	decfsz	??_top_rocker_motor_ccw& (0+255),f,b
  2843  001FAE  D7FC               	bra	u5297
  2844  001FB0  2FB2               	decfsz	(??_top_rocker_motor_ccw+1)& (0+255),f,b
  2845  001FB2  D7FA               	bra	u5297
  2846  001FB4  D000               	nop2	
  2847                           
  2848                           ;motors.c: 55: LATAbits.LATA2 = 0;
  2849  001FB6  9489               	bcf	3977,2,c	;volatile
  2850                           
  2851                           ;motors.c: 56: LATAbits.LATA3 = 0;
  2852  001FB8  9689               	bcf	3977,3,c	;volatile
  2853  001FBA  0012               	return	
  2854  001FBC                     __end_of_top_rocker_motor_ccw:
  2855                           	opt stack 0
  2856                           tosu	equ	0xFFF
  2857                           tosh	equ	0xFFE
  2858                           tosl	equ	0xFFD
  2859                           pclath	equ	0xFFA
  2860                           intcon	equ	0xFF2
  2861                           intcon3	equ	0xFF0
  2862                           postinc0	equ	0xFEE
  2863                           wreg	equ	0xFE8
  2864                           status	equ	0xFD8
  2865                           
  2866 ;; *************** function _top_distribution_move *****************
  2867 ;; Defined at:
  2868 ;;		line 97 in file "top_distribution_fsm.c"
  2869 ;; Parameters:    Size  Location     Type
  2870 ;;		None
  2871 ;; Auto vars:     Size  Location     Type
  2872 ;;		None
  2873 ;; Return value:  Size  Location     Type
  2874 ;;                  1    wreg      void 
  2875 ;; Registers used:
  2876 ;;		wreg, status,2, status,0, cstack
  2877 ;; Tracked objects:
  2878 ;;		On entry : 0/0
  2879 ;;		On exit  : 0/0
  2880 ;;		Unchanged: 0/0
  2881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2886 ;;Total ram usage:        0 bytes
  2887 ;; Hardware stack levels used:    1
  2888 ;; Hardware stack levels required when called:    6
  2889 ;; This function calls:
  2890 ;;		_top_distribution_motor_ccw
  2891 ;;		_top_distribution_motor_cw
  2892 ;; This function is called by:
  2893 ;;		_top_distribution_prepare
  2894 ;;		_startSorting
  2895 ;; This function uses a non-reentrant model
  2896 ;;
  2897                           
  2898                           	psect	text9
  2899  0020C6                     __ptext9:
  2900                           	opt stack 0
  2901  0020C6                     _top_distribution_move:
  2902                           	opt stack 23
  2903                           
  2904                           ;top_distribution_fsm.c: 101: if(top_move == 1){
  2905                           
  2906                           ;incstack = 0
  2907  0020C6  0100               	movlb	0	; () banked
  2908  0020C8  0595               	decf	_top_move& (0+255),w,b
  2909  0020CA  0100               	movlb	0	; () banked
  2910  0020CC  1196               	iorwf	(_top_move+1)& (0+255),w,b
  2911  0020CE  A4D8               	btfss	status,2,c
  2912  0020D0  D003               	goto	l5235
  2913                           
  2914                           ; BSR set to: 0
  2915                           ;top_distribution_fsm.c: 102: top_distribution_motor_ccw();
  2916  0020D2  ECF1  F00F         	call	_top_distribution_motor_ccw	;wreg free
  2917                           
  2918                           ;top_distribution_fsm.c: 112: }else{
  2919  0020D6  D002               	goto	l5237
  2920  0020D8                     l5235:
  2921                           
  2922                           ;top_distribution_fsm.c: 113: top_distribution_motor_cw();
  2923  0020D8  ECDE  F00F         	call	_top_distribution_motor_cw	;wreg free
  2924  0020DC                     l5237:
  2925                           
  2926                           ;top_distribution_fsm.c: 124: }
  2927                           ;top_distribution_fsm.c: 127: topDistributionState = top_distribution_idle;
  2928  0020DC  0EDA               	movlw	low _top_distribution_idle
  2929  0020DE  0100               	movlb	0	; () banked
  2930  0020E0  6FA9               	movwf	_topDistributionState& (0+255),b
  2931  0020E2  0E1E               	movlw	high _top_distribution_idle
  2932  0020E4  0100               	movlb	0	; () banked
  2933  0020E6  6FAA               	movwf	(_topDistributionState+1)& (0+255),b
  2934  0020E8  0012               	return	
  2935  0020EA                     __end_of_top_distribution_move:
  2936                           	opt stack 0
  2937                           tosu	equ	0xFFF
  2938                           tosh	equ	0xFFE
  2939                           tosl	equ	0xFFD
  2940                           pclath	equ	0xFFA
  2941                           intcon	equ	0xFF2
  2942                           intcon3	equ	0xFF0
  2943                           postinc0	equ	0xFEE
  2944                           wreg	equ	0xFE8
  2945                           status	equ	0xFD8
  2946                           
  2947 ;; *************** function _top_distribution_idle *****************
  2948 ;; Defined at:
  2949 ;;		line 43 in file "top_distribution_fsm.c"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;		None
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;		None
  2954 ;; Return value:  Size  Location     Type
  2955 ;;                  1    wreg      void 
  2956 ;; Registers used:
  2957 ;;		wreg, status,2, status,0
  2958 ;; Tracked objects:
  2959 ;;		On entry : 0/0
  2960 ;;		On exit  : 0/0
  2961 ;;		Unchanged: 0/0
  2962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2967 ;;Total ram usage:        0 bytes
  2968 ;; Hardware stack levels used:    1
  2969 ;; Hardware stack levels required when called:    5
  2970 ;; This function calls:
  2971 ;;		Nothing
  2972 ;; This function is called by:
  2973 ;;		_top_distribution_move
  2974 ;;		_top_distribution_initial
  2975 ;;		_startSorting
  2976 ;; This function uses a non-reentrant model
  2977 ;;
  2978                           
  2979                           	psect	text10
  2980  001EDA                     __ptext10:
  2981                           	opt stack 0
  2982  001EDA                     _top_distribution_idle:
  2983                           	opt stack 24
  2984                           
  2985                           ;top_distribution_fsm.c: 46: if(start_top_distribution==1){
  2986                           
  2987                           ; BSR set to: 0
  2988                           ;incstack = 0
  2989  001EDA  0100               	movlb	0	; () banked
  2990  001EDC  0593               	decf	_start_top_distribution& (0+255),w,b
  2991  001EDE  0100               	movlb	0	; () banked
  2992  001EE0  1194               	iorwf	(_start_top_distribution+1)& (0+255),w,b
  2993  001EE2  A4D8               	btfss	status,2,c
  2994  001EE4  D00C               	goto	l5217
  2995                           
  2996                           ; BSR set to: 0
  2997                           ;top_distribution_fsm.c: 56: topDistributionState = top_distribution_prepare;
  2998  001EE6  0EEA               	movlw	low _top_distribution_prepare
  2999  001EE8  0100               	movlb	0	; () banked
  3000  001EEA  6FA9               	movwf	_topDistributionState& (0+255),b
  3001  001EEC  0E20               	movlw	high _top_distribution_prepare
  3002  001EEE  0100               	movlb	0	; () banked
  3003  001EF0  6FAA               	movwf	(_topDistributionState+1)& (0+255),b
  3004                           
  3005                           ; BSR set to: 0
  3006                           ;top_distribution_fsm.c: 57: start_top_distribution = 0;
  3007  001EF2  0E00               	movlw	0
  3008  001EF4  0100               	movlb	0	; () banked
  3009  001EF6  6F94               	movwf	(_start_top_distribution+1)& (0+255),b
  3010  001EF8  0E00               	movlw	0
  3011  001EFA  6F93               	movwf	_start_top_distribution& (0+255),b
  3012                           
  3013                           ;top_distribution_fsm.c: 58: }else{
  3014  001EFC  0012               	return	
  3015  001EFE                     l5217:
  3016                           
  3017                           ; BSR set to: 0
  3018                           ;top_distribution_fsm.c: 59: topDistributionState = top_distribution_idle;
  3019  001EFE  0EDA               	movlw	low _top_distribution_idle
  3020  001F00  0100               	movlb	0	; () banked
  3021  001F02  6FA9               	movwf	_topDistributionState& (0+255),b
  3022  001F04  0E1E               	movlw	high _top_distribution_idle
  3023  001F06  0100               	movlb	0	; () banked
  3024  001F08  6FAA               	movwf	(_topDistributionState+1)& (0+255),b
  3025                           
  3026                           ; BSR set to: 0
  3027  001F0A  0012               	return	
  3028  001F0C                     __end_of_top_distribution_idle:
  3029                           	opt stack 0
  3030                           tosu	equ	0xFFF
  3031                           tosh	equ	0xFFE
  3032                           tosl	equ	0xFFD
  3033                           pclath	equ	0xFFA
  3034                           intcon	equ	0xFF2
  3035                           intcon3	equ	0xFF0
  3036                           postinc0	equ	0xFEE
  3037                           wreg	equ	0xFE8
  3038                           status	equ	0xFD8
  3039                           
  3040 ;; *************** function _top_distribution_prepare *****************
  3041 ;; Defined at:
  3042 ;;		line 65 in file "top_distribution_fsm.c"
  3043 ;; Parameters:    Size  Location     Type
  3044 ;;		None
  3045 ;; Auto vars:     Size  Location     Type
  3046 ;;		None
  3047 ;; Return value:  Size  Location     Type
  3048 ;;                  1    wreg      void 
  3049 ;; Registers used:
  3050 ;;		wreg, status,2, status,0, cstack
  3051 ;; Tracked objects:
  3052 ;;		On entry : 0/0
  3053 ;;		On exit  : 0/0
  3054 ;;		Unchanged: 0/0
  3055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3060 ;;Total ram usage:        0 bytes
  3061 ;; Hardware stack levels used:    1
  3062 ;; Hardware stack levels required when called:    6
  3063 ;; This function calls:
  3064 ;;		_top_distribution_motor_ccw
  3065 ;;		_top_distribution_motor_cw
  3066 ;; This function is called by:
  3067 ;;		_top_distribution_idle
  3068 ;;		_startSorting
  3069 ;; This function uses a non-reentrant model
  3070 ;;
  3071                           
  3072                           	psect	text11
  3073  0020EA                     __ptext11:
  3074                           	opt stack 0
  3075  0020EA                     _top_distribution_prepare:
  3076                           	opt stack 23
  3077                           
  3078                           ;top_distribution_fsm.c: 68: if(top_move == 1){
  3079                           
  3080                           ; BSR set to: 0
  3081                           ;incstack = 0
  3082  0020EA  0100               	movlb	0	; () banked
  3083  0020EC  0595               	decf	_top_move& (0+255),w,b
  3084  0020EE  0100               	movlb	0	; () banked
  3085  0020F0  1196               	iorwf	(_top_move+1)& (0+255),w,b
  3086  0020F2  A4D8               	btfss	status,2,c
  3087  0020F4  D003               	goto	l5225
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;top_distribution_fsm.c: 70: top_distribution_motor_cw();
  3091  0020F6  ECDE  F00F         	call	_top_distribution_motor_cw	;wreg free
  3092                           
  3093                           ;top_distribution_fsm.c: 78: }else{
  3094  0020FA  D002               	goto	l5227
  3095  0020FC                     l5225:
  3096                           
  3097                           ;top_distribution_fsm.c: 80: top_distribution_motor_ccw();
  3098  0020FC  ECF1  F00F         	call	_top_distribution_motor_ccw	;wreg free
  3099  002100                     l5227:
  3100                           
  3101                           ;top_distribution_fsm.c: 89: }
  3102                           ;top_distribution_fsm.c: 92: topDistributionState = top_distribution_move;
  3103  002100  0EC6               	movlw	low _top_distribution_move
  3104  002102  0100               	movlb	0	; () banked
  3105  002104  6FA9               	movwf	_topDistributionState& (0+255),b
  3106  002106  0E20               	movlw	high _top_distribution_move
  3107  002108  0100               	movlb	0	; () banked
  3108  00210A  6FAA               	movwf	(_topDistributionState+1)& (0+255),b
  3109  00210C  0012               	return	
  3110  00210E                     __end_of_top_distribution_prepare:
  3111                           	opt stack 0
  3112                           tosu	equ	0xFFF
  3113                           tosh	equ	0xFFE
  3114                           tosl	equ	0xFFD
  3115                           pclath	equ	0xFFA
  3116                           intcon	equ	0xFF2
  3117                           intcon3	equ	0xFF0
  3118                           postinc0	equ	0xFEE
  3119                           wreg	equ	0xFE8
  3120                           status	equ	0xFD8
  3121                           
  3122 ;; *************** function _top_distribution_motor_cw *****************
  3123 ;; Defined at:
  3124 ;;		line 92 in file "motors.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;		None
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;		None
  3129 ;; Return value:  Size  Location     Type
  3130 ;;                  1    wreg      void 
  3131 ;; Registers used:
  3132 ;;		wreg
  3133 ;; Tracked objects:
  3134 ;;		On entry : 0/0
  3135 ;;		On exit  : 0/0
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3140 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3141 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3142 ;;Total ram usage:        2 bytes
  3143 ;; Hardware stack levels used:    1
  3144 ;; Hardware stack levels required when called:    5
  3145 ;; This function calls:
  3146 ;;		Nothing
  3147 ;; This function is called by:
  3148 ;;		_top_distribution_prepare
  3149 ;;		_top_distribution_move
  3150 ;; This function uses a non-reentrant model
  3151 ;;
  3152                           
  3153                           	psect	text12
  3154  001FBC                     __ptext12:
  3155                           	opt stack 0
  3156  001FBC                     _top_distribution_motor_cw:
  3157                           	opt stack 23
  3158                           
  3159                           ;motors.c: 95: LATCbits.LATC5 = 1;
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;incstack = 0
  3163  001FBC  8A8B               	bsf	3979,5,c	;volatile
  3164                           
  3165                           ;motors.c: 96: LATCbits.LATC6 = 0;
  3166  001FBE  9C8B               	bcf	3979,6,c	;volatile
  3167                           
  3168                           ;motors.c: 97: _delay((unsigned long)((200)*(10000000/4000.0)));
  3169  001FC0  0E03               	movlw	3
  3170  001FC2  0100               	movlb	0	; () banked
  3171  001FC4  6FB2               	movwf	(??_top_distribution_motor_cw+1)& (0+255),b
  3172  001FC6  0E8A               	movlw	138
  3173  001FC8  0100               	movlb	0	; () banked
  3174  001FCA  6FB1               	movwf	??_top_distribution_motor_cw& (0+255),b
  3175  001FCC  0E55               	movlw	85
  3176  001FCE                     u5307:
  3177  001FCE  2EE8               	decfsz	wreg,f,c
  3178  001FD0  D7FE               	bra	u5307
  3179  001FD2  2FB1               	decfsz	??_top_distribution_motor_cw& (0+255),f,b
  3180  001FD4  D7FC               	bra	u5307
  3181  001FD6  2FB2               	decfsz	(??_top_distribution_motor_cw+1)& (0+255),f,b
  3182  001FD8  D7FA               	bra	u5307
  3183  001FDA  D000               	nop2	
  3184                           
  3185                           ;motors.c: 100: LATCbits.LATC5 = 0;
  3186  001FDC  9A8B               	bcf	3979,5,c	;volatile
  3187                           
  3188                           ;motors.c: 101: LATCbits.LATC6 = 0;
  3189  001FDE  9C8B               	bcf	3979,6,c	;volatile
  3190  001FE0  0012               	return	
  3191  001FE2                     __end_of_top_distribution_motor_cw:
  3192                           	opt stack 0
  3193                           tosu	equ	0xFFF
  3194                           tosh	equ	0xFFE
  3195                           tosl	equ	0xFFD
  3196                           pclath	equ	0xFFA
  3197                           intcon	equ	0xFF2
  3198                           intcon3	equ	0xFF0
  3199                           postinc0	equ	0xFEE
  3200                           wreg	equ	0xFE8
  3201                           status	equ	0xFD8
  3202                           
  3203 ;; *************** function _top_distribution_motor_ccw *****************
  3204 ;; Defined at:
  3205 ;;		line 106 in file "motors.c"
  3206 ;; Parameters:    Size  Location     Type
  3207 ;;		None
  3208 ;; Auto vars:     Size  Location     Type
  3209 ;;		None
  3210 ;; Return value:  Size  Location     Type
  3211 ;;                  1    wreg      void 
  3212 ;; Registers used:
  3213 ;;		wreg
  3214 ;; Tracked objects:
  3215 ;;		On entry : 0/0
  3216 ;;		On exit  : 0/0
  3217 ;;		Unchanged: 0/0
  3218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3221 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3222 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3223 ;;Total ram usage:        2 bytes
  3224 ;; Hardware stack levels used:    1
  3225 ;; Hardware stack levels required when called:    5
  3226 ;; This function calls:
  3227 ;;		Nothing
  3228 ;; This function is called by:
  3229 ;;		_top_distribution_prepare
  3230 ;;		_top_distribution_move
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           	psect	text13
  3235  001FE2                     __ptext13:
  3236                           	opt stack 0
  3237  001FE2                     _top_distribution_motor_ccw:
  3238                           	opt stack 23
  3239                           
  3240                           ;motors.c: 109: LATCbits.LATC5 = 0;
  3241                           
  3242                           ;incstack = 0
  3243  001FE2  9A8B               	bcf	3979,5,c	;volatile
  3244                           
  3245                           ;motors.c: 110: LATCbits.LATC6 = 1;
  3246  001FE4  8C8B               	bsf	3979,6,c	;volatile
  3247                           
  3248                           ;motors.c: 111: _delay((unsigned long)((200)*(10000000/4000.0)));
  3249  001FE6  0E03               	movlw	3
  3250  001FE8  0100               	movlb	0	; () banked
  3251  001FEA  6FB2               	movwf	(??_top_distribution_motor_ccw+1)& (0+255),b
  3252  001FEC  0E8A               	movlw	138
  3253  001FEE  0100               	movlb	0	; () banked
  3254  001FF0  6FB1               	movwf	??_top_distribution_motor_ccw& (0+255),b
  3255  001FF2  0E55               	movlw	85
  3256  001FF4                     u5317:
  3257  001FF4  2EE8               	decfsz	wreg,f,c
  3258  001FF6  D7FE               	bra	u5317
  3259  001FF8  2FB1               	decfsz	??_top_distribution_motor_ccw& (0+255),f,b
  3260  001FFA  D7FC               	bra	u5317
  3261  001FFC  2FB2               	decfsz	(??_top_distribution_motor_ccw+1)& (0+255),f,b
  3262  001FFE  D7FA               	bra	u5317
  3263  002000  D000               	nop2	
  3264                           
  3265                           ;motors.c: 114: LATCbits.LATC5 = 0;
  3266  002002  9A8B               	bcf	3979,5,c	;volatile
  3267                           
  3268                           ;motors.c: 115: LATCbits.LATC6 = 0;
  3269  002004  9C8B               	bcf	3979,6,c	;volatile
  3270  002006  0012               	return	
  3271  002008                     __end_of_top_distribution_motor_ccw:
  3272                           	opt stack 0
  3273                           tosu	equ	0xFFF
  3274                           tosh	equ	0xFFE
  3275                           tosl	equ	0xFFD
  3276                           pclath	equ	0xFFA
  3277                           intcon	equ	0xFF2
  3278                           intcon3	equ	0xFF0
  3279                           postinc0	equ	0xFEE
  3280                           wreg	equ	0xFE8
  3281                           status	equ	0xFD8
  3282                           
  3283 ;; *************** function _pop_out *****************
  3284 ;; Defined at:
  3285 ;;		line 25 in file "solenoids.c"
  3286 ;; Parameters:    Size  Location     Type
  3287 ;;		None
  3288 ;; Auto vars:     Size  Location     Type
  3289 ;;		None
  3290 ;; Return value:  Size  Location     Type
  3291 ;;                  1    wreg      void 
  3292 ;; Registers used:
  3293 ;;		wreg
  3294 ;; Tracked objects:
  3295 ;;		On entry : 0/0
  3296 ;;		On exit  : 0/0
  3297 ;;		Unchanged: 0/0
  3298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3301 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3302 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3303 ;;Total ram usage:        2 bytes
  3304 ;; Hardware stack levels used:    1
  3305 ;; Hardware stack levels required when called:    5
  3306 ;; This function calls:
  3307 ;;		Nothing
  3308 ;; This function is called by:
  3309 ;;		_solenoids_out
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313                           	psect	text14
  3314  002156                     __ptext14:
  3315                           	opt stack 0
  3316  002156                     _pop_out:
  3317                           	opt stack 23
  3318                           
  3319                           ;solenoids.c: 27: LATDbits.LATD0 = 0;
  3320                           
  3321                           ;incstack = 0
  3322  002156  908C               	bcf	3980,0,c	;volatile
  3323                           
  3324                           ;solenoids.c: 28: _delay((unsigned long)((500)*(10000000/4000.0)));
  3325  002158  0E07               	movlw	7
  3326  00215A  0100               	movlb	0	; () banked
  3327  00215C  6FB2               	movwf	(??_pop_out+1)& (0+255),b
  3328  00215E  0E58               	movlw	88
  3329  002160  0100               	movlb	0	; () banked
  3330  002162  6FB1               	movwf	??_pop_out& (0+255),b
  3331  002164  0E59               	movlw	89
  3332  002166                     u5327:
  3333  002166  2EE8               	decfsz	wreg,f,c
  3334  002168  D7FE               	bra	u5327
  3335  00216A  2FB1               	decfsz	??_pop_out& (0+255),f,b
  3336  00216C  D7FC               	bra	u5327
  3337  00216E  2FB2               	decfsz	(??_pop_out+1)& (0+255),f,b
  3338  002170  D7FA               	bra	u5327
  3339  002172  D000               	nop2	
  3340  002174  0012               	return	
  3341  002176                     __end_of_pop_out:
  3342                           	opt stack 0
  3343                           tosu	equ	0xFFF
  3344                           tosh	equ	0xFFE
  3345                           tosl	equ	0xFFD
  3346                           pclath	equ	0xFFA
  3347                           intcon	equ	0xFF2
  3348                           intcon3	equ	0xFF0
  3349                           postinc0	equ	0xFEE
  3350                           wreg	equ	0xFE8
  3351                           status	equ	0xFD8
  3352                           
  3353 ;; *************** function _go_back *****************
  3354 ;; Defined at:
  3355 ;;		line 32 in file "solenoids.c"
  3356 ;; Parameters:    Size  Location     Type
  3357 ;;		None
  3358 ;; Auto vars:     Size  Location     Type
  3359 ;;		None
  3360 ;; Return value:  Size  Location     Type
  3361 ;;                  1    wreg      void 
  3362 ;; Registers used:
  3363 ;;		wreg
  3364 ;; Tracked objects:
  3365 ;;		On entry : 0/0
  3366 ;;		On exit  : 0/0
  3367 ;;		Unchanged: 0/0
  3368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3371 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3372 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3373 ;;Total ram usage:        2 bytes
  3374 ;; Hardware stack levels used:    1
  3375 ;; Hardware stack levels required when called:    5
  3376 ;; This function calls:
  3377 ;;		Nothing
  3378 ;; This function is called by:
  3379 ;;		_solenoids_back
  3380 ;; This function uses a non-reentrant model
  3381 ;;
  3382                           
  3383                           	psect	text15
  3384  002176                     __ptext15:
  3385                           	opt stack 0
  3386  002176                     _go_back:
  3387                           	opt stack 23
  3388                           
  3389                           ;solenoids.c: 34: LATDbits.LATD0 = 1;
  3390                           
  3391                           ;incstack = 0
  3392  002176  808C               	bsf	3980,0,c	;volatile
  3393                           
  3394                           ;solenoids.c: 35: _delay((unsigned long)((500)*(10000000/4000.0)));
  3395  002178  0E07               	movlw	7
  3396  00217A  0100               	movlb	0	; () banked
  3397  00217C  6FB2               	movwf	(??_go_back+1)& (0+255),b
  3398  00217E  0E58               	movlw	88
  3399  002180  0100               	movlb	0	; () banked
  3400  002182  6FB1               	movwf	??_go_back& (0+255),b
  3401  002184  0E59               	movlw	89
  3402  002186                     u5337:
  3403  002186  2EE8               	decfsz	wreg,f,c
  3404  002188  D7FE               	bra	u5337
  3405  00218A  2FB1               	decfsz	??_go_back& (0+255),f,b
  3406  00218C  D7FC               	bra	u5337
  3407  00218E  2FB2               	decfsz	(??_go_back+1)& (0+255),f,b
  3408  002190  D7FA               	bra	u5337
  3409  002192  D000               	nop2	
  3410  002194  0012               	return	
  3411  002196                     __end_of_go_back:
  3412                           	opt stack 0
  3413                           tosu	equ	0xFFF
  3414                           tosh	equ	0xFFE
  3415                           tosl	equ	0xFFD
  3416                           pclath	equ	0xFFA
  3417                           intcon	equ	0xFF2
  3418                           intcon3	equ	0xFF0
  3419                           postinc0	equ	0xFEE
  3420                           wreg	equ	0xFE8
  3421                           status	equ	0xFD8
  3422                           
  3423 ;; *************** function _initialization *****************
  3424 ;; Defined at:
  3425 ;;		line 134 in file "operation.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;		None
  3428 ;; Auto vars:     Size  Location     Type
  3429 ;;  i               1   41[BANK0 ] unsigned char 
  3430 ;; Return value:  Size  Location     Type
  3431 ;;                  1    wreg      void 
  3432 ;; Registers used:
  3433 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3434 ;; Tracked objects:
  3435 ;;		On entry : 0/0
  3436 ;;		On exit  : 0/0
  3437 ;;		Unchanged: 0/0
  3438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3440 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3441 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3442 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3443 ;;Total ram usage:        3 bytes
  3444 ;; Hardware stack levels used:    1
  3445 ;; Hardware stack levels required when called:    9
  3446 ;; This function calls:
  3447 ;;		_bottom_distribution_initial
  3448 ;;		_bottom_rocker_initial
  3449 ;;		_initLCD
  3450 ;;		_lcdInst
  3451 ;;		_printf
  3452 ;; This function is called by:
  3453 ;;		_startSorting
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           	psect	text16
  3458  0018FA                     __ptext16:
  3459                           	opt stack 0
  3460  0018FA                     _initialization:
  3461                           	opt stack 20
  3462                           
  3463                           ;operation.c: 137: fsm1 = fsm2 = 0;
  3464                           
  3465                           ;incstack = 0
  3466  0018FA  0E00               	movlw	0
  3467  0018FC  0100               	movlb	0	; () banked
  3468  0018FE  6FA4               	movwf	(_fsm2+1)& (0+255),b
  3469  001900  0E00               	movlw	0
  3470  001902  6FA3               	movwf	_fsm2& (0+255),b
  3471  001904  C0A3  F091         	movff	_fsm2,_fsm1
  3472  001908  C0A4  F092         	movff	_fsm2+1,_fsm1+1
  3473                           
  3474                           ; BSR set to: 0
  3475                           ;operation.c: 139: initLCD();
  3476  00190C  ECAF  F00E         	call	_initLCD	;wreg free
  3477                           
  3478                           ;operation.c: 140: lcdInst(0b10000000);;
  3479  001910  0E80               	movlw	128
  3480  001912  EC14  F011         	call	_lcdInst
  3481                           
  3482                           ;operation.c: 141: printf("Initializing");
  3483  001916  0E63               	movlw	low STR_16
  3484  001918  0100               	movlb	0	; () banked
  3485  00191A  6FBF               	movwf	printf@f& (0+255),b
  3486  00191C  0EFF               	movlw	high STR_16
  3487  00191E  0100               	movlb	0	; () banked
  3488  001920  6FC0               	movwf	(printf@f+1)& (0+255),b
  3489  001922  EC09  F000         	call	_printf	;wreg free
  3490                           
  3491                           ;operation.c: 142: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  3492  001926  0E00               	movlw	0
  3493  001928  0100               	movlb	0	; () banked
  3494  00192A  6FDA               	movwf	initialization@i& (0+255),b
  3495  00192C                     l5199:
  3496                           
  3497                           ; BSR set to: 0
  3498  00192C  0E09               	movlw	9
  3499  00192E  0100               	movlb	0	; () banked
  3500  001930  65DA               	cpfsgt	initialization@i& (0+255),b
  3501  001932  D001               	goto	l5203
  3502  001934  D010               	goto	l509
  3503  001936                     l5203:
  3504                           
  3505                           ; BSR set to: 0
  3506  001936  0E02               	movlw	2
  3507  001938  0100               	movlb	0	; () banked
  3508  00193A  6FD9               	movwf	(??_initialization+1)& (0+255),b
  3509  00193C  0E3F               	movlw	63
  3510  00193E  0100               	movlb	0	; () banked
  3511  001940  6FD8               	movwf	??_initialization& (0+255),b
  3512  001942  0E2B               	movlw	43
  3513  001944                     u5347:
  3514  001944  2EE8               	decfsz	wreg,f,c
  3515  001946  D7FE               	bra	u5347
  3516  001948  2FD8               	decfsz	??_initialization& (0+255),f,b
  3517  00194A  D7FC               	bra	u5347
  3518  00194C  2FD9               	decfsz	(??_initialization+1)& (0+255),f,b
  3519  00194E  D7FA               	bra	u5347
  3520  001950  0100               	movlb	0	; () banked
  3521  001952  2BDA               	incf	initialization@i& (0+255),f,b
  3522  001954  D7EB               	goto	l5199
  3523  001956                     l509:
  3524                           
  3525                           ; BSR set to: 0
  3526                           ;operation.c: 145: LATCbits.LATC0 = 1;
  3527  001956  808B               	bsf	3979,0,c	;volatile
  3528                           
  3529                           ;operation.c: 148: LATEbits.LATE0 = 1;
  3530  001958  808D               	bsf	3981,0,c	;volatile
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;operation.c: 153: bottom_rocker_initial();
  3534  00195A  EC07  F00E         	call	_bottom_rocker_initial	;wreg free
  3535                           
  3536                           ;operation.c: 155: bottom_distribution_initial();
  3537  00195E  EC1C  F011         	call	_bottom_distribution_initial	;wreg free
  3538  001962  0012               	return		;funcret
  3539  001964                     __end_of_initialization:
  3540                           	opt stack 0
  3541                           tosu	equ	0xFFF
  3542                           tosh	equ	0xFFE
  3543                           tosl	equ	0xFFD
  3544                           pclath	equ	0xFFA
  3545                           intcon	equ	0xFF2
  3546                           intcon3	equ	0xFF0
  3547                           postinc0	equ	0xFEE
  3548                           wreg	equ	0xFE8
  3549                           status	equ	0xFD8
  3550                           
  3551 ;; *************** function _bottom_rocker_initial *****************
  3552 ;; Defined at:
  3553 ;;		line 31 in file "bottom_rocker_fsm.c"
  3554 ;; Parameters:    Size  Location     Type
  3555 ;;		None
  3556 ;; Auto vars:     Size  Location     Type
  3557 ;;  i               1   38[BANK0 ] unsigned char 
  3558 ;; Return value:  Size  Location     Type
  3559 ;;                  1    wreg      void 
  3560 ;; Registers used:
  3561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3562 ;; Tracked objects:
  3563 ;;		On entry : 0/0
  3564 ;;		On exit  : 0/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3568 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3569 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3571 ;;Total ram usage:        3 bytes
  3572 ;; Hardware stack levels used:    1
  3573 ;; Hardware stack levels required when called:    8
  3574 ;; This function calls:
  3575 ;;		_initLCD
  3576 ;;		_lcdInst
  3577 ;;		_printf
  3578 ;; This function is called by:
  3579 ;;		_initialization
  3580 ;; This function uses a non-reentrant model
  3581 ;;
  3582                           
  3583                           	psect	text17
  3584  001C0E                     __ptext17:
  3585                           	opt stack 0
  3586  001C0E                     _bottom_rocker_initial:
  3587                           	opt stack 20
  3588                           
  3589                           ;bottom_rocker_fsm.c: 37: lcdInst(0b10000000);;
  3590                           
  3591                           ;incstack = 0
  3592  001C0E  0E80               	movlw	128
  3593  001C10  EC14  F011         	call	_lcdInst
  3594                           
  3595                           ;bottom_rocker_fsm.c: 38: initLCD();
  3596  001C14  ECAF  F00E         	call	_initLCD	;wreg free
  3597                           
  3598                           ;bottom_rocker_fsm.c: 39: printf("bottom init 1");
  3599  001C18  0E2D               	movlw	low STR_1
  3600  001C1A  0100               	movlb	0	; () banked
  3601  001C1C  6FBF               	movwf	printf@f& (0+255),b
  3602  001C1E  0EFF               	movlw	high STR_1
  3603  001C20  0100               	movlb	0	; () banked
  3604  001C22  6FC0               	movwf	(printf@f+1)& (0+255),b
  3605  001C24  EC09  F000         	call	_printf	;wreg free
  3606                           
  3607                           ;bottom_rocker_fsm.c: 40: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4
      +                          000.0)));};
  3608  001C28  0E00               	movlw	0
  3609  001C2A  0100               	movlb	0	; () banked
  3610  001C2C  6FD7               	movwf	bottom_rocker_initial@i& (0+255),b
  3611  001C2E                     l4897:
  3612                           
  3613                           ; BSR set to: 0
  3614  001C2E  0E09               	movlw	9
  3615  001C30  0100               	movlb	0	; () banked
  3616  001C32  65D7               	cpfsgt	bottom_rocker_initial@i& (0+255),b
  3617  001C34  D001               	goto	l4901
  3618  001C36  D010               	goto	l4905
  3619  001C38                     l4901:
  3620                           
  3621                           ; BSR set to: 0
  3622  001C38  0E02               	movlw	2
  3623  001C3A  0100               	movlb	0	; () banked
  3624  001C3C  6FD6               	movwf	(??_bottom_rocker_initial+1)& (0+255),b
  3625  001C3E  0E3F               	movlw	63
  3626  001C40  0100               	movlb	0	; () banked
  3627  001C42  6FD5               	movwf	??_bottom_rocker_initial& (0+255),b
  3628  001C44  0E2B               	movlw	43
  3629  001C46                     u5357:
  3630  001C46  2EE8               	decfsz	wreg,f,c
  3631  001C48  D7FE               	bra	u5357
  3632  001C4A  2FD5               	decfsz	??_bottom_rocker_initial& (0+255),f,b
  3633  001C4C  D7FC               	bra	u5357
  3634  001C4E  2FD6               	decfsz	(??_bottom_rocker_initial+1)& (0+255),f,b
  3635  001C50  D7FA               	bra	u5357
  3636  001C52  0100               	movlb	0	; () banked
  3637  001C54  2BD7               	incf	bottom_rocker_initial@i& (0+255),f,b
  3638  001C56  D7EB               	goto	l4897
  3639  001C58                     l4905:
  3640                           
  3641                           ; BSR set to: 0
  3642                           ;bottom_rocker_fsm.c: 43: bottomRockerState = bottom_rocker_idle;
  3643  001C58  0E92               	movlw	low _bottom_rocker_idle
  3644  001C5A  0100               	movlb	0	; () banked
  3645  001C5C  6FA5               	movwf	_bottomRockerState& (0+255),b
  3646  001C5E  0E0C               	movlw	high _bottom_rocker_idle
  3647  001C60  0100               	movlb	0	; () banked
  3648  001C62  6FA6               	movwf	(_bottomRockerState+1)& (0+255),b
  3649  001C64  0012               	return	
  3650  001C66                     __end_of_bottom_rocker_initial:
  3651                           	opt stack 0
  3652                           tosu	equ	0xFFF
  3653                           tosh	equ	0xFFE
  3654                           tosl	equ	0xFFD
  3655                           pclath	equ	0xFFA
  3656                           intcon	equ	0xFF2
  3657                           intcon3	equ	0xFF0
  3658                           postinc0	equ	0xFEE
  3659                           wreg	equ	0xFE8
  3660                           status	equ	0xFD8
  3661                           
  3662 ;; *************** function _bottom_distribution_initial *****************
  3663 ;; Defined at:
  3664 ;;		line 28 in file "bottom_distribution_fsm.c"
  3665 ;; Parameters:    Size  Location     Type
  3666 ;;		None
  3667 ;; Auto vars:     Size  Location     Type
  3668 ;;		None
  3669 ;; Return value:  Size  Location     Type
  3670 ;;                  1    wreg      void 
  3671 ;; Registers used:
  3672 ;;		wreg, status,2, status,0
  3673 ;; Tracked objects:
  3674 ;;		On entry : 0/0
  3675 ;;		On exit  : 0/0
  3676 ;;		Unchanged: 0/0
  3677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3682 ;;Total ram usage:        0 bytes
  3683 ;; Hardware stack levels used:    1
  3684 ;; Hardware stack levels required when called:    5
  3685 ;; This function calls:
  3686 ;;		Nothing
  3687 ;; This function is called by:
  3688 ;;		_initialization
  3689 ;; This function uses a non-reentrant model
  3690 ;;
  3691                           
  3692                           	psect	text18
  3693  002238                     __ptext18:
  3694                           	opt stack 0
  3695  002238                     _bottom_distribution_initial:
  3696                           	opt stack 23
  3697                           
  3698                           ;bottom_distribution_fsm.c: 41: bottomDistributionState = bottom_distribution_idle;
  3699                           
  3700                           ; BSR set to: 0
  3701                           ;incstack = 0
  3702  002238  0E0C               	movlw	low _bottom_distribution_idle
  3703  00223A  0100               	movlb	0	; () banked
  3704  00223C  6FA7               	movwf	_bottomDistributionState& (0+255),b
  3705  00223E  0E1F               	movlw	high _bottom_distribution_idle
  3706  002240  0100               	movlb	0	; () banked
  3707  002242  6FA8               	movwf	(_bottomDistributionState+1)& (0+255),b
  3708  002244  0012               	return	
  3709  002246                     __end_of_bottom_distribution_initial:
  3710                           	opt stack 0
  3711                           tosu	equ	0xFFF
  3712                           tosh	equ	0xFFE
  3713                           tosl	equ	0xFFD
  3714                           pclath	equ	0xFFA
  3715                           intcon	equ	0xFF2
  3716                           intcon3	equ	0xFF0
  3717                           postinc0	equ	0xFEE
  3718                           wreg	equ	0xFE8
  3719                           status	equ	0xFD8
  3720                           
  3721 ;; *************** function _bottom_rocker_release *****************
  3722 ;; Defined at:
  3723 ;;		line 116 in file "bottom_rocker_fsm.c"
  3724 ;; Parameters:    Size  Location     Type
  3725 ;;		None
  3726 ;; Auto vars:     Size  Location     Type
  3727 ;;  i               1   38[BANK0 ] unsigned char 
  3728 ;; Return value:  Size  Location     Type
  3729 ;;                  1    wreg      void 
  3730 ;; Registers used:
  3731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3732 ;; Tracked objects:
  3733 ;;		On entry : 0/0
  3734 ;;		On exit  : 0/0
  3735 ;;		Unchanged: 0/0
  3736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3738 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3739 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3740 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3741 ;;Total ram usage:        3 bytes
  3742 ;; Hardware stack levels used:    1
  3743 ;; Hardware stack levels required when called:    8
  3744 ;; This function calls:
  3745 ;;		_bottom_rocker_motor_ccw
  3746 ;;		_initLCD
  3747 ;;		_lcdInst
  3748 ;;		_printf
  3749 ;; This function is called by:
  3750 ;;		_bottom_rocker_idle
  3751 ;;		_startSorting
  3752 ;; This function uses a non-reentrant model
  3753 ;;
  3754                           
  3755                           	psect	text19
  3756  0019CC                     __ptext19:
  3757                           	opt stack 0
  3758  0019CC                     _bottom_rocker_release:
  3759                           	opt stack 21
  3760                           
  3761                           ;bottom_rocker_fsm.c: 119: lcdInst(0b10000000);;
  3762                           
  3763                           ; BSR set to: 0
  3764                           ;incstack = 0
  3765  0019CC  0E80               	movlw	128
  3766  0019CE  EC14  F011         	call	_lcdInst
  3767                           
  3768                           ;bottom_rocker_fsm.c: 120: initLCD();
  3769  0019D2  ECAF  F00E         	call	_initLCD	;wreg free
  3770                           
  3771                           ;bottom_rocker_fsm.c: 121: printf("bottom release");
  3772  0019D6  0E10               	movlw	low STR_7
  3773  0019D8  0100               	movlb	0	; () banked
  3774  0019DA  6FBF               	movwf	printf@f& (0+255),b
  3775  0019DC  0EFF               	movlw	high STR_7
  3776  0019DE  0100               	movlb	0	; () banked
  3777  0019E0  6FC0               	movwf	(printf@f+1)& (0+255),b
  3778  0019E2  EC09  F000         	call	_printf	;wreg free
  3779                           
  3780                           ;bottom_rocker_fsm.c: 122: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/
      +                          4000.0)));};
  3781  0019E6  0E00               	movlw	0
  3782  0019E8  0100               	movlb	0	; () banked
  3783  0019EA  6FD7               	movwf	bottom_rocker_release@i& (0+255),b
  3784  0019EC                     l5127:
  3785                           
  3786                           ; BSR set to: 0
  3787  0019EC  0E09               	movlw	9
  3788  0019EE  0100               	movlb	0	; () banked
  3789  0019F0  65D7               	cpfsgt	bottom_rocker_release@i& (0+255),b
  3790  0019F2  D001               	goto	l5131
  3791  0019F4  D010               	goto	l5135
  3792  0019F6                     l5131:
  3793                           
  3794                           ; BSR set to: 0
  3795  0019F6  0E02               	movlw	2
  3796  0019F8  0100               	movlb	0	; () banked
  3797  0019FA  6FD6               	movwf	(??_bottom_rocker_release+1)& (0+255),b
  3798  0019FC  0E3F               	movlw	63
  3799  0019FE  0100               	movlb	0	; () banked
  3800  001A00  6FD5               	movwf	??_bottom_rocker_release& (0+255),b
  3801  001A02  0E2B               	movlw	43
  3802  001A04                     u5367:
  3803  001A04  2EE8               	decfsz	wreg,f,c
  3804  001A06  D7FE               	bra	u5367
  3805  001A08  2FD5               	decfsz	??_bottom_rocker_release& (0+255),f,b
  3806  001A0A  D7FC               	bra	u5367
  3807  001A0C  2FD6               	decfsz	(??_bottom_rocker_release+1)& (0+255),f,b
  3808  001A0E  D7FA               	bra	u5367
  3809  001A10  0100               	movlb	0	; () banked
  3810  001A12  2BD7               	incf	bottom_rocker_release@i& (0+255),f,b
  3811  001A14  D7EB               	goto	l5127
  3812  001A16                     l5135:
  3813                           
  3814                           ; BSR set to: 0
  3815                           ;bottom_rocker_fsm.c: 125: bottom_rocker_motor_ccw();
  3816  001A16  EC17  F010         	call	_bottom_rocker_motor_ccw	;wreg free
  3817                           
  3818                           ;bottom_rocker_fsm.c: 128: start_bottom_distribution = 1;
  3819  001A1A  0E00               	movlw	0
  3820  001A1C  0100               	movlb	0	; () banked
  3821  001A1E  6FB0               	movwf	(_start_bottom_distribution+1)& (0+255),b
  3822  001A20  0E01               	movlw	1
  3823  001A22  6FAF               	movwf	_start_bottom_distribution& (0+255),b
  3824                           
  3825                           ; BSR set to: 0
  3826                           ;bottom_rocker_fsm.c: 131: bottomRockerState = bottom_rocker_restore;
  3827  001A24  0EB2               	movlw	low _bottom_rocker_restore
  3828  001A26  0100               	movlb	0	; () banked
  3829  001A28  6FA5               	movwf	_bottomRockerState& (0+255),b
  3830  001A2A  0E1B               	movlw	high _bottom_rocker_restore
  3831  001A2C  0100               	movlb	0	; () banked
  3832  001A2E  6FA6               	movwf	(_bottomRockerState+1)& (0+255),b
  3833  001A30  0012               	return	
  3834  001A32                     __end_of_bottom_rocker_release:
  3835                           	opt stack 0
  3836                           tosu	equ	0xFFF
  3837                           tosh	equ	0xFFE
  3838                           tosl	equ	0xFFD
  3839                           pclath	equ	0xFFA
  3840                           intcon	equ	0xFF2
  3841                           intcon3	equ	0xFF0
  3842                           postinc0	equ	0xFEE
  3843                           wreg	equ	0xFE8
  3844                           status	equ	0xFD8
  3845                           
  3846 ;; *************** function _bottom_rocker_idle *****************
  3847 ;; Defined at:
  3848 ;;		line 48 in file "bottom_rocker_fsm.c"
  3849 ;; Parameters:    Size  Location     Type
  3850 ;;		None
  3851 ;; Auto vars:     Size  Location     Type
  3852 ;;  i               1   42[BANK0 ] unsigned char 
  3853 ;;  i               1   41[BANK0 ] unsigned char 
  3854 ;;  i               1   40[BANK0 ] unsigned char 
  3855 ;;  i               1   39[BANK0 ] unsigned char 
  3856 ;;  i               1   38[BANK0 ] unsigned char 
  3857 ;; Return value:  Size  Location     Type
  3858 ;;                  1    wreg      void 
  3859 ;; Registers used:
  3860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3861 ;; Tracked objects:
  3862 ;;		On entry : 0/0
  3863 ;;		On exit  : 0/0
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3867 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3868 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3869 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3870 ;;Total ram usage:        7 bytes
  3871 ;; Hardware stack levels used:    1
  3872 ;; Hardware stack levels required when called:    8
  3873 ;; This function calls:
  3874 ;;		_initLCD
  3875 ;;		_lcdInst
  3876 ;;		_printf
  3877 ;; This function is called by:
  3878 ;;		_bottom_rocker_initial
  3879 ;;		_bottom_rocker_restore
  3880 ;;		_startSorting
  3881 ;; This function uses a non-reentrant model
  3882 ;;
  3883                           
  3884                           	psect	text20
  3885  000C92                     __ptext20:
  3886                           	opt stack 0
  3887  000C92                     _bottom_rocker_idle:
  3888                           	opt stack 21
  3889                           
  3890                           ;bottom_rocker_fsm.c: 55: lcdInst(0b10000000);;
  3891                           
  3892                           ; BSR set to: 0
  3893                           ;incstack = 0
  3894  000C92  0E80               	movlw	128
  3895  000C94  EC14  F011         	call	_lcdInst
  3896                           
  3897                           ;bottom_rocker_fsm.c: 56: initLCD();
  3898  000C98  ECAF  F00E         	call	_initLCD	;wreg free
  3899                           
  3900                           ;bottom_rocker_fsm.c: 57: printf("bottom idle");
  3901  000C9C  0EA1               	movlw	low STR_2
  3902  000C9E  0100               	movlb	0	; () banked
  3903  000CA0  6FBF               	movwf	printf@f& (0+255),b
  3904  000CA2  0EFF               	movlw	high STR_2
  3905  000CA4  0100               	movlb	0	; () banked
  3906  000CA6  6FC0               	movwf	(printf@f+1)& (0+255),b
  3907  000CA8  EC09  F000         	call	_printf	;wreg free
  3908                           
  3909                           ;bottom_rocker_fsm.c: 58: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4
      +                          000.0)));};
  3910  000CAC  0E00               	movlw	0
  3911  000CAE  0100               	movlb	0	; () banked
  3912  000CB0  6FD7               	movwf	bottom_rocker_idle@i& (0+255),b
  3913  000CB2                     l5033:
  3914                           
  3915                           ; BSR set to: 0
  3916  000CB2  0E09               	movlw	9
  3917  000CB4  0100               	movlb	0	; () banked
  3918  000CB6  65D7               	cpfsgt	bottom_rocker_idle@i& (0+255),b
  3919  000CB8  D001               	goto	l5037
  3920  000CBA  D010               	goto	l91
  3921  000CBC                     l5037:
  3922                           
  3923                           ; BSR set to: 0
  3924  000CBC  0E02               	movlw	2
  3925  000CBE  0100               	movlb	0	; () banked
  3926  000CC0  6FD6               	movwf	(??_bottom_rocker_idle+1)& (0+255),b
  3927  000CC2  0E3F               	movlw	63
  3928  000CC4  0100               	movlb	0	; () banked
  3929  000CC6  6FD5               	movwf	??_bottom_rocker_idle& (0+255),b
  3930  000CC8  0E2B               	movlw	43
  3931  000CCA                     u5377:
  3932  000CCA  2EE8               	decfsz	wreg,f,c
  3933  000CCC  D7FE               	bra	u5377
  3934  000CCE  2FD5               	decfsz	??_bottom_rocker_idle& (0+255),f,b
  3935  000CD0  D7FC               	bra	u5377
  3936  000CD2  2FD6               	decfsz	(??_bottom_rocker_idle+1)& (0+255),f,b
  3937  000CD4  D7FA               	bra	u5377
  3938  000CD6  0100               	movlb	0	; () banked
  3939  000CD8  2BD7               	incf	bottom_rocker_idle@i& (0+255),f,b
  3940  000CDA  D7EB               	goto	l5033
  3941  000CDC                     l91:
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;bottom_rocker_fsm.c: 60: if( PORTAbits.RA1 == 1){
  3945  000CDC  A280               	btfss	3968,1,c	;volatile
  3946  000CDE  D028               	goto	l5059
  3947                           
  3948                           ; BSR set to: 0
  3949                           ;bottom_rocker_fsm.c: 61: fsm2++;
  3950  000CE0  0100               	movlb	0	; () banked
  3951  000CE2  4BA3               	infsnz	_fsm2& (0+255),f,b
  3952  000CE4  2BA4               	incf	(_fsm2+1)& (0+255),f,b
  3953                           
  3954                           ; BSR set to: 0
  3955                           ;bottom_rocker_fsm.c: 64: lcdInst(0b10000000);;
  3956  000CE6  0E80               	movlw	128
  3957  000CE8  EC14  F011         	call	_lcdInst
  3958                           
  3959                           ;bottom_rocker_fsm.c: 65: initLCD();
  3960  000CEC  ECAF  F00E         	call	_initLCD	;wreg free
  3961                           
  3962                           ;bottom_rocker_fsm.c: 66: printf("Bottom No Can");
  3963  000CF0  0E3B               	movlw	low STR_3
  3964  000CF2  0100               	movlb	0	; () banked
  3965  000CF4  6FBF               	movwf	printf@f& (0+255),b
  3966  000CF6  0EFF               	movlw	high STR_3
  3967  000CF8  0100               	movlb	0	; () banked
  3968  000CFA  6FC0               	movwf	(printf@f+1)& (0+255),b
  3969  000CFC  EC09  F000         	call	_printf	;wreg free
  3970                           
  3971                           ;bottom_rocker_fsm.c: 67: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4
      +                          000.0)));};
  3972  000D00  0E00               	movlw	0
  3973  000D02  0100               	movlb	0	; () banked
  3974  000D04  6FD8               	movwf	bottom_rocker_idle@i_271& (0+255),b
  3975  000D06                     l5051:
  3976                           
  3977                           ; BSR set to: 0
  3978  000D06  0E09               	movlw	9
  3979  000D08  0100               	movlb	0	; () banked
  3980  000D0A  65D8               	cpfsgt	bottom_rocker_idle@i_271& (0+255),b
  3981  000D0C  D001               	goto	l5055
  3982  000D0E  0012               	return	
  3983  000D10                     l5055:
  3984                           
  3985                           ; BSR set to: 0
  3986  000D10  0E02               	movlw	2
  3987  000D12  0100               	movlb	0	; () banked
  3988  000D14  6FD6               	movwf	(??_bottom_rocker_idle+1)& (0+255),b
  3989  000D16  0E3F               	movlw	63
  3990  000D18  0100               	movlb	0	; () banked
  3991  000D1A  6FD5               	movwf	??_bottom_rocker_idle& (0+255),b
  3992  000D1C  0E2B               	movlw	43
  3993  000D1E                     u5387:
  3994  000D1E  2EE8               	decfsz	wreg,f,c
  3995  000D20  D7FE               	bra	u5387
  3996  000D22  2FD5               	decfsz	??_bottom_rocker_idle& (0+255),f,b
  3997  000D24  D7FC               	bra	u5387
  3998  000D26  2FD6               	decfsz	(??_bottom_rocker_idle+1)& (0+255),f,b
  3999  000D28  D7FA               	bra	u5387
  4000  000D2A  0100               	movlb	0	; () banked
  4001  000D2C  2BD8               	incf	bottom_rocker_idle@i_271& (0+255),f,b
  4002  000D2E  D7EB               	goto	l5051
  4003  000D30                     l5059:
  4004                           
  4005                           ; BSR set to: 0
  4006                           ;bottom_rocker_fsm.c: 73: lcdInst(0b10000000);;
  4007  000D30  0E80               	movlw	128
  4008  000D32  EC14  F011         	call	_lcdInst
  4009                           
  4010                           ;bottom_rocker_fsm.c: 74: initLCD();
  4011  000D36  ECAF  F00E         	call	_initLCD	;wreg free
  4012                           
  4013                           ;bottom_rocker_fsm.c: 75: printf("bottom Detected");
  4014  000D3A  0EC4               	movlw	low STR_4
  4015  000D3C  0100               	movlb	0	; () banked
  4016  000D3E  6FBF               	movwf	printf@f& (0+255),b
  4017  000D40  0EFE               	movlw	high STR_4
  4018  000D42  0100               	movlb	0	; () banked
  4019  000D44  6FC0               	movwf	(printf@f+1)& (0+255),b
  4020  000D46  EC09  F000         	call	_printf	;wreg free
  4021                           
  4022                           ;bottom_rocker_fsm.c: 76: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4
      +                          000.0)));};
  4023  000D4A  0E00               	movlw	0
  4024  000D4C  0100               	movlb	0	; () banked
  4025  000D4E  6FD9               	movwf	bottom_rocker_idle@i_273& (0+255),b
  4026  000D50                     l5065:
  4027                           
  4028                           ; BSR set to: 0
  4029  000D50  0E09               	movlw	9
  4030  000D52  0100               	movlb	0	; () banked
  4031  000D54  65D9               	cpfsgt	bottom_rocker_idle@i_273& (0+255),b
  4032  000D56  D001               	goto	l5069
  4033  000D58  D010               	goto	l5073
  4034  000D5A                     l5069:
  4035                           
  4036                           ; BSR set to: 0
  4037  000D5A  0E02               	movlw	2
  4038  000D5C  0100               	movlb	0	; () banked
  4039  000D5E  6FD6               	movwf	(??_bottom_rocker_idle+1)& (0+255),b
  4040  000D60  0E3F               	movlw	63
  4041  000D62  0100               	movlb	0	; () banked
  4042  000D64  6FD5               	movwf	??_bottom_rocker_idle& (0+255),b
  4043  000D66  0E2B               	movlw	43
  4044  000D68                     u5397:
  4045  000D68  2EE8               	decfsz	wreg,f,c
  4046  000D6A  D7FE               	bra	u5397
  4047  000D6C  2FD5               	decfsz	??_bottom_rocker_idle& (0+255),f,b
  4048  000D6E  D7FC               	bra	u5397
  4049  000D70  2FD6               	decfsz	(??_bottom_rocker_idle+1)& (0+255),f,b
  4050  000D72  D7FA               	bra	u5397
  4051  000D74  0100               	movlb	0	; () banked
  4052  000D76  2BD9               	incf	bottom_rocker_idle@i_273& (0+255),f,b
  4053  000D78  D7EB               	goto	l5065
  4054  000D7A                     l5073:
  4055                           
  4056                           ; BSR set to: 0
  4057                           ;bottom_rocker_fsm.c: 79: fsm2 = 0;
  4058  000D7A  0E00               	movlw	0
  4059  000D7C  0100               	movlb	0	; () banked
  4060  000D7E  6FA4               	movwf	(_fsm2+1)& (0+255),b
  4061  000D80  0E00               	movlw	0
  4062  000D82  6FA3               	movwf	_fsm2& (0+255),b
  4063                           
  4064                           ;bottom_rocker_fsm.c: 81: labeled = PORTCbits.RC2;
  4065  000D84  A482               	btfss	3970,2,c	;volatile
  4066  000D86  D004               	goto	u4400
  4067  000D88  0100               	movlb	0	; () banked
  4068  000D8A  6BD5               	clrf	??_bottom_rocker_idle& (0+255),b
  4069  000D8C  2BD5               	incf	??_bottom_rocker_idle& (0+255),f,b
  4070  000D8E  D002               	goto	u4408
  4071  000D90                     u4400:
  4072  000D90  0100               	movlb	0	; () banked
  4073  000D92  6BD5               	clrf	??_bottom_rocker_idle& (0+255),b
  4074  000D94                     u4408:
  4075  000D94  0100               	movlb	0	; () banked
  4076  000D96  51D5               	movf	??_bottom_rocker_idle& (0+255),w,b
  4077  000D98  0100               	movlb	0	; () banked
  4078  000D9A  6FA1               	movwf	_labeled& (0+255),b
  4079  000D9C  6BA2               	clrf	(_labeled+1)& (0+255),b
  4080                           
  4081                           ; BSR set to: 0
  4082                           ;bottom_rocker_fsm.c: 83: if(labeled){
  4083  000D9E  0100               	movlb	0	; () banked
  4084  000DA0  51A1               	movf	_labeled& (0+255),w,b
  4085  000DA2  0100               	movlb	0	; () banked
  4086  000DA4  11A2               	iorwf	(_labeled+1)& (0+255),w,b
  4087  000DA6  B4D8               	btfsc	status,2,c
  4088  000DA8  D02D               	goto	l5097
  4089                           
  4090                           ; BSR set to: 0
  4091                           ;bottom_rocker_fsm.c: 84: bottom_move = 1;
  4092  000DAA  0E00               	movlw	0
  4093  000DAC  0100               	movlb	0	; () banked
  4094  000DAE  6FAE               	movwf	(_bottom_move+1)& (0+255),b
  4095  000DB0  0E01               	movlw	1
  4096  000DB2  6FAD               	movwf	_bottom_move& (0+255),b
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;bottom_rocker_fsm.c: 86: tin_can_label++;
  4100  000DB4  0100               	movlb	0	; () banked
  4101  000DB6  4B9F               	infsnz	_tin_can_label& (0+255),f,b
  4102  000DB8  2BA0               	incf	(_tin_can_label+1)& (0+255),f,b
  4103                           
  4104                           ; BSR set to: 0
  4105                           ;bottom_rocker_fsm.c: 89: lcdInst(0b10000000);;
  4106  000DBA  0E80               	movlw	128
  4107  000DBC  EC14  F011         	call	_lcdInst
  4108                           
  4109                           ;bottom_rocker_fsm.c: 90: initLCD();
  4110  000DC0  ECAF  F00E         	call	_initLCD	;wreg free
  4111                           
  4112                           ;bottom_rocker_fsm.c: 91: printf("labeled");
  4113  000DC4  0EE9               	movlw	low STR_5
  4114  000DC6  0100               	movlb	0	; () banked
  4115  000DC8  6FBF               	movwf	printf@f& (0+255),b
  4116  000DCA  0EFF               	movlw	high STR_5
  4117  000DCC  0100               	movlb	0	; () banked
  4118  000DCE  6FC0               	movwf	(printf@f+1)& (0+255),b
  4119  000DD0  EC09  F000         	call	_printf	;wreg free
  4120                           
  4121                           ;bottom_rocker_fsm.c: 92: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4
      +                          000.0)));};
  4122  000DD4  0E00               	movlw	0
  4123  000DD6  0100               	movlb	0	; () banked
  4124  000DD8  6FDA               	movwf	bottom_rocker_idle@i_283& (0+255),b
  4125  000DDA                     l5089:
  4126                           
  4127                           ; BSR set to: 0
  4128  000DDA  0E09               	movlw	9
  4129  000DDC  0100               	movlb	0	; () banked
  4130  000DDE  65DA               	cpfsgt	bottom_rocker_idle@i_283& (0+255),b
  4131  000DE0  D001               	goto	l5093
  4132  000DE2  D03D               	goto	l5117
  4133  000DE4                     l5093:
  4134                           
  4135                           ; BSR set to: 0
  4136  000DE4  0E02               	movlw	2
  4137  000DE6  0100               	movlb	0	; () banked
  4138  000DE8  6FD6               	movwf	(??_bottom_rocker_idle+1)& (0+255),b
  4139  000DEA  0E3F               	movlw	63
  4140  000DEC  0100               	movlb	0	; () banked
  4141  000DEE  6FD5               	movwf	??_bottom_rocker_idle& (0+255),b
  4142  000DF0  0E2B               	movlw	43
  4143  000DF2                     u5407:
  4144  000DF2  2EE8               	decfsz	wreg,f,c
  4145  000DF4  D7FE               	bra	u5407
  4146  000DF6  2FD5               	decfsz	??_bottom_rocker_idle& (0+255),f,b
  4147  000DF8  D7FC               	bra	u5407
  4148  000DFA  2FD6               	decfsz	(??_bottom_rocker_idle+1)& (0+255),f,b
  4149  000DFC  D7FA               	bra	u5407
  4150  000DFE  0100               	movlb	0	; () banked
  4151  000E00  2BDA               	incf	bottom_rocker_idle@i_283& (0+255),f,b
  4152  000E02  D7EB               	goto	l5089
  4153  000E04                     l5097:
  4154                           
  4155                           ; BSR set to: 0
  4156                           ;bottom_rocker_fsm.c: 96: bottom_move = 0;
  4157  000E04  0E00               	movlw	0
  4158  000E06  0100               	movlb	0	; () banked
  4159  000E08  6FAE               	movwf	(_bottom_move+1)& (0+255),b
  4160  000E0A  0E00               	movlw	0
  4161  000E0C  6FAD               	movwf	_bottom_move& (0+255),b
  4162                           
  4163                           ; BSR set to: 0
  4164                           ;bottom_rocker_fsm.c: 97: tin_can++;
  4165  000E0E  0100               	movlb	0	; () banked
  4166  000E10  4B9D               	infsnz	_tin_can& (0+255),f,b
  4167  000E12  2B9E               	incf	(_tin_can+1)& (0+255),f,b
  4168                           
  4169                           ; BSR set to: 0
  4170                           ;bottom_rocker_fsm.c: 100: lcdInst(0b10000000);;
  4171  000E14  0E80               	movlw	128
  4172  000E16  EC14  F011         	call	_lcdInst
  4173                           
  4174                           ;bottom_rocker_fsm.c: 101: initLCD();
  4175  000E1A  ECAF  F00E         	call	_initLCD	;wreg free
  4176                           
  4177                           ;bottom_rocker_fsm.c: 102: printf("No label");
  4178  000E1E  0EE0               	movlw	low STR_6
  4179  000E20  0100               	movlb	0	; () banked
  4180  000E22  6FBF               	movwf	printf@f& (0+255),b
  4181  000E24  0EFF               	movlw	high STR_6
  4182  000E26  0100               	movlb	0	; () banked
  4183  000E28  6FC0               	movwf	(printf@f+1)& (0+255),b
  4184  000E2A  EC09  F000         	call	_printf	;wreg free
  4185                           
  4186                           ;bottom_rocker_fsm.c: 103: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/
      +                          4000.0)));};
  4187  000E2E  0E00               	movlw	0
  4188  000E30  0100               	movlb	0	; () banked
  4189  000E32  6FDB               	movwf	bottom_rocker_idle@i_285& (0+255),b
  4190  000E34                     l5109:
  4191                           
  4192                           ; BSR set to: 0
  4193  000E34  0E09               	movlw	9
  4194  000E36  0100               	movlb	0	; () banked
  4195  000E38  65DB               	cpfsgt	bottom_rocker_idle@i_285& (0+255),b
  4196  000E3A  D001               	goto	l5113
  4197  000E3C  D010               	goto	l5117
  4198  000E3E                     l5113:
  4199                           
  4200                           ; BSR set to: 0
  4201  000E3E  0E02               	movlw	2
  4202  000E40  0100               	movlb	0	; () banked
  4203  000E42  6FD6               	movwf	(??_bottom_rocker_idle+1)& (0+255),b
  4204  000E44  0E3F               	movlw	63
  4205  000E46  0100               	movlb	0	; () banked
  4206  000E48  6FD5               	movwf	??_bottom_rocker_idle& (0+255),b
  4207  000E4A  0E2B               	movlw	43
  4208  000E4C                     u5417:
  4209  000E4C  2EE8               	decfsz	wreg,f,c
  4210  000E4E  D7FE               	bra	u5417
  4211  000E50  2FD5               	decfsz	??_bottom_rocker_idle& (0+255),f,b
  4212  000E52  D7FC               	bra	u5417
  4213  000E54  2FD6               	decfsz	(??_bottom_rocker_idle+1)& (0+255),f,b
  4214  000E56  D7FA               	bra	u5417
  4215  000E58  0100               	movlb	0	; () banked
  4216  000E5A  2BDB               	incf	bottom_rocker_idle@i_285& (0+255),f,b
  4217  000E5C  D7EB               	goto	l5109
  4218  000E5E                     l5117:
  4219                           
  4220                           ; BSR set to: 0
  4221                           ;bottom_rocker_fsm.c: 105: }
  4222                           ;bottom_rocker_fsm.c: 109: bottomRockerState = bottom_rocker_release;
  4223  000E5E  0ECC               	movlw	low _bottom_rocker_release
  4224  000E60  0100               	movlb	0	; () banked
  4225  000E62  6FA5               	movwf	_bottomRockerState& (0+255),b
  4226  000E64  0E19               	movlw	high _bottom_rocker_release
  4227  000E66  0100               	movlb	0	; () banked
  4228  000E68  6FA6               	movwf	(_bottomRockerState+1)& (0+255),b
  4229                           
  4230                           ; BSR set to: 0
  4231  000E6A  0012               	return	
  4232  000E6C                     __end_of_bottom_rocker_idle:
  4233                           	opt stack 0
  4234                           tosu	equ	0xFFF
  4235                           tosh	equ	0xFFE
  4236                           tosl	equ	0xFFD
  4237                           pclath	equ	0xFFA
  4238                           intcon	equ	0xFF2
  4239                           intcon3	equ	0xFF0
  4240                           postinc0	equ	0xFEE
  4241                           wreg	equ	0xFE8
  4242                           status	equ	0xFD8
  4243                           
  4244 ;; *************** function _bottom_rocker_restore *****************
  4245 ;; Defined at:
  4246 ;;		line 136 in file "bottom_rocker_fsm.c"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;		None
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;  i               1   38[BANK0 ] unsigned char 
  4251 ;; Return value:  Size  Location     Type
  4252 ;;                  1    wreg      void 
  4253 ;; Registers used:
  4254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4255 ;; Tracked objects:
  4256 ;;		On entry : 0/0
  4257 ;;		On exit  : 0/0
  4258 ;;		Unchanged: 0/0
  4259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4263 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4264 ;;Total ram usage:        3 bytes
  4265 ;; Hardware stack levels used:    1
  4266 ;; Hardware stack levels required when called:    8
  4267 ;; This function calls:
  4268 ;;		_bottom_rocker_motor_cw
  4269 ;;		_initLCD
  4270 ;;		_lcdInst
  4271 ;;		_printf
  4272 ;; This function is called by:
  4273 ;;		_bottom_rocker_release
  4274 ;;		_startSorting
  4275 ;; This function uses a non-reentrant model
  4276 ;;
  4277                           
  4278                           	psect	text21
  4279  001BB2                     __ptext21:
  4280                           	opt stack 0
  4281  001BB2                     _bottom_rocker_restore:
  4282                           	opt stack 21
  4283                           
  4284                           ;bottom_rocker_fsm.c: 139: lcdInst(0b10000000);;
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;incstack = 0
  4288  001BB2  0E80               	movlw	128
  4289  001BB4  EC14  F011         	call	_lcdInst
  4290                           
  4291                           ;bottom_rocker_fsm.c: 140: initLCD();
  4292  001BB8  ECAF  F00E         	call	_initLCD	;wreg free
  4293                           
  4294                           ;bottom_rocker_fsm.c: 141: printf("bottom restore");
  4295  001BBC  0E01               	movlw	low STR_8
  4296  001BBE  0100               	movlb	0	; () banked
  4297  001BC0  6FBF               	movwf	printf@f& (0+255),b
  4298  001BC2  0EFF               	movlw	high STR_8
  4299  001BC4  0100               	movlb	0	; () banked
  4300  001BC6  6FC0               	movwf	(printf@f+1)& (0+255),b
  4301  001BC8  EC09  F000         	call	_printf	;wreg free
  4302                           
  4303                           ;bottom_rocker_fsm.c: 142: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/
      +                          4000.0)));};
  4304  001BCC  0E00               	movlw	0
  4305  001BCE  0100               	movlb	0	; () banked
  4306  001BD0  6FD7               	movwf	bottom_rocker_restore@i& (0+255),b
  4307  001BD2                     l5149:
  4308                           
  4309                           ; BSR set to: 0
  4310  001BD2  0E09               	movlw	9
  4311  001BD4  0100               	movlb	0	; () banked
  4312  001BD6  65D7               	cpfsgt	bottom_rocker_restore@i& (0+255),b
  4313  001BD8  D001               	goto	l5153
  4314  001BDA  D010               	goto	l5157
  4315  001BDC                     l5153:
  4316                           
  4317                           ; BSR set to: 0
  4318  001BDC  0E02               	movlw	2
  4319  001BDE  0100               	movlb	0	; () banked
  4320  001BE0  6FD6               	movwf	(??_bottom_rocker_restore+1)& (0+255),b
  4321  001BE2  0E3F               	movlw	63
  4322  001BE4  0100               	movlb	0	; () banked
  4323  001BE6  6FD5               	movwf	??_bottom_rocker_restore& (0+255),b
  4324  001BE8  0E2B               	movlw	43
  4325  001BEA                     u5427:
  4326  001BEA  2EE8               	decfsz	wreg,f,c
  4327  001BEC  D7FE               	bra	u5427
  4328  001BEE  2FD5               	decfsz	??_bottom_rocker_restore& (0+255),f,b
  4329  001BF0  D7FC               	bra	u5427
  4330  001BF2  2FD6               	decfsz	(??_bottom_rocker_restore+1)& (0+255),f,b
  4331  001BF4  D7FA               	bra	u5427
  4332  001BF6  0100               	movlb	0	; () banked
  4333  001BF8  2BD7               	incf	bottom_rocker_restore@i& (0+255),f,b
  4334  001BFA  D7EB               	goto	l5149
  4335  001BFC                     l5157:
  4336                           
  4337                           ; BSR set to: 0
  4338                           ;bottom_rocker_fsm.c: 145: bottom_rocker_motor_cw();
  4339  001BFC  EC04  F010         	call	_bottom_rocker_motor_cw	;wreg free
  4340                           
  4341                           ;bottom_rocker_fsm.c: 148: bottomRockerState = bottom_rocker_idle;
  4342  001C00  0E92               	movlw	low _bottom_rocker_idle
  4343  001C02  0100               	movlb	0	; () banked
  4344  001C04  6FA5               	movwf	_bottomRockerState& (0+255),b
  4345  001C06  0E0C               	movlw	high _bottom_rocker_idle
  4346  001C08  0100               	movlb	0	; () banked
  4347  001C0A  6FA6               	movwf	(_bottomRockerState+1)& (0+255),b
  4348  001C0C  0012               	return	
  4349  001C0E                     __end_of_bottom_rocker_restore:
  4350                           	opt stack 0
  4351                           tosu	equ	0xFFF
  4352                           tosh	equ	0xFFE
  4353                           tosl	equ	0xFFD
  4354                           pclath	equ	0xFFA
  4355                           intcon	equ	0xFF2
  4356                           intcon3	equ	0xFF0
  4357                           postinc0	equ	0xFEE
  4358                           wreg	equ	0xFE8
  4359                           status	equ	0xFD8
  4360                           
  4361 ;; *************** function _bottom_rocker_motor_cw *****************
  4362 ;; Defined at:
  4363 ;;		line 63 in file "motors.c"
  4364 ;; Parameters:    Size  Location     Type
  4365 ;;		None
  4366 ;; Auto vars:     Size  Location     Type
  4367 ;;		None
  4368 ;; Return value:  Size  Location     Type
  4369 ;;                  1    wreg      void 
  4370 ;; Registers used:
  4371 ;;		wreg
  4372 ;; Tracked objects:
  4373 ;;		On entry : 0/0
  4374 ;;		On exit  : 0/0
  4375 ;;		Unchanged: 0/0
  4376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4379 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4380 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4381 ;;Total ram usage:        2 bytes
  4382 ;; Hardware stack levels used:    1
  4383 ;; Hardware stack levels required when called:    5
  4384 ;; This function calls:
  4385 ;;		Nothing
  4386 ;; This function is called by:
  4387 ;;		_bottom_rocker_restore
  4388 ;; This function uses a non-reentrant model
  4389 ;;
  4390                           
  4391                           	psect	text22
  4392  002008                     __ptext22:
  4393                           	opt stack 0
  4394  002008                     _bottom_rocker_motor_cw:
  4395                           	opt stack 23
  4396                           
  4397                           ;motors.c: 66: LATBbits.LATB2 = 0;
  4398                           
  4399                           ; BSR set to: 0
  4400                           ;incstack = 0
  4401  002008  948A               	bcf	3978,2,c	;volatile
  4402                           
  4403                           ;motors.c: 67: LATBbits.LATB3 = 1;
  4404  00200A  868A               	bsf	3978,3,c	;volatile
  4405                           
  4406                           ;motors.c: 68: _delay((unsigned long)((500)*(10000000/4000.0)));
  4407  00200C  0E07               	movlw	7
  4408  00200E  0100               	movlb	0	; () banked
  4409  002010  6FB2               	movwf	(??_bottom_rocker_motor_cw+1)& (0+255),b
  4410  002012  0E58               	movlw	88
  4411  002014  0100               	movlb	0	; () banked
  4412  002016  6FB1               	movwf	??_bottom_rocker_motor_cw& (0+255),b
  4413  002018  0E59               	movlw	89
  4414  00201A                     u5437:
  4415  00201A  2EE8               	decfsz	wreg,f,c
  4416  00201C  D7FE               	bra	u5437
  4417  00201E  2FB1               	decfsz	??_bottom_rocker_motor_cw& (0+255),f,b
  4418  002020  D7FC               	bra	u5437
  4419  002022  2FB2               	decfsz	(??_bottom_rocker_motor_cw+1)& (0+255),f,b
  4420  002024  D7FA               	bra	u5437
  4421  002026  D000               	nop2	
  4422                           
  4423                           ;motors.c: 71: LATBbits.LATB2 = 0;
  4424  002028  948A               	bcf	3978,2,c	;volatile
  4425                           
  4426                           ;motors.c: 72: LATBbits.LATB3 = 0;
  4427  00202A  968A               	bcf	3978,3,c	;volatile
  4428  00202C  0012               	return	
  4429  00202E                     __end_of_bottom_rocker_motor_cw:
  4430                           	opt stack 0
  4431                           tosu	equ	0xFFF
  4432                           tosh	equ	0xFFE
  4433                           tosl	equ	0xFFD
  4434                           pclath	equ	0xFFA
  4435                           intcon	equ	0xFF2
  4436                           intcon3	equ	0xFF0
  4437                           postinc0	equ	0xFEE
  4438                           wreg	equ	0xFE8
  4439                           status	equ	0xFD8
  4440                           
  4441 ;; *************** function _bottom_rocker_motor_ccw *****************
  4442 ;; Defined at:
  4443 ;;		line 77 in file "motors.c"
  4444 ;; Parameters:    Size  Location     Type
  4445 ;;		None
  4446 ;; Auto vars:     Size  Location     Type
  4447 ;;		None
  4448 ;; Return value:  Size  Location     Type
  4449 ;;                  1    wreg      void 
  4450 ;; Registers used:
  4451 ;;		wreg
  4452 ;; Tracked objects:
  4453 ;;		On entry : 0/0
  4454 ;;		On exit  : 0/0
  4455 ;;		Unchanged: 0/0
  4456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4459 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4460 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4461 ;;Total ram usage:        2 bytes
  4462 ;; Hardware stack levels used:    1
  4463 ;; Hardware stack levels required when called:    5
  4464 ;; This function calls:
  4465 ;;		Nothing
  4466 ;; This function is called by:
  4467 ;;		_bottom_rocker_release
  4468 ;; This function uses a non-reentrant model
  4469 ;;
  4470                           
  4471                           	psect	text23
  4472  00202E                     __ptext23:
  4473                           	opt stack 0
  4474  00202E                     _bottom_rocker_motor_ccw:
  4475                           	opt stack 23
  4476                           
  4477                           ;motors.c: 80: LATBbits.LATB2 = 1;
  4478                           
  4479                           ;incstack = 0
  4480  00202E  848A               	bsf	3978,2,c	;volatile
  4481                           
  4482                           ;motors.c: 81: LATBbits.LATB3 = 0;
  4483  002030  968A               	bcf	3978,3,c	;volatile
  4484                           
  4485                           ;motors.c: 82: _delay((unsigned long)((500)*(10000000/4000.0)));
  4486  002032  0E07               	movlw	7
  4487  002034  0100               	movlb	0	; () banked
  4488  002036  6FB2               	movwf	(??_bottom_rocker_motor_ccw+1)& (0+255),b
  4489  002038  0E58               	movlw	88
  4490  00203A  0100               	movlb	0	; () banked
  4491  00203C  6FB1               	movwf	??_bottom_rocker_motor_ccw& (0+255),b
  4492  00203E  0E59               	movlw	89
  4493  002040                     u5447:
  4494  002040  2EE8               	decfsz	wreg,f,c
  4495  002042  D7FE               	bra	u5447
  4496  002044  2FB1               	decfsz	??_bottom_rocker_motor_ccw& (0+255),f,b
  4497  002046  D7FC               	bra	u5447
  4498  002048  2FB2               	decfsz	(??_bottom_rocker_motor_ccw+1)& (0+255),f,b
  4499  00204A  D7FA               	bra	u5447
  4500  00204C  D000               	nop2	
  4501                           
  4502                           ;motors.c: 85: LATBbits.LATB2 = 0;
  4503  00204E  948A               	bcf	3978,2,c	;volatile
  4504                           
  4505                           ;motors.c: 86: LATBbits.LATB3 = 0;
  4506  002050  968A               	bcf	3978,3,c	;volatile
  4507  002052  0012               	return	
  4508  002054                     __end_of_bottom_rocker_motor_ccw:
  4509                           	opt stack 0
  4510                           tosu	equ	0xFFF
  4511                           tosh	equ	0xFFE
  4512                           tosl	equ	0xFFD
  4513                           pclath	equ	0xFFA
  4514                           intcon	equ	0xFF2
  4515                           intcon3	equ	0xFF0
  4516                           postinc0	equ	0xFEE
  4517                           wreg	equ	0xFE8
  4518                           status	equ	0xFD8
  4519                           
  4520 ;; *************** function _bottom_distribution_move *****************
  4521 ;; Defined at:
  4522 ;;		line 106 in file "bottom_distribution_fsm.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;		None
  4525 ;; Auto vars:     Size  Location     Type
  4526 ;;		None
  4527 ;; Return value:  Size  Location     Type
  4528 ;;                  1    wreg      void 
  4529 ;; Registers used:
  4530 ;;		wreg, status,2, status,0, cstack
  4531 ;; Tracked objects:
  4532 ;;		On entry : 0/0
  4533 ;;		On exit  : 0/0
  4534 ;;		Unchanged: 0/0
  4535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4540 ;;Total ram usage:        0 bytes
  4541 ;; Hardware stack levels used:    1
  4542 ;; Hardware stack levels required when called:    6
  4543 ;; This function calls:
  4544 ;;		_bottom_distribution_motor_ccw
  4545 ;;		_bottom_distribution_motor_cw
  4546 ;; This function is called by:
  4547 ;;		_bottom_distribution_prepare
  4548 ;;		_startSorting
  4549 ;; This function uses a non-reentrant model
  4550 ;;
  4551                           
  4552                           	psect	text24
  4553  00210E                     __ptext24:
  4554                           	opt stack 0
  4555  00210E                     _bottom_distribution_move:
  4556                           	opt stack 23
  4557                           
  4558                           ;bottom_distribution_fsm.c: 119: if(bottom_move == 1){
  4559                           
  4560                           ;incstack = 0
  4561  00210E  0100               	movlb	0	; () banked
  4562  002110  05AD               	decf	_bottom_move& (0+255),w,b
  4563  002112  0100               	movlb	0	; () banked
  4564  002114  11AE               	iorwf	(_bottom_move+1)& (0+255),w,b
  4565  002116  A4D8               	btfss	status,2,c
  4566  002118  D003               	goto	l5021
  4567                           
  4568                           ; BSR set to: 0
  4569                           ;bottom_distribution_fsm.c: 121: bottom_distribution_motor_ccw();
  4570  00211A  EC3D  F010         	call	_bottom_distribution_motor_ccw	;wreg free
  4571                           
  4572                           ;bottom_distribution_fsm.c: 122: }else{
  4573  00211E  D002               	goto	l5023
  4574  002120                     l5021:
  4575                           
  4576                           ;bottom_distribution_fsm.c: 124: bottom_distribution_motor_cw();
  4577  002120  EC2A  F010         	call	_bottom_distribution_motor_cw	;wreg free
  4578  002124                     l5023:
  4579                           
  4580                           ;bottom_distribution_fsm.c: 125: }
  4581                           ;bottom_distribution_fsm.c: 128: bottomDistributionState = bottom_distribution_idle;
  4582  002124  0E0C               	movlw	low _bottom_distribution_idle
  4583  002126  0100               	movlb	0	; () banked
  4584  002128  6FA7               	movwf	_bottomDistributionState& (0+255),b
  4585  00212A  0E1F               	movlw	high _bottom_distribution_idle
  4586  00212C  0100               	movlb	0	; () banked
  4587  00212E  6FA8               	movwf	(_bottomDistributionState+1)& (0+255),b
  4588  002130  0012               	return	
  4589  002132                     __end_of_bottom_distribution_move:
  4590                           	opt stack 0
  4591                           tosu	equ	0xFFF
  4592                           tosh	equ	0xFFE
  4593                           tosl	equ	0xFFD
  4594                           pclath	equ	0xFFA
  4595                           intcon	equ	0xFF2
  4596                           intcon3	equ	0xFF0
  4597                           postinc0	equ	0xFEE
  4598                           wreg	equ	0xFE8
  4599                           status	equ	0xFD8
  4600                           
  4601 ;; *************** function _bottom_distribution_idle *****************
  4602 ;; Defined at:
  4603 ;;		line 45 in file "bottom_distribution_fsm.c"
  4604 ;; Parameters:    Size  Location     Type
  4605 ;;		None
  4606 ;; Auto vars:     Size  Location     Type
  4607 ;;		None
  4608 ;; Return value:  Size  Location     Type
  4609 ;;                  1    wreg      void 
  4610 ;; Registers used:
  4611 ;;		wreg, status,2, status,0
  4612 ;; Tracked objects:
  4613 ;;		On entry : 0/0
  4614 ;;		On exit  : 0/0
  4615 ;;		Unchanged: 0/0
  4616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4621 ;;Total ram usage:        0 bytes
  4622 ;; Hardware stack levels used:    1
  4623 ;; Hardware stack levels required when called:    5
  4624 ;; This function calls:
  4625 ;;		Nothing
  4626 ;; This function is called by:
  4627 ;;		_bottom_distribution_initial
  4628 ;;		_bottom_distribution_move
  4629 ;;		_startSorting
  4630 ;; This function uses a non-reentrant model
  4631 ;;
  4632                           
  4633                           	psect	text25
  4634  001F0C                     __ptext25:
  4635                           	opt stack 0
  4636  001F0C                     _bottom_distribution_idle:
  4637                           	opt stack 24
  4638                           
  4639                           ;bottom_distribution_fsm.c: 49: if(start_bottom_distribution ==1){
  4640                           
  4641                           ; BSR set to: 0
  4642                           ;incstack = 0
  4643  001F0C  0100               	movlb	0	; () banked
  4644  001F0E  05AF               	decf	_start_bottom_distribution& (0+255),w,b
  4645  001F10  0100               	movlb	0	; () banked
  4646  001F12  11B0               	iorwf	(_start_bottom_distribution+1)& (0+255),w,b
  4647  001F14  A4D8               	btfss	status,2,c
  4648  001F16  D00C               	goto	l5003
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;bottom_distribution_fsm.c: 59: bottomDistributionState = bottom_distribution_prepare;
  4652  001F18  0E32               	movlw	low _bottom_distribution_prepare
  4653  001F1A  0100               	movlb	0	; () banked
  4654  001F1C  6FA7               	movwf	_bottomDistributionState& (0+255),b
  4655  001F1E  0E21               	movlw	high _bottom_distribution_prepare
  4656  001F20  0100               	movlb	0	; () banked
  4657  001F22  6FA8               	movwf	(_bottomDistributionState+1)& (0+255),b
  4658                           
  4659                           ; BSR set to: 0
  4660                           ;bottom_distribution_fsm.c: 60: start_bottom_distribution = 0;
  4661  001F24  0E00               	movlw	0
  4662  001F26  0100               	movlb	0	; () banked
  4663  001F28  6FB0               	movwf	(_start_bottom_distribution+1)& (0+255),b
  4664  001F2A  0E00               	movlw	0
  4665  001F2C  6FAF               	movwf	_start_bottom_distribution& (0+255),b
  4666                           
  4667                           ;bottom_distribution_fsm.c: 62: }else{
  4668  001F2E  0012               	return	
  4669  001F30                     l5003:
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;bottom_distribution_fsm.c: 63: bottomDistributionState = bottom_distribution_idle;
  4673  001F30  0E0C               	movlw	low _bottom_distribution_idle
  4674  001F32  0100               	movlb	0	; () banked
  4675  001F34  6FA7               	movwf	_bottomDistributionState& (0+255),b
  4676  001F36  0E1F               	movlw	high _bottom_distribution_idle
  4677  001F38  0100               	movlb	0	; () banked
  4678  001F3A  6FA8               	movwf	(_bottomDistributionState+1)& (0+255),b
  4679                           
  4680                           ; BSR set to: 0
  4681  001F3C  0012               	return	
  4682  001F3E                     __end_of_bottom_distribution_idle:
  4683                           	opt stack 0
  4684                           tosu	equ	0xFFF
  4685                           tosh	equ	0xFFE
  4686                           tosl	equ	0xFFD
  4687                           pclath	equ	0xFFA
  4688                           intcon	equ	0xFF2
  4689                           intcon3	equ	0xFF0
  4690                           postinc0	equ	0xFEE
  4691                           wreg	equ	0xFE8
  4692                           status	equ	0xFD8
  4693                           
  4694 ;; *************** function _bottom_distribution_prepare *****************
  4695 ;; Defined at:
  4696 ;;		line 69 in file "bottom_distribution_fsm.c"
  4697 ;; Parameters:    Size  Location     Type
  4698 ;;		None
  4699 ;; Auto vars:     Size  Location     Type
  4700 ;;		None
  4701 ;; Return value:  Size  Location     Type
  4702 ;;                  1    wreg      void 
  4703 ;; Registers used:
  4704 ;;		wreg, status,2, status,0, cstack
  4705 ;; Tracked objects:
  4706 ;;		On entry : 0/0
  4707 ;;		On exit  : 0/0
  4708 ;;		Unchanged: 0/0
  4709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4714 ;;Total ram usage:        0 bytes
  4715 ;; Hardware stack levels used:    1
  4716 ;; Hardware stack levels required when called:    6
  4717 ;; This function calls:
  4718 ;;		_bottom_distribution_motor_ccw
  4719 ;;		_bottom_distribution_motor_cw
  4720 ;; This function is called by:
  4721 ;;		_bottom_distribution_idle
  4722 ;;		_startSorting
  4723 ;; This function uses a non-reentrant model
  4724 ;;
  4725                           
  4726                           	psect	text26
  4727  002132                     __ptext26:
  4728                           	opt stack 0
  4729  002132                     _bottom_distribution_prepare:
  4730                           	opt stack 23
  4731                           
  4732                           ;bottom_distribution_fsm.c: 72: if(bottom_move == 1){
  4733                           
  4734                           ; BSR set to: 0
  4735                           ;incstack = 0
  4736  002132  0100               	movlb	0	; () banked
  4737  002134  05AD               	decf	_bottom_move& (0+255),w,b
  4738  002136  0100               	movlb	0	; () banked
  4739  002138  11AE               	iorwf	(_bottom_move+1)& (0+255),w,b
  4740  00213A  A4D8               	btfss	status,2,c
  4741  00213C  D003               	goto	l5011
  4742                           
  4743                           ; BSR set to: 0
  4744                           ;bottom_distribution_fsm.c: 82: bottom_distribution_motor_cw();
  4745  00213E  EC2A  F010         	call	_bottom_distribution_motor_cw	;wreg free
  4746                           
  4747                           ;bottom_distribution_fsm.c: 84: }else{
  4748  002142  D002               	goto	l5013
  4749  002144                     l5011:
  4750                           
  4751                           ;bottom_distribution_fsm.c: 96: bottom_distribution_motor_ccw();
  4752  002144  EC3D  F010         	call	_bottom_distribution_motor_ccw	;wreg free
  4753  002148                     l5013:
  4754                           
  4755                           ;bottom_distribution_fsm.c: 98: }
  4756                           ;bottom_distribution_fsm.c: 101: bottomDistributionState = bottom_distribution_move;
  4757  002148  0E0E               	movlw	low _bottom_distribution_move
  4758  00214A  0100               	movlb	0	; () banked
  4759  00214C  6FA7               	movwf	_bottomDistributionState& (0+255),b
  4760  00214E  0E21               	movlw	high _bottom_distribution_move
  4761  002150  0100               	movlb	0	; () banked
  4762  002152  6FA8               	movwf	(_bottomDistributionState+1)& (0+255),b
  4763  002154  0012               	return	
  4764  002156                     __end_of_bottom_distribution_prepare:
  4765                           	opt stack 0
  4766                           tosu	equ	0xFFF
  4767                           tosh	equ	0xFFE
  4768                           tosl	equ	0xFFD
  4769                           pclath	equ	0xFFA
  4770                           intcon	equ	0xFF2
  4771                           intcon3	equ	0xFF0
  4772                           postinc0	equ	0xFEE
  4773                           wreg	equ	0xFE8
  4774                           status	equ	0xFD8
  4775                           
  4776 ;; *************** function _bottom_distribution_motor_cw *****************
  4777 ;; Defined at:
  4778 ;;		line 121 in file "motors.c"
  4779 ;; Parameters:    Size  Location     Type
  4780 ;;		None
  4781 ;; Auto vars:     Size  Location     Type
  4782 ;;		None
  4783 ;; Return value:  Size  Location     Type
  4784 ;;                  1    wreg      void 
  4785 ;; Registers used:
  4786 ;;		wreg
  4787 ;; Tracked objects:
  4788 ;;		On entry : 0/0
  4789 ;;		On exit  : 0/0
  4790 ;;		Unchanged: 0/0
  4791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4794 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4795 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4796 ;;Total ram usage:        2 bytes
  4797 ;; Hardware stack levels used:    1
  4798 ;; Hardware stack levels required when called:    5
  4799 ;; This function calls:
  4800 ;;		Nothing
  4801 ;; This function is called by:
  4802 ;;		_bottom_distribution_prepare
  4803 ;;		_bottom_distribution_move
  4804 ;; This function uses a non-reentrant model
  4805 ;;
  4806                           
  4807                           	psect	text27
  4808  002054                     __ptext27:
  4809                           	opt stack 0
  4810  002054                     _bottom_distribution_motor_cw:
  4811                           	opt stack 23
  4812                           
  4813                           ;motors.c: 124: LATEbits.LATE1 = 0;
  4814                           
  4815                           ; BSR set to: 0
  4816                           ;incstack = 0
  4817  002054  928D               	bcf	3981,1,c	;volatile
  4818                           
  4819                           ;motors.c: 125: LATEbits.LATE2 = 1;
  4820  002056  848D               	bsf	3981,2,c	;volatile
  4821                           
  4822                           ;motors.c: 126: _delay((unsigned long)((200)*(10000000/4000.0)));
  4823  002058  0E03               	movlw	3
  4824  00205A  0100               	movlb	0	; () banked
  4825  00205C  6FB2               	movwf	(??_bottom_distribution_motor_cw+1)& (0+255),b
  4826  00205E  0E8A               	movlw	138
  4827  002060  0100               	movlb	0	; () banked
  4828  002062  6FB1               	movwf	??_bottom_distribution_motor_cw& (0+255),b
  4829  002064  0E55               	movlw	85
  4830  002066                     u5457:
  4831  002066  2EE8               	decfsz	wreg,f,c
  4832  002068  D7FE               	bra	u5457
  4833  00206A  2FB1               	decfsz	??_bottom_distribution_motor_cw& (0+255),f,b
  4834  00206C  D7FC               	bra	u5457
  4835  00206E  2FB2               	decfsz	(??_bottom_distribution_motor_cw+1)& (0+255),f,b
  4836  002070  D7FA               	bra	u5457
  4837  002072  D000               	nop2	
  4838                           
  4839                           ;motors.c: 129: LATEbits.LATE1 = 0;
  4840  002074  928D               	bcf	3981,1,c	;volatile
  4841                           
  4842                           ;motors.c: 130: LATEbits.LATE2 = 0;
  4843  002076  948D               	bcf	3981,2,c	;volatile
  4844  002078  0012               	return	
  4845  00207A                     __end_of_bottom_distribution_motor_cw:
  4846                           	opt stack 0
  4847                           tosu	equ	0xFFF
  4848                           tosh	equ	0xFFE
  4849                           tosl	equ	0xFFD
  4850                           pclath	equ	0xFFA
  4851                           intcon	equ	0xFF2
  4852                           intcon3	equ	0xFF0
  4853                           postinc0	equ	0xFEE
  4854                           wreg	equ	0xFE8
  4855                           status	equ	0xFD8
  4856                           
  4857 ;; *************** function _bottom_distribution_motor_ccw *****************
  4858 ;; Defined at:
  4859 ;;		line 135 in file "motors.c"
  4860 ;; Parameters:    Size  Location     Type
  4861 ;;		None
  4862 ;; Auto vars:     Size  Location     Type
  4863 ;;		None
  4864 ;; Return value:  Size  Location     Type
  4865 ;;                  1    wreg      void 
  4866 ;; Registers used:
  4867 ;;		wreg
  4868 ;; Tracked objects:
  4869 ;;		On entry : 0/0
  4870 ;;		On exit  : 0/0
  4871 ;;		Unchanged: 0/0
  4872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4875 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4876 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4877 ;;Total ram usage:        2 bytes
  4878 ;; Hardware stack levels used:    1
  4879 ;; Hardware stack levels required when called:    5
  4880 ;; This function calls:
  4881 ;;		Nothing
  4882 ;; This function is called by:
  4883 ;;		_bottom_distribution_prepare
  4884 ;;		_bottom_distribution_move
  4885 ;; This function uses a non-reentrant model
  4886 ;;
  4887                           
  4888                           	psect	text28
  4889  00207A                     __ptext28:
  4890                           	opt stack 0
  4891  00207A                     _bottom_distribution_motor_ccw:
  4892                           	opt stack 23
  4893                           
  4894                           ;motors.c: 138: LATEbits.LATE1 = 1;
  4895                           
  4896                           ;incstack = 0
  4897  00207A  828D               	bsf	3981,1,c	;volatile
  4898                           
  4899                           ;motors.c: 139: LATEbits.LATE2 = 0;
  4900  00207C  948D               	bcf	3981,2,c	;volatile
  4901                           
  4902                           ;motors.c: 140: _delay((unsigned long)((200)*(10000000/4000.0)));
  4903  00207E  0E03               	movlw	3
  4904  002080  0100               	movlb	0	; () banked
  4905  002082  6FB2               	movwf	(??_bottom_distribution_motor_ccw+1)& (0+255),b
  4906  002084  0E8A               	movlw	138
  4907  002086  0100               	movlb	0	; () banked
  4908  002088  6FB1               	movwf	??_bottom_distribution_motor_ccw& (0+255),b
  4909  00208A  0E55               	movlw	85
  4910  00208C                     u5467:
  4911  00208C  2EE8               	decfsz	wreg,f,c
  4912  00208E  D7FE               	bra	u5467
  4913  002090  2FB1               	decfsz	??_bottom_distribution_motor_ccw& (0+255),f,b
  4914  002092  D7FC               	bra	u5467
  4915  002094  2FB2               	decfsz	(??_bottom_distribution_motor_ccw+1)& (0+255),f,b
  4916  002096  D7FA               	bra	u5467
  4917  002098  D000               	nop2	
  4918                           
  4919                           ;motors.c: 143: LATEbits.LATE1 = 0;
  4920  00209A  928D               	bcf	3981,1,c	;volatile
  4921                           
  4922                           ;motors.c: 144: LATEbits.LATE2 = 0;
  4923  00209C  948D               	bcf	3981,2,c	;volatile
  4924  00209E  0012               	return	
  4925  0020A0                     __end_of_bottom_distribution_motor_ccw:
  4926                           	opt stack 0
  4927                           tosu	equ	0xFFF
  4928                           tosh	equ	0xFFE
  4929                           tosl	equ	0xFFD
  4930                           pclath	equ	0xFFA
  4931                           intcon	equ	0xFF2
  4932                           intcon3	equ	0xFF0
  4933                           postinc0	equ	0xFEE
  4934                           wreg	equ	0xFE8
  4935                           status	equ	0xFD8
  4936                           
  4937 ;; *************** function _standby *****************
  4938 ;; Defined at:
  4939 ;;		line 29 in file "operation.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;		None
  4942 ;; Auto vars:     Size  Location     Type
  4943 ;;  i               1   40[BANK0 ] unsigned char 
  4944 ;;  i               1   41[BANK0 ] unsigned char 
  4945 ;;  keypress_tem    1   39[BANK0 ] unsigned char 
  4946 ;;  keypress        1   38[BANK0 ] unsigned char 
  4947 ;; Return value:  Size  Location     Type
  4948 ;;                  1    wreg      void 
  4949 ;; Registers used:
  4950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4951 ;; Tracked objects:
  4952 ;;		On entry : 0/0
  4953 ;;		On exit  : 0/0
  4954 ;;		Unchanged: 0/0
  4955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4957 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4958 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4959 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4960 ;;Total ram usage:        6 bytes
  4961 ;; Hardware stack levels used:    1
  4962 ;; Hardware stack levels required when called:    8
  4963 ;; This function calls:
  4964 ;;		_I2C_Master_Read
  4965 ;;		_I2C_Master_Start
  4966 ;;		_I2C_Master_Stop
  4967 ;;		_I2C_Master_Write
  4968 ;;		_initLCD
  4969 ;;		_lcdInst
  4970 ;;		_printf
  4971 ;; This function is called by:
  4972 ;;		_main
  4973 ;; This function uses a non-reentrant model
  4974 ;;
  4975                           
  4976                           	psect	text29
  4977  000FE4                     __ptext29:
  4978                           	opt stack 0
  4979  000FE4                     _standby:
  4980                           	opt stack 22
  4981                           
  4982                           ;operation.c: 31: (INTCONbits.GIE = 0);
  4983                           
  4984                           ;incstack = 0
  4985  000FE4  9EF2               	bcf	intcon,7,c	;volatile
  4986                           
  4987                           ;operation.c: 32: lcdInst(0b10000000);;
  4988  000FE6  0E80               	movlw	128
  4989  000FE8  EC14  F011         	call	_lcdInst
  4990                           
  4991                           ;operation.c: 33: initLCD();
  4992  000FEC  ECAF  F00E         	call	_initLCD	;wreg free
  4993                           
  4994                           ;operation.c: 34: __nop();
  4995  000FF0  F000               	nop	
  4996                           
  4997                           ;operation.c: 35: __nop();
  4998  000FF2  F000               	nop	
  4999  000FF4                     l482:
  5000                           
  5001                           ;operation.c: 39: I2C_Master_Start();
  5002  000FF4  EC38  F011         	call	_I2C_Master_Start	;wreg free
  5003                           
  5004                           ;operation.c: 40: I2C_Master_Write(0b11010000);
  5005  000FF8  0E00               	movlw	0
  5006  000FFA  0100               	movlb	0	; () banked
  5007  000FFC  6FB3               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5008  000FFE  0ED0               	movlw	208
  5009  001000  6FB2               	movwf	I2C_Master_Write@d& (0+255),b
  5010  001002  EC2F  F011         	call	_I2C_Master_Write	;wreg free
  5011                           
  5012                           ;operation.c: 41: I2C_Master_Write(0x00);
  5013  001006  0E00               	movlw	0
  5014  001008  0100               	movlb	0	; () banked
  5015  00100A  6FB3               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5016  00100C  0E00               	movlw	0
  5017  00100E  6FB2               	movwf	I2C_Master_Write@d& (0+255),b
  5018  001010  EC2F  F011         	call	_I2C_Master_Write	;wreg free
  5019                           
  5020                           ;operation.c: 42: I2C_Master_Stop();
  5021  001014  EC34  F011         	call	_I2C_Master_Stop	;wreg free
  5022                           
  5023                           ;operation.c: 45: I2C_Master_Start();
  5024  001018  EC38  F011         	call	_I2C_Master_Start	;wreg free
  5025                           
  5026                           ;operation.c: 46: I2C_Master_Write(0b11010001);
  5027  00101C  0E00               	movlw	0
  5028  00101E  0100               	movlb	0	; () banked
  5029  001020  6FB3               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5030  001022  0ED1               	movlw	209
  5031  001024  6FB2               	movwf	I2C_Master_Write@d& (0+255),b
  5032  001026  EC2F  F011         	call	_I2C_Master_Write	;wreg free
  5033                           
  5034                           ;operation.c: 47: for(unsigned char i=0;i<0x06;i++){
  5035  00102A  0E00               	movlw	0
  5036  00102C  0100               	movlb	0	; () banked
  5037  00102E  6FDA               	movwf	standby@i& (0+255),b
  5038  001030                     l5505:
  5039                           
  5040                           ; BSR set to: 0
  5041  001030  0E05               	movlw	5
  5042  001032  0100               	movlb	0	; () banked
  5043  001034  65DA               	cpfsgt	standby@i& (0+255),b
  5044  001036  D001               	goto	l5509
  5045  001038  D010               	goto	l5515
  5046  00103A                     l5509:
  5047                           
  5048                           ; BSR set to: 0
  5049                           ;operation.c: 48: time[i] = I2C_Master_Read(1);
  5050  00103A  0100               	movlb	0	; () banked
  5051  00103C  51DA               	movf	standby@i& (0+255),w,b
  5052  00103E  0D01               	mullw	1
  5053  001040  0E80               	movlw	low _time
  5054  001042  24F3               	addwf	prodl,w,c
  5055  001044  6ED9               	movwf	fsr2l,c
  5056  001046  0E00               	movlw	high _time
  5057  001048  20F4               	addwfc	prodh,w,c
  5058  00104A  6EDA               	movwf	fsr2h,c
  5059  00104C  0E01               	movlw	1
  5060  00104E  EC9F  F00F         	call	_I2C_Master_Read
  5061  001052  6EDF               	movwf	indf2,c
  5062  001054  0100               	movlb	0	; () banked
  5063  001056  2BDA               	incf	standby@i& (0+255),f,b
  5064  001058  D7EB               	goto	l5505
  5065  00105A                     l5515:
  5066                           
  5067                           ; BSR set to: 0
  5068                           ;operation.c: 49: }
  5069                           ;operation.c: 50: time[6] = I2C_Master_Read(0);
  5070  00105A  0E00               	movlw	0
  5071  00105C  EC9F  F00F         	call	_I2C_Master_Read
  5072  001060  0100               	movlb	0	; () banked
  5073  001062  6F86               	movwf	(_time+6)& (0+255),b
  5074                           
  5075                           ;operation.c: 51: I2C_Master_Stop();
  5076  001064  EC34  F011         	call	_I2C_Master_Stop	;wreg free
  5077                           
  5078                           ;operation.c: 53: lcdInst(0b10000000);;
  5079  001068  0E80               	movlw	128
  5080  00106A  EC14  F011         	call	_lcdInst
  5081                           
  5082                           ;operation.c: 54: printf("%02x/%02x   ",time[5],time[4]);
  5083  00106E  0E56               	movlw	low STR_11
  5084  001070  0100               	movlb	0	; () banked
  5085  001072  6FBF               	movwf	printf@f& (0+255),b
  5086  001074  0EFF               	movlw	high STR_11
  5087  001076  0100               	movlb	0	; () banked
  5088  001078  6FC0               	movwf	(printf@f+1)& (0+255),b
  5089  00107A  C085  F0C1         	movff	_time+5,?_printf+2
  5090  00107E  0100               	movlb	0	; () banked
  5091  001080  6BC2               	clrf	(?_printf+3)& (0+255),b
  5092  001082  C084  F0C3         	movff	_time+4,?_printf+4
  5093  001086  0100               	movlb	0	; () banked
  5094  001088  6BC4               	clrf	(?_printf+5)& (0+255),b
  5095  00108A  EC09  F000         	call	_printf	;wreg free
  5096                           
  5097                           ;operation.c: 55: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  5098  00108E  0EF2               	movlw	low STR_12
  5099  001090  0100               	movlb	0	; () banked
  5100  001092  6FBF               	movwf	printf@f& (0+255),b
  5101  001094  0EFE               	movlw	high STR_12
  5102  001096  0100               	movlb	0	; () banked
  5103  001098  6FC0               	movwf	(printf@f+1)& (0+255),b
  5104  00109A  C082  F0C1         	movff	_time+2,?_printf+2
  5105  00109E  0100               	movlb	0	; () banked
  5106  0010A0  6BC2               	clrf	(?_printf+3)& (0+255),b
  5107  0010A2  C081  F0C3         	movff	_time+1,?_printf+4
  5108  0010A6  0100               	movlb	0	; () banked
  5109  0010A8  6BC4               	clrf	(?_printf+5)& (0+255),b
  5110  0010AA  C080  F0C5         	movff	_time,?_printf+6
  5111  0010AE  0100               	movlb	0	; () banked
  5112  0010B0  6BC6               	clrf	(?_printf+7)& (0+255),b
  5113  0010B2  EC09  F000         	call	_printf	;wreg free
  5114                           
  5115                           ;operation.c: 57: lcdInst(0b11000000);;
  5116  0010B6  0EC0               	movlw	192
  5117  0010B8  EC14  F011         	call	_lcdInst
  5118                           
  5119                           ;operation.c: 58: printf("Press # to Start");
  5120  0010BC  0EA2               	movlw	low STR_13
  5121  0010BE  0100               	movlb	0	; () banked
  5122  0010C0  6FBF               	movwf	printf@f& (0+255),b
  5123  0010C2  0EFE               	movlw	high STR_13
  5124  0010C4  0100               	movlb	0	; () banked
  5125  0010C6  6FC0               	movwf	(printf@f+1)& (0+255),b
  5126  0010C8  EC09  F000         	call	_printf	;wreg free
  5127                           
  5128                           ;operation.c: 61: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5129  0010CC  3881               	swapf	3969,w,c	;volatile
  5130  0010CE  0B0F               	andlw	15
  5131  0010D0  0B0F               	andlw	15
  5132  0010D2  0100               	movlb	0	; () banked
  5133  0010D4  6FD7               	movwf	standby@keypress& (0+255),b
  5134  0010D6                     l485:
  5135  0010D6  B281               	btfsc	3969,1,c	;volatile
  5136  0010D8  D7FE               	goto	l485
  5137                           
  5138                           ;operation.c: 64: }
  5139                           ;operation.c: 65: unsigned char keypress_temp = keys[keypress];
  5140  0010DA  0100               	movlb	0	; () banked
  5141  0010DC  51D7               	movf	standby@keypress& (0+255),w,b
  5142  0010DE  0D01               	mullw	1
  5143  0010E0  0E0B               	movlw	low _keys
  5144  0010E2  24F3               	addwf	prodl,w,c
  5145  0010E4  6EF6               	movwf	tblptrl,c
  5146  0010E6  0EFE               	movlw	high _keys
  5147  0010E8  20F4               	addwfc	prodh,w,c
  5148  0010EA  6EF7               	movwf	tblptrh,c
  5149  0010EC                     	if	1	;There are 3 active tblptr bytes
  5150  0010EC  6AF8               	clrf	tblptru,c
  5151  0010EE  0E00               	movlw	low (__mediumconst shr (0+16))
  5152  0010F0  22F8               	addwfc	tblptru,f,c
  5153  0010F2                     	endif
  5154  0010F2  0008               	tblrd		*
  5155  0010F4  CFF5 F0D8          	movff	tablat,standby@keypress_temp
  5156                           
  5157                           ; BSR set to: 0
  5158                           ;operation.c: 67: if(keypress_temp == '#'){
  5159  0010F8  0E23               	movlw	35
  5160  0010FA  0100               	movlb	0	; () banked
  5161  0010FC  19D8               	xorwf	standby@keypress_temp& (0+255),w,b
  5162  0010FE  A4D8               	btfss	status,2,c
  5163  001100  D007               	goto	l5531
  5164                           
  5165                           ; BSR set to: 0
  5166                           ;operation.c: 69: Start_time[2] = time[2];
  5167  001102  C082  F091         	movff	_time+2,_Start_time+2
  5168                           
  5169                           ;operation.c: 70: Start_time[1] = time[1];
  5170  001106  C081  F090         	movff	_time+1,_Start_time+1
  5171                           
  5172                           ;operation.c: 71: Start_time[0] = time[0];
  5173  00110A  C080  F08F         	movff	_time,_Start_time
  5174                           
  5175                           ;operation.c: 72: break;
  5176  00110E  0012               	return	
  5177  001110                     l5531:
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;operation.c: 73: }
  5181                           ;operation.c: 74: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)))
      +                          ;};
  5182  001110  0E00               	movlw	0
  5183  001112  0100               	movlb	0	; () banked
  5184  001114  6FD9               	movwf	standby@i_936& (0+255),b
  5185  001116                     l5533:
  5186                           
  5187                           ; BSR set to: 0
  5188  001116  0E09               	movlw	9
  5189  001118  0100               	movlb	0	; () banked
  5190  00111A  65D9               	cpfsgt	standby@i_936& (0+255),b
  5191  00111C  D001               	goto	l5537
  5192  00111E  D76A               	goto	l482
  5193  001120                     l5537:
  5194                           
  5195                           ; BSR set to: 0
  5196  001120  0E02               	movlw	2
  5197  001122  0100               	movlb	0	; () banked
  5198  001124  6FD6               	movwf	(??_standby+1)& (0+255),b
  5199  001126  0E3F               	movlw	63
  5200  001128  0100               	movlb	0	; () banked
  5201  00112A  6FD5               	movwf	??_standby& (0+255),b
  5202  00112C  0E2B               	movlw	43
  5203  00112E                     u5477:
  5204  00112E  2EE8               	decfsz	wreg,f,c
  5205  001130  D7FE               	bra	u5477
  5206  001132  2FD5               	decfsz	??_standby& (0+255),f,b
  5207  001134  D7FC               	bra	u5477
  5208  001136  2FD6               	decfsz	(??_standby+1)& (0+255),f,b
  5209  001138  D7FA               	bra	u5477
  5210  00113A  0100               	movlb	0	; () banked
  5211  00113C  2BD9               	incf	standby@i_936& (0+255),f,b
  5212  00113E  D7EB               	goto	l5533
  5213  001140                     __end_of_standby:
  5214                           	opt stack 0
  5215                           tosu	equ	0xFFF
  5216                           tosh	equ	0xFFE
  5217                           tosl	equ	0xFFD
  5218                           pclath	equ	0xFFA
  5219                           tblptru	equ	0xFF8
  5220                           tblptrh	equ	0xFF7
  5221                           tblptrl	equ	0xFF6
  5222                           tablat	equ	0xFF5
  5223                           prodh	equ	0xFF4
  5224                           prodl	equ	0xFF3
  5225                           intcon	equ	0xFF2
  5226                           intcon3	equ	0xFF0
  5227                           postinc0	equ	0xFEE
  5228                           wreg	equ	0xFE8
  5229                           indf2	equ	0xFDF
  5230                           fsr2h	equ	0xFDA
  5231                           fsr2l	equ	0xFD9
  5232                           status	equ	0xFD8
  5233                           
  5234 ;; *************** function _set_time *****************
  5235 ;; Defined at:
  5236 ;;		line 72 in file "main.c"
  5237 ;; Parameters:    Size  Location     Type
  5238 ;;		None
  5239 ;; Auto vars:     Size  Location     Type
  5240 ;;  i               1    3[BANK0 ] unsigned char 
  5241 ;; Return value:  Size  Location     Type
  5242 ;;                  1    wreg      void 
  5243 ;; Registers used:
  5244 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5245 ;; Tracked objects:
  5246 ;;		On entry : 0/0
  5247 ;;		On exit  : 0/0
  5248 ;;		Unchanged: 0/0
  5249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5251 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5253 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5254 ;;Total ram usage:        1 bytes
  5255 ;; Hardware stack levels used:    1
  5256 ;; Hardware stack levels required when called:    7
  5257 ;; This function calls:
  5258 ;;		_I2C_Master_Start
  5259 ;;		_I2C_Master_Stop
  5260 ;;		_I2C_Master_Write
  5261 ;; This function is called by:
  5262 ;;		_main
  5263 ;; This function uses a non-reentrant model
  5264 ;;
  5265                           
  5266                           	psect	text30
  5267  001A32                     __ptext30:
  5268                           	opt stack 0
  5269  001A32                     _set_time:
  5270                           	opt stack 23
  5271                           
  5272                           ;main.c: 73: I2C_Master_Start();
  5273                           
  5274                           ; BSR set to: 0
  5275                           ;incstack = 0
  5276  001A32  EC38  F011         	call	_I2C_Master_Start	;wreg free
  5277                           
  5278                           ;main.c: 74: I2C_Master_Write(0b11010000);
  5279  001A36  0E00               	movlw	0
  5280  001A38  0100               	movlb	0	; () banked
  5281  001A3A  6FB3               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5282  001A3C  0ED0               	movlw	208
  5283  001A3E  6FB2               	movwf	I2C_Master_Write@d& (0+255),b
  5284  001A40  EC2F  F011         	call	_I2C_Master_Write	;wreg free
  5285                           
  5286                           ;main.c: 75: I2C_Master_Write(0x00);
  5287  001A44  0E00               	movlw	0
  5288  001A46  0100               	movlb	0	; () banked
  5289  001A48  6FB3               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5290  001A4A  0E00               	movlw	0
  5291  001A4C  6FB2               	movwf	I2C_Master_Write@d& (0+255),b
  5292  001A4E  EC2F  F011         	call	_I2C_Master_Write	;wreg free
  5293                           
  5294                           ;main.c: 76: for(char i=0; i<7; i++){
  5295  001A52  0E00               	movlw	0
  5296  001A54  0100               	movlb	0	; () banked
  5297  001A56  6FB4               	movwf	set_time@i& (0+255),b
  5298  001A58                     l5483:
  5299                           
  5300                           ; BSR set to: 0
  5301  001A58  0E06               	movlw	6
  5302  001A5A  0100               	movlb	0	; () banked
  5303  001A5C  65B4               	cpfsgt	set_time@i& (0+255),b
  5304  001A5E  D001               	goto	l5487
  5305  001A60  D016               	goto	l5493
  5306  001A62                     l5487:
  5307                           
  5308                           ; BSR set to: 0
  5309                           ;main.c: 77: I2C_Master_Write(real_time[i]);
  5310  001A62  0100               	movlb	0	; () banked
  5311  001A64  51B4               	movf	set_time@i& (0+255),w,b
  5312  001A66  0D01               	mullw	1
  5313  001A68  0E2E               	movlw	low _real_time
  5314  001A6A  24F3               	addwf	prodl,w,c
  5315  001A6C  6EF6               	movwf	tblptrl,c
  5316  001A6E  0EFE               	movlw	high _real_time
  5317  001A70  20F4               	addwfc	prodh,w,c
  5318  001A72  6EF7               	movwf	tblptrh,c
  5319  001A74                     	if	1	;There are 3 active tblptr bytes
  5320  001A74  6AF8               	clrf	tblptru,c
  5321  001A76  0E00               	movlw	low (__mediumconst shr (0+16))
  5322  001A78  22F8               	addwfc	tblptru,f,c
  5323  001A7A                     	endif
  5324  001A7A  0008               	tblrd		*
  5325  001A7C  50F5               	movf	tablat,w,c
  5326  001A7E  0100               	movlb	0	; () banked
  5327  001A80  6FB2               	movwf	I2C_Master_Write@d& (0+255),b
  5328  001A82  6BB3               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5329  001A84  EC2F  F011         	call	_I2C_Master_Write	;wreg free
  5330  001A88  0100               	movlb	0	; () banked
  5331  001A8A  2BB4               	incf	set_time@i& (0+255),f,b
  5332  001A8C  D7E5               	goto	l5483
  5333  001A8E                     l5493:
  5334                           
  5335                           ; BSR set to: 0
  5336                           ;main.c: 78: }
  5337                           ;main.c: 79: I2C_Master_Stop();
  5338  001A8E  EC34  F011         	call	_I2C_Master_Stop	;wreg free
  5339  001A92  0012               	return		;funcret
  5340  001A94                     __end_of_set_time:
  5341                           	opt stack 0
  5342                           tosu	equ	0xFFF
  5343                           tosh	equ	0xFFE
  5344                           tosl	equ	0xFFD
  5345                           pclath	equ	0xFFA
  5346                           tblptru	equ	0xFF8
  5347                           tblptrh	equ	0xFF7
  5348                           tblptrl	equ	0xFF6
  5349                           tablat	equ	0xFF5
  5350                           prodh	equ	0xFF4
  5351                           prodl	equ	0xFF3
  5352                           intcon	equ	0xFF2
  5353                           intcon3	equ	0xFF0
  5354                           postinc0	equ	0xFEE
  5355                           wreg	equ	0xFE8
  5356                           indf2	equ	0xFDF
  5357                           fsr2h	equ	0xFDA
  5358                           fsr2l	equ	0xFD9
  5359                           status	equ	0xFD8
  5360                           
  5361 ;; *************** function _results *****************
  5362 ;; Defined at:
  5363 ;;		line 199 in file "operation.c"
  5364 ;; Parameters:    Size  Location     Type
  5365 ;;		None
  5366 ;; Auto vars:     Size  Location     Type
  5367 ;;  i               1   42[BANK0 ] unsigned char 
  5368 ;;  i               1   41[BANK0 ] unsigned char 
  5369 ;;  i               1   40[BANK0 ] unsigned char 
  5370 ;;  keypress_tem    1   39[BANK0 ] unsigned char 
  5371 ;;  keypress        1   38[BANK0 ] unsigned char 
  5372 ;; Return value:  Size  Location     Type
  5373 ;;                  1    wreg      void 
  5374 ;; Registers used:
  5375 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5376 ;; Tracked objects:
  5377 ;;		On entry : 0/0
  5378 ;;		On exit  : 0/0
  5379 ;;		Unchanged: 0/0
  5380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5382 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5383 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5384 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5385 ;;Total ram usage:        7 bytes
  5386 ;; Hardware stack levels used:    1
  5387 ;; Hardware stack levels required when called:    8
  5388 ;; This function calls:
  5389 ;;		_initLCD
  5390 ;;		_lcdInst
  5391 ;;		_printf
  5392 ;; This function is called by:
  5393 ;;		_main
  5394 ;; This function uses a non-reentrant model
  5395 ;;
  5396                           
  5397                           	psect	text31
  5398  000E6C                     __ptext31:
  5399                           	opt stack 0
  5400  000E6C                     _results:
  5401                           	opt stack 22
  5402                           
  5403                           ;operation.c: 201: (INTCONbits.GIE = 1);
  5404                           
  5405                           ;incstack = 0
  5406  000E6C  8EF2               	bsf	intcon,7,c	;volatile
  5407                           
  5408                           ;operation.c: 202: tot = pop_can + pop_can_tab + tin_can + tin_can_label;
  5409  000E6E  0100               	movlb	0	; () banked
  5410  000E70  5199               	movf	_pop_can_tab& (0+255),w,b
  5411  000E72  0100               	movlb	0	; () banked
  5412  000E74  259B               	addwf	_pop_can& (0+255),w,b
  5413  000E76  0100               	movlb	0	; () banked
  5414  000E78  6FD5               	movwf	??_results& (0+255),b
  5415  000E7A  0100               	movlb	0	; () banked
  5416  000E7C  519A               	movf	(_pop_can_tab+1)& (0+255),w,b
  5417  000E7E  0100               	movlb	0	; () banked
  5418  000E80  219C               	addwfc	(_pop_can+1)& (0+255),w,b
  5419  000E82  0100               	movlb	0	; () banked
  5420  000E84  6FD6               	movwf	(??_results+1)& (0+255),b
  5421  000E86  0100               	movlb	0	; () banked
  5422  000E88  519D               	movf	_tin_can& (0+255),w,b
  5423  000E8A  0100               	movlb	0	; () banked
  5424  000E8C  27D5               	addwf	??_results& (0+255),f,b
  5425  000E8E  0100               	movlb	0	; () banked
  5426  000E90  519E               	movf	(_tin_can+1)& (0+255),w,b
  5427  000E92  0100               	movlb	0	; () banked
  5428  000E94  23D6               	addwfc	(??_results+1)& (0+255),f,b
  5429  000E96  0100               	movlb	0	; () banked
  5430  000E98  519F               	movf	_tin_can_label& (0+255),w,b
  5431  000E9A  0100               	movlb	0	; () banked
  5432  000E9C  25D5               	addwf	??_results& (0+255),w,b
  5433  000E9E  6E3F               	movwf	_tot,c
  5434  000EA0  0100               	movlb	0	; () banked
  5435  000EA2  51A0               	movf	(_tin_can_label+1)& (0+255),w,b
  5436  000EA4  0100               	movlb	0	; () banked
  5437  000EA6  21D6               	addwfc	(??_results+1)& (0+255),w,b
  5438  000EA8  6E40               	movwf	_tot+1,c
  5439  000EAA                     l5645:
  5440                           
  5441                           ; BSR set to: 0
  5442                           ;operation.c: 206: lcdInst(0b10000000);;
  5443  000EAA  0E80               	movlw	128
  5444  000EAC  EC14  F011         	call	_lcdInst
  5445                           
  5446                           ;operation.c: 207: initLCD();
  5447  000EB0  ECAF  F00E         	call	_initLCD	;wreg free
  5448                           
  5449                           ;operation.c: 208: __nop();
  5450  000EB4  F000               	nop	
  5451                           
  5452                           ;operation.c: 209: __nop();
  5453  000EB6  F000               	nop	
  5454                           
  5455                           ;operation.c: 211: printf("A:Total   B:Pop ");
  5456  000EB8  0E6F               	movlw	low STR_17
  5457  000EBA  0100               	movlb	0	; () banked
  5458  000EBC  6FBF               	movwf	printf@f& (0+255),b
  5459  000EBE  0EFE               	movlw	high STR_17
  5460  000EC0  0100               	movlb	0	; () banked
  5461  000EC2  6FC0               	movwf	(printf@f+1)& (0+255),b
  5462  000EC4  EC09  F000         	call	_printf	;wreg free
  5463                           
  5464                           ;operation.c: 212: lcdInst(0b11000000);;
  5465  000EC8  0EC0               	movlw	192
  5466  000ECA  EC14  F011         	call	_lcdInst
  5467                           
  5468                           ;operation.c: 213: printf("C:Tin     D:Time");
  5469  000ECE  0E80               	movlw	low STR_18
  5470  000ED0  0100               	movlb	0	; () banked
  5471  000ED2  6FBF               	movwf	printf@f& (0+255),b
  5472  000ED4  0EFE               	movlw	high STR_18
  5473  000ED6  0100               	movlb	0	; () banked
  5474  000ED8  6FC0               	movwf	(printf@f+1)& (0+255),b
  5475  000EDA  EC09  F000         	call	_printf	;wreg free
  5476                           
  5477                           ;operation.c: 215: (INTCONbits.GIE = 1);
  5478  000EDE  8EF2               	bsf	intcon,7,c	;volatile
  5479                           
  5480                           ;operation.c: 216: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  5481  000EE0  0E00               	movlw	0
  5482  000EE2  0100               	movlb	0	; () banked
  5483  000EE4  6FD9               	movwf	results@i& (0+255),b
  5484  000EE6                     l5663:
  5485                           
  5486                           ; BSR set to: 0
  5487  000EE6  0E09               	movlw	9
  5488  000EE8  0100               	movlb	0	; () banked
  5489  000EEA  65D9               	cpfsgt	results@i& (0+255),b
  5490  000EEC  D001               	goto	l5667
  5491  000EEE  D010               	goto	l5671
  5492  000EF0                     l5667:
  5493                           
  5494                           ; BSR set to: 0
  5495  000EF0  0E02               	movlw	2
  5496  000EF2  0100               	movlb	0	; () banked
  5497  000EF4  6FD6               	movwf	(??_results+1)& (0+255),b
  5498  000EF6  0E3F               	movlw	63
  5499  000EF8  0100               	movlb	0	; () banked
  5500  000EFA  6FD5               	movwf	??_results& (0+255),b
  5501  000EFC  0E2B               	movlw	43
  5502  000EFE                     u5487:
  5503  000EFE  2EE8               	decfsz	wreg,f,c
  5504  000F00  D7FE               	bra	u5487
  5505  000F02  2FD5               	decfsz	??_results& (0+255),f,b
  5506  000F04  D7FC               	bra	u5487
  5507  000F06  2FD6               	decfsz	(??_results+1)& (0+255),f,b
  5508  000F08  D7FA               	bra	u5487
  5509  000F0A  0100               	movlb	0	; () banked
  5510  000F0C  2BD9               	incf	results@i& (0+255),f,b
  5511  000F0E  D7EB               	goto	l5663
  5512  000F10                     l5671:
  5513                           
  5514                           ; BSR set to: 0
  5515                           ;operation.c: 217: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  5516  000F10  0E00               	movlw	0
  5517  000F12  0100               	movlb	0	; () banked
  5518  000F14  6FDA               	movwf	results@i_959& (0+255),b
  5519  000F16                     l5673:
  5520                           
  5521                           ; BSR set to: 0
  5522  000F16  0E09               	movlw	9
  5523  000F18  0100               	movlb	0	; () banked
  5524  000F1A  65DA               	cpfsgt	results@i_959& (0+255),b
  5525  000F1C  D001               	goto	l5677
  5526  000F1E  D010               	goto	l523
  5527  000F20                     l5677:
  5528                           
  5529                           ; BSR set to: 0
  5530  000F20  0E02               	movlw	2
  5531  000F22  0100               	movlb	0	; () banked
  5532  000F24  6FD6               	movwf	(??_results+1)& (0+255),b
  5533  000F26  0E3F               	movlw	63
  5534  000F28  0100               	movlb	0	; () banked
  5535  000F2A  6FD5               	movwf	??_results& (0+255),b
  5536  000F2C  0E2B               	movlw	43
  5537  000F2E                     u5497:
  5538  000F2E  2EE8               	decfsz	wreg,f,c
  5539  000F30  D7FE               	bra	u5497
  5540  000F32  2FD5               	decfsz	??_results& (0+255),f,b
  5541  000F34  D7FC               	bra	u5497
  5542  000F36  2FD6               	decfsz	(??_results+1)& (0+255),f,b
  5543  000F38  D7FA               	bra	u5497
  5544  000F3A  0100               	movlb	0	; () banked
  5545  000F3C  2BDA               	incf	results@i_959& (0+255),f,b
  5546  000F3E  D7EB               	goto	l5673
  5547  000F40                     l523:
  5548                           
  5549                           ; BSR set to: 0
  5550                           ;operation.c: 218: (INTCONbits.GIE = 0);
  5551  000F40  9EF2               	bcf	intcon,7,c	;volatile
  5552                           
  5553                           ; BSR set to: 0
  5554                           ;operation.c: 219: initLCD();
  5555  000F42  ECAF  F00E         	call	_initLCD	;wreg free
  5556                           
  5557                           ;operation.c: 220: __nop();
  5558  000F46  F000               	nop	
  5559                           
  5560                           ;operation.c: 221: __nop();
  5561  000F48  F000               	nop	
  5562                           
  5563                           ;operation.c: 222: printf("Press 0 to Reset");
  5564  000F4A  0E91               	movlw	low STR_19
  5565  000F4C  0100               	movlb	0	; () banked
  5566  000F4E  6FBF               	movwf	printf@f& (0+255),b
  5567  000F50  0EFE               	movlw	high STR_19
  5568  000F52  0100               	movlb	0	; () banked
  5569  000F54  6FC0               	movwf	(printf@f+1)& (0+255),b
  5570  000F56  EC09  F000         	call	_printf	;wreg free
  5571                           
  5572                           ;operation.c: 223: (INTCONbits.GIE = 1);
  5573  000F5A  8EF2               	bsf	intcon,7,c	;volatile
  5574                           
  5575                           ;operation.c: 225: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0))
      +                          );};
  5576  000F5C  0E00               	movlw	0
  5577  000F5E  0100               	movlb	0	; () banked
  5578  000F60  6FDB               	movwf	results@i_961& (0+255),b
  5579  000F62                     l5693:
  5580                           
  5581                           ; BSR set to: 0
  5582  000F62  0E09               	movlw	9
  5583  000F64  0100               	movlb	0	; () banked
  5584  000F66  65DB               	cpfsgt	results@i_961& (0+255),b
  5585  000F68  D001               	goto	l5697
  5586  000F6A  D010               	goto	l525
  5587  000F6C                     l5697:
  5588                           
  5589                           ; BSR set to: 0
  5590  000F6C  0E02               	movlw	2
  5591  000F6E  0100               	movlb	0	; () banked
  5592  000F70  6FD6               	movwf	(??_results+1)& (0+255),b
  5593  000F72  0E3F               	movlw	63
  5594  000F74  0100               	movlb	0	; () banked
  5595  000F76  6FD5               	movwf	??_results& (0+255),b
  5596  000F78  0E2B               	movlw	43
  5597  000F7A                     u5507:
  5598  000F7A  2EE8               	decfsz	wreg,f,c
  5599  000F7C  D7FE               	bra	u5507
  5600  000F7E  2FD5               	decfsz	??_results& (0+255),f,b
  5601  000F80  D7FC               	bra	u5507
  5602  000F82  2FD6               	decfsz	(??_results+1)& (0+255),f,b
  5603  000F84  D7FA               	bra	u5507
  5604  000F86  0100               	movlb	0	; () banked
  5605  000F88  2BDB               	incf	results@i_961& (0+255),f,b
  5606  000F8A  D7EB               	goto	l5693
  5607  000F8C                     l525:
  5608                           
  5609                           ; BSR set to: 0
  5610                           ;operation.c: 227: (INTCONbits.GIE = 0);
  5611  000F8C  9EF2               	bcf	intcon,7,c	;volatile
  5612                           
  5613                           ; BSR set to: 0
  5614                           ;operation.c: 229: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5615  000F8E  3881               	swapf	3969,w,c	;volatile
  5616  000F90  0B0F               	andlw	15
  5617  000F92  0B0F               	andlw	15
  5618  000F94  0100               	movlb	0	; () banked
  5619  000F96  6FD7               	movwf	results@keypress& (0+255),b
  5620                           
  5621                           ; BSR set to: 0
  5622                           ;operation.c: 230: unsigned char keypress_temp = keys[keypress];
  5623  000F98  0100               	movlb	0	; () banked
  5624  000F9A  51D7               	movf	results@keypress& (0+255),w,b
  5625  000F9C  0D01               	mullw	1
  5626  000F9E  0E0B               	movlw	low _keys
  5627  000FA0  24F3               	addwf	prodl,w,c
  5628  000FA2  6EF6               	movwf	tblptrl,c
  5629  000FA4  0EFE               	movlw	high _keys
  5630  000FA6  20F4               	addwfc	prodh,w,c
  5631  000FA8  6EF7               	movwf	tblptrh,c
  5632  000FAA                     	if	1	;There are 3 active tblptr bytes
  5633  000FAA  6AF8               	clrf	tblptru,c
  5634  000FAC  0E00               	movlw	low (__mediumconst shr (0+16))
  5635  000FAE  22F8               	addwfc	tblptru,f,c
  5636  000FB0                     	endif
  5637  000FB0  0008               	tblrd		*
  5638  000FB2  CFF5 F0D8          	movff	tablat,results@keypress_temp
  5639                           
  5640                           ; BSR set to: 0
  5641                           ;operation.c: 232: if(keypress_temp == '0'){
  5642  000FB6  0E30               	movlw	48
  5643  000FB8  0100               	movlb	0	; () banked
  5644  000FBA  19D8               	xorwf	results@keypress_temp& (0+255),w,b
  5645  000FBC  A4D8               	btfss	status,2,c
  5646  000FBE  D775               	goto	l5645
  5647                           
  5648                           ; BSR set to: 0
  5649                           ;operation.c: 233: pop_can = pop_can_tab = tin_can = tin_can_label = 0;
  5650  000FC0  0E00               	movlw	0
  5651  000FC2  0100               	movlb	0	; () banked
  5652  000FC4  6FA0               	movwf	(_tin_can_label+1)& (0+255),b
  5653  000FC6  0E00               	movlw	0
  5654  000FC8  6F9F               	movwf	_tin_can_label& (0+255),b
  5655  000FCA  C09F  F09D         	movff	_tin_can_label,_tin_can
  5656  000FCE  C0A0  F09E         	movff	_tin_can_label+1,_tin_can+1
  5657  000FD2  C09D  F099         	movff	_tin_can,_pop_can_tab
  5658  000FD6  C09E  F09A         	movff	_tin_can+1,_pop_can_tab+1
  5659  000FDA  C099  F09B         	movff	_pop_can_tab,_pop_can
  5660  000FDE  C09A  F09C         	movff	_pop_can_tab+1,_pop_can+1
  5661                           
  5662                           ;operation.c: 234: break;
  5663  000FE2  0012               	return	
  5664  000FE4                     __end_of_results:
  5665                           	opt stack 0
  5666                           tosu	equ	0xFFF
  5667                           tosh	equ	0xFFE
  5668                           tosl	equ	0xFFD
  5669                           pclath	equ	0xFFA
  5670                           tblptru	equ	0xFF8
  5671                           tblptrh	equ	0xFF7
  5672                           tblptrl	equ	0xFF6
  5673                           tablat	equ	0xFF5
  5674                           prodh	equ	0xFF4
  5675                           prodl	equ	0xFF3
  5676                           intcon	equ	0xFF2
  5677                           intcon3	equ	0xFF0
  5678                           postinc0	equ	0xFEE
  5679                           wreg	equ	0xFE8
  5680                           indf2	equ	0xFDF
  5681                           fsr2h	equ	0xFDA
  5682                           fsr2l	equ	0xFD9
  5683                           status	equ	0xFD8
  5684                           
  5685 ;; *************** function _printf *****************
  5686 ;; Defined at:
  5687 ;;		line 464 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
  5688 ;; Parameters:    Size  Location     Type
  5689 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  5690 ;;		 -> STR_34(14), STR_33(12), STR_32(12), STR_31(11), 
  5691 ;;		 -> STR_30(12), STR_29(13), STR_28(11), STR_27(9), 
  5692 ;;		 -> STR_26(11), STR_25(13), STR_24(15), STR_23(15), 
  5693 ;;		 -> STR_22(17), STR_21(22), STR_20(19), STR_19(17), 
  5694 ;;		 -> STR_18(17), STR_17(17), STR_16(13), STR_15(9), 
  5695 ;;		 -> STR_14(7), STR_13(17), STR_12(15), STR_11(13), 
  5696 ;;		 -> STR_10(7), STR_9(2), STR_8(15), STR_7(15), 
  5697 ;;		 -> STR_6(9), STR_5(8), STR_4(16), STR_3(14), 
  5698 ;;		 -> STR_2(12), STR_1(14), 
  5699 ;; Auto vars:     Size  Location     Type
  5700 ;;  idx             1   26[BANK0 ] unsigned char 
  5701 ;;  tmpval          4    0        struct .
  5702 ;;  cp              3    0        PTR const unsigned char 
  5703 ;;  width           2   33[BANK0 ] int 
  5704 ;;  val             2   30[BANK0 ] unsigned int 
  5705 ;;  ap              2   27[BANK0 ] PTR void [1]
  5706 ;;		 -> ?i2_printf(2), ?_printf(2), 
  5707 ;;  len             2    0        unsigned int 
  5708 ;;  c               1   35[BANK0 ] char 
  5709 ;;  flag            1   32[BANK0 ] unsigned char 
  5710 ;;  prec            1   29[BANK0 ] char 
  5711 ;; Return value:  Size  Location     Type
  5712 ;;                  2   14[BANK0 ] int 
  5713 ;; Registers used:
  5714 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5715 ;; Tracked objects:
  5716 ;;		On entry : 0/0
  5717 ;;		On exit  : 0/0
  5718 ;;		Unchanged: 0/0
  5719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5720 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5721 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5722 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5723 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5724 ;;Total ram usage:       22 bytes
  5725 ;; Hardware stack levels used:    1
  5726 ;; Hardware stack levels required when called:    7
  5727 ;; This function calls:
  5728 ;;		___lwdiv
  5729 ;;		___lwmod
  5730 ;;		___wmul
  5731 ;;		_isdigit
  5732 ;;		_putch
  5733 ;; This function is called by:
  5734 ;;		_bottom_rocker_initial
  5735 ;;		_bottom_rocker_idle
  5736 ;;		_bottom_rocker_release
  5737 ;;		_bottom_rocker_restore
  5738 ;;		_top_rocker_motor_cw
  5739 ;;		_standby
  5740 ;;		_startSorting
  5741 ;;		_initialization
  5742 ;;		_results
  5743 ;;		_top_rocker_idle
  5744 ;;		_solenoids_back
  5745 ;;		_top_rocker_release
  5746 ;;		_top_rocker_restore
  5747 ;;		_top_distribution_initial
  5748 ;; This function uses a non-reentrant model
  5749 ;;
  5750                           
  5751                           	psect	text32
  5752  000012                     __ptext32:
  5753                           	opt stack 0
  5754  000012                     _printf:
  5755                           	opt stack 20
  5756                           
  5757                           ;doprnt.c: 466: va_list ap;
  5758                           ;doprnt.c: 499: signed char c;
  5759                           ;doprnt.c: 501: int width;
  5760                           ;doprnt.c: 506: signed char prec;
  5761                           ;doprnt.c: 508: unsigned char flag;
  5762                           ;doprnt.c: 523: union {
  5763                           ;doprnt.c: 524: unsigned long vd;
  5764                           ;doprnt.c: 525: double integ;
  5765                           ;doprnt.c: 526: } tmpval;
  5766                           ;doprnt.c: 528: unsigned int val;
  5767                           ;doprnt.c: 529: unsigned len;
  5768                           ;doprnt.c: 530: const char * cp;
  5769                           ;doprnt.c: 533: *ap = __va_start();
  5770                           
  5771                           ; BSR set to: 0
  5772                           ;incstack = 0
  5773  000012  0EC1               	movlw	low (?_printf+2)
  5774  000014  0100               	movlb	0	; () banked
  5775  000016  6FCC               	movwf	printf@ap& (0+255),b
  5776  000018  0E00               	movlw	high (?_printf+2)
  5777  00001A  0100               	movlb	0	; () banked
  5778  00001C  6FCD               	movwf	(printf@ap+1)& (0+255),b
  5779                           
  5780                           ;doprnt.c: 536: while(c = *f++) {
  5781  00001E  D1D8               	goto	l4865
  5782  000020                     l4739:
  5783                           
  5784                           ; BSR set to: 0
  5785                           ;doprnt.c: 538: if(c != '%')
  5786  000020  0E25               	movlw	37
  5787  000022  0100               	movlb	0	; () banked
  5788  000024  19D4               	xorwf	printf@c& (0+255),w,b
  5789  000026  B4D8               	btfsc	status,2,c
  5790  000028  D005               	goto	l4743
  5791                           
  5792                           ; BSR set to: 0
  5793                           ;doprnt.c: 540: {
  5794                           ;doprnt.c: 541: (putch(c) );
  5795  00002A  0100               	movlb	0	; () banked
  5796  00002C  51D4               	movf	printf@c& (0+255),w,b
  5797  00002E  EC0C  F011         	call	_putch
  5798                           
  5799                           ;doprnt.c: 542: continue;
  5800  000032  D1CE               	goto	l4865
  5801  000034                     l4743:
  5802                           
  5803                           ;doprnt.c: 543: }
  5804                           ;doprnt.c: 546: width = 0;
  5805  000034  0E00               	movlw	0
  5806  000036  0100               	movlb	0	; () banked
  5807  000038  6FD3               	movwf	(printf@width+1)& (0+255),b
  5808  00003A  0E00               	movlw	0
  5809  00003C  6FD2               	movwf	printf@width& (0+255),b
  5810                           
  5811                           ;doprnt.c: 548: flag = 0;
  5812  00003E  0E00               	movlw	0
  5813  000040  0100               	movlb	0	; () banked
  5814  000042  6FD1               	movwf	printf@flag& (0+255),b
  5815                           
  5816                           ; BSR set to: 0
  5817                           ;doprnt.c: 551: switch(*f) {
  5818                           
  5819                           ;doprnt.c: 550: for(;;) {
  5820  000044  D005               	goto	l4749
  5821  000046                     l4745:
  5822                           
  5823                           ;doprnt.c: 580: flag |= 0x04;
  5824  000046  0100               	movlb	0	; () banked
  5825  000048  85D1               	bsf	printf@flag& (0+255),2,b
  5826                           
  5827                           ;doprnt.c: 581: f++;
  5828  00004A  0100               	movlb	0	; () banked
  5829  00004C  4BBF               	infsnz	printf@f& (0+255),f,b
  5830  00004E  2BC0               	incf	(printf@f+1)& (0+255),f,b
  5831  000050                     l4749:
  5832  000050  C0BF  FFF6         	movff	printf@f,tblptrl
  5833  000054  C0C0  FFF7         	movff	printf@f+1,tblptrh
  5834  000058                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5835  000058  6AF8               	clrf	tblptru,c
  5836  00005A                     	endif
  5837  00005A                     	if	0	;tblptru may be non-zero
  5838  00005A                     	endif
  5839  00005A  0008               	tblrd		*
  5840  00005C  50F5               	movf	tablat,w,c
  5841                           
  5842                           ; Switch size 1, requested type "space"
  5843                           ; Number of cases is 1, Range of values is 48 to 48
  5844                           ; switch strategies available:
  5845                           ; Name         Instructions Cycles
  5846                           ; simple_byte            4     3 (average)
  5847                           ;	Chosen strategy is simple_byte
  5848  00005E  0A30               	xorlw	48	; case 48
  5849  000060  B4D8               	btfsc	status,2,c
  5850  000062  D7F1               	goto	l4745
  5851                           
  5852                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5853                           
  5854                           ;doprnt.c: 586: }
  5855                           
  5856                           ;doprnt.c: 585: break;
  5857  000064  C0BF  FFF6         	movff	printf@f,tblptrl
  5858  000068  C0C0  FFF7         	movff	printf@f+1,tblptrh
  5859  00006C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5860  00006C  6AF8               	clrf	tblptru,c
  5861  00006E                     	endif
  5862  00006E                     	if	0	;tblptru may be non-zero
  5863  00006E                     	endif
  5864  00006E  0008               	tblrd		*
  5865  000070  50F5               	movf	tablat,w,c
  5866  000072  ECB6  F00F         	call	_isdigit
  5867  000076  A0D8               	btfss	status,0,c
  5868  000078  D046               	goto	l4767
  5869                           
  5870                           ;doprnt.c: 598: width = 0;
  5871  00007A  0E00               	movlw	0
  5872  00007C  0100               	movlb	0	; () banked
  5873  00007E  6FD3               	movwf	(printf@width+1)& (0+255),b
  5874  000080  0E00               	movlw	0
  5875  000082  6FD2               	movwf	printf@width& (0+255),b
  5876  000084                     l4755:
  5877                           
  5878                           ;doprnt.c: 600: width *= 10;
  5879  000084  C0D2  F0B9         	movff	printf@width,___wmul@multiplier
  5880  000088  C0D3  F0BA         	movff	printf@width+1,___wmul@multiplier+1
  5881  00008C  0E00               	movlw	0
  5882  00008E  0100               	movlb	0	; () banked
  5883  000090  6FBC               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5884  000092  0E0A               	movlw	10
  5885  000094  6FBB               	movwf	___wmul@multiplicand& (0+255),b
  5886  000096  EC52  F00F         	call	___wmul	;wreg free
  5887  00009A  C0B9  F0D2         	movff	?___wmul,printf@width
  5888  00009E  C0BA  F0D3         	movff	?___wmul+1,printf@width+1
  5889                           
  5890                           ;doprnt.c: 601: width += *f++ - '0';
  5891  0000A2  0ED0               	movlw	208
  5892  0000A4  0100               	movlb	0	; () banked
  5893  0000A6  6FC7               	movwf	??_printf& (0+255),b
  5894  0000A8  0EFF               	movlw	255
  5895  0000AA  0100               	movlb	0	; () banked
  5896  0000AC  6FC8               	movwf	(??_printf+1)& (0+255),b
  5897  0000AE  C0BF  FFF6         	movff	printf@f,tblptrl
  5898  0000B2  C0C0  FFF7         	movff	printf@f+1,tblptrh
  5899  0000B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5900  0000B6  6AF8               	clrf	tblptru,c
  5901  0000B8                     	endif
  5902  0000B8                     	if	0	;tblptru may be non-zero
  5903  0000B8                     	endif
  5904  0000B8  0008               	tblrd		*
  5905  0000BA  50F5               	movf	tablat,w,c
  5906  0000BC  0100               	movlb	0	; () banked
  5907  0000BE  6FC9               	movwf	(??_printf+2)& (0+255),b
  5908  0000C0  6BCA               	clrf	(??_printf+3)& (0+255),b
  5909  0000C2  0100               	movlb	0	; () banked
  5910  0000C4  51C7               	movf	??_printf& (0+255),w,b
  5911  0000C6  0100               	movlb	0	; () banked
  5912  0000C8  27C9               	addwf	(??_printf+2)& (0+255),f,b
  5913  0000CA  0100               	movlb	0	; () banked
  5914  0000CC  51C8               	movf	(??_printf+1)& (0+255),w,b
  5915  0000CE  0100               	movlb	0	; () banked
  5916  0000D0  23CA               	addwfc	(??_printf+3)& (0+255),f,b
  5917  0000D2  0100               	movlb	0	; () banked
  5918  0000D4  51C9               	movf	(??_printf+2)& (0+255),w,b
  5919  0000D6  0100               	movlb	0	; () banked
  5920  0000D8  27D2               	addwf	printf@width& (0+255),f,b
  5921  0000DA  0100               	movlb	0	; () banked
  5922  0000DC  51CA               	movf	(??_printf+3)& (0+255),w,b
  5923  0000DE  0100               	movlb	0	; () banked
  5924  0000E0  23D3               	addwfc	(printf@width+1)& (0+255),f,b
  5925                           
  5926                           ; BSR set to: 0
  5927  0000E2  0100               	movlb	0	; () banked
  5928  0000E4  4BBF               	infsnz	printf@f& (0+255),f,b
  5929  0000E6  2BC0               	incf	(printf@f+1)& (0+255),f,b
  5930                           
  5931                           ; BSR set to: 0
  5932                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5933  0000E8  C0BF  FFF6         	movff	printf@f,tblptrl
  5934  0000EC  C0C0  FFF7         	movff	printf@f+1,tblptrh
  5935  0000F0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5936  0000F0  6AF8               	clrf	tblptru,c
  5937  0000F2                     	endif
  5938  0000F2                     	if	0	;tblptru may be non-zero
  5939  0000F2                     	endif
  5940  0000F2  0008               	tblrd		*
  5941  0000F4  50F5               	movf	tablat,w,c
  5942  0000F6  ECB6  F00F         	call	_isdigit
  5943  0000FA  A0D8               	btfss	status,0,c
  5944  0000FC  D004               	goto	l4767
  5945  0000FE  D7C2               	goto	l4755
  5946  000100                     l4763:
  5947                           
  5948                           ;doprnt.c: 721: flag |= 0x80;
  5949  000100  0100               	movlb	0	; () banked
  5950  000102  8FD1               	bsf	printf@flag& (0+255),7,b
  5951                           
  5952                           ;doprnt.c: 723: break;
  5953  000104  D01A               	goto	l721
  5954  000106                     l4767:
  5955  000106  C0BF  FFF6         	movff	printf@f,tblptrl
  5956  00010A  C0C0  FFF7         	movff	printf@f+1,tblptrh
  5957  00010E  0100               	movlb	0	; () banked
  5958  000110  4BBF               	infsnz	printf@f& (0+255),f,b
  5959  000112  2BC0               	incf	(printf@f+1)& (0+255),f,b
  5960  000114                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5961  000114  6AF8               	clrf	tblptru,c
  5962  000116                     	endif
  5963  000116                     	if	0	;tblptru may be non-zero
  5964  000116                     	endif
  5965  000116  0008               	tblrd		*
  5966  000118  CFF5 F0D4          	movff	tablat,printf@c
  5967  00011C  0100               	movlb	0	; () banked
  5968  00011E  51D4               	movf	printf@c& (0+255),w,b
  5969                           
  5970                           ; Switch size 1, requested type "space"
  5971                           ; Number of cases is 4, Range of values is 0 to 120
  5972                           ; switch strategies available:
  5973                           ; Name         Instructions Cycles
  5974                           ; simple_byte           13     7 (average)
  5975                           ;	Chosen strategy is simple_byte
  5976  000120  0A00               	xorlw	0	; case 0
  5977  000122  B4D8               	btfsc	status,2,c
  5978  000124  0012               	return	
  5979  000126  0A64               	xorlw	100	; case 100
  5980  000128  B4D8               	btfsc	status,2,c
  5981  00012A  D007               	goto	l721
  5982  00012C  0A0D               	xorlw	13	; case 105
  5983  00012E  B4D8               	btfsc	status,2,c
  5984  000130  D004               	goto	l721
  5985  000132  0A11               	xorlw	17	; case 120
  5986  000134  B4D8               	btfsc	status,2,c
  5987  000136  D7E4               	goto	l4763
  5988  000138  D14B               	goto	l4865
  5989  00013A                     l721:
  5990                           
  5991                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5992  00013A  0100               	movlb	0	; () banked
  5993  00013C  BFD1               	btfsc	printf@flag& (0+255),7,b
  5994  00013E  D019               	goto	l4779
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;doprnt.c: 1253: {
  5998                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5999  000140  C0CC  FFD9         	movff	printf@ap,fsr2l
  6000  000144  C0CD  FFDA         	movff	printf@ap+1,fsr2h
  6001  000148  CFDE F0CF          	movff	postinc2,printf@val
  6002  00014C  CFDD F0D0          	movff	postdec2,printf@val+1
  6003                           
  6004                           ; BSR set to: 0
  6005  000150  0E02               	movlw	2
  6006  000152  0100               	movlb	0	; () banked
  6007  000154  27CC               	addwf	printf@ap& (0+255),f,b
  6008  000156  0E00               	movlw	0
  6009  000158  23CD               	addwfc	(printf@ap+1)& (0+255),f,b
  6010                           
  6011                           ; BSR set to: 0
  6012                           ;doprnt.c: 1261: if((int)val < 0) {
  6013  00015A  0100               	movlb	0	; () banked
  6014  00015C  AFD0               	btfss	(printf@val+1)& (0+255),7,b
  6015  00015E  D059               	goto	l4813
  6016                           
  6017                           ; BSR set to: 0
  6018                           ;doprnt.c: 1262: flag |= 0x03;
  6019  000160  0E03               	movlw	3
  6020  000162  0100               	movlb	0	; () banked
  6021  000164  13D1               	iorwf	printf@flag& (0+255),f,b
  6022                           
  6023                           ; BSR set to: 0
  6024                           ;doprnt.c: 1263: val = -val;
  6025  000166  0100               	movlb	0	; () banked
  6026  000168  6DCF               	negf	printf@val& (0+255),b
  6027  00016A  1FD0               	comf	(printf@val+1)& (0+255),f,b
  6028  00016C  B0D8               	btfsc	status,0,c
  6029  00016E  2BD0               	incf	(printf@val+1)& (0+255),f,b
  6030                           
  6031                           ; BSR set to: 0
  6032                           ;doprnt.c: 1264: }
  6033                           ;doprnt.c: 1266: }
  6034  000170  D050               	goto	l4813
  6035  000172                     l4779:
  6036                           
  6037                           ; BSR set to: 0
  6038                           ;doprnt.c: 1268: else
  6039                           ;doprnt.c: 1273: {
  6040                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6041  000172  C0CC  FFD9         	movff	printf@ap,fsr2l
  6042  000176  C0CD  FFDA         	movff	printf@ap+1,fsr2h
  6043  00017A  CFDE F0CF          	movff	postinc2,printf@val
  6044  00017E  CFDD F0D0          	movff	postdec2,printf@val+1
  6045                           
  6046                           ; BSR set to: 0
  6047  000182  0E02               	movlw	2
  6048  000184  0100               	movlb	0	; () banked
  6049  000186  27CC               	addwf	printf@ap& (0+255),f,b
  6050  000188  0E00               	movlw	0
  6051  00018A  23CD               	addwfc	(printf@ap+1)& (0+255),f,b
  6052                           
  6053                           ; BSR set to: 0
  6054                           ;doprnt.c: 1287: }
  6055                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6056  00018C  D042               	goto	l4813
  6057  00018E                     l4783:
  6058                           
  6059                           ; BSR set to: 0
  6060                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6061  00018E  0E01               	movlw	1
  6062  000190  0100               	movlb	0	; () banked
  6063  000192  6FD4               	movwf	printf@c& (0+255),b
  6064  000194                     l4785:
  6065                           
  6066                           ; BSR set to: 0
  6067  000194  0E05               	movlw	5
  6068  000196  0100               	movlb	0	; () banked
  6069  000198  19D4               	xorwf	printf@c& (0+255),w,b
  6070  00019A  B4D8               	btfsc	status,2,c
  6071  00019C  D043               	goto	l4815
  6072                           
  6073                           ; BSR set to: 0
  6074                           ;doprnt.c: 1306: if(val < dpowers[c])
  6075                           
  6076                           ; BSR set to: 0
  6077                           
  6078                           ; BSR set to: 0
  6079  00019E  0100               	movlb	0	; () banked
  6080  0001A0  51D4               	movf	printf@c& (0+255),w,b
  6081  0001A2  0D02               	mullw	2
  6082  0001A4  0E1C               	movlw	low _dpowers
  6083  0001A6  24F3               	addwf	prodl,w,c
  6084  0001A8  6EF6               	movwf	tblptrl,c
  6085  0001AA  0EFE               	movlw	high _dpowers
  6086  0001AC  20F4               	addwfc	prodh,w,c
  6087  0001AE  6EF7               	movwf	tblptrh,c
  6088  0001B0                     	if	1	;There are 3 active tblptr bytes
  6089  0001B0  6AF8               	clrf	tblptru,c
  6090  0001B2  0E00               	movlw	low (__mediumconst shr (0+16))
  6091  0001B4  22F8               	addwfc	tblptru,f,c
  6092  0001B6                     	endif
  6093  0001B6  0009               	tblrd		*+
  6094  0001B8  50F5               	movf	tablat,w,c
  6095  0001BA  0100               	movlb	0	; () banked
  6096  0001BC  5DCF               	subwf	printf@val& (0+255),w,b
  6097  0001BE  0009               	tblrd		*+
  6098  0001C0  50F5               	movf	tablat,w,c
  6099  0001C2  0100               	movlb	0	; () banked
  6100  0001C4  59D0               	subwfb	(printf@val+1)& (0+255),w,b
  6101  0001C6  A0D8               	btfss	status,0,c
  6102  0001C8  D02D               	goto	l4815
  6103                           
  6104                           ; BSR set to: 0
  6105                           
  6106                           ; BSR set to: 0
  6107                           
  6108                           ; BSR set to: 0
  6109                           ;doprnt.c: 1307: break;
  6110  0001CA  0100               	movlb	0	; () banked
  6111  0001CC  2BD4               	incf	printf@c& (0+255),f,b
  6112  0001CE  D7E2               	goto	l4785
  6113  0001D0                     l4797:
  6114                           
  6115                           ; BSR set to: 0
  6116                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6117  0001D0  0E01               	movlw	1
  6118  0001D2  0100               	movlb	0	; () banked
  6119  0001D4  6FD4               	movwf	printf@c& (0+255),b
  6120  0001D6                     l4799:
  6121                           
  6122                           ; BSR set to: 0
  6123  0001D6  0E04               	movlw	4
  6124  0001D8  0100               	movlb	0	; () banked
  6125  0001DA  19D4               	xorwf	printf@c& (0+255),w,b
  6126  0001DC  B4D8               	btfsc	status,2,c
  6127  0001DE  D022               	goto	l4815
  6128                           
  6129                           ; BSR set to: 0
  6130                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6131                           
  6132                           ; BSR set to: 0
  6133                           
  6134                           ; BSR set to: 0
  6135  0001E0  0100               	movlb	0	; () banked
  6136  0001E2  51D4               	movf	printf@c& (0+255),w,b
  6137  0001E4  0D02               	mullw	2
  6138  0001E6  0E26               	movlw	low _hexpowers
  6139  0001E8  24F3               	addwf	prodl,w,c
  6140  0001EA  6EF6               	movwf	tblptrl,c
  6141  0001EC  0EFE               	movlw	high _hexpowers
  6142  0001EE  20F4               	addwfc	prodh,w,c
  6143  0001F0  6EF7               	movwf	tblptrh,c
  6144  0001F2                     	if	1	;There are 3 active tblptr bytes
  6145  0001F2  6AF8               	clrf	tblptru,c
  6146  0001F4  0E00               	movlw	low (__mediumconst shr (0+16))
  6147  0001F6  22F8               	addwfc	tblptru,f,c
  6148  0001F8                     	endif
  6149  0001F8  0009               	tblrd		*+
  6150  0001FA  50F5               	movf	tablat,w,c
  6151  0001FC  0100               	movlb	0	; () banked
  6152  0001FE  5DCF               	subwf	printf@val& (0+255),w,b
  6153  000200  0009               	tblrd		*+
  6154  000202  50F5               	movf	tablat,w,c
  6155  000204  0100               	movlb	0	; () banked
  6156  000206  59D0               	subwfb	(printf@val+1)& (0+255),w,b
  6157  000208  A0D8               	btfss	status,0,c
  6158  00020A  D00C               	goto	l4815
  6159                           
  6160                           ; BSR set to: 0
  6161                           
  6162                           ; BSR set to: 0
  6163                           
  6164                           ; BSR set to: 0
  6165                           ;doprnt.c: 1318: break;
  6166  00020C  0100               	movlb	0	; () banked
  6167  00020E  2BD4               	incf	printf@c& (0+255),f,b
  6168  000210  D7E2               	goto	l4799
  6169  000212                     l4813:
  6170                           
  6171                           ; BSR set to: 0
  6172  000212  0100               	movlb	0	; () banked
  6173  000214  51D1               	movf	printf@flag& (0+255),w,b
  6174  000216  0B80               	andlw	128
  6175                           
  6176                           ; Switch size 1, requested type "space"
  6177                           ; Number of cases is 2, Range of values is 0 to 128
  6178                           ; switch strategies available:
  6179                           ; Name         Instructions Cycles
  6180                           ; simple_byte            7     4 (average)
  6181                           ;	Chosen strategy is simple_byte
  6182  000218  0A00               	xorlw	0	; case 0
  6183  00021A  B4D8               	btfsc	status,2,c
  6184  00021C  D7B8               	goto	l4783
  6185  00021E  0A80               	xorlw	128	; case 128
  6186  000220  B4D8               	btfsc	status,2,c
  6187  000222  D7D6               	goto	l4797
  6188  000224                     l4815:
  6189                           
  6190                           ; BSR set to: 0
  6191                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6192  000224  0100               	movlb	0	; () banked
  6193  000226  51D2               	movf	printf@width& (0+255),w,b
  6194  000228  0100               	movlb	0	; () banked
  6195  00022A  11D3               	iorwf	(printf@width+1)& (0+255),w,b
  6196  00022C  B4D8               	btfsc	status,2,c
  6197  00022E  D00B               	goto	l4821
  6198                           
  6199                           ; BSR set to: 0
  6200  000230  C0D1  F0C7         	movff	printf@flag,??_printf
  6201  000234  0E03               	movlw	3
  6202  000236  0100               	movlb	0	; () banked
  6203  000238  17C7               	andwf	??_printf& (0+255),f,b
  6204  00023A  B4D8               	btfsc	status,2,c
  6205  00023C  D004               	goto	l4821
  6206                           
  6207                           ; BSR set to: 0
  6208                           ;doprnt.c: 1346: width--;
  6209  00023E  0100               	movlb	0	; () banked
  6210  000240  07D2               	decf	printf@width& (0+255),f,b
  6211  000242  A0D8               	btfss	status,0,c
  6212  000244  07D3               	decf	(printf@width+1)& (0+255),f,b
  6213  000246                     l4821:
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;doprnt.c: 1381: if(width > c)
  6217  000246  0E80               	movlw	128
  6218  000248  0100               	movlb	0	; () banked
  6219  00024A  BFD4               	btfsc	printf@c& (0+255),7,b
  6220  00024C  0E7F               	movlw	127
  6221  00024E  0100               	movlb	0	; () banked
  6222  000250  6FC7               	movwf	??_printf& (0+255),b
  6223  000252  0100               	movlb	0	; () banked
  6224  000254  51D2               	movf	printf@width& (0+255),w,b
  6225  000256  0100               	movlb	0	; () banked
  6226  000258  5DD4               	subwf	printf@c& (0+255),w,b
  6227  00025A  0100               	movlb	0	; () banked
  6228  00025C  51D3               	movf	(printf@width+1)& (0+255),w,b
  6229  00025E  0A80               	xorlw	128
  6230  000260  0100               	movlb	0	; () banked
  6231  000262  59C7               	subwfb	??_printf& (0+255),w,b
  6232  000264  B0D8               	btfsc	status,0,c
  6233  000266  D00B               	goto	l4825
  6234                           
  6235                           ; BSR set to: 0
  6236                           ;doprnt.c: 1382: width -= c;
  6237  000268  0100               	movlb	0	; () banked
  6238  00026A  51D4               	movf	printf@c& (0+255),w,b
  6239  00026C  0100               	movlb	0	; () banked
  6240  00026E  5FD2               	subwf	printf@width& (0+255),f,b
  6241  000270  0E00               	movlw	0
  6242  000272  0100               	movlb	0	; () banked
  6243  000274  BFD4               	btfsc	printf@c& (0+255),7,b
  6244  000276  0EFF               	movlw	255
  6245  000278  0100               	movlb	0	; () banked
  6246  00027A  5BD3               	subwfb	(printf@width+1)& (0+255),f,b
  6247  00027C  D005               	goto	l4827
  6248  00027E                     l4825:
  6249                           
  6250                           ; BSR set to: 0
  6251                           ;doprnt.c: 1383: else
  6252                           ;doprnt.c: 1384: width = 0;
  6253  00027E  0E00               	movlw	0
  6254  000280  0100               	movlb	0	; () banked
  6255  000282  6FD3               	movwf	(printf@width+1)& (0+255),b
  6256  000284  0E00               	movlw	0
  6257  000286  6FD2               	movwf	printf@width& (0+255),b
  6258  000288                     l4827:
  6259                           
  6260                           ; BSR set to: 0
  6261                           ;doprnt.c: 1387: if(flag & 0x04) {
  6262  000288  0100               	movlb	0	; () banked
  6263  00028A  A5D1               	btfss	printf@flag& (0+255),2,b
  6264  00028C  D018               	goto	l4839
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;doprnt.c: 1392: if(flag & 0x03)
  6268  00028E  C0D1  F0C7         	movff	printf@flag,??_printf
  6269  000292  0E03               	movlw	3
  6270  000294  0100               	movlb	0	; () banked
  6271  000296  17C7               	andwf	??_printf& (0+255),f,b
  6272  000298  B4D8               	btfsc	status,2,c
  6273  00029A  D003               	goto	l4833
  6274                           
  6275                           ; BSR set to: 0
  6276                           ;doprnt.c: 1393: (putch('-') );
  6277  00029C  0E2D               	movlw	45
  6278  00029E  EC0C  F011         	call	_putch
  6279  0002A2                     l4833:
  6280                           
  6281                           ;doprnt.c: 1415: if(width)
  6282  0002A2  0100               	movlb	0	; () banked
  6283  0002A4  51D2               	movf	printf@width& (0+255),w,b
  6284  0002A6  0100               	movlb	0	; () banked
  6285  0002A8  11D3               	iorwf	(printf@width+1)& (0+255),w,b
  6286  0002AA  B4D8               	btfsc	status,2,c
  6287  0002AC  D025               	goto	l4849
  6288                           
  6289                           ; BSR set to: 0
  6290                           ;doprnt.c: 1417: (putch('0') );
  6291                           
  6292                           ; BSR set to: 0
  6293                           
  6294                           ;doprnt.c: 1416: do
  6295  0002AE  0E30               	movlw	48
  6296  0002B0  EC0C  F011         	call	_putch
  6297                           
  6298                           ;doprnt.c: 1418: while(--width);
  6299  0002B4  0100               	movlb	0	; () banked
  6300  0002B6  07D2               	decf	printf@width& (0+255),f,b
  6301  0002B8  A0D8               	btfss	status,0,c
  6302  0002BA  07D3               	decf	(printf@width+1)& (0+255),f,b
  6303  0002BC  D7F2               	goto	l4833
  6304  0002BE                     l4839:
  6305                           
  6306                           ; BSR set to: 0
  6307                           ;doprnt.c: 1422: {
  6308                           ;doprnt.c: 1424: if(width
  6309                           ;doprnt.c: 1428: )
  6310  0002BE  0100               	movlb	0	; () banked
  6311  0002C0  51D2               	movf	printf@width& (0+255),w,b
  6312  0002C2  0100               	movlb	0	; () banked
  6313  0002C4  11D3               	iorwf	(printf@width+1)& (0+255),w,b
  6314  0002C6  B4D8               	btfsc	status,2,c
  6315  0002C8  D00D               	goto	l4845
  6316  0002CA                     l4841:
  6317                           
  6318                           ; BSR set to: 0
  6319                           ;doprnt.c: 1430: (putch(' ') );
  6320  0002CA  0E20               	movlw	32
  6321  0002CC  EC0C  F011         	call	_putch
  6322                           
  6323                           ;doprnt.c: 1431: while(--width);
  6324  0002D0  0100               	movlb	0	; () banked
  6325  0002D2  07D2               	decf	printf@width& (0+255),f,b
  6326  0002D4  A0D8               	btfss	status,0,c
  6327  0002D6  07D3               	decf	(printf@width+1)& (0+255),f,b
  6328  0002D8  0100               	movlb	0	; () banked
  6329  0002DA  51D2               	movf	printf@width& (0+255),w,b
  6330  0002DC  0100               	movlb	0	; () banked
  6331  0002DE  11D3               	iorwf	(printf@width+1)& (0+255),w,b
  6332  0002E0  A4D8               	btfss	status,2,c
  6333  0002E2  D7F3               	goto	l4841
  6334  0002E4                     l4845:
  6335                           
  6336                           ; BSR set to: 0
  6337                           ;doprnt.c: 1438: if(flag & 0x03)
  6338  0002E4  C0D1  F0C7         	movff	printf@flag,??_printf
  6339  0002E8  0E03               	movlw	3
  6340  0002EA  0100               	movlb	0	; () banked
  6341  0002EC  17C7               	andwf	??_printf& (0+255),f,b
  6342  0002EE  B4D8               	btfsc	status,2,c
  6343  0002F0  D003               	goto	l4849
  6344                           
  6345                           ; BSR set to: 0
  6346                           ;doprnt.c: 1439: (putch('-') );
  6347  0002F2  0E2D               	movlw	45
  6348  0002F4  EC0C  F011         	call	_putch
  6349  0002F8                     l4849:
  6350                           
  6351                           ;doprnt.c: 1469: }
  6352                           ;doprnt.c: 1472: prec = c;
  6353  0002F8  C0D4  F0CE         	movff	printf@c,printf@prec
  6354                           
  6355                           ;doprnt.c: 1474: while(prec--) {
  6356  0002FC  D063               	goto	l4863
  6357  0002FE                     l4851:
  6358                           
  6359                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6360  0002FE  0100               	movlb	0	; () banked
  6361  000300  51CE               	movf	printf@prec& (0+255),w,b
  6362  000302  0D02               	mullw	2
  6363  000304  0E1C               	movlw	low _dpowers
  6364  000306  24F3               	addwf	prodl,w,c
  6365  000308  6EF6               	movwf	tblptrl,c
  6366  00030A  0EFE               	movlw	high _dpowers
  6367  00030C  20F4               	addwfc	prodh,w,c
  6368  00030E  6EF7               	movwf	tblptrh,c
  6369  000310                     	if	1	;There are 3 active tblptr bytes
  6370  000310  6AF8               	clrf	tblptru,c
  6371  000312  0E00               	movlw	low (__mediumconst shr (0+16))
  6372  000314  22F8               	addwfc	tblptru,f,c
  6373  000316                     	endif
  6374  000316  0009               	tblrd		*+
  6375  000318  CFF5 F0B3          	movff	tablat,___lwdiv@divisor
  6376  00031C  000A               	tblrd		*-
  6377  00031E  CFF5 F0B4          	movff	tablat,___lwdiv@divisor+1
  6378  000322  C0CF  F0B1         	movff	printf@val,___lwdiv@dividend
  6379  000326  C0D0  F0B2         	movff	printf@val+1,___lwdiv@dividend+1
  6380  00032A  ECD1  F00B         	call	___lwdiv	;wreg free
  6381  00032E  C0B1  F0B8         	movff	?___lwdiv,___lwmod@dividend
  6382  000332  C0B2  F0B9         	movff	?___lwdiv+1,___lwmod@dividend+1
  6383  000336  0E00               	movlw	0
  6384  000338  0100               	movlb	0	; () banked
  6385  00033A  6FBB               	movwf	(___lwmod@divisor+1)& (0+255),b
  6386  00033C  0E0A               	movlw	10
  6387  00033E  6FBA               	movwf	___lwmod@divisor& (0+255),b
  6388  000340  EC4A  F00D         	call	___lwmod	;wreg free
  6389  000344  0100               	movlb	0	; () banked
  6390  000346  51B8               	movf	?___lwmod& (0+255),w,b
  6391  000348  0F30               	addlw	48
  6392  00034A  0100               	movlb	0	; () banked
  6393  00034C  6FD4               	movwf	printf@c& (0+255),b
  6394                           
  6395                           ;doprnt.c: 1491: break;
  6396  00034E  D036               	goto	l4861
  6397  000350                     l4853:
  6398                           
  6399                           ; BSR set to: 0
  6400                           ;doprnt.c: 1499: {
  6401                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6402  000350  C0CF  F0B1         	movff	printf@val,___lwdiv@dividend
  6403  000354  C0D0  F0B2         	movff	printf@val+1,___lwdiv@dividend+1
  6404  000358  0100               	movlb	0	; () banked
  6405  00035A  51CE               	movf	printf@prec& (0+255),w,b
  6406  00035C  0D02               	mullw	2
  6407  00035E  0E26               	movlw	low _hexpowers
  6408  000360  24F3               	addwf	prodl,w,c
  6409  000362  6EF6               	movwf	tblptrl,c
  6410  000364  0EFE               	movlw	high _hexpowers
  6411  000366  20F4               	addwfc	prodh,w,c
  6412  000368  6EF7               	movwf	tblptrh,c
  6413  00036A                     	if	1	;There are 3 active tblptr bytes
  6414  00036A  6AF8               	clrf	tblptru,c
  6415  00036C  0E00               	movlw	low (__mediumconst shr (0+16))
  6416  00036E  22F8               	addwfc	tblptru,f,c
  6417  000370                     	endif
  6418  000370  0009               	tblrd		*+
  6419  000372  CFF5 F0B3          	movff	tablat,___lwdiv@divisor
  6420  000376  000A               	tblrd		*-
  6421  000378  CFF5 F0B4          	movff	tablat,___lwdiv@divisor+1
  6422  00037C  ECD1  F00B         	call	___lwdiv	;wreg free
  6423  000380  0100               	movlb	0	; () banked
  6424  000382  51B1               	movf	?___lwdiv& (0+255),w,b
  6425  000384  0B0F               	andlw	15
  6426  000386  0100               	movlb	0	; () banked
  6427  000388  6FCB               	movwf	printf@idx& (0+255),b
  6428                           
  6429                           ; BSR set to: 0
  6430                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6431  00038A  0100               	movlb	0	; () banked
  6432  00038C  51CB               	movf	printf@idx& (0+255),w,b
  6433  00038E  0D01               	mullw	1
  6434  000390  0E5E               	movlw	low STR_35
  6435  000392  24F3               	addwf	prodl,w,c
  6436  000394  6EF6               	movwf	tblptrl,c
  6437  000396  0EFE               	movlw	high STR_35
  6438  000398  20F4               	addwfc	prodh,w,c
  6439  00039A  6EF7               	movwf	tblptrh,c
  6440  00039C                     	if	1	;There are 3 active tblptr bytes
  6441  00039C  6AF8               	clrf	tblptru,c
  6442  00039E  0E00               	movlw	low (__mediumconst shr (0+16))
  6443  0003A0  22F8               	addwfc	tblptru,f,c
  6444  0003A2                     	endif
  6445  0003A2  0008               	tblrd		*
  6446  0003A4  CFF5 F0D4          	movff	tablat,printf@c
  6447                           
  6448                           ; BSR set to: 0
  6449                           ;doprnt.c: 1523: }
  6450                           
  6451                           ;doprnt.c: 1508: }
  6452                           ;doprnt.c: 1510: break;
  6453  0003A8  D009               	goto	l4861
  6454  0003AA                     l4859:
  6455  0003AA  0100               	movlb	0	; () banked
  6456  0003AC  51D1               	movf	printf@flag& (0+255),w,b
  6457  0003AE  0B80               	andlw	128
  6458                           
  6459                           ; Switch size 1, requested type "space"
  6460                           ; Number of cases is 2, Range of values is 0 to 128
  6461                           ; switch strategies available:
  6462                           ; Name         Instructions Cycles
  6463                           ; simple_byte            7     4 (average)
  6464                           ;	Chosen strategy is simple_byte
  6465  0003B0  0A00               	xorlw	0	; case 0
  6466  0003B2  B4D8               	btfsc	status,2,c
  6467  0003B4  D7A4               	goto	l4851
  6468  0003B6  0A80               	xorlw	128	; case 128
  6469  0003B8  B4D8               	btfsc	status,2,c
  6470  0003BA  D7CA               	goto	l4853
  6471  0003BC                     l4861:
  6472                           
  6473                           ; BSR set to: 0
  6474                           ;doprnt.c: 1524: (putch(c) );
  6475  0003BC  0100               	movlb	0	; () banked
  6476  0003BE  51D4               	movf	printf@c& (0+255),w,b
  6477  0003C0  EC0C  F011         	call	_putch
  6478  0003C4                     l4863:
  6479  0003C4  0100               	movlb	0	; () banked
  6480  0003C6  07CE               	decf	printf@prec& (0+255),f,b
  6481  0003C8  0100               	movlb	0	; () banked
  6482  0003CA  29CE               	incf	printf@prec& (0+255),w,b
  6483  0003CC  A4D8               	btfss	status,2,c
  6484  0003CE  D7ED               	goto	l4859
  6485  0003D0                     l4865:
  6486  0003D0  C0BF  FFF6         	movff	printf@f,tblptrl
  6487  0003D4  C0C0  FFF7         	movff	printf@f+1,tblptrh
  6488  0003D8  0100               	movlb	0	; () banked
  6489  0003DA  4BBF               	infsnz	printf@f& (0+255),f,b
  6490  0003DC  2BC0               	incf	(printf@f+1)& (0+255),f,b
  6491  0003DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6492  0003DE  6AF8               	clrf	tblptru,c
  6493  0003E0                     	endif
  6494  0003E0                     	if	0	;tblptru may be non-zero
  6495  0003E0                     	endif
  6496  0003E0  0008               	tblrd		*
  6497  0003E2  CFF5 F0D4          	movff	tablat,printf@c
  6498  0003E6  0100               	movlb	0	; () banked
  6499  0003E8  51D4               	movf	printf@c& (0+255),w,b
  6500  0003EA  B4D8               	btfsc	status,2,c
  6501  0003EC  0012               	return	
  6502  0003EE  D618               	goto	l4739
  6503  0003F0                     __end_of_printf:
  6504                           	opt stack 0
  6505                           tosu	equ	0xFFF
  6506                           tosh	equ	0xFFE
  6507                           tosl	equ	0xFFD
  6508                           pclath	equ	0xFFA
  6509                           tblptru	equ	0xFF8
  6510                           tblptrh	equ	0xFF7
  6511                           tblptrl	equ	0xFF6
  6512                           tablat	equ	0xFF5
  6513                           prodh	equ	0xFF4
  6514                           prodl	equ	0xFF3
  6515                           intcon	equ	0xFF2
  6516                           intcon3	equ	0xFF0
  6517                           postinc0	equ	0xFEE
  6518                           wreg	equ	0xFE8
  6519                           indf2	equ	0xFDF
  6520                           postinc2	equ	0xFDE
  6521                           postdec2	equ	0xFDD
  6522                           fsr2h	equ	0xFDA
  6523                           fsr2l	equ	0xFD9
  6524                           status	equ	0xFD8
  6525                           
  6526 ;; *************** function _putch *****************
  6527 ;; Defined at:
  6528 ;;		line 38 in file "lcd.c"
  6529 ;; Parameters:    Size  Location     Type
  6530 ;;  data            1    wreg     unsigned char 
  6531 ;; Auto vars:     Size  Location     Type
  6532 ;;  data            1    2[BANK0 ] unsigned char 
  6533 ;; Return value:  Size  Location     Type
  6534 ;;                  1    wreg      void 
  6535 ;; Registers used:
  6536 ;;		wreg, status,2, status,0, cstack
  6537 ;; Tracked objects:
  6538 ;;		On entry : 0/0
  6539 ;;		On exit  : 0/0
  6540 ;;		Unchanged: 0/0
  6541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6543 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6545 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6546 ;;Total ram usage:        1 bytes
  6547 ;; Hardware stack levels used:    1
  6548 ;; Hardware stack levels required when called:    6
  6549 ;; This function calls:
  6550 ;;		_lcdNibble
  6551 ;; This function is called by:
  6552 ;;		_printf
  6553 ;; This function uses a non-reentrant model
  6554 ;;
  6555                           
  6556                           	psect	text33
  6557  002218                     __ptext33:
  6558                           	opt stack 0
  6559  002218                     _putch:
  6560                           	opt stack 20
  6561                           
  6562                           ;incstack = 0
  6563                           ;putch@data stored from wreg
  6564  002218  0100               	movlb	0	; () banked
  6565  00221A  6FB3               	movwf	putch@data& (0+255),b
  6566                           
  6567                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  6568  00221C  848C               	bsf	3980,2,c	;volatile
  6569                           
  6570                           ;lcd.c: 40: lcdNibble(data);
  6571  00221E  0100               	movlb	0	; () banked
  6572  002220  51B3               	movf	putch@data& (0+255),w,b
  6573  002222  ECB2  F00C         	call	_lcdNibble
  6574  002226  0012               	return		;funcret
  6575  002228                     __end_of_putch:
  6576                           	opt stack 0
  6577                           tosu	equ	0xFFF
  6578                           tosh	equ	0xFFE
  6579                           tosl	equ	0xFFD
  6580                           pclath	equ	0xFFA
  6581                           tblptru	equ	0xFF8
  6582                           tblptrh	equ	0xFF7
  6583                           tblptrl	equ	0xFF6
  6584                           tablat	equ	0xFF5
  6585                           prodh	equ	0xFF4
  6586                           prodl	equ	0xFF3
  6587                           intcon	equ	0xFF2
  6588                           intcon3	equ	0xFF0
  6589                           postinc0	equ	0xFEE
  6590                           wreg	equ	0xFE8
  6591                           indf2	equ	0xFDF
  6592                           postinc2	equ	0xFDE
  6593                           postdec2	equ	0xFDD
  6594                           fsr2h	equ	0xFDA
  6595                           fsr2l	equ	0xFD9
  6596                           status	equ	0xFD8
  6597                           
  6598 ;; *************** function _isdigit *****************
  6599 ;; Defined at:
  6600 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/isdigit.c"
  6601 ;; Parameters:    Size  Location     Type
  6602 ;;  c               1    wreg     unsigned char 
  6603 ;; Auto vars:     Size  Location     Type
  6604 ;;  c               1    2[BANK0 ] unsigned char 
  6605 ;; Return value:  Size  Location     Type
  6606 ;;		None               void
  6607 ;; Registers used:
  6608 ;;		wreg, status,2, status,0
  6609 ;; Tracked objects:
  6610 ;;		On entry : 0/0
  6611 ;;		On exit  : 0/0
  6612 ;;		Unchanged: 0/0
  6613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6615 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6616 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6617 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6618 ;;Total ram usage:        3 bytes
  6619 ;; Hardware stack levels used:    1
  6620 ;; Hardware stack levels required when called:    5
  6621 ;; This function calls:
  6622 ;;		Nothing
  6623 ;; This function is called by:
  6624 ;;		_printf
  6625 ;; This function uses a non-reentrant model
  6626 ;;
  6627                           
  6628                           	psect	text34
  6629  001F6C                     __ptext34:
  6630                           	opt stack 0
  6631  001F6C                     _isdigit:
  6632                           	opt stack 21
  6633                           
  6634                           ;incstack = 0
  6635                           ;isdigit@c stored from wreg
  6636  001F6C  0100               	movlb	0	; () banked
  6637  001F6E  6FB3               	movwf	isdigit@c& (0+255),b
  6638  001F70  0E00               	movlw	0
  6639  001F72  0100               	movlb	0	; () banked
  6640  001F74  6FB2               	movwf	_isdigit$1437& (0+255),b
  6641                           
  6642                           ; BSR set to: 0
  6643  001F76  0E3A               	movlw	58
  6644  001F78  0100               	movlb	0	; () banked
  6645  001F7A  61B3               	cpfslt	isdigit@c& (0+255),b
  6646  001F7C  D007               	goto	l4675
  6647                           
  6648                           ; BSR set to: 0
  6649  001F7E  0E2F               	movlw	47
  6650  001F80  0100               	movlb	0	; () banked
  6651  001F82  65B3               	cpfsgt	isdigit@c& (0+255),b
  6652  001F84  D003               	goto	l4675
  6653                           
  6654                           ; BSR set to: 0
  6655  001F86  0E01               	movlw	1
  6656  001F88  0100               	movlb	0	; () banked
  6657  001F8A  6FB2               	movwf	_isdigit$1437& (0+255),b
  6658  001F8C                     l4675:
  6659                           
  6660                           ; BSR set to: 0
  6661  001F8C  C0B2  F0B1         	movff	_isdigit$1437,??_isdigit
  6662  001F90  0100               	movlb	0	; () banked
  6663  001F92  31B1               	rrcf	??_isdigit& (0+255),w,b
  6664  001F94  0012               	return	
  6665  001F96                     __end_of_isdigit:
  6666                           	opt stack 0
  6667                           tosu	equ	0xFFF
  6668                           tosh	equ	0xFFE
  6669                           tosl	equ	0xFFD
  6670                           pclath	equ	0xFFA
  6671                           tblptru	equ	0xFF8
  6672                           tblptrh	equ	0xFF7
  6673                           tblptrl	equ	0xFF6
  6674                           tablat	equ	0xFF5
  6675                           prodh	equ	0xFF4
  6676                           prodl	equ	0xFF3
  6677                           intcon	equ	0xFF2
  6678                           intcon3	equ	0xFF0
  6679                           postinc0	equ	0xFEE
  6680                           wreg	equ	0xFE8
  6681                           indf2	equ	0xFDF
  6682                           postinc2	equ	0xFDE
  6683                           postdec2	equ	0xFDD
  6684                           fsr2h	equ	0xFDA
  6685                           fsr2l	equ	0xFD9
  6686                           status	equ	0xFD8
  6687                           
  6688 ;; *************** function ___lwmod *****************
  6689 ;; Defined at:
  6690 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
  6691 ;; Parameters:    Size  Location     Type
  6692 ;;  dividend        2    7[BANK0 ] unsigned int 
  6693 ;;  divisor         2    9[BANK0 ] unsigned int 
  6694 ;; Auto vars:     Size  Location     Type
  6695 ;;  counter         1   11[BANK0 ] unsigned char 
  6696 ;; Return value:  Size  Location     Type
  6697 ;;                  2    7[BANK0 ] unsigned int 
  6698 ;; Registers used:
  6699 ;;		wreg, status,2, status,0
  6700 ;; Tracked objects:
  6701 ;;		On entry : 0/0
  6702 ;;		On exit  : 0/0
  6703 ;;		Unchanged: 0/0
  6704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6705 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6706 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6708 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6709 ;;Total ram usage:        5 bytes
  6710 ;; Hardware stack levels used:    1
  6711 ;; Hardware stack levels required when called:    5
  6712 ;; This function calls:
  6713 ;;		Nothing
  6714 ;; This function is called by:
  6715 ;;		_printf
  6716 ;; This function uses a non-reentrant model
  6717 ;;
  6718                           
  6719                           	psect	text35
  6720  001A94                     __ptext35:
  6721                           	opt stack 0
  6722  001A94                     ___lwmod:
  6723                           	opt stack 21
  6724                           
  6725                           ; BSR set to: 0
  6726                           ;incstack = 0
  6727  001A94  0100               	movlb	0	; () banked
  6728  001A96  51BA               	movf	___lwmod@divisor& (0+255),w,b
  6729  001A98  0100               	movlb	0	; () banked
  6730  001A9A  11BB               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  6731  001A9C  B4D8               	btfsc	status,2,c
  6732  001A9E  D026               	goto	l1176
  6733                           
  6734                           ; BSR set to: 0
  6735  001AA0  0E01               	movlw	1
  6736  001AA2  0100               	movlb	0	; () banked
  6737  001AA4  6FBC               	movwf	___lwmod@counter& (0+255),b
  6738  001AA6  D006               	goto	l4713
  6739  001AA8                     l4711:
  6740                           
  6741                           ; BSR set to: 0
  6742  001AA8  0100               	movlb	0	; () banked
  6743  001AAA  90D8               	bcf	status,0,c
  6744  001AAC  37BA               	rlcf	___lwmod@divisor& (0+255),f,b
  6745  001AAE  37BB               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  6746  001AB0  0100               	movlb	0	; () banked
  6747  001AB2  2BBC               	incf	___lwmod@counter& (0+255),f,b
  6748  001AB4                     l4713:
  6749                           
  6750                           ; BSR set to: 0
  6751  001AB4  0100               	movlb	0	; () banked
  6752  001AB6  AFBB               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  6753  001AB8  D7F7               	goto	l4711
  6754  001ABA                     l4715:
  6755                           
  6756                           ; BSR set to: 0
  6757  001ABA  0100               	movlb	0	; () banked
  6758  001ABC  51BA               	movf	___lwmod@divisor& (0+255),w,b
  6759  001ABE  0100               	movlb	0	; () banked
  6760  001AC0  5DB8               	subwf	___lwmod@dividend& (0+255),w,b
  6761  001AC2  0100               	movlb	0	; () banked
  6762  001AC4  51BB               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6763  001AC6  0100               	movlb	0	; () banked
  6764  001AC8  59B9               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  6765  001ACA  A0D8               	btfss	status,0,c
  6766  001ACC  D008               	goto	l4719
  6767                           
  6768                           ; BSR set to: 0
  6769  001ACE  0100               	movlb	0	; () banked
  6770  001AD0  51BA               	movf	___lwmod@divisor& (0+255),w,b
  6771  001AD2  0100               	movlb	0	; () banked
  6772  001AD4  5FB8               	subwf	___lwmod@dividend& (0+255),f,b
  6773  001AD6  0100               	movlb	0	; () banked
  6774  001AD8  51BB               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6775  001ADA  0100               	movlb	0	; () banked
  6776  001ADC  5BB9               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  6777  001ADE                     l4719:
  6778                           
  6779                           ; BSR set to: 0
  6780  001ADE  0100               	movlb	0	; () banked
  6781  001AE0  90D8               	bcf	status,0,c
  6782  001AE2  33BB               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  6783  001AE4  33BA               	rrcf	___lwmod@divisor& (0+255),f,b
  6784                           
  6785                           ; BSR set to: 0
  6786  001AE6  0100               	movlb	0	; () banked
  6787  001AE8  2FBC               	decfsz	___lwmod@counter& (0+255),f,b
  6788  001AEA  D7E7               	goto	l4715
  6789  001AEC                     l1176:
  6790                           
  6791                           ; BSR set to: 0
  6792  001AEC  C0B8  F0B8         	movff	___lwmod@dividend,?___lwmod
  6793  001AF0  C0B9  F0B9         	movff	___lwmod@dividend+1,?___lwmod+1
  6794                           
  6795                           ; BSR set to: 0
  6796  001AF4  0012               	return		;funcret
  6797  001AF6                     __end_of___lwmod:
  6798                           	opt stack 0
  6799                           tosu	equ	0xFFF
  6800                           tosh	equ	0xFFE
  6801                           tosl	equ	0xFFD
  6802                           pclath	equ	0xFFA
  6803                           tblptru	equ	0xFF8
  6804                           tblptrh	equ	0xFF7
  6805                           tblptrl	equ	0xFF6
  6806                           tablat	equ	0xFF5
  6807                           prodh	equ	0xFF4
  6808                           prodl	equ	0xFF3
  6809                           intcon	equ	0xFF2
  6810                           intcon3	equ	0xFF0
  6811                           postinc0	equ	0xFEE
  6812                           wreg	equ	0xFE8
  6813                           indf2	equ	0xFDF
  6814                           postinc2	equ	0xFDE
  6815                           postdec2	equ	0xFDD
  6816                           fsr2h	equ	0xFDA
  6817                           fsr2l	equ	0xFD9
  6818                           status	equ	0xFD8
  6819                           
  6820 ;; *************** function ___lwdiv *****************
  6821 ;; Defined at:
  6822 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  6823 ;; Parameters:    Size  Location     Type
  6824 ;;  dividend        2    0[BANK0 ] unsigned int 
  6825 ;;  divisor         2    2[BANK0 ] unsigned int 
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;  quotient        2    5[BANK0 ] unsigned int 
  6828 ;;  counter         1    4[BANK0 ] unsigned char 
  6829 ;; Return value:  Size  Location     Type
  6830 ;;                  2    0[BANK0 ] unsigned int 
  6831 ;; Registers used:
  6832 ;;		wreg, status,2, status,0
  6833 ;; Tracked objects:
  6834 ;;		On entry : 0/0
  6835 ;;		On exit  : 0/0
  6836 ;;		Unchanged: 0/0
  6837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6838 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6839 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6841 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6842 ;;Total ram usage:        7 bytes
  6843 ;; Hardware stack levels used:    1
  6844 ;; Hardware stack levels required when called:    5
  6845 ;; This function calls:
  6846 ;;		Nothing
  6847 ;; This function is called by:
  6848 ;;		_printf
  6849 ;; This function uses a non-reentrant model
  6850 ;;
  6851                           
  6852                           	psect	text36
  6853  0017A2                     __ptext36:
  6854                           	opt stack 0
  6855  0017A2                     ___lwdiv:
  6856                           	opt stack 21
  6857                           
  6858                           ; BSR set to: 0
  6859                           ;incstack = 0
  6860  0017A2  0E00               	movlw	0
  6861  0017A4  0100               	movlb	0	; () banked
  6862  0017A6  6FB7               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6863  0017A8  0E00               	movlw	0
  6864  0017AA  6FB6               	movwf	___lwdiv@quotient& (0+255),b
  6865                           
  6866                           ; BSR set to: 0
  6867  0017AC  0100               	movlb	0	; () banked
  6868  0017AE  51B3               	movf	___lwdiv@divisor& (0+255),w,b
  6869  0017B0  0100               	movlb	0	; () banked
  6870  0017B2  11B4               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  6871  0017B4  B4D8               	btfsc	status,2,c
  6872  0017B6  D02C               	goto	l1166
  6873                           
  6874                           ; BSR set to: 0
  6875  0017B8  0E01               	movlw	1
  6876  0017BA  0100               	movlb	0	; () banked
  6877  0017BC  6FB5               	movwf	___lwdiv@counter& (0+255),b
  6878  0017BE  D006               	goto	l4693
  6879  0017C0                     l4691:
  6880                           
  6881                           ; BSR set to: 0
  6882  0017C0  0100               	movlb	0	; () banked
  6883  0017C2  90D8               	bcf	status,0,c
  6884  0017C4  37B3               	rlcf	___lwdiv@divisor& (0+255),f,b
  6885  0017C6  37B4               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6886  0017C8  0100               	movlb	0	; () banked
  6887  0017CA  2BB5               	incf	___lwdiv@counter& (0+255),f,b
  6888  0017CC                     l4693:
  6889                           
  6890                           ; BSR set to: 0
  6891  0017CC  0100               	movlb	0	; () banked
  6892  0017CE  AFB4               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6893  0017D0  D7F7               	goto	l4691
  6894  0017D2                     l4695:
  6895                           
  6896                           ; BSR set to: 0
  6897  0017D2  0100               	movlb	0	; () banked
  6898  0017D4  90D8               	bcf	status,0,c
  6899  0017D6  37B6               	rlcf	___lwdiv@quotient& (0+255),f,b
  6900  0017D8  37B7               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6901                           
  6902                           ; BSR set to: 0
  6903  0017DA  0100               	movlb	0	; () banked
  6904  0017DC  51B3               	movf	___lwdiv@divisor& (0+255),w,b
  6905  0017DE  0100               	movlb	0	; () banked
  6906  0017E0  5DB1               	subwf	___lwdiv@dividend& (0+255),w,b
  6907  0017E2  0100               	movlb	0	; () banked
  6908  0017E4  51B4               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6909  0017E6  0100               	movlb	0	; () banked
  6910  0017E8  59B2               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6911  0017EA  A0D8               	btfss	status,0,c
  6912  0017EC  D00A               	goto	l4703
  6913                           
  6914                           ; BSR set to: 0
  6915  0017EE  0100               	movlb	0	; () banked
  6916  0017F0  51B3               	movf	___lwdiv@divisor& (0+255),w,b
  6917  0017F2  0100               	movlb	0	; () banked
  6918  0017F4  5FB1               	subwf	___lwdiv@dividend& (0+255),f,b
  6919  0017F6  0100               	movlb	0	; () banked
  6920  0017F8  51B4               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6921  0017FA  0100               	movlb	0	; () banked
  6922  0017FC  5BB2               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  6923                           
  6924                           ; BSR set to: 0
  6925  0017FE  0100               	movlb	0	; () banked
  6926  001800  81B6               	bsf	___lwdiv@quotient& (0+255),0,b
  6927  001802                     l4703:
  6928                           
  6929                           ; BSR set to: 0
  6930  001802  0100               	movlb	0	; () banked
  6931  001804  90D8               	bcf	status,0,c
  6932  001806  33B4               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6933  001808  33B3               	rrcf	___lwdiv@divisor& (0+255),f,b
  6934                           
  6935                           ; BSR set to: 0
  6936  00180A  0100               	movlb	0	; () banked
  6937  00180C  2FB5               	decfsz	___lwdiv@counter& (0+255),f,b
  6938  00180E  D7E1               	goto	l4695
  6939  001810                     l1166:
  6940                           
  6941                           ; BSR set to: 0
  6942  001810  C0B6  F0B1         	movff	___lwdiv@quotient,?___lwdiv
  6943  001814  C0B7  F0B2         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6944                           
  6945                           ; BSR set to: 0
  6946  001818  0012               	return		;funcret
  6947  00181A                     __end_of___lwdiv:
  6948                           	opt stack 0
  6949                           tosu	equ	0xFFF
  6950                           tosh	equ	0xFFE
  6951                           tosl	equ	0xFFD
  6952                           pclath	equ	0xFFA
  6953                           tblptru	equ	0xFF8
  6954                           tblptrh	equ	0xFF7
  6955                           tblptrl	equ	0xFF6
  6956                           tablat	equ	0xFF5
  6957                           prodh	equ	0xFF4
  6958                           prodl	equ	0xFF3
  6959                           intcon	equ	0xFF2
  6960                           intcon3	equ	0xFF0
  6961                           postinc0	equ	0xFEE
  6962                           wreg	equ	0xFE8
  6963                           indf2	equ	0xFDF
  6964                           postinc2	equ	0xFDE
  6965                           postdec2	equ	0xFDD
  6966                           fsr2h	equ	0xFDA
  6967                           fsr2l	equ	0xFD9
  6968                           status	equ	0xFD8
  6969                           
  6970 ;; *************** function _initLCD *****************
  6971 ;; Defined at:
  6972 ;;		line 22 in file "lcd.c"
  6973 ;; Parameters:    Size  Location     Type
  6974 ;;		None
  6975 ;; Auto vars:     Size  Location     Type
  6976 ;;		None
  6977 ;; Return value:  Size  Location     Type
  6978 ;;                  1    wreg      void 
  6979 ;; Registers used:
  6980 ;;		wreg, status,2, status,0, cstack
  6981 ;; Tracked objects:
  6982 ;;		On entry : 0/0
  6983 ;;		On exit  : 0/0
  6984 ;;		Unchanged: 0/0
  6985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6988 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6989 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6990 ;;Total ram usage:        1 bytes
  6991 ;; Hardware stack levels used:    1
  6992 ;; Hardware stack levels required when called:    7
  6993 ;; This function calls:
  6994 ;;		_lcdInst
  6995 ;; This function is called by:
  6996 ;;		_bottom_rocker_initial
  6997 ;;		_bottom_rocker_idle
  6998 ;;		_bottom_rocker_release
  6999 ;;		_bottom_rocker_restore
  7000 ;;		_main
  7001 ;;		_top_rocker_motor_cw
  7002 ;;		_standby
  7003 ;;		_startSorting
  7004 ;;		_initialization
  7005 ;;		_results
  7006 ;;		_top_rocker_idle
  7007 ;;		_solenoids_back
  7008 ;;		_top_rocker_release
  7009 ;;		_top_rocker_restore
  7010 ;;		_top_distribution_initial
  7011 ;; This function uses a non-reentrant model
  7012 ;;
  7013                           
  7014                           	psect	text37
  7015  001D5E                     __ptext37:
  7016                           	opt stack 0
  7017  001D5E                     _initLCD:
  7018                           	opt stack 20
  7019                           
  7020                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  7021                           
  7022                           ; BSR set to: 0
  7023                           ;incstack = 0
  7024  001D5E  0E31               	movlw	49
  7025  001D60  0100               	movlb	0	; () banked
  7026  001D62  6FB4               	movwf	??_initLCD& (0+255),b
  7027  001D64  0EB2               	movlw	178
  7028  001D66                     u5517:
  7029  001D66  2EE8               	decfsz	wreg,f,c
  7030  001D68  D7FE               	bra	u5517
  7031  001D6A  2FB4               	decfsz	??_initLCD& (0+255),f,b
  7032  001D6C  D7FC               	bra	u5517
  7033  001D6E  F000               	nop	
  7034                           
  7035                           ;lcd.c: 24: lcdInst(0b00110011);
  7036  001D70  0E33               	movlw	51
  7037  001D72  EC14  F011         	call	_lcdInst
  7038                           
  7039                           ;lcd.c: 25: lcdInst(0b00110010);
  7040  001D76  0E32               	movlw	50
  7041  001D78  EC14  F011         	call	_lcdInst
  7042                           
  7043                           ;lcd.c: 26: lcdInst(0b00101000);
  7044  001D7C  0E28               	movlw	40
  7045  001D7E  EC14  F011         	call	_lcdInst
  7046                           
  7047                           ;lcd.c: 27: lcdInst(0b00001111);
  7048  001D82  0E0F               	movlw	15
  7049  001D84  EC14  F011         	call	_lcdInst
  7050                           
  7051                           ;lcd.c: 28: lcdInst(0b00000110);
  7052  001D88  0E06               	movlw	6
  7053  001D8A  EC14  F011         	call	_lcdInst
  7054                           
  7055                           ;lcd.c: 29: lcdInst(0b00000001);
  7056  001D8E  0E01               	movlw	1
  7057  001D90  EC14  F011         	call	_lcdInst
  7058                           
  7059                           ;lcd.c: 30: _delay((unsigned long)((15)*(10000000/4000.0)));
  7060  001D94  0E31               	movlw	49
  7061  001D96  0100               	movlb	0	; () banked
  7062  001D98  6FB4               	movwf	??_initLCD& (0+255),b
  7063  001D9A  0EB2               	movlw	178
  7064  001D9C                     u5527:
  7065  001D9C  2EE8               	decfsz	wreg,f,c
  7066  001D9E  D7FE               	bra	u5527
  7067  001DA0  2FB4               	decfsz	??_initLCD& (0+255),f,b
  7068  001DA2  D7FC               	bra	u5527
  7069  001DA4  F000               	nop	
  7070  001DA6  0012               	return		;funcret
  7071  001DA8                     __end_of_initLCD:
  7072                           	opt stack 0
  7073                           tosu	equ	0xFFF
  7074                           tosh	equ	0xFFE
  7075                           tosl	equ	0xFFD
  7076                           pclath	equ	0xFFA
  7077                           tblptru	equ	0xFF8
  7078                           tblptrh	equ	0xFF7
  7079                           tblptrl	equ	0xFF6
  7080                           tablat	equ	0xFF5
  7081                           prodh	equ	0xFF4
  7082                           prodl	equ	0xFF3
  7083                           intcon	equ	0xFF2
  7084                           intcon3	equ	0xFF0
  7085                           postinc0	equ	0xFEE
  7086                           wreg	equ	0xFE8
  7087                           indf2	equ	0xFDF
  7088                           postinc2	equ	0xFDE
  7089                           postdec2	equ	0xFDD
  7090                           fsr2h	equ	0xFDA
  7091                           fsr2l	equ	0xFD9
  7092                           status	equ	0xFD8
  7093                           
  7094 ;; *************** function _lcdInst *****************
  7095 ;; Defined at:
  7096 ;;		line 33 in file "lcd.c"
  7097 ;; Parameters:    Size  Location     Type
  7098 ;;  data            1    wreg     unsigned char 
  7099 ;; Auto vars:     Size  Location     Type
  7100 ;;  data            1    2[BANK0 ] unsigned char 
  7101 ;; Return value:  Size  Location     Type
  7102 ;;                  1    wreg      void 
  7103 ;; Registers used:
  7104 ;;		wreg, status,2, status,0, cstack
  7105 ;; Tracked objects:
  7106 ;;		On entry : 0/0
  7107 ;;		On exit  : 0/0
  7108 ;;		Unchanged: 0/0
  7109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7111 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7113 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7114 ;;Total ram usage:        1 bytes
  7115 ;; Hardware stack levels used:    1
  7116 ;; Hardware stack levels required when called:    6
  7117 ;; This function calls:
  7118 ;;		_lcdNibble
  7119 ;; This function is called by:
  7120 ;;		_bottom_rocker_initial
  7121 ;;		_bottom_rocker_idle
  7122 ;;		_bottom_rocker_release
  7123 ;;		_bottom_rocker_restore
  7124 ;;		_initLCD
  7125 ;;		_top_rocker_motor_cw
  7126 ;;		_standby
  7127 ;;		_startSorting
  7128 ;;		_initialization
  7129 ;;		_results
  7130 ;;		_top_rocker_idle
  7131 ;;		_solenoids_back
  7132 ;;		_top_rocker_release
  7133 ;;		_top_rocker_restore
  7134 ;;		_top_distribution_initial
  7135 ;; This function uses a non-reentrant model
  7136 ;;
  7137                           
  7138                           	psect	text38
  7139  002228                     __ptext38:
  7140                           	opt stack 0
  7141  002228                     _lcdInst:
  7142                           	opt stack 21
  7143                           
  7144                           ;incstack = 0
  7145                           ;lcdInst@data stored from wreg
  7146  002228  0100               	movlb	0	; () banked
  7147  00222A  6FB3               	movwf	lcdInst@data& (0+255),b
  7148                           
  7149                           ;lcd.c: 34: LATDbits.LATD2 = 0;
  7150  00222C  948C               	bcf	3980,2,c	;volatile
  7151                           
  7152                           ;lcd.c: 35: lcdNibble(data);
  7153  00222E  0100               	movlb	0	; () banked
  7154  002230  51B3               	movf	lcdInst@data& (0+255),w,b
  7155  002232  ECB2  F00C         	call	_lcdNibble
  7156  002236  0012               	return		;funcret
  7157  002238                     __end_of_lcdInst:
  7158                           	opt stack 0
  7159                           tosu	equ	0xFFF
  7160                           tosh	equ	0xFFE
  7161                           tosl	equ	0xFFD
  7162                           pclath	equ	0xFFA
  7163                           tblptru	equ	0xFF8
  7164                           tblptrh	equ	0xFF7
  7165                           tblptrl	equ	0xFF6
  7166                           tablat	equ	0xFF5
  7167                           prodh	equ	0xFF4
  7168                           prodl	equ	0xFF3
  7169                           intcon	equ	0xFF2
  7170                           intcon3	equ	0xFF0
  7171                           postinc0	equ	0xFEE
  7172                           wreg	equ	0xFE8
  7173                           indf2	equ	0xFDF
  7174                           postinc2	equ	0xFDE
  7175                           postdec2	equ	0xFDD
  7176                           fsr2h	equ	0xFDA
  7177                           fsr2l	equ	0xFD9
  7178                           status	equ	0xFD8
  7179                           
  7180 ;; *************** function _lcdNibble *****************
  7181 ;; Defined at:
  7182 ;;		line 43 in file "lcd.c"
  7183 ;; Parameters:    Size  Location     Type
  7184 ;;  data            1    wreg     unsigned char 
  7185 ;; Auto vars:     Size  Location     Type
  7186 ;;  data            1    1[BANK0 ] unsigned char 
  7187 ;;  temp            1    0[BANK0 ] unsigned char 
  7188 ;; Return value:  Size  Location     Type
  7189 ;;                  1    wreg      void 
  7190 ;; Registers used:
  7191 ;;		wreg, status,2, status,0
  7192 ;; Tracked objects:
  7193 ;;		On entry : 0/0
  7194 ;;		On exit  : 0/0
  7195 ;;		Unchanged: 0/0
  7196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7198 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7200 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7201 ;;Total ram usage:        2 bytes
  7202 ;; Hardware stack levels used:    1
  7203 ;; Hardware stack levels required when called:    5
  7204 ;; This function calls:
  7205 ;;		Nothing
  7206 ;; This function is called by:
  7207 ;;		_lcdInst
  7208 ;;		_putch
  7209 ;; This function uses a non-reentrant model
  7210 ;;
  7211                           
  7212                           	psect	text39
  7213  001964                     __ptext39:
  7214                           	opt stack 0
  7215  001964                     _lcdNibble:
  7216                           	opt stack 20
  7217                           
  7218                           ;incstack = 0
  7219                           ;lcdNibble@data stored from wreg
  7220  001964  0100               	movlb	0	; () banked
  7221  001966  6FB2               	movwf	lcdNibble@data& (0+255),b
  7222                           
  7223                           ;lcd.c: 45: char temp = data & 0xF0;
  7224  001968  0100               	movlb	0	; () banked
  7225  00196A  51B2               	movf	lcdNibble@data& (0+255),w,b
  7226  00196C  0BF0               	andlw	240
  7227  00196E  0100               	movlb	0	; () banked
  7228  001970  6FB1               	movwf	lcdNibble@temp& (0+255),b
  7229                           
  7230                           ;lcd.c: 46: LATD = LATD & 0x0F;
  7231  001972  508C               	movf	3980,w,c	;volatile
  7232  001974  0B0F               	andlw	15
  7233  001976  6E8C               	movwf	3980,c	;volatile
  7234                           
  7235                           ;lcd.c: 47: LATD = temp | LATD;
  7236  001978  0100               	movlb	0	; () banked
  7237  00197A  51B1               	movf	lcdNibble@temp& (0+255),w,b
  7238  00197C  108C               	iorwf	3980,w,c	;volatile
  7239  00197E  6E8C               	movwf	3980,c	;volatile
  7240                           
  7241                           ; BSR set to: 0
  7242                           ;lcd.c: 49: LATDbits.LATD3 = 0;
  7243  001980  968C               	bcf	3980,3,c	;volatile
  7244                           
  7245                           ; BSR set to: 0
  7246                           ;lcd.c: 50: _delay((unsigned long)((25)*(10000000/4000000.0)));
  7247  001982  0E14               	movlw	20
  7248  001984                     u5537:
  7249  001984  2EE8               	decfsz	wreg,f,c
  7250  001986  D7FE               	bra	u5537
  7251  001988  D000               	nop2	
  7252                           
  7253                           ;lcd.c: 51: LATDbits.LATD3 = 1;
  7254  00198A  868C               	bsf	3980,3,c	;volatile
  7255                           
  7256                           ;lcd.c: 52: _delay((unsigned long)((25)*(10000000/4000000.0)));
  7257  00198C  0E14               	movlw	20
  7258  00198E                     u5547:
  7259  00198E  2EE8               	decfsz	wreg,f,c
  7260  001990  D7FE               	bra	u5547
  7261  001992  D000               	nop2	
  7262                           
  7263                           ;lcd.c: 54: data = data << 4;
  7264  001994  0100               	movlb	0	; () banked
  7265  001996  39B2               	swapf	lcdNibble@data& (0+255),w,b
  7266  001998  0BF0               	andlw	240
  7267  00199A  0100               	movlb	0	; () banked
  7268  00199C  6FB2               	movwf	lcdNibble@data& (0+255),b
  7269                           
  7270                           ;lcd.c: 56: temp = data & 0xF0;
  7271  00199E  0100               	movlb	0	; () banked
  7272  0019A0  51B2               	movf	lcdNibble@data& (0+255),w,b
  7273  0019A2  0BF0               	andlw	240
  7274  0019A4  0100               	movlb	0	; () banked
  7275  0019A6  6FB1               	movwf	lcdNibble@temp& (0+255),b
  7276                           
  7277                           ;lcd.c: 57: LATD = LATD & 0x0F;
  7278  0019A8  508C               	movf	3980,w,c	;volatile
  7279  0019AA  0B0F               	andlw	15
  7280  0019AC  6E8C               	movwf	3980,c	;volatile
  7281                           
  7282                           ;lcd.c: 58: LATD = temp | LATD;
  7283  0019AE  0100               	movlb	0	; () banked
  7284  0019B0  51B1               	movf	lcdNibble@temp& (0+255),w,b
  7285  0019B2  108C               	iorwf	3980,w,c	;volatile
  7286  0019B4  6E8C               	movwf	3980,c	;volatile
  7287                           
  7288                           ; BSR set to: 0
  7289                           ;lcd.c: 60: LATDbits.LATD3 = 0;
  7290  0019B6  968C               	bcf	3980,3,c	;volatile
  7291                           
  7292                           ; BSR set to: 0
  7293                           ;lcd.c: 61: _delay((unsigned long)((25)*(10000000/4000000.0)));
  7294  0019B8  0E14               	movlw	20
  7295  0019BA                     u5557:
  7296  0019BA  2EE8               	decfsz	wreg,f,c
  7297  0019BC  D7FE               	bra	u5557
  7298  0019BE  D000               	nop2	
  7299                           
  7300                           ;lcd.c: 62: LATDbits.LATD3 = 1;
  7301  0019C0  868C               	bsf	3980,3,c	;volatile
  7302                           
  7303                           ;lcd.c: 63: _delay((unsigned long)((25)*(10000000/4000000.0)));
  7304  0019C2  0E14               	movlw	20
  7305  0019C4                     u5567:
  7306  0019C4  2EE8               	decfsz	wreg,f,c
  7307  0019C6  D7FE               	bra	u5567
  7308  0019C8  D000               	nop2	
  7309  0019CA  0012               	return		;funcret
  7310  0019CC                     __end_of_lcdNibble:
  7311                           	opt stack 0
  7312                           tosu	equ	0xFFF
  7313                           tosh	equ	0xFFE
  7314                           tosl	equ	0xFFD
  7315                           pclath	equ	0xFFA
  7316                           tblptru	equ	0xFF8
  7317                           tblptrh	equ	0xFF7
  7318                           tblptrl	equ	0xFF6
  7319                           tablat	equ	0xFF5
  7320                           prodh	equ	0xFF4
  7321                           prodl	equ	0xFF3
  7322                           intcon	equ	0xFF2
  7323                           intcon3	equ	0xFF0
  7324                           postinc0	equ	0xFEE
  7325                           wreg	equ	0xFE8
  7326                           indf2	equ	0xFDF
  7327                           postinc2	equ	0xFDE
  7328                           postdec2	equ	0xFDD
  7329                           fsr2h	equ	0xFDA
  7330                           fsr2l	equ	0xFD9
  7331                           status	equ	0xFD8
  7332                           
  7333 ;; *************** function _done_sorting *****************
  7334 ;; Defined at:
  7335 ;;		line 161 in file "operation.c"
  7336 ;; Parameters:    Size  Location     Type
  7337 ;;		None
  7338 ;; Auto vars:     Size  Location     Type
  7339 ;;  i               1   23[BANK0 ] unsigned char 
  7340 ;;  End_time        2   24[BANK0 ] unsigned char [2]
  7341 ;;  total_second    2   21[BANK0 ] int 
  7342 ;; Return value:  Size  Location     Type
  7343 ;;                  2   14[BANK0 ] int 
  7344 ;; Registers used:
  7345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7346 ;; Tracked objects:
  7347 ;;		On entry : 0/0
  7348 ;;		On exit  : 0/0
  7349 ;;		Unchanged: 0/0
  7350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7351 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7352 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7353 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7354 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7355 ;;Total ram usage:       12 bytes
  7356 ;; Hardware stack levels used:    1
  7357 ;; Hardware stack levels required when called:    7
  7358 ;; This function calls:
  7359 ;;		_I2C_Master_Read
  7360 ;;		_I2C_Master_Start
  7361 ;;		_I2C_Master_Stop
  7362 ;;		_I2C_Master_Write
  7363 ;;		___awdiv
  7364 ;;		___wmul
  7365 ;; This function is called by:
  7366 ;;		_main
  7367 ;; This function uses a non-reentrant model
  7368 ;;
  7369                           
  7370                           	psect	text40
  7371  0009FE                     __ptext40:
  7372                           	opt stack 0
  7373  0009FE                     _done_sorting:
  7374                           	opt stack 23
  7375                           
  7376                           ;operation.c: 163: fsm1 = 0;
  7377                           
  7378                           ;incstack = 0
  7379  0009FE  0E00               	movlw	0
  7380  000A00  0100               	movlb	0	; () banked
  7381  000A02  6F92               	movwf	(_fsm1+1)& (0+255),b
  7382  000A04  0E00               	movlw	0
  7383  000A06  6F91               	movwf	_fsm1& (0+255),b
  7384                           
  7385                           ;operation.c: 164: fsm2 = 0;
  7386  000A08  0E00               	movlw	0
  7387  000A0A  0100               	movlb	0	; () banked
  7388  000A0C  6FA4               	movwf	(_fsm2+1)& (0+255),b
  7389  000A0E  0E00               	movlw	0
  7390  000A10  6FA3               	movwf	_fsm2& (0+255),b
  7391                           
  7392                           ; BSR set to: 0
  7393                           ;operation.c: 166: signed int total_second;
  7394                           ;operation.c: 167: unsigned char End_time[2];
  7395                           ;operation.c: 170: I2C_Master_Start();
  7396  000A12  EC38  F011         	call	_I2C_Master_Start	;wreg free
  7397                           
  7398                           ;operation.c: 171: I2C_Master_Write(0b11010000);
  7399  000A16  0E00               	movlw	0
  7400  000A18  0100               	movlb	0	; () banked
  7401  000A1A  6FB3               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7402  000A1C  0ED0               	movlw	208
  7403  000A1E  6FB2               	movwf	I2C_Master_Write@d& (0+255),b
  7404  000A20  EC2F  F011         	call	_I2C_Master_Write	;wreg free
  7405                           
  7406                           ;operation.c: 172: I2C_Master_Write(0x00);
  7407  000A24  0E00               	movlw	0
  7408  000A26  0100               	movlb	0	; () banked
  7409  000A28  6FB3               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7410  000A2A  0E00               	movlw	0
  7411  000A2C  6FB2               	movwf	I2C_Master_Write@d& (0+255),b
  7412  000A2E  EC2F  F011         	call	_I2C_Master_Write	;wreg free
  7413                           
  7414                           ;operation.c: 173: I2C_Master_Stop();
  7415  000A32  EC34  F011         	call	_I2C_Master_Stop	;wreg free
  7416                           
  7417                           ;operation.c: 176: I2C_Master_Start();
  7418  000A36  EC38  F011         	call	_I2C_Master_Start	;wreg free
  7419                           
  7420                           ;operation.c: 177: I2C_Master_Write(0b11010001);
  7421  000A3A  0E00               	movlw	0
  7422  000A3C  0100               	movlb	0	; () banked
  7423  000A3E  6FB3               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7424  000A40  0ED1               	movlw	209
  7425  000A42  6FB2               	movwf	I2C_Master_Write@d& (0+255),b
  7426  000A44  EC2F  F011         	call	_I2C_Master_Write	;wreg free
  7427                           
  7428                           ;operation.c: 178: for(unsigned char i=0;i<0x06;i++){
  7429  000A48  0E00               	movlw	0
  7430  000A4A  0100               	movlb	0	; () banked
  7431  000A4C  6FC8               	movwf	done_sorting@i& (0+255),b
  7432  000A4E                     l5605:
  7433                           
  7434                           ; BSR set to: 0
  7435  000A4E  0E05               	movlw	5
  7436  000A50  0100               	movlb	0	; () banked
  7437  000A52  65C8               	cpfsgt	done_sorting@i& (0+255),b
  7438  000A54  D001               	goto	l5609
  7439  000A56  D010               	goto	l5615
  7440  000A58                     l5609:
  7441                           
  7442                           ; BSR set to: 0
  7443                           ;operation.c: 179: time[i] = I2C_Master_Read(1);
  7444  000A58  0100               	movlb	0	; () banked
  7445  000A5A  51C8               	movf	done_sorting@i& (0+255),w,b
  7446  000A5C  0D01               	mullw	1
  7447  000A5E  0E80               	movlw	low _time
  7448  000A60  24F3               	addwf	prodl,w,c
  7449  000A62  6ED9               	movwf	fsr2l,c
  7450  000A64  0E00               	movlw	high _time
  7451  000A66  20F4               	addwfc	prodh,w,c
  7452  000A68  6EDA               	movwf	fsr2h,c
  7453  000A6A  0E01               	movlw	1
  7454  000A6C  EC9F  F00F         	call	_I2C_Master_Read
  7455  000A70  6EDF               	movwf	indf2,c
  7456  000A72  0100               	movlb	0	; () banked
  7457  000A74  2BC8               	incf	done_sorting@i& (0+255),f,b
  7458  000A76  D7EB               	goto	l5605
  7459  000A78                     l5615:
  7460                           
  7461                           ; BSR set to: 0
  7462                           ;operation.c: 180: }
  7463                           ;operation.c: 181: time[6] = I2C_Master_Read(0);
  7464  000A78  0E00               	movlw	0
  7465  000A7A  EC9F  F00F         	call	_I2C_Master_Read
  7466  000A7E  0100               	movlb	0	; () banked
  7467  000A80  6F86               	movwf	(_time+6)& (0+255),b
  7468                           
  7469                           ;operation.c: 182: I2C_Master_Stop();
  7470  000A82  EC34  F011         	call	_I2C_Master_Stop	;wreg free
  7471                           
  7472                           ;operation.c: 184: End_time[2] = time[2];
  7473  000A86  C082  F0CB         	movff	_time+2,done_sorting@End_time+2
  7474                           
  7475                           ;operation.c: 185: End_time[1] = time[1];
  7476  000A8A  C081  F0CA         	movff	_time+1,done_sorting@End_time+1
  7477                           
  7478                           ;operation.c: 186: End_time[0] = time[0];
  7479  000A8E  C080  F0C9         	movff	_time,done_sorting@End_time
  7480                           
  7481                           ;operation.c: 188: total_start = (Start_time[1]/16*10 + Start_time[1]%16)*60 + (Start_ti
      +                          me[0]/16*10 + Start_time[0]%16);
  7482  000A92  C090  F0C1         	movff	_Start_time+1,??_done_sorting
  7483  000A96  0E0F               	movlw	15
  7484  000A98  0100               	movlb	0	; () banked
  7485  000A9A  17C1               	andwf	??_done_sorting& (0+255),f,b
  7486  000A9C  0E00               	movlw	0
  7487  000A9E  0100               	movlb	0	; () banked
  7488  000AA0  6FB4               	movwf	(___awdiv@divisor+1)& (0+255),b
  7489  000AA2  0E10               	movlw	16
  7490  000AA4  6FB3               	movwf	___awdiv@divisor& (0+255),b
  7491  000AA6  C090  F0B1         	movff	_Start_time+1,___awdiv@dividend
  7492  000AAA  0100               	movlb	0	; () banked
  7493  000AAC  6BB2               	clrf	(___awdiv@dividend+1)& (0+255),b
  7494  000AAE  EC35  F00A         	call	___awdiv	;wreg free
  7495  000AB2  C0B1  F0B9         	movff	?___awdiv,___wmul@multiplier
  7496  000AB6  C0B2  F0BA         	movff	?___awdiv+1,___wmul@multiplier+1
  7497  000ABA  0E00               	movlw	0
  7498  000ABC  0100               	movlb	0	; () banked
  7499  000ABE  6FBC               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7500  000AC0  0E0A               	movlw	10
  7501  000AC2  6FBB               	movwf	___wmul@multiplicand& (0+255),b
  7502  000AC4  EC52  F00F         	call	___wmul	;wreg free
  7503  000AC8  0100               	movlb	0	; () banked
  7504  000ACA  51C1               	movf	??_done_sorting& (0+255),w,b
  7505  000ACC  0100               	movlb	0	; () banked
  7506  000ACE  25B9               	addwf	?___wmul& (0+255),w,b
  7507  000AD0  0100               	movlb	0	; () banked
  7508  000AD2  6FC4               	movwf	_done_sorting$1796& (0+255),b
  7509  000AD4  0100               	movlb	0	; () banked
  7510  000AD6  0E00               	movlw	0
  7511  000AD8  0100               	movlb	0	; () banked
  7512  000ADA  21BA               	addwfc	(?___wmul+1)& (0+255),w,b
  7513  000ADC  0100               	movlb	0	; () banked
  7514  000ADE  6FC5               	movwf	(_done_sorting$1796+1)& (0+255),b
  7515                           
  7516                           ; BSR set to: 0
  7517                           ;operation.c: 188: total_start = (Start_time[1]/16*10 + Start_time[1]%16)*60 + (Start_ti
      +                          me[0]/16*10 + Start_time[0]%16);
  7518  000AE0  0E00               	movlw	0
  7519  000AE2  0100               	movlb	0	; () banked
  7520  000AE4  6FB4               	movwf	(___awdiv@divisor+1)& (0+255),b
  7521  000AE6  0E10               	movlw	16
  7522  000AE8  6FB3               	movwf	___awdiv@divisor& (0+255),b
  7523  000AEA  C08F  F0B1         	movff	_Start_time,___awdiv@dividend
  7524  000AEE  0100               	movlb	0	; () banked
  7525  000AF0  6BB2               	clrf	(___awdiv@dividend+1)& (0+255),b
  7526  000AF2  EC35  F00A         	call	___awdiv	;wreg free
  7527  000AF6  C0B1  F0B9         	movff	?___awdiv,___wmul@multiplier
  7528  000AFA  C0B2  F0BA         	movff	?___awdiv+1,___wmul@multiplier+1
  7529  000AFE  0E00               	movlw	0
  7530  000B00  0100               	movlb	0	; () banked
  7531  000B02  6FBC               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7532  000B04  0E0A               	movlw	10
  7533  000B06  6FBB               	movwf	___wmul@multiplicand& (0+255),b
  7534  000B08  EC52  F00F         	call	___wmul	;wreg free
  7535  000B0C  C0B9  F0C1         	movff	?___wmul,??_done_sorting
  7536  000B10  C0BA  F0C2         	movff	?___wmul+1,??_done_sorting+1
  7537  000B14  C08F  F0C3         	movff	_Start_time,??_done_sorting+2
  7538  000B18  0E0F               	movlw	15
  7539  000B1A  0100               	movlb	0	; () banked
  7540  000B1C  17C3               	andwf	(??_done_sorting+2)& (0+255),f,b
  7541  000B1E  0100               	movlb	0	; () banked
  7542  000B20  51C3               	movf	(??_done_sorting+2)& (0+255),w,b
  7543  000B22  0100               	movlb	0	; () banked
  7544  000B24  27C1               	addwf	??_done_sorting& (0+255),f,b
  7545  000B26  0E00               	movlw	0
  7546  000B28  23C2               	addwfc	(??_done_sorting+1)& (0+255),f,b
  7547  000B2A  C0C4  F0B9         	movff	_done_sorting$1796,___wmul@multiplier
  7548  000B2E  C0C5  F0BA         	movff	_done_sorting$1796+1,___wmul@multiplier+1
  7549  000B32  0E00               	movlw	0
  7550  000B34  0100               	movlb	0	; () banked
  7551  000B36  6FBC               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7552  000B38  0E3C               	movlw	60
  7553  000B3A  6FBB               	movwf	___wmul@multiplicand& (0+255),b
  7554  000B3C  EC52  F00F         	call	___wmul	;wreg free
  7555  000B40  0100               	movlb	0	; () banked
  7556  000B42  51B9               	movf	?___wmul& (0+255),w,b
  7557  000B44  0100               	movlb	0	; () banked
  7558  000B46  27C1               	addwf	??_done_sorting& (0+255),f,b
  7559  000B48  0100               	movlb	0	; () banked
  7560  000B4A  51BA               	movf	(?___wmul+1)& (0+255),w,b
  7561  000B4C  0100               	movlb	0	; () banked
  7562  000B4E  23C2               	addwfc	(??_done_sorting+1)& (0+255),f,b
  7563  000B50  C0C1  F08B         	movff	??_done_sorting,_total_start
  7564  000B54  C0C2  F08C         	movff	??_done_sorting+1,_total_start+1
  7565  000B58  0100               	movlb	0	; () banked
  7566  000B5A  0E00               	movlw	0
  7567  000B5C  BF8C               	btfsc	(_total_start+1)& (0+255),7,b
  7568  000B5E  0EFF               	movlw	-1
  7569  000B60  6F8D               	movwf	(_total_start+2)& (0+255),b
  7570  000B62  6F8E               	movwf	(_total_start+3)& (0+255),b
  7571                           
  7572                           ; BSR set to: 0
  7573                           ;operation.c: 189: total_end = (End_time[1]/16*10 + End_time[1]%16)*60 + (End_time[0]/16
      +                          *10 + End_time[0]%16);
  7574  000B64  C0CA  F0C1         	movff	done_sorting@End_time+1,??_done_sorting
  7575  000B68  0E0F               	movlw	15
  7576  000B6A  0100               	movlb	0	; () banked
  7577  000B6C  17C1               	andwf	??_done_sorting& (0+255),f,b
  7578  000B6E  0E00               	movlw	0
  7579  000B70  0100               	movlb	0	; () banked
  7580  000B72  6FB4               	movwf	(___awdiv@divisor+1)& (0+255),b
  7581  000B74  0E10               	movlw	16
  7582  000B76  6FB3               	movwf	___awdiv@divisor& (0+255),b
  7583  000B78  C0CA  F0B1         	movff	done_sorting@End_time+1,___awdiv@dividend
  7584  000B7C  0100               	movlb	0	; () banked
  7585  000B7E  6BB2               	clrf	(___awdiv@dividend+1)& (0+255),b
  7586  000B80  EC35  F00A         	call	___awdiv	;wreg free
  7587  000B84  C0B1  F0B9         	movff	?___awdiv,___wmul@multiplier
  7588  000B88  C0B2  F0BA         	movff	?___awdiv+1,___wmul@multiplier+1
  7589  000B8C  0E00               	movlw	0
  7590  000B8E  0100               	movlb	0	; () banked
  7591  000B90  6FBC               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7592  000B92  0E0A               	movlw	10
  7593  000B94  6FBB               	movwf	___wmul@multiplicand& (0+255),b
  7594  000B96  EC52  F00F         	call	___wmul	;wreg free
  7595  000B9A  0100               	movlb	0	; () banked
  7596  000B9C  51C1               	movf	??_done_sorting& (0+255),w,b
  7597  000B9E  0100               	movlb	0	; () banked
  7598  000BA0  25B9               	addwf	?___wmul& (0+255),w,b
  7599  000BA2  0100               	movlb	0	; () banked
  7600  000BA4  6FC4               	movwf	_done_sorting$1796& (0+255),b
  7601  000BA6  0100               	movlb	0	; () banked
  7602  000BA8  0E00               	movlw	0
  7603  000BAA  0100               	movlb	0	; () banked
  7604  000BAC  21BA               	addwfc	(?___wmul+1)& (0+255),w,b
  7605  000BAE  0100               	movlb	0	; () banked
  7606  000BB0  6FC5               	movwf	(_done_sorting$1796+1)& (0+255),b
  7607                           
  7608                           ; BSR set to: 0
  7609                           ;operation.c: 189: total_end = (End_time[1]/16*10 + End_time[1]%16)*60 + (End_time[0]/16
      +                          *10 + End_time[0]%16);
  7610  000BB2  0E00               	movlw	0
  7611  000BB4  0100               	movlb	0	; () banked
  7612  000BB6  6FB4               	movwf	(___awdiv@divisor+1)& (0+255),b
  7613  000BB8  0E10               	movlw	16
  7614  000BBA  6FB3               	movwf	___awdiv@divisor& (0+255),b
  7615  000BBC  C0C9  F0B1         	movff	done_sorting@End_time,___awdiv@dividend
  7616  000BC0  0100               	movlb	0	; () banked
  7617  000BC2  6BB2               	clrf	(___awdiv@dividend+1)& (0+255),b
  7618  000BC4  EC35  F00A         	call	___awdiv	;wreg free
  7619  000BC8  C0B1  F0B9         	movff	?___awdiv,___wmul@multiplier
  7620  000BCC  C0B2  F0BA         	movff	?___awdiv+1,___wmul@multiplier+1
  7621  000BD0  0E00               	movlw	0
  7622  000BD2  0100               	movlb	0	; () banked
  7623  000BD4  6FBC               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7624  000BD6  0E0A               	movlw	10
  7625  000BD8  6FBB               	movwf	___wmul@multiplicand& (0+255),b
  7626  000BDA  EC52  F00F         	call	___wmul	;wreg free
  7627  000BDE  C0B9  F0C1         	movff	?___wmul,??_done_sorting
  7628  000BE2  C0BA  F0C2         	movff	?___wmul+1,??_done_sorting+1
  7629  000BE6  C0C9  F0C3         	movff	done_sorting@End_time,??_done_sorting+2
  7630  000BEA  0E0F               	movlw	15
  7631  000BEC  0100               	movlb	0	; () banked
  7632  000BEE  17C3               	andwf	(??_done_sorting+2)& (0+255),f,b
  7633  000BF0  0100               	movlb	0	; () banked
  7634  000BF2  51C3               	movf	(??_done_sorting+2)& (0+255),w,b
  7635  000BF4  0100               	movlb	0	; () banked
  7636  000BF6  27C1               	addwf	??_done_sorting& (0+255),f,b
  7637  000BF8  0E00               	movlw	0
  7638  000BFA  23C2               	addwfc	(??_done_sorting+1)& (0+255),f,b
  7639  000BFC  C0C4  F0B9         	movff	_done_sorting$1796,___wmul@multiplier
  7640  000C00  C0C5  F0BA         	movff	_done_sorting$1796+1,___wmul@multiplier+1
  7641  000C04  0E00               	movlw	0
  7642  000C06  0100               	movlb	0	; () banked
  7643  000C08  6FBC               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7644  000C0A  0E3C               	movlw	60
  7645  000C0C  6FBB               	movwf	___wmul@multiplicand& (0+255),b
  7646  000C0E  EC52  F00F         	call	___wmul	;wreg free
  7647  000C12  0100               	movlb	0	; () banked
  7648  000C14  51B9               	movf	?___wmul& (0+255),w,b
  7649  000C16  0100               	movlb	0	; () banked
  7650  000C18  27C1               	addwf	??_done_sorting& (0+255),f,b
  7651  000C1A  0100               	movlb	0	; () banked
  7652  000C1C  51BA               	movf	(?___wmul+1)& (0+255),w,b
  7653  000C1E  0100               	movlb	0	; () banked
  7654  000C20  23C2               	addwfc	(??_done_sorting+1)& (0+255),f,b
  7655  000C22  C0C1  F087         	movff	??_done_sorting,_total_end
  7656  000C26  C0C2  F088         	movff	??_done_sorting+1,_total_end+1
  7657  000C2A  0100               	movlb	0	; () banked
  7658  000C2C  0E00               	movlw	0
  7659  000C2E  BF88               	btfsc	(_total_end+1)& (0+255),7,b
  7660  000C30  0EFF               	movlw	-1
  7661  000C32  6F89               	movwf	(_total_end+2)& (0+255),b
  7662  000C34  6F8A               	movwf	(_total_end+3)& (0+255),b
  7663                           
  7664                           ; BSR set to: 0
  7665                           ;operation.c: 190: total_second = total_end - total_start;
  7666  000C36  C08B  F0C1         	movff	_total_start,??_done_sorting
  7667  000C3A  C08C  F0C2         	movff	_total_start+1,??_done_sorting+1
  7668  000C3E  0100               	movlb	0	; () banked
  7669  000C40  1FC1               	comf	??_done_sorting& (0+255),f,b
  7670  000C42  1FC2               	comf	(??_done_sorting+1)& (0+255),f,b
  7671  000C44  4BC1               	infsnz	??_done_sorting& (0+255),f,b
  7672  000C46  2BC2               	incf	(??_done_sorting+1)& (0+255),f,b
  7673  000C48  0100               	movlb	0	; () banked
  7674  000C4A  5187               	movf	_total_end& (0+255),w,b
  7675  000C4C  0100               	movlb	0	; () banked
  7676  000C4E  25C1               	addwf	??_done_sorting& (0+255),w,b
  7677  000C50  0100               	movlb	0	; () banked
  7678  000C52  6FC6               	movwf	done_sorting@total_second& (0+255),b
  7679  000C54  0100               	movlb	0	; () banked
  7680  000C56  5188               	movf	(_total_end+1)& (0+255),w,b
  7681  000C58  0100               	movlb	0	; () banked
  7682  000C5A  21C2               	addwfc	(??_done_sorting+1)& (0+255),w,b
  7683  000C5C  0100               	movlb	0	; () banked
  7684  000C5E  6FC7               	movwf	(done_sorting@total_second+1)& (0+255),b
  7685                           
  7686                           ; BSR set to: 0
  7687                           ;operation.c: 192: if(total_second <= 0){
  7688  000C60  0100               	movlb	0	; () banked
  7689  000C62  BFC7               	btfsc	(done_sorting@total_second+1)& (0+255),7,b
  7690  000C64  D007               	goto	l5635
  7691  000C66  0100               	movlb	0	; () banked
  7692  000C68  51C7               	movf	(done_sorting@total_second+1)& (0+255),w,b
  7693  000C6A  E10E               	bnz	l5637
  7694  000C6C  0100               	movlb	0	; () banked
  7695  000C6E  05C6               	decf	done_sorting@total_second& (0+255),w,b
  7696  000C70  B0D8               	btfsc	status,0,c
  7697  000C72  D00A               	goto	l5637
  7698  000C74                     l5635:
  7699                           
  7700                           ; BSR set to: 0
  7701                           ;operation.c: 193: total_second = 3600 + total_second;
  7702  000C74  0E10               	movlw	16
  7703  000C76  0100               	movlb	0	; () banked
  7704  000C78  25C6               	addwf	done_sorting@total_second& (0+255),w,b
  7705  000C7A  0100               	movlb	0	; () banked
  7706  000C7C  6FC6               	movwf	done_sorting@total_second& (0+255),b
  7707  000C7E  0E0E               	movlw	14
  7708  000C80  0100               	movlb	0	; () banked
  7709  000C82  21C7               	addwfc	(done_sorting@total_second+1)& (0+255),w,b
  7710  000C84  0100               	movlb	0	; () banked
  7711  000C86  6FC7               	movwf	(done_sorting@total_second+1)& (0+255),b
  7712  000C88                     l5637:
  7713                           
  7714                           ; BSR set to: 0
  7715                           ;operation.c: 194: }
  7716                           ;operation.c: 195: return total_second;
  7717  000C88  C0C6  F0BF         	movff	done_sorting@total_second,?_done_sorting
  7718  000C8C  C0C7  F0C0         	movff	done_sorting@total_second+1,?_done_sorting+1
  7719  000C90  0012               	return	
  7720  000C92                     __end_of_done_sorting:
  7721                           	opt stack 0
  7722                           tosu	equ	0xFFF
  7723                           tosh	equ	0xFFE
  7724                           tosl	equ	0xFFD
  7725                           pclath	equ	0xFFA
  7726                           tblptru	equ	0xFF8
  7727                           tblptrh	equ	0xFF7
  7728                           tblptrl	equ	0xFF6
  7729                           tablat	equ	0xFF5
  7730                           prodh	equ	0xFF4
  7731                           prodl	equ	0xFF3
  7732                           intcon	equ	0xFF2
  7733                           intcon3	equ	0xFF0
  7734                           postinc0	equ	0xFEE
  7735                           wreg	equ	0xFE8
  7736                           indf2	equ	0xFDF
  7737                           postinc2	equ	0xFDE
  7738                           postdec2	equ	0xFDD
  7739                           fsr2h	equ	0xFDA
  7740                           fsr2l	equ	0xFD9
  7741                           status	equ	0xFD8
  7742                           
  7743 ;; *************** function ___wmul *****************
  7744 ;; Defined at:
  7745 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/Umul16.c"
  7746 ;; Parameters:    Size  Location     Type
  7747 ;;  multiplier      2    8[BANK0 ] unsigned int 
  7748 ;;  multiplicand    2   10[BANK0 ] unsigned int 
  7749 ;; Auto vars:     Size  Location     Type
  7750 ;;  product         2   12[BANK0 ] unsigned int 
  7751 ;; Return value:  Size  Location     Type
  7752 ;;                  2    8[BANK0 ] unsigned int 
  7753 ;; Registers used:
  7754 ;;		wreg, status,2, status,0, prodl, prodh
  7755 ;; Tracked objects:
  7756 ;;		On entry : 0/0
  7757 ;;		On exit  : 0/0
  7758 ;;		Unchanged: 0/0
  7759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7760 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7761 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7763 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7764 ;;Total ram usage:        6 bytes
  7765 ;; Hardware stack levels used:    1
  7766 ;; Hardware stack levels required when called:    5
  7767 ;; This function calls:
  7768 ;;		Nothing
  7769 ;; This function is called by:
  7770 ;;		_done_sorting
  7771 ;;		_printf
  7772 ;; This function uses a non-reentrant model
  7773 ;;
  7774                           
  7775                           	psect	text41
  7776  001EA4                     __ptext41:
  7777                           	opt stack 0
  7778  001EA4                     ___wmul:
  7779                           	opt stack 21
  7780                           
  7781                           ; BSR set to: 0
  7782                           ;incstack = 0
  7783  001EA4  0100               	movlb	0	; () banked
  7784  001EA6  51B9               	movf	___wmul@multiplier& (0+255),w,b
  7785  001EA8  0100               	movlb	0	; () banked
  7786  001EAA  03BB               	mulwf	___wmul@multiplicand& (0+255),b
  7787  001EAC  CFF3 F0BD          	movff	prodl,___wmul@product
  7788  001EB0  CFF4 F0BE          	movff	prodh,___wmul@product+1
  7789  001EB4  0100               	movlb	0	; () banked
  7790  001EB6  51B9               	movf	___wmul@multiplier& (0+255),w,b
  7791  001EB8  0100               	movlb	0	; () banked
  7792  001EBA  03BC               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7793  001EBC  50F3               	movf	prodl,w,c
  7794  001EBE  0100               	movlb	0	; () banked
  7795  001EC0  27BE               	addwf	(___wmul@product+1)& (0+255),f,b
  7796  001EC2  0100               	movlb	0	; () banked
  7797  001EC4  51BA               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7798  001EC6  0100               	movlb	0	; () banked
  7799  001EC8  03BB               	mulwf	___wmul@multiplicand& (0+255),b
  7800  001ECA  50F3               	movf	prodl,w,c
  7801  001ECC  0100               	movlb	0	; () banked
  7802  001ECE  27BE               	addwf	(___wmul@product+1)& (0+255),f,b
  7803                           
  7804                           ; BSR set to: 0
  7805  001ED0  C0BD  F0B9         	movff	___wmul@product,?___wmul
  7806  001ED4  C0BE  F0BA         	movff	___wmul@product+1,?___wmul+1
  7807  001ED8  0012               	return	
  7808  001EDA                     __end_of___wmul:
  7809                           	opt stack 0
  7810                           tosu	equ	0xFFF
  7811                           tosh	equ	0xFFE
  7812                           tosl	equ	0xFFD
  7813                           pclath	equ	0xFFA
  7814                           tblptru	equ	0xFF8
  7815                           tblptrh	equ	0xFF7
  7816                           tblptrl	equ	0xFF6
  7817                           tablat	equ	0xFF5
  7818                           prodh	equ	0xFF4
  7819                           prodl	equ	0xFF3
  7820                           intcon	equ	0xFF2
  7821                           intcon3	equ	0xFF0
  7822                           postinc0	equ	0xFEE
  7823                           wreg	equ	0xFE8
  7824                           indf2	equ	0xFDF
  7825                           postinc2	equ	0xFDE
  7826                           postdec2	equ	0xFDD
  7827                           fsr2h	equ	0xFDA
  7828                           fsr2l	equ	0xFD9
  7829                           status	equ	0xFD8
  7830                           
  7831 ;; *************** function ___awdiv *****************
  7832 ;; Defined at:
  7833 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awdiv.c"
  7834 ;; Parameters:    Size  Location     Type
  7835 ;;  dividend        2    0[BANK0 ] int 
  7836 ;;  divisor         2    2[BANK0 ] int 
  7837 ;; Auto vars:     Size  Location     Type
  7838 ;;  quotient        2    6[BANK0 ] int 
  7839 ;;  sign            1    5[BANK0 ] unsigned char 
  7840 ;;  counter         1    4[BANK0 ] unsigned char 
  7841 ;; Return value:  Size  Location     Type
  7842 ;;                  2    0[BANK0 ] int 
  7843 ;; Registers used:
  7844 ;;		wreg, status,2, status,0
  7845 ;; Tracked objects:
  7846 ;;		On entry : 0/0
  7847 ;;		On exit  : 0/0
  7848 ;;		Unchanged: 0/0
  7849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7850 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7851 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7853 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7854 ;;Total ram usage:        8 bytes
  7855 ;; Hardware stack levels used:    1
  7856 ;; Hardware stack levels required when called:    5
  7857 ;; This function calls:
  7858 ;;		Nothing
  7859 ;; This function is called by:
  7860 ;;		_done_sorting
  7861 ;; This function uses a non-reentrant model
  7862 ;;
  7863                           
  7864                           	psect	text42
  7865  00146A                     __ptext42:
  7866                           	opt stack 0
  7867  00146A                     ___awdiv:
  7868                           	opt stack 24
  7869                           
  7870                           ; BSR set to: 0
  7871                           ;incstack = 0
  7872  00146A  0E00               	movlw	0
  7873  00146C  0100               	movlb	0	; () banked
  7874  00146E  6FB6               	movwf	___awdiv@sign& (0+255),b
  7875                           
  7876                           ; BSR set to: 0
  7877  001470  0100               	movlb	0	; () banked
  7878  001472  AFB4               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7879  001474  D008               	goto	l5413
  7880                           
  7881                           ; BSR set to: 0
  7882  001476  0100               	movlb	0	; () banked
  7883  001478  6DB3               	negf	___awdiv@divisor& (0+255),b
  7884  00147A  1FB4               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7885  00147C  B0D8               	btfsc	status,0,c
  7886  00147E  2BB4               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7887                           
  7888                           ; BSR set to: 0
  7889  001480  0E01               	movlw	1
  7890  001482  0100               	movlb	0	; () banked
  7891  001484  6FB6               	movwf	___awdiv@sign& (0+255),b
  7892  001486                     l5413:
  7893                           
  7894                           ; BSR set to: 0
  7895  001486  0100               	movlb	0	; () banked
  7896  001488  AFB2               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7897  00148A  D008               	goto	l5419
  7898                           
  7899                           ; BSR set to: 0
  7900  00148C  0100               	movlb	0	; () banked
  7901  00148E  6DB1               	negf	___awdiv@dividend& (0+255),b
  7902  001490  1FB2               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7903  001492  B0D8               	btfsc	status,0,c
  7904  001494  2BB2               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7905                           
  7906                           ; BSR set to: 0
  7907  001496  0E01               	movlw	1
  7908  001498  0100               	movlb	0	; () banked
  7909  00149A  1BB6               	xorwf	___awdiv@sign& (0+255),f,b
  7910  00149C                     l5419:
  7911                           
  7912                           ; BSR set to: 0
  7913  00149C  0E00               	movlw	0
  7914  00149E  0100               	movlb	0	; () banked
  7915  0014A0  6FB8               	movwf	(___awdiv@quotient+1)& (0+255),b
  7916  0014A2  0E00               	movlw	0
  7917  0014A4  6FB7               	movwf	___awdiv@quotient& (0+255),b
  7918                           
  7919                           ; BSR set to: 0
  7920  0014A6  0100               	movlb	0	; () banked
  7921  0014A8  51B3               	movf	___awdiv@divisor& (0+255),w,b
  7922  0014AA  0100               	movlb	0	; () banked
  7923  0014AC  11B4               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  7924  0014AE  B4D8               	btfsc	status,2,c
  7925  0014B0  D02C               	goto	l5441
  7926                           
  7927                           ; BSR set to: 0
  7928  0014B2  0E01               	movlw	1
  7929  0014B4  0100               	movlb	0	; () banked
  7930  0014B6  6FB5               	movwf	___awdiv@counter& (0+255),b
  7931  0014B8  D006               	goto	l5427
  7932  0014BA                     l5425:
  7933                           
  7934                           ; BSR set to: 0
  7935  0014BA  0100               	movlb	0	; () banked
  7936  0014BC  90D8               	bcf	status,0,c
  7937  0014BE  37B3               	rlcf	___awdiv@divisor& (0+255),f,b
  7938  0014C0  37B4               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  7939  0014C2  0100               	movlb	0	; () banked
  7940  0014C4  2BB5               	incf	___awdiv@counter& (0+255),f,b
  7941  0014C6                     l5427:
  7942                           
  7943                           ; BSR set to: 0
  7944  0014C6  0100               	movlb	0	; () banked
  7945  0014C8  AFB4               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7946  0014CA  D7F7               	goto	l5425
  7947  0014CC                     l5429:
  7948                           
  7949                           ; BSR set to: 0
  7950  0014CC  0100               	movlb	0	; () banked
  7951  0014CE  90D8               	bcf	status,0,c
  7952  0014D0  37B7               	rlcf	___awdiv@quotient& (0+255),f,b
  7953  0014D2  37B8               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  7954                           
  7955                           ; BSR set to: 0
  7956  0014D4  0100               	movlb	0	; () banked
  7957  0014D6  51B3               	movf	___awdiv@divisor& (0+255),w,b
  7958  0014D8  0100               	movlb	0	; () banked
  7959  0014DA  5DB1               	subwf	___awdiv@dividend& (0+255),w,b
  7960  0014DC  0100               	movlb	0	; () banked
  7961  0014DE  51B4               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7962  0014E0  0100               	movlb	0	; () banked
  7963  0014E2  59B2               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  7964  0014E4  A0D8               	btfss	status,0,c
  7965  0014E6  D00A               	goto	l5437
  7966                           
  7967                           ; BSR set to: 0
  7968  0014E8  0100               	movlb	0	; () banked
  7969  0014EA  51B3               	movf	___awdiv@divisor& (0+255),w,b
  7970  0014EC  0100               	movlb	0	; () banked
  7971  0014EE  5FB1               	subwf	___awdiv@dividend& (0+255),f,b
  7972  0014F0  0100               	movlb	0	; () banked
  7973  0014F2  51B4               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7974  0014F4  0100               	movlb	0	; () banked
  7975  0014F6  5BB2               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  7976                           
  7977                           ; BSR set to: 0
  7978  0014F8  0100               	movlb	0	; () banked
  7979  0014FA  81B7               	bsf	___awdiv@quotient& (0+255),0,b
  7980  0014FC                     l5437:
  7981                           
  7982                           ; BSR set to: 0
  7983  0014FC  0100               	movlb	0	; () banked
  7984  0014FE  90D8               	bcf	status,0,c
  7985  001500  33B4               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  7986  001502  33B3               	rrcf	___awdiv@divisor& (0+255),f,b
  7987                           
  7988                           ; BSR set to: 0
  7989  001504  0100               	movlb	0	; () banked
  7990  001506  2FB5               	decfsz	___awdiv@counter& (0+255),f,b
  7991  001508  D7E1               	goto	l5429
  7992  00150A                     l5441:
  7993                           
  7994                           ; BSR set to: 0
  7995  00150A  0100               	movlb	0	; () banked
  7996  00150C  51B6               	movf	___awdiv@sign& (0+255),w,b
  7997  00150E  0100               	movlb	0	; () banked
  7998  001510  B4D8               	btfsc	status,2,c
  7999  001512  D005               	goto	l5445
  8000                           
  8001                           ; BSR set to: 0
  8002  001514  0100               	movlb	0	; () banked
  8003  001516  6DB7               	negf	___awdiv@quotient& (0+255),b
  8004  001518  1FB8               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8005  00151A  B0D8               	btfsc	status,0,c
  8006  00151C  2BB8               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8007  00151E                     l5445:
  8008                           
  8009                           ; BSR set to: 0
  8010  00151E  C0B7  F0B1         	movff	___awdiv@quotient,?___awdiv
  8011  001522  C0B8  F0B2         	movff	___awdiv@quotient+1,?___awdiv+1
  8012  001526  0012               	return	
  8013  001528                     __end_of___awdiv:
  8014                           	opt stack 0
  8015                           tosu	equ	0xFFF
  8016                           tosh	equ	0xFFE
  8017                           tosl	equ	0xFFD
  8018                           pclath	equ	0xFFA
  8019                           tblptru	equ	0xFF8
  8020                           tblptrh	equ	0xFF7
  8021                           tblptrl	equ	0xFF6
  8022                           tablat	equ	0xFF5
  8023                           prodh	equ	0xFF4
  8024                           prodl	equ	0xFF3
  8025                           intcon	equ	0xFF2
  8026                           intcon3	equ	0xFF0
  8027                           postinc0	equ	0xFEE
  8028                           wreg	equ	0xFE8
  8029                           indf2	equ	0xFDF
  8030                           postinc2	equ	0xFDE
  8031                           postdec2	equ	0xFDD
  8032                           fsr2h	equ	0xFDA
  8033                           fsr2l	equ	0xFD9
  8034                           status	equ	0xFD8
  8035                           
  8036 ;; *************** function _I2C_Master_Write *****************
  8037 ;; Defined at:
  8038 ;;		line 57 in file "I2C.c"
  8039 ;; Parameters:    Size  Location     Type
  8040 ;;  d               2    1[BANK0 ] unsigned int 
  8041 ;; Auto vars:     Size  Location     Type
  8042 ;;		None
  8043 ;; Return value:  Size  Location     Type
  8044 ;;                  1    wreg      void 
  8045 ;; Registers used:
  8046 ;;		wreg, status,2, status,0, cstack
  8047 ;; Tracked objects:
  8048 ;;		On entry : 0/0
  8049 ;;		On exit  : 0/0
  8050 ;;		Unchanged: 0/0
  8051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8052 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8055 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8056 ;;Total ram usage:        2 bytes
  8057 ;; Hardware stack levels used:    1
  8058 ;; Hardware stack levels required when called:    6
  8059 ;; This function calls:
  8060 ;;		_I2C_Master_Wait
  8061 ;; This function is called by:
  8062 ;;		_set_time
  8063 ;;		_standby
  8064 ;;		_done_sorting
  8065 ;; This function uses a non-reentrant model
  8066 ;;
  8067                           
  8068                           	psect	text43
  8069  00225E                     __ptext43:
  8070                           	opt stack 0
  8071  00225E                     _I2C_Master_Write:
  8072                           	opt stack 23
  8073                           
  8074                           ;I2C.c: 59: I2C_Master_Wait();
  8075                           
  8076                           ; BSR set to: 0
  8077                           ;incstack = 0
  8078  00225E  ECF9  F010         	call	_I2C_Master_Wait	;wreg free
  8079                           
  8080                           ;I2C.c: 60: SSPBUF = d;
  8081  002262  C0B2  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8082  002266  0012               	return		;funcret
  8083  002268                     __end_of_I2C_Master_Write:
  8084                           	opt stack 0
  8085                           tosu	equ	0xFFF
  8086                           tosh	equ	0xFFE
  8087                           tosl	equ	0xFFD
  8088                           pclath	equ	0xFFA
  8089                           tblptru	equ	0xFF8
  8090                           tblptrh	equ	0xFF7
  8091                           tblptrl	equ	0xFF6
  8092                           tablat	equ	0xFF5
  8093                           prodh	equ	0xFF4
  8094                           prodl	equ	0xFF3
  8095                           intcon	equ	0xFF2
  8096                           intcon3	equ	0xFF0
  8097                           postinc0	equ	0xFEE
  8098                           wreg	equ	0xFE8
  8099                           indf2	equ	0xFDF
  8100                           postinc2	equ	0xFDE
  8101                           postdec2	equ	0xFDD
  8102                           fsr2h	equ	0xFDA
  8103                           fsr2l	equ	0xFD9
  8104                           status	equ	0xFD8
  8105                           
  8106 ;; *************** function _I2C_Master_Stop *****************
  8107 ;; Defined at:
  8108 ;;		line 51 in file "I2C.c"
  8109 ;; Parameters:    Size  Location     Type
  8110 ;;		None
  8111 ;; Auto vars:     Size  Location     Type
  8112 ;;		None
  8113 ;; Return value:  Size  Location     Type
  8114 ;;                  1    wreg      void 
  8115 ;; Registers used:
  8116 ;;		wreg, status,2, status,0, cstack
  8117 ;; Tracked objects:
  8118 ;;		On entry : 0/0
  8119 ;;		On exit  : 0/0
  8120 ;;		Unchanged: 0/0
  8121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8126 ;;Total ram usage:        0 bytes
  8127 ;; Hardware stack levels used:    1
  8128 ;; Hardware stack levels required when called:    6
  8129 ;; This function calls:
  8130 ;;		_I2C_Master_Wait
  8131 ;; This function is called by:
  8132 ;;		_set_time
  8133 ;;		_standby
  8134 ;;		_done_sorting
  8135 ;; This function uses a non-reentrant model
  8136 ;;
  8137                           
  8138                           	psect	text44
  8139  002268                     __ptext44:
  8140                           	opt stack 0
  8141  002268                     _I2C_Master_Stop:
  8142                           	opt stack 23
  8143                           
  8144                           ;I2C.c: 53: I2C_Master_Wait();
  8145                           
  8146                           ;incstack = 0
  8147  002268  ECF9  F010         	call	_I2C_Master_Wait	;wreg free
  8148                           
  8149                           ;I2C.c: 54: PEN = 1;
  8150  00226C  84C5               	bsf	4037,2,c	;volatile
  8151  00226E  0012               	return		;funcret
  8152  002270                     __end_of_I2C_Master_Stop:
  8153                           	opt stack 0
  8154                           tosu	equ	0xFFF
  8155                           tosh	equ	0xFFE
  8156                           tosl	equ	0xFFD
  8157                           pclath	equ	0xFFA
  8158                           tblptru	equ	0xFF8
  8159                           tblptrh	equ	0xFF7
  8160                           tblptrl	equ	0xFF6
  8161                           tablat	equ	0xFF5
  8162                           prodh	equ	0xFF4
  8163                           prodl	equ	0xFF3
  8164                           intcon	equ	0xFF2
  8165                           intcon3	equ	0xFF0
  8166                           postinc0	equ	0xFEE
  8167                           wreg	equ	0xFE8
  8168                           indf2	equ	0xFDF
  8169                           postinc2	equ	0xFDE
  8170                           postdec2	equ	0xFDD
  8171                           fsr2h	equ	0xFDA
  8172                           fsr2l	equ	0xFD9
  8173                           status	equ	0xFD8
  8174                           
  8175 ;; *************** function _I2C_Master_Start *****************
  8176 ;; Defined at:
  8177 ;;		line 39 in file "I2C.c"
  8178 ;; Parameters:    Size  Location     Type
  8179 ;;		None
  8180 ;; Auto vars:     Size  Location     Type
  8181 ;;		None
  8182 ;; Return value:  Size  Location     Type
  8183 ;;                  1    wreg      void 
  8184 ;; Registers used:
  8185 ;;		wreg, status,2, status,0, cstack
  8186 ;; Tracked objects:
  8187 ;;		On entry : 0/0
  8188 ;;		On exit  : 0/0
  8189 ;;		Unchanged: 0/0
  8190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8195 ;;Total ram usage:        0 bytes
  8196 ;; Hardware stack levels used:    1
  8197 ;; Hardware stack levels required when called:    6
  8198 ;; This function calls:
  8199 ;;		_I2C_Master_Wait
  8200 ;; This function is called by:
  8201 ;;		_set_time
  8202 ;;		_standby
  8203 ;;		_done_sorting
  8204 ;; This function uses a non-reentrant model
  8205 ;;
  8206                           
  8207                           	psect	text45
  8208  002270                     __ptext45:
  8209                           	opt stack 0
  8210  002270                     _I2C_Master_Start:
  8211                           	opt stack 23
  8212                           
  8213                           ;I2C.c: 41: I2C_Master_Wait();
  8214                           
  8215                           ;incstack = 0
  8216  002270  ECF9  F010         	call	_I2C_Master_Wait	;wreg free
  8217                           
  8218                           ;I2C.c: 42: SEN = 1;
  8219  002274  80C5               	bsf	4037,0,c	;volatile
  8220  002276  0012               	return		;funcret
  8221  002278                     __end_of_I2C_Master_Start:
  8222                           	opt stack 0
  8223                           tosu	equ	0xFFF
  8224                           tosh	equ	0xFFE
  8225                           tosl	equ	0xFFD
  8226                           pclath	equ	0xFFA
  8227                           tblptru	equ	0xFF8
  8228                           tblptrh	equ	0xFF7
  8229                           tblptrl	equ	0xFF6
  8230                           tablat	equ	0xFF5
  8231                           prodh	equ	0xFF4
  8232                           prodl	equ	0xFF3
  8233                           intcon	equ	0xFF2
  8234                           intcon3	equ	0xFF0
  8235                           postinc0	equ	0xFEE
  8236                           wreg	equ	0xFE8
  8237                           indf2	equ	0xFDF
  8238                           postinc2	equ	0xFDE
  8239                           postdec2	equ	0xFDD
  8240                           fsr2h	equ	0xFDA
  8241                           fsr2l	equ	0xFD9
  8242                           status	equ	0xFD8
  8243                           
  8244 ;; *************** function _I2C_Master_Read *****************
  8245 ;; Defined at:
  8246 ;;		line 63 in file "I2C.c"
  8247 ;; Parameters:    Size  Location     Type
  8248 ;;  a               1    wreg     unsigned char 
  8249 ;; Auto vars:     Size  Location     Type
  8250 ;;  a               1    1[BANK0 ] unsigned char 
  8251 ;;  temp            1    2[BANK0 ] unsigned char 
  8252 ;; Return value:  Size  Location     Type
  8253 ;;                  1    wreg      unsigned char 
  8254 ;; Registers used:
  8255 ;;		wreg, status,2, status,0, cstack
  8256 ;; Tracked objects:
  8257 ;;		On entry : 0/0
  8258 ;;		On exit  : 0/0
  8259 ;;		Unchanged: 0/0
  8260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8262 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8264 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8265 ;;Total ram usage:        2 bytes
  8266 ;; Hardware stack levels used:    1
  8267 ;; Hardware stack levels required when called:    6
  8268 ;; This function calls:
  8269 ;;		_I2C_Master_Wait
  8270 ;; This function is called by:
  8271 ;;		_standby
  8272 ;;		_done_sorting
  8273 ;; This function uses a non-reentrant model
  8274 ;;
  8275                           
  8276                           	psect	text46
  8277  001F3E                     __ptext46:
  8278                           	opt stack 0
  8279  001F3E                     _I2C_Master_Read:
  8280                           	opt stack 23
  8281                           
  8282                           ;incstack = 0
  8283                           ;I2C_Master_Read@a stored from wreg
  8284  001F3E  0100               	movlb	0	; () banked
  8285  001F40  6FB2               	movwf	I2C_Master_Read@a& (0+255),b
  8286                           
  8287                           ;I2C.c: 65: unsigned char temp;
  8288                           ;I2C.c: 66: I2C_Master_Wait();
  8289  001F42  ECF9  F010         	call	_I2C_Master_Wait	;wreg free
  8290                           
  8291                           ;I2C.c: 67: RCEN = 1;
  8292  001F46  86C5               	bsf	4037,3,c	;volatile
  8293                           
  8294                           ;I2C.c: 68: I2C_Master_Wait();
  8295  001F48  ECF9  F010         	call	_I2C_Master_Wait	;wreg free
  8296                           
  8297                           ;I2C.c: 69: temp = SSPBUF;
  8298  001F4C  CFC9 F0B3          	movff	4041,I2C_Master_Read@temp	;volatile
  8299                           
  8300                           ;I2C.c: 70: I2C_Master_Wait();
  8301  001F50  ECF9  F010         	call	_I2C_Master_Wait	;wreg free
  8302                           
  8303                           ;I2C.c: 71: ACKDT = (a)?0:1;
  8304  001F54  0100               	movlb	0	; () banked
  8305  001F56  51B2               	movf	I2C_Master_Read@a& (0+255),w,b
  8306  001F58  0100               	movlb	0	; () banked
  8307  001F5A  A4D8               	btfss	status,2,c
  8308  001F5C  D002               	goto	u4500
  8309  001F5E  8AC5               	bsf	4037,5,c	;volatile
  8310  001F60  D001               	goto	l5183
  8311  001F62                     u4500:
  8312  001F62  9AC5               	bcf	4037,5,c	;volatile
  8313  001F64                     l5183:
  8314                           
  8315                           ;I2C.c: 72: ACKEN = 1;
  8316  001F64  88C5               	bsf	4037,4,c	;volatile
  8317                           
  8318                           ;I2C.c: 73: return temp;
  8319  001F66  0100               	movlb	0	; () banked
  8320  001F68  51B3               	movf	I2C_Master_Read@temp& (0+255),w,b
  8321  001F6A  0012               	return	
  8322  001F6C                     __end_of_I2C_Master_Read:
  8323                           	opt stack 0
  8324                           tosu	equ	0xFFF
  8325                           tosh	equ	0xFFE
  8326                           tosl	equ	0xFFD
  8327                           pclath	equ	0xFFA
  8328                           tblptru	equ	0xFF8
  8329                           tblptrh	equ	0xFF7
  8330                           tblptrl	equ	0xFF6
  8331                           tablat	equ	0xFF5
  8332                           prodh	equ	0xFF4
  8333                           prodl	equ	0xFF3
  8334                           intcon	equ	0xFF2
  8335                           intcon3	equ	0xFF0
  8336                           postinc0	equ	0xFEE
  8337                           wreg	equ	0xFE8
  8338                           indf2	equ	0xFDF
  8339                           postinc2	equ	0xFDE
  8340                           postdec2	equ	0xFDD
  8341                           fsr2h	equ	0xFDA
  8342                           fsr2l	equ	0xFD9
  8343                           status	equ	0xFD8
  8344                           
  8345 ;; *************** function _I2C_Master_Wait *****************
  8346 ;; Defined at:
  8347 ;;		line 34 in file "I2C.c"
  8348 ;; Parameters:    Size  Location     Type
  8349 ;;		None
  8350 ;; Auto vars:     Size  Location     Type
  8351 ;;		None
  8352 ;; Return value:  Size  Location     Type
  8353 ;;                  1    wreg      void 
  8354 ;; Registers used:
  8355 ;;		wreg, status,2, status,0
  8356 ;; Tracked objects:
  8357 ;;		On entry : 0/0
  8358 ;;		On exit  : 0/0
  8359 ;;		Unchanged: 0/0
  8360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8363 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8364 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8365 ;;Total ram usage:        1 bytes
  8366 ;; Hardware stack levels used:    1
  8367 ;; Hardware stack levels required when called:    5
  8368 ;; This function calls:
  8369 ;;		Nothing
  8370 ;; This function is called by:
  8371 ;;		_I2C_Master_Start
  8372 ;;		_I2C_Master_Stop
  8373 ;;		_I2C_Master_Write
  8374 ;;		_I2C_Master_Read
  8375 ;;		_I2C_Master_RepeatedStart
  8376 ;; This function uses a non-reentrant model
  8377 ;;
  8378                           
  8379                           	psect	text47
  8380  0021F2                     __ptext47:
  8381                           	opt stack 0
  8382  0021F2                     _I2C_Master_Wait:
  8383                           	opt stack 23
  8384  0021F2                     l150:
  8385  0021F2  B4C7               	btfsc	4039,2,c	;volatile
  8386  0021F4  D7FE               	goto	l150
  8387  0021F6  CFC5 F0B1          	movff	4037,??_I2C_Master_Wait	;volatile
  8388  0021FA  0E1F               	movlw	31
  8389  0021FC  0100               	movlb	0	; () banked
  8390  0021FE  17B1               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8391  002200  B4D8               	btfsc	status,2,c
  8392  002202  0012               	return	
  8393  002204  D7F6               	goto	l150
  8394  002206                     __end_of_I2C_Master_Wait:
  8395                           	opt stack 0
  8396                           tosu	equ	0xFFF
  8397                           tosh	equ	0xFFE
  8398                           tosl	equ	0xFFD
  8399                           pclath	equ	0xFFA
  8400                           tblptru	equ	0xFF8
  8401                           tblptrh	equ	0xFF7
  8402                           tblptrl	equ	0xFF6
  8403                           tablat	equ	0xFF5
  8404                           prodh	equ	0xFF4
  8405                           prodl	equ	0xFF3
  8406                           intcon	equ	0xFF2
  8407                           intcon3	equ	0xFF0
  8408                           postinc0	equ	0xFEE
  8409                           wreg	equ	0xFE8
  8410                           indf2	equ	0xFDF
  8411                           postinc2	equ	0xFDE
  8412                           postdec2	equ	0xFDD
  8413                           fsr2h	equ	0xFDA
  8414                           fsr2l	equ	0xFD9
  8415                           status	equ	0xFD8
  8416                           
  8417 ;; *************** function _I2C_Master_Init *****************
  8418 ;; Defined at:
  8419 ;;		line 23 in file "I2C.c"
  8420 ;; Parameters:    Size  Location     Type
  8421 ;;  c               4   13[BANK0 ] const unsigned long 
  8422 ;; Auto vars:     Size  Location     Type
  8423 ;;		None
  8424 ;; Return value:  Size  Location     Type
  8425 ;;                  1    wreg      void 
  8426 ;; Registers used:
  8427 ;;		wreg, status,2, status,0, cstack
  8428 ;; Tracked objects:
  8429 ;;		On entry : 0/0
  8430 ;;		On exit  : 0/0
  8431 ;;		Unchanged: 0/0
  8432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8433 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8435 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8436 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8437 ;;Total ram usage:        8 bytes
  8438 ;; Hardware stack levels used:    1
  8439 ;; Hardware stack levels required when called:    6
  8440 ;; This function calls:
  8441 ;;		___lldiv
  8442 ;; This function is called by:
  8443 ;;		_main
  8444 ;; This function uses a non-reentrant model
  8445 ;;
  8446                           
  8447                           	psect	text48
  8448  001AF6                     __ptext48:
  8449                           	opt stack 0
  8450  001AF6                     _I2C_Master_Init:
  8451                           	opt stack 24
  8452                           
  8453                           ;I2C.c: 26: SSPSTAT = 0b00000000;
  8454                           
  8455                           ; BSR set to: 0
  8456                           ;incstack = 0
  8457  001AF6  0E00               	movlw	0
  8458  001AF8  6EC7               	movwf	4039,c	;volatile
  8459                           
  8460                           ;I2C.c: 27: SSPCON1 = 0b00101000;
  8461  001AFA  0E28               	movlw	40
  8462  001AFC  6EC6               	movwf	4038,c	;volatile
  8463                           
  8464                           ;I2C.c: 28: SSPCON2 = 0b00000000;
  8465  001AFE  0E00               	movlw	0
  8466  001B00  6EC5               	movwf	4037,c	;volatile
  8467                           
  8468                           ;I2C.c: 29: SSPADD = (10000000/(4*c))-1;
  8469  001B02  0E80               	movlw	128
  8470  001B04  0100               	movlb	0	; () banked
  8471  001B06  6FB1               	movwf	___lldiv@dividend& (0+255),b
  8472  001B08  0E96               	movlw	150
  8473  001B0A  6FB2               	movwf	(___lldiv@dividend+1)& (0+255),b
  8474  001B0C  0E98               	movlw	152
  8475  001B0E  6FB3               	movwf	(___lldiv@dividend+2)& (0+255),b
  8476  001B10  0E00               	movlw	0
  8477  001B12  6FB4               	movwf	(___lldiv@dividend+3)& (0+255),b
  8478  001B14  C0BE  F0C2         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  8479  001B18  C0BF  F0C3         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  8480  001B1C  C0C0  F0C4         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  8481  001B20  C0C1  F0C5         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  8482  001B24  0E02               	movlw	2
  8483  001B26                     u4855:
  8484  001B26  90D8               	bcf	status,0,c
  8485  001B28  0100               	movlb	0	; () banked
  8486  001B2A  37C2               	rlcf	??_I2C_Master_Init& (0+255),f,b
  8487  001B2C  37C3               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  8488  001B2E  37C4               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  8489  001B30  37C5               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  8490  001B32  2EE8               	decfsz	wreg,f,c
  8491  001B34  D7F8               	goto	u4855
  8492  001B36  C0C2  F0B5         	movff	??_I2C_Master_Init,___lldiv@divisor
  8493  001B3A  C0C3  F0B6         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  8494  001B3E  C0C4  F0B7         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  8495  001B42  C0C5  F0B8         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  8496  001B46  EC94  F00A         	call	___lldiv	;wreg free
  8497  001B4A  0100               	movlb	0	; () banked
  8498  001B4C  05B1               	decf	?___lldiv& (0+255),w,b
  8499  001B4E  6EC8               	movwf	4040,c	;volatile
  8500                           
  8501                           ; BSR set to: 0
  8502                           ;I2C.c: 30: TRISC3 = 1;
  8503  001B50  8694               	bsf	3988,3,c	;volatile
  8504                           
  8505                           ; BSR set to: 0
  8506                           ;I2C.c: 31: TRISC4 = 1;
  8507  001B52  8894               	bsf	3988,4,c	;volatile
  8508                           
  8509                           ; BSR set to: 0
  8510  001B54  0012               	return		;funcret
  8511  001B56                     __end_of_I2C_Master_Init:
  8512                           	opt stack 0
  8513                           tosu	equ	0xFFF
  8514                           tosh	equ	0xFFE
  8515                           tosl	equ	0xFFD
  8516                           pclath	equ	0xFFA
  8517                           tblptru	equ	0xFF8
  8518                           tblptrh	equ	0xFF7
  8519                           tblptrl	equ	0xFF6
  8520                           tablat	equ	0xFF5
  8521                           prodh	equ	0xFF4
  8522                           prodl	equ	0xFF3
  8523                           intcon	equ	0xFF2
  8524                           intcon3	equ	0xFF0
  8525                           postinc0	equ	0xFEE
  8526                           wreg	equ	0xFE8
  8527                           indf2	equ	0xFDF
  8528                           postinc2	equ	0xFDE
  8529                           postdec2	equ	0xFDD
  8530                           fsr2h	equ	0xFDA
  8531                           fsr2l	equ	0xFD9
  8532                           status	equ	0xFD8
  8533                           
  8534 ;; *************** function ___lldiv *****************
  8535 ;; Defined at:
  8536 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lldiv.c"
  8537 ;; Parameters:    Size  Location     Type
  8538 ;;  dividend        4    0[BANK0 ] unsigned long 
  8539 ;;  divisor         4    4[BANK0 ] unsigned long 
  8540 ;; Auto vars:     Size  Location     Type
  8541 ;;  quotient        4    8[BANK0 ] unsigned long 
  8542 ;;  counter         1   12[BANK0 ] unsigned char 
  8543 ;; Return value:  Size  Location     Type
  8544 ;;                  4    0[BANK0 ] unsigned long 
  8545 ;; Registers used:
  8546 ;;		wreg, status,2, status,0
  8547 ;; Tracked objects:
  8548 ;;		On entry : 0/0
  8549 ;;		On exit  : 0/0
  8550 ;;		Unchanged: 0/0
  8551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8552 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8553 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8555 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8556 ;;Total ram usage:       13 bytes
  8557 ;; Hardware stack levels used:    1
  8558 ;; Hardware stack levels required when called:    5
  8559 ;; This function calls:
  8560 ;;		Nothing
  8561 ;; This function is called by:
  8562 ;;		_I2C_Master_Init
  8563 ;; This function uses a non-reentrant model
  8564 ;;
  8565                           
  8566                           	psect	text49
  8567  001528                     __ptext49:
  8568                           	opt stack 0
  8569  001528                     ___lldiv:
  8570                           	opt stack 24
  8571                           
  8572                           ; BSR set to: 0
  8573                           ;incstack = 0
  8574  001528  0E00               	movlw	0
  8575  00152A  0100               	movlb	0	; () banked
  8576  00152C  6FB9               	movwf	___lldiv@quotient& (0+255),b
  8577  00152E  0E00               	movlw	0
  8578  001530  6FBA               	movwf	(___lldiv@quotient+1)& (0+255),b
  8579  001532  0E00               	movlw	0
  8580  001534  6FBB               	movwf	(___lldiv@quotient+2)& (0+255),b
  8581  001536  0E00               	movlw	0
  8582  001538  6FBC               	movwf	(___lldiv@quotient+3)& (0+255),b
  8583                           
  8584                           ; BSR set to: 0
  8585  00153A  0100               	movlb	0	; () banked
  8586  00153C  51B5               	movf	___lldiv@divisor& (0+255),w,b
  8587  00153E  0100               	movlb	0	; () banked
  8588  001540  11B6               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  8589  001542  0100               	movlb	0	; () banked
  8590  001544  11B7               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  8591  001546  0100               	movlb	0	; () banked
  8592  001548  11B8               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  8593  00154A  B4D8               	btfsc	status,2,c
  8594  00154C  D042               	goto	l1113
  8595                           
  8596                           ; BSR set to: 0
  8597  00154E  0E01               	movlw	1
  8598  001550  0100               	movlb	0	; () banked
  8599  001552  6FBD               	movwf	___lldiv@counter& (0+255),b
  8600  001554  D008               	goto	l5457
  8601  001556                     l5455:
  8602                           
  8603                           ; BSR set to: 0
  8604  001556  0100               	movlb	0	; () banked
  8605  001558  90D8               	bcf	status,0,c
  8606  00155A  37B5               	rlcf	___lldiv@divisor& (0+255),f,b
  8607  00155C  37B6               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  8608  00155E  37B7               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  8609  001560  37B8               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  8610  001562  0100               	movlb	0	; () banked
  8611  001564  2BBD               	incf	___lldiv@counter& (0+255),f,b
  8612  001566                     l5457:
  8613                           
  8614                           ; BSR set to: 0
  8615  001566  0100               	movlb	0	; () banked
  8616  001568  AFB8               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  8617  00156A  D7F5               	goto	l5455
  8618  00156C                     l5459:
  8619                           
  8620                           ; BSR set to: 0
  8621  00156C  0100               	movlb	0	; () banked
  8622  00156E  90D8               	bcf	status,0,c
  8623  001570  37B9               	rlcf	___lldiv@quotient& (0+255),f,b
  8624  001572  37BA               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8625  001574  37BB               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8626  001576  37BC               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8627                           
  8628                           ; BSR set to: 0
  8629  001578  0100               	movlb	0	; () banked
  8630  00157A  51B5               	movf	___lldiv@divisor& (0+255),w,b
  8631  00157C  0100               	movlb	0	; () banked
  8632  00157E  5DB1               	subwf	___lldiv@dividend& (0+255),w,b
  8633  001580  0100               	movlb	0	; () banked
  8634  001582  51B6               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8635  001584  0100               	movlb	0	; () banked
  8636  001586  59B2               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8637  001588  0100               	movlb	0	; () banked
  8638  00158A  51B7               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8639  00158C  0100               	movlb	0	; () banked
  8640  00158E  59B3               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8641  001590  0100               	movlb	0	; () banked
  8642  001592  51B8               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8643  001594  0100               	movlb	0	; () banked
  8644  001596  59B4               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8645  001598  A0D8               	btfss	status,0,c
  8646  00159A  D012               	goto	l5467
  8647                           
  8648                           ; BSR set to: 0
  8649  00159C  0100               	movlb	0	; () banked
  8650  00159E  51B5               	movf	___lldiv@divisor& (0+255),w,b
  8651  0015A0  0100               	movlb	0	; () banked
  8652  0015A2  5FB1               	subwf	___lldiv@dividend& (0+255),f,b
  8653  0015A4  0100               	movlb	0	; () banked
  8654  0015A6  51B6               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8655  0015A8  0100               	movlb	0	; () banked
  8656  0015AA  5BB2               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8657  0015AC  0100               	movlb	0	; () banked
  8658  0015AE  51B7               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8659  0015B0  0100               	movlb	0	; () banked
  8660  0015B2  5BB3               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8661  0015B4  0100               	movlb	0	; () banked
  8662  0015B6  51B8               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8663  0015B8  0100               	movlb	0	; () banked
  8664  0015BA  5BB4               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8665                           
  8666                           ; BSR set to: 0
  8667  0015BC  0100               	movlb	0	; () banked
  8668  0015BE  81B9               	bsf	___lldiv@quotient& (0+255),0,b
  8669  0015C0                     l5467:
  8670                           
  8671                           ; BSR set to: 0
  8672  0015C0  0100               	movlb	0	; () banked
  8673  0015C2  90D8               	bcf	status,0,c
  8674  0015C4  33B8               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8675  0015C6  33B7               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8676  0015C8  33B6               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8677  0015CA  33B5               	rrcf	___lldiv@divisor& (0+255),f,b
  8678                           
  8679                           ; BSR set to: 0
  8680  0015CC  0100               	movlb	0	; () banked
  8681  0015CE  2FBD               	decfsz	___lldiv@counter& (0+255),f,b
  8682  0015D0  D7CD               	goto	l5459
  8683  0015D2                     l1113:
  8684                           
  8685                           ; BSR set to: 0
  8686  0015D2  C0B9  F0B1         	movff	___lldiv@quotient,?___lldiv
  8687  0015D6  C0BA  F0B2         	movff	___lldiv@quotient+1,?___lldiv+1
  8688  0015DA  C0BB  F0B3         	movff	___lldiv@quotient+2,?___lldiv+2
  8689  0015DE  C0BC  F0B4         	movff	___lldiv@quotient+3,?___lldiv+3
  8690                           
  8691                           ; BSR set to: 0
  8692  0015E2  0012               	return		;funcret
  8693  0015E4                     __end_of___lldiv:
  8694                           	opt stack 0
  8695                           tosu	equ	0xFFF
  8696                           tosh	equ	0xFFE
  8697                           tosl	equ	0xFFD
  8698                           pclath	equ	0xFFA
  8699                           tblptru	equ	0xFF8
  8700                           tblptrh	equ	0xFF7
  8701                           tblptrl	equ	0xFF6
  8702                           tablat	equ	0xFF5
  8703                           prodh	equ	0xFF4
  8704                           prodl	equ	0xFF3
  8705                           intcon	equ	0xFF2
  8706                           intcon3	equ	0xFF0
  8707                           postinc0	equ	0xFEE
  8708                           wreg	equ	0xFE8
  8709                           indf2	equ	0xFDF
  8710                           postinc2	equ	0xFDE
  8711                           postdec2	equ	0xFDD
  8712                           fsr2h	equ	0xFDA
  8713                           fsr2l	equ	0xFD9
  8714                           status	equ	0xFD8
  8715                           
  8716 ;; *************** function _keypressed *****************
  8717 ;; Defined at:
  8718 ;;		line 24 in file "Interrupt_ISR.c"
  8719 ;; Parameters:    Size  Location     Type
  8720 ;;		None
  8721 ;; Auto vars:     Size  Location     Type
  8722 ;;  i               1   60[COMRAM] unsigned char 
  8723 ;;  i               1   59[COMRAM] unsigned char 
  8724 ;;  i               1   58[COMRAM] unsigned char 
  8725 ;;  i               1   57[COMRAM] unsigned char 
  8726 ;;  i               1   56[COMRAM] unsigned char 
  8727 ;;  i               1   55[COMRAM] unsigned char 
  8728 ;;  i               1   54[COMRAM] unsigned char 
  8729 ;;  i               1   53[COMRAM] unsigned char 
  8730 ;;  i               1   52[COMRAM] unsigned char 
  8731 ;;  i               1   51[COMRAM] unsigned char 
  8732 ;;  i               1   50[COMRAM] unsigned char 
  8733 ;;  i               1   49[COMRAM] unsigned char 
  8734 ;;  keypress_tem    1   61[COMRAM] unsigned char 
  8735 ;;  keypress        1   48[COMRAM] unsigned char 
  8736 ;; Return value:  Size  Location     Type
  8737 ;;                  1    wreg      void 
  8738 ;; Registers used:
  8739 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8740 ;; Tracked objects:
  8741 ;;		On entry : 0/0
  8742 ;;		On exit  : 0/0
  8743 ;;		Unchanged: 0/0
  8744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8746 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8747 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8748 ;;      Totals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8749 ;;Total ram usage:       30 bytes
  8750 ;; Hardware stack levels used:    1
  8751 ;; Hardware stack levels required when called:    4
  8752 ;; This function calls:
  8753 ;;		_op_time
  8754 ;;		_pop_results
  8755 ;;		_tin_results
  8756 ;;		_tot_sorted
  8757 ;;		i2_initLCD
  8758 ;;		i2_lcdInst
  8759 ;;		i2_printf
  8760 ;; This function is called by:
  8761 ;;		Interrupt level 2
  8762 ;; This function uses a non-reentrant model
  8763 ;;
  8764                           
  8765                           	psect	intcode
  8766  000008                     __pintcode:
  8767                           	opt stack 0
  8768  000008                     _keypressed:
  8769                           	opt stack 20
  8770                           
  8771                           ; BSR set to: 0
  8772                           ;incstack = 0
  8773  000008  8243               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8774  00000A  ED93  F003         	call	int_func,f	;refresh shadow registers
  8775                           tosu	equ	0xFFF
  8776                           tosh	equ	0xFFE
  8777                           tosl	equ	0xFFD
  8778                           pclath	equ	0xFFA
  8779                           tblptru	equ	0xFF8
  8780                           tblptrh	equ	0xFF7
  8781                           tblptrl	equ	0xFF6
  8782                           tablat	equ	0xFF5
  8783                           prodh	equ	0xFF4
  8784                           prodl	equ	0xFF3
  8785                           intcon	equ	0xFF2
  8786                           intcon3	equ	0xFF0
  8787                           postinc0	equ	0xFEE
  8788                           wreg	equ	0xFE8
  8789                           indf2	equ	0xFDF
  8790                           postinc2	equ	0xFDE
  8791                           postdec2	equ	0xFDD
  8792                           fsr2h	equ	0xFDA
  8793                           fsr2l	equ	0xFD9
  8794                           status	equ	0xFD8
  8795                           
  8796                           	psect	intcode_body
  8797  000726                     __pintcode_body:
  8798                           	opt stack 20
  8799  000726                     int_func:
  8800                           	opt stack 20
  8801  000726  0006               	pop		; remove dummy address from shadow register refresh
  8802  000728  CFFA F023          	movff	pclath,??_keypressed+2
  8803  00072C  CFFB F024          	movff	pclatu,??_keypressed+3
  8804  000730  CFE9 F025          	movff	fsr0l,??_keypressed+4
  8805  000734  CFEA F026          	movff	fsr0h,??_keypressed+5
  8806  000738  CFE1 F027          	movff	fsr1l,??_keypressed+6
  8807  00073C  CFE2 F028          	movff	fsr1h,??_keypressed+7
  8808  000740  CFD9 F029          	movff	fsr2l,??_keypressed+8
  8809  000744  CFDA F02A          	movff	fsr2h,??_keypressed+9
  8810  000748  CFF3 F02B          	movff	prodl,??_keypressed+10
  8811  00074C  CFF4 F02C          	movff	prodh,??_keypressed+11
  8812  000750  CFF6 F02D          	movff	tblptrl,??_keypressed+12
  8813  000754  CFF7 F02E          	movff	tblptrh,??_keypressed+13
  8814  000758  CFF8 F02F          	movff	tblptru,??_keypressed+14
  8815  00075C  CFF5 F030          	movff	tablat,??_keypressed+15
  8816                           
  8817                           ;Interrupt_ISR.c: 47: if(INT1IF){
  8818  000760  A0F0               	btfss	intcon3,0,c	;volatile
  8819  000762  D12F               	goto	i2l232
  8820                           
  8821                           ;Interrupt_ISR.c: 48: lcdInst(0b11000000);;
  8822  000764  0EC0               	movlw	192
  8823  000766  EC29  F011         	call	i2_lcdInst
  8824                           
  8825                           ;Interrupt_ISR.c: 49: unsigned char keypress = (PORTB & 0xF0) >> 4;
  8826  00076A  3881               	swapf	3969,w,c	;volatile
  8827  00076C  0B0F               	andlw	15
  8828  00076E  0B0F               	andlw	15
  8829  000770  6E31               	movwf	keypressed@keypress,c
  8830                           
  8831                           ;Interrupt_ISR.c: 50: unsigned char keypress_temp = keys[keypress];
  8832  000772  5031               	movf	keypressed@keypress,w,c
  8833  000774  0D01               	mullw	1
  8834  000776  0E0B               	movlw	low _keys
  8835  000778  24F3               	addwf	prodl,w,c
  8836  00077A  6EF6               	movwf	tblptrl,c
  8837  00077C  0EFE               	movlw	high _keys
  8838  00077E  20F4               	addwfc	prodh,w,c
  8839  000780  6EF7               	movwf	tblptrh,c
  8840  000782                     	if	1	;There are 3 active tblptr bytes
  8841  000782  6AF8               	clrf	tblptru,c
  8842  000784  0E00               	movlw	low (__mediumconst shr (0+16))
  8843  000786  22F8               	addwfc	tblptru,f,c
  8844  000788                     	endif
  8845  000788  0008               	tblrd		*
  8846  00078A  CFF5 F03E          	movff	tablat,keypressed@keypress_temp
  8847                           
  8848                           ;Interrupt_ISR.c: 51: if (keypress_temp == 0b01000001){
  8849  00078E  0E41               	movlw	65
  8850  000790  183E               	xorwf	keypressed@keypress_temp,w,c
  8851  000792  A4D8               	btfss	status,2,c
  8852  000794  D03E               	goto	i2l4457
  8853                           
  8854                           ;Interrupt_ISR.c: 52: tot_sorted();
  8855  000796  ECCB  F010         	call	_tot_sorted	;wreg free
  8856                           
  8857                           ;Interrupt_ISR.c: 54: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  8858  00079A  0E00               	movlw	0
  8859  00079C  6E32               	movwf	keypressed@i,c
  8860  00079E                     i2l4429:
  8861  00079E  0E09               	movlw	9
  8862  0007A0  6432               	cpfsgt	keypressed@i,c
  8863  0007A2  D001               	goto	i2l4433
  8864  0007A4  D00E               	goto	i2l4437
  8865  0007A6                     i2l4433:
  8866  0007A6  0E02               	movlw	2
  8867  0007A8  6E22               	movwf	(??_keypressed+1)& (0+255),c
  8868  0007AA  0E3F               	movlw	63
  8869  0007AC  6E21               	movwf	??_keypressed& (0+255),c
  8870  0007AE  0E2B               	movlw	43
  8871  0007B0                     i2u557_47:
  8872  0007B0  2EE8               	decfsz	wreg,f,c
  8873  0007B2  D7FE               	bra	i2u557_47
  8874  0007B4  2E21               	decfsz	??_keypressed& (0+255),f,c
  8875  0007B6  D7FC               	bra	i2u557_47
  8876  0007B8  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  8877  0007BA  D7FA               	bra	i2u557_47
  8878  0007BC  F000               	nop	
  8879  0007BE  2A32               	incf	keypressed@i,f,c
  8880  0007C0  D7EE               	goto	i2l4429
  8881  0007C2                     i2l4437:
  8882                           
  8883                           ;Interrupt_ISR.c: 55: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  8884  0007C2  0E00               	movlw	0
  8885  0007C4  6E33               	movwf	keypressed@i_354,c
  8886  0007C6                     i2l4439:
  8887  0007C6  0E09               	movlw	9
  8888  0007C8  6433               	cpfsgt	keypressed@i_354,c
  8889  0007CA  D001               	goto	i2l4443
  8890  0007CC  D00E               	goto	i2l4447
  8891  0007CE                     i2l4443:
  8892  0007CE  0E02               	movlw	2
  8893  0007D0  6E22               	movwf	(??_keypressed+1)& (0+255),c
  8894  0007D2  0E3F               	movlw	63
  8895  0007D4  6E21               	movwf	??_keypressed& (0+255),c
  8896  0007D6  0E2B               	movlw	43
  8897  0007D8                     i2u558_47:
  8898  0007D8  2EE8               	decfsz	wreg,f,c
  8899  0007DA  D7FE               	bra	i2u558_47
  8900  0007DC  2E21               	decfsz	??_keypressed& (0+255),f,c
  8901  0007DE  D7FC               	bra	i2u558_47
  8902  0007E0  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  8903  0007E2  D7FA               	bra	i2u558_47
  8904  0007E4  F000               	nop	
  8905  0007E6  2A33               	incf	keypressed@i_354,f,c
  8906  0007E8  D7EE               	goto	i2l4439
  8907  0007EA                     i2l4447:
  8908                           
  8909                           ;Interrupt_ISR.c: 56: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  8910  0007EA  0E00               	movlw	0
  8911  0007EC  6E34               	movwf	keypressed@i_355,c
  8912  0007EE                     i2l4449:
  8913  0007EE  0E09               	movlw	9
  8914  0007F0  6434               	cpfsgt	keypressed@i_355,c
  8915  0007F2  D001               	goto	i2l4453
  8916  0007F4  D0E2               	goto	i2l4567
  8917  0007F6                     i2l4453:
  8918  0007F6  0E02               	movlw	2
  8919  0007F8  6E22               	movwf	(??_keypressed+1)& (0+255),c
  8920  0007FA  0E3F               	movlw	63
  8921  0007FC  6E21               	movwf	??_keypressed& (0+255),c
  8922  0007FE  0E2B               	movlw	43
  8923  000800                     i2u559_47:
  8924  000800  2EE8               	decfsz	wreg,f,c
  8925  000802  D7FE               	bra	i2u559_47
  8926  000804  2E21               	decfsz	??_keypressed& (0+255),f,c
  8927  000806  D7FC               	bra	i2u559_47
  8928  000808  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  8929  00080A  D7FA               	bra	i2u559_47
  8930  00080C  F000               	nop	
  8931  00080E  2A34               	incf	keypressed@i_355,f,c
  8932  000810  D7EE               	goto	i2l4449
  8933  000812                     i2l4457:
  8934                           
  8935                           ;Interrupt_ISR.c: 58: else if(keypress_temp == 0b01000010){
  8936  000812  0E42               	movlw	66
  8937  000814  183E               	xorwf	keypressed@keypress_temp,w,c
  8938  000816  A4D8               	btfss	status,2,c
  8939  000818  D03E               	goto	i2l4491
  8940                           
  8941                           ;Interrupt_ISR.c: 59: pop_results();
  8942  00081A  EC35  F00F         	call	_pop_results	;wreg free
  8943                           
  8944                           ;Interrupt_ISR.c: 61: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  8945  00081E  0E00               	movlw	0
  8946  000820  6E35               	movwf	keypressed@i_356,c
  8947  000822                     i2l4463:
  8948  000822  0E09               	movlw	9
  8949  000824  6435               	cpfsgt	keypressed@i_356,c
  8950  000826  D001               	goto	i2l4467
  8951  000828  D00E               	goto	i2l4471
  8952  00082A                     i2l4467:
  8953  00082A  0E02               	movlw	2
  8954  00082C  6E22               	movwf	(??_keypressed+1)& (0+255),c
  8955  00082E  0E3F               	movlw	63
  8956  000830  6E21               	movwf	??_keypressed& (0+255),c
  8957  000832  0E2B               	movlw	43
  8958  000834                     i2u560_47:
  8959  000834  2EE8               	decfsz	wreg,f,c
  8960  000836  D7FE               	bra	i2u560_47
  8961  000838  2E21               	decfsz	??_keypressed& (0+255),f,c
  8962  00083A  D7FC               	bra	i2u560_47
  8963  00083C  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  8964  00083E  D7FA               	bra	i2u560_47
  8965  000840  F000               	nop	
  8966  000842  2A35               	incf	keypressed@i_356,f,c
  8967  000844  D7EE               	goto	i2l4463
  8968  000846                     i2l4471:
  8969                           
  8970                           ;Interrupt_ISR.c: 62: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  8971  000846  0E00               	movlw	0
  8972  000848  6E36               	movwf	keypressed@i_357,c
  8973  00084A                     i2l4473:
  8974  00084A  0E09               	movlw	9
  8975  00084C  6436               	cpfsgt	keypressed@i_357,c
  8976  00084E  D001               	goto	i2l4477
  8977  000850  D00E               	goto	i2l4481
  8978  000852                     i2l4477:
  8979  000852  0E02               	movlw	2
  8980  000854  6E22               	movwf	(??_keypressed+1)& (0+255),c
  8981  000856  0E3F               	movlw	63
  8982  000858  6E21               	movwf	??_keypressed& (0+255),c
  8983  00085A  0E2B               	movlw	43
  8984  00085C                     i2u561_47:
  8985  00085C  2EE8               	decfsz	wreg,f,c
  8986  00085E  D7FE               	bra	i2u561_47
  8987  000860  2E21               	decfsz	??_keypressed& (0+255),f,c
  8988  000862  D7FC               	bra	i2u561_47
  8989  000864  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  8990  000866  D7FA               	bra	i2u561_47
  8991  000868  F000               	nop	
  8992  00086A  2A36               	incf	keypressed@i_357,f,c
  8993  00086C  D7EE               	goto	i2l4473
  8994  00086E                     i2l4481:
  8995                           
  8996                           ;Interrupt_ISR.c: 63: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  8997  00086E  0E00               	movlw	0
  8998  000870  6E37               	movwf	keypressed@i_358,c
  8999  000872                     i2l4483:
  9000  000872  0E09               	movlw	9
  9001  000874  6437               	cpfsgt	keypressed@i_358,c
  9002  000876  D001               	goto	i2l4487
  9003  000878  D0A0               	goto	i2l4567
  9004  00087A                     i2l4487:
  9005  00087A  0E02               	movlw	2
  9006  00087C  6E22               	movwf	(??_keypressed+1)& (0+255),c
  9007  00087E  0E3F               	movlw	63
  9008  000880  6E21               	movwf	??_keypressed& (0+255),c
  9009  000882  0E2B               	movlw	43
  9010  000884                     i2u562_47:
  9011  000884  2EE8               	decfsz	wreg,f,c
  9012  000886  D7FE               	bra	i2u562_47
  9013  000888  2E21               	decfsz	??_keypressed& (0+255),f,c
  9014  00088A  D7FC               	bra	i2u562_47
  9015  00088C  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  9016  00088E  D7FA               	bra	i2u562_47
  9017  000890  F000               	nop	
  9018  000892  2A37               	incf	keypressed@i_358,f,c
  9019  000894  D7EE               	goto	i2l4483
  9020  000896                     i2l4491:
  9021                           
  9022                           ;Interrupt_ISR.c: 65: else if(keypress_temp == 0b01000011){
  9023  000896  0E43               	movlw	67
  9024  000898  183E               	xorwf	keypressed@keypress_temp,w,c
  9025  00089A  A4D8               	btfss	status,2,c
  9026  00089C  D03E               	goto	i2l4525
  9027                           
  9028                           ;Interrupt_ISR.c: 66: tin_results();
  9029  00089E  EC18  F00F         	call	_tin_results	;wreg free
  9030                           
  9031                           ;Interrupt_ISR.c: 68: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  9032  0008A2  0E00               	movlw	0
  9033  0008A4  6E38               	movwf	keypressed@i_359,c
  9034  0008A6                     i2l4497:
  9035  0008A6  0E09               	movlw	9
  9036  0008A8  6438               	cpfsgt	keypressed@i_359,c
  9037  0008AA  D001               	goto	i2l4501
  9038  0008AC  D00E               	goto	i2l4505
  9039  0008AE                     i2l4501:
  9040  0008AE  0E02               	movlw	2
  9041  0008B0  6E22               	movwf	(??_keypressed+1)& (0+255),c
  9042  0008B2  0E3F               	movlw	63
  9043  0008B4  6E21               	movwf	??_keypressed& (0+255),c
  9044  0008B6  0E2B               	movlw	43
  9045  0008B8                     i2u563_47:
  9046  0008B8  2EE8               	decfsz	wreg,f,c
  9047  0008BA  D7FE               	bra	i2u563_47
  9048  0008BC  2E21               	decfsz	??_keypressed& (0+255),f,c
  9049  0008BE  D7FC               	bra	i2u563_47
  9050  0008C0  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  9051  0008C2  D7FA               	bra	i2u563_47
  9052  0008C4  F000               	nop	
  9053  0008C6  2A38               	incf	keypressed@i_359,f,c
  9054  0008C8  D7EE               	goto	i2l4497
  9055  0008CA                     i2l4505:
  9056                           
  9057                           ;Interrupt_ISR.c: 69: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  9058  0008CA  0E00               	movlw	0
  9059  0008CC  6E39               	movwf	keypressed@i_360,c
  9060  0008CE                     i2l4507:
  9061  0008CE  0E09               	movlw	9
  9062  0008D0  6439               	cpfsgt	keypressed@i_360,c
  9063  0008D2  D001               	goto	i2l4511
  9064  0008D4  D00E               	goto	i2l4515
  9065  0008D6                     i2l4511:
  9066  0008D6  0E02               	movlw	2
  9067  0008D8  6E22               	movwf	(??_keypressed+1)& (0+255),c
  9068  0008DA  0E3F               	movlw	63
  9069  0008DC  6E21               	movwf	??_keypressed& (0+255),c
  9070  0008DE  0E2B               	movlw	43
  9071  0008E0                     i2u564_47:
  9072  0008E0  2EE8               	decfsz	wreg,f,c
  9073  0008E2  D7FE               	bra	i2u564_47
  9074  0008E4  2E21               	decfsz	??_keypressed& (0+255),f,c
  9075  0008E6  D7FC               	bra	i2u564_47
  9076  0008E8  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  9077  0008EA  D7FA               	bra	i2u564_47
  9078  0008EC  F000               	nop	
  9079  0008EE  2A39               	incf	keypressed@i_360,f,c
  9080  0008F0  D7EE               	goto	i2l4507
  9081  0008F2                     i2l4515:
  9082                           
  9083                           ;Interrupt_ISR.c: 70: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  9084  0008F2  0E00               	movlw	0
  9085  0008F4  6E3A               	movwf	keypressed@i_361,c
  9086  0008F6                     i2l4517:
  9087  0008F6  0E09               	movlw	9
  9088  0008F8  643A               	cpfsgt	keypressed@i_361,c
  9089  0008FA  D001               	goto	i2l4521
  9090  0008FC  D05E               	goto	i2l4567
  9091  0008FE                     i2l4521:
  9092  0008FE  0E02               	movlw	2
  9093  000900  6E22               	movwf	(??_keypressed+1)& (0+255),c
  9094  000902  0E3F               	movlw	63
  9095  000904  6E21               	movwf	??_keypressed& (0+255),c
  9096  000906  0E2B               	movlw	43
  9097  000908                     i2u565_47:
  9098  000908  2EE8               	decfsz	wreg,f,c
  9099  00090A  D7FE               	bra	i2u565_47
  9100  00090C  2E21               	decfsz	??_keypressed& (0+255),f,c
  9101  00090E  D7FC               	bra	i2u565_47
  9102  000910  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  9103  000912  D7FA               	bra	i2u565_47
  9104  000914  F000               	nop	
  9105  000916  2A3A               	incf	keypressed@i_361,f,c
  9106  000918  D7EE               	goto	i2l4517
  9107  00091A                     i2l4525:
  9108                           
  9109                           ;Interrupt_ISR.c: 72: else if(keypress_temp == 0b01000100){
  9110  00091A  0E44               	movlw	68
  9111  00091C  183E               	xorwf	keypressed@keypress_temp,w,c
  9112  00091E  A4D8               	btfss	status,2,c
  9113  000920  D03E               	goto	i2l4559
  9114                           
  9115                           ;Interrupt_ISR.c: 73: op_time();
  9116  000922  EC87  F00E         	call	_op_time	;wreg free
  9117                           
  9118                           ;Interrupt_ISR.c: 75: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  9119  000926  0E00               	movlw	0
  9120  000928  6E3B               	movwf	keypressed@i_362,c
  9121  00092A                     i2l4531:
  9122  00092A  0E09               	movlw	9
  9123  00092C  643B               	cpfsgt	keypressed@i_362,c
  9124  00092E  D001               	goto	i2l4535
  9125  000930  D00E               	goto	i2l4539
  9126  000932                     i2l4535:
  9127  000932  0E02               	movlw	2
  9128  000934  6E22               	movwf	(??_keypressed+1)& (0+255),c
  9129  000936  0E3F               	movlw	63
  9130  000938  6E21               	movwf	??_keypressed& (0+255),c
  9131  00093A  0E2B               	movlw	43
  9132  00093C                     i2u566_47:
  9133  00093C  2EE8               	decfsz	wreg,f,c
  9134  00093E  D7FE               	bra	i2u566_47
  9135  000940  2E21               	decfsz	??_keypressed& (0+255),f,c
  9136  000942  D7FC               	bra	i2u566_47
  9137  000944  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  9138  000946  D7FA               	bra	i2u566_47
  9139  000948  F000               	nop	
  9140  00094A  2A3B               	incf	keypressed@i_362,f,c
  9141  00094C  D7EE               	goto	i2l4531
  9142  00094E                     i2l4539:
  9143                           
  9144                           ;Interrupt_ISR.c: 76: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  9145  00094E  0E00               	movlw	0
  9146  000950  6E3C               	movwf	keypressed@i_363,c
  9147  000952                     i2l4541:
  9148  000952  0E09               	movlw	9
  9149  000954  643C               	cpfsgt	keypressed@i_363,c
  9150  000956  D001               	goto	i2l4545
  9151  000958  D00E               	goto	i2l4549
  9152  00095A                     i2l4545:
  9153  00095A  0E02               	movlw	2
  9154  00095C  6E22               	movwf	(??_keypressed+1)& (0+255),c
  9155  00095E  0E3F               	movlw	63
  9156  000960  6E21               	movwf	??_keypressed& (0+255),c
  9157  000962  0E2B               	movlw	43
  9158  000964                     i2u567_47:
  9159  000964  2EE8               	decfsz	wreg,f,c
  9160  000966  D7FE               	bra	i2u567_47
  9161  000968  2E21               	decfsz	??_keypressed& (0+255),f,c
  9162  00096A  D7FC               	bra	i2u567_47
  9163  00096C  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  9164  00096E  D7FA               	bra	i2u567_47
  9165  000970  F000               	nop	
  9166  000972  2A3C               	incf	keypressed@i_363,f,c
  9167  000974  D7EE               	goto	i2l4541
  9168  000976                     i2l4549:
  9169                           
  9170                           ;Interrupt_ISR.c: 77: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.
      +                          0)));};
  9171  000976  0E00               	movlw	0
  9172  000978  6E3D               	movwf	keypressed@i_364,c
  9173  00097A                     i2l4551:
  9174  00097A  0E09               	movlw	9
  9175  00097C  643D               	cpfsgt	keypressed@i_364,c
  9176  00097E  D001               	goto	i2l4555
  9177  000980  D01C               	goto	i2l4567
  9178  000982                     i2l4555:
  9179  000982  0E02               	movlw	2
  9180  000984  6E22               	movwf	(??_keypressed+1)& (0+255),c
  9181  000986  0E3F               	movlw	63
  9182  000988  6E21               	movwf	??_keypressed& (0+255),c
  9183  00098A  0E2B               	movlw	43
  9184  00098C                     i2u568_47:
  9185  00098C  2EE8               	decfsz	wreg,f,c
  9186  00098E  D7FE               	bra	i2u568_47
  9187  000990  2E21               	decfsz	??_keypressed& (0+255),f,c
  9188  000992  D7FC               	bra	i2u568_47
  9189  000994  2E22               	decfsz	(??_keypressed+1)& (0+255),f,c
  9190  000996  D7FA               	bra	i2u568_47
  9191  000998  F000               	nop	
  9192  00099A  2A3D               	incf	keypressed@i_364,f,c
  9193  00099C  D7EE               	goto	i2l4551
  9194  00099E                     i2l4559:
  9195  00099E  0E2A               	movlw	42
  9196  0009A0  183E               	xorwf	keypressed@keypress_temp,w,c
  9197  0009A2  A4D8               	btfss	status,2,c
  9198  0009A4  D002               	goto	i2l4563
  9199  0009A6  00FF               	reset		;# 
  9200                           
  9201                           ;Interrupt_ISR.c: 80: }
  9202  0009A8  D008               	goto	i2l4567
  9203  0009AA                     i2l4563:
  9204                           
  9205                           ;Interrupt_ISR.c: 81: else{
  9206                           ;Interrupt_ISR.c: 82: initLCD();
  9207  0009AA  ECD4  F00E         	call	i2_initLCD	;wreg free
  9208                           
  9209                           ;Interrupt_ISR.c: 83: printf(" ");
  9210  0009AE  0E61               	movlw	low (STR_11+11)
  9211  0009B0  6E0D               	movwf	i2printf@f,c
  9212  0009B2  0EFF               	movlw	high (STR_11+11)
  9213  0009B4  6E0E               	movwf	i2printf@f+1,c
  9214  0009B6  ECF8  F001         	call	i2_printf	;wreg free
  9215  0009BA                     i2l4567:
  9216                           
  9217                           ;Interrupt_ISR.c: 84: }
  9218                           ;Interrupt_ISR.c: 85: lcdInst(0b10000000);;
  9219  0009BA  0E80               	movlw	128
  9220  0009BC  EC29  F011         	call	i2_lcdInst
  9221                           
  9222                           ;Interrupt_ISR.c: 86: INT1IF = 0;
  9223  0009C0  90F0               	bcf	intcon3,0,c	;volatile
  9224  0009C2                     i2l232:
  9225  0009C2  C030  FFF5         	movff	??_keypressed+15,tablat
  9226  0009C6  C02F  FFF8         	movff	??_keypressed+14,tblptru
  9227  0009CA  C02E  FFF7         	movff	??_keypressed+13,tblptrh
  9228  0009CE  C02D  FFF6         	movff	??_keypressed+12,tblptrl
  9229  0009D2  C02C  FFF4         	movff	??_keypressed+11,prodh
  9230  0009D6  C02B  FFF3         	movff	??_keypressed+10,prodl
  9231  0009DA  C02A  FFDA         	movff	??_keypressed+9,fsr2h
  9232  0009DE  C029  FFD9         	movff	??_keypressed+8,fsr2l
  9233  0009E2  C028  FFE2         	movff	??_keypressed+7,fsr1h
  9234  0009E6  C027  FFE1         	movff	??_keypressed+6,fsr1l
  9235  0009EA  C026  FFEA         	movff	??_keypressed+5,fsr0h
  9236  0009EE  C025  FFE9         	movff	??_keypressed+4,fsr0l
  9237  0009F2  C024  FFFB         	movff	??_keypressed+3,pclatu
  9238  0009F6  C023  FFFA         	movff	??_keypressed+2,pclath
  9239  0009FA  9243               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9240  0009FC  0011               	retfie		f
  9241  0009FE                     __end_of_keypressed:
  9242                           	opt stack 0
  9243                           tosu	equ	0xFFF
  9244                           tosh	equ	0xFFE
  9245                           tosl	equ	0xFFD
  9246                           pclatu	equ	0xFFB
  9247                           pclath	equ	0xFFA
  9248                           tblptru	equ	0xFF8
  9249                           tblptrh	equ	0xFF7
  9250                           tblptrl	equ	0xFF6
  9251                           tablat	equ	0xFF5
  9252                           prodh	equ	0xFF4
  9253                           prodl	equ	0xFF3
  9254                           intcon	equ	0xFF2
  9255                           intcon3	equ	0xFF0
  9256                           postinc0	equ	0xFEE
  9257                           fsr0h	equ	0xFEA
  9258                           fsr0l	equ	0xFE9
  9259                           wreg	equ	0xFE8
  9260                           fsr1h	equ	0xFE2
  9261                           fsr1l	equ	0xFE1
  9262                           indf2	equ	0xFDF
  9263                           postinc2	equ	0xFDE
  9264                           postdec2	equ	0xFDD
  9265                           fsr2h	equ	0xFDA
  9266                           fsr2l	equ	0xFD9
  9267                           status	equ	0xFD8
  9268                           
  9269 ;; *************** function _tot_sorted *****************
  9270 ;; Defined at:
  9271 ;;		line 241 in file "operation.c"
  9272 ;; Parameters:    Size  Location     Type
  9273 ;;		None
  9274 ;; Auto vars:     Size  Location     Type
  9275 ;;		None
  9276 ;; Return value:  Size  Location     Type
  9277 ;;                  1    wreg      void 
  9278 ;; Registers used:
  9279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9280 ;; Tracked objects:
  9281 ;;		On entry : 0/0
  9282 ;;		On exit  : 0/0
  9283 ;;		Unchanged: 0/0
  9284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9289 ;;Total ram usage:        0 bytes
  9290 ;; Hardware stack levels used:    1
  9291 ;; Hardware stack levels required when called:    3
  9292 ;; This function calls:
  9293 ;;		i2_initLCD
  9294 ;;		i2_lcdInst
  9295 ;;		i2_printf
  9296 ;; This function is called by:
  9297 ;;		_keypressed
  9298 ;; This function uses a non-reentrant model
  9299 ;;
  9300                           
  9301                           	psect	text51
  9302  002196                     __ptext51:
  9303                           	opt stack 0
  9304  002196                     _tot_sorted:
  9305                           	opt stack 20
  9306                           
  9307                           ;operation.c: 242: lcdInst(0b10000000);;
  9308                           
  9309                           ;incstack = 0
  9310  002196  0E80               	movlw	128
  9311  002198  EC29  F011         	call	i2_lcdInst
  9312                           
  9313                           ;operation.c: 243: initLCD();
  9314  00219C  ECD4  F00E         	call	i2_initLCD	;wreg free
  9315                           
  9316                           ;operation.c: 244: printf("Total Sorted: %02x", tot);
  9317  0021A0  0E4B               	movlw	low STR_20
  9318  0021A2  6E0D               	movwf	i2printf@f,c
  9319  0021A4  0EFE               	movlw	high STR_20
  9320  0021A6  6E0E               	movwf	i2printf@f+1,c
  9321  0021A8  C03F  F00F         	movff	_tot,?i2_printf+2
  9322  0021AC  C040  F010         	movff	_tot+1,?i2_printf+3
  9323  0021B0  ECF8  F001         	call	i2_printf	;wreg free
  9324  0021B4  0012               	return	
  9325  0021B6                     __end_of_tot_sorted:
  9326                           	opt stack 0
  9327                           tosu	equ	0xFFF
  9328                           tosh	equ	0xFFE
  9329                           tosl	equ	0xFFD
  9330                           pclatu	equ	0xFFB
  9331                           pclath	equ	0xFFA
  9332                           tblptru	equ	0xFF8
  9333                           tblptrh	equ	0xFF7
  9334                           tblptrl	equ	0xFF6
  9335                           tablat	equ	0xFF5
  9336                           prodh	equ	0xFF4
  9337                           prodl	equ	0xFF3
  9338                           intcon	equ	0xFF2
  9339                           intcon3	equ	0xFF0
  9340                           postinc0	equ	0xFEE
  9341                           fsr0h	equ	0xFEA
  9342                           fsr0l	equ	0xFE9
  9343                           wreg	equ	0xFE8
  9344                           fsr1h	equ	0xFE2
  9345                           fsr1l	equ	0xFE1
  9346                           indf2	equ	0xFDF
  9347                           postinc2	equ	0xFDE
  9348                           postdec2	equ	0xFDD
  9349                           fsr2h	equ	0xFDA
  9350                           fsr2l	equ	0xFD9
  9351                           status	equ	0xFD8
  9352                           
  9353 ;; *************** function _tin_results *****************
  9354 ;; Defined at:
  9355 ;;		line 255 in file "operation.c"
  9356 ;; Parameters:    Size  Location     Type
  9357 ;;		None
  9358 ;; Auto vars:     Size  Location     Type
  9359 ;;		None
  9360 ;; Return value:  Size  Location     Type
  9361 ;;                  1    wreg      void 
  9362 ;; Registers used:
  9363 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9364 ;; Tracked objects:
  9365 ;;		On entry : 0/0
  9366 ;;		On exit  : 0/0
  9367 ;;		Unchanged: 0/0
  9368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9373 ;;Total ram usage:        0 bytes
  9374 ;; Hardware stack levels used:    1
  9375 ;; Hardware stack levels required when called:    3
  9376 ;; This function calls:
  9377 ;;		i2_initLCD
  9378 ;;		i2_lcdInst
  9379 ;;		i2_printf
  9380 ;; This function is called by:
  9381 ;;		_keypressed
  9382 ;; This function uses a non-reentrant model
  9383 ;;
  9384                           
  9385                           	psect	text52
  9386  001E30                     __ptext52:
  9387                           	opt stack 0
  9388  001E30                     _tin_results:
  9389                           	opt stack 20
  9390                           
  9391                           ;operation.c: 256: lcdInst(0b10000000);;
  9392                           
  9393                           ;incstack = 0
  9394  001E30  0E80               	movlw	128
  9395  001E32  EC29  F011         	call	i2_lcdInst
  9396                           
  9397                           ;operation.c: 257: initLCD();
  9398  001E36  ECD4  F00E         	call	i2_initLCD	;wreg free
  9399                           
  9400                           ;operation.c: 258: printf("With Label: %02x",tin_can);
  9401  001E3A  0EB3               	movlw	low STR_22
  9402  001E3C  6E0D               	movwf	i2printf@f,c
  9403  001E3E  0EFE               	movlw	high STR_22
  9404  001E40  6E0E               	movwf	i2printf@f+1,c
  9405  001E42  C09D  F00F         	movff	_tin_can,?i2_printf+2
  9406  001E46  C09E  F010         	movff	_tin_can+1,?i2_printf+3
  9407  001E4A  ECF8  F001         	call	i2_printf	;wreg free
  9408                           
  9409                           ;operation.c: 259: lcdInst(0b11000000);;
  9410  001E4E  0EC0               	movlw	192
  9411  001E50  EC29  F011         	call	i2_lcdInst
  9412                           
  9413                           ;operation.c: 260: printf("No Label: %02x",tin_can_label);
  9414  001E54  0EE3               	movlw	low STR_23
  9415  001E56  6E0D               	movwf	i2printf@f,c
  9416  001E58  0EFE               	movlw	high STR_23
  9417  001E5A  6E0E               	movwf	i2printf@f+1,c
  9418  001E5C  C09F  F00F         	movff	_tin_can_label,?i2_printf+2
  9419  001E60  C0A0  F010         	movff	_tin_can_label+1,?i2_printf+3
  9420  001E64  ECF8  F001         	call	i2_printf	;wreg free
  9421  001E68  0012               	return	
  9422  001E6A                     __end_of_tin_results:
  9423                           	opt stack 0
  9424                           tosu	equ	0xFFF
  9425                           tosh	equ	0xFFE
  9426                           tosl	equ	0xFFD
  9427                           pclatu	equ	0xFFB
  9428                           pclath	equ	0xFFA
  9429                           tblptru	equ	0xFF8
  9430                           tblptrh	equ	0xFF7
  9431                           tblptrl	equ	0xFF6
  9432                           tablat	equ	0xFF5
  9433                           prodh	equ	0xFF4
  9434                           prodl	equ	0xFF3
  9435                           intcon	equ	0xFF2
  9436                           intcon3	equ	0xFF0
  9437                           postinc0	equ	0xFEE
  9438                           fsr0h	equ	0xFEA
  9439                           fsr0l	equ	0xFE9
  9440                           wreg	equ	0xFE8
  9441                           fsr1h	equ	0xFE2
  9442                           fsr1l	equ	0xFE1
  9443                           indf2	equ	0xFDF
  9444                           postinc2	equ	0xFDE
  9445                           postdec2	equ	0xFDD
  9446                           fsr2h	equ	0xFDA
  9447                           fsr2l	equ	0xFD9
  9448                           status	equ	0xFD8
  9449                           
  9450 ;; *************** function _pop_results *****************
  9451 ;; Defined at:
  9452 ;;		line 264 in file "operation.c"
  9453 ;; Parameters:    Size  Location     Type
  9454 ;;		None
  9455 ;; Auto vars:     Size  Location     Type
  9456 ;;		None
  9457 ;; Return value:  Size  Location     Type
  9458 ;;                  1    wreg      void 
  9459 ;; Registers used:
  9460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9461 ;; Tracked objects:
  9462 ;;		On entry : 0/0
  9463 ;;		On exit  : 0/0
  9464 ;;		Unchanged: 0/0
  9465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9470 ;;Total ram usage:        0 bytes
  9471 ;; Hardware stack levels used:    1
  9472 ;; Hardware stack levels required when called:    3
  9473 ;; This function calls:
  9474 ;;		i2_initLCD
  9475 ;;		i2_lcdInst
  9476 ;;		i2_printf
  9477 ;; This function is called by:
  9478 ;;		_keypressed
  9479 ;; This function uses a non-reentrant model
  9480 ;;
  9481                           
  9482                           	psect	text53
  9483  001E6A                     __ptext53:
  9484                           	opt stack 0
  9485  001E6A                     _pop_results:
  9486                           	opt stack 20
  9487                           
  9488                           ;operation.c: 265: lcdInst(0b10000000);;
  9489                           
  9490                           ;incstack = 0
  9491  001E6A  0E80               	movlw	128
  9492  001E6C  EC29  F011         	call	i2_lcdInst
  9493                           
  9494                           ;operation.c: 266: initLCD();
  9495  001E70  ECD4  F00E         	call	i2_initLCD	;wreg free
  9496                           
  9497                           ;operation.c: 267: printf("With Tab: %02x",pop_can_tab);
  9498  001E74  0ED4               	movlw	low STR_24
  9499  001E76  6E0D               	movwf	i2printf@f,c
  9500  001E78  0EFE               	movlw	high STR_24
  9501  001E7A  6E0E               	movwf	i2printf@f+1,c
  9502  001E7C  C099  F00F         	movff	_pop_can_tab,?i2_printf+2
  9503  001E80  C09A  F010         	movff	_pop_can_tab+1,?i2_printf+3
  9504  001E84  ECF8  F001         	call	i2_printf	;wreg free
  9505                           
  9506                           ;operation.c: 268: lcdInst(0b11000000);;
  9507  001E88  0EC0               	movlw	192
  9508  001E8A  EC29  F011         	call	i2_lcdInst
  9509                           
  9510                           ;operation.c: 269: printf("No Tab: %02x",pop_can);
  9511  001E8E  0E70               	movlw	low STR_25
  9512  001E90  6E0D               	movwf	i2printf@f,c
  9513  001E92  0EFF               	movlw	high STR_25
  9514  001E94  6E0E               	movwf	i2printf@f+1,c
  9515  001E96  C09B  F00F         	movff	_pop_can,?i2_printf+2
  9516  001E9A  C09C  F010         	movff	_pop_can+1,?i2_printf+3
  9517  001E9E  ECF8  F001         	call	i2_printf	;wreg free
  9518  001EA2  0012               	return	
  9519  001EA4                     __end_of_pop_results:
  9520                           	opt stack 0
  9521                           tosu	equ	0xFFF
  9522                           tosh	equ	0xFFE
  9523                           tosl	equ	0xFFD
  9524                           pclatu	equ	0xFFB
  9525                           pclath	equ	0xFFA
  9526                           tblptru	equ	0xFF8
  9527                           tblptrh	equ	0xFF7
  9528                           tblptrl	equ	0xFF6
  9529                           tablat	equ	0xFF5
  9530                           prodh	equ	0xFF4
  9531                           prodl	equ	0xFF3
  9532                           intcon	equ	0xFF2
  9533                           intcon3	equ	0xFF0
  9534                           postinc0	equ	0xFEE
  9535                           fsr0h	equ	0xFEA
  9536                           fsr0l	equ	0xFE9
  9537                           wreg	equ	0xFE8
  9538                           fsr1h	equ	0xFE2
  9539                           fsr1l	equ	0xFE1
  9540                           indf2	equ	0xFDF
  9541                           postinc2	equ	0xFDE
  9542                           postdec2	equ	0xFDD
  9543                           fsr2h	equ	0xFDA
  9544                           fsr2l	equ	0xFD9
  9545                           status	equ	0xFD8
  9546                           
  9547 ;; *************** function _op_time *****************
  9548 ;; Defined at:
  9549 ;;		line 248 in file "operation.c"
  9550 ;; Parameters:    Size  Location     Type
  9551 ;;		None
  9552 ;; Auto vars:     Size  Location     Type
  9553 ;;		None
  9554 ;; Return value:  Size  Location     Type
  9555 ;;                  1    wreg      void 
  9556 ;; Registers used:
  9557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9558 ;; Tracked objects:
  9559 ;;		On entry : 0/0
  9560 ;;		On exit  : 0/0
  9561 ;;		Unchanged: 0/0
  9562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9567 ;;Total ram usage:        0 bytes
  9568 ;; Hardware stack levels used:    1
  9569 ;; Hardware stack levels required when called:    3
  9570 ;; This function calls:
  9571 ;;		___awmod
  9572 ;;		i2___awdiv
  9573 ;;		i2_initLCD
  9574 ;;		i2_lcdInst
  9575 ;;		i2_printf
  9576 ;; This function is called by:
  9577 ;;		_keypressed
  9578 ;; This function uses a non-reentrant model
  9579 ;;
  9580                           
  9581                           	psect	text54
  9582  001D0E                     __ptext54:
  9583                           	opt stack 0
  9584  001D0E                     _op_time:
  9585                           	opt stack 20
  9586                           
  9587                           ;operation.c: 249: lcdInst(0b10000000);;
  9588                           
  9589                           ;incstack = 0
  9590  001D0E  0E80               	movlw	128
  9591  001D10  EC29  F011         	call	i2_lcdInst
  9592                           
  9593                           ;operation.c: 250: initLCD();
  9594  001D14  ECD4  F00E         	call	i2_initLCD	;wreg free
  9595                           
  9596                           ;operation.c: 251: printf("Time: %01d min %02d s", operation_time/60, operation_time%60 
      +                          );
  9597  001D18  0E35               	movlw	low STR_21
  9598  001D1A  6E0D               	movwf	i2printf@f,c
  9599  001D1C  0EFE               	movlw	high STR_21
  9600  001D1E  6E0E               	movwf	i2printf@f+1,c
  9601  001D20  C041  F001         	movff	_operation_time,i2___awdiv@dividend
  9602  001D24  C042  F002         	movff	_operation_time+1,i2___awdiv@dividend+1
  9603  001D28  0E00               	movlw	0
  9604  001D2A  6E04               	movwf	i2___awdiv@divisor+1,c
  9605  001D2C  0E3C               	movlw	60
  9606  001D2E  6E03               	movwf	i2___awdiv@divisor,c
  9607  001D30  EC8F  F00B         	call	i2___awdiv	;wreg free
  9608  001D34  C001  F00F         	movff	?i2___awdiv,?i2_printf+2
  9609  001D38  C002  F010         	movff	?i2___awdiv+1,?i2_printf+3
  9610  001D3C  C041  F001         	movff	_operation_time,___awmod@dividend
  9611  001D40  C042  F002         	movff	_operation_time+1,___awmod@dividend+1
  9612  001D44  0E00               	movlw	0
  9613  001D46  6E04               	movwf	___awmod@divisor+1,c
  9614  001D48  0E3C               	movlw	60
  9615  001D4A  6E03               	movwf	___awmod@divisor,c
  9616  001D4C  EC45  F00C         	call	___awmod	;wreg free
  9617  001D50  C001  F011         	movff	?___awmod,?i2_printf+4
  9618  001D54  C002  F012         	movff	?___awmod+1,?i2_printf+5
  9619  001D58  ECF8  F001         	call	i2_printf	;wreg free
  9620  001D5C  0012               	return	
  9621  001D5E                     __end_of_op_time:
  9622                           	opt stack 0
  9623                           tosu	equ	0xFFF
  9624                           tosh	equ	0xFFE
  9625                           tosl	equ	0xFFD
  9626                           pclatu	equ	0xFFB
  9627                           pclath	equ	0xFFA
  9628                           tblptru	equ	0xFF8
  9629                           tblptrh	equ	0xFF7
  9630                           tblptrl	equ	0xFF6
  9631                           tablat	equ	0xFF5
  9632                           prodh	equ	0xFF4
  9633                           prodl	equ	0xFF3
  9634                           intcon	equ	0xFF2
  9635                           intcon3	equ	0xFF0
  9636                           postinc0	equ	0xFEE
  9637                           fsr0h	equ	0xFEA
  9638                           fsr0l	equ	0xFE9
  9639                           wreg	equ	0xFE8
  9640                           fsr1h	equ	0xFE2
  9641                           fsr1l	equ	0xFE1
  9642                           indf2	equ	0xFDF
  9643                           postinc2	equ	0xFDE
  9644                           postdec2	equ	0xFDD
  9645                           fsr2h	equ	0xFDA
  9646                           fsr2l	equ	0xFD9
  9647                           status	equ	0xFD8
  9648                           
  9649 ;; *************** function i2_printf *****************
  9650 ;; Defined at:
  9651 ;;		line 464 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
  9652 ;; Parameters:    Size  Location     Type
  9653 ;;  f               2   12[COMRAM] PTR const unsigned char 
  9654 ;;		 -> STR_34(14), STR_33(12), STR_32(12), STR_31(11), 
  9655 ;;		 -> STR_30(12), STR_29(13), STR_28(11), STR_27(9), 
  9656 ;;		 -> STR_26(11), STR_25(13), STR_24(15), STR_23(15), 
  9657 ;;		 -> STR_22(17), STR_21(22), STR_20(19), STR_19(17), 
  9658 ;;		 -> STR_18(17), STR_17(17), STR_16(13), STR_15(9), 
  9659 ;;		 -> STR_14(7), STR_13(17), STR_12(15), STR_11(13), 
  9660 ;;		 -> STR_10(7), STR_9(2), STR_8(15), STR_7(15), 
  9661 ;;		 -> STR_6(9), STR_5(8), STR_4(16), STR_3(14), 
  9662 ;;		 -> STR_2(12), STR_1(14), 
  9663 ;; Auto vars:     Size  Location     Type
  9664 ;;  printf          4    0        struct .
  9665 ;;  printf          3    0        PTR const unsigned char 
  9666 ;;  printf          2   29[COMRAM] int 
  9667 ;;  printf          2   26[COMRAM] unsigned int 
  9668 ;;  printf          2   23[COMRAM] PTR void [1]
  9669 ;;		 -> ?i2_printf(2), ?_printf(2), 
  9670 ;;  printf          2    0        unsigned int 
  9671 ;;  printf          1   31[COMRAM] char 
  9672 ;;  printf          1   28[COMRAM] unsigned char 
  9673 ;;  printf          1   25[COMRAM] char 
  9674 ;;  printf          1   22[COMRAM] unsigned char 
  9675 ;; Return value:  Size  Location     Type
  9676 ;;                  2   12[COMRAM] int 
  9677 ;; Registers used:
  9678 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9679 ;; Tracked objects:
  9680 ;;		On entry : 0/0
  9681 ;;		On exit  : 0/0
  9682 ;;		Unchanged: 0/0
  9683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9684 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9685 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9686 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9687 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9688 ;;Total ram usage:       20 bytes
  9689 ;; Hardware stack levels used:    1
  9690 ;; Hardware stack levels required when called:    2
  9691 ;; This function calls:
  9692 ;;		i2___lwdiv
  9693 ;;		i2___lwmod
  9694 ;;		i2___wmul
  9695 ;;		i2_isdigit
  9696 ;;		i2_putch
  9697 ;; This function is called by:
  9698 ;;		_keypressed
  9699 ;;		_tot_sorted
  9700 ;;		_op_time
  9701 ;;		_tin_results
  9702 ;;		_pop_results
  9703 ;; This function uses a non-reentrant model
  9704 ;;
  9705                           
  9706                           	psect	text55
  9707  0003F0                     __ptext55:
  9708                           	opt stack 0
  9709  0003F0                     i2_printf:
  9710                           	opt stack 21
  9711                           
  9712                           ;doprnt.c: 466: va_list ap;
  9713                           ;doprnt.c: 499: signed char c;
  9714                           ;doprnt.c: 501: int width;
  9715                           ;doprnt.c: 506: signed char prec;
  9716                           ;doprnt.c: 508: unsigned char flag;
  9717                           ;doprnt.c: 523: union {
  9718                           ;doprnt.c: 524: unsigned long vd;
  9719                           ;doprnt.c: 525: double integ;
  9720                           ;doprnt.c: 526: } tmpval;
  9721                           ;doprnt.c: 528: unsigned int val;
  9722                           ;doprnt.c: 529: unsigned len;
  9723                           ;doprnt.c: 530: const char * cp;
  9724                           ;doprnt.c: 533: *ap = __va_start();
  9725                           
  9726                           ;incstack = 0
  9727  0003F0  0E0F               	movlw	low (?i2_printf+2)
  9728  0003F2  6E18               	movwf	i2printf@ap,c
  9729  0003F4  0E00               	movlw	high (?i2_printf+2)
  9730  0003F6  6E19               	movwf	i2printf@ap+1,c
  9731                           
  9732                           ;doprnt.c: 536: while(c = *f++) {
  9733  0003F8  D188               	goto	i2l4099
  9734  0003FA                     i2l3973:
  9735                           
  9736                           ;doprnt.c: 538: if(c != '%')
  9737  0003FA  0E25               	movlw	37
  9738  0003FC  1820               	xorwf	i2printf@c,w,c
  9739  0003FE  B4D8               	btfsc	status,2,c
  9740  000400  D004               	goto	i2l3977
  9741                           
  9742                           ;doprnt.c: 540: {
  9743                           ;doprnt.c: 541: (putch(c) );
  9744  000402  5020               	movf	i2printf@c,w,c
  9745  000404  EC23  F011         	call	i2_putch
  9746                           
  9747                           ;doprnt.c: 542: continue;
  9748  000408  D180               	goto	i2l4099
  9749  00040A                     i2l3977:
  9750                           
  9751                           ;doprnt.c: 543: }
  9752                           ;doprnt.c: 546: width = 0;
  9753  00040A  0E00               	movlw	0
  9754  00040C  6E1F               	movwf	i2printf@width+1,c
  9755  00040E  0E00               	movlw	0
  9756  000410  6E1E               	movwf	i2printf@width,c
  9757                           
  9758                           ;doprnt.c: 548: flag = 0;
  9759  000412  0E00               	movlw	0
  9760  000414  6E1D               	movwf	i2printf@flag,c
  9761                           
  9762                           ;doprnt.c: 551: switch(*f) {
  9763                           
  9764                           ;doprnt.c: 550: for(;;) {
  9765  000416  D003               	goto	i2l3983
  9766  000418                     i2l3979:
  9767                           
  9768                           ;doprnt.c: 580: flag |= 0x04;
  9769  000418  841D               	bsf	i2printf@flag,2,c
  9770                           
  9771                           ;doprnt.c: 581: f++;
  9772  00041A  4A0D               	infsnz	i2printf@f,f,c
  9773  00041C  2A0E               	incf	i2printf@f+1,f,c
  9774  00041E                     i2l3983:
  9775  00041E  C00D  FFF6         	movff	i2printf@f,tblptrl
  9776  000422  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9777  000426                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9778  000426  6AF8               	clrf	tblptru,c
  9779  000428                     	endif
  9780  000428                     	if	0	;tblptru may be non-zero
  9781  000428                     	endif
  9782  000428  0008               	tblrd		*
  9783  00042A  50F5               	movf	tablat,w,c
  9784                           
  9785                           ; Switch size 1, requested type "space"
  9786                           ; Number of cases is 1, Range of values is 48 to 48
  9787                           ; switch strategies available:
  9788                           ; Name         Instructions Cycles
  9789                           ; simple_byte            4     3 (average)
  9790                           ;	Chosen strategy is simple_byte
  9791  00042C  0A30               	xorlw	48	; case 48
  9792  00042E  B4D8               	btfsc	status,2,c
  9793  000430  D7F3               	goto	i2l3979
  9794                           
  9795                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9796                           
  9797                           ;doprnt.c: 586: }
  9798                           
  9799                           ;doprnt.c: 585: break;
  9800  000432  C00D  FFF6         	movff	i2printf@f,tblptrl
  9801  000436  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9802  00043A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9803  00043A  6AF8               	clrf	tblptru,c
  9804  00043C                     	endif
  9805  00043C                     	if	0	;tblptru may be non-zero
  9806  00043C                     	endif
  9807  00043C  0008               	tblrd		*
  9808  00043E  50F5               	movf	tablat,w,c
  9809  000440  ECEA  F010         	call	i2_isdigit
  9810  000444  A0D8               	btfss	status,0,c
  9811  000446  D037               	goto	i2l4001
  9812                           
  9813                           ;doprnt.c: 598: width = 0;
  9814  000448  0E00               	movlw	0
  9815  00044A  6E1F               	movwf	i2printf@width+1,c
  9816  00044C  0E00               	movlw	0
  9817  00044E  6E1E               	movwf	i2printf@width,c
  9818  000450                     i2l3989:
  9819                           
  9820                           ;doprnt.c: 600: width *= 10;
  9821  000450  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
  9822  000454  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  9823  000458  0E00               	movlw	0
  9824  00045A  6E04               	movwf	i2___wmul@multiplicand+1,c
  9825  00045C  0E0A               	movlw	10
  9826  00045E  6E03               	movwf	i2___wmul@multiplicand,c
  9827  000460  EC50  F010         	call	i2___wmul	;wreg free
  9828  000464  C001  F01E         	movff	?i2___wmul,i2printf@width
  9829  000468  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
  9830                           
  9831                           ;doprnt.c: 601: width += *f++ - '0';
  9832  00046C  0ED0               	movlw	208
  9833  00046E  6E13               	movwf	??i2_printf& (0+255),c
  9834  000470  0EFF               	movlw	255
  9835  000472  6E14               	movwf	(??i2_printf+1)& (0+255),c
  9836  000474  C00D  FFF6         	movff	i2printf@f,tblptrl
  9837  000478  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9838  00047C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9839  00047C  6AF8               	clrf	tblptru,c
  9840  00047E                     	endif
  9841  00047E                     	if	0	;tblptru may be non-zero
  9842  00047E                     	endif
  9843  00047E  0008               	tblrd		*
  9844  000480  50F5               	movf	tablat,w,c
  9845  000482  6E15               	movwf	(??i2_printf+2)& (0+255),c
  9846  000484  6A16               	clrf	(??i2_printf+3)& (0+255),c
  9847  000486  5013               	movf	??i2_printf,w,c
  9848  000488  2615               	addwf	??i2_printf+2,f,c
  9849  00048A  5014               	movf	??i2_printf+1,w,c
  9850  00048C  2216               	addwfc	??i2_printf+3,f,c
  9851  00048E  5015               	movf	??i2_printf+2,w,c
  9852  000490  261E               	addwf	i2printf@width,f,c
  9853  000492  5016               	movf	??i2_printf+3,w,c
  9854  000494  221F               	addwfc	i2printf@width+1,f,c
  9855  000496  4A0D               	infsnz	i2printf@f,f,c
  9856  000498  2A0E               	incf	i2printf@f+1,f,c
  9857                           
  9858                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9859  00049A  C00D  FFF6         	movff	i2printf@f,tblptrl
  9860  00049E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9861  0004A2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9862  0004A2  6AF8               	clrf	tblptru,c
  9863  0004A4                     	endif
  9864  0004A4                     	if	0	;tblptru may be non-zero
  9865  0004A4                     	endif
  9866  0004A4  0008               	tblrd		*
  9867  0004A6  50F5               	movf	tablat,w,c
  9868  0004A8  ECEA  F010         	call	i2_isdigit
  9869  0004AC  A0D8               	btfss	status,0,c
  9870  0004AE  D003               	goto	i2l4001
  9871  0004B0  D7CF               	goto	i2l3989
  9872  0004B2                     i2l3997:
  9873                           
  9874                           ;doprnt.c: 721: flag |= 0x80;
  9875  0004B2  8E1D               	bsf	i2printf@flag,7,c
  9876                           
  9877                           ;doprnt.c: 723: break;
  9878  0004B4  D018               	goto	i2l721
  9879  0004B6                     i2l4001:
  9880  0004B6  C00D  FFF6         	movff	i2printf@f,tblptrl
  9881  0004BA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9882  0004BE  4A0D               	infsnz	i2printf@f,f,c
  9883  0004C0  2A0E               	incf	i2printf@f+1,f,c
  9884  0004C2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9885  0004C2  6AF8               	clrf	tblptru,c
  9886  0004C4                     	endif
  9887  0004C4                     	if	0	;tblptru may be non-zero
  9888  0004C4                     	endif
  9889  0004C4  0008               	tblrd		*
  9890  0004C6  CFF5 F020          	movff	tablat,i2printf@c
  9891  0004CA  5020               	movf	i2printf@c,w,c
  9892                           
  9893                           ; Switch size 1, requested type "space"
  9894                           ; Number of cases is 4, Range of values is 0 to 120
  9895                           ; switch strategies available:
  9896                           ; Name         Instructions Cycles
  9897                           ; simple_byte           13     7 (average)
  9898                           ;	Chosen strategy is simple_byte
  9899  0004CC  0A00               	xorlw	0	; case 0
  9900  0004CE  B4D8               	btfsc	status,2,c
  9901  0004D0  0012               	return	
  9902  0004D2  0A64               	xorlw	100	; case 100
  9903  0004D4  B4D8               	btfsc	status,2,c
  9904  0004D6  D007               	goto	i2l721
  9905  0004D8  0A0D               	xorlw	13	; case 105
  9906  0004DA  B4D8               	btfsc	status,2,c
  9907  0004DC  D004               	goto	i2l721
  9908  0004DE  0A11               	xorlw	17	; case 120
  9909  0004E0  B4D8               	btfsc	status,2,c
  9910  0004E2  D7E7               	goto	i2l3997
  9911  0004E4  D112               	goto	i2l4099
  9912  0004E6                     i2l721:
  9913                           
  9914                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  9915  0004E6  BE1D               	btfsc	i2printf@flag,7,c
  9916  0004E8  D015               	goto	i2l4013
  9917                           
  9918                           ;doprnt.c: 1253: {
  9919                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9920  0004EA  C018  FFD9         	movff	i2printf@ap,fsr2l
  9921  0004EE  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  9922  0004F2  CFDE F01B          	movff	postinc2,i2printf@val
  9923  0004F6  CFDD F01C          	movff	postdec2,i2printf@val+1
  9924  0004FA  0E02               	movlw	2
  9925  0004FC  2618               	addwf	i2printf@ap,f,c
  9926  0004FE  0E00               	movlw	0
  9927  000500  2219               	addwfc	i2printf@ap+1,f,c
  9928                           
  9929                           ;doprnt.c: 1261: if((int)val < 0) {
  9930  000502  AE1C               	btfss	i2printf@val+1,7,c
  9931  000504  D04A               	goto	i2l4047
  9932                           
  9933                           ;doprnt.c: 1262: flag |= 0x03;
  9934  000506  0E03               	movlw	3
  9935  000508  121D               	iorwf	i2printf@flag,f,c
  9936                           
  9937                           ;doprnt.c: 1263: val = -val;
  9938  00050A  6C1B               	negf	i2printf@val,c
  9939  00050C  1E1C               	comf	i2printf@val+1,f,c
  9940  00050E  B0D8               	btfsc	status,0,c
  9941  000510  2A1C               	incf	i2printf@val+1,f,c
  9942                           
  9943                           ;doprnt.c: 1264: }
  9944                           ;doprnt.c: 1266: }
  9945  000512  D043               	goto	i2l4047
  9946  000514                     i2l4013:
  9947                           
  9948                           ;doprnt.c: 1268: else
  9949                           ;doprnt.c: 1273: {
  9950                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9951  000514  C018  FFD9         	movff	i2printf@ap,fsr2l
  9952  000518  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  9953  00051C  CFDE F01B          	movff	postinc2,i2printf@val
  9954  000520  CFDD F01C          	movff	postdec2,i2printf@val+1
  9955  000524  0E02               	movlw	2
  9956  000526  2618               	addwf	i2printf@ap,f,c
  9957  000528  0E00               	movlw	0
  9958  00052A  2219               	addwfc	i2printf@ap+1,f,c
  9959                           
  9960                           ;doprnt.c: 1287: }
  9961                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  9962  00052C  D036               	goto	i2l4047
  9963  00052E                     i2l4017:
  9964                           
  9965                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9966  00052E  0E01               	movlw	1
  9967  000530  6E20               	movwf	i2printf@c,c
  9968  000532                     i2l4019:
  9969  000532  0E05               	movlw	5
  9970  000534  1820               	xorwf	i2printf@c,w,c
  9971  000536  B4D8               	btfsc	status,2,c
  9972  000538  D038               	goto	i2l4049
  9973                           
  9974                           ;doprnt.c: 1306: if(val < dpowers[c])
  9975  00053A  5020               	movf	i2printf@c,w,c
  9976  00053C  0D02               	mullw	2
  9977  00053E  0E1C               	movlw	low _dpowers
  9978  000540  24F3               	addwf	prodl,w,c
  9979  000542  6EF6               	movwf	tblptrl,c
  9980  000544  0EFE               	movlw	high _dpowers
  9981  000546  20F4               	addwfc	prodh,w,c
  9982  000548  6EF7               	movwf	tblptrh,c
  9983  00054A                     	if	1	;There are 3 active tblptr bytes
  9984  00054A  6AF8               	clrf	tblptru,c
  9985  00054C  0E00               	movlw	low (__mediumconst shr (0+16))
  9986  00054E  22F8               	addwfc	tblptru,f,c
  9987  000550                     	endif
  9988  000550  0009               	tblrd		*+
  9989  000552  50F5               	movf	tablat,w,c
  9990  000554  5C1B               	subwf	i2printf@val,w,c
  9991  000556  0009               	tblrd		*+
  9992  000558  50F5               	movf	tablat,w,c
  9993  00055A  581C               	subwfb	i2printf@val+1,w,c
  9994  00055C  A0D8               	btfss	status,0,c
  9995  00055E  D025               	goto	i2l4049
  9996                           
  9997                           ;doprnt.c: 1307: break;
  9998  000560  2A20               	incf	i2printf@c,f,c
  9999  000562  D7E7               	goto	i2l4019
 10000  000564                     i2l4031:
 10001                           
 10002                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 10003  000564  0E01               	movlw	1
 10004  000566  6E20               	movwf	i2printf@c,c
 10005  000568                     i2l4033:
 10006  000568  0E04               	movlw	4
 10007  00056A  1820               	xorwf	i2printf@c,w,c
 10008  00056C  B4D8               	btfsc	status,2,c
 10009  00056E  D01D               	goto	i2l4049
 10010                           
 10011                           ;doprnt.c: 1317: if(val < hexpowers[c])
 10012  000570  5020               	movf	i2printf@c,w,c
 10013  000572  0D02               	mullw	2
 10014  000574  0E26               	movlw	low _hexpowers
 10015  000576  24F3               	addwf	prodl,w,c
 10016  000578  6EF6               	movwf	tblptrl,c
 10017  00057A  0EFE               	movlw	high _hexpowers
 10018  00057C  20F4               	addwfc	prodh,w,c
 10019  00057E  6EF7               	movwf	tblptrh,c
 10020  000580                     	if	1	;There are 3 active tblptr bytes
 10021  000580  6AF8               	clrf	tblptru,c
 10022  000582  0E00               	movlw	low (__mediumconst shr (0+16))
 10023  000584  22F8               	addwfc	tblptru,f,c
 10024  000586                     	endif
 10025  000586  0009               	tblrd		*+
 10026  000588  50F5               	movf	tablat,w,c
 10027  00058A  5C1B               	subwf	i2printf@val,w,c
 10028  00058C  0009               	tblrd		*+
 10029  00058E  50F5               	movf	tablat,w,c
 10030  000590  581C               	subwfb	i2printf@val+1,w,c
 10031  000592  A0D8               	btfss	status,0,c
 10032  000594  D00A               	goto	i2l4049
 10033                           
 10034                           ;doprnt.c: 1318: break;
 10035  000596  2A20               	incf	i2printf@c,f,c
 10036  000598  D7E7               	goto	i2l4033
 10037  00059A                     i2l4047:
 10038  00059A  501D               	movf	i2printf@flag,w,c
 10039  00059C  0B80               	andlw	128
 10040                           
 10041                           ; Switch size 1, requested type "space"
 10042                           ; Number of cases is 2, Range of values is 0 to 128
 10043                           ; switch strategies available:
 10044                           ; Name         Instructions Cycles
 10045                           ; simple_byte            7     4 (average)
 10046                           ;	Chosen strategy is simple_byte
 10047  00059E  0A00               	xorlw	0	; case 0
 10048  0005A0  B4D8               	btfsc	status,2,c
 10049  0005A2  D7C5               	goto	i2l4017
 10050  0005A4  0A80               	xorlw	128	; case 128
 10051  0005A6  B4D8               	btfsc	status,2,c
 10052  0005A8  D7DD               	goto	i2l4031
 10053  0005AA                     i2l4049:
 10054                           
 10055                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10056  0005AA  501E               	movf	i2printf@width,w,c
 10057  0005AC  101F               	iorwf	i2printf@width+1,w,c
 10058  0005AE  B4D8               	btfsc	status,2,c
 10059  0005B0  D009               	goto	i2l4055
 10060  0005B2  C01D  F013         	movff	i2printf@flag,??i2_printf
 10061  0005B6  0E03               	movlw	3
 10062  0005B8  1613               	andwf	??i2_printf,f,c
 10063  0005BA  B4D8               	btfsc	status,2,c
 10064  0005BC  D003               	goto	i2l4055
 10065                           
 10066                           ;doprnt.c: 1346: width--;
 10067  0005BE  061E               	decf	i2printf@width,f,c
 10068  0005C0  A0D8               	btfss	status,0,c
 10069  0005C2  061F               	decf	i2printf@width+1,f,c
 10070  0005C4                     i2l4055:
 10071                           
 10072                           ;doprnt.c: 1381: if(width > c)
 10073  0005C4  0E80               	movlw	128
 10074  0005C6  BE20               	btfsc	i2printf@c,7,c
 10075  0005C8  0E7F               	movlw	127
 10076  0005CA  6E13               	movwf	??i2_printf& (0+255),c
 10077  0005CC  501E               	movf	i2printf@width,w,c
 10078  0005CE  5C20               	subwf	i2printf@c,w,c
 10079  0005D0  501F               	movf	i2printf@width+1,w,c
 10080  0005D2  0A80               	xorlw	128
 10081  0005D4  5813               	subwfb	??i2_printf& (0+255),w,c
 10082  0005D6  B0D8               	btfsc	status,0,c
 10083  0005D8  D007               	goto	i2l4059
 10084                           
 10085                           ;doprnt.c: 1382: width -= c;
 10086  0005DA  5020               	movf	i2printf@c,w,c
 10087  0005DC  5E1E               	subwf	i2printf@width,f,c
 10088  0005DE  0E00               	movlw	0
 10089  0005E0  BE20               	btfsc	i2printf@c,7,c
 10090  0005E2  0EFF               	movlw	255
 10091  0005E4  5A1F               	subwfb	i2printf@width+1,f,c
 10092  0005E6  D004               	goto	i2l4061
 10093  0005E8                     i2l4059:
 10094                           
 10095                           ;doprnt.c: 1383: else
 10096                           ;doprnt.c: 1384: width = 0;
 10097  0005E8  0E00               	movlw	0
 10098  0005EA  6E1F               	movwf	i2printf@width+1,c
 10099  0005EC  0E00               	movlw	0
 10100  0005EE  6E1E               	movwf	i2printf@width,c
 10101  0005F0                     i2l4061:
 10102                           
 10103                           ;doprnt.c: 1387: if(flag & 0x04) {
 10104  0005F0  A41D               	btfss	i2printf@flag,2,c
 10105  0005F2  D014               	goto	i2l4073
 10106                           
 10107                           ;doprnt.c: 1392: if(flag & 0x03)
 10108  0005F4  C01D  F013         	movff	i2printf@flag,??i2_printf
 10109  0005F8  0E03               	movlw	3
 10110  0005FA  1613               	andwf	??i2_printf,f,c
 10111  0005FC  B4D8               	btfsc	status,2,c
 10112  0005FE  D003               	goto	i2l4067
 10113                           
 10114                           ;doprnt.c: 1393: (putch('-') );
 10115  000600  0E2D               	movlw	45
 10116  000602  EC23  F011         	call	i2_putch
 10117  000606                     i2l4067:
 10118                           
 10119                           ;doprnt.c: 1415: if(width)
 10120  000606  501E               	movf	i2printf@width,w,c
 10121  000608  101F               	iorwf	i2printf@width+1,w,c
 10122  00060A  B4D8               	btfsc	status,2,c
 10123  00060C  D01E               	goto	i2l4083
 10124                           
 10125                           ;doprnt.c: 1417: (putch('0') );
 10126                           
 10127                           ;doprnt.c: 1416: do
 10128  00060E  0E30               	movlw	48
 10129  000610  EC23  F011         	call	i2_putch
 10130                           
 10131                           ;doprnt.c: 1418: while(--width);
 10132  000614  061E               	decf	i2printf@width,f,c
 10133  000616  A0D8               	btfss	status,0,c
 10134  000618  061F               	decf	i2printf@width+1,f,c
 10135  00061A  D7F5               	goto	i2l4067
 10136  00061C                     i2l4073:
 10137                           
 10138                           ;doprnt.c: 1422: {
 10139                           ;doprnt.c: 1424: if(width
 10140                           ;doprnt.c: 1428: )
 10141  00061C  501E               	movf	i2printf@width,w,c
 10142  00061E  101F               	iorwf	i2printf@width+1,w,c
 10143  000620  B4D8               	btfsc	status,2,c
 10144  000622  D00A               	goto	i2l4079
 10145  000624                     i2l4075:
 10146                           
 10147                           ;doprnt.c: 1430: (putch(' ') );
 10148  000624  0E20               	movlw	32
 10149  000626  EC23  F011         	call	i2_putch
 10150                           
 10151                           ;doprnt.c: 1431: while(--width);
 10152  00062A  061E               	decf	i2printf@width,f,c
 10153  00062C  A0D8               	btfss	status,0,c
 10154  00062E  061F               	decf	i2printf@width+1,f,c
 10155  000630  501E               	movf	i2printf@width,w,c
 10156  000632  101F               	iorwf	i2printf@width+1,w,c
 10157  000634  A4D8               	btfss	status,2,c
 10158  000636  D7F6               	goto	i2l4075
 10159  000638                     i2l4079:
 10160                           
 10161                           ;doprnt.c: 1438: if(flag & 0x03)
 10162  000638  C01D  F013         	movff	i2printf@flag,??i2_printf
 10163  00063C  0E03               	movlw	3
 10164  00063E  1613               	andwf	??i2_printf,f,c
 10165  000640  B4D8               	btfsc	status,2,c
 10166  000642  D003               	goto	i2l4083
 10167                           
 10168                           ;doprnt.c: 1439: (putch('-') );
 10169  000644  0E2D               	movlw	45
 10170  000646  EC23  F011         	call	i2_putch
 10171  00064A                     i2l4083:
 10172                           
 10173                           ;doprnt.c: 1469: }
 10174                           ;doprnt.c: 1472: prec = c;
 10175  00064A  C020  F01A         	movff	i2printf@c,i2printf@prec
 10176                           
 10177                           ;doprnt.c: 1474: while(prec--) {
 10178  00064E  D059               	goto	i2l4097
 10179  000650                     i2l4085:
 10180                           
 10181                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10182  000650  501A               	movf	i2printf@prec,w,c
 10183  000652  0D02               	mullw	2
 10184  000654  0E1C               	movlw	low _dpowers
 10185  000656  24F3               	addwf	prodl,w,c
 10186  000658  6EF6               	movwf	tblptrl,c
 10187  00065A  0EFE               	movlw	high _dpowers
 10188  00065C  20F4               	addwfc	prodh,w,c
 10189  00065E  6EF7               	movwf	tblptrh,c
 10190  000660                     	if	1	;There are 3 active tblptr bytes
 10191  000660  6AF8               	clrf	tblptru,c
 10192  000662  0E00               	movlw	low (__mediumconst shr (0+16))
 10193  000664  22F8               	addwfc	tblptru,f,c
 10194  000666                     	endif
 10195  000666  0009               	tblrd		*+
 10196  000668  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 10197  00066C  000A               	tblrd		*-
 10198  00066E  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 10199  000672  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
 10200  000676  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 10201  00067A  EC5E  F00E         	call	i2___lwdiv	;wreg free
 10202  00067E  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 10203  000682  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 10204  000686  0E00               	movlw	0
 10205  000688  6E0B               	movwf	i2___lwmod@divisor+1,c
 10206  00068A  0E0A               	movlw	10
 10207  00068C  6E0A               	movwf	i2___lwmod@divisor,c
 10208  00068E  ECF7  F00E         	call	i2___lwmod	;wreg free
 10209  000692  5008               	movf	?i2___lwmod,w,c
 10210  000694  0F30               	addlw	48
 10211  000696  6E20               	movwf	i2printf@c,c
 10212                           
 10213                           ;doprnt.c: 1491: break;
 10214  000698  D031               	goto	i2l4095
 10215  00069A                     i2l4087:
 10216                           
 10217                           ;doprnt.c: 1499: {
 10218                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 10219  00069A  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
 10220  00069E  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 10221  0006A2  501A               	movf	i2printf@prec,w,c
 10222  0006A4  0D02               	mullw	2
 10223  0006A6  0E26               	movlw	low _hexpowers
 10224  0006A8  24F3               	addwf	prodl,w,c
 10225  0006AA  6EF6               	movwf	tblptrl,c
 10226  0006AC  0EFE               	movlw	high _hexpowers
 10227  0006AE  20F4               	addwfc	prodh,w,c
 10228  0006B0  6EF7               	movwf	tblptrh,c
 10229  0006B2                     	if	1	;There are 3 active tblptr bytes
 10230  0006B2  6AF8               	clrf	tblptru,c
 10231  0006B4  0E00               	movlw	low (__mediumconst shr (0+16))
 10232  0006B6  22F8               	addwfc	tblptru,f,c
 10233  0006B8                     	endif
 10234  0006B8  0009               	tblrd		*+
 10235  0006BA  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 10236  0006BE  000A               	tblrd		*-
 10237  0006C0  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 10238  0006C4  EC5E  F00E         	call	i2___lwdiv	;wreg free
 10239  0006C8  5001               	movf	?i2___lwdiv,w,c
 10240  0006CA  0B0F               	andlw	15
 10241  0006CC  6E17               	movwf	i2printf@idx,c
 10242                           
 10243                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 10244  0006CE  5017               	movf	i2printf@idx,w,c
 10245  0006D0  0D01               	mullw	1
 10246  0006D2  0E5E               	movlw	low STR_35
 10247  0006D4  24F3               	addwf	prodl,w,c
 10248  0006D6  6EF6               	movwf	tblptrl,c
 10249  0006D8  0EFE               	movlw	high STR_35
 10250  0006DA  20F4               	addwfc	prodh,w,c
 10251  0006DC  6EF7               	movwf	tblptrh,c
 10252  0006DE                     	if	1	;There are 3 active tblptr bytes
 10253  0006DE  6AF8               	clrf	tblptru,c
 10254  0006E0  0E00               	movlw	low (__mediumconst shr (0+16))
 10255  0006E2  22F8               	addwfc	tblptru,f,c
 10256  0006E4                     	endif
 10257  0006E4  0008               	tblrd		*
 10258  0006E6  CFF5 F020          	movff	tablat,i2printf@c
 10259                           
 10260                           ;doprnt.c: 1523: }
 10261                           
 10262                           ;doprnt.c: 1508: }
 10263                           ;doprnt.c: 1510: break;
 10264  0006EA  D008               	goto	i2l4095
 10265  0006EC                     i2l4093:
 10266  0006EC  501D               	movf	i2printf@flag,w,c
 10267  0006EE  0B80               	andlw	128
 10268                           
 10269                           ; Switch size 1, requested type "space"
 10270                           ; Number of cases is 2, Range of values is 0 to 128
 10271                           ; switch strategies available:
 10272                           ; Name         Instructions Cycles
 10273                           ; simple_byte            7     4 (average)
 10274                           ;	Chosen strategy is simple_byte
 10275  0006F0  0A00               	xorlw	0	; case 0
 10276  0006F2  B4D8               	btfsc	status,2,c
 10277  0006F4  D7AD               	goto	i2l4085
 10278  0006F6  0A80               	xorlw	128	; case 128
 10279  0006F8  B4D8               	btfsc	status,2,c
 10280  0006FA  D7CF               	goto	i2l4087
 10281  0006FC                     i2l4095:
 10282                           
 10283                           ;doprnt.c: 1524: (putch(c) );
 10284  0006FC  5020               	movf	i2printf@c,w,c
 10285  0006FE  EC23  F011         	call	i2_putch
 10286  000702                     i2l4097:
 10287  000702  061A               	decf	i2printf@prec,f,c
 10288  000704  281A               	incf	i2printf@prec,w,c
 10289  000706  A4D8               	btfss	status,2,c
 10290  000708  D7F1               	goto	i2l4093
 10291  00070A                     i2l4099:
 10292  00070A  C00D  FFF6         	movff	i2printf@f,tblptrl
 10293  00070E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 10294  000712  4A0D               	infsnz	i2printf@f,f,c
 10295  000714  2A0E               	incf	i2printf@f+1,f,c
 10296  000716                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10297  000716  6AF8               	clrf	tblptru,c
 10298  000718                     	endif
 10299  000718                     	if	0	;tblptru may be non-zero
 10300  000718                     	endif
 10301  000718  0008               	tblrd		*
 10302  00071A  CFF5 F020          	movff	tablat,i2printf@c
 10303  00071E  5020               	movf	i2printf@c,w,c
 10304  000720  B4D8               	btfsc	status,2,c
 10305  000722  0012               	return	
 10306  000724  D66A               	goto	i2l3973
 10307  000726                     __end_ofi2_printf:
 10308                           	opt stack 0
 10309                           tosu	equ	0xFFF
 10310                           tosh	equ	0xFFE
 10311                           tosl	equ	0xFFD
 10312                           pclatu	equ	0xFFB
 10313                           pclath	equ	0xFFA
 10314                           tblptru	equ	0xFF8
 10315                           tblptrh	equ	0xFF7
 10316                           tblptrl	equ	0xFF6
 10317                           tablat	equ	0xFF5
 10318                           prodh	equ	0xFF4
 10319                           prodl	equ	0xFF3
 10320                           intcon	equ	0xFF2
 10321                           intcon3	equ	0xFF0
 10322                           postinc0	equ	0xFEE
 10323                           fsr0h	equ	0xFEA
 10324                           fsr0l	equ	0xFE9
 10325                           wreg	equ	0xFE8
 10326                           fsr1h	equ	0xFE2
 10327                           fsr1l	equ	0xFE1
 10328                           indf2	equ	0xFDF
 10329                           postinc2	equ	0xFDE
 10330                           postdec2	equ	0xFDD
 10331                           fsr2h	equ	0xFDA
 10332                           fsr2l	equ	0xFD9
 10333                           status	equ	0xFD8
 10334                           
 10335 ;; *************** function i2_putch *****************
 10336 ;; Defined at:
 10337 ;;		line 38 in file "lcd.c"
 10338 ;; Parameters:    Size  Location     Type
 10339 ;;  data            1    wreg     unsigned char 
 10340 ;; Auto vars:     Size  Location     Type
 10341 ;;  data            1    2[COMRAM] unsigned char 
 10342 ;; Return value:  Size  Location     Type
 10343 ;;                  1    wreg      void 
 10344 ;; Registers used:
 10345 ;;		wreg, status,2, status,0, cstack
 10346 ;; Tracked objects:
 10347 ;;		On entry : 0/0
 10348 ;;		On exit  : 0/0
 10349 ;;		Unchanged: 0/0
 10350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10352 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10354 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10355 ;;Total ram usage:        1 bytes
 10356 ;; Hardware stack levels used:    1
 10357 ;; Hardware stack levels required when called:    1
 10358 ;; This function calls:
 10359 ;;		i2_lcdNibble
 10360 ;; This function is called by:
 10361 ;;		i2_printf
 10362 ;; This function uses a non-reentrant model
 10363 ;;
 10364                           
 10365                           	psect	text56
 10366  002246                     __ptext56:
 10367                           	opt stack 0
 10368  002246                     i2_putch:
 10369                           	opt stack 21
 10370                           
 10371                           ;incstack = 0
 10372                           ;i2putch@data stored from wreg
 10373  002246  6E03               	movwf	i2putch@data,c
 10374                           
 10375                           ;lcd.c: 39: LATDbits.LATD2 = 1;
 10376  002248  848C               	bsf	3980,2,c	;volatile
 10377                           
 10378                           ;lcd.c: 40: lcdNibble(data);
 10379  00224A  5003               	movf	i2putch@data,w,c
 10380  00224C  EC33  F00E         	call	i2_lcdNibble
 10381  002250  0012               	return		;funcret
 10382  002252                     __end_ofi2_putch:
 10383                           	opt stack 0
 10384                           tosu	equ	0xFFF
 10385                           tosh	equ	0xFFE
 10386                           tosl	equ	0xFFD
 10387                           pclatu	equ	0xFFB
 10388                           pclath	equ	0xFFA
 10389                           tblptru	equ	0xFF8
 10390                           tblptrh	equ	0xFF7
 10391                           tblptrl	equ	0xFF6
 10392                           tablat	equ	0xFF5
 10393                           prodh	equ	0xFF4
 10394                           prodl	equ	0xFF3
 10395                           intcon	equ	0xFF2
 10396                           intcon3	equ	0xFF0
 10397                           postinc0	equ	0xFEE
 10398                           fsr0h	equ	0xFEA
 10399                           fsr0l	equ	0xFE9
 10400                           wreg	equ	0xFE8
 10401                           fsr1h	equ	0xFE2
 10402                           fsr1l	equ	0xFE1
 10403                           indf2	equ	0xFDF
 10404                           postinc2	equ	0xFDE
 10405                           postdec2	equ	0xFDD
 10406                           fsr2h	equ	0xFDA
 10407                           fsr2l	equ	0xFD9
 10408                           status	equ	0xFD8
 10409                           
 10410 ;; *************** function i2_isdigit *****************
 10411 ;; Defined at:
 10412 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/isdigit.c"
 10413 ;; Parameters:    Size  Location     Type
 10414 ;;  c               1    wreg     unsigned char 
 10415 ;; Auto vars:     Size  Location     Type
 10416 ;;  c               1    2[COMRAM] unsigned char 
 10417 ;; Return value:  Size  Location     Type
 10418 ;;		None               void
 10419 ;; Registers used:
 10420 ;;		wreg, status,2, status,0
 10421 ;; Tracked objects:
 10422 ;;		On entry : 0/0
 10423 ;;		On exit  : 0/0
 10424 ;;		Unchanged: 0/0
 10425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10427 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10428 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10429 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10430 ;;Total ram usage:        3 bytes
 10431 ;; Hardware stack levels used:    1
 10432 ;; This function calls:
 10433 ;;		Nothing
 10434 ;; This function is called by:
 10435 ;;		i2_printf
 10436 ;; This function uses a non-reentrant model
 10437 ;;
 10438                           
 10439                           	psect	text57
 10440  0021D4                     __ptext57:
 10441                           	opt stack 0
 10442  0021D4                     i2_isdigit:
 10443                           	opt stack 22
 10444                           
 10445                           ;incstack = 0
 10446                           ;i2isdigit@c stored from wreg
 10447  0021D4  6E03               	movwf	i2isdigit@c,c
 10448  0021D6  0E00               	movlw	0
 10449  0021D8  6E02               	movwf	i2_isdigit$1437,c
 10450  0021DA  0E3A               	movlw	58
 10451  0021DC  6003               	cpfslt	i2isdigit@c,c
 10452  0021DE  D005               	goto	i2l3405
 10453  0021E0  0E2F               	movlw	47
 10454  0021E2  6403               	cpfsgt	i2isdigit@c,c
 10455  0021E4  D002               	goto	i2l3405
 10456  0021E6  0E01               	movlw	1
 10457  0021E8  6E02               	movwf	i2_isdigit$1437,c
 10458  0021EA                     i2l3405:
 10459  0021EA  C002  F001         	movff	i2_isdigit$1437,??i2_isdigit
 10460  0021EE  3001               	rrcf	??i2_isdigit,w,c
 10461  0021F0  0012               	return	
 10462  0021F2                     __end_ofi2_isdigit:
 10463                           	opt stack 0
 10464                           tosu	equ	0xFFF
 10465                           tosh	equ	0xFFE
 10466                           tosl	equ	0xFFD
 10467                           pclatu	equ	0xFFB
 10468                           pclath	equ	0xFFA
 10469                           tblptru	equ	0xFF8
 10470                           tblptrh	equ	0xFF7
 10471                           tblptrl	equ	0xFF6
 10472                           tablat	equ	0xFF5
 10473                           prodh	equ	0xFF4
 10474                           prodl	equ	0xFF3
 10475                           intcon	equ	0xFF2
 10476                           intcon3	equ	0xFF0
 10477                           postinc0	equ	0xFEE
 10478                           fsr0h	equ	0xFEA
 10479                           fsr0l	equ	0xFE9
 10480                           wreg	equ	0xFE8
 10481                           fsr1h	equ	0xFE2
 10482                           fsr1l	equ	0xFE1
 10483                           indf2	equ	0xFDF
 10484                           postinc2	equ	0xFDE
 10485                           postdec2	equ	0xFDD
 10486                           fsr2h	equ	0xFDA
 10487                           fsr2l	equ	0xFD9
 10488                           status	equ	0xFD8
 10489                           
 10490 ;; *************** function i2___wmul *****************
 10491 ;; Defined at:
 10492 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/Umul16.c"
 10493 ;; Parameters:    Size  Location     Type
 10494 ;;  multiplier      2    0[COMRAM] unsigned int 
 10495 ;;  multiplicand    2    2[COMRAM] unsigned int 
 10496 ;; Auto vars:     Size  Location     Type
 10497 ;;  __wmul          2    4[COMRAM] unsigned int 
 10498 ;; Return value:  Size  Location     Type
 10499 ;;                  2    0[COMRAM] unsigned int 
 10500 ;; Registers used:
 10501 ;;		wreg, status,2, status,0, prodl, prodh
 10502 ;; Tracked objects:
 10503 ;;		On entry : 0/0
 10504 ;;		On exit  : 0/0
 10505 ;;		Unchanged: 0/0
 10506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10507 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10508 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10510 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10511 ;;Total ram usage:        6 bytes
 10512 ;; Hardware stack levels used:    1
 10513 ;; This function calls:
 10514 ;;		Nothing
 10515 ;; This function is called by:
 10516 ;;		i2_printf
 10517 ;; This function uses a non-reentrant model
 10518 ;;
 10519                           
 10520                           	psect	text58
 10521  0020A0                     __ptext58:
 10522                           	opt stack 0
 10523  0020A0                     i2___wmul:
 10524                           	opt stack 22
 10525                           
 10526                           ;incstack = 0
 10527  0020A0  5001               	movf	i2___wmul@multiplier,w,c
 10528  0020A2  0203               	mulwf	i2___wmul@multiplicand,c
 10529  0020A4  CFF3 F005          	movff	prodl,i2___wmul@product
 10530  0020A8  CFF4 F006          	movff	prodh,i2___wmul@product+1
 10531  0020AC  5001               	movf	i2___wmul@multiplier,w,c
 10532  0020AE  0204               	mulwf	i2___wmul@multiplicand+1,c
 10533  0020B0  50F3               	movf	prodl,w,c
 10534  0020B2  2606               	addwf	i2___wmul@product+1,f,c
 10535  0020B4  5002               	movf	i2___wmul@multiplier+1,w,c
 10536  0020B6  0203               	mulwf	i2___wmul@multiplicand,c
 10537  0020B8  50F3               	movf	prodl,w,c
 10538  0020BA  2606               	addwf	i2___wmul@product+1,f,c
 10539  0020BC  C005  F001         	movff	i2___wmul@product,?i2___wmul
 10540  0020C0  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 10541  0020C4  0012               	return	
 10542  0020C6                     __end_ofi2___wmul:
 10543                           	opt stack 0
 10544                           tosu	equ	0xFFF
 10545                           tosh	equ	0xFFE
 10546                           tosl	equ	0xFFD
 10547                           pclatu	equ	0xFFB
 10548                           pclath	equ	0xFFA
 10549                           tblptru	equ	0xFF8
 10550                           tblptrh	equ	0xFF7
 10551                           tblptrl	equ	0xFF6
 10552                           tablat	equ	0xFF5
 10553                           prodh	equ	0xFF4
 10554                           prodl	equ	0xFF3
 10555                           intcon	equ	0xFF2
 10556                           intcon3	equ	0xFF0
 10557                           postinc0	equ	0xFEE
 10558                           fsr0h	equ	0xFEA
 10559                           fsr0l	equ	0xFE9
 10560                           wreg	equ	0xFE8
 10561                           fsr1h	equ	0xFE2
 10562                           fsr1l	equ	0xFE1
 10563                           indf2	equ	0xFDF
 10564                           postinc2	equ	0xFDE
 10565                           postdec2	equ	0xFDD
 10566                           fsr2h	equ	0xFDA
 10567                           fsr2l	equ	0xFD9
 10568                           status	equ	0xFD8
 10569                           
 10570 ;; *************** function i2___lwmod *****************
 10571 ;; Defined at:
 10572 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
 10573 ;; Parameters:    Size  Location     Type
 10574 ;;  dividend        2    7[COMRAM] unsigned int 
 10575 ;;  divisor         2    9[COMRAM] unsigned int 
 10576 ;; Auto vars:     Size  Location     Type
 10577 ;;  __lwmod         1   11[COMRAM] unsigned char 
 10578 ;; Return value:  Size  Location     Type
 10579 ;;                  2    7[COMRAM] unsigned int 
 10580 ;; Registers used:
 10581 ;;		wreg, status,2, status,0
 10582 ;; Tracked objects:
 10583 ;;		On entry : 0/0
 10584 ;;		On exit  : 0/0
 10585 ;;		Unchanged: 0/0
 10586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10587 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10588 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10590 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10591 ;;Total ram usage:        5 bytes
 10592 ;; Hardware stack levels used:    1
 10593 ;; This function calls:
 10594 ;;		Nothing
 10595 ;; This function is called by:
 10596 ;;		i2_printf
 10597 ;; This function uses a non-reentrant model
 10598 ;;
 10599                           
 10600                           	psect	text59
 10601  001DEE                     __ptext59:
 10602                           	opt stack 0
 10603  001DEE                     i2___lwmod:
 10604                           	opt stack 22
 10605                           
 10606                           ;incstack = 0
 10607  001DEE  500A               	movf	i2___lwmod@divisor,w,c
 10608  001DF0  100B               	iorwf	i2___lwmod@divisor+1,w,c
 10609  001DF2  B4D8               	btfsc	status,2,c
 10610  001DF4  D018               	goto	i2l1176
 10611  001DF6  0E01               	movlw	1
 10612  001DF8  6E0C               	movwf	i2___lwmod@counter,c
 10613  001DFA  D004               	goto	i2l3437
 10614  001DFC                     i2l3435:
 10615  001DFC  90D8               	bcf	status,0,c
 10616  001DFE  360A               	rlcf	i2___lwmod@divisor,f,c
 10617  001E00  360B               	rlcf	i2___lwmod@divisor+1,f,c
 10618  001E02  2A0C               	incf	i2___lwmod@counter,f,c
 10619  001E04                     i2l3437:
 10620  001E04  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 10621  001E06  D7FA               	goto	i2l3435
 10622  001E08                     i2l3439:
 10623  001E08  500A               	movf	i2___lwmod@divisor,w,c
 10624  001E0A  5C08               	subwf	i2___lwmod@dividend,w,c
 10625  001E0C  500B               	movf	i2___lwmod@divisor+1,w,c
 10626  001E0E  5809               	subwfb	i2___lwmod@dividend+1,w,c
 10627  001E10  A0D8               	btfss	status,0,c
 10628  001E12  D004               	goto	i2l3443
 10629  001E14  500A               	movf	i2___lwmod@divisor,w,c
 10630  001E16  5E08               	subwf	i2___lwmod@dividend,f,c
 10631  001E18  500B               	movf	i2___lwmod@divisor+1,w,c
 10632  001E1A  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 10633  001E1C                     i2l3443:
 10634  001E1C  90D8               	bcf	status,0,c
 10635  001E1E  320B               	rrcf	i2___lwmod@divisor+1,f,c
 10636  001E20  320A               	rrcf	i2___lwmod@divisor,f,c
 10637  001E22  2E0C               	decfsz	i2___lwmod@counter,f,c
 10638  001E24  D7F1               	goto	i2l3439
 10639  001E26                     i2l1176:
 10640  001E26  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 10641  001E2A  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 10642  001E2E  0012               	return		;funcret
 10643  001E30                     __end_ofi2___lwmod:
 10644                           	opt stack 0
 10645                           tosu	equ	0xFFF
 10646                           tosh	equ	0xFFE
 10647                           tosl	equ	0xFFD
 10648                           pclatu	equ	0xFFB
 10649                           pclath	equ	0xFFA
 10650                           tblptru	equ	0xFF8
 10651                           tblptrh	equ	0xFF7
 10652                           tblptrl	equ	0xFF6
 10653                           tablat	equ	0xFF5
 10654                           prodh	equ	0xFF4
 10655                           prodl	equ	0xFF3
 10656                           intcon	equ	0xFF2
 10657                           intcon3	equ	0xFF0
 10658                           postinc0	equ	0xFEE
 10659                           fsr0h	equ	0xFEA
 10660                           fsr0l	equ	0xFE9
 10661                           wreg	equ	0xFE8
 10662                           fsr1h	equ	0xFE2
 10663                           fsr1l	equ	0xFE1
 10664                           indf2	equ	0xFDF
 10665                           postinc2	equ	0xFDE
 10666                           postdec2	equ	0xFDD
 10667                           fsr2h	equ	0xFDA
 10668                           fsr2l	equ	0xFD9
 10669                           status	equ	0xFD8
 10670                           
 10671 ;; *************** function i2___lwdiv *****************
 10672 ;; Defined at:
 10673 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
 10674 ;; Parameters:    Size  Location     Type
 10675 ;;  dividend        2    0[COMRAM] unsigned int 
 10676 ;;  divisor         2    2[COMRAM] unsigned int 
 10677 ;; Auto vars:     Size  Location     Type
 10678 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 10679 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 10680 ;; Return value:  Size  Location     Type
 10681 ;;                  2    0[COMRAM] unsigned int 
 10682 ;; Registers used:
 10683 ;;		wreg, status,2, status,0
 10684 ;; Tracked objects:
 10685 ;;		On entry : 0/0
 10686 ;;		On exit  : 0/0
 10687 ;;		Unchanged: 0/0
 10688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10689 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10690 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10692 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10693 ;;Total ram usage:        7 bytes
 10694 ;; Hardware stack levels used:    1
 10695 ;; This function calls:
 10696 ;;		Nothing
 10697 ;; This function is called by:
 10698 ;;		i2_printf
 10699 ;; This function uses a non-reentrant model
 10700 ;;
 10701                           
 10702                           	psect	text60
 10703  001CBC                     __ptext60:
 10704                           	opt stack 0
 10705  001CBC                     i2___lwdiv:
 10706                           	opt stack 22
 10707                           
 10708                           ;incstack = 0
 10709  001CBC  0E00               	movlw	0
 10710  001CBE  6E06               	movwf	i2___lwdiv@quotient+1,c
 10711  001CC0  0E00               	movlw	0
 10712  001CC2  6E05               	movwf	i2___lwdiv@quotient,c
 10713  001CC4  5003               	movf	i2___lwdiv@divisor,w,c
 10714  001CC6  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 10715  001CC8  B4D8               	btfsc	status,2,c
 10716  001CCA  D01C               	goto	i2l1166
 10717  001CCC  0E01               	movlw	1
 10718  001CCE  6E07               	movwf	i2___lwdiv@counter,c
 10719  001CD0  D004               	goto	i2l3417
 10720  001CD2                     i2l3415:
 10721  001CD2  90D8               	bcf	status,0,c
 10722  001CD4  3603               	rlcf	i2___lwdiv@divisor,f,c
 10723  001CD6  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 10724  001CD8  2A07               	incf	i2___lwdiv@counter,f,c
 10725  001CDA                     i2l3417:
 10726  001CDA  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 10727  001CDC  D7FA               	goto	i2l3415
 10728  001CDE                     i2l3419:
 10729  001CDE  90D8               	bcf	status,0,c
 10730  001CE0  3605               	rlcf	i2___lwdiv@quotient,f,c
 10731  001CE2  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 10732  001CE4  5003               	movf	i2___lwdiv@divisor,w,c
 10733  001CE6  5C01               	subwf	i2___lwdiv@dividend,w,c
 10734  001CE8  5004               	movf	i2___lwdiv@divisor+1,w,c
 10735  001CEA  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 10736  001CEC  A0D8               	btfss	status,0,c
 10737  001CEE  D005               	goto	i2l3427
 10738  001CF0  5003               	movf	i2___lwdiv@divisor,w,c
 10739  001CF2  5E01               	subwf	i2___lwdiv@dividend,f,c
 10740  001CF4  5004               	movf	i2___lwdiv@divisor+1,w,c
 10741  001CF6  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 10742  001CF8  8005               	bsf	i2___lwdiv@quotient,0,c
 10743  001CFA                     i2l3427:
 10744  001CFA  90D8               	bcf	status,0,c
 10745  001CFC  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 10746  001CFE  3203               	rrcf	i2___lwdiv@divisor,f,c
 10747  001D00  2E07               	decfsz	i2___lwdiv@counter,f,c
 10748  001D02  D7ED               	goto	i2l3419
 10749  001D04                     i2l1166:
 10750  001D04  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 10751  001D08  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 10752  001D0C  0012               	return		;funcret
 10753  001D0E                     __end_ofi2___lwdiv:
 10754                           	opt stack 0
 10755                           tosu	equ	0xFFF
 10756                           tosh	equ	0xFFE
 10757                           tosl	equ	0xFFD
 10758                           pclatu	equ	0xFFB
 10759                           pclath	equ	0xFFA
 10760                           tblptru	equ	0xFF8
 10761                           tblptrh	equ	0xFF7
 10762                           tblptrl	equ	0xFF6
 10763                           tablat	equ	0xFF5
 10764                           prodh	equ	0xFF4
 10765                           prodl	equ	0xFF3
 10766                           intcon	equ	0xFF2
 10767                           intcon3	equ	0xFF0
 10768                           postinc0	equ	0xFEE
 10769                           fsr0h	equ	0xFEA
 10770                           fsr0l	equ	0xFE9
 10771                           wreg	equ	0xFE8
 10772                           fsr1h	equ	0xFE2
 10773                           fsr1l	equ	0xFE1
 10774                           indf2	equ	0xFDF
 10775                           postinc2	equ	0xFDE
 10776                           postdec2	equ	0xFDD
 10777                           fsr2h	equ	0xFDA
 10778                           fsr2l	equ	0xFD9
 10779                           status	equ	0xFD8
 10780                           
 10781 ;; *************** function i2_initLCD *****************
 10782 ;; Defined at:
 10783 ;;		line 22 in file "lcd.c"
 10784 ;; Parameters:    Size  Location     Type
 10785 ;;		None
 10786 ;; Auto vars:     Size  Location     Type
 10787 ;;		None
 10788 ;; Return value:  Size  Location     Type
 10789 ;;                  1    wreg      void 
 10790 ;; Registers used:
 10791 ;;		wreg, status,2, status,0, cstack
 10792 ;; Tracked objects:
 10793 ;;		On entry : 0/0
 10794 ;;		On exit  : 0/0
 10795 ;;		Unchanged: 0/0
 10796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10799 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10800 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10801 ;;Total ram usage:        1 bytes
 10802 ;; Hardware stack levels used:    1
 10803 ;; Hardware stack levels required when called:    2
 10804 ;; This function calls:
 10805 ;;		i2_lcdInst
 10806 ;; This function is called by:
 10807 ;;		_keypressed
 10808 ;;		_tot_sorted
 10809 ;;		_op_time
 10810 ;;		_tin_results
 10811 ;;		_pop_results
 10812 ;; This function uses a non-reentrant model
 10813 ;;
 10814                           
 10815                           	psect	text61
 10816  001DA8                     __ptext61:
 10817                           	opt stack 0
 10818  001DA8                     i2_initLCD:
 10819                           	opt stack 21
 10820                           
 10821                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
 10822                           
 10823                           ;incstack = 0
 10824  001DA8  0E31               	movlw	49
 10825  001DAA  6E04               	movwf	??i2_initLCD& (0+255),c
 10826  001DAC  0EB2               	movlw	178
 10827  001DAE                     i2u569_47:
 10828  001DAE  2EE8               	decfsz	wreg,f,c
 10829  001DB0  D7FE               	bra	i2u569_47
 10830  001DB2  2E04               	decfsz	??i2_initLCD& (0+255),f,c
 10831  001DB4  D7FC               	bra	i2u569_47
 10832  001DB6  D000               	nop2	
 10833                           
 10834                           ;lcd.c: 24: lcdInst(0b00110011);
 10835  001DB8  0E33               	movlw	51
 10836  001DBA  EC29  F011         	call	i2_lcdInst
 10837                           
 10838                           ;lcd.c: 25: lcdInst(0b00110010);
 10839  001DBE  0E32               	movlw	50
 10840  001DC0  EC29  F011         	call	i2_lcdInst
 10841                           
 10842                           ;lcd.c: 26: lcdInst(0b00101000);
 10843  001DC4  0E28               	movlw	40
 10844  001DC6  EC29  F011         	call	i2_lcdInst
 10845                           
 10846                           ;lcd.c: 27: lcdInst(0b00001111);
 10847  001DCA  0E0F               	movlw	15
 10848  001DCC  EC29  F011         	call	i2_lcdInst
 10849                           
 10850                           ;lcd.c: 28: lcdInst(0b00000110);
 10851  001DD0  0E06               	movlw	6
 10852  001DD2  EC29  F011         	call	i2_lcdInst
 10853                           
 10854                           ;lcd.c: 29: lcdInst(0b00000001);
 10855  001DD6  0E01               	movlw	1
 10856  001DD8  EC29  F011         	call	i2_lcdInst
 10857                           
 10858                           ;lcd.c: 30: _delay((unsigned long)((15)*(10000000/4000.0)));
 10859  001DDC  0E31               	movlw	49
 10860  001DDE  6E04               	movwf	??i2_initLCD& (0+255),c
 10861  001DE0  0EB2               	movlw	178
 10862  001DE2                     i2u570_47:
 10863  001DE2  2EE8               	decfsz	wreg,f,c
 10864  001DE4  D7FE               	bra	i2u570_47
 10865  001DE6  2E04               	decfsz	??i2_initLCD& (0+255),f,c
 10866  001DE8  D7FC               	bra	i2u570_47
 10867  001DEA  D000               	nop2	
 10868  001DEC  0012               	return		;funcret
 10869  001DEE                     __end_ofi2_initLCD:
 10870                           	opt stack 0
 10871                           tosu	equ	0xFFF
 10872                           tosh	equ	0xFFE
 10873                           tosl	equ	0xFFD
 10874                           pclatu	equ	0xFFB
 10875                           pclath	equ	0xFFA
 10876                           tblptru	equ	0xFF8
 10877                           tblptrh	equ	0xFF7
 10878                           tblptrl	equ	0xFF6
 10879                           tablat	equ	0xFF5
 10880                           prodh	equ	0xFF4
 10881                           prodl	equ	0xFF3
 10882                           intcon	equ	0xFF2
 10883                           intcon3	equ	0xFF0
 10884                           postinc0	equ	0xFEE
 10885                           fsr0h	equ	0xFEA
 10886                           fsr0l	equ	0xFE9
 10887                           wreg	equ	0xFE8
 10888                           fsr1h	equ	0xFE2
 10889                           fsr1l	equ	0xFE1
 10890                           indf2	equ	0xFDF
 10891                           postinc2	equ	0xFDE
 10892                           postdec2	equ	0xFDD
 10893                           fsr2h	equ	0xFDA
 10894                           fsr2l	equ	0xFD9
 10895                           status	equ	0xFD8
 10896                           
 10897 ;; *************** function i2_lcdInst *****************
 10898 ;; Defined at:
 10899 ;;		line 33 in file "lcd.c"
 10900 ;; Parameters:    Size  Location     Type
 10901 ;;  data            1    wreg     unsigned char 
 10902 ;; Auto vars:     Size  Location     Type
 10903 ;;  data            1    2[COMRAM] unsigned char 
 10904 ;; Return value:  Size  Location     Type
 10905 ;;                  1    wreg      void 
 10906 ;; Registers used:
 10907 ;;		wreg, status,2, status,0, cstack
 10908 ;; Tracked objects:
 10909 ;;		On entry : 0/0
 10910 ;;		On exit  : 0/0
 10911 ;;		Unchanged: 0/0
 10912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10914 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10916 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10917 ;;Total ram usage:        1 bytes
 10918 ;; Hardware stack levels used:    1
 10919 ;; Hardware stack levels required when called:    1
 10920 ;; This function calls:
 10921 ;;		i2_lcdNibble
 10922 ;; This function is called by:
 10923 ;;		_keypressed
 10924 ;;		_tot_sorted
 10925 ;;		_op_time
 10926 ;;		_tin_results
 10927 ;;		_pop_results
 10928 ;;		i2_initLCD
 10929 ;; This function uses a non-reentrant model
 10930 ;;
 10931                           
 10932                           	psect	text62
 10933  002252                     __ptext62:
 10934                           	opt stack 0
 10935  002252                     i2_lcdInst:
 10936                           	opt stack 22
 10937                           
 10938                           ;incstack = 0
 10939                           ;i2lcdInst@data stored from wreg
 10940  002252  6E03               	movwf	i2lcdInst@data,c
 10941                           
 10942                           ;lcd.c: 34: LATDbits.LATD2 = 0;
 10943  002254  948C               	bcf	3980,2,c	;volatile
 10944                           
 10945                           ;lcd.c: 35: lcdNibble(data);
 10946  002256  5003               	movf	i2lcdInst@data,w,c
 10947  002258  EC33  F00E         	call	i2_lcdNibble
 10948  00225C  0012               	return		;funcret
 10949  00225E                     __end_ofi2_lcdInst:
 10950                           	opt stack 0
 10951                           tosu	equ	0xFFF
 10952                           tosh	equ	0xFFE
 10953                           tosl	equ	0xFFD
 10954                           pclatu	equ	0xFFB
 10955                           pclath	equ	0xFFA
 10956                           tblptru	equ	0xFF8
 10957                           tblptrh	equ	0xFF7
 10958                           tblptrl	equ	0xFF6
 10959                           tablat	equ	0xFF5
 10960                           prodh	equ	0xFF4
 10961                           prodl	equ	0xFF3
 10962                           intcon	equ	0xFF2
 10963                           intcon3	equ	0xFF0
 10964                           postinc0	equ	0xFEE
 10965                           fsr0h	equ	0xFEA
 10966                           fsr0l	equ	0xFE9
 10967                           wreg	equ	0xFE8
 10968                           fsr1h	equ	0xFE2
 10969                           fsr1l	equ	0xFE1
 10970                           indf2	equ	0xFDF
 10971                           postinc2	equ	0xFDE
 10972                           postdec2	equ	0xFDD
 10973                           fsr2h	equ	0xFDA
 10974                           fsr2l	equ	0xFD9
 10975                           status	equ	0xFD8
 10976                           
 10977 ;; *************** function i2_lcdNibble *****************
 10978 ;; Defined at:
 10979 ;;		line 43 in file "lcd.c"
 10980 ;; Parameters:    Size  Location     Type
 10981 ;;  data            1    wreg     unsigned char 
 10982 ;; Auto vars:     Size  Location     Type
 10983 ;;  data            1    1[COMRAM] unsigned char 
 10984 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 10985 ;; Return value:  Size  Location     Type
 10986 ;;                  1    wreg      void 
 10987 ;; Registers used:
 10988 ;;		wreg, status,2, status,0
 10989 ;; Tracked objects:
 10990 ;;		On entry : 0/0
 10991 ;;		On exit  : 0/0
 10992 ;;		Unchanged: 0/0
 10993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10995 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10997 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10998 ;;Total ram usage:        2 bytes
 10999 ;; Hardware stack levels used:    1
 11000 ;; This function calls:
 11001 ;;		Nothing
 11002 ;; This function is called by:
 11003 ;;		i2_lcdInst
 11004 ;;		i2_putch
 11005 ;; This function uses a non-reentrant model
 11006 ;;
 11007                           
 11008                           	psect	text63
 11009  001C66                     __ptext63:
 11010                           	opt stack 0
 11011  001C66                     i2_lcdNibble:
 11012                           	opt stack 21
 11013                           
 11014                           ;incstack = 0
 11015                           ;i2lcdNibble@data stored from wreg
 11016  001C66  6E02               	movwf	i2lcdNibble@data,c
 11017                           
 11018                           ;lcd.c: 45: char temp = data & 0xF0;
 11019  001C68  5002               	movf	i2lcdNibble@data,w,c
 11020  001C6A  0BF0               	andlw	240
 11021  001C6C  6E01               	movwf	i2lcdNibble@temp,c
 11022                           
 11023                           ;lcd.c: 46: LATD = LATD & 0x0F;
 11024  001C6E  508C               	movf	3980,w,c	;volatile
 11025  001C70  0B0F               	andlw	15
 11026  001C72  6E8C               	movwf	3980,c	;volatile
 11027                           
 11028                           ;lcd.c: 47: LATD = temp | LATD;
 11029  001C74  5001               	movf	i2lcdNibble@temp,w,c
 11030  001C76  108C               	iorwf	3980,w,c	;volatile
 11031  001C78  6E8C               	movwf	3980,c	;volatile
 11032                           
 11033                           ;lcd.c: 49: LATDbits.LATD3 = 0;
 11034  001C7A  968C               	bcf	3980,3,c	;volatile
 11035                           
 11036                           ;lcd.c: 50: _delay((unsigned long)((25)*(10000000/4000000.0)));
 11037  001C7C  0E14               	movlw	20
 11038  001C7E                     i2u571_47:
 11039  001C7E  2EE8               	decfsz	wreg,f,c
 11040  001C80  D7FE               	bra	i2u571_47
 11041  001C82  D000               	nop2	
 11042                           
 11043                           ;lcd.c: 51: LATDbits.LATD3 = 1;
 11044  001C84  868C               	bsf	3980,3,c	;volatile
 11045                           
 11046                           ;lcd.c: 52: _delay((unsigned long)((25)*(10000000/4000000.0)));
 11047  001C86  0E14               	movlw	20
 11048  001C88                     i2u572_47:
 11049  001C88  2EE8               	decfsz	wreg,f,c
 11050  001C8A  D7FE               	bra	i2u572_47
 11051  001C8C  D000               	nop2	
 11052                           
 11053                           ;lcd.c: 54: data = data << 4;
 11054  001C8E  3802               	swapf	i2lcdNibble@data,w,c
 11055  001C90  0BF0               	andlw	240
 11056  001C92  6E02               	movwf	i2lcdNibble@data,c
 11057                           
 11058                           ;lcd.c: 56: temp = data & 0xF0;
 11059  001C94  5002               	movf	i2lcdNibble@data,w,c
 11060  001C96  0BF0               	andlw	240
 11061  001C98  6E01               	movwf	i2lcdNibble@temp,c
 11062                           
 11063                           ;lcd.c: 57: LATD = LATD & 0x0F;
 11064  001C9A  508C               	movf	3980,w,c	;volatile
 11065  001C9C  0B0F               	andlw	15
 11066  001C9E  6E8C               	movwf	3980,c	;volatile
 11067                           
 11068                           ;lcd.c: 58: LATD = temp | LATD;
 11069  001CA0  5001               	movf	i2lcdNibble@temp,w,c
 11070  001CA2  108C               	iorwf	3980,w,c	;volatile
 11071  001CA4  6E8C               	movwf	3980,c	;volatile
 11072                           
 11073                           ;lcd.c: 60: LATDbits.LATD3 = 0;
 11074  001CA6  968C               	bcf	3980,3,c	;volatile
 11075                           
 11076                           ;lcd.c: 61: _delay((unsigned long)((25)*(10000000/4000000.0)));
 11077  001CA8  0E14               	movlw	20
 11078  001CAA                     i2u573_47:
 11079  001CAA  2EE8               	decfsz	wreg,f,c
 11080  001CAC  D7FE               	bra	i2u573_47
 11081  001CAE  D000               	nop2	
 11082                           
 11083                           ;lcd.c: 62: LATDbits.LATD3 = 1;
 11084  001CB0  868C               	bsf	3980,3,c	;volatile
 11085                           
 11086                           ;lcd.c: 63: _delay((unsigned long)((25)*(10000000/4000000.0)));
 11087  001CB2  0E14               	movlw	20
 11088  001CB4                     i2u574_47:
 11089  001CB4  2EE8               	decfsz	wreg,f,c
 11090  001CB6  D7FE               	bra	i2u574_47
 11091  001CB8  D000               	nop2	
 11092  001CBA  0012               	return		;funcret
 11093  001CBC                     __end_ofi2_lcdNibble:
 11094                           	opt stack 0
 11095                           tosu	equ	0xFFF
 11096                           tosh	equ	0xFFE
 11097                           tosl	equ	0xFFD
 11098                           pclatu	equ	0xFFB
 11099                           pclath	equ	0xFFA
 11100                           tblptru	equ	0xFF8
 11101                           tblptrh	equ	0xFF7
 11102                           tblptrl	equ	0xFF6
 11103                           tablat	equ	0xFF5
 11104                           prodh	equ	0xFF4
 11105                           prodl	equ	0xFF3
 11106                           intcon	equ	0xFF2
 11107                           intcon3	equ	0xFF0
 11108                           postinc0	equ	0xFEE
 11109                           fsr0h	equ	0xFEA
 11110                           fsr0l	equ	0xFE9
 11111                           wreg	equ	0xFE8
 11112                           fsr1h	equ	0xFE2
 11113                           fsr1l	equ	0xFE1
 11114                           indf2	equ	0xFDF
 11115                           postinc2	equ	0xFDE
 11116                           postdec2	equ	0xFDD
 11117                           fsr2h	equ	0xFDA
 11118                           fsr2l	equ	0xFD9
 11119                           status	equ	0xFD8
 11120                           
 11121 ;; *************** function i2___awdiv *****************
 11122 ;; Defined at:
 11123 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awdiv.c"
 11124 ;; Parameters:    Size  Location     Type
 11125 ;;  dividend        2    0[COMRAM] int 
 11126 ;;  divisor         2    2[COMRAM] int 
 11127 ;; Auto vars:     Size  Location     Type
 11128 ;;  __awdiv         2    6[COMRAM] int 
 11129 ;;  __awdiv         1    5[COMRAM] unsigned char 
 11130 ;;  __awdiv         1    4[COMRAM] unsigned char 
 11131 ;; Return value:  Size  Location     Type
 11132 ;;                  2    0[COMRAM] int 
 11133 ;; Registers used:
 11134 ;;		wreg, status,2, status,0
 11135 ;; Tracked objects:
 11136 ;;		On entry : 0/0
 11137 ;;		On exit  : 0/0
 11138 ;;		Unchanged: 0/0
 11139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11140 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11141 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11143 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11144 ;;Total ram usage:        8 bytes
 11145 ;; Hardware stack levels used:    1
 11146 ;; This function calls:
 11147 ;;		Nothing
 11148 ;; This function is called by:
 11149 ;;		_op_time
 11150 ;; This function uses a non-reentrant model
 11151 ;;
 11152                           
 11153                           	psect	text64
 11154  00171E                     __ptext64:
 11155                           	opt stack 0
 11156  00171E                     i2___awdiv:
 11157                           	opt stack 22
 11158                           
 11159                           ;incstack = 0
 11160  00171E  0E00               	movlw	0
 11161  001720  6E06               	movwf	i2___awdiv@sign,c
 11162  001722  AE04               	btfss	i2___awdiv@divisor+1,7,c
 11163  001724  D006               	goto	i2l4109
 11164  001726  6C03               	negf	i2___awdiv@divisor,c
 11165  001728  1E04               	comf	i2___awdiv@divisor+1,f,c
 11166  00172A  B0D8               	btfsc	status,0,c
 11167  00172C  2A04               	incf	i2___awdiv@divisor+1,f,c
 11168  00172E  0E01               	movlw	1
 11169  001730  6E06               	movwf	i2___awdiv@sign,c
 11170  001732                     i2l4109:
 11171  001732  AE02               	btfss	i2___awdiv@dividend+1,7,c
 11172  001734  D006               	goto	i2l4115
 11173  001736  6C01               	negf	i2___awdiv@dividend,c
 11174  001738  1E02               	comf	i2___awdiv@dividend+1,f,c
 11175  00173A  B0D8               	btfsc	status,0,c
 11176  00173C  2A02               	incf	i2___awdiv@dividend+1,f,c
 11177  00173E  0E01               	movlw	1
 11178  001740  1A06               	xorwf	i2___awdiv@sign,f,c
 11179  001742                     i2l4115:
 11180  001742  0E00               	movlw	0
 11181  001744  6E08               	movwf	i2___awdiv@quotient+1,c
 11182  001746  0E00               	movlw	0
 11183  001748  6E07               	movwf	i2___awdiv@quotient,c
 11184  00174A  5003               	movf	i2___awdiv@divisor,w,c
 11185  00174C  1004               	iorwf	i2___awdiv@divisor+1,w,c
 11186  00174E  B4D8               	btfsc	status,2,c
 11187  001750  D01C               	goto	i2l4137
 11188  001752  0E01               	movlw	1
 11189  001754  6E05               	movwf	i2___awdiv@counter,c
 11190  001756  D004               	goto	i2l4123
 11191  001758                     i2l4121:
 11192  001758  90D8               	bcf	status,0,c
 11193  00175A  3603               	rlcf	i2___awdiv@divisor,f,c
 11194  00175C  3604               	rlcf	i2___awdiv@divisor+1,f,c
 11195  00175E  2A05               	incf	i2___awdiv@counter,f,c
 11196  001760                     i2l4123:
 11197  001760  AE04               	btfss	i2___awdiv@divisor+1,7,c
 11198  001762  D7FA               	goto	i2l4121
 11199  001764                     i2l4125:
 11200  001764  90D8               	bcf	status,0,c
 11201  001766  3607               	rlcf	i2___awdiv@quotient,f,c
 11202  001768  3608               	rlcf	i2___awdiv@quotient+1,f,c
 11203  00176A  5003               	movf	i2___awdiv@divisor,w,c
 11204  00176C  5C01               	subwf	i2___awdiv@dividend,w,c
 11205  00176E  5004               	movf	i2___awdiv@divisor+1,w,c
 11206  001770  5802               	subwfb	i2___awdiv@dividend+1,w,c
 11207  001772  A0D8               	btfss	status,0,c
 11208  001774  D005               	goto	i2l4133
 11209  001776  5003               	movf	i2___awdiv@divisor,w,c
 11210  001778  5E01               	subwf	i2___awdiv@dividend,f,c
 11211  00177A  5004               	movf	i2___awdiv@divisor+1,w,c
 11212  00177C  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 11213  00177E  8007               	bsf	i2___awdiv@quotient,0,c
 11214  001780                     i2l4133:
 11215  001780  90D8               	bcf	status,0,c
 11216  001782  3204               	rrcf	i2___awdiv@divisor+1,f,c
 11217  001784  3203               	rrcf	i2___awdiv@divisor,f,c
 11218  001786  2E05               	decfsz	i2___awdiv@counter,f,c
 11219  001788  D7ED               	goto	i2l4125
 11220  00178A                     i2l4137:
 11221  00178A  5006               	movf	i2___awdiv@sign,w,c
 11222  00178C  B4D8               	btfsc	status,2,c
 11223  00178E  D004               	goto	i2l4141
 11224  001790  6C07               	negf	i2___awdiv@quotient,c
 11225  001792  1E08               	comf	i2___awdiv@quotient+1,f,c
 11226  001794  B0D8               	btfsc	status,0,c
 11227  001796  2A08               	incf	i2___awdiv@quotient+1,f,c
 11228  001798                     i2l4141:
 11229  001798  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 11230  00179C  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 11231  0017A0  0012               	return	
 11232  0017A2                     __end_ofi2___awdiv:
 11233                           	opt stack 0
 11234                           tosu	equ	0xFFF
 11235                           tosh	equ	0xFFE
 11236                           tosl	equ	0xFFD
 11237                           pclatu	equ	0xFFB
 11238                           pclath	equ	0xFFA
 11239                           tblptru	equ	0xFF8
 11240                           tblptrh	equ	0xFF7
 11241                           tblptrl	equ	0xFF6
 11242                           tablat	equ	0xFF5
 11243                           prodh	equ	0xFF4
 11244                           prodl	equ	0xFF3
 11245                           intcon	equ	0xFF2
 11246                           intcon3	equ	0xFF0
 11247                           postinc0	equ	0xFEE
 11248                           fsr0h	equ	0xFEA
 11249                           fsr0l	equ	0xFE9
 11250                           wreg	equ	0xFE8
 11251                           fsr1h	equ	0xFE2
 11252                           fsr1l	equ	0xFE1
 11253                           indf2	equ	0xFDF
 11254                           postinc2	equ	0xFDE
 11255                           postdec2	equ	0xFDD
 11256                           fsr2h	equ	0xFDA
 11257                           fsr2l	equ	0xFD9
 11258                           status	equ	0xFD8
 11259                           
 11260 ;; *************** function ___awmod *****************
 11261 ;; Defined at:
 11262 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awmod.c"
 11263 ;; Parameters:    Size  Location     Type
 11264 ;;  dividend        2    0[COMRAM] int 
 11265 ;;  divisor         2    2[COMRAM] int 
 11266 ;; Auto vars:     Size  Location     Type
 11267 ;;  sign            1    5[COMRAM] unsigned char 
 11268 ;;  counter         1    4[COMRAM] unsigned char 
 11269 ;; Return value:  Size  Location     Type
 11270 ;;                  2    0[COMRAM] int 
 11271 ;; Registers used:
 11272 ;;		wreg, status,2, status,0
 11273 ;; Tracked objects:
 11274 ;;		On entry : 0/0
 11275 ;;		On exit  : 0/0
 11276 ;;		Unchanged: 0/0
 11277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11278 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11279 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11281 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11282 ;;Total ram usage:        6 bytes
 11283 ;; Hardware stack levels used:    1
 11284 ;; This function calls:
 11285 ;;		Nothing
 11286 ;; This function is called by:
 11287 ;;		_op_time
 11288 ;; This function uses a non-reentrant model
 11289 ;;
 11290                           
 11291                           	psect	text65
 11292  00188A                     __ptext65:
 11293                           	opt stack 0
 11294  00188A                     ___awmod:
 11295                           	opt stack 22
 11296                           
 11297                           ;incstack = 0
 11298  00188A  0E00               	movlw	0
 11299  00188C  6E06               	movwf	___awmod@sign,c
 11300  00188E  AE02               	btfss	___awmod@dividend+1,7,c
 11301  001890  D006               	goto	i2l3907
 11302  001892  6C01               	negf	___awmod@dividend,c
 11303  001894  1E02               	comf	___awmod@dividend+1,f,c
 11304  001896  B0D8               	btfsc	status,0,c
 11305  001898  2A02               	incf	___awmod@dividend+1,f,c
 11306  00189A  0E01               	movlw	1
 11307  00189C  6E06               	movwf	___awmod@sign,c
 11308  00189E                     i2l3907:
 11309  00189E  AE04               	btfss	___awmod@divisor+1,7,c
 11310  0018A0  D004               	goto	i2l3911
 11311  0018A2  6C03               	negf	___awmod@divisor,c
 11312  0018A4  1E04               	comf	___awmod@divisor+1,f,c
 11313  0018A6  B0D8               	btfsc	status,0,c
 11314  0018A8  2A04               	incf	___awmod@divisor+1,f,c
 11315  0018AA                     i2l3911:
 11316  0018AA  5003               	movf	___awmod@divisor,w,c
 11317  0018AC  1004               	iorwf	___awmod@divisor+1,w,c
 11318  0018AE  B4D8               	btfsc	status,2,c
 11319  0018B0  D018               	goto	i2l3927
 11320  0018B2  0E01               	movlw	1
 11321  0018B4  6E05               	movwf	___awmod@counter,c
 11322  0018B6  D004               	goto	i2l3917
 11323  0018B8                     i2l3915:
 11324  0018B8  90D8               	bcf	status,0,c
 11325  0018BA  3603               	rlcf	___awmod@divisor,f,c
 11326  0018BC  3604               	rlcf	___awmod@divisor+1,f,c
 11327  0018BE  2A05               	incf	___awmod@counter,f,c
 11328  0018C0                     i2l3917:
 11329  0018C0  AE04               	btfss	___awmod@divisor+1,7,c
 11330  0018C2  D7FA               	goto	i2l3915
 11331  0018C4                     i2l3919:
 11332  0018C4  5003               	movf	___awmod@divisor,w,c
 11333  0018C6  5C01               	subwf	___awmod@dividend,w,c
 11334  0018C8  5004               	movf	___awmod@divisor+1,w,c
 11335  0018CA  5802               	subwfb	___awmod@dividend+1,w,c
 11336  0018CC  A0D8               	btfss	status,0,c
 11337  0018CE  D004               	goto	i2l3923
 11338  0018D0  5003               	movf	___awmod@divisor,w,c
 11339  0018D2  5E01               	subwf	___awmod@dividend,f,c
 11340  0018D4  5004               	movf	___awmod@divisor+1,w,c
 11341  0018D6  5A02               	subwfb	___awmod@dividend+1,f,c
 11342  0018D8                     i2l3923:
 11343  0018D8  90D8               	bcf	status,0,c
 11344  0018DA  3204               	rrcf	___awmod@divisor+1,f,c
 11345  0018DC  3203               	rrcf	___awmod@divisor,f,c
 11346  0018DE  2E05               	decfsz	___awmod@counter,f,c
 11347  0018E0  D7F1               	goto	i2l3919
 11348  0018E2                     i2l3927:
 11349  0018E2  5006               	movf	___awmod@sign,w,c
 11350  0018E4  B4D8               	btfsc	status,2,c
 11351  0018E6  D004               	goto	i2l3931
 11352  0018E8  6C01               	negf	___awmod@dividend,c
 11353  0018EA  1E02               	comf	___awmod@dividend+1,f,c
 11354  0018EC  B0D8               	btfsc	status,0,c
 11355  0018EE  2A02               	incf	___awmod@dividend+1,f,c
 11356  0018F0                     i2l3931:
 11357  0018F0  C001  F001         	movff	___awmod@dividend,?___awmod
 11358  0018F4  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 11359  0018F8  0012               	return	
 11360  0018FA                     __end_of___awmod:
 11361                           	opt stack 0
 11362                           tosu	equ	0xFFF
 11363                           tosh	equ	0xFFE
 11364                           tosl	equ	0xFFD
 11365                           pclatu	equ	0xFFB
 11366                           pclath	equ	0xFFA
 11367                           tblptru	equ	0xFF8
 11368                           tblptrh	equ	0xFF7
 11369                           tblptrl	equ	0xFF6
 11370                           tablat	equ	0xFF5
 11371                           prodh	equ	0xFF4
 11372                           prodl	equ	0xFF3
 11373                           intcon	equ	0xFF2
 11374                           intcon3	equ	0xFF0
 11375                           postinc0	equ	0xFEE
 11376                           fsr0h	equ	0xFEA
 11377                           fsr0l	equ	0xFE9
 11378                           wreg	equ	0xFE8
 11379                           fsr1h	equ	0xFE2
 11380                           fsr1l	equ	0xFE1
 11381                           indf2	equ	0xFDF
 11382                           postinc2	equ	0xFDE
 11383                           postdec2	equ	0xFDD
 11384                           fsr2h	equ	0xFDA
 11385                           fsr2l	equ	0xFD9
 11386                           status	equ	0xFD8
 11387                           tosu	equ	0xFFF
 11388                           tosh	equ	0xFFE
 11389                           tosl	equ	0xFFD
 11390                           pclatu	equ	0xFFB
 11391                           pclath	equ	0xFFA
 11392                           tblptru	equ	0xFF8
 11393                           tblptrh	equ	0xFF7
 11394                           tblptrl	equ	0xFF6
 11395                           tablat	equ	0xFF5
 11396                           prodh	equ	0xFF4
 11397                           prodl	equ	0xFF3
 11398                           intcon	equ	0xFF2
 11399                           intcon3	equ	0xFF0
 11400                           postinc0	equ	0xFEE
 11401                           fsr0h	equ	0xFEA
 11402                           fsr0l	equ	0xFE9
 11403                           wreg	equ	0xFE8
 11404                           fsr1h	equ	0xFE2
 11405                           fsr1l	equ	0xFE1
 11406                           indf2	equ	0xFDF
 11407                           postinc2	equ	0xFDE
 11408                           postdec2	equ	0xFDD
 11409                           fsr2h	equ	0xFDA
 11410                           fsr2l	equ	0xFD9
 11411                           status	equ	0xFD8
 11412                           
 11413                           	psect	text66
 11414  000000                     __ptext66:
 11415                           	opt stack 0
 11416                           tosu	equ	0xFFF
 11417                           tosh	equ	0xFFE
 11418                           tosl	equ	0xFFD
 11419                           pclatu	equ	0xFFB
 11420                           pclath	equ	0xFFA
 11421                           tblptru	equ	0xFF8
 11422                           tblptrh	equ	0xFF7
 11423                           tblptrl	equ	0xFF6
 11424                           tablat	equ	0xFF5
 11425                           prodh	equ	0xFF4
 11426                           prodl	equ	0xFF3
 11427                           intcon	equ	0xFF2
 11428                           intcon3	equ	0xFF0
 11429                           postinc0	equ	0xFEE
 11430                           fsr0h	equ	0xFEA
 11431                           fsr0l	equ	0xFE9
 11432                           wreg	equ	0xFE8
 11433                           fsr1h	equ	0xFE2
 11434                           fsr1l	equ	0xFE1
 11435                           indf2	equ	0xFDF
 11436                           postinc2	equ	0xFDE
 11437                           postdec2	equ	0xFDD
 11438                           fsr2h	equ	0xFDA
 11439                           fsr2l	equ	0xFD9
 11440                           status	equ	0xFD8
 11441                           
 11442                           	psect	rparam
 11443  0000                     tosu	equ	0xFFF
 11444                           tosh	equ	0xFFE
 11445                           tosl	equ	0xFFD
 11446                           pclatu	equ	0xFFB
 11447                           pclath	equ	0xFFA
 11448                           tblptru	equ	0xFF8
 11449                           tblptrh	equ	0xFF7
 11450                           tblptrl	equ	0xFF6
 11451                           tablat	equ	0xFF5
 11452                           prodh	equ	0xFF4
 11453                           prodl	equ	0xFF3
 11454                           intcon	equ	0xFF2
 11455                           intcon3	equ	0xFF0
 11456                           postinc0	equ	0xFEE
 11457                           fsr0h	equ	0xFEA
 11458                           fsr0l	equ	0xFE9
 11459                           wreg	equ	0xFE8
 11460                           fsr1h	equ	0xFE2
 11461                           fsr1l	equ	0xFE1
 11462                           indf2	equ	0xFDF
 11463                           postinc2	equ	0xFDE
 11464                           postdec2	equ	0xFDD
 11465                           fsr2h	equ	0xFDA
 11466                           fsr2l	equ	0xFD9
 11467                           status	equ	0xFD8
 11468                           
 11469                           	psect	temp
 11470  000043                     btemp:
 11471                           	opt stack 0
 11472  000043                     	ds	1
 11473  0000                     int$flags	set	btemp
 11474                           tosu	equ	0xFFF
 11475                           tosh	equ	0xFFE
 11476                           tosl	equ	0xFFD
 11477                           pclatu	equ	0xFFB
 11478                           pclath	equ	0xFFA
 11479                           tblptru	equ	0xFF8
 11480                           tblptrh	equ	0xFF7
 11481                           tblptrl	equ	0xFF6
 11482                           tablat	equ	0xFF5
 11483                           prodh	equ	0xFF4
 11484                           prodl	equ	0xFF3
 11485                           intcon	equ	0xFF2
 11486                           intcon3	equ	0xFF0
 11487                           postinc0	equ	0xFEE
 11488                           fsr0h	equ	0xFEA
 11489                           fsr0l	equ	0xFE9
 11490                           wreg	equ	0xFE8
 11491                           fsr1h	equ	0xFE2
 11492                           fsr1l	equ	0xFE1
 11493                           indf2	equ	0xFDF
 11494                           postinc2	equ	0xFDE
 11495                           postdec2	equ	0xFDD
 11496                           fsr2h	equ	0xFDA
 11497                           fsr2l	equ	0xFD9
 11498                           status	equ	0xFD8


Data Sizes:
    Strings     458
    Constant    42
    Data        0
    BSS         53
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     62      66
    BANK0           128     47      96
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_34(CODE[14]), STR_33(CODE[12]), STR_32(CODE[12]), STR_31(CODE[11]), 
		 -> STR_30(CODE[12]), STR_29(CODE[13]), STR_28(CODE[11]), STR_27(CODE[9]), 
		 -> STR_26(CODE[11]), STR_25(CODE[13]), STR_24(CODE[15]), STR_23(CODE[15]), 
		 -> STR_22(CODE[17]), STR_21(CODE[22]), STR_20(CODE[19]), STR_19(CODE[17]), 
		 -> STR_18(CODE[17]), STR_17(CODE[17]), STR_16(CODE[13]), STR_15(CODE[9]), 
		 -> STR_14(CODE[7]), STR_13(CODE[17]), STR_12(CODE[15]), STR_11(CODE[13]), 
		 -> STR_10(CODE[7]), STR_9(CODE[2]), STR_8(CODE[15]), STR_7(CODE[15]), 
		 -> STR_6(CODE[9]), STR_5(CODE[8]), STR_4(CODE[16]), STR_3(CODE[14]), 
		 -> STR_2(CODE[12]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    topDistributionState	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), top_distribution_move(), top_distribution_prepare(), top_distribution_idle(), 

    topRockerState	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), top_rocker_restore(), top_rocker_release(), solenoids_back(), 
		 -> solenoids_out(), top_rocker_idle(), 

    bottomRockerState	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), bottom_rocker_restore(), bottom_rocker_release(), bottom_rocker_idle(), 

    bottomDistributionState	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), bottom_distribution_move(), bottom_distribution_prepare(), bottom_distribution_idle(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _keypressed in COMRAM

    _keypressed->i2_printf
    _tot_sorted->i2_printf
    _tin_results->i2_printf
    _pop_results->i2_printf
    _op_time->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _main->_startSorting
    _startSorting->_bottom_rocker_idle
    _top_rocker_restore->_top_rocker_motor_cw
    _top_rocker_motor_cw->_printf
    _top_rocker_release->_printf
    _top_rocker_idle->_printf
    _top_distribution_prepare->_top_distribution_motor_ccw
    _top_distribution_prepare->_top_distribution_motor_cw
    _top_distribution_move->_top_distribution_motor_ccw
    _top_distribution_move->_top_distribution_motor_cw
    _solenoids_out->_pop_out
    _solenoids_back->_printf
    _initialization->_bottom_rocker_initial
    _bottom_rocker_initial->_printf
    _bottom_rocker_restore->_printf
    _bottom_rocker_release->_printf
    _bottom_rocker_idle->_printf
    _bottom_distribution_prepare->_bottom_distribution_motor_ccw
    _bottom_distribution_prepare->_bottom_distribution_motor_cw
    _bottom_distribution_move->_bottom_distribution_motor_ccw
    _bottom_distribution_move->_bottom_distribution_motor_cw
    _standby->_printf
    _set_time->_I2C_Master_Write
    _results->_printf
    _printf->___wmul
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _done_sorting->___wmul
    ___wmul->___awdiv
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   95835
                    _I2C_Master_Init
                       _done_sorting
                            _initLCD
                            _results
                           _set_time
                            _standby
                       _startSorting
 ---------------------------------------------------------------------------------
 (1) _startSorting                                         4     4      0   75709
                                             43 BANK0      4     4      0
                   Absolute function *
           _bottom_distribution_idle *
           _bottom_distribution_move *
        _bottom_distribution_prepare *
                 _bottom_rocker_idle *
              _bottom_rocker_release *
              _bottom_rocker_restore *
                            _initLCD
                     _initialization
                            _lcdInst
                             _printf
                     _solenoids_back *
                      _solenoids_out *
              _top_distribution_idle *
              _top_distribution_move *
           _top_distribution_prepare *
                    _top_rocker_idle *
                 _top_rocker_release *
                 _top_rocker_restore *
 ---------------------------------------------------------------------------------
 (2) _top_rocker_restore                                   3     3      0   13654
                                             39 BANK0      3     3      0
                            _initLCD
                            _lcdInst
                             _printf
                _top_rocker_motor_cw
 ---------------------------------------------------------------------------------
 (3) _top_rocker_motor_cw                                  3     3      0    6827
                                             36 BANK0      3     3      0
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _top_rocker_release                                   4     4      0    6895
                                             36 BANK0      4     4      0
                            _initLCD
                            _lcdInst
                             _printf
               _top_rocker_motor_ccw
 ---------------------------------------------------------------------------------
 (3) _top_rocker_motor_ccw                                 2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _top_rocker_idle                                      5     5      0    6963
                                             36 BANK0      5     5      0
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _top_distribution_prepare                             0     0      0       0
         _top_distribution_motor_ccw
          _top_distribution_motor_cw
 ---------------------------------------------------------------------------------
 (2) _top_distribution_move                                0     0      0       0
         _top_distribution_motor_ccw
          _top_distribution_motor_cw
 ---------------------------------------------------------------------------------
 (3) _top_distribution_motor_cw                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _top_distribution_motor_ccw                           2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _top_distribution_idle                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _solenoids_out                                        0     0      0       0
                            _pop_out
 ---------------------------------------------------------------------------------
 (3) _pop_out                                              2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _solenoids_back                                       4     4      0    6895
                                             36 BANK0      4     4      0
                            _go_back
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _go_back                                              2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _initialization                                       3     3      0   13654
                                             39 BANK0      3     3      0
        _bottom_distribution_initial
              _bottom_rocker_initial
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _bottom_rocker_initial                                3     3      0    6827
                                             36 BANK0      3     3      0
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _bottom_distribution_initial                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _bottom_rocker_restore                                3     3      0    6827
                                             36 BANK0      3     3      0
             _bottom_rocker_motor_cw
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _bottom_rocker_motor_cw                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _bottom_rocker_release                                3     3      0    6827
                                             36 BANK0      3     3      0
            _bottom_rocker_motor_ccw
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _bottom_rocker_motor_ccw                              2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _bottom_rocker_idle                                   7     7      0    7099
                                             36 BANK0      7     7      0
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _bottom_distribution_prepare                          0     0      0       0
      _bottom_distribution_motor_ccw
       _bottom_distribution_motor_cw
 ---------------------------------------------------------------------------------
 (2) _bottom_distribution_move                             0     0      0       0
      _bottom_distribution_motor_ccw
       _bottom_distribution_motor_cw
 ---------------------------------------------------------------------------------
 (3) _bottom_distribution_motor_cw                         2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _bottom_distribution_motor_ccw                        2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _bottom_distribution_idle                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _standby                                              6     6      0    7783
                                             36 BANK0      6     6      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _set_time                                             1     1      0     823
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _results                                              7     7      0    7031
                                             36 BANK0      7     7      0
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              31    23      8    6369
                                             14 BANK0     22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     386
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     549
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (6) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _done_sorting                                        14    12      2    3791
                                             14 BANK0     12    10      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    1316
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1145
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     724
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      65
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     503
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     395
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _keypressed                                          30    30      0   13152
                                             32 COMRAM    30    30      0
                            _op_time
                        _pop_results
                        _tin_results
                         _tot_sorted
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _tot_sorted                                           0     0      0    2338
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _tin_results                                          0     0      0    2338
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _pop_results                                          0     0      0    2338
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _op_time                                              0     0      0    3114
                            ___awmod
                          i2___awdiv
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) i2_printf                                            29    23      6    2068
                                             12 COMRAM    20    14      6
                            ___awmod (ARG)
                          i2___awdiv (ARG)
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (9) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (8) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (8) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) i2___awdiv                                            8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (9) ___awmod                                              6     2      4     424
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _done_sorting
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _initLCD
     _lcdInst
       _lcdNibble
   _results
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _set_time
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _standby
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _startSorting
     Absolute function(Fake) *
     _bottom_distribution_idle *
     _bottom_distribution_move *
       _bottom_distribution_motor_ccw
       _bottom_distribution_motor_cw
     _bottom_distribution_prepare *
       _bottom_distribution_motor_ccw
       _bottom_distribution_motor_cw
     _bottom_rocker_idle *
       _initLCD
         _lcdInst
           _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
           ___awdiv (ARG)
         _isdigit
         _putch
           _lcdNibble
     _bottom_rocker_release *
       _bottom_rocker_motor_ccw
       _initLCD
         _lcdInst
           _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
           ___awdiv (ARG)
         _isdigit
         _putch
           _lcdNibble
     _bottom_rocker_restore *
       _bottom_rocker_motor_cw
       _initLCD
         _lcdInst
           _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
           ___awdiv (ARG)
         _isdigit
         _putch
           _lcdNibble
     _initLCD *
       _lcdInst
         _lcdNibble
     _initialization *
       _bottom_distribution_initial
       _bottom_rocker_initial
         _initLCD
           _lcdInst
             _lcdNibble
         _lcdInst
           _lcdNibble
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___awdiv (ARG)
           _isdigit
           _putch
             _lcdNibble
       _initLCD
         _lcdInst
           _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
           ___awdiv (ARG)
         _isdigit
         _putch
           _lcdNibble
     _lcdInst *
       _lcdNibble
     _printf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
     _solenoids_back *
       _go_back
       _initLCD
         _lcdInst
           _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
           ___awdiv (ARG)
         _isdigit
         _putch
           _lcdNibble
     _solenoids_out *
       _pop_out
     _top_distribution_idle *
     _top_distribution_move *
       _top_distribution_motor_ccw
       _top_distribution_motor_cw
     _top_distribution_prepare *
       _top_distribution_motor_ccw
       _top_distribution_motor_cw
     _top_rocker_idle *
       _initLCD
         _lcdInst
           _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
           ___awdiv (ARG)
         _isdigit
         _putch
           _lcdNibble
     _top_rocker_release *
       _initLCD
         _lcdInst
           _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
           ___awdiv (ARG)
         _isdigit
         _putch
           _lcdNibble
       _top_rocker_motor_ccw
     _top_rocker_restore *
       _initLCD
         _lcdInst
           _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
           ___awdiv (ARG)
         _isdigit
         _putch
           _lcdNibble
       _top_rocker_motor_cw
         _initLCD
           _lcdInst
             _lcdNibble
         _lcdInst
           _lcdNibble
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___awdiv (ARG)
           _isdigit
           _putch
             _lcdNibble

 _keypressed (ROOT)
   _op_time
     ___awmod
     i2___awdiv
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   _pop_results
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   _tin_results
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   _tot_sorted
     i2_initLCD
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       ___awmod (ARG)
       i2___awdiv (ARG)
       i2___lwdiv (ARG)
       i2___lwmod (ARG)
         i2___lwdiv (ARG)
       i2___wmul (ARG)
       i2_isdigit (ARG)
       i2_putch (ARG)
         i2_lcdNibble
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     ___awmod (ARG)
     i2___awdiv (ARG)
     i2___lwdiv (ARG)
     i2___lwmod (ARG)
       i2___lwdiv (ARG)
     i2___wmul (ARG)
     i2_isdigit (ARG)
     i2_putch (ARG)
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2F      60       5       75.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3E      42       1       52.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A2      34        0.0%
DATA                 0      0      A2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Mar  8 14:53:15 2017

                                    l91 0CDC                            ___awdiv@sign 00B6  
                   ___wmul@multiplicand 00BB                      i2___lwdiv@dividend 0001  
                           __CFG_BORV$3 000000                           _solenoids_out 2206  
                          __CFG_CP0$OFF 000000                            __CFG_CP1$OFF 000000  
                          __CFG_CP2$OFF 000000                            __CFG_CP3$OFF 000000  
                           __CFG_OSC$HS 000000                                     l150 21F2  
                                   l501 127C                                     l523 0F40  
                                   l525 0F8C                                     l509 1956  
                                   l721 013A                                     l482 0FF4  
                                   l485 10D6                                     l389 1864  
                                   l498 1192                            __CFG_CPB$OFF 000000  
                                   _PEN 007E2A                            __CFG_CPD$OFF 000000  
                                   _SEN 007E28                          _solenoids_back 137E  
                                   _tot 003F                           ?_done_sorting 00BF  
                          ___awmod@sign 0006                    _topDistributionState 00A9  
                                   prod 000FF3                                     tosl 000FFD  
                                   wreg 000FE8                            __CFG_LVP$OFF 000000  
                           _total_start 008B                            __CFG_WDT$OFF 000000  
                                  l1113 15D2                                    l1166 1810  
                                  l1176 1AEC                                    l5011 2144  
                                  l5003 1F30                                    l5013 2148  
                                  l5021 2120                                    l5023 2124  
                                  l5113 0E3E                                    l5033 0CB2  
                                  l5051 0D06                                    l5131 19F6  
                                  l5203 1936                                    l5109 0E34  
                                  l5117 0E5E                                    l5037 0CBC  
                                  l5055 0D10                                    l5135 1A16  
                                  l5127 19EC                                    l5153 1BDC  
                                  l5073 0D7A                                    l5065 0D50  
                                  l5225 20FC                                    l5217 1EFE  
                                  l5321 13DE                                    l5059 0D30  
                                  l5227 2100                                    l5235 20D8  
                                  l5251 12AC                                    l5331 141E  
                                  l5413 1486                                    l5157 1BFC  
                                  l5149 1BD2                                    l5093 0DE4  
                                  l5069 0D5A                                    l5237 20DC  
                                  l5317 13D4                                    l5325 13FE  
                                  l5183 1F64                                    l4703 1802  
                                  l4711 1AA8                                    l5271 1300  
                                  l5255 12CC                                    l5247 12A2  
                                  l5335 1428                                    l5343 1458  
                                  l5425 14BA                                    l5441 150A  
                                  l4713 1AB4                                    l5505 1030  
                                  l5089 0DDA                                    l5097 0E04  
                                  l5281 133C                                    l5427 14C6  
                                  l5419 149C                                    l4715 1ABA  
                                  l5531 1110                                    l5515 105A  
                                  l5267 12F6                                    l5275 1320  
                                  l5339 1448                                    l5363 162E  
                                  l5355 1604                                    l5445 151E  
                                  l5437 14FC                                    l5429 14CC  
                                  l5605 0A4E                                    l4821 0246  
                                  l4813 0212                                    l5533 1116  
                                  l5509 103A                                    l4901 1C38  
                                  l5285 1346                                    l5381 1672  
                                  l5455 1556                                    l5615 0A78  
                                  l4719 1ADE                                    l4815 0224  
                                  l4743 0034                                    l5199 192C  
                                  l5391 1B76                                    l5359 160E  
                                  l5457 1566                                    l5609 0A58  
                                  l4841 02CA                                    l4833 02A2  
                                  l4825 027E                                    l4745 0046  
                                  l5537 1120                                    l4905 1C58  
                                  l5289 1366                                    l5377 1668  
                                  l5553 1168                                    l5545 1146  
                                  l5467 15C0                                    l5459 156C  
                                  l5635 0C74                                    l4691 17C0  
                                  l4675 1F8C                                    l4851 02FE  
                                  l4827 0288                                    l4763 0100  
                                  l4755 0084                                    l4739 0020  
                                  l5483 1A58                                    l5395 1B80  
                                  l5563 11C4                                    l5637 0C88  
                                  l4693 17CC                                    l4853 0350  
                                  l4861 03BC                                    l4845 02E4  
                                  l4749 0050                                    l5645 0EAA  
                                  l5493 1A8E                                    l5581 1252  
                                  l5565 11DC                                    l5557 1172  
                                  l4695 17D2                                    l4863 03C4  
                                  l4839 02BE                                    l4783 018E  
                                  l4767 0106                                    l5671 0F10  
                                  l5663 0EE6                                    l5487 1A62  
                                  l4943 1844                                    l5399 1BA0  
                                  l5567 11F4                                    l5735 16E6  
                                  l4849 02F8                                    l4785 0194  
                                  l4865 03D0                                    l5673 0F16  
                                  l5585 125C                                    l4859 03AA  
                                  l4779 0172                                    l5667 0EF0  
                                  l4939 183A                                    l4797 01D0  
                                  l5693 0F62                                    l5677 0F20  
                                  l4799 01D6                                    l5697 0F6C  
                                  l4897 1C2E                                    STR_1 FF2D  
                                  STR_2 FFA1                                    STR_3 FF3B  
                                  STR_4 FEC4                                    STR_5 FFE9  
                                  STR_6 FFE0                                    STR_7 FF10  
                                  STR_8 FF01                                    STR_9 FF61  
                          _startSorting 1140                                    _LATA 000F89  
                                  _LATB 000F8A                                    _LATC 000F8B  
                                  _LATD 000F8C                                    _LATE 000F8D  
                                  u5000 1220                                    u5010 1230  
                                  u4400 0D90                                    u4500 1F62  
                                  u5207 1680                                    u4408 0D94  
                                  u5217 13EC                                    u5307 1FCE  
                                  u5227 1436                                    u5317 1FF4  
                                  u5237 12BA                                    u5407 0DF2  
                                  u5327 2166                                    u5247 130E  
                                  u5167 1180                                    u4640 138A  
                                  u5417 0E4C                                    u5337 2186  
                                  u5257 1354                                    u5177 1202  
                                  u5507 0F7A                                    u5427 1BEA  
                                  u5347 1944                                    u5267 1B8E  
                                  u5187 126A                                    _RCEN 007E2B  
                                  u5517 1D66                                    u5437 201A  
                                  u5357 1C46                                    u5277 1852  
                                  u5197 161C                                    u5527 1D9C  
                                  u5447 2040                                    u5367 1A04  
                                  u5287 1876                                    u4648 138E  
                                  u5537 1984                                    u5457 2066  
                                  u5377 0CCA                                    u5297 1FA8  
                                  u5547 198E                                    u5467 208C  
                                  u5387 0D1E                                    u5557 19BA  
                                  u5477 112E                                    u5397 0D68  
                                  u4855 1B26                                    u5567 19C4  
                                  u5487 0EFE                                    u5497 0F2E  
                                  u4968 1198                                    u4969 11AC  
                                  u4978 11B0                                    u4988 11C8  
                                  u4998 11E0                                    _RSEN 007E29  
                  top_rocker_motor_cw@i 00D7                __size_of_top_rocker_idle 00FC  
     __size_of_top_distribution_prepare 0024               ?_top_distribution_prepare 0001  
                      ??_initialization 00D8                                    _fsm1 0091  
                                  _fsm2 00A3                                    _main 1692  
                                  _keys FE0B                                    _time 0080  
                                  fsr0h 000FEA                                    fsr1h 000FE2  
                    i2___lwdiv@quotient 0005                                    fsr2h 000FDA  
                                  fsr0l 000FE9                                    indf2 000FDF  
                                  fsr1l 000FE1                                    fsr2l 000FD9  
                                  btemp 0043                                    prodh 000FF4  
                                  prodl 000FF3                                    start 000E  
                         __CFG_IESO$OFF 000000                         __end_ofi2_putch 2252  
                         __CFG_MCLRE$ON 000000            __end_of_top_rocker_motor_ccw 1FBC  
                          ___param_bank 000000                             i2_lcdNibble 1C66  
                        ?_solenoids_out 0001                        ?_I2C_Master_Init 00BE  
                      ?_I2C_Master_Read 0001                        ?_I2C_Master_Wait 0001  
                      ?_I2C_Master_Stop 0001                  __end_of_solenoids_back 146A  
                                 ?_main 0001                                   _ACKEN 007E2C  
                                 _ACKDT 007E2D                         __end_of___awdiv 1528  
                                 STR_10 FFF8                                   STR_11 FF56  
                                 STR_12 FEF2                                   STR_20 FE4B  
                                 STR_13 FEA2                                   STR_21 FE35  
                                 STR_14 FFF1                                   STR_30 FF7D  
                                 STR_22 FEB3                                   STR_15 FFD7  
                                 STR_31 FFAD                                   STR_23 FEE3  
                                 STR_32 FF89                                   STR_16 FF63  
                                 STR_24 FED4                                   STR_33 FF95  
                                 STR_25 FF70                                   STR_17 FE6F  
                                 STR_26 FFC3                                   STR_34 FF1F  
                                 STR_18 FE80                                   STR_27 FFCE  
                                 STR_19 FE91                                   STR_35 FE5E  
                                 STR_28 FFB8                         __end_of___awmod 18FA  
                                 STR_29 FF49                         __end_of___lldiv 15E4  
                       ___awdiv@divisor 00B3                         __end_of___lwdiv 181A  
                       standby@keypress 00D7                         __end_of___lwmod 1AF6  
                                 i2l232 09C2                          ??_done_sorting 00C1  
                                 i2l721 04E6                         ___awdiv@counter 00B5  
                                 _PORTB 000F81                                   _TRISA 000F92  
                                 _TRISB 000F93                                   _TRISC 000F94  
                                 _TRISD 000F95                                   _TRISE 000F96  
                         __CFG_PWRT$OFF 000000                           __CFG_WRT0$OFF 000000  
                         __CFG_WRT1$OFF 000000                           __CFG_WRT2$OFF 000000  
                         __CFG_WRT3$OFF 000000                         __end_of_lcdInst 2238  
                        __CFG_EBTR0$OFF 000000                          __CFG_FCMEN$OFF 000000  
                        __CFG_EBTR1$OFF 000000                          __CFG_EBTR2$OFF 000000  
                        __CFG_EBTR3$OFF 000000                         __end_of_go_back 2196  
            ?_top_distribution_motor_cw 0001                           __CFG_WRTB$OFF 000000  
                         __CFG_WRTC$OFF 000000                           __CFG_WRTD$OFF 000000  
                       __end_of_initLCD 1DA8                          __CFG_EBTRB$OFF 000000  
                            i2isdigit@c 0003                   _bottom_rocker_initial 1C0E  
                       __end_of_dpowers FE26                                   _tabed 0097  
                       __end_of_isdigit 1F96                   _bottom_rocker_release 19CC  
                                 _putch 2218                         __end_of_op_time 1D5E  
                 _bottom_rocker_restore 1BB2                                   pclath 000FFA  
                                 tablat 000FF5                         __end_of_pop_out 2176  
                       __end_of_results 0FE4                        __end_ofi2___wmul 20C6  
                       __end_of_standby 1140                                   status 000FD8  
                   _top_rocker_motor_cw 181A         __size_of_bottom_rocker_motor_cw 0026  
                    __size_ofi2___awdiv 0084                          __CFG_PBADEN$ON 000000  
                         i2printf@width 001E                            standby@i_936 00D9  
                      __end_ofi2_printf 0726                      __size_ofi2___lwdiv 0052  
                    __size_ofi2___lwmod 0042                       startSorting@i_945 00DF  
                       __initialization 21B6                      __size_ofi2_lcdInst 000C  
                          __end_of_main 171E                            __end_of_keys FE1C  
                            i2printf@ap 0018                      __size_ofi2_initLCD 0046  
                    __size_ofi2_isdigit 001E                    ?_top_rocker_motor_cw 0001  
                       ?_solenoids_back 0001                                  ??_main 00E0  
                         __activetblptr 000003        __end_of_bottom_distribution_idle 1F3E  
      __end_of_bottom_distribution_move 2132                       ?_I2C_Master_Start 0001  
                     ?_I2C_Master_Write 00B2                      ??_I2C_Master_Start 00B2  
                                _ADCON0 000FC2                                  _ADCON1 000FC1  
                    ??_I2C_Master_Write 00B4                        ___awdiv@dividend 00B1  
                       i2lcdNibble@data 0002                                  ?_putch 0001  
                       i2lcdNibble@temp 0001                                  _INT1IE 007F83  
                                _INT1IF 007F80                                  i2l1166 1D04  
                                i2l1176 1E26                                  i2l4001 04B6  
                                i2l4013 0514                                  i2l4031 0564  
                                i2l4121 1758                                  i2l4033 0568  
                                i2l4017 052E                                  i2l4123 1760  
                                i2l4115 1742                                  i2l4019 0532  
                                i2l4141 1798                                  i2l4133 1780  
                                i2l4125 1764                                  i2l4109 1732  
                                i2l3405 21EA                                  i2l4061 05F0  
                                i2l3415 1CD2                                  i2l4055 05C4  
                                i2l4047 059A                                  i2l4137 178A  
                                i2l3417 1CDA                                  i2l4073 061C  
                                i2l4049 05AA                                  i2l3427 1CFA  
                                i2l3419 1CDE                                  i2l3443 1E1C  
                                i2l3435 1DFC                                  i2l4075 0624  
                                i2l4083 064A                                  i2l4067 0606  
                                i2l4059 05E8                                  i2l3437 1E04  
                                i2l4085 0650                                  i2l4093 06EC  
                                i2l4501 08AE                                  i2l3439 1E08  
                                i2l4087 069A                                  i2l4095 06FC  
                                i2l4079 0638                                  i2l4511 08D6  
                                i2l4097 0702                                  i2l4521 08FE  
                                i2l4505 08CA                                  i2l4433 07A6  
                                i2l4099 070A                                  i2l4531 092A  
                                i2l4515 08F2                                  i2l4507 08CE  
                                i2l4443 07CE                                  i2l4541 0952  
                                i2l4517 08F6                                  i2l4525 091A  
                                i2l4453 07F6                                  i2l4437 07C2  
                                i2l4429 079E                                  i2l3911 18AA  
                                i2l4551 097A                                  i2l4535 0932  
                                i2l4471 0846                                  i2l4463 0822  
                                i2l4447 07EA                                  i2l4439 07C6  
                                i2l4545 095A                                  i2l4481 086E  
                                i2l4473 084A                                  i2l4449 07EE  
                                i2l4457 0812                                  i2l3931 18F0  
                                i2l3923 18D8                                  i2l3915 18B8  
                                i2l3907 189E                                  i2l4563 09AA  
                                i2l4555 0982                                  i2l4539 094E  
                                i2l4483 0872                                  i2l4467 082A  
                                i2l4491 0896                                  i2l3917 18C0  
                                i2l4549 0976                                  i2l4477 0852  
                                i2l3919 18C4                                  i2l3927 18E2  
                                i2l4559 099E                                  i2l4487 087A  
                                i2l4567 09BA                                  i2l4497 08A6  
                                i2l3973 03FA                                  i2l3983 041E  
                                i2l3977 040A                                  i2l3979 0418  
                                i2l3997 04B2                                  i2l3989 0450  
                       solenoids_back@i 00D7                               ??i2_putch 0003  
                                _SSPADD 000FC8                                  _TRISC3 007CA3  
                                _TRISC4 007CA4                                  _SSPBUF 000FC9  
                        __CFG_XINST$OFF 000000                       ??_top_rocker_idle 00D5  
                       ??_solenoids_out 00B3                                  ___wmul 1EA4  
                             ??___awdiv 00B5                          __CFG_STVREN$ON 000000  
                             ??___awmod 0005                               ??___lldiv 00B9  
                             ??___lwdiv 00B5                               ??___lwmod 00BC  
                                clear_0 21BC                top_rocker_release@i_1183 00D8  
                      ___awdiv@quotient 00B7                   ??_top_rocker_motor_cw 00D5  
                       ___awmod@divisor 0003                         ___awmod@counter 0005  
                             ??_lcdInst 00B3                                  _printf 0012  
                             ??_go_back 00B1                          i2___awdiv@sign 0006  
                _bottom_rocker_motor_cw 2008                               ??_initLCD 00B4  
                          ?_pop_results 0001                               ??_isdigit 00B1  
                     __end_ofi2___awdiv 17A2                        __end_of_set_time 1A94  
                     __end_ofi2___lwdiv 1D0E                            __mediumconst FE0A  
                     __end_ofi2___lwmod 1E30                  ?_bottom_rocker_initial 0001  
                             ??_op_time 0021                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                             ??_pop_out 00B1                            ?_tin_results 0001  
                ?_bottom_rocker_release 0001                               ??_results 00D5  
               _bottomDistributionState 00A7                               ??_standby 00D5  
                  _top_rocker_motor_ccw 1F96                       __end_ofi2_lcdInst 225E  
                ?_bottom_rocker_restore 0001                              _Start_time 008F  
                     __end_ofi2_initLCD 1DEE                       __end_ofi2_isdigit 21F2  
                            __accesstop 0080                 __end_of__initialization 21CA  
      __size_of_bottom_rocker_motor_ccw 0026                           done_sorting@i 00C8  
                         ___rparam_used 000001                    __end_of_done_sorting 0C92  
            __end_of_top_rocker_release 1692              __end_of_top_rocker_restore 1BB2  
                    i2___lwmod@dividend 0008                          __pcstackCOMRAM 0001  
           __size_of_bottom_rocker_idle 01DA                           __end_of_putch 2228  
                           i2printf@idx 0017                             i2printf@val 001B  
   __end_of_bottom_distribution_initial 2246             _bottom_distribution_initial 2238  
                             ?i2___wmul 0001                      __size_of_lcdNibble 0068  
   __end_of_bottom_distribution_prepare 2156             _bottom_distribution_prepare 2132  
                           i2putch@data 0003                             keypressed@i 0032  
                             ?i2_printf 000D                   ?_top_rocker_motor_ccw 0001  
                 _top_distribution_idle 1EDA               _start_bottom_distribution 00AF  
                 _top_distribution_move 20C6                                 ??_putch 00B3  
                            __pbssBANK0 0080          ?_bottom_distribution_motor_ccw 0001  
               bottom_rocker_idle@i_271 00D8                 bottom_rocker_idle@i_273 00D9  
               bottom_rocker_idle@i_283 00DA                 bottom_rocker_idle@i_285 00DB  
     __size_of_bottom_distribution_idle 0032            ??_top_distribution_motor_ccw 00B1  
             ?_bottom_distribution_idle 0001       __size_of_bottom_distribution_move 0024  
             ?_bottom_distribution_move 0001                            ?i2_lcdNibble 0001  
                               ?___wmul 00B9                 keypressed@keypress_temp 003E  
                               ?_printf 00BF                              ??i2___wmul 0005  
                            ??i2_printf 0013             ??_top_distribution_motor_cw 00B1  
                               _SSPCON1 000FC6                                 _SSPCON2 000FC5  
                               _SSPSTAT 000FC7     __size_of_top_distribution_motor_ccw 0026  
                               i2_putch 2246                       __end_of_lcdNibble 19CC  
                               __Hparam 0000                                 __Lparam 0000  
                             ?_set_time 0001                        ??_solenoids_back 00D5  
                               ___awdiv 146A                                 ___awmod 188A  
                               ___lldiv 1528                         __size_of___wmul 0036  
                               ___lwdiv 17A2                                 ___lwmod 1A94  
                               __pcinit 21B6                                 __ramtop 1000  
                               _lcdInst 2228                                 __ptext0 1692  
                               __ptext1 1140                                 __ptext2 15E4  
                               __ptext3 137E                                 __ptext4 2206  
                               __ptext5 1282                                 __ptext6 1B56  
                               __ptext7 181A                                 __ptext8 1F96  
                               __ptext9 20C6                                 _labeled 00A1  
                               _go_back 2176                         __size_of_printf 03DE  
                               _initLCD 1D5E                       __end_of_hexpowers FE2E  
                               _dpowers FE1C                                 _isdigit 1F6C  
                      ___awmod@dividend 0001                    done_sorting@End_time 00C9  
                ??_top_rocker_motor_ccw 00B1                  ?_top_distribution_idle 0001  
                               _op_time 1D0E                              _keypressed 0008  
                ?_top_distribution_move 0001                __size_of_I2C_Master_Init 0060  
              __size_of_I2C_Master_Read 002E                                 _pop_can 009B  
              __size_of_I2C_Master_Wait 0014                                 _tin_can 009D  
                     __end_of_real_time FE35                __size_of_I2C_Master_Stop 0008  
                               _pop_out 2156                                 _results 0E6C  
                  __size_of_pop_results 003A                                 _standby 0FE4  
              _top_distribution_prepare 20EA                          __pintcode_body 0726  
                       _top_rocker_idle 1282                    end_of_initialization 21CA  
                  __size_of_tin_results 003A                 _bottom_rocker_motor_ccw 202E  
                         startSorting@i 00DE                   __size_of_done_sorting 0294  
                               int_func 0726                     i2___wmul@multiplier 0001  
                        _operation_time 0041               __size_of_I2C_Master_Start 0008  
             __size_of_I2C_Master_Write 000A                         ___lldiv@divisor 00B5  
                       ___lldiv@counter 00BD               _top_distribution_motor_cw 1FBC  
                            ??_set_time 00B4                                 printf@c 00D4  
                               printf@f 00BF                        I2C_Master_Init@c 00BE  
                      I2C_Master_Read@a 00B2                                 postdec2 000FDD  
                               postinc0 000FEE                                 postinc2 000FDE  
               __size_of_initialization 006A                 ?_bottom_rocker_motor_cw 0001  
                             _PORTAbits 000F80                               _PORTBbits 000F81  
                             _PORTCbits 000F82                 ??_bottom_rocker_initial 00D5  
               ??_bottom_rocker_release 00D5                 ??_bottom_rocker_restore 00D5  
                          _done_sorting 09FE                     top_rocker_release@i 00D7  
                             i2___awdiv 171E                       i2___lwdiv@divisor 0003  
                             i2___lwdiv 1CBC                               i2___lwmod 1DEE  
                     i2___lwdiv@counter 0007                    results@keypress_temp 00D8  
                             i2_lcdInst 2252                             printf@width 00D2  
    __end_of_top_distribution_motor_ccw 2008              _top_distribution_motor_ccw 1FE2  
                             i2_initLCD 1DA8                      i2___awdiv@dividend 0001  
                            _tot_sorted 2196                     top_rocker_restore@i 00DA  
                             i2_isdigit 21D4             __end_of_top_rocker_motor_cw 188A  
        __end_of_bottom_rocker_motor_cw 202E                   __end_of_solenoids_out 2218  
                        __end_of___wmul 1EDA                    __size_ofi2_lcdNibble 0056  
                         i2lcdInst@data 0003                      _top_rocker_release 15E4  
                      i2___wmul@product 0005                          __end_of_printf 03F0  
               __end_of_top_rocker_idle 137E                      _top_rocker_restore 1B56  
                          i2printf@flag 001D                            i2printf@prec 001A  
                   start_initialization 21B6                             ?_keypressed 0001  
                    i2___awdiv@quotient 0007                       __size_ofi2___wmul 0026  
             ??_bottom_rocker_motor_ccw 00B1                               i2printf@c 0020  
                             i2printf@f 000D                     ?_top_rocker_release 0001  
                            ?i2___awdiv 0001                           ?_startSorting 0001  
                   ?_top_rocker_restore 0001                              ?i2___lwdiv 0001  
                            ?i2___lwmod 0008                       __size_ofi2_printf 0336  
  __end_of_bottom_distribution_motor_cw 207A   __size_of_bottom_distribution_motor_cw 0026  
          _bottom_distribution_motor_cw 2054                       ??_I2C_Master_Init 00C2  
                     ??_I2C_Master_Read 00B2                       ??_I2C_Master_Wait 00B1  
                            ?i2_lcdInst 0001                       ??_I2C_Master_Stop 00B2  
                            ?i2_initLCD 0001                              ?i2_isdigit 0001  
            __end_of_bottom_rocker_idle 0E6C                    ??_top_rocker_release 00D5  
                              ??___wmul 00BD                    ??_top_rocker_restore 00D8  
       ??_bottom_distribution_motor_ccw 00B1                        __CFG_LPT1OSC$OFF 000000  
              done_sorting@total_second 00C6                                ??_printf 00C7  
                           __pbssCOMRAM 003F                           __pcstackBANK0 00B1  
                     i2___lwmod@divisor 000A                       i2___lwmod@counter 000C  
                        ??_startSorting 00DC                            _isdigit$1437 00B2  
                              ?i2_putch 0001           ?_bottom_distribution_motor_cw 0001  
                           ?_tot_sorted 0001                        _I2C_Master_Start 2270  
                     _bottomRockerState 00A5                        _I2C_Master_Write 225E  
                      ___lwdiv@dividend 00B1                       __CFG_CCP2MX$PORTC 000000  
       __end_of_bottom_rocker_motor_ccw 2054                     __size_of_keypressed 09F6  
                             __pintcode 0008                           __pmediumconst FE0A  
                             _lcdNibble 1964                                ?___awdiv 00B1  
                              ?___awmod 0001                          _initialization 18FA  
                              ?___lldiv 00B1                                ?___lwdiv 00B1  
                              ?___lwmod 00B8                       __size_of_set_time 0062  
                              ?_lcdInst 0001              ??_top_distribution_prepare 00B3  
               ??_top_distribution_idle 00B1                                ?_go_back 0001  
               ??_top_distribution_move 00B3      __size_of_top_distribution_motor_cw 0026  
                              ?_initLCD 0001                                ?_isdigit 0001  
                      ?_top_rocker_idle 0001                  bottom_rocker_initial@i 00D7  
                              ?_op_time 0001                                ?_pop_out 0001  
                              ?_results 0001                               _hexpowers FE26  
                              ?_standby 0001                        ___lwdiv@quotient 00B6  
                           ??i2___awdiv 0005                             ??i2___lwdiv 0005  
                           ??i2___lwmod 000C                  bottom_rocker_release@i 00D7  
                        __size_of_putch 0010                               _real_time FE2E  
                       keypressed@i_360 0039                         keypressed@i_361 003A  
                       keypressed@i_362 003B                         keypressed@i_354 0033  
                       keypressed@i_363 003C                         keypressed@i_355 0034  
                       keypressed@i_364 003D                         keypressed@i_356 0035  
                       keypressed@i_357 0036                         keypressed@i_358 0037  
                       keypressed@i_359 0038                _bottom_distribution_idle 1F0C  
                           ??i2_lcdInst 0003                _bottom_distribution_move 210E  
                        ___wmul@product 00BD                                _LATAbits 000F89  
                              _LATBbits 000F8A                                _LATCbits 000F8B  
                              _LATDbits 000F8C                                _LATEbits 000F8D  
                           ??i2_initLCD 0004                             ??i2_isdigit 0001  
                bottom_rocker_restore@i 00D7                  __end_of_initialization 1964  
                              i2u560_47 0834                                i2u561_47 085C  
                              i2u570_47 1DE2                                i2u562_47 0884  
                              i2u571_47 1C7E                                i2u563_47 08B8  
                              i2u572_47 1C88                                i2u564_47 08E0  
                              i2u573_47 1CAA                                i2u565_47 0908  
                              i2u557_47 07B0                                i2u574_47 1CB4  
                              i2u566_47 093C                                i2u558_47 07D8  
                              i2u567_47 0964                                i2u559_47 0800  
                              i2u568_47 098C                                i2u569_47 1DAE  
                      __CFG_WDTPS$32768 000000                              ?_lcdNibble 0001  
                     ___wmul@multiplier 00B9                                i2___wmul 20A0  
 __end_of_bottom_distribution_motor_ccw 20A0  __size_of_bottom_distribution_motor_ccw 0026  
         _bottom_distribution_motor_ccw 207A                           lcdNibble@data 00B2  
                         ??_pop_results 0021                               _total_end 0087  
                            printf@flag 00D1                           lcdNibble@temp 00B1  
        __size_of_bottom_rocker_initial 0058                              printf@prec 00CE  
         __end_of_bottom_rocker_initial 1C66       __end_of_top_distribution_motor_cw 1FE2  
                   __size_of_tot_sorted 0020          __size_of_bottom_rocker_release 0066  
                     i2___awdiv@divisor 0003           __end_of_bottom_rocker_release 1A32  
                     i2___awdiv@counter 0005                           ??_tin_results 0021  
                              i2_printf 03F0          __size_of_bottom_rocker_restore 005C  
         __end_of_bottom_rocker_restore 1C0E           __size_of_top_rocker_motor_ccw 0026  
                   I2C_Master_Read@temp 00B3                         initialization@i 00DA  
                           _bottom_move 00AD                           _tin_can_label 009F  
                      __size_ofi2_putch 000C                      keypressed@keypress 0031  
           ?_top_distribution_motor_ccw 0001                                __Hrparam 0000  
                       ?_initialization 0001                                __Lrparam 0000  
                    __CFG_BOREN$SBORDIS 000000          ??_bottom_distribution_motor_cw 00B1  
                  __end_of_startSorting 1282                        __size_of___awdiv 00BE  
                      __size_of___awmod 0070                   i2___wmul@multiplicand 0003  
                      __size_of___lldiv 00BC                        __size_of___lwdiv 0078  
                      __size_of___lwmod 0062                   top_rocker_idle@i_1167 00D8  
                 top_rocker_idle@i_1169 00D9            ?_bottom_distribution_initial 0001  
                      __size_of_lcdInst 0010                        __size_of_go_back 0020  
                       _I2C_Master_Init 1AF6                         _I2C_Master_Read 1F3E  
                      __size_of_initLCD 004A                 __size_of_solenoids_back 00EC  
          ?_bottom_distribution_prepare 0001                         _I2C_Master_Wait 21F2  
                       _I2C_Master_Stop 2268                            ??_keypressed 0021  
                      __size_of_isdigit 002A                     bottom_rocker_idle@i 00D7  
                       ___lwdiv@divisor 00B3                         ___lwdiv@counter 00B5  
                      __size_of_op_time 0050                                __ptext10 1EDA  
                              __ptext11 20EA                                __ptext20 0C92  
                              __ptext12 1FBC                                __ptext21 1BB2  
                              __ptext13 1FE2                                __ptext30 1A32  
                              __ptext22 2008                                __ptext14 2156  
                              __ptext31 0E6C                                __ptext23 202E  
                              __ptext15 2176                                __ptext40 09FE  
                              __ptext32 0012                                __ptext24 210E  
                              __ptext16 18FA                                __ptext41 1EA4  
                              __ptext33 2218                                __ptext25 1F0C  
                              __ptext17 1C0E                                __ptext42 146A  
                              __ptext34 1F6C                                __ptext26 2132  
                              __ptext18 2238                                __ptext51 2196  
                              __ptext43 225E                                __ptext35 1A94  
                              __ptext27 2054                                __ptext19 19CC  
                              __ptext60 1CBC                                __ptext52 1E30  
                              __ptext44 2268                                __ptext36 17A2  
                              __ptext28 207A                                __ptext61 1DA8  
                              __ptext53 1E6A                                __ptext45 2270  
                              __ptext37 1D5E                                __ptext29 0FE4  
                              __ptext62 2252                                __ptext54 1D0E  
                              __ptext46 1F3E                                __ptext38 2228  
                              __ptext63 1C66                                __ptext55 03F0  
                              __ptext47 21F2                                __ptext39 1964  
                              __ptext64 171E                                __ptext56 2246  
                              __ptext48 1AF6                                __ptext65 188A  
                              __ptext57 21D4                                __ptext49 1528  
                              __ptext66 0000                                __ptext58 20A0  
                              __ptext59 1DEE                        __size_of_pop_out 0020  
                      __size_of_results 0178                    solenoids_back@i_1176 00D8  
                      __size_of_standby 015C                     __end_of_pop_results 1EA4  
                        i2_isdigit$1437 0002                       _done_sorting$1796 00C4  
                   __end_of_tin_results 1E6A                           __size_of_main 008C  
                             set_time@i 00B4                                _set_time 1A32  
                         ??i2_lcdNibble 0001                             ??_lcdNibble 00B1  
                    __end_of_keypressed 09FE                                int$flags 0043  
                              _top_move 0095                               printf@idx 00CB  
                             printf@val 00CF        __end_of_top_distribution_prepare 210E  
          __size_of_top_rocker_motor_cw 0070                      _bottom_rocker_idle 0C92  
                             putch@data 00B3                __end_of_I2C_Master_Start 2278  
                  standby@keypress_temp 00D8                __end_of_I2C_Master_Write 2268  
                            _INTCONbits 000FF2           ??_bottom_distribution_initial 00B1  
         ??_bottom_distribution_prepare 00B3                     ?_bottom_rocker_idle 0001  
                              isdigit@c 00B3                                intlevel2 0000  
                __size_of_solenoids_out 0012                        ___lwmod@dividend 00B8  
                      ___lldiv@dividend 00B1                         results@keypress 00D7  
                          ??_tot_sorted 0021                  _start_top_distribution 0093  
                      top_rocker_idle@i 00D7                    ??_bottom_rocker_idle 00D5  
                              results@i 00D9                          _topRockerState 00AB  
                           _pop_can_tab 0099             __size_of_top_rocker_release 00AE  
                              printf@ap 00CC             __size_of_top_rocker_restore 005C  
               __end_of_I2C_Master_Init 1B56                 __end_of_I2C_Master_Read 1F6C  
                              standby@i 00DA                 __end_of_I2C_Master_Wait 2206  
               __end_of_I2C_Master_Stop 2270                             lcdInst@data 00B3  
                   __end_ofi2_lcdNibble 1CBC                ?_bottom_rocker_motor_ccw 0001  
        __size_of_top_distribution_idle 0032                        ___lldiv@quotient 00B9  
                     I2C_Master_Write@d 00B2                         ___lwmod@divisor 00BA  
         __end_of_top_distribution_idle 1F0C          __size_of_top_distribution_move 0024  
                           _pop_results 1E6A           __end_of_top_distribution_move 20EA  
                       ___lwmod@counter 00BC              ??_bottom_distribution_idle 00B1  
            ??_bottom_distribution_move 00B3                      __end_of_tot_sorted 21B6  
                           _tin_results 1E30                            results@i_961 00DB  
                          results@i_959 00DA    __size_of_bottom_distribution_initial 000E  
              ??_bottom_rocker_motor_cw 00B1                   __size_of_startSorting 0142  
  __size_of_bottom_distribution_prepare 0024  
